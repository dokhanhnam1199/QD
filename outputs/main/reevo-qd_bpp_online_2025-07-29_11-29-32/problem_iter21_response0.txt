```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using hybrid Best Fit/Worst Fit heuristic.

    If the item size > 0.5 (large), uses Best Fit (minimize slack). For small items,
    uses Worst Fit (allocate smallest item to largest remaining bin). Only 
    feasible bins are considered.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    if item > 0.5:
        priority_values = -(bins_remain_cap - item)  # Best Fit
    else:
        priority_values = bins_remain_cap  # Worst Fit
    priority = np.where(can_fit, priority_values, -np.inf)
    return priority
```
