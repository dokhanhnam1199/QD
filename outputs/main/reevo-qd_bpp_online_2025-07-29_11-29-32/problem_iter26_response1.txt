```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Linear blend of Best/Worst Fit based on item size with tiebreaker for equal residuals.
    
    Best Fit dominates for large items (item > 0.5), Worst Fit for small items (item < 0.5),
    with smooth linear transition. Tiebreaker ensures minimal residual preference.
    """
    can_fit = bins_remain_cap >= item
    if not can_fit.any():
        return np.full_like(bins_remain_cap, -np.inf)
        
    residual = bins_remain_cap - item
    weight = 1.0 - 2.0 * item  # Blends Best (neg) and Worst (pos) Fit
    # Use small epsilon to break ties favoring minimal residual
    return np.where(can_fit, weight * residual - 1e-9 * residual, -np.inf)
```
