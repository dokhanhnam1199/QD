```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit (large items) and worst-fit (small items) using dynamic thresholds.
    
    Bins are prioritized based on item size relative to estimated bin capacity:
    - Large items (item ≥ 0.5 * bin_capacity): best-fit (minimize slack)
    - Small items (item ≤ 0.25 * bin_capacity): worst-fit (maximize remaining capacity)
    - Medium items: Smooth blend between strategies
    
    Args:
        item: Size of item to be packed.
        bins_remain_cap: Array of current remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score for each bin.
    """
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    THRESH_HIGH, THRESH_LOW = 0.5, 0.25
    bin_cap = np.max(bins_remain_cap)
    if bin_cap <= 0:
        return -np.inf * np.ones_like(bins_remain_cap)
    
    can_fit = bins_remain_cap >= item
    high_threshold = THRESH_HIGH * bin_cap
    low_threshold = THRESH_LOW * bin_cap
    
    if item >= high_threshold:
        priority = -(bins_remain_cap - item)
    elif item <= low_threshold:
        priority = bins_remain_cap
    else:
        blend_weight = (item - low_threshold) / (high_threshold - low_threshold) if high_threshold > low_threshold else 1.0
        best_prio = -(bins_remain_cap - item)
        worst_prio = bins_remain_cap
        priority = blend_weight * best_prio + (1 - blend_weight) * worst_prio
    
    return np.where(can_fit, priority, -np.inf)
```
