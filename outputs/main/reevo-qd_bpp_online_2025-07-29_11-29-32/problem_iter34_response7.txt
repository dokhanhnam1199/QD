```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive slack preservation with item-size-dependent weighting and deterministic tie-breaking.
    Large items (>0.5) use Best Fit; small items use dynamic slack prioritization based on item size.
    """
    THRESHOLD = 0.5
    EPSILON = 1e-8  # Ensures deterministic bin selection during ties

    # Feasibility mask: only consider bins that can fit the item
    can_fit = bins_remain_cap >= item
    
    # Best Fit strategy for large items: minimize post-placement slack
    bf_slack = bins_remain_cap - item
    bf_priority = -bf_slack  # Higher values = smaller slack (tighter fit)
    
    # Dynamic slack preservation for small items: 
    # Weight increases as item size decreases to maximize available space preservation
    wf_weight = 1.0 + (1.0 - item)  # Smaller items get higher slack sensitivity
    wf_slack = bins_remain_cap
    wf_priority = (wf_slack * wf_weight) + (EPSILON * np.arange(len(wf_slack)))  # Slack maximization + tie-breaker
    
    # Combine strategies based on item size
    priority = np.where(
        can_fit,
        np.where(
            item > THRESHOLD,  # Large item strategy
            bf_priority,
            wf_priority        # Small item strategy
        ),
        -np.inf  # Infeasible bins
    )
    
    return priority
```
