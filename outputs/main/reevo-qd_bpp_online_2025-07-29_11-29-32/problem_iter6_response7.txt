```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins balancing best-fit and worst-fit heuristics with tie-breaking.
    
    Dynamically scores bins using item size-dependent weighting of residual capacity, with a small
    tie-breaker term to handle neutral cases. Invalid bins are penalized with -âˆž.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    weight = 1 - 2 * item  # Weight blends best-fit (negative) & worst-fit (positive)
    base_priority = residual * weight
    
    # Tie-breaker for neutral cases (e.g., item == 0.5): prefer smaller residual (best-fit)
    tie_breaker = -residual * 1e-8  # Small negative multiplier to prioritize lower residuals
    
    priority = np.where(can_fit, base_priority + tie_breaker, -np.inf)
    return priority
```
