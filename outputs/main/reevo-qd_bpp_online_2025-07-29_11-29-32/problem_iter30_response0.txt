```python
import math
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved priority for online bin packing via smooth sigmoid-based weight blending best/worst fit.
    
    Uses a sigmoid-shaped transition centered at item_size=0.5 for smooth behavior, with numerical bias 
    to ensure stable best-fit selection at thresholds. Weight bias pushes zero-weight edge cases toward best-fit.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Vectorized filter for valid bins (numerically stable comparison)
    can_fit = (bins_remain_cap >= item - 1e-9)  # Numerical stability
    residual = bins_remain_cap - item

    # Smooth, continuous weight function via sigmoidal transition
    beta = 10  # controls transition sharpness
    sigmoid_input = beta * (item - 0.5)
    decay_term = math.exp(-sigmoid_input)  # Forward biased to prevent overflow
    sigmoid = 1.0 / (1.0 + decay_term)
    weight = 1.0 - 2.0 * sigmoid  # [small items: +ve (worst), large items: -ve (best)]

    # Bias toward best-fit for numerical stability and threshold robustness
    weight -= 1e-6  # Ensures best-fit if weight would otherwise be zero

    # Compute final priorities: valid -> residual * weight, invalid -> -infty
    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
