```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns blended priority scores using item-size thresholds for Best/Worst Fit strategies.
    
    For large items (>0.5), prioritize bins by Best Fit (smallest residual space).
    For small items (<=0.5), prioritize bins by Worst Fit (largest available space).
    Infeasible bins receive -inf priority.
    """
    can_fit = bins_remain_cap >= item
    best_priority = -(bins_remain_cap - item)  # Minimize leftover (Best Fit)
    worst_priority = bins_remain_cap          # Maximize available space (Worst Fit)
    
    # Select strategy based on item size threshold (0.5)
    use_best = item > 0.5
    priority = np.where(use_best, best_priority, worst_priority)
    
    # Apply feasibility mask
    return np.where(can_fit, priority, -np.inf)
```
