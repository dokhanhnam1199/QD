```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit with smooth, item-size-dependent transitions.
    Uses a hyperbolic tangent to ensure smooth blending around the 0.5 threshold, ensuring numerical stability
    and optimal gap avoidance for large items while preserving space efficiency for small items.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Compute smooth weight using tanh around 0.5 threshold with negative epsilon for robustness
    threshold = 0.5
    transition = threshold - item  # Controls centering around threshold
    steepness = 10.0              # Controls smoothness (higher=kinkier)
    weight = np.tanh(transition * steepness)  # positive for s < 0.5, negative for s > 0.5
    weight -= 1e-6                # Avoid zero weights at threshold
    
    # Prioritize bins based on sign-dependent residual scaling
    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
