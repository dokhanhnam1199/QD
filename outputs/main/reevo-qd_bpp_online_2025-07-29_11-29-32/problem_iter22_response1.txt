```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using Best Fit with tie-breaking.

    Bins that can fit the item are prioritized by smallest leftover space.
    Tie-breaker prefers bins with larger remaining capacity before placement.
    Infeasible bins receive -inf priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    # Primary priority: minimize leftover space (-leftover)
    # Secondary priority: prefer larger remaining capacities (tie-breaker)
    epsilon = 1e-9  # Small enough to not override primary priority
    priority = np.where(can_fit, -(bins_remain_cap - item) + epsilon * bins_remain_cap, -np.inf)
    return priority
```
