```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic threshold strategy combining Best/Worst Fit for efficient packing and adaptability."""
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    
    # Determine threshold based on current bin statistics (adaptive for bin distribution)
    if bins_remain_cap.size == 0:
        threshold = 0.5  # Default for edge cases (e.g., first item)
    else:
        # Use mean for gradual adaptation to current bin capacities
        threshold = np.mean(bins_remain_cap)
    
    # Apply situational strategy based on item size vs threshold
    if item >= threshold:
        # Best Fit: prioritize bins with minimal slack (least wasted space)
        priority = -slack
    else:
        # Worst Fit: prioritize bins with maximum remaining capacity (preserving large gaps for future items)
        priority = bins_remain_cap
    
    # Mask invalid bins (where item cannot fit)
    return np.where(can_fit, priority, -np.inf)
```
