```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using threshold-based Best Fit for large and Worst Fit for small items.
    
    Directly switches between Best Fit (minimizing slack) for items > 0.5 and Worst Fit (preserving flexibility)
    for items <= 0.5. Eliminates non-linear terms while maintaining adaptive strategy selection.
    """
    can_fit = bins_remain_cap >= item
    if item > 0.5:
        # Best Fit: prioritize bins with least slack (minimize rem_cap - item)
        priority = - (bins_remain_cap - item)
    else:
        # Worst Fit: prioritize bins with most remaining capacity
        priority = bins_remain_cap.copy()
    return np.where(can_fit, priority, -np.inf)
```
