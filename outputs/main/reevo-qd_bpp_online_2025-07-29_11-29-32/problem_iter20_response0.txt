```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved priority combining Best Fit for large and Worst Fit for small items with tie-breaker for optimal space utilization."""
    can_fit = bins_remain_cap >= item
    # Primary strategy: dynamic Best/Worst Fit based on item size
    primary = bins_remain_cap * (1 - 2 * item) + item**2
    # Secondary tie-breaker: prefer fuller bins (-bins_remain_cap) with ε-weight
    ε = 1e-6
    secondary = -bins_remain_cap * ε
    # Combine primary and secondary scores
    return np.where(can_fit, primary + secondary, -np.inf)
```
