```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit and Worst Fit strategies using a smoothed threshold window.
    
    For very small items (s < 0.4), prioritize largest remaining capacities (Worst Fit). 
    For very large items (s > 0.6), prioritize minimizing slack (Best Fit).
    In between [0.4, 0.6], linearly interpolate between these strategies.
    """
    can_fit = bins_remain_cap >= item
    # Vectorized calculation of Best/Worst priorities
    best_priority = - (bins_remain_cap - item)
    worst_priority = bins_remain_cap

    # No conditionals: blend region handled via smooth transitions
    # Soft threshold blending weights
    alpha = np.clip((item - 0.4) / 0.2, 0, 1)
    # Linear combination of Best/Worst priorities
    priority = alpha * best_priority + (1 - alpha) * worst_priority
    
    return np.where(can_fit, priority, -np.inf)
```
