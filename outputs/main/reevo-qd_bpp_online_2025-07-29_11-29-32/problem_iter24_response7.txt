```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores based on a hybrid heuristic using Best Fit for large items and Worst Fit for small items.
    
    Bins that can fit the item are prioritized with Best Fit if the item exceeds half the bin's remaining capacity, 
    and with Worst Fit otherwise. Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    is_small_item = item <= 0.5 * bins_remain_cap
    
    best_fit_score = -(bins_remain_cap - item)  # Best Fit: prioritize small leftover
    worst_fit_score = bins_remain_cap          # Worst Fit: prioritize bins with larger remaining space
    
    best_mask = can_fit & ~is_small_item
    worst_mask = can_fit & is_small_item
    
    priority = np.where(best_mask, best_fit_score, -np.inf)
    priority = np.where(worst_mask, worst_fit_score, priority)
    
    return priority
```
