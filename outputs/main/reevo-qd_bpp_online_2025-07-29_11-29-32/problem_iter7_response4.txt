```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit heuristics adaptively.
    
    For large items, prioritizes bins with smallest residual capacity (best-fit).
    For small items, prioritizes bins with largest remaining capacity (worst-fit).
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    alpha = item  # Weighting factor based on item size (threshold-free adaptation)
    best_component = -(bins_remain_cap - item)  # Best-fit: minimize slack
    worst_component = bins_remain_cap         # Worst-fit: preserve space
    score = alpha * best_component + (1 - alpha) * worst_component  # Dynamic hybrid strategy
    priority = np.where(can_fit, score, -np.inf)
    return priority
```
