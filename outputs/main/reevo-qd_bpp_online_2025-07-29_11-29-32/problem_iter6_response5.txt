```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved priority function considering tight fits and bin utilization balance.
    
    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin. Higher values indicate better fit.
    """
    can_fit = bins_remain_cap >= item
    filled_before = 1.0 - bins_remain_cap  # Assuming bin capacity is normalized to 1.0
    base_priority = item - bins_remain_cap  # Prioritize minimal leftover space
    # Add a small bonus to prefer more filled bins (tie-breaker for same leftover)
    utilization_bonus = 1e-6 * filled_before
    priority = base_priority + utilization_bonus
    return np.where(can_fit, priority, -np.inf)
```
