```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit for items >= 1/3 and Worst Fit for smaller items."""
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    if item >= 1/3:
        # Best Fit: prioritize bins with minimal slack for medium/large items
        priority = -slack
    else:
        # Worst Fit: prioritize bins with maximum remaining capacity for small items
        priority = bins_remain_cap
    return np.where(can_fit, priority, -np.inf)
```
