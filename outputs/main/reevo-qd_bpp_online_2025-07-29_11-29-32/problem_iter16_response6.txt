```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using item-size-dependent weight with smooth BF/WF transition.
    
    Weights transition linearly from Worst Fit (small items) to Best Fit (large items) around
    threshold item size 0.5 with epsilon-stabilized weight adjustment.
    
    Args:
        item: Size of the incoming item (normalized between 0 and 1).
        bins_remain_cap: Array of remaining bin capacities (each in [0,1]).
    
    Returns:
        Array of priority scores for each bin (-inf for infeasible bins).
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Weight calculation with item-size-driven transition
    weight = (1.0 - 2 * item) - 1e-8  # Epsilon adjustment for 0.5 threshold
    
    # Prioritize smaller residuals for large items (BF), larger for small items (WF)
    priority = np.where(can_fit, residual * weight, -np.inf)
    
    return priority
```
