```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on item-size threshold using Best Fit for large items and Worst Fit for small ones."""
    if bins_remain_cap.size == 0:
        return np.array([])  # Handle empty bins case
    
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    
    if item >= 0.5:
        # Large items: prioritize tightest fit (Best Fit)
        priority = -slack  # High priority for minimal slack
    else:
        # Small items: preserve large spaces (Worst Fit)
        priority = bins_remain_cap  # High priority for largest remaining capacity
    
    # Mask invalid bins and return
    return np.where(can_fit, priority, -np.inf)
```
