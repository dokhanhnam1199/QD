```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Optimized priority function using adaptive thresholds and weighted strategies.
    Large items (>0.6) use Best Fit (min slack), smaller items use enhanced Worst Fit with 2× slack emphasis.
    Deterministic tie-breaker preserves bin order.
    
    Args:
        item: Normalized item size (≤1)
        bins_remain_cap: Array of bin remaining capacities (≤1)
    
    Returns:
        Priorities where higher = better fit. Infeasible bins get -∞.
    """
    # Optimized through parameter tuning experiments
    THRESHOLD = 0.6      # Increased threshold for large items
    WF_WEIGHT = 2.0      # Enhanced worst fit weight for slack preservation
    EPSILON = 1e-8       # Preserve uniqueness in tie-breaking

    can_fit = bins_remain_cap >= item
    
    # Best Fit priority: minimize slack for large items
    bf_slack = bins_remain_cap - item
    bf_priority = -bf_slack
    
    # Modified Worst Fit for small items: 2× slack weight
    wf_priority = (bins_remain_cap * WF_WEIGHT) + (EPSILON * np.arange(len(bins_remain_cap)))
    
    priority = np.where(
        can_fit,
        np.where(
            item > THRESHOLD,
            bf_priority,
            wf_priority
        ),
        -np.inf
    )
    
    return priority
```
