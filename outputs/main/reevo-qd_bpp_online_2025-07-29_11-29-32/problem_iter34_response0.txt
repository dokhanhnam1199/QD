```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using Best Fit with tie-breaking to prefer larger remaining capacities.

    Bins that can fit the item are prioritized by smallest leftover space (negative leftover).
    Tie-breaker adds a small epsilon-scaled original bin capacity to prefer larger bins when tied.
    Infeasible bins are assigned -inf priority to ensure exclusion.

    Args:
        item: Size of item to be packed.
        bins_remain_cap: Array of current remaining bin capacities.

    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    epsilon = 1e-9  # Adjusted to ensure secondary criteria doesn't override primary
    priority = np.where(can_fit, -(bins_remain_cap - item) + epsilon * bins_remain_cap, -np.inf)
    return priority
```
