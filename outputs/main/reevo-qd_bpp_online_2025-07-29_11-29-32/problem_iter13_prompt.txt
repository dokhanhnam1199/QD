{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n1. **Adaptive Blending**: Use polynomial expressions to dynamically weigh Best/Worst Fit based on item size, balancing snug fits for large items and space preservation for small.  \n2. **Feasibility-First Scoring**: Filter invalid bins first, then prioritize those minimizing residual deviation from ideal capacity via size-adjusted quadratic penalties.  \n3. **Non-Linear Residual Tuning**: Combine item size and bin slack in scoring functions; penalize deviations from optimal residual targets to reduce fragmentation.  \n4. **Epsilon-Stabilized Weights**: Avoid zeroing critical residual weights; add epsilon to ensure stability and smooth transitions in threshold-free adaptive strategies.  \n5. **Math-Guided Thresholds**: Model item-capacity ratios to derive optimal blending parameters, replacing static rules with dynamic, math-optimized allocation logic.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins based on Best Fit heuristic.\n\n    Bins that can fit the item are prioritized by smallest remaining capacity after placement.\n    Infeasible bins receive -inf priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)\n    return priority\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}