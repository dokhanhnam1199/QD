```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns adaptive priority scores for bins balancing best-fit and worst-fit strategies.
    
    Large items (relative to available bin capacities) use best-fit (min residual after placement).
    Small items use worst-fit (max residual after placement). Dynamic adaptation via 
    comparison with feasible bins' average remaining capacity.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    count = np.sum(can_fit)
    
    if count == 0:
        return -np.inf * np.ones_like(bins_remain_cap)
    
    feasible_R = bins_remain_cap[can_fit]
    avg_R = feasible_R.mean()
    
    if item > avg_R:
        # Best-fit for large items: prioritize smallest residual
        priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Worst-fit for small items: prioritize largest residual
        priority = np.where(can_fit, bins_remain_cap - item, -np.inf)
    
    return priority
```
