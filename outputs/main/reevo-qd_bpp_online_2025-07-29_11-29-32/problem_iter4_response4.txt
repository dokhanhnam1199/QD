```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins with tie-breaking for best-fit.

    Bins that can fit the item are prioritized by smallest remaining capacity after placement.
    In case of ties, slightly prefers bins that were more filled before placement.
    Infeasible bins receive -inf priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    # Main priority: minimal residual space (negative for ascending sort)
    # Tie-breaker: bins with smaller remaining capacity before placement (more filled)
    priority = np.where(can_fit, -residual - 1e-6 * bins_remain_cap, -np.inf)
    return priority
```
