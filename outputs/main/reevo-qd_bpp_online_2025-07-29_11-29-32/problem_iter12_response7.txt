```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """ Hybrid approach using adaptive threshold based on current bin utilization.
    Uses best-fit for items larger than average remaining capacity to minimize fragmentation,
    and worst-fit for smaller items to preserve larger spaces.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item

    if bins_remain_cap.size == 0:
        return np.array([])  # Edge case: no existing bins
    
    avg_remaining = np.mean(bins_remain_cap)
    # Use dynamic threshold based on current bin occupancy
    if item > avg_remaining:
        # Best-fit for above-average size items
        priority = np.where(can_fit, -residual, -np.inf)
    else:
        # Worst-fit for smaller items
        priority = np.where(can_fit, residual, -np.inf)
    
    return priority
```
