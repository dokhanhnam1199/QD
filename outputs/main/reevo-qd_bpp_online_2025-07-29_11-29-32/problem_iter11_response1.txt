```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Implements a dynamic strategy blending Best Fit and Worst Fit for online BPP.
    
    Features:
    - Continuous item-size-dependent blending of Best Fit (large items) and Worst Fit (small)
    - Residual space prioritization through size-adjusted scoring formula
    - Feasibility enforcement via -inf penalties for invalid bins
    - Threshold-free adaptation based on item-to-bin capacity ratio
    """
    can_fit = bins_remain_cap >= item
    # Blend coefficient determined by item size relative to bin (assumed normalized to [0,1])
    blend_factor = 1.0 - 2.0 * item  
    # Calculate size-adjusted priority: 
    # - For large items (item > 0.5): Best Fit via negative scoring
    # - For small items (item < 0.5): Worst Fit via positive scoring
    raw_score = (bins_remain_cap - item) * blend_factor
    return np.where(can_fit, raw_score, -np.inf)
```
