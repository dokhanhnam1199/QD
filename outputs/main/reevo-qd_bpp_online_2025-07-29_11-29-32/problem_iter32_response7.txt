```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return -np.full_like(bins_remain_cap, np.inf, dtype=np.float64)

    if item < 0.5:
        # Use Modified Worst Fit for small items: prioritize bins that can fit at least two of this item
        double_fit = bins_remain_cap >= (2 * item)
        priority = np.where(double_fit, bins_remain_cap, - (bins_remain_cap - item))
    else:
        # Best Fit for large items
        priority = - (bins_remain_cap - item)
    
    return np.where(can_fit, priority, -np.inf)
```
