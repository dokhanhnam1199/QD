```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit with item-size-dependent weights and threshold adjustment.
    
    Blends best-fit (residual * negative weight) and worst-fit (residual * positive weight) heuristics with smooth transition at 
    item_size = 0.5, adjusted by epsilon to prioritize best-fit for perfect 0.5-sized items. Additive numerical stability ensures 
    no zero-weight edge cases. Preserves space efficiency for small items and gap avoidance for large items.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Dynamic weight with smooth transition and edge-case handling
    weight_bias = 1e-6
    weight = (1 - 2 * item) - weight_bias  # Best-fit default at item_size threshold
    
    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
