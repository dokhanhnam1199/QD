```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using adaptive best/worst fit blending.

    Uses item size threshold at 0.5 to split strategies, blends via linear weights
    in a guard interval ([0.4, 0.6]) to smooth bin selection behavior.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Strategy blending parameters
    THRESHOLD = 0.5
    WINDOW = 0.1  # Threshold smoothing window [0.4, 0.6]
    
    # Compute blending weight between best/fit worst fit
    if item >= THRESHOLD + WINDOW:
        weight = 1.0  # Pure best fit
    elif item <= THRESHOLD - WINDOW:
        weight = 0.0  # Pure worst fit
    else:
        weight = (item - THRESHOLD + WINDOW) / (2 * WINDOW)  # Linear blend
    
    # Compute residual and feasibility mask
    residual = bins_remain_cap - item
    can_fit = residual >= 0
    
    # Blend priority strategies based on weight
    blended_prio = weight * (-residual) + (1 - weight) * residual
    
    # Mask invalid bins while preserving float dtype
    return np.where(can_fit, blended_prio, -np.inf)
```
