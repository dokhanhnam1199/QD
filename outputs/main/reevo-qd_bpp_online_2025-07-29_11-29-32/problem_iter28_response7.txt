```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores leveraging bin utilization and residual capacity with item-sized scaling.
    
    Combines best-fit residual prioritization and bin utilization maximization via adaptive item-size scaling.
    Prioritizes bins with high utilization (used capacity) for small items and minimal residuals for large items.
    Preserves gap avoidance for large items and space-completion for small items through (1-item) * residual term.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual_after = bins_remain_cap - item
    used_capacity = 1.0 - bins_remain_cap  # Assuming bin capacity=1.0
    
    # Item-sized adaptive scaling of residual impact: larger items emphasize residual minimization
    k = 1.0 - item  
    # Priority combines utilization (high capacity bins) and scaled residual minimization
    priority = np.where(can_fit, used_capacity + k * residual_after, -np.inf)
    return priority
```
