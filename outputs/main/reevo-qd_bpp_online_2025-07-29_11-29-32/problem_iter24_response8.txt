```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit with item-size-dependent weights and threshold adjustment.
    
    Uses a sigmoid-weighted function with a sharp transition at item_size threshold 0.5 to blend strategies,
    subtracts a small epsilon to avoid zero-weight edge cases. Preserves space efficiency by prioritizing worst-fit
    for small items and best-fit for large items with adaptive numerical stability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item

    # Transition weight via sigmoid function for sharp 0.5 threshold response
    k = 10.0  # Steepness factor for transition curve
    sigmoid_input = k * (item - 0.5)
    sigmoid_factor = 1.0 / (1.0 + np.exp(sigmoid_input))
    weight = 2.0 * sigmoid_factor - 1.0 - 1e-6  # Epsilon ensures negative weight at threshold

    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
