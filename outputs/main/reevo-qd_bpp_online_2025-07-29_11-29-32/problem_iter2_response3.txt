```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority combining minimal leftover and current utilization for better bin utilization."""
    leftover = bins_remain_cap - item
    valid = leftover >= 0

    # Current utilization of each bin (assuming bin capacity is normalized to 1.0)
    utilization_before = 1.0 - bins_remain_cap

    # Combine Best Fit (-leftover) with preference for more filled bins (utilization_before)
    # Weights balance between minimizing leftover and maximizing current utilization
    priority = -leftover + 0.1 * utilization_before

    # Assign invalid bins a very low priority to avoid selection
    return np.where(valid, priority, -np.inf)
```
