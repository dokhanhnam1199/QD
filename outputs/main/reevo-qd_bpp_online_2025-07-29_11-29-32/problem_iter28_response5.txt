```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins blending best-fit and worst-fit heuristics.
    
    Dynamically scores bins based on item size: prioritizes best-fit (minimize residual) 
    for items > 0.5 and worst-fit (maximize residual) for items <= 0.5. Weights scaled 
    stronger for tighter packing (weight = -item for large items, 1-item for small).
    Penalizes infeasible bins (-âˆž).
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    weight = np.where(item > 0.5, -item, 1 - item)
    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
