```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic priority combining Best Fit (large items) and Worst Fit (small items) with smoother transition.
    
    Uses thresholding at item=0.5 to switch strategies, favoring minimal slack for large items and
    space preservation for small items. Emerges from balancing adaptive slack minimization with
    weighting function proportional to item size.
    """
    can_fit = bins_remain_cap >= item
    # Use best fit (min slack) for large items (>=0.5), worst fit (max space) for small
    score = np.where(
        item >= 0.5,
        -(bins_remain_cap - item),  # Higher priority = less slack
        bins_remain_cap            # Higher priority = more space
    )
    return np.where(can_fit, score, -np.inf)
```
