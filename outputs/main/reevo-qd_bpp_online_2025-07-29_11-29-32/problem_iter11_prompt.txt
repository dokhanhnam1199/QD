{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n1. **Dynamic Heuristic Blending**: Adaptively combine Best Fit (large items, slack aversion) and Worst Fit (small items, space preservation) via item-size-dependent residual weights, avoiding rigid thresholds for smooth transitions.  \n\n2. **Residual Space Prioritization**: Continuously score bins using size-adjusted formulas\u2014min slack for large items, max residual for small\u2014enhancing alignment between item size and bin capacity.  \n\n3. **Feasibility-Driven Allocation**: Impose strict penalties (e.g., negative infinity) for capacity violations; prioritize bins where residual capacity closely matches item size.  \n\n4. **Threshold-Free Adaptation**: Replace fixed size thresholds with ratio-based weighting\u2014blend strategies proportionally to item dimensions for robust, flexible packing.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins based on Best Fit heuristic.\n\n    Bins that can fit the item are prioritized by smallest remaining capacity after placement.\n    Infeasible bins receive -inf priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)\n    return priority\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}