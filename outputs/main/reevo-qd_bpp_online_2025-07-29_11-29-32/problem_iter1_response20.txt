```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function using a ratio-based Best Fit heuristic.

    Bins that can fit the item are prioritized by the ratio of the item size to
    the bin's remaining capacity. This rewards tighter fits (ratio closer to 1.0).
    Bins that cannot fit the item receive a priority of 0.

    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    fit_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)
    # Add a tiny epsilon to avoid division by zero in edge cases
    epsilon = 1e-9
    priorities[fit_mask] = item / (bins_remain_cap[fit_mask] + epsilon)
    return priorities
```
