```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using a dynamic blend of BF and WF heuristics based on item size."""
    can_fit = bins_remain_cap >= item
    if bins_remain_cap.size == 0:
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Estimate bin capacity as maximum remaining capacity
    C = bins_remain_cap.max()
    if np.isclose(C, 0):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Calculate size-normalized weight and delta factor
    normalized_size = item / C
    delta = 1.0 - 2.0 * normalized_size  # Balances BF/WF emphasis
    
    # Compute priority scores with feasibility masking
    raw_priority = delta * bins_remain_cap
    priority = np.where(can_fit, raw_priority, -np.inf)
    
    return priority
```
