```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on item size using Best Fit for large items and Worst Fit for small ones."""
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    if item >= 0.5:
        # Best Fit: prioritize bins with minimal slack (least remaining space after placement)
        priority = -slack
    else:
        # Worst Fit: prioritize bins with maximum remaining capacity
        priority = bins_remain_cap
    return np.where(can_fit, priority, -np.inf)
```
