```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns improved priority scores using adaptive Best/Worst Fit blending.

    For large items (>0.5), penalizes bins with leftover space after placement
    to enforce best-fit behavior. For small items, favors bins that preserve
    large free spaces to accommodate future large items using worst-fit behavior.
    Combines strategies through a dynamic coefficient based on item size.

    Args:
        item: Size of item to be packed (normalized to bin capacity).
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    residual_after = bins_remain_cap - item
    
    # Adaptive priority coefficient: balances Best Fit (<item> 0.5) and Worst Fit
    priority = residual_after * (1 - 2 * item)
    
    # Mask bins where item cannot fit and return raw scores (higher is better)
    return np.where(can_fit, priority, -np.inf)
```
