```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balances Best Fit for larger items (> 1/3) and Worst Fit for smaller items with threshold-based adaptivity."""
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    
    # Threshold-based strategy selection
    if item > 1/3:  # Critical threshold for indivisible space protection
        # Best Fit: Minimize slack for medium-large items that can't pair flexibly
        priority = -slack
    else:
        # Worst Fit: Preserve large bins for potential future large items
        priority = bins_remain_cap
    
    return np.where(can_fit, priority, -np.inf)
```
