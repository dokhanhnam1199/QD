```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins blending Best/Worst Fit by item size.
    
    Large items (â‰¥0.5) use Best Fit (max tight fit). Small items (<0.5) use Worst Fit (max remaining space).
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    if not can_fit.any():
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Initialize priorities for feasible bins
    priority = np.where(can_fit, 0.0, -np.inf)
    
    # Prioritize tight fits for large items (Best Fit: -residual capacity)
    large_mask = can_fit & (item >= 0.5)
    if large_mask.any():
        priority[large_mask] = - (bins_remain_cap[large_mask] - item)
    
    # Prioritize space for small items (Worst Fit: raw remaining capacity)
    small_mask = can_fit & (item < 0.5)
    if small_mask.any():
        priority[small_mask] = bins_remain_cap[small_mask]
    
    return priority
```
