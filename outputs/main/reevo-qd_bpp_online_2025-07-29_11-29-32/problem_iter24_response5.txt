```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit (BF) and Worst Fit (WF) strategies with adaptive weights and quadratic slack penalty.

    For large items (> 0.5 + delta), prioritizes BF (minimize slack). For small items (< 0.5 - delta), 
    prioritizes WF (maximize remaining capacity). Linear blend in transition zone (0.4-0.6), with quadratic slack penalty
    to maintain R dependency in all cases.
    """
    THRESHOLD = 0.5
    DELTA = 0.1  # Transition slope control

    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item

    # Blend weights: linearly interpolate between BF and WF around threshold
    if item <= THRESHOLD - DELTA:
        w_bf, w_wf = 0.0, 1.0  # WF dominant for small items
    elif item >= THRESHOLD + DELTA:
        w_bf, w_wf = 1.0, 0.0  # BF dominant for large items
    else:
        # Linear blend between BF and WF in threshold region
        t = (item - (THRESHOLD - DELTA)) / (2 * DELTA)
        w_bf, w_wf = t, 1 - t

    # Component scores
    bf_component = -(slack ** 2)  # BF: penalize large slacks quadratically
    wf_component = bins_remain_cap  # WF: maximize remaining capacity

    # Composite priority blend
    composite = w_bf * bf_component + w_wf * wf_component

    # Mask infeasible bins
    priority = np.where(can_fit, composite, -np.inf)
    return priority
```
