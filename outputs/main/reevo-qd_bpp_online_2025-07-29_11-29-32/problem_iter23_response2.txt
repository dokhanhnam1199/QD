```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit (item > 0.5) and Worst Fit (item â‰¤ 0.5).
    
    Feasible bins are prioritized by minimal leftover (Best Fit) or maximal leftover (Worst Fit).
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    if item > 0.5:
        # Best Fit: prioritize tightest fit (minimal leftover)
        priority = -(bins_remain_cap - item)  # More negative = worse fit
    else:
        # Worst Fit: prioritize largest leftover space
        priority = bins_remain_cap - item     # Larger = better fit
    priority = np.where(can_fit, priority, -np.inf)
    return priority
```
