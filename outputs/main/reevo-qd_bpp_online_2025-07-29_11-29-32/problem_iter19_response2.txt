```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using adaptive Best/Worst Fit strategies.
    
    For large items (>0.5), prioritizes bins with smallest residual space (Best Fit).
    For small items, prioritizes bins with largest residual space (Worst Fit).
    Smoothly blends between strategies around 0.5 threshold using linear weights.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Threshold and blending parameters
    threshold = 0.5
    delta = 0.05  # Blend region: [threshold-delta, threshold+delta]
    
    # Calculate weight for Best Fit strategy (0=worst, 1=best)
    weight = np.clip((item - (threshold - delta)) / (2 * delta), 0, 1)
    
    # Best Fit priority: -residual (higher score = better fit)
    best_prio = -residual
    # Worst Fit priority: residual (higher score = larger remaining space)
    worst_prio = residual
    
    # Blend priorities based on item size
    blended_prio = weight * best_prio + (1 - weight) * worst_prio
    
    # Apply -inf to infeasible bins
    return np.where(can_fit, blended_prio, -np.inf)
```
