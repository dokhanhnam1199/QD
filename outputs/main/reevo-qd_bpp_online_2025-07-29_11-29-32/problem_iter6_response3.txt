```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using Best Fit for large items (>= 0.5) and Worst Fit for small items.
    
    This balances slack minimization for large items (via tight fits) and space preservation
    for small items (via largest available space).
    """
    can_fit = bins_remain_cap >= item
    
    # Best Fit: prioritize bins with smallest remaining capacity that can fit the item
    best_fit = -(bins_remain_cap - item)  # Negative slack to favor tight fits
    
    # Worst Fit: prioritize bins with largest remaining capacity
    worst_fit = bins_remain_cap
    
    # Select strategy based on item size threshold
    priority = np.where(
        item >= 0.5,  # Threshold for large/small items
        best_fit,
        worst_fit
    )
    
    # Mask bins that cannot fit the item
    return np.where(can_fit, priority, -np.inf)
```
