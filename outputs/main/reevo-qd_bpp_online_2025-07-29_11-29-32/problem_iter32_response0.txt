```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns blended priority scores using soft thresholding between Best/Worst Fit based on item size."""
    can_fit = bins_remain_cap >= item
    LARGE_THRESHOLD = 0.7   # Upper threshold for pure Best Fit
    SMALL_THRESHOLD = 0.3   # Lower threshold for pure Worst Fit
    
    # Calculate base priorities for Best Fit and Worst Fit
    best_priority = -(bins_remain_cap - item)  # Tighten fit (minimize leftover space)
    worst_priority = bins_remain_cap         # Preserve bin flexibility (maximize unused space)
    
    # Compute adaptive blend weight
    if item >= LARGE_THRESHOLD:
        weight = 1.0  # Pure Best Fit
    elif item <= SMALL_THRESHOLD:
        weight = 0.0  # Pure Worst Fit
    else:
        # Smooth transition between thresholds
        weight = (item - SMALL_THRESHOLD) / (LARGE_THRESHOLD - SMALL_THRESHOLD)
    
    # Blend priorities using item-based weight
    priority = weight * best_priority + (1 - weight) * worst_priority
    return np.where(can_fit, priority, -np.inf)
```
