```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit with item-size-dependent weights, perfect-fit prioritization, and numerical stability.
    
    Key improvements:
    1. Prioritizes perfect-fit bins (residual â‰ˆ 0) with infinite priority
    2. Smooth transition between best-fit (large items) and worst-fit (small items) at item_size=0.5
    3. Numerical stability via epsilon thresholds and weight bias
    4. Residual-based scoring with dynamic weight
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    epsilon = 1e-6
    perfect_fit = np.isclose(bins_remain_cap, item, atol=epsilon)
    residual = bins_remain_cap - item
    
    # Dynamic weight with smooth transition at 0.5 and numerical stability
    weight = (1 - 2 * item) - 1e-6  # Negative for best-fit (item > 0.5), positive for worst-fit (item < 0.5)
    
    # Perfect fits get highest priority, others get residual*weight if can fit
    priority = np.where(perfect_fit, np.inf, np.where(can_fit, residual * weight, -np.inf))
    return priority
```
