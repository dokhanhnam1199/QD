```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved threshold-based strategy with tie-breaking for online bin selection.
    
    Switches between:
    - Best Fit (BF) for large items (> 0.5) to minimize slack
    - Worst Fit (WF) for small items (<= 0.5) to preserve large-capacity bins
    
    Adds random tie-breaking perturbation to avoid bias toward early bins.
    """
    EPSILON = 1e-9  # Stabilization constant to avoid division by zero
    
    if bins_remain_cap.size == 0:
        return np.array([])  # Handle empty bins case gracefully

    # Feasibility mask for bin selection
    can_fit = bins_remain_cap >= item
    
    # Adaptive bin selection based on item size threshold
    if item > 0.5:
        # Best Fit: prioritize bins with minimal residual space
        priority = - (bins_remain_cap - item)
    else:
        # Worst Fit: prioritize bins with largest remaining capacity
        priority = bins_remain_cap.copy()
    
    # Tie-breaking perturbation to avoid systematic bias
    # Small random noise preserves strategy dominance while smoothing decisions
    priority += EPSILON * np.random.randn(*priority.shape)
    
    # Mask infeasible bins (-inf ensures no selection) and return
    return np.where(can_fit, priority, -np.inf)
```
