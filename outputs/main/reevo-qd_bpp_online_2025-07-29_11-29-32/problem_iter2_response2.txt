```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function using adaptive strategies based on item size thresholds:
    - Best Fit for items >= 0.25 (medium/large items)
    - Worst Fit for items < 0.25 (small items)
    """
    valid_mask = bins_remain_cap >= item
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    if not np.any(valid_mask):
        return priority  # No valid bins to place the item
    
    if item >= 0.25:
        # Best Fit for medium/large items: prioritize bins with smallest remaining capacity
        priority[valid_mask] = -bins_remain_cap[valid_mask]
    else:
        # Worst Fit for small items: prioritize bins with largest remaining capacity
        priority[valid_mask] = bins_remain_cap[valid_mask]
    
    return priority
```
