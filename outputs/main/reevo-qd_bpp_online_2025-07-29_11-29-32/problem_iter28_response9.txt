```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins blending Best Fit and Worst Fit adaptively.
    
    Adaptive blending uses item's size to determine strategy:
    - Large items (> 0.5): Prioritize bins with smallest residual (Best Fit)
    - Small items (< 0.5): Prioritize bins with largest residual (Worst Fit)
    - Epsilon term favors tighter fits only when priorities are effectively tied
    
    Args:
        item: Size of item to be packed (0 < item <= 1)
        bins_remain_cap: Remaining capacities of all bins (0 <= value <= 1)
    
    Returns:
        Priority scores where higher values indicate better bin choice
    """
    # Filter feasible bins and calculate residual space
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Adaptive blending coefficient based on item size
    weight = 1.0 - 2.0 * item
    
    # Primary Strategy I: Best/Worst Fit blending by residual linearity
    strategy_i = weight * residual
    
    # Tie-breaking Strategy II: Minimal epsilon favors least residual
    tie_breaker = -residual * 1e-9
    
    # Final priority with bin feasibility filtering
    return np.where(can_fit, strategy_i + tie_breaker, -np.inf)
```
