```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit/worst-fit with tie-breaking.
    
    Adaptive heuristic scores bins using:
    1. Primary term: residual * (1-2*item) to balance best/worst-fit
    2. Secondary term: -residual (tiny weight) to break ties via best-fit
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    weight = 1 - 2 * item
    
    # Primary priority: adaptive best/worst-fit based on item size
    primary = residual * weight
    
    # Secondary priority: tie-breaker via best-fit (smaller residual)
    secondary = -residual
    
    # Blend with epsilon to maintain primary dominance
    epsilon = 1e-6
    priority = np.where(can_fit, primary + epsilon * secondary, -np.inf)
    
    return priority
```
