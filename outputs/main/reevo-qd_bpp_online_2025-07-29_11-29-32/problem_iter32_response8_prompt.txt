{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores blending Best Fit and Worst Fit heuristics adaptively.\n    \n    For large items, prioritizes tight fits (Best Fit); for small items, prefers spacious bins (Worst Fit).\n    Invalid bins receive -inf. Combines residual space and item size via dynamic weights.\n    \n    Args:\n        item: Size of item to be added.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    \n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    \n    # Adaptive weight based on item size: blends Best Fit (-residual) and Worst Fit (residual)\n    # Weight = item_size \u2192 prioritizes Best Fit more for larger items\n    priority = np.where(can_fit, residual * (1 - 2 * item), -np.inf)\n    return priority\n\n[Reflection]\n\"Prioritize dynamic combination of Best/Worst Fit via item size and residual space weighting for adaptive bin selection.\" \u2013 16 words\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}