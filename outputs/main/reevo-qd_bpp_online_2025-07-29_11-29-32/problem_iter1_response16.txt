```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a combination of best-fit and bin utilization.

    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Mask bins that can fit the item
    valid = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    if not np.any(valid):
        return priorities  # No valid bins, return all -inf
    
    # Calculate ratio-based priority (higher = better fit)
    ratio_priority = item / bins_remain_cap[valid]
    
    # Calculate utilization-based priority (higher = more utilized bin)
    bin_utilization = 1.0 - bins_remain_cap[valid]
    utilization_priority = bin_utilization / (1.0 - item + 1e-9)  # Normalize by item size
    
    # Combine priorities with weighted sum (tuned for balanced bin utilization)
    combined_priority = 0.7 * ratio_priority + 0.3 * utilization_priority
    
    priorities[valid] = combined_priority
    return priorities
```
