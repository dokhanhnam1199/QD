```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a size-adaptive strategy.
    
    Combines best-fit (smallest residual) for large items and worst-fit (largest remaining space)
    for small items through a continuous interpolation based on item size.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    alpha = item  # Weighting factor based on item size
    
    best_fit = -(bins_remain_cap - item)  # Prioritize bins with smallest residual
    worst_fit = bins_remain_cap          # Prioritize bins with largest remaining space
    
    # Combine strategies weighted by item size
    combined_score = alpha * best_fit + (1 - alpha) * worst_fit
    
    # Penalize infeasible bins
    priority = np.where(can_fit, combined_score, -np.inf)
    return priority
```
