```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on dynamic Best/Worst Fit heuristic.
    
    Uses item size relative to average remaining capacity of valid bins to switch strategies:
    - Best Fit (minimal slack) for items larger than average_remaining
    - Worst Fit (maximal slack) for smaller items
    Scores are based on direct remaining capacity/item ratios to reduce fragmentation.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    valid_remaining = bins_remain_cap[can_fit]
    
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    avg_remaining = np.mean(valid_remaining)
    
    if item > avg_remaining:
        # Best Fit: prioritize smallest remaining capacity/item ratio (closest to 1)
        priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Worst Fit: prioritize largest remaining capacity/item ratio
        priority = np.where(can_fit, (bins_remain_cap - item), -np.inf)
    
    return priority
```
