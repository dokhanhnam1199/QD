```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for each bin based on a hybrid heuristic.
    
    Prioritizes bins that can fit the item with the following criteria:
    1. Bins with remaining capacity closest to the item size (Best Fit)
    2. Bins with higher current utilization (lower remaining capacity)
    3. Tie-breaker for earlier bins using a small epsilon decay
    
    Args:
        item: Size of the item to pack.
        bins_remain_cap: Array of remaining capacities for each bin.
        
    Returns:
        Array of priority scores for each bin.
    """
    # Base priority: -remaining_cap for valid bins (Best Fit)
    base_priority = np.where(bins_remain_cap >= item, -bins_remain_cap, -np.inf)
    
    # Tie-breaker: small epsilon decay based on bin index
    epsilon = 1e-6
    index_tiebreaker = epsilon * np.arange(len(bins_remain_cap))
    
    # Combined priority: base priority with tie-breaker
    return base_priority - index_tiebreaker
```
