```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on normalized residual minimization.

    Args:
        item: Size of the item to pack.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    if bins_remain_cap.size == 0:
        return np.array([])
    
    # Handle floating-point precision issues
    can_fit = bins_remain_cap >= item - 1e-9
    
    # Calculate residual space after placing item
    residual = bins_remain_cap - item
    
    # Normalize residual by item size to ensure scale invariance
    normalized_residual = residual / (item + 1e-9)
    
    # Priority is negative normalized residual for feasible bins, -inf otherwise
    priority = np.where(can_fit, -normalized_residual, -np.inf)
    
    return priority
```
