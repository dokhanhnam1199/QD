```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function combining best-fit and worst-fit heuristics with a threshold informed by BPP item-size categorization.
    
    Key improvements:
    - Uses 1/3 threshold instead of 0.5 to better leverage classical BPP item sizing categories:
        - items > 1/3: Cannot fit 3 per bin; use best-fit to tightly pack them
        - items <= 1/3: Use worst-fit to preserve larger spaces for possible future larger items
    - Maintains vectorized efficiency through NumPy masking
    - Uses consistent -np.inf invalid bins filtering
    
    Args:
        item: Size of item to be added to the bin
        bins_remain_cap: Array of remaining capacities for each bin
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Threshold informed by classical BPP item analysis (items > 1/3 can't have 3 per bin)
    if item >= (1/3):
        # Best-fit for larger items: prioritize minimal residual to compact packing
        priority = np.where(can_fit, -residual, -np.inf)
    else:
        # Worst-fit for smaller items: preserve larger spaces for future large items
        priority = np.where(can_fit, residual, -np.inf)
    
    return priority
```
