```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins blending Best Fit and Worst Fit heuristics based on item size.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    LARGE_ITEM_THRESHOLD = 0.5  # Fixed threshold as per prior reflection example
    
    # Best Fit for large items (tight fits), Worst Fit for smaller items (space conservation)
    best_fit_score = -(bins_remain_cap - item)  # Tightest fit
    worst_fit_score = bins_remain_cap          # Leave room for larger items
    
    best_mask = (item >= LARGE_ITEM_THRESHOLD)
    priority_values = np.where(best_mask, best_fit_score, worst_fit_score)
    
    return np.where(can_fit, priority_values, -np.inf)
```
