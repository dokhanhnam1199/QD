```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores combining size-aware strategies for efficient bin utilization.
    
    Uses Best Fit for items with residual space < item size, and Worst Fit for others,
    balancing tight packing and space preservation based on item-bin interplay.
    """
    can_fit = bins_remain_cap >= item
    twotimes_item = 2 * item
    
    # Strategic prioritization based on item-space relationship
    fit_priorities = np.where(
        bins_remain_cap >= twotimes_item,
        bins_remain_cap,          # Preserve space for future small items (Worst Fit)
        -bins_remain_cap          # Minimize slack for tight fits (Best Fit)
    )
    
    # Mask invalid bins
    return np.where(can_fit, fit_priorities, -np.inf)
```
