```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores based on size-dependent strategies.
    Large items (>=0.5) use Best Fit (min slack), small items use Worst Fit (max remaining).
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    threshold = 0.5
    if item >= threshold:
        # Best Fit for large items: minimize slack
        can_fit = bins_remain_cap >= item
        priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Worst Fit for small items: maximize remaining space
        can_fit = bins_remain_cap >= item
        priority = np.where(can_fit, bins_remain_cap, -np.inf)
    return priority
```
