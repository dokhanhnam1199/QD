```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function balancing best-fit and worst-fit heuristics based on bin state.
    
    Adjusts strategy dynamically based on the average residual capacity of feasible bins:
    - If item exceeds average residual, prioritizes best-fit (minimizes residual)
    - Otherwise, prioritizes worst-fit (maximizes residual)
    
    Args:
        item: Size of item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Calculate average residual across all feasible bins
    if can_fit.any():
        feasible_residuals = residual[can_fit]
        avg_residual = feasible_residuals.mean()
    else:
        avg_residual = 0  # Doesn't affect output when no feasible bins
    
    # Determine strategy based on item vs. average residual
    use_best_fit = can_fit.any() and item > avg_residual
    priority = -residual if use_best_fit else residual
    
    return np.where(can_fit, priority, -np.inf)
```
