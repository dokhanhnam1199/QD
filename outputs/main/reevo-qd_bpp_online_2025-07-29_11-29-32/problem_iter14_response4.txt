```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns adaptive priority scores blending Best Fit and Worst Fit heuristics with a size-based threshold.
    
    Uses Best Fit (min residuals) for items > 0.5, Worst Fit (max residuals) for items <= 0.5.
    Avoids zero-priority edge cases at item = 0.5 via a hard threshold.
    
    Args:
        item: Size of item to be packed (0 < item <= 1).
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Binary choice: Best Fit for large items (> 0.5), Worst Fit for small items (<= 0.5)
    priority = np.where(can_fit, np.where(item > 0.5, -residual, residual), -np.inf)
    return priority
```
