```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using threshold-based blending of Best/Worst Fit with smooth transition.
    
    Adapts strategy selection using continuous blending around the critical threshold (0.5) to balance 
    slack minimization (Best Fit) and flexibility preservation (Worst Fit). Priorities are weighted 
    dynamically by proximity to transition boundaries to avoid abrupt strategy shifts.
    """
    can_fit = bins_remain_cap >= item
    best_priority = - (bins_remain_cap - item)
    worst_priority = bins_remain_cap
    
    # Smooth scaling factor based on item size with 0.4-0.6 transition zone
    alpha = np.clip((item - 0.4) / 0.2, 0, 1)
    priority = alpha * best_priority + (1 - alpha) * worst_priority
    
    # Normalize by item scale to maintain consistent decision sensitivity
    priority = np.where(item > 0, priority / item, priority)
    
    return np.where(can_fit, priority, -np.inf)
```
