```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using threshold-based Best Fit (>=0.5) and Worst Fit (<0.5).
    
    Best Fit for large items (minimize slack) and Worst Fit for small items (preserve space).
    Operates with O(1) complexity for threshold-based decision and direct prioritization.
    """
    can_fit = bins_remain_cap >= item
    if item >= 0.5:  # Threshold for strategy switching
        priority = - (bins_remain_cap - item)  # Best Fit component (minimize slack)
    else:
        priority = bins_remain_cap  # Worst Fit component (maximize remaining space)
    return np.where(can_fit, priority, -np.inf)  # Ensure only valid bins are considered
```
