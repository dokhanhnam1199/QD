```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on item size threshold (0.5).

    Large items (â‰¥0.5) use Best Fit (minimize remaining capacity), small items use
    Worst Fit (maximize remaining capacity). Infeasible bins receive -inf priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    is_large = item >= 0.5

    # Calculate strategy-specific scores
    if is_large:
        score = -(bins_remain_cap - item)  # Best Fit: minimize remaining capacity
    else:
        score = bins_remain_cap  # Worst Fit: maximize remaining capacity

    return np.where(can_fit, score, -np.inf)
```
