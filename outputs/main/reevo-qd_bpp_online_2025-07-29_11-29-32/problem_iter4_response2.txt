```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins using a strict best-fit approach with dynamic capacity assessment.
    
    This prioritizes bins that can fit the item with the smallest resulting remaining capacity.
    Priority is calculated as the negative of the leftover space (maximizing this minimizes leftover).
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be placed.
        bins_remain_cap: Array of current capacities for each bin.
    
    Returns:
        Priorities for selecting each bin (higher is better).
    """
    can_fit = bins_remain_cap >= item
    priority = np.where(can_fit, - (bins_remain_cap - item), -np.inf)
    return priority
```
