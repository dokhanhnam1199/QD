```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit strategy with explicit tie-breaking.

    Using smallest residual capacity after placement as primary criterion,
    with tie-breaking based on original bin capacity to avoid arbitrary decisions.
    
    Args:
        item: Size of the item to be packed
        bins_remain_cap: Array of remaining capacities for each bin

    Returns:
        Array of priority scores for each bin (higher is better)
    """
    if not len(bins_remain_cap):
        return np.array([])  # No bins available
        
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Best Fit primary criterion: minimize residual space
    # Tie-breaker: prefer bins with larger remaining capacity before placement
    PRIORITY_SCALE = 1e-9  # Ensures tie-breaker never overrides primary criterion
    priority = np.where(
        can_fit,
        -residual + PRIORITY_SCALE * bins_remain_cap,  # Prioritize smallest residual, then larger capacity
        -np.inf  # Infeasible bins receive lowest priority
    )
    
    return priority
```
