```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    if bins_remain_cap.size == 0:
        return np.array([])
    
    EPSILON = 1e-9
    C = np.max(bins_remain_cap)
    
    # Handle fully filled bins (edge case)
    if C < EPSILON:
        can_fit = bins_remain_cap >= item
        return np.where(can_fit, np.zeros_like(bins_remain_cap), -np.inf)
    
    ratio = item / C
    if ratio > 0.5:
        # Best Fit: prioritize bins with minimal slack
        slack = bins_remain_cap - item
        priority = -slack
    else:
        # Worst Fit: prioritize bins with maximum remaining capacity
        priority = bins_remain_cap
    
    can_fit = bins_remain_cap >= item
    return np.where(can_fit, priority, -np.inf)
```
