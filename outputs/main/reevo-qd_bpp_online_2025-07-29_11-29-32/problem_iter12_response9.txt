```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using a dynamic blend of best-fit and residual-aware strategies.
    
    Priority is determined by minimizing residual space after placement, favoring tight fits for
    all item sizes while adaptively weighting penalties for deviation from ideal packing efficiency.
    This balances snug fits (best-fit) with strategic space allocation using item-size normalization.

    Args:
        item: Size of item to be packed (normalized to bin capacity, assumed to be 1.0).
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of scores with the same shape as bins_remain_cap.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Adaptive penalty weights residual by item size normalization
    normalized_residual = residual * (1.0 - item)
    normalized_item_fit = item * (1.0 - residual)
    
    # Dynamic blend of residual minimization and strategic space allocation
    priority = np.where(
        can_fit,
        - (normalized_residual + normalized_item_fit + (residual ** 2)),
        -np.inf
    )
    return priority
```
