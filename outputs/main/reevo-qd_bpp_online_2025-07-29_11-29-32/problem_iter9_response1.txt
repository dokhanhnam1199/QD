```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit and Worst Fit heuristics adaptively.
    
    For large items, prioritizes tight fits (Best Fit); for small items, prefers spacious bins (Worst Fit).
    Invalid bins receive -inf. Combines residual space and item size via dynamic weights.
    
    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Adaptive weight based on item size: blends Best Fit (-residual) and Worst Fit (residual)
    # Weight = item_size â†’ prioritizes Best Fit more for larger items
    priority = np.where(can_fit, residual * (1 - 2 * item), -np.inf)
    return priority
```
