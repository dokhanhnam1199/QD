```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit and Worst Fit using item size as adaptive weight."""
    can_fit = bins_remain_cap >= item
    best_component = -(bins_remain_cap - item)  # Best Fit component: prefer minimal residual space
    worst_component = bins_remain_cap          # Worst Fit component: prefer most remaining capacity

    weight = item  # Adaptive weight based on item size
    # Component blending with smooth transition between strategies
    priority = weight * best_component + (1 - weight) * worst_component
    
    return np.where(can_fit, priority, -np.inf)
```
