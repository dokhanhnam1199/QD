```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using a Best Fit strategy with tightness scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize with negative infinity for invalid bins
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Mask bins that can fit the item
    valid_mask = bins_remain_cap >= item
    
    # Calculate tightness score: prioritize bins with smallest leftover space
    tightness_score = -(bins_remain_cap[valid_mask] - item)
    
    # Assign scores to valid bins
    priority[valid_mask] = tightness_score
    
    return priority
```
