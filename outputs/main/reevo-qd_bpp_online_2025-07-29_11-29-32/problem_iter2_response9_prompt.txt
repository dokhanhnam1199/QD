{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores based on item-to-bin remaining capacity ratio and fit feasibility.\n    \n    Bins that can fit the item are prioritized by how much of the bin's remaining space they fill,\n    encouraging tight packing. Bins that cannot fit the item receive a priority of -inf.\n    \"\"\"\n    # Mask bins that can fit the item and have non-zero remaining capacity to avoid division by zero\n    valid_bins = (bins_remain_cap >= item) & (bins_remain_cap > 0)\n    # Initialize priority array with -inf for all bins\n    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    # Calculate ratio of item size to bin's remaining capacity for valid bins\n    priority[valid_bins] = item / bins_remain_cap[valid_bins]\n    return priority\n\n[Reflection]\nPrioritize feasible bins using item-to-capacity ratios to favor tight packing, exclude invalid bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}