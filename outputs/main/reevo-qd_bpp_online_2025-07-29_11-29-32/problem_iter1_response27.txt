```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a combination of best-fit and bin utilization.

    Args:
        item: Size of the item to pack.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Mask bins that can fit the item
    mask = bins_remain_cap >= item
    
    # Calculate best-fit score (prioritize smallest leftover space)
    best_fit_score = np.where(mask, -(bins_remain_cap - item), -np.inf)
    
    # Calculate utilization score (higher utilization after placement is better)
    utilization_score = (1 - (bins_remain_cap - item) / np.max(bins_remain_cap)) if np.any(mask) else np.zeros_like(bins_remain_cap)
    utilization_score = np.where(mask, utilization_score, -np.inf)
    
    # Combine scores with weighted sum (best-fit dominates, utilization breaks ties)
    combined_score = best_fit_score + 0.1 * utilization_score
    
    return combined_score
```
