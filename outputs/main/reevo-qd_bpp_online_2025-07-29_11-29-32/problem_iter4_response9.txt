```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on Best Fit with secondary bin utilization boost.

    Bins that can fit the item are prioritized by smallest remaining capacity after placement.
    Infeasible bins receive -inf priority. Secondary priority boosted for bins with higher
    existing utilization to encourage donating capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    filled_before = 1.0 - bins_remain_cap  # Assuming unit-sized bins
    remaining_after = bins_remain_cap - item
    # Combine best-fit (min remaining) with secondary boost for higher utilization bins
    priority = np.where(can_fit, -(remaining_after) + 0.001 * filled_before, -np.inf)
    return priority
```
