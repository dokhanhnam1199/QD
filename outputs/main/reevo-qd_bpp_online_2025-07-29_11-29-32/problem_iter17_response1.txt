```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using size-based strategy split.
    
    Large items (size ≥ 0.5) use Best Fit (minimize slack), small items use Worst Fit
    (maximize remaining space). Threshold (0.5) chosen for direct space optimization.
    
    Args:
        item: Size of item to be added to the bin (0 < item ≤ 1).
        bins_remain_cap: Array of current remaining capacities for each bin (0 ≤ value ≤ 1).
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    threshold = 0.5
    
    if item >= threshold:
        # Best Fit for large items: minimize slack (remaining - item)
        priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Worst Fit for small items: maximize remaining space
        priority = np.where(can_fit, bins_remain_cap, -np.inf)
        
    return priority
```
