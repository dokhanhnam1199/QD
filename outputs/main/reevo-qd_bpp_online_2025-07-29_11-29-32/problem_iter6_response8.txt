```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores balancing best-fit/worst-fit with tie-breaking for better bin utilization.
    
    Uses dynamic item-size weighting (best-fit for large items, worst-fit for small) and adds
    a tie-breaking term to prefer more filled bins when priorities are equal. Penalizes infeasible bins.
    
    Args:
        item: Size of item to be added to the bin (normalized between 0 and 1).
        bins_remain_cap: Array of remaining capacities for each bin (normalized between 0 and 1).
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    weight = 1 - 2 * item  # Dynamic weight: negative for large items (>0.5), positive for small
    
    # Tie-breaker: small penalty for bins with larger remaining capacity
    epsilon = 1e-6
    priority = np.where(can_fit, residual * weight - epsilon * bins_remain_cap, -np.inf)
    return priority
```
