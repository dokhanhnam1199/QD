```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores combining Best Fit for large and Worst Fit for small items.
    
    Dynamically applies Best Fit (minimize slack) for items >= 0.5 and Worst Fit (maximize remaining capacity)
    for items < 0.5 to balance tight packing for large items with space preservation for small items.
    """
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    if item >= 0.5:
        # Prioritize bins with minimal slack (Best Fit) using negative slack
        priority = -slack
    else:
        # Prioritize bins with maximum remaining capacity (Worst Fit)
        priority = bins_remain_cap
    return np.where(can_fit, priority, -np.inf)
```
