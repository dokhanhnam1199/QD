```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a hybrid best-fit/worst-fit strategy.
    
    Adaptive weighting balances slack minimization (best-fit) for large items and 
    space preservation (worst-fit) for small items, based on item size relative to 
    estimated bin capacity. Threshold-free continuous adaptation via dynamic scoring.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    s = item
    R = bins_remain_cap
    
    # Identify feasible bins
    can_fit = R >= s
    if not np.any(can_fit):
        return np.full_like(R, -np.inf)
    
    # Estimate bin capacity as maximum remaining capacity (assumes empty bins exist)
    B_estimate = np.max(R)
    
    # Calculate item size relative to bin capacity (avoid division by zero)
    eps = 1e-9
    s_rel = s / (B_estimate + eps)
    
    # Best-fit component: minimize residual capacity (negative for maximization)
    best_component = -(R - s)
    
    # Worst-fit component: maximize remaining capacity
    worst_component = R
    
    # Adaptive weighted combination of heuristics
    combined = s_rel * best_component + (1 - s_rel) * worst_component
    
    # Mask infeasible bins and return priorities
    return np.where(can_fit, combined, -np.inf)
```
