```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores based on a quadratic penalty for leftover space.

    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores where higher values indicate better fit.
        Bins with smaller leftover space after placement have significantly higher priority.
    """
    valid_mask = bins_remain_cap >= item
    # Apply quadratic penalty to leftover space: smaller leftovers are prioritized more strongly
    priority = np.where(valid_mask, - (bins_remain_cap - item) ** 2, -np.inf)
    return priority
```
