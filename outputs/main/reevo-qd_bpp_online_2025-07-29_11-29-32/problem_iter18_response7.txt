```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit heuristics with normalized item size weighting.
    
    Dynamic weight blending based on item size relative to bin capacity ensures effective bin utilization:
    - Prioritizes Worst Fit (maximal residual) for small items
    - Transitions smoothly to Best Fit (minimal residual) for large items
    - Normalized to handle arbitrary bin capacities
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin (all same capacity).
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if bins_remain_cap.size == 0:
        return np.array([])  # No bins available
    
    EPS = 1e-9
    C = np.max(bins_remain_cap)
    
    # Early exit for items exceeding bin capacity
    if item > C + EPS:
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Normalize by bin capacity to ensure scale invariance
    normalized_item = item / (C + EPS)
    
    # Smooth weight transition between best-fit (negative) and worst-fit (positive)
    weight = (1.0 - 2 * normalized_item) - 1e-6  # Slight bias for 0.5-sized items
    
    can_fit = bins_remain_cap >= item - EPS
    residual = bins_remain_cap - item
    
    # Compute priority with tie-breaker to prevent symmetry-related deadlocks
    priority = np.where(can_fit, residual * weight, -np.inf)
    priority += EPS * np.random.rand(*priority.shape)
    
    return priority
```
