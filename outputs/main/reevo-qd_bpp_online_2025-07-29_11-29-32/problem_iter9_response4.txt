```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins combining Best Fit and Worst Fit heuristics dynamically.
    
    Bins that can fit the item have priorities computed by blending Best Fit (preferring tight fits for large items)
    and Worst Fit (preferring spacious fits for small items), using item-to-bin capacity ratios to determine weights.
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual_after = bins_remain_cap - item
    r = item / bins_remain_cap
    # Dynamic blending formula based on relative item size to bin capacity
    priority = residual_after * (1 - 2 * r)
    # Apply hard penalization to invalid bins
    priority = np.where(can_fit, priority, -np.inf)
    return priority
```
