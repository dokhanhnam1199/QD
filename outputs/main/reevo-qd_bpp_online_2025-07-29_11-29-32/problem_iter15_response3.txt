```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best/Worst Fit heuristics.
    
    Large items (â‰¥0.5) use Best Fit (tightest fit). Small items use Worst Fit
    to prioritize bins with largest remaining space. Infeasible bins receive 
    -inf priority. based on input thresholds.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    large_item = item >= 0.5
    if large_item:
        # Prioritize tightest fit for large items (Best Fit)
        priority = -(bins_remain_cap - item)
    else:
        # Prioritize bins with most available space for small items (Worst Fit)
        priority = bins_remain_cap
    # Apply feasibility mask
    return np.where(can_fit, priority, -np.inf)
```
