```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores combining BF and WF dynamically with adaptive item-based weights, tie-breaking, and slack optimization."""
    can_fit = bins_remain_cap >= item
    
    # Dynamic BF weight based on squared item size (emphasizes larger items)
    weight_bf = item ** 2
    
    # BF prioritizes tight fits (s - R), WF prioritizes large gaps (R)
    best_fit_term = item - bins_remain_cap
    worst_fit_term = bins_remain_cap
    
    # Blend strategies with weighted summation
    priority = weight_bf * best_fit_term + (1.0 - weight_bf) * worst_fit_term
    
    # Epsilon tie-breaker (1e-6 * -R) preserves BF behavior in ties
    priority -= 1e-6 * bins_remain_cap
    
    # Mask invalid bins
    priority[~can_fit] = -np.inf
    
    return priority
```
