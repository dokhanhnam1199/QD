{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns blended priority scores using item-size threshold: Best Fit for large items (>= 0.7), Worst Fit for small items.\"\"\"\n    can_fit = bins_remain_cap >= item\n    LARGE_ITEM_THRESHOLD = 0.7  # Empirically tuned to balance edge cases and synergy\n    best_priority = -(bins_remain_cap - item)  # Best Fit: minimize remaining after placement\n    worst_priority = bins_remain_cap         # Worst Fit: maximize remaining space\n    priority = np.where(item >= LARGE_ITEM_THRESHOLD, best_priority, worst_priority)\n    return np.where(can_fit, priority, -np.inf)\n\n[Reflection]\n- Blend strategies using item size thresholds  \n- Prioritize large items with Best Fit, small with Worst Fit  \n- Tune thresholds empirically for balance  \n- Penalize invalid bins (-\u221e) to ensure feasibility  \n- Combine multiple heuristics adaptively improves synergy\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}