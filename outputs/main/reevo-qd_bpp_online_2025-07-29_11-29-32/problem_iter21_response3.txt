```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on item size thresholds.
    
    For items > 0.5: Best Fit strategy (favor smallest remaining capacity).
    For items <= 0.5: Worst Fit strategy (favor largest remaining capacity).
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    threshold = 0.5

    # Choose strategy based on item size
    if item > threshold:
        # Best Fit: prioritize smallest remaining capacity after placement
        base_score = -(bins_remain_cap - item)
    else:
        # Worst Fit: prioritize largest remaining capacity
        base_score = bins_remain_cap

    return np.where(can_fit, base_score, -np.inf)
```
