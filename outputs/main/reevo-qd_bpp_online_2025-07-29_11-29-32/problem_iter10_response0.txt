```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit and Worst Fit with adaptive weights and tie-breaking.
    
    Adaptive blending is achieved via item-size-dependent weights. A small epsilon term breaks ties
    in favor of tighter fits for edge cases (e.g., item=0.5).
    
    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Main adaptive priority blending Best/Worst Fit (proportional to residual)
    adaptive_weight = 1.0 - 2.0 * item
    adaptive_priority = adaptive_weight * residual
    
    # Epsilon term biasing toward smaller residuals in tie-breaker cases
    epsilon_priority = -residual * 1e-6  # Small negative to prefer least residual
    
    # Combine priorities while masking invalid bins
    priority = np.where(can_fit, adaptive_priority + epsilon_priority, -np.inf)
    return priority
```
