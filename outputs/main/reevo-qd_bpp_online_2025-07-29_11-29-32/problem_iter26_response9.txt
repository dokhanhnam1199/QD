```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function blending Best Fit and Worst Fit heuristics based on normalized item size."""
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    EPSILON = 1e-9
    C = np.max(bins_remain_cap)
    
    # Handle fully packed bins edge case
    if C < EPSILON:
        return np.full_like(bins_remain_cap, -np.inf)
    
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Normalize item size relative to bin capacity
    item_ratio = item / np.clip(C, EPSILON, None)
    
    # Linear weight based on item ratio (Best Fit for large items, Worst Fit for small items)
    priority = residual * (1 - 2 * item_ratio)
    
    return np.where(can_fit, priority, -np.inf)
```
