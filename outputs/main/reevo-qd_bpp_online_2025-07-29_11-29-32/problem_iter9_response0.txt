```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins, blending best/worst fit heuristics via adaptive item-to-residual ratio.
    
    Bins that can fit the item are prioritized by a dynamic formula balancing slack minimization for large items 
    and space preservation for small ones. Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item

    # Dynamic score blends best/worst fit via item-to-residual ratio
    with np.errstate(divide='ignore', invalid='ignore'):
        ratio = item / bins_remain_cap
        score = residual * (1 - 2 * ratio)

    # Mask invalid bins and return final priorities
    return np.where(can_fit, score, -np.inf)
```
