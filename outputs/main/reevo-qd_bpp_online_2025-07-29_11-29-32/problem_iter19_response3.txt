```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using adaptive blending of Best Fit and Worst Fit heuristics.
    
    For large items (>0.5), prioritizes bins with smallest remaining capacity (Best Fit).
    For small items (<=0.5), prioritizes bins with largest remaining capacity (Worst Fit).
    Smoothly blends strategies around the 0.5 threshold using linear interpolation.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    s = item
    
    # Adaptive weight for Best Fit component (1.0 for large items, linear blend for small)
    weight_bf = np.where(s >= 0.5, 1.0, s / 0.5)
    
    # Calculate slack and priority components
    slack = bins_remain_cap - s
    bf_component = -slack  # Best Fit: minimize slack
    wf_component = bins_remain_cap  # Worst Fit: maximize remaining capacity
    
    # Blend components using adaptive weights
    priority = weight_bf * bf_component + (1 - weight_bf) * wf_component
    
    # Mask infeasible bins
    return np.where(can_fit, priority, -np.inf)
```
