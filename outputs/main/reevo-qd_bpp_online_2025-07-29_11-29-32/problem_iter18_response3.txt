```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using Best Fit with tie-breaking for improved consolidation.
    
    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin. Higher values indicate better fit.
    """
    EPSILON = 1e-9
    feasible = bins_remain_cap >= item
    # Main priority: best fit (least leftover space)
    base_priority = item - bins_remain_cap
    # Tie-breaker: prefer bins with smaller remaining capacity before placement
    tie_breaker = -EPSILON * bins_remain_cap  
    priority = np.where(feasible, base_priority + tie_breaker, -np.inf)
    return priority
```
