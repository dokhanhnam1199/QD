```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a dynamic threshold based on item size and residual capacity.
    
    For each bin that can fit the item:
    - If residual capacity after placement >= item size (i.e., R_i >= 2*item), prioritize bins with largest residual (worst-fit).
    - Else, prioritize bins with smallest residual (best-fit).
    This balances space preservation for future large items and efficient packing of current items.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    mask_high = bins_remain_cap >= 2 * item  # Residual after placement >= item size
    
    # Calculate priority scores
    score = np.where(
        can_fit,
        np.where(
            mask_high,
            bins_remain_cap,  # Worst-fit for bins preserving space for future items
            -(bins_remain_cap - item)  # Best-fit for tight fits
        ),
        -np.inf  # Invalid bins
    )
    return score
```
