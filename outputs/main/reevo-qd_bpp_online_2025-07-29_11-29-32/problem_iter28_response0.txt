```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved heuristic using Best Fit for large items (> C/2) and Worst Fit for small items."""
    if bins_remain_cap.size == 0:
        return np.array([])  # No bins available, must create new bin

    C = bins_remain_cap.max()
    can_fit = bins_remain_cap >= item - 1e-9  # Floating-point tolerance
    slack = bins_remain_cap - item

    # Determine if item is large relative to bin capacity
    is_large = item >= (C / 2.0)

    # Best Fit for large items (minimize slack), Worst Fit for small items (max remaining)
    if is_large:
        priority = -slack
    else:
        priority = bins_remain_cap

    return np.where(can_fit, priority, -np.inf)
```
