```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Switches between Best Fit and Worst Fit based on relative item size.
    
    Args:
        item: Size of the incoming item to pack.
        bins_remain_cap: Array of current bins' remaining capacities.
    
    Returns:
        Array of priority scores for each bin (higher = better candidate).
    """
    EPSILON = 1e-9
    # Handle empty bins edge case
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    # Infer bin capacity from maximum remaining capacity
    C = bins_remain_cap.max()
    if C < EPSILON:  # All bins full - fallback to normalized capacity
        C = 1.0
    
    # Feasible candidate filter and residual space
    can_fit = bins_remain_cap >= item - EPSILON
    residual = bins_remain_cap - item
    
    # Strategy switching threshold: item vs half-occupied bin space
    if item >= C / 2:  # Large items: Best Fit (minimize fragmentation)
        priority = np.where(can_fit, -residual, -np.inf)
    else:  # Small items: Worst Fit (preserve slack space)
        priority = np.where(can_fit, residual, -np.inf)
    
    return priority
```
