```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved priority function blending best-fit and worst-fit heuristics with item-size-dependent weights."""
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Smooth weight transition at item_size = 0.5 with bias adjustment
    weight_bias = 1e-6
    weight = (1 - 2 * item) - weight_bias  # Positive for small items (worst-fit), negative for large (best-fit)
    
    # Tie-breaking term preserves priority hierarchy while preventing arbitrary selections
    tie_breaker = residual * 1e-8  # Weak preference for bins with smaller residuals (best-fit dominance)
    
    priority = np.where(can_fit, residual * weight + tie_breaker, -np.inf)
    return priority
```
