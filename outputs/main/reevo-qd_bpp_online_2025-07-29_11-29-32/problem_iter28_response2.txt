```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Computes bin priority using blended BF/WF strategy with smooth threshold transition.
    
    Args:
        item: Size of the item to pack (0-1 range).
        bins_remain_cap: Remaining capacity of each bin.
    
    Returns:
        Array of same length as bins_remain_cap with priority scores.
    """
    THRESHOLD = 0.5
    DELTA = 0.1  # Transition zone width

    # Calculate feasibility mask and slack space
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item

    # Continuous blending using linear interpolation in transition zone
    t = np.clip((item - (THRESHOLD - DELTA)) / (2 * DELTA), 0.0, 1.0)
    
    # Priority components with minimal computational overhead
    bf_priority = -slack    # Encourages Utilization (Best Fit)
    wf_priority = bins_remain_cap  # Favors vacancy retention (Worst Fit)

    # Blend priorities with transition zone
    composite = t * bf_priority + (1 - t) * wf_priority

    # Mask impossible allocations
    return np.where(can_fit, composite, -np.inf)
```
