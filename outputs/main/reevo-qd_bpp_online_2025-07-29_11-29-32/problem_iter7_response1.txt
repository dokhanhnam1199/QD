```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a dynamic blend of best-fit and worst-fit heuristics.
    
    Large items prioritize slack minimization; small items preserve space.
    Priority scores combine item-size-dependent weights into a threshold-free formula.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    slack_penalty = -item * (bins_remain_cap - item)
    space_preservation = (1 - item) * bins_remain_cap
    base_priority = slack_penalty + space_preservation
    return np.where(can_fit, base_priority, -np.inf)
```
