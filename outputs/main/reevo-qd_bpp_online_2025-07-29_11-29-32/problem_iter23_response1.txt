```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit (item > 0.5) and Worst Fit (item â‰¤ 0.5).
    
    Bins that can fit the item are prioritized by minimal leftover (Best Fit) or maximal 
    remaining capacity (Worst Fit) depending on item size. Infeasible bins receive -inf.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    threshold = 0.5
    can_fit = bins_remain_cap >= item
    leftover = bins_remain_cap - item
    
    if item > threshold:
        priority = -leftover  # Best Fit: minimize leftover
    else:
        priority = leftover   # Worst Fit: maximize leftover
    
    priority[~can_fit] = -np.inf
    return priority
```
