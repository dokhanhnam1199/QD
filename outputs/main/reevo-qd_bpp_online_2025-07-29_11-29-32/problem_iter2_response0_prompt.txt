{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins using a combination of best-fit and bin utilization.\n\n    Args:\n        item: Size of the item to be packed.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Mask bins that can fit the item\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    if not np.any(valid):\n        return priorities  # No valid bins, return all -inf\n    \n    # Calculate ratio-based priority (higher = better fit)\n    ratio_priority = item / bins_remain_cap[valid]\n    \n    # Calculate utilization-based priority (higher = more utilized bin)\n    bin_utilization = 1.0 - bins_remain_cap[valid]\n    utilization_priority = bin_utilization / (1.0 - item + 1e-9)  # Normalize by item size\n    \n    # Combine priorities with weighted sum (tuned for balanced bin utilization)\n    combined_priority = 0.7 * ratio_priority + 0.3 * utilization_priority\n    \n    priorities[valid] = combined_priority\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins that can fit the item with minimal remaining capacity.\n    # Priority is (item - bin_remaining_cap), which is negative for valid bins,\n    # with higher values (closer to 0) indicating better fits.\n    return np.where(bins_remain_cap >= item, item - bins_remain_cap, -np.inf)\n\n[Reflection]\nPrioritize minimal leftover space, use simple direct metrics (e.g., item - remaining capacity), avoid complex weight combinations.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}