```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best/Worst Fit heuristics for BPP.
    
    Large items (relative to bin residual capacity) favor smallest leftover space (Best Fit).
    Small items favor largest leftover space (Worst Fit). Adaptive weighting via item-to-capacity ratio.
    Infeasible bins receive -inf priority.
    """
    can_fit = bins_remain_cap >= item
    ratio = np.divide(item, bins_remain_cap, where=can_fit)  # item-to-capacity ratio
    weight = 1 - 2 * ratio  # 1 for Best Fit (large items), -1 for Worst Fit (small items)
    residual = bins_remain_cap - item
    priority = weight * residual  # Dynamic priority scoring
    return np.where(can_fit, priority, -np.inf)
```
