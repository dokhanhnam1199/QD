```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit/Worst Fit via item size and residual impact.
    Adds small epsilon to prevent zero-weights for mid-sized items, and ensures non-ambiguous bin selection.
    
    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Adaptive weight with small epsilon avoids zero priority at item = 0.5
    weight = 1 - 2 * item + 1e-9
    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
