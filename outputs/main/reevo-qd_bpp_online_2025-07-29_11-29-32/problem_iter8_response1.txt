```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit heuristics with smooth transition, perfect-fit bonus, and numerical stability.
    
    Combines best-fit (minimize residual) and worst-fit (maximize residual) via item-size-dependent weight transitioning at item_size=0.5,
    with a large bonus for bins achieving perfect fit (residual <= 1e-7) to eliminate fragmentation. Weight bias ensures deterministic 
    behavior for 0.5-sized items. Preserves efficiency for small items while avoiding unusable gaps for large items.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Perfect fit bonus to prioritize bins with zero/near-zero residual
    perfect_fit_bonus = np.where(residual <= 1e-7, 1e6, 0.0)
    
    # Dynamic weight with smooth transition and edge-case smoothing
    weight_bias = 1e-6
    weight = (1 - 2 * item) - weight_bias  # Positive for item < 0.5 (worst-fit), negative for item > 0.5 (best-fit)
    
    # Final priority combines residual-weight product and perfect-fit bonus
    priority = np.where(can_fit, residual * weight + perfect_fit_bonus, -np.inf)
    return priority
```
