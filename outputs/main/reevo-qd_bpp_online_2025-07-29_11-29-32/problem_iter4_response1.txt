```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins with tie-breaking for higher utilization.

    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin. Higher values indicate better fit.
    """
    # Primary priority: best fit (least leftover space, max item - bin_remaining)
    primary = np.where(bins_remain_cap >= item, item - bins_remain_cap, -np.inf)
    
    # Secondary tie-breaker: prioritize bins with higher utilization
    # Utilization is (1.0 - bin_remaining), scaled by tiny weight to avoid overriding primary
    secondary = (1.0 - bins_remain_cap) * 1e-9
    
    return primary + secondary
```
