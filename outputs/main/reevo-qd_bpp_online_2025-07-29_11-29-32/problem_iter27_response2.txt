```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns prioritized bin scores blending Best Fit for large items and Worst Fit for small items.
    
    Args:
        item: Size of item to be packed.
        bins_remain_cap: Array of current remaining capacities for each bin.
        
    Returns:
        Array of priority scores where higher values indicate better bin choice.
    """
    x = 0.5      # Threshold item size (normalized to bin capacity)
    delta = 0.1  # Transition smoothness interval
    
    # Calculate blending parameter t in [0,1]
    if item >= x:
        t = 0.0  # Best Fit
    elif item <= x - delta:
        t = 1.0  # Worst Fit
    else:
        t = (x - item) / delta  # Linear transition

    # Core priority calculation with tie-breaking epsilon
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    epsilon = 1e-8
    priority = (2 * t - 1) * residual - epsilon * residual  # Blended + tie-breaker
    
    return np.where(can_fit, priority, -np.inf)
```
