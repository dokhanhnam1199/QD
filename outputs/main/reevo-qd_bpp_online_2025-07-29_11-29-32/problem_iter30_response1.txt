```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using adaptive dual-strategy with item-bin synergy.
    
    For items > 0.5 (large): Best Fit prioritization (minimize slack).
    For items <= 0.5 (small): 
        - Highest priority to bins where inserting item leaves room for another identical item (rem_cap >= 2*item)
        - Secondary priority to bins with largest remaining capacity (classic Worst Fit)
        - Both prioritized solely by linear rem_cap values
    """
    can_fit = bins_remain_cap >= item
    
    if item > 0.5:
        # Best Fit for large items (linear representation minimizing slack)
        priority = -(bins_remain_cap - item)
    else:
        # Refinement for small items:
        # 1. Prefer bins where after insertion, at least another item of same size can fit
        # 2. Within each class, prioritize by remaining capacity (linear)
        dual_capacity_mask = bins_remain_cap >= 2 * item
        priority = np.where(dual_capacity_mask, bins_remain_cap + 1, bins_remain_cap)
    
    return np.where(can_fit, priority, -np.inf)
```
