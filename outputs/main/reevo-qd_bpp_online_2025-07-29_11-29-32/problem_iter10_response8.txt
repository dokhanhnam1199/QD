```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using best-fit for large items (> 0.5) and worst-fit for smaller items.
    This approach creates a sharp distinction between strategies for different item sizes to minimize fragmentation.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # High items (large): use best-fit (min residual)
    # Low items (small): use worst-fit (max residual)
    if item > 0.5:
        priority = -residual  # Minimizing residual equivalent to best-fit
    else:
        priority = residual  # Maximizing residual equivalent to worst-fit
    
    return np.where(can_fit, priority, -np.inf)
```
