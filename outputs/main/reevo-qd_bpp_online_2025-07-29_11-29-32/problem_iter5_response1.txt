```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins balancing best-fit and worst-fit heuristics.
    
    Dynamically scores bins based on item size: minimizes residual capacity for large items
    and preserves space (maximizes residual) for small items. Penalizes infeasible bins (-âˆž).
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    weight = 1 - 2 * item  # Blends best-fit (negative weight) & worst-fit (positive weight)
    priority = np.where(can_fit, residual * weight, -np.inf)
    return priority
```
