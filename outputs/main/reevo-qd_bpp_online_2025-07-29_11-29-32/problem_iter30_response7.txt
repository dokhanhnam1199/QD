```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved threshold-based strategy: Best Fit for item >= 0.5, Worst Fit otherwise.
    
    Prioritizes bins with least slack (Best Fit) for large items (>= 0.5) to minimize waste,
    and bins with maximum remaining capacity (Worst Fit) for small items (< 0.5) to preserve flexibility.
    """
    can_fit = bins_remain_cap >= item
    if item >= 0.5:
        # Best Fit strategy: minimize the slack space after placement
        priority = - (bins_remain_cap - item)
    else:
        # Worst Fit strategy: utilize largest bins first to preserve small-space bins
        priority = bins_remain_cap
    return np.where(can_fit, priority, -np.inf)
```
