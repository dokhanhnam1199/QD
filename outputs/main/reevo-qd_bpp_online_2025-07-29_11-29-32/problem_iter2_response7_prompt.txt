{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority function combining Worst Fit and Best Fit heuristics based on item size relative to estimated bin capacity.\"\"\"\n    if len(bins_remain_cap) == 0:\n        return np.array([])\n    \n    # Estimate bin capacity as the maximum remaining capacity among current bins\n    C = np.max(bins_remain_cap)\n    relative_size = item / C if C > 0 else 0.0\n    \n    valid_mask = bins_remain_cap >= item\n    \n    if relative_size > 0.5:\n        # Prioritize bins with largest remaining capacity for large items (Worst Fit)\n        return np.where(valid_mask, bins_remain_cap, -np.inf)\n    else:\n        # Prioritize bins with smallest remaining capacity for small items (Best Fit)\n        return np.where(valid_mask, -bins_remain_cap, -np.inf)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores using a Best Fit heuristic with slack minimization.\n    \n    Bins that can fit the item are prioritized by how closely they match the item size,\n    preferring bins with the smallest remaining capacity after placement. Bins that\n    cannot fit the item are assigned a priority of negative infinity.\n    \"\"\"\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    # Prioritize bins with smallest slack (remaining capacity after placement)\n    # by assigning higher priority to smaller slack values.\n    priorities = np.where(\n        valid,\n        -slack,  # Equivalent to (item - bins_remain_cap), higher is better\n        -np.inf\n    )\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal slack (remaining capacity after placement) to reduce fragmentation. Avoid fixed thresholds; focus on dynamic, tight fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}