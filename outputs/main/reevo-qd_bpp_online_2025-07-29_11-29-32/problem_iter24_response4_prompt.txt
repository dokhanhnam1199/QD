{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority function v2 implementing adaptive bin selection with quadratic penalties.\"\"\"\n    EPSILON = 1e-9\n    if bins_remain_cap.size == 0:\n        return np.array([])  # Handle empty bins case gracefully\n\n    # Infer bin capacity from max remaining capacity\n    C = np.max(bins_remain_cap)\n    \n    # Handle edge cases where all bins are full but item is zero\n    if C < EPSILON and item < EPSILON:\n        return np.zeros_like(bins_remain_cap, dtype=np.float64)\n    if C < EPSILON:\n        C = 1.0  # Fallback normalization value\n    \n    # Adaptive blending weights based on item-capacity ratio\n    item_ratio = item / C\n    weight = item_ratio ** 1.5  # Polynomial expression for adaptive strategy\n    \n    # Feasibility filter and residual computation\n    can_fit = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    \n    # Best Fit component: quadratic penalty for residual space\n    bf_component = -(residual ** 2)  # Stronger penalty for leftover space\n    \n    # Worst Fit component: slack normalization with epsilon-stabilized weights\n    normalized_slack = residual / (bins_remain_cap + EPSILON)\n    wf_component = normalized_slack * item_ratio  # Size-adjusted slack valuation\n    \n    # Non-linear residual tuning with deviation minimization\n    ideal_residual = C * np.sqrt(item_ratio)  # Math-guided target\n    deviation = residual - ideal_residual\n    deviation_penalty = (deviation ** 2) / (item + EPSILON)\n    \n    # Final priority calculation with adaptive blending and math-optimized terms\n    priority = (weight * bf_component) + ((1 - weight) * wf_component) - deviation_penalty\n    \n    # Epsilon stabilization for smooth transitions\n    priority += EPSILON * np.random.rand(*priority.shape)\n    \n    # Mask infeasible bins and return\n    return np.where(can_fit, priority, -np.inf)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins using a dynamic target residual approach.\n    \n    Priority is determined by how closely a bin's residual after placement matches\n    a target residual of (1 - item_size), blending Best Fit (large items) and\n    Worst Fit (small items) through a size-adjusted quadratic penalty. Feasible bins\n    are scored to balance snug fits for large items and space preservation for\n    small items.\n    \n    Args:\n        item: Size of item to be packed (normalized to bin capacity, assumed to be 1.0).\n        bins_remain_cap: Array of current remaining capacities for each bin.\n        \n    Returns:\n        Array of scores with the same shape as bins_remain_cap.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    target_residual = 1.0 - item  # Blend target based on item size\n    squared_error = (residual - target_residual) ** 2\n    priority = np.where(can_fit, -squared_error, -np.inf)\n    return priority\n\n[Reflection]\nFocus on minimizing residual deviation from a dynamic target, balance fit strategies via size-adaptive targets, use quadratic penalties for smooth optimization, prioritize simplicity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}