```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending best-fit and worst-fit strategies with adaptive thresholds.
    
    Large items (>50% of estimated bin capacity) use best-fit (min slack), small items use worst-fit
    (preserve slack). Thresholds empirically set at 50% capacity for simplicity and vectorization.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Early return for empty bins
    if bins_remain_cap.size == 0:
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Item validity and slack calculation
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    
    # Estimate bin capacity from current max remaining capacity
    max_cap = np.max(bins_remain_cap)
    normalized_item = item / (max_cap + 1e-9)  # Avoids division by zero

    # Best-fit score (min slack) = -slack, Worst-fit score (preserve slack) = slack
    best_score = -slack
    worst_score = slack
    
    # Threshold blending: best-fit for large items (>50% capacity), worst-fit for others
    use_best = normalized_item >= 0.5
    priority = np.where(use_best, best_score, worst_score)
    
    # Apply -infty penalty to invalid bins and return
    return np.where(can_fit, priority, -np.inf)
```
