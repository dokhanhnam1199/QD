{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n1. **Dynamic Best/Worst Blend**: Combine Best Fit (large items) and Worst Fit (small items) using adaptive weights proportional to item size, favoring tight fits or spacious bins dynamically\u2014ensures slack reduction and long-term space efficiency.  \n\n2. **Hard Penalization & Alignment**: Assign negative infinity to bins violating capacity constraints; prioritize feasible bins whose residual space aligns closely with the item\u2019s size\u2014guiding efficient, valid allocations without prior size thresholds.  \n\n3. **Size-Driven Residual Scoring**: Prioritize bins minimizing leftover space for large items (slack aversion) but maximizing residual capacity for small items, using continuous scoring formulas adjusted by incoming item dimensions.  \n\n4. **Threshold-Free Weighting**: Replace rigid size thresholds with smooth, ratio-based adaptation: weight Best/Worst Fit priorities by the item-to-bin residual ratio, maintaining strategy flexibility across varying packings.  \n\n5. **Hybrid Lookahead Balancing**: Reinforce dynamic heuristics by penalizing invalid fits and biased space usage, blending slack minimization for large items with space preservation for small ones using lookahead tie-breakers for long-term optimality.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins based on Best Fit heuristic.\n\n    Bins that can fit the item are prioritized by smallest remaining capacity after placement.\n    Infeasible bins receive -inf priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)\n    return priority\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}