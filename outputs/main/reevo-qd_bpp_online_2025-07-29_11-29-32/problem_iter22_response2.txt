```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on Best Fit heuristic with exact fit preference.
    
    Bins that can accommodate the item are prioritized by their residual capacity after placement.
    When multiple bins yield the same minimal residual, they are prioritized based on proximity to exact fit.
    Infeasible bins are assigned -inf priority to ensure exclusion.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with computed priority scores.
    """
    can_fit = bins_remain_cap >= item
    # Primary metric: minimal residual after placement (Best Fit)
    primary_priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    # Secondary metric: exact fits (residual=0) are prioritized over near fits
    # Break ties by penalizing additional unused capacity
    secondary_priority = np.where(can_fit, 
                                  np.isclose(bins_remain_cap - item, 0.0), 
                                  False).astype(float)
    return primary_priority + 0.1 * secondary_priority
```
