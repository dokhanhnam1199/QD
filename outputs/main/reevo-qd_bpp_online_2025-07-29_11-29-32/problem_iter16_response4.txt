```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit for large items (>= C/2) and Worst Fit for small ones."""
    if not bins_remain_cap.size:
        return np.array([])
    
    C = np.max(bins_remain_cap)
    can_fit = bins_remain_cap >= item
    threshold = C / 2
    
    if item >= threshold:
        # Best Fit Strategy: minimize slack (highest priority for smallest non-negative slack)
        slack = bins_remain_cap - item
        priority = -slack
    else:
        # Worst Fit Strategy: allocate in bins with maximum remaining capacity
        priority = bins_remain_cap
        
    return np.where(can_fit, priority, -np.inf)
```
