{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores blending best-fit and worst-fit with item-size-dependent weights and threshold adjustment.\n    \n    Blends best-fit (residual * negative weight) and worst-fit (residual * positive weight) heuristics with smooth transition at \n    item_size = 0.5, adjusted by epsilon to prioritize best-fit for perfect 0.5-sized items. Additive numerical stability ensures \n    no zero-weight edge cases. Preserves space efficiency for small items and gap avoidance for large items.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    \n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    \n    # Dynamic weight with smooth transition and edge-case handling\n    weight_bias = 1e-6\n    weight = (1 - 2 * item) - weight_bias  # Best-fit default at item_size threshold\n    \n    priority = np.where(can_fit, residual * weight, -np.inf)\n    return priority\n\n[Reflection]\nPrioritize dynamic item-size-dependent weights blending best/worst-fit, smooth transitions near thresholds, numerical stability via small biases, and residual-based scoring for efficient packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}