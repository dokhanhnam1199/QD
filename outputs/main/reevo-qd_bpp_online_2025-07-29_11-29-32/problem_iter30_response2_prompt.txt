{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Ranked via size threshold \ud835\uded5: large items (\ud835\udd69 > 0.5) \u2192 BF; small items (\ud835\udd69 \u2264 0.5) \u2192 1.5\u00d7 slack preservation.\n    Tie-breaker (\ud835\udf00\u00b7i) ensures determinism.\n    \n    Args:\n        item: Normalized size (\u22641) of the incoming item.\n        bins_remain_cap: List of normalized remaining capacities (\u22641).\n    \n    Returns:\n        Priorities where higher = better fit. Infeasible bins get -\u221e.\n    \"\"\"\n    # Constants\n    THRESHOLD = 0.5\n    WF_WEIGHT = 1.5  # Increased slack preservation for small items\n    EPSILON = 1e-8   # Tie-breaker to ensure deterministic selection\n\n    # Feasibility mask\n    can_fit = bins_remain_cap >= item\n    \n    # Best Fit for large items: minimize slack\n    bf_slack = bins_remain_cap - item\n    bf_priority = -bf_slack  # Higher = closer to zero slack\n    \n    # Worst Fit variant for small items: maximize slack weighted by positional tie-breaker\n    wf_slack = bins_remain_cap  \n    wf_priority = (wf_slack * WF_WEIGHT) + (EPSILON * np.arange(len(wf_slack)))  # Slack prioritization\n\n    # Select strategy based on item size\n    priority = np.where(\n        can_fit,\n        np.where(\n            item > THRESHOLD,\n            bf_priority,   # High-priority for tight fits (large items)\n            wf_priority    # High-priority for slack preservation (small items)\n        ),\n        -np.inf  # Infeasible bins\n    )\n\n    return priority\n\n[Reflection]\nDifferentiate item sizes; use Best Fit for large items (min slack), Worst Fit variant for small items (slack preservation) with tie-breaker. Adjust thresholds and weights via data-driven analysis.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}