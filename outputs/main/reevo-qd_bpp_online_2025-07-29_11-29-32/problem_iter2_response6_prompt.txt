{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority function combining Best Fit and Worst Fit heuristics based on item size.\"\"\"\n    slack = bins_remain_cap - item\n    mask = slack >= 0\n    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    # Threshold for large items (assuming bin capacity is normalized to 1.0)\n    LARGE_ITEM_THRESHOLD = 0.5\n    \n    if item > LARGE_ITEM_THRESHOLD:\n        # Prioritize bins with largest remaining capacity (Worst Fit for large items)\n        priority[mask] = bins_remain_cap[mask]\n    else:\n        # Prioritize bins with smallest slack (Best Fit for small items)\n        priority[mask] = -slack[mask]\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins based on Best Fit heuristic.\n\n    Args:\n        item: Size of the item to be packed.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores where higher values indicate better fit.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining = bins_remain_cap - item\n    # Identify valid bins (can fit the item)\n    valid = remaining >= 0\n    # Priority is negative of remaining space (prioritizes smallest leftover)\n    priority = np.where(valid, -remaining, -np.inf)\n    return priority\n\n[Reflection]\nPrioritize consistent Best Fit over hybrid heuristics; avoid arbitrary thresholds. Minimize leftover space universally for better bin utilization.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}