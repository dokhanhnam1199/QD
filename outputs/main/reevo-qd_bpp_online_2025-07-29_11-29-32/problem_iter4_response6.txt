```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores combining Best Fit for large items and Worst Fit for small items.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Assume bins have unit capacity (standard BPP formulation)
    BIN_CAPACITY = 1.0
    
    can_fit = bins_remain_cap >= item
    if item > BIN_CAPACITY / 2:
        # Best Fit for large items: prioritize minimal residual space
        return np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Worst Fit for small items: prioritize bins with largest remaining capacity
        return np.where(can_fit, bins_remain_cap, -np.inf)
```
