```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins, blending Best Fit and Worst Fit heuristics dynamically.
    
    For large items (item_size ~ capacity), this favors bins minimizing residual space (Best Fit).
    For small items, this favors bins preserving large spaces (Worst Fit).
    Bins that cannot fit the item receive -inf priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    best_component = -(bins_remain_cap - item)  # Higher priority for smaller residuals
    worst_component = bins_remain_cap          # Higher priority for larger remaining capacity
    
    # Adaptive weights based on item size: large items favor Best Fit, small items favor Worst Fit
    weight_best = item
    weight_worst = 1.0 - item
    
    # Blend the components
    priority = np.where(can_fit, best_component * weight_best + worst_component * weight_worst, -np.inf)
    return priority
```
