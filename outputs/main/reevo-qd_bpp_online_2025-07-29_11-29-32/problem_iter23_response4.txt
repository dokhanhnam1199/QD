```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores blending Best Fit and Worst Fit heuristics based on item size.
    
    Items >0.5 use Best Fit (minimal leftover), items â‰¤0.5 use Worst Fit (maximal leftover).
    Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    threshold = 0.5
    
    if item > threshold:
        # Prioritize minimal leftover space (Best Fit)
        priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Prioritize maximal leftover space (Worst Fit)
        priority = np.where(can_fit, (bins_remain_cap - item), -np.inf)
    
    return priority
```
