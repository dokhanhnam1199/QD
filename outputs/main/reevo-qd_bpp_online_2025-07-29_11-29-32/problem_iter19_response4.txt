```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using adaptive Best/Worst Fit blending.
    
    Large items (>0.55) use Best Fit (minimize residual), small items (<0.45) use Worst Fit (maximize residual).
    Items in [0.45, 0.55] blend strategies via linear interpolation. Infeasible bins receive -inf priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    s = item
    can_fit = bins_remain_cap >= s
    delta = 0.05  # Blending window half-width around threshold (0.5)
    
    # Calculate adaptive weight for Best Fit strategy
    weight_best = np.clip((s - (0.5 - delta)) / (2 * delta), 0.0, 1.0)
    
    # Blend Best Fit (-residual) and Worst Fit (residual) using coefficient method
    coeff = 1.0 - 2.0 * weight_best
    residual = bins_remain_cap - s
    
    # Calculate final priority scores
    priority = np.where(can_fit, coeff * residual, -np.inf)
    return priority
```
