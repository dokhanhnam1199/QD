```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using combined Best/Worst Fit heuristic.
    
    For items >0.5, prioritizes tight fits (Best Fit), for smaller items prefers
    larger gaps (Worst Fit). Priorities are masked to -inf for infeasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    if item > 0.5:  # Large items: Best Fit
        priority = -residual  # Most constrained valid bins get highest (-0.0 > -0.1)
    else:  # Small items: Worst Fit
        priority = residual   # Prioritize largest gaps directly
        
    return np.where(can_fit, priority, -np.inf)
```
