```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    feasible_mask = bins_remain_cap >= item
    large_mask = (item > bins_remain_cap / 2) & feasible_mask
    small_mask = (item <= bins_remain_cap / 2) & feasible_mask
    leftover = bins_remain_cap - item
    best_score = -(leftover ** 2)
    worst_score = bins_remain_cap ** 2
    score = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    score[large_mask] = best_score[large_mask]
    score[small_mask] = worst_score[small_mask]
    tie_breaker = -1e-6 * leftover
    score[feasible_mask] += tie_breaker[feasible_mask]
    return score
```
