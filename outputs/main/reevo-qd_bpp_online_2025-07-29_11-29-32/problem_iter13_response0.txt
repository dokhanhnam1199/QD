```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    epsilon = 1e-9
    can_fit = bins_remain_cap >= item
    
    residual = bins_remain_cap - item
    weight = (item / (bins_remain_cap + epsilon)) ** 2  # Adaptive blending weight

    best_fit_component = -residual
    worst_fit_component = bins_remain_cap  # Slack term for Worst Fit influence

    # Dynamic blend based on item-to-slack ratio polynomial weighting
    score = weight * best_fit_component + (1 - weight) * worst_fit_component
    
    # Feasibility-first filtering with size-adjusted penalties
    priority = np.where(can_fit, score, -np.inf)
    return priority
```
