```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()  # Assuming all bins have the same capacity

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Post-fill levels
    post_fill_levels = bins_remain_cap - item

    # 3. Infesibility penalty
    priorities[~feasible_bins] = -np.inf

    # 4. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item
    #    Handle cases where item doesn't fit robustly using a large penalty.
    waste = np.where(feasible_bins, post_fill_levels, bin_size)  # Use bin_size as waste if item doesn't fit.

    # 5. Normalized Waste as priority:
    normalized_waste = waste / bin_size

    priorities[feasible_bins] = -normalized_waste[feasible_bins]

    # 6. Bonus for near-full bins:
    near_full_threshold = 0.1  # Define a threshold for "near full" (e.g., 10% remaining capacity)
    near_full_bonus = 1
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 7. Penalize bins that would have too little remaining capacity, to consolidate items.
    too_little_threshold = 0.2
    too_little_penalty = -0.5
    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty

    # 8. If there are no feasible bins, distribute the priority evenly based on current occupancy
    if not np.any(feasible_bins):
        normalized_occupancy = (bin_size - bins_remain_cap) / bin_size
        priorities = normalized_occupancy

    return priorities
```
