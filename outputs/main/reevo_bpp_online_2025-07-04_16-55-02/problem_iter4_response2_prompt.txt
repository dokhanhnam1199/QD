{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Very high priority for perfect fits\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000\n\n    # Rule 2: High priority for bins that can fit, inversely proportional to wasted space\n    can_fit = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    waste[~can_fit] = np.inf  # Ensure only bins that can fit are considered\n\n    # Avoid division by zero, and only apply to bins that can fit and are not perfect fits\n    valid_bins = can_fit & ~perfect_fit\n    if np.any(valid_bins):\n        priorities[valid_bins] = 1 / (waste[valid_bins] + 0.0001)  # Small constant to avoid division by zero\n\n    # Rule 3: Very low priority (penalty) for bins that cannot fit\n    priorities[~can_fit] = -1000\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)  # Use float for priority scores\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste minimization: Use inverse waste to heavily penalize large waste.\n    waste = bins_remain_cap - item\n    \n    #Set infeasible waste to large number\n    waste[~feasible_bins] = np.inf\n\n    #Calculate priorities\n    priorities[feasible_bins] = -waste[feasible_bins]\n\n    # 3. Bonus for near-full bins (consolidation):\n    near_full_threshold = 0.1  # Define a threshold for \"near full\" (e.g., 10% remaining capacity)\n    near_full_bonus = 10\n\n    near_full_bins = feasible_bins & (waste >= 0) & (waste <= (bins_remain_cap.max() * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n     # 4. Penalize bins that would have too little remaining capacity\n    too_little_threshold = 0.2\n    too_little_penalty = -5\n\n    too_little_bins = feasible_bins & (waste > 0) & (waste/bins_remain_cap.max() <= too_little_threshold)\n    priorities[too_little_bins] += too_little_penalty\n    \n\n    # 5. If no bin fits, normalize priorities (distribute item randomly)\n    if not np.any(feasible_bins):\n        priorities[:] = 1.0 / len(bins_remain_cap)  # Assign equal probability\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility and waste minimization. Add bonuses for near-full bins and penalties for creating almost-empty bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}