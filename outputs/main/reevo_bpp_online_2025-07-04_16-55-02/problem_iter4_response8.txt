```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Calculate remaining capacity after placing the item
    post_fill_levels = bins_remain_cap - item

    # 3. Infeasibility penalty: Very low priority for infeasible bins
    priorities[~feasible_bins] = -np.inf

    # 4. Waste minimization using normalized waste
    bin_size = bins_remain_cap.max()  # Assuming all bins have the same capacity
    waste = post_fill_levels[feasible_bins]
    normalized_waste = waste / bin_size
    priorities[feasible_bins] = -normalized_waste

    # 5. Bonus for near-full bins (encourage filling bins completely)
    near_full_threshold = 0.1
    near_full_bonus = 1.0
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 6. Penalty for bins that would become too empty (encourage consolidation)
    too_empty_threshold = 0.2
    too_empty_penalty = -0.5
    too_empty_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_empty_threshold))
    priorities[too_empty_bins] += too_empty_penalty

    # 7. If no feasible bin exists, give all bins equal priority
    if not np.any(feasible_bins):
        priorities = np.ones_like(priorities)

    return priorities
```
