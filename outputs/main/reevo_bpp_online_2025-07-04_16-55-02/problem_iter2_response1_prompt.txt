{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Assign high priority to bins that can accommodate the item\n    # with minimal waste.  Avoids creating many almost-full bins.\n    mask = bins_remain_cap >= item\n    if np.any(mask):\n        waste = bins_remain_cap[mask] - item\n        priorities[mask] = 1 / (waste + 1e-6)  # Minimize waste\n        # Further prioritize bins with small waste relative to bin size.\n\n        relative_waste = waste / bins_remain_cap[mask]\n        priorities[mask] += 1/(relative_waste + 1e-6)\n\n    # Assign low priority to bins that cannot accommodate the item.\n    priorities[bins_remain_cap < item] = -1e9 # Very low priority\n\n    # A bin that is almost full receives lower priority\n    priorities -= 10*(1 - bins_remain_cap/bins_remain_cap.max()) # Encourage bins to be used\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and the remaining capacity is minimized (but not negative)\n    fit_indices = remaining_after_add >= 0\n    if np.any(fit_indices):\n        priorities[fit_indices] = 1 / (remaining_after_add[fit_indices] + 0.00001) #avoid division by zero\n\n    # For bins where item doesn't fit, assign a negative priority.  The magnitude reflects how badly it doesn't fit\n    no_fit_indices = ~fit_indices\n    if np.any(no_fit_indices):\n         priorities[no_fit_indices] = -(item - bins_remain_cap[no_fit_indices]) # Negative values. Larger when the item cannot fit\n\n    return priorities\n\n[Reflection]\nPrioritize fitting items tightly; penalize overflow proportionally, avoiding bin underutilization penalty.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}