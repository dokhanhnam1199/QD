```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Prefer bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Rule 2: Among bins that can fit, prefer those with less wasted space after fitting.
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Ignore bins that cannot fit.

    # Normalize wasted space to prioritize bins with smallest waste
    normalized_waste = 1 / (1 + wasted_space) # higher is better
    priorities[fit_mask] += normalized_waste[fit_mask]

    # Rule 3: Add a bonus for bins that are close to full before adding the item
    # Helps utilize bins effectively before opening new ones.

    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # scale to between 0 and 1
    priorities[fit_mask] += fullness[fit_mask] * 0.5 # weigh it by 0.5


    # Rule 4: Apply a penalty to bins that would become almost full after adding the item.
    # Helps avoid bins that are almost full but still requires opening another one.

    almost_full_threshold = 0.1 # if after packing the bins has 10% of space remaining
    remaining_after_pack = bins_remain_cap - item
    almost_full_mask = (remaining_after_pack > 0) & (remaining_after_pack / np.max(bins_remain_cap) <= almost_full_threshold)
    priorities[almost_full_mask] -= 0.2 # slight penalty


    return priorities
```
