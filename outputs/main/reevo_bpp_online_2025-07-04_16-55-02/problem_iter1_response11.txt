```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # A very high priority

    # Give high priority to bins with small remaining capacity that can still fit. This tries to fill the bins as much as possible.
    can_fit = bins_remain_cap >= item
    
    #If can fit and not perfect fit (i.e., there exists some leftover capacity).
    valid_bins = can_fit & ~perfect_fit
    
    if np.any(valid_bins): #If there exists at least one bin to fit the item in which there is some leftover capacity.
      priorities[valid_bins] = (bins_remain_cap[valid_bins] - item)**-1 # the smaller the difference, the higher the priority. If very large differences exist they have low priority.
    
    # Penalize bins that cannot fit the item.
    priorities[~can_fit] = -100 #Very low priority
    

    return priorities
```
