```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste Minimization: Primary objective is to minimize waste.
    post_fill_levels = bins_remain_cap - item
    priorities[feasible_bins] = -post_fill_levels[feasible_bins] / bin_size  # Directly use negative normalized waste

    # 3. Infeasibility Penalty:  Very strong penalty for infeasible bins.
    priorities[~feasible_bins] = -1e9

    # 4. Perfect Fit Bonus: Strong bonus for perfect fits
    perfect_fit_threshold = 0.001 # Small threshold for perfect fit
    perfect_fit_bonus = 10.0

    perfect_fit_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * perfect_fit_threshold))
    priorities[perfect_fit_bins] += perfect_fit_bonus

    # 5. Tight Fit Bonus: Significant bonus for bins that become nearly full.
    near_full_threshold = 0.10  # More lenient threshold
    near_full_bonus = 4.0  # Increased bonus

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 6. Consolidate Items: Penalize bins with very small remaining capacity, relative to the item size.
    too_little_threshold = 0.3 #Increased threshold, more aggresive
    too_little_penalty = -3.0  # Stronger penalty

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold)) & (post_fill_levels > item * 0.1) #Check if enough space remains to be usable
    priorities[too_little_bins] += too_little_penalty

    # 7. Large Item Strategy: Fill nearly empty bins if the item is large.  Make this a strong incentive
    large_item_threshold = 0.8
    nearly_empty_threshold = 0.9
    nearly_empty_bonus = 5.0

    if item > bin_size * large_item_threshold:
        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)
        priorities[nearly_empty_bins] += nearly_empty_bonus

    # 8. Slightly prefer bins that are already relatively full
    already_full_threshold = 0.7
    already_full_bonus = 1.0 #increased bonus significantly

    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))
    priorities[already_full_bins] += already_full_bonus

    # 9. Handle No Feasible Bins:  Ensure a bin is always chosen.
    if not np.any(feasible_bins):
        # If no feasible bins exist, select the bin with largest remaining capacity
        max_cap_bin = np.argmax(bins_remain_cap)
        priorities[max_cap_bin] = 0.0001 #Arbitrary positive value
    
    return priorities
```
