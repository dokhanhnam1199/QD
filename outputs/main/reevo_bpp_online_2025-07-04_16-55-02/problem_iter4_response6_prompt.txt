{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Identify bins that can accommodate the item\n    can_fit = bins_remain_cap >= item\n    \n    # If no bin can fit, prioritize bins with the largest remaining capacity to potentially accommodate future smaller items.\n    if not np.any(can_fit):\n        max_cap = np.max(bins_remain_cap)\n        priorities = bins_remain_cap / max_cap if max_cap > 0 else np.zeros_like(bins_remain_cap)  # Normalize; prevent division by zero\n    else:\n        # Prioritize bins that can fit the item\n        priorities[can_fit] = 1.0\n        \n        # Calculate wasted space for bins that can fit\n        wasted_space = bins_remain_cap - item\n        wasted_space[~can_fit] = np.inf  # Ignore bins that can't fit\n        \n        min_waste = np.min(wasted_space[can_fit])  # Find the minimum waste among bins that can fit\n\n        # Prioritize bins with the smallest wasted space (close fit), but give them slightly lower priority than nearly full bins.\n        close_fit = can_fit & (wasted_space <= (min_waste + 0.1)) #Tolerance added.\n        priorities[close_fit] = 2.0\n\n        # Prioritize nearly full bins to try and close them, give them highest priority\n        nearly_full = can_fit & (bins_remain_cap <= 2 * item)  # Adjust factor of 2 based on item size distribution\n        priorities[nearly_full] = 3.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no feasible bins, return all -inf to force opening a new bin if possible\n    if not np.any(feasible_bins):\n        return np.full_like(bins_remain_cap, -np.inf)\n\n    # 2. Waste minimization: Prioritize bins with minimal waste after packing.\n    waste = bins_remain_cap - item\n    waste[~feasible_bins] = np.inf  # Penalize infeasible bins\n\n    # 3. Utilization: Prioritize bins with higher utilization after packing.\n    utilization = (bins_remain_cap - waste) / bins_remain_cap\n    utilization[~feasible_bins] = -np.inf  # Ensure infeasible bins have the lowest priority\n\n\n    # Combine waste and utilization into a single priority score. Give higher weight to waste.\n\n    priorities = -waste + 5 * utilization  # Minimize waste and maximize utilization\n\n\n\n    priorities[~feasible_bins] = -np.inf  # Explicitly set infeasible bins to lowest priority\n\n    return priorities\n\n[Reflection]\nThe better code uses a combined waste/utilization metric and strongly penalizes infeasible bins, improving packing efficiency.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}