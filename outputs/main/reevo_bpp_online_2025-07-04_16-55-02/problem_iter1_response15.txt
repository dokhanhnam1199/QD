```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: Give high priority to bins that can fit the item closely
    fit_check = bins_remain_cap >= item
    
    # If no bin can fit the item, return a very negative priority to avoid selecting them (indicates a new bin must be opened)
    if not np.any(fit_check):
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Give some small penalty to bins that cannot fit the item (without setting to -inf), so bins that fit always are prioritized.
    priorities[~fit_check] = -1e9 

    # For bins that can fit the item, prioritize bins with smaller remaining capacity *after* placing the item, inspired by Best Fit Decreasing.
    remaining_after_fit = bins_remain_cap[fit_check] - item
    priorities[fit_check] = -remaining_after_fit # Lower remaining is better so make the value negative for prioritizing bins with smaller remainings

    # Add a tiny randomness to break ties and potentially explore different configurations
    priorities[fit_check] += np.random.rand(np.sum(fit_check)) * 1e-6
    
    return priorities
```
