{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item.\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and leaves less space.\n    fit_mask = remaining_after_add >= 0\n    priorities[fit_mask] = bins_remain_cap[fit_mask] - item # Prioritize lower remaining space\n\n    # If no bins can fit, prioritize the bin that leaves the least negative space.\n    if not np.any(fit_mask):\n       priorities = -abs(remaining_after_add)  # least negative slack\n    else: #give other bins low negative priorities, so no fitting bins always has priority.\n        priorities[~fit_mask] = -np.inf\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # High priority if the item fits snugly (but not perfectly)\n    fit_snugly = (bins_remain_cap >= item) & (bins_remain_cap < 1.2 * item)\n    priorities[fit_snugly] += 10\n\n    # Moderate priority if the item fits with some space to spare\n    fit_ok = (bins_remain_cap >= item)\n    priorities[fit_ok] += (bins_remain_cap[fit_ok] - item) / np.max(bins_remain_cap)\n\n    # Give a lower priority to almost full bins as we want to keep them for small items\n    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= 0.2)\n    priorities[almost_full] -= 5\n        \n    # Give a higher penalty if the item doesn't fit\n    doesnt_fit = bins_remain_cap < item\n    priorities[doesnt_fit] = -np.inf\n\n    return priorities\n\n[Reflection]\nPrioritize snug fits and penalize near-full or overflowing bins for improved packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}