```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste Minimization: Primary objective is to minimize waste.
    post_fill_levels = bins_remain_cap - item
    priorities[feasible_bins] = -post_fill_levels[feasible_bins] / bin_size  # Directly use negative normalized waste

    # 3. Infeasibility Penalty: Strong penalty for infeasible bins.
    priorities[~feasible_bins] = -np.inf

    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.
    near_full_threshold = 0.05  # Even tighter fit
    near_full_bonus = 2.0  # Increased bonus
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 5. Consolidate Items: Penalize bins with very small remaining capacity.
    too_little_threshold = 0.15
    too_little_penalty = -1.0  # Stronger penalty
    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty
    
    # 6. Prioritize already full bins
    already_full_threshold = 0.8
    already_full_bonus = 0.5
    already_full_bins = feasible_bins & (bins_remain_cap <= (1 - already_full_threshold) * bin_size)
    priorities[already_full_bins] += already_full_bonus
    

    # 7. Handle No Feasible Bins: Ensure a bin is always chosen.
    if not np.any(feasible_bins):
        # Open a new bin only if all bins are full.
        if np.all(bins_remain_cap <= 0):
            priorities = np.ones_like(priorities) * 0.01  # Small positive value for new bin
        else:
            # Assign priority based on how close they are to full.  Prefer to open fullest bin.
            priorities = (bin_size - bins_remain_cap) / bin_size * 0.01  # Still small positive value

    return priorities
```
