```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Bin is feasible

            # First Fit Decreasing principle: prefer bins where item fits best
            # Fill rate heuristic: Choose bins such that fill rate after adding item will be high
            fill_rate_after = (item + (np.ones_like(bins_remain_cap)*np.sum(bins_remain_cap) - cap)[i]) / np.sum(bins_remain_cap) # fill rate = items in bin / bin_capacity

            # Remaining capacity heuristic: Use almost full bins first
            remaining_cap_score = (1- (cap - item) / np.max(bins_remain_cap[bins_remain_cap>=item]) ) if np.any(bins_remain_cap>=item) else 0 #prioritize bins which will be fuller after item insertion

            #Prioritize by 1/(remaining capacity)
            cap_inversed_score = 1/cap

            # Combination
            priorities[i] = 0.4*remaining_cap_score + 0.6*cap_inversed_score #weightage to each heuristic
        else:
            #Bin is not feasible so cannot be selected
            priorities[i] = -np.inf

    return priorities
```
