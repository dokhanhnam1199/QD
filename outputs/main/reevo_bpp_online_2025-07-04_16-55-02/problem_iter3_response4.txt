```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization: Prioritize bins with smallest waste AFTER placing the item, using inverse waste.
    post_fill_levels = bins_remain_cap - item
    
    waste = np.copy(post_fill_levels)
    waste[~feasible_bins] = np.inf
    waste[waste < 0] = np.inf #Make sure waste is non-negative
    
    #Inverse waste (add a small value to avoid division by zero)
    inverse_waste = 1 / (waste + 1e-9)
    priorities = inverse_waste

    # 3. Near-full bonus: Consolidate items.
    near_full_threshold = 0.1 * bins_remain_cap.max() #Scale threshold
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= near_full_threshold)
    near_full_bonus = 5.0  # Reduce the bonus
    priorities[near_full_bins] += near_full_bonus

    # 4. Penalize too little remaining capacity
    too_little_threshold = 0.2 * bins_remain_cap.max() #Scale threshold
    too_little_penalty = -2.0 #Reduce penalty
    too_little_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels > 0) & (post_fill_levels <= too_little_threshold)
    priorities[too_little_bins] += too_little_penalty

    # 5. Normalization when no feasible bins exist
    if not np.any(feasible_bins):
        priorities = np.ones_like(priorities) / len(priorities)
    
    return priorities
```
