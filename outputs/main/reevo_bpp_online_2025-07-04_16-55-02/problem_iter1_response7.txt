```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage bins that can fit the item reasonably well.
            # Higher priority for bins where the remaining capacity after adding the item is small but positive.
            remaining_after_fit = cap - item
            if remaining_after_fit == 0:
                priorities[i] = 1000  # Perfect fit, highest priority.
            else:
                #Prioritize bins that leave a small fraction of capacity unused.
                priorities[i] = 1 / (remaining_after_fit + 0.0001)  #Adding a small value to avoid division by zero
                #Or we can use the capacity used after adding item as a fraction of initial capcity as follows
                #priorities[i] = (item/cap)*100 # Prioritize based on what proportion of bin capacity would be used.


        else:
            priorities[i] = -100  # Cannot fit, very low priority.

    return priorities
```
