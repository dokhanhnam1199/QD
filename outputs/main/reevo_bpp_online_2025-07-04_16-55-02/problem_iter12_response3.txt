```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()  # Assuming all bins have the same capacity

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Infeasibility penalty: Set to -inf for bins that cannot fit the item.
    priorities[~feasible_bins] = -np.inf

    # 3. Waste Minimization (Normalized): Prioritize bins with minimal *normalized* waste.
    post_fill_levels = bins_remain_cap - item
    normalized_waste = post_fill_levels / bin_size
    priorities[feasible_bins] = -normalized_waste[feasible_bins]  # Invert waste to priority.

    # 4. Consolidation Bonus: Reward bins that become near-full.
    near_full_threshold = 0.1
    near_full_bonus = 1.0
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (normalized_waste <= near_full_threshold)
    priorities[near_full_bins] += near_full_bonus

    # 5. Fragmentation Penalty: Penalize bins that would have very little remaining capacity.
    tiny_rem_threshold = 0.2
    tiny_rem_penalty = -0.5
    tiny_rem_bins = feasible_bins & (post_fill_levels > 0) & (normalized_waste <= tiny_rem_threshold)
    priorities[tiny_rem_bins] += tiny_rem_penalty

    # 6. Perfect Fit Bonus: Substantially reward perfect fits.
    perfect_fit_bonus = 2.0
    perfect_fit_bins = np.isclose(bins_remain_cap, item) & feasible_bins
    priorities[perfect_fit_bins] += perfect_fit_bonus

    # 7. Handle Infeasible Case: If no bins fit, assign priorities based on remaining capacity.
    if not np.any(feasible_bins):
        # Prioritize bins that are closest to fitting the item.
        capacity_diff = item - bins_remain_cap

        #Assign very low priority to bins that can not fit the item
        priorities = -capacity_diff
        priorities[bins_remain_cap <=0] = -np.inf

        #Scale priority by bin size to avoid extreme high/low value, and shift value by 1, so the value is negative
        priorities = priorities / bin_size - 1
        priorities[bins_remain_cap <= 0] = -np.inf #make sure infeasible bins are still the lowest priority.

    return priorities
```
