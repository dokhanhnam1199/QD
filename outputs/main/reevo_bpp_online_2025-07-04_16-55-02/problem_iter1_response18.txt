```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins that minimize waste, but also consider bin utilization.
            priorities[i] = (item / cap) - (waste / np.sum(bins_remain_cap))  # Favor bins with high item/capacity ratio, penalized by waste compared to total capacity

            # If it's a near fit, heavily prioritize
            if waste <= 0.1 * item: #arbitrary small number. Tune it.
                priorities[i] += 1.0 # boost the priority

        else:
            priorities[i] = -np.inf # Or a very small negative number if necessary.

    return priorities
```
