```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Only consider bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins): # If item cannot be placed in any bin, return 0 for all, to denote item placement failure handling outside
        return priorities

    # 2. Remaining capacity after placement
    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1 #Mark infeasible bins

    # 3. Score based on how full the bin will be (higher is better) among feasible bins. Use scaled remaining capacity instead of direct remaining capacity.
    
    priorities[feasible_bins] = 1 - (remaining_capacity_after_placement[feasible_bins] / bins_remain_cap[feasible_bins])
    
    # 4. Tie-breaking: Prefer bins with smaller remaining capacity after placement (more full, higher priority)
    # Add small amount to differentiate between equal priorities derived from fullness, to avoid issues that could occur when np.argmax is used.

    priorities[feasible_bins] += (bins_remain_cap[feasible_bins].max() - remaining_capacity_after_placement[feasible_bins])/bins_remain_cap[feasible_bins].max()*0.0001 #Add small amount

    return priorities
```
