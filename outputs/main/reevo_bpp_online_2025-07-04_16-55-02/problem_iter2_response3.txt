```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Reward fitting items significantly.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 10  # Substantially reward fitting

    # Heuristic 2: Among bins that fit, prefer those with the least *percentage* of remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    percentage_remaining = remaining_after_fit / bins_remain_cap[fit_mask]
    priorities[fit_mask] += np.exp(-5 * percentage_remaining)  # Exponential decay favors smaller percentages

    # Heuristic 3: Heavily penalize bins that cannot fit.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] -= 100 * (item - bins_remain_cap[no_fit_mask])  # Huge penalty for not fitting

    # Heuristic 4: If no bins can fit, prefer bins with largest capacity (least waste if a future large item comes).  Only apply if no fit is possible.
    if not np.any(fit_mask):
        priorities += bins_remain_cap / np.max(bins_remain_cap)  # Normalize to avoid dominating penalties
    return priorities
```
