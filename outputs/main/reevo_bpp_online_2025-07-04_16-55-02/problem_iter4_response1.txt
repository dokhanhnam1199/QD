```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Very high priority for perfect fits
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000

    # Rule 2: High priority for bins that can fit, inversely proportional to wasted space
    can_fit = bins_remain_cap >= item
    waste = bins_remain_cap - item
    waste[~can_fit] = np.inf  # Ensure only bins that can fit are considered

    # Avoid division by zero, and only apply to bins that can fit and are not perfect fits
    valid_bins = can_fit & ~perfect_fit
    if np.any(valid_bins):
        priorities[valid_bins] = 100 / (waste[valid_bins] + 0.0001)  # Small constant to avoid division by zero and scale up

    # Rule 3: Very low priority (penalty) for bins that cannot fit
    priorities[~can_fit] = -1000

    # Rule 4: slight bonus for nearly full bins that can fit
    nearly_full = can_fit & (bins_remain_cap <= 2 * item) & ~perfect_fit
    priorities[nearly_full] += 50 #add a bonus for nearly full, but not perfect bins

    return priorities
```
