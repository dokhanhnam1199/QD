```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization & Infeasibility: Prioritize bins with smallest remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item
    priorities[~feasible_bins] = -np.inf

    # 3. Reward tight fits, penalize waste:
    waste = post_fill_levels[feasible_bins]
    normalized_waste = waste / bin_size

    priorities[feasible_bins] = -normalized_waste  # Invert waste to make it a priority.

    # 4. Bonus for near-full bins:
    near_full_threshold = 0.1
    near_full_bonus = 1

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 5. Penalize bins that would have too little remaining capacity, to consolidate items.
    too_little_threshold = 0.2
    too_little_penalty = -0.5

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty

    # 6. Adaptive Bonus/Penalty based on item size:
    item_size_ratio = item / bin_size

    # Encourage using bins with high remaining capacity if the item is large
    large_item_bonus = 0.2
    if item_size_ratio > 0.5:
        high_capacity_bins = feasible_bins & (bins_remain_cap > 0.75 * bin_size) #Bins that were already near empty
        priorities[high_capacity_bins] += large_item_bonus

    # Strongly discourage creating tiny remaining space for small items
    small_item_penalty = -0.3
    if item_size_ratio < 0.2:
        tiny_space_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels < 0.1*bin_size)
        priorities[tiny_space_bins] += small_item_penalty

    # 7. Avoid creating many bins at the same fill level. Prioritize bins that are significantly different in fill level
    fill_level_penalty = -0.1
    if np.sum(feasible_bins) > 1:  # Only apply if there are multiple feasible bins
        fill_level_std = np.std(bins_remain_cap[feasible_bins])
        if fill_level_std < 0.2 * bin_size: #If std is low, all bins are similarly filled.
            priorities[feasible_bins] += fill_level_penalty


    # 8. If no feasible bin exists, slightly prioritize bins closest to fitting to reduce wasted search
    if not np.any(feasible_bins):
        capacity_diff = item - bins_remain_cap
        min_diff = np.min(capacity_diff)

        if np.any(capacity_diff>0): # Make sure at least one bin can fit.
            closest_bins = capacity_diff == min_diff # Select the bins with the closest capacity
            priorities[closest_bins] = 0.01 # Add tiny priority to bins closest in capacity


    return priorities
```
