```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Prioritize bins with smaller remaining capacity after placing the item,
    #    but only if the bin is feasible. This is First-Fit Decreasing like behavior. Avoids fragmentation.
    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = np.inf  # mark infeasible bins
    priorities = -remaining_capacity_after_placement

    # 3. Reward for tight fit: Give a bonus to bins where the item fits snugly.
    #    This encourages filling bins completely.
    tight_fit_threshold = 0.1  # Adjust as needed
    tight_fit = (bins_remain_cap - item) <= tight_fit_threshold
    priorities[tight_fit] += 10  # adjust bonus
    
    # 4. Ensure infeasible bins have the lowest priority (very important). Setting to -inf
    priorities[~feasible_bins] = -np.inf
    

    return priorities
```
