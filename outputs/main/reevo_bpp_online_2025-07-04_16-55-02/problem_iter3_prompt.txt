{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nFavor tight fits, penalize waste and infeasibility heavily using inverse waste. Normalize when no fit exists. Explicitly reward nearly full bins to consolidate items. Avoid disjointed prioritization and discrete thresholds.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item\n    post_fill_levels = bins_remain_cap - item\n    post_fill_levels[~feasible_bins] = np.inf  # Ignore infeasible bins when finding minimum\n    \n    # Prioritize bins with the smallest resulting remaining capacity (i.e., most full bin post placement)\n    priorities[feasible_bins] = -post_fill_levels[feasible_bins]\n    \n    # 3. Bonus for near-full bins:\n    near_full_threshold = 0.1  # Define a threshold for \"near full\" (e.g., 10% remaining capacity)\n    near_full_bonus = 10\n    \n    near_full_bins = (post_fill_levels >= 0) & (post_fill_levels <= (bins_remain_cap.max() * near_full_threshold))  #Only consider non-negative remaining capacities to fix error\n    priorities[near_full_bins] += near_full_bonus\n    \n    # 4. Penalize bins that would have too little remaining capacity\n    too_little_threshold = 0.2\n    too_little_penalty = -5\n\n    too_little_bins = (post_fill_levels > 0) & (post_fill_levels/bins_remain_cap.max() <= too_little_threshold)\n    priorities[too_little_bins] += too_little_penalty\n    \n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}