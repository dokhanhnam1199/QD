```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Heuristic 2: Among bins that fit, prefer those with least remaining capacity after placing item.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += np.exp(-remaining_after_fit) # Smaller remaining capacity gets higher priority

    # Heuristic 3: Penalize bins that cannot fit
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] -= (item - bins_remain_cap[no_fit_mask])**2 # Larger the gap higher the penalty.


    #Heuristic 4: If no bins can fit, prefer bins with largest capacity (least waste if a future large item comes).
    if not np.any(fit_mask):
        priorities += bins_remain_cap / np.max(bins_remain_cap)
    return priorities
```
