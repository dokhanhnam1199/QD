```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        waste = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (1e-9 + waste)  # Prioritize tight fits using inverse waste. Adding small constant for numerical stability
    else:
        # When no bin can fit, prioritize bins with larger remaining capacity to potentially accommodate future smaller items.
        total_capacity = np.sum(bins_remain_cap)
        if total_capacity > 0:
            priorities = bins_remain_cap / total_capacity  # Normalize to prioritize bins with larger remaining capacity
        else:
            priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap) # If all bins are empty, assign equal probability

    return priorities
```
