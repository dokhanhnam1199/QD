```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization: Prioritize bins with less waste (remaining capacity).
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Mark infeasible bins with infinite waste.
    priorities[feasible_bins] = -waste[feasible_bins]  # Smaller waste is better (higher priority)

    # 3. Consolidation: Give a bonus for bins that become near-full after adding the item.
    near_full_threshold = 0.2  # Define "near-full" as having <= 20% remaining capacity
    near_full_bonus = 15
    post_fill_capacity = bins_remain_cap - item
    near_full_bins = feasible_bins & (post_fill_capacity >= 0) & (post_fill_capacity / np.max(bins_remain_cap, initial=0) <= near_full_threshold)
    priorities[near_full_bins] += near_full_bonus

    # 4. Avoid tiny remaining capacities: Penalize bins that would have very little space left.
    tiny_rem_threshold = 0.1  # Define "tiny" as having <= 10% remaining capacity relative to bin size
    tiny_rem_penalty = -10
    tiny_rem_bins = feasible_bins & (post_fill_capacity > 0) & (post_fill_capacity / np.max(bins_remain_cap, initial=0) <= tiny_rem_threshold)
    priorities[tiny_rem_bins] += tiny_rem_penalty

    # 5. Perfect fit: Reward perfect fits handsomely.
    perfect_fit_bonus = 25
    perfect_fit_bins = np.isclose(bins_remain_cap, item) & feasible_bins
    priorities[perfect_fit_bins] += perfect_fit_bonus
    
    # 6. Handling the infeasible case: if no bins fit, distribute randomly
    if not np.any(feasible_bins):
        priorities[:] = 1.0 / len(bins_remain_cap)

    return priorities
```
