```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item.
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits and leaves less space.
    fit_mask = remaining_after_add >= 0
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item # Prioritize lower remaining space

    # If no bins can fit, prioritize the bin that leaves the least negative space.
    if not np.any(fit_mask):
       priorities = -abs(remaining_after_add)  # least negative slack
    else: #give other bins low negative priorities, so no fitting bins always has priority.
        priorities[~fit_mask] = -np.inf
    return priorities
```
