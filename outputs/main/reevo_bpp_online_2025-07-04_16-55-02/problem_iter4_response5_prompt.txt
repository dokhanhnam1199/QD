{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n    \n    # Initialize infeasible bin priorities to a very low value.\n    priorities[~feasible_bins] = -np.inf\n    \n    # Remaining capacity after adding the item.\n    post_fill_levels = bins_remain_cap - item\n    \n    # Inverse waste:  Heavily penalize larger waste. Avoid zero division\n    waste = np.clip(post_fill_levels[feasible_bins], a_min=1e-9, a_max=None)  # avoid zero division\n    priorities[feasible_bins] += 1 / waste \n\n    # Bonus for near-full bins.\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_bonus = 5  #Slightly toned down bonus\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= near_full_threshold)\n    priorities[near_full_bins] += near_full_bonus\n\n    # Penalty for bins that would become too empty.\n    too_empty_threshold = 0.2 * bins_remain_cap.max()\n    too_empty_penalty = -2 #Slightly toned down penalty\n    too_empty_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels > near_full_threshold) & (post_fill_levels <= too_empty_threshold) # Don't penalize near full bins that also happen to be relatively empty.\n    priorities[too_empty_bins] += too_empty_penalty\n    \n    # Normalize priorities if no bin is feasible, prevents -inf\n    if not np.any(feasible_bins):\n        priorities = np.ones_like(priorities)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no feasible bins, return all -inf to force opening a new bin if possible\n    if not np.any(feasible_bins):\n        return np.full_like(bins_remain_cap, -np.inf)\n\n    # 2. Waste minimization: Prioritize bins with minimal waste after packing.\n    waste = bins_remain_cap - item\n    waste[~feasible_bins] = np.inf  # Penalize infeasible bins\n\n    # 3. Utilization: Prioritize bins with higher utilization after packing.\n    utilization = (bins_remain_cap - waste) / bins_remain_cap\n    utilization[~feasible_bins] = -np.inf  # Ensure infeasible bins have the lowest priority\n\n\n    # Combine waste and utilization into a single priority score. Give higher weight to waste.\n\n    priorities = -waste + 5 * utilization  # Minimize waste and maximize utilization\n\n\n\n    priorities[~feasible_bins] = -np.inf  # Explicitly set infeasible bins to lowest priority\n\n    return priorities\n\n[Reflection]\nCombining waste and utilization, weighting utilization higher, and simplified feasibility handling improved performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}