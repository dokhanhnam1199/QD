{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste, with scaling.\n    post_fill_levels = bins_remain_cap - item\n    waste = post_fill_levels[feasible_bins]\n    priorities[feasible_bins] = -waste / bin_size\n\n    # 3. Perfect Fit Bonus:  Huge bonus for perfect fits.\n    perfect_fit_threshold = 0.001  # Check very close to perfect\n    perfect_fit_bonus = 10.0\n\n    perfect_fit_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= bin_size * perfect_fit_threshold)\n    priorities[perfect_fit_bins] += perfect_fit_bonus\n\n    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.\n    near_full_threshold = 0.1\n    near_full_bonus = 5.0\n\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= bin_size * near_full_threshold)\n    priorities[near_full_bins] += near_full_bonus\n\n    # 5. Penalize Bins with Very Small Remaining Capacity\n    too_little_threshold = 0.2\n    too_little_penalty = -3.0\n    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= bin_size * too_little_threshold) & (post_fill_levels > item * 0.05)\n    priorities[too_little_bins] += too_little_penalty\n\n    # 6. Large Item Strategy: Fill nearly empty bins if the item is large.\n    large_item_threshold = 0.65\n    nearly_empty_threshold = 0.9\n    nearly_empty_bonus = 7.0\n\n    if item > bin_size * large_item_threshold:\n        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)\n        priorities[nearly_empty_bins] += nearly_empty_bonus\n\n    # 7. Reward Partially Full Bins\n    already_full_threshold = 0.7\n    already_full_bonus = 1.0\n    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))\n    priorities[already_full_bins] += already_full_bonus\n\n    # 8. Infeasibility Penalty: Very strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -1e9\n\n    # 9. Handle No Feasible Bins: Ensure a bin is always chosen.\n    if not np.any(feasible_bins):\n        max_cap_bin = np.argmax(bins_remain_cap)\n        priorities[max_cap_bin] = 0.0001 # Ensure it's picked\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste.\n    post_fill_levels = bins_remain_cap - item\n    waste = post_fill_levels / bin_size\n    priorities[feasible_bins] = -waste[feasible_bins]\n\n    # 3. Infeasibility Penalty: Strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -np.inf\n\n    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.\n    near_full_threshold = 0.05\n    near_full_bonus = 3.0\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (waste <= near_full_threshold)\n    priorities[near_full_bins] += near_full_bonus\n\n    # 5. Fragmentation Penalty: Penalize bins that would result in small remaining capacity.\n    frag_threshold = 0.15\n    frag_penalty = -2.0\n    frag_bins = feasible_bins & (post_fill_levels > 0) & (waste <= frag_threshold)\n    priorities[frag_bins] += frag_penalty\n\n    # 6. Large Item Strategy: Preferentially fill bins close to full or nearly empty if item is large\n    large_item_threshold = 0.7\n    nearly_empty_threshold = 0.95\n    nearly_full_threshold = 0.2 #Bins close to full\n    large_item_bonus = 2.5\n\n    if item > bin_size * large_item_threshold:\n        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)\n        nearly_full_bins = feasible_bins & (bins_remain_cap <= bin_size * nearly_full_threshold)\n        priorities[nearly_empty_bins] += large_item_bonus\n        priorities[nearly_full_bins] += large_item_bonus\n\n    # 7. Dynamic Waste Penalty: Adjust waste penalty based on item size. Larger items increase waste penalty.\n    item_ratio = item / bin_size\n    dynamic_waste_penalty = -waste * (1 + item_ratio)\n    priorities[feasible_bins] += dynamic_waste_penalty[feasible_bins]\n\n    # 8. Prefer bins that are already relatively full.\n    already_full_threshold = 0.85\n    already_full_bonus = 0.5\n    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))\n    priorities[already_full_bins] += already_full_bonus\n\n\n    # 9. Handle No Feasible Bins: Add item to the bin that *least* exceeds its capacity.\n    if not np.any(feasible_bins):\n        overfill_amounts = item - bins_remain_cap\n        min_overfill = np.min(overfill_amounts)\n        best_infeasible_bin = np.argmin(overfill_amounts)\n        priorities[best_infeasible_bin] = -1e-6\n\n    return priorities\n\n[Reflection]\nPrioritize waste minimization, fragmentation control, and dynamic adjustments based on item size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}