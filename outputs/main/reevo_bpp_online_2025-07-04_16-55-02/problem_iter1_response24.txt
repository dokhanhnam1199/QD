```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: how much space is left *after* placing the item
            remaining_after_fit = cap - item
            
            # Give preference to bins that would leave less space after fitting.  Bins with nearly perfect fit get very high priority. Bins that will leave very large space will be ranked lower but not 0
            priorities[i] = (1.0 / (remaining_after_fit + 0.0001))  # Avoid division by zero, prioritize tighter fits

            #Bonus for fitting more items
            items_fitted=0
            if(remaining_after_fit > 0):
                 items_fitted = np.floor(remaining_after_fit/np.mean(item))

            priorities[i] += items_fitted *0.01

            
        else:
            # Item doesn't fit: lowest priority
            priorities[i] = -1e9  #Very low priority

    return priorities
```
