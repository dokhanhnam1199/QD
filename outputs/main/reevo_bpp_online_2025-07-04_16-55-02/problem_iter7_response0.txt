```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max() #Assuming all bins have the same capacity

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Infesibility penalty
    priorities[~feasible_bins] = -np.inf

    # Proceed only if at least one bin is feasible
    if np.any(feasible_bins):
        # 3. Waste minimization: Prioritize bins with smallest waste AFTER placing the item
        post_fill_levels = bins_remain_cap - item
        waste = post_fill_levels[feasible_bins]
        normalized_waste = waste / bin_size

        priorities[feasible_bins] = -normalized_waste

        # 4. Bonus for near-full bins:
        near_full_threshold = 0.1
        near_full_bonus = 1.0
        near_full_bins = (post_fill_levels[feasible_bins] >= 0) & (post_fill_levels[feasible_bins] <= (bin_size * near_full_threshold))
        priorities[feasible_bins][near_full_bins] += near_full_bonus

        # 5. Penalty for bins that would have too little remaining capacity, to consolidate items.
        too_little_threshold = 0.2
        too_little_penalty = -0.5
        too_little_bins = (post_fill_levels[feasible_bins] > 0) & (post_fill_levels[feasible_bins] <= (bin_size * too_little_threshold))
        priorities[feasible_bins][too_little_bins] += too_little_penalty
    else:
        # If no bin is feasible, spread the item across bins using a low priority to ensure eventually a bin will be opened. This is a fallback strategy and should ideally not be used.
        priorities = np.ones_like(priorities) * -0.1 # Ensure a very small negative priority for all bins
    return priorities
```
