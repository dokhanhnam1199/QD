```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Best Fit heuristic: Prefer bins with capacity close to item size.
            priorities[i] = (cap - item)**-1 # Inverse of wasted space. Prevents division by zero when item perfectly fits.  Higher value means fits more nicely
            
            #Modified first fit: prioritizes partially filled bins
            if cap > item: # Encourages filling bins partially
                 priorities[i] *= 1.1 #Give slight additional priority to encourage partially filling

        else:
            priorities[i] = -np.inf  # Cannot fit, so assign lowest priority.
    return priorities
```
