```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item
    post_fill_levels[~feasible_bins] = np.inf  # Ignore infeasible bins when finding minimum
    
    # Prioritize bins with the smallest resulting remaining capacity (i.e., most full bin post placement)
    priorities[feasible_bins] = -post_fill_levels[feasible_bins]
    
    # 3. Bonus for near-full bins:
    near_full_threshold = 0.1  # Define a threshold for "near full" (e.g., 10% remaining capacity)
    near_full_bonus = 10
    
    near_full_bins = (post_fill_levels >= 0) & (post_fill_levels <= (bins_remain_cap.max() * near_full_threshold))  #Only consider non-negative remaining capacities to fix error
    priorities[near_full_bins] += near_full_bonus
    
    # 4. Penalize bins that would have too little remaining capacity
    too_little_threshold = 0.2
    too_little_penalty = -5

    too_little_bins = (post_fill_levels > 0) & (post_fill_levels/bins_remain_cap.max() <= too_little_threshold)
    priorities[too_little_bins] += too_little_penalty
    
    return priorities
```
