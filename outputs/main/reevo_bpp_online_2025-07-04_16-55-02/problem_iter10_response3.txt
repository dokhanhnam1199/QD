```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item

    # 3. Infesibility penalty
    priorities[~feasible_bins] = -np.inf

    # Assuming all bins have the same capacity
    bin_size = bins_remain_cap.max()

    # 4. Reward tight fits, penalize waste:
    waste = post_fill_levels[feasible_bins]
    normalized_waste = waste / bin_size  # Waste as a percentage of bin capacity

    priorities[feasible_bins] = -normalized_waste  # Invert waste to make it a priority.

    # 5. Bonus for near-full bins:
    near_full_threshold = 0.1  # Define a threshold for "near full" (e.g., 10% remaining capacity)
    near_full_bonus = 1

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 6. Penalize bins that would have too little remaining capacity, to consolidate items.
    too_little_threshold = 0.2
    too_little_penalty = -0.5

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty

    # 7. Small item consolidation: bonus if item fits well into near-empty bin
    near_empty_threshold = 0.9
    near_empty_bonus = 0.2
    near_empty_bins = feasible_bins & (bins_remain_cap/bin_size >= near_empty_threshold)
    item_size_ratio = item / bin_size
    consolidation_bins = near_empty_bins & (item_size_ratio <= 0.1)  # Small item into near empty bin
    priorities[consolidation_bins] += near_empty_bonus

    # 8. Encourage placing large items into emptier bins:
    large_item_threshold = 0.5
    empty_bin_bonus = 0.1
    large_item_bins = feasible_bins & (item_size_ratio >= large_item_threshold) & (bins_remain_cap/bin_size >= 0.5)
    priorities[large_item_bins] += empty_bin_bonus

    # 9. Normalize priorities if no feasible bin exists:
    if not np.any(feasible_bins):
        priorities = np.ones_like(priorities)

    return priorities
```
