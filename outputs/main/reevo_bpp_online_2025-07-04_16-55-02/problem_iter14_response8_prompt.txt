{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste.\n    post_fill_levels = bins_remain_cap - item\n    priorities[feasible_bins] = -post_fill_levels[feasible_bins] / bin_size  # Directly use negative normalized waste\n\n    # 3. Infeasibility Penalty:  Very strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -1e9\n\n    # 4. Perfect Fit Bonus: Huge bonus for perfect fits.\n    perfect_fit_threshold = 0.001 #accounts for possible float errors\n    perfect_fit_bonus = 10.0\n    perfect_fit_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= bin_size * perfect_fit_threshold) #check if fits perfectly\n    priorities[perfect_fit_bins] += perfect_fit_bonus\n\n    # 5. Tight Fit Bonus: Significant bonus for bins that become nearly full.\n    near_full_threshold = 0.1\n    near_full_bonus = 4.0\n\n    near_full_bins = feasible_bins & (post_fill_levels > bin_size * perfect_fit_threshold) & (post_fill_levels <= (bin_size * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n    # 6. Consolidate Items: Penalize bins with very small remaining capacity.\n    too_little_threshold = 0.2\n    too_little_penalty = -3.0\n\n    too_little_bins = feasible_bins & (post_fill_levels > bin_size * near_full_threshold) & (post_fill_levels <= (bin_size * too_little_threshold)) & (post_fill_levels > item * 0.1)\n    priorities[too_little_bins] += too_little_penalty\n\n    # 7. Large Item Strategy: Fill nearly empty bins if the item is large.\n    large_item_threshold = 0.8\n    nearly_empty_threshold = 0.9\n    nearly_empty_bonus = 5.0\n\n    if item > bin_size * large_item_threshold:\n        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)\n        priorities[nearly_empty_bins] += nearly_empty_bonus\n\n    # 8. Slightly prefer bins that are already relatively full\n    already_full_threshold = 0.7\n    already_full_bonus = 1.0\n\n    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))\n    priorities[already_full_bins] += already_full_bonus\n\n     # 9. Moderate item prefers moderate bins: avoid extremes\n\n    moderate_item_threshold_low = 0.3\n    moderate_item_threshold_high = 0.7\n    moderate_bin_bonus = 0.2\n\n    if (item >= bin_size * moderate_item_threshold_low and item <= bin_size * moderate_item_threshold_high):\n        moderate_bin_low = 0.3\n        moderate_bin_high = 0.7\n        moderate_bins = feasible_bins & (bins_remain_cap >= bin_size * moderate_bin_low) & (bins_remain_cap <= bin_size * moderate_bin_high)\n        priorities[moderate_bins] += moderate_bin_bonus\n\n    # 10. Handle No Feasible Bins: Ensure a bin is always chosen.\n    if not np.any(feasible_bins):\n        # If no feasible bins exist, select the bin with largest remaining capacity\n        max_cap_bin = np.argmax(bins_remain_cap)\n        priorities[max_cap_bin] = 0.0001\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste.\n    post_fill_levels = bins_remain_cap - item\n    priorities[feasible_bins] = -post_fill_levels[feasible_bins] / bin_size  # Directly use negative normalized waste\n\n    # 3. Infeasibility Penalty: Strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -np.inf\n\n    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.\n    near_full_threshold = 0.05  # Even tighter fit\n    near_full_bonus = 2.0  # Increased bonus\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n    # 5. Consolidate Items: Penalize bins with very small remaining capacity.\n    too_little_threshold = 0.15\n    too_little_penalty = -1.0  # Stronger penalty\n    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))\n    priorities[too_little_bins] += too_little_penalty\n    \n    # 6. Prioritize already full bins\n    already_full_threshold = 0.8\n    already_full_bonus = 0.5\n    already_full_bins = feasible_bins & (bins_remain_cap <= (1 - already_full_threshold) * bin_size)\n    priorities[already_full_bins] += already_full_bonus\n    \n\n    # 7. Handle No Feasible Bins: Ensure a bin is always chosen.\n    if not np.any(feasible_bins):\n        # Open a new bin only if all bins are full.\n        if np.all(bins_remain_cap <= 0):\n            priorities = np.ones_like(priorities) * 0.01  # Small positive value for new bin\n        else:\n            # Assign priority based on how close they are to full.  Prefer to open fullest bin.\n            priorities = (bin_size - bins_remain_cap) / bin_size * 0.01  # Still small positive value\n\n    return priorities\n\n[Reflection]\nInfeasibility: use `-np.inf`. Tight/consolidate: tune thresholds/bonuses. No feasible bin: open new bin strategically.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}