```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits and wasted space is minimized
    fit_indices = wasted_space >= 0
    if np.any(fit_indices):
        priorities[fit_indices] = 1 / (wasted_space[fit_indices] + 1e-6) # Avoid division by zero
        # Boost bins that are filled most efficiently.
        fill_ratios = item / bins_remain_cap[fit_indices]
        priorities[fit_indices] *= fill_ratios**2 # Further promote well-filled bins

    # If no bin fits, assign a very low priority (negative to clearly indicate this case)
    else:
        priorities = -1 * np.ones_like(bins_remain_cap)
        # Assign priority based on "how much" it overflows
        overflow_amount = item - bins_remain_cap
        priorities = - overflow_amount
        priorities = priorities / np.sum(overflow_amount)  #normalize, so a smaller overflow gets a higher priority among the overflowed bins

    return priorities
```
