```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give high priority to bins that can fit the item with minimal waste.
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        waste = bins_remain_cap[can_fit] - item
        min_waste = np.min(waste)
        priorities[can_fit] = 1.0 / (1e-6 + waste) # Inverse of waste. Smaller waste, bigger priority. add 1e-6 for numerical stability.
        priorities[can_fit] += 1 # Give all fitting bins higher priority than non-fitting bins

    # If no bin can fit, give lower priority proportional to remaining capacity
    else:
        priorities = bins_remain_cap / np.sum(bins_remain_cap)
    return priorities
```
