```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority to bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # For feasible bins:

    # 1. First-Fit-Decreasing heuristic inspired priority: prefer bins with smallest remaining capacity that can still fit item
    # This favors filling partially-full bins instead of starting new ones
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        priorities[feasible_bins] = bins_remain_cap[feasible_bins] # Smaller remaining cap is better

        # 2. Modified Best-Fit heuristic inspired priority
        # Smaller wasted space is better. Use only feasible bins from above
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += 1.0 / (waste + 0.0001)  # Add a small constant to avoid division by zero
    
        #3. Avoid near perfect fits - they block the bins
        near_perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item, rtol=1e-05, atol=1e-08)
        priorities[feasible_bins][near_perfect_fit] *= 0.5 #Reduce priority for perfect fits.
        
    return priorities
```
