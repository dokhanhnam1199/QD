```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Waste minimization: Prioritize bins with smallest normalized remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item
    bin_size = bins_remain_cap.max() #Assuming all bins have the same capacity
    normalized_waste = post_fill_levels / bin_size #Waste as a percentage of bin capacity
    
    # 3. Infesibility penalty
    priorities[~feasible_bins] = -np.inf
    
    # 4. Reward tight fits, penalize waste:
    priorities[feasible_bins] = -normalized_waste[feasible_bins]  #Invert waste to make it a priority.

    # 5. Bonus for near-full bins:
    near_full_threshold = 0.1  # Define a threshold for "near full" (e.g., 10% remaining capacity)
    near_full_bonus = 5  # Increased bonus

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus
    
    # 6. Penalize bins that would have too little remaining capacity, to consolidate items.
    too_little_threshold = 0.2
    too_little_penalty = -0.5

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty

    # 7. Perfect fit bonus
    perfect_fit_bonus = 10
    perfect_fit_bins = np.isclose(bins_remain_cap, item) & feasible_bins
    priorities[perfect_fit_bins] += perfect_fit_bonus

    # 8. Prioritize using almost empty bins if there is no better option
    if not np.any(feasible_bins):
        almost_empty_threshold = 0.9
        almost_empty_bins = bins_remain_cap >= (almost_empty_threshold * bin_size)
        if np.any(almost_empty_bins):
            priorities[almost_empty_bins] = 1.0/len(bins_remain_cap)
        else:
            priorities[:] = 1.0 / len(bins_remain_cap) #Distribute evenly

    return priorities
```
