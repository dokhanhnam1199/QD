```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    # If no feasible bins, return all -inf to force opening a new bin if possible
    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    # 2. Waste minimization: Prioritize bins with minimal waste after packing.
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Penalize infeasible bins

    # 3. Utilization: Prioritize bins with higher utilization after packing.
    utilization = (bins_remain_cap - waste) / np.max(bins_remain_cap) # Normalize by max capacity
    utilization[~feasible_bins] = -np.inf  # Ensure infeasible bins have the lowest priority


    # Combine waste and utilization into a single priority score. Give higher weight to waste.

    priorities = -waste + 10 * utilization  # Minimize waste and maximize utilization



    priorities[~feasible_bins] = -np.inf  # Explicitly set infeasible bins to lowest priority

    return priorities
```
