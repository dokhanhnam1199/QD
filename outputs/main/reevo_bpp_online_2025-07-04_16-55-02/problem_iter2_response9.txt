```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining Capacity: Prefer bins with enough space, but not too much.
    remaining_space = bins_remain_cap - item
    # Scale the remaining space to [0,1]
    scaled_remaining_space = np.clip(remaining_space / np.max(bins_remain_cap), 0, 1) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_space)

    # 3. Fill percentage
    fill_percentage = 1 - scaled_remaining_space

    # Calculate priority for feasible bins
    priorities[feasible_bins] = fill_percentage[feasible_bins]

    #Very small remaining cap is better (higher priority)
    priorities[feasible_bins] += 1/(bins_remain_cap[feasible_bins]+1e-6)

    #4. If there's little free capacity (close to item size), boost the priority to nearly force the placement
    close_to_full = (bins_remain_cap >= item) & (bins_remain_cap < item*1.1) #can adjust the multiplier. A smaller value means closer to being packed.
    priorities[close_to_full] += 10 # high constant, makes bin very favorable for placing the current item

    # 5. Refinement: Discourage very large remaining capacity unless no other choice
    # This helps to avoid scattering items thinly across bins.  Only activate if close_to_full isn't available
    large_capacity = (bins_remain_cap >= item * 2) & (~close_to_full)
    priorities[large_capacity] -= 0.5 # Small penalty, less than close_to_full bonus

    return priorities
```
