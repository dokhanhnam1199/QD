{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Prefer bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1\n\n    # Rule 2: Among bins that can fit, prefer those with less wasted space after fitting.\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Ignore bins that cannot fit.\n\n    # Normalize wasted space to prioritize bins with smallest waste\n    normalized_waste = 1 / (1 + wasted_space) # higher is better\n    priorities[fit_mask] += normalized_waste[fit_mask]\n\n    # Rule 3: Add a bonus for bins that are close to full before adding the item\n    # Helps utilize bins effectively before opening new ones.\n\n    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # scale to between 0 and 1\n    priorities[fit_mask] += fullness[fit_mask] * 0.5 # weigh it by 0.5\n\n\n    # Rule 4: Apply a penalty to bins that would become almost full after adding the item.\n    # Helps avoid bins that are almost full but still requires opening another one.\n\n    almost_full_threshold = 0.1 # if after packing the bins has 10% of space remaining\n    remaining_after_pack = bins_remain_cap - item\n    almost_full_mask = (remaining_after_pack > 0) & (remaining_after_pack / np.max(bins_remain_cap) <= almost_full_threshold)\n    priorities[almost_full_mask] -= 0.2 # slight penalty\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Remaining Capacity: Prefer bins with enough space, but not too much.\n    remaining_space = bins_remain_cap - item\n    # Scale the remaining space to [0,1]\n    scaled_remaining_space = np.clip(remaining_space / np.max(bins_remain_cap), 0, 1) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_space)\n\n    # 3. Fill percentage\n    fill_percentage = 1 - scaled_remaining_space\n\n    # Calculate priority for feasible bins\n    priorities[feasible_bins] = fill_percentage[feasible_bins]\n\n    #Very small remaining cap is better (higher priority)\n    priorities[feasible_bins] += 1/(bins_remain_cap[feasible_bins]+1e-6)\n\n    #4. If there's little free capacity (close to item size), boost the priority to nearly force the placement\n    close_to_full = (bins_remain_cap >= item) & (bins_remain_cap < item*1.1) #can adjust the multiplier. A smaller value means closer to being packed.\n    priorities[close_to_full] += 10 # high constant, makes bin very favorable for placing the current item\n\n\n    return priorities\n\n[Reflection]\nThe better code prioritizes fill percentage, avoids wasted space and forces placement when near full.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}