```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign very low priority to bins that cannot accommodate the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # For feasible bins, prioritize based on the remaining capacity *after* placing the item
    feasible_mask = bins_remain_cap >= item
    remaining_capacity_after_placement = bins_remain_cap[feasible_mask] - item
    
    #Give large value when there's small wastage (Best fit approximation)
    priorities[feasible_mask] = np.exp(-np.abs(remaining_capacity_after_placement))
    
    #Further refine the priority by considering the fill ratio *before* placement
    fill_ratio_before_placement = 1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)) #Scaled to max bin capacity so no scaling issue.

    priorities[feasible_mask] = priorities[feasible_mask] + fill_ratio_before_placement # Add the fill ration to further prioritize bins which already filled.
        
    return priorities
```
