{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give higher priority to bins that can accommodate the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] = 1.0\n\n    # If no bin can fit, prioritize bins with the largest remaining capacity\n    if not np.any(can_fit):\n        priorities = bins_remain_cap / np.max(bins_remain_cap) # Normalize\n    else:\n        #Prioritize bins that fit the item closely. Calculate wasted space\n        wasted_space = bins_remain_cap - item\n        wasted_space[~can_fit] = np.inf  # Ignore bins that can't fit\n        \n        min_waste = np.min(wasted_space)\n        \n        # Prioritize bins with the smallest wasted space. Smallest waste gets highest score.\n        close_fit = can_fit & (wasted_space <= (min_waste + 0.1)) #Tolerance added. Otherwise, zero-division occurs\n        priorities[close_fit] = 2.0\n\n        #Prioritize nearly full bins to try and close them\n        nearly_full = can_fit & (bins_remain_cap <= 2*item) #try bins which are almost full first\n        priorities[nearly_full] = 3.0\n\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Give high priority to bins that can fit the item with minimal waste.\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        min_waste = np.min(waste)\n        priorities[can_fit] = 1.0 / (1e-6 + waste) # Inverse of waste. Smaller waste, bigger priority. add 1e-6 for numerical stability.\n        priorities[can_fit] += 1 # Give all fitting bins higher priority than non-fitting bins\n\n    # If no bin can fit, give lower priority proportional to remaining capacity\n    else:\n        priorities = bins_remain_cap / np.sum(bins_remain_cap)\n    return priorities\n\n[Reflection]\nPrioritize tight fits using inverse waste. Normalize when no fit exists. Avoid discrete priority levels.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}