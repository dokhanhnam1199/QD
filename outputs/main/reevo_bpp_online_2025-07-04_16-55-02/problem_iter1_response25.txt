```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing heuristic inspiration: prefer bins where the item fits best (but not perfectly)
            priority = (cap - item) / cap  # Smaller waste is better
            # Avoid near-perfect fits (e.g., waste close to zero) to leave flexibility
            if cap - item < 0.1: # Adjust 0.1 if the optimal wasted space is known to be closer or further
              priority = -1 # A negative value serves to avoid these placements. The thresholding could be adapted according to prior knowledge

            #Prioritize bins with larger capacity. This should improve on average
            #Since items are packed into relatively emptier bins which will on average
            #lead to a better long-run capacity use.
            priority = priority + cap

            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Impossible to fit, lowest priority

    return priorities
```
