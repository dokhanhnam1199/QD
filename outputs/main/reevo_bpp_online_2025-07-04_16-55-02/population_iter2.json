[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Very high priority for perfect fits\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000\n\n    # Rule 2: High priority for bins that can fit, inversely proportional to wasted space\n    can_fit = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    waste[~can_fit] = np.inf  # Ensure only bins that can fit are considered\n\n    # Avoid division by zero, and only apply to bins that can fit and are not perfect fits\n    valid_bins = can_fit & ~perfect_fit\n    if np.any(valid_bins):\n        priorities[valid_bins] = 1 / (waste[valid_bins] + 0.0001)  # Small constant to avoid division by zero\n\n    # Rule 3: Very low priority (penalty) for bins that cannot fit\n    priorities[~can_fit] = -1000\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and the remaining capacity is minimized.\n    fit_indices = remaining_after_add >= 0\n    if np.any(fit_indices):\n        priorities[fit_indices] = 1 / (remaining_after_add[fit_indices] + 0.00001)  # avoid division by zero\n        # Prioritize tighter fits even more.  Square the inverse of remaining capacity.\n        priorities[fit_indices] = priorities[fit_indices]**2\n\n    # For bins where the item doesn't fit, assign a negative priority proportional to the overflow.\n    no_fit_indices = ~fit_indices\n    if np.any(no_fit_indices):\n        overflow = item - bins_remain_cap[no_fit_indices]\n        priorities[no_fit_indices] = -overflow  # Negative values. Larger when the item cannot fit\n\n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # High priority if the item fits snugly (but not perfectly)\n    fit_snugly = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item)\n    priorities[fit_snugly] += 100  # Increased priority for snug fits\n\n    # Moderate priority if the item fits with some space to spare\n    fit_ok = (bins_remain_cap >= item)\n    priorities[fit_ok] += 10 * (bins_remain_cap[fit_ok] - item) / np.max(bins_remain_cap)\n\n    # Give a lower priority to almost full bins as we want to keep them for small items\n    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= 0.2)\n    priorities[almost_full] -= 50 # Increased penalty for almost full bins\n    \n    # Slightly penalize bins that are filling up\n    filling_up = (bins_remain_cap > 0.2) & (bins_remain_cap <= 0.5)\n    priorities[filling_up] -= 10\n\n    # Give a very high penalty if the item doesn't fit\n    doesnt_fit = bins_remain_cap < item\n    priorities[doesnt_fit] = -np.inf\n\n    return priorities",
    "response_id": 2,
    "obj": 74.51136816912646,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Reward fitting items significantly.\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 10  # Substantially reward fitting\n\n    # Heuristic 2: Among bins that fit, prefer those with the least *percentage* of remaining capacity after placing the item.\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    percentage_remaining = remaining_after_fit / bins_remain_cap[fit_mask]\n    priorities[fit_mask] += np.exp(-5 * percentage_remaining)  # Exponential decay favors smaller percentages\n\n    # Heuristic 3: Heavily penalize bins that cannot fit.\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] -= 100 * (item - bins_remain_cap[no_fit_mask])  # Huge penalty for not fitting\n\n    # Heuristic 4: If no bins can fit, prefer bins with largest capacity (least waste if a future large item comes).  Only apply if no fit is possible.\n    if not np.any(fit_mask):\n        priorities += bins_remain_cap / np.max(bins_remain_cap)  # Normalize to avoid dominating penalties\n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            waste = cap - item\n            # Prioritize bins with smallest waste, but give a boost to almost full bins\n            priorities[i] = (1 / (waste + 0.0001)) + (100 if waste < 0.1 else 0)  # Add a small constant to avoid division by zero\n\n        else:\n            priorities[i] = -1000  # Very low priority if item doesn't fit\n    return priorities",
    "response_id": 4,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Command '['python3', '-u', '/home/dokhanhnam1199/QD/problems/bpp_online/eval.py', '5000', '/home/dokhanhnam1199/QD', 'train']' timed out after 49.99997762999965 seconds"
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = 1.0 / (1e-9 + waste)  # Smaller waste -> higher priority\n    else:\n        # If no bin fits, prioritize bins with larger remaining capacity, but with a lower score than any fitting bin\n        priorities = bins_remain_cap / (np.sum(bins_remain_cap) + 1e-9) # avoid zero division\n\n    return priorities",
    "response_id": 5,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Identify bins that can accommodate the item\n    can_fit = bins_remain_cap >= item\n    \n    # If no bin can fit, prioritize bins with the largest remaining capacity to potentially accommodate future smaller items.\n    if not np.any(can_fit):\n        max_cap = np.max(bins_remain_cap)\n        priorities = bins_remain_cap / max_cap if max_cap > 0 else np.zeros_like(bins_remain_cap)  # Normalize; prevent division by zero\n    else:\n        # Prioritize bins that can fit the item\n        priorities[can_fit] = 1.0\n        \n        # Calculate wasted space for bins that can fit\n        wasted_space = bins_remain_cap - item\n        wasted_space[~can_fit] = np.inf  # Ignore bins that can't fit\n        \n        min_waste = np.min(wasted_space[can_fit])  # Find the minimum waste among bins that can fit\n\n        # Prioritize bins with the smallest wasted space (close fit), but give them slightly lower priority than nearly full bins.\n        close_fit = can_fit & (wasted_space <= (min_waste + 0.1)) #Tolerance added.\n        priorities[close_fit] = 2.0\n\n        # Prioritize nearly full bins to try and close them, give them highest priority\n        nearly_full = can_fit & (bins_remain_cap <= 2 * item)  # Adjust factor of 2 based on item size distribution\n        priorities[nearly_full] = 3.0\n\n    return priorities",
    "response_id": 6,
    "obj": 4.447546868767465,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = 1.0 / (1e-9 + waste)  # Prioritize tight fits using inverse waste. Adding small constant for numerical stability\n    else:\n        priorities = bins_remain_cap / np.sum(bins_remain_cap)  # Normalize when no fit exists\n        \n    return priorities",
    "response_id": 7,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no feasible bins, return all -inf to force opening a new bin if possible\n    if not np.any(feasible_bins):\n        return np.full_like(bins_remain_cap, -np.inf)\n\n    # 2. Waste minimization: Prioritize bins with minimal waste after packing.\n    waste = bins_remain_cap - item\n    waste[~feasible_bins] = np.inf  # Penalize infeasible bins\n\n    # 3. Utilization: Prioritize bins with higher utilization after packing.\n    utilization = (bins_remain_cap - waste) / bins_remain_cap\n    utilization[~feasible_bins] = -np.inf  # Ensure infeasible bins have the lowest priority\n\n\n    # Combine waste and utilization into a single priority score. Give higher weight to waste.\n\n    priorities = -waste + 5 * utilization  # Minimize waste and maximize utilization\n\n\n\n    priorities[~feasible_bins] = -np.inf  # Explicitly set infeasible bins to lowest priority\n\n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Remaining Capacity: Prefer bins with enough space, but not too much.\n    remaining_space = bins_remain_cap - item\n    # Scale the remaining space to [0,1]\n    scaled_remaining_space = np.clip(remaining_space / np.max(bins_remain_cap), 0, 1) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_space)\n\n    # 3. Fill percentage\n    fill_percentage = 1 - scaled_remaining_space\n\n    # Calculate priority for feasible bins\n    priorities[feasible_bins] = fill_percentage[feasible_bins]\n\n    #Very small remaining cap is better (higher priority)\n    priorities[feasible_bins] += 1/(bins_remain_cap[feasible_bins]+1e-6)\n\n    #4. If there's little free capacity (close to item size), boost the priority to nearly force the placement\n    close_to_full = (bins_remain_cap >= item) & (bins_remain_cap < item*1.1) #can adjust the multiplier. A smaller value means closer to being packed.\n    priorities[close_to_full] += 10 # high constant, makes bin very favorable for placing the current item\n\n    # 5. Refinement: Discourage very large remaining capacity unless no other choice\n    # This helps to avoid scattering items thinly across bins.  Only activate if close_to_full isn't available\n    large_capacity = (bins_remain_cap >= item * 2) & (~close_to_full)\n    priorities[large_capacity] -= 0.5 # Small penalty, less than close_to_full bonus\n\n    return priorities",
    "response_id": 9,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]