```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item

    # 3. Infeasibility penalty: Harsh penalty for infeasible bins.
    priorities[~feasible_bins] = -np.inf

    # 4. Reward tight fits, penalize waste:
    waste = post_fill_levels[feasible_bins]
    bin_size = bins_remain_cap.max()  # Assuming all bins have the same capacity
    normalized_waste = waste / bin_size  # Waste as a percentage of bin capacity

    priorities[feasible_bins] = -normalized_waste  # Invert waste to make it a priority.

    # 5. Bonus for near-full bins:
    near_full_threshold = 0.1  # Define a threshold for "near full" (e.g., 10% remaining capacity)
    near_full_bonus = 1

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))  # Only consider non-negative remaining capacities to fix error
    priorities[near_full_bins] += near_full_bonus

    # 6. Penalize bins that would have too little remaining capacity, to consolidate items.
    too_little_threshold = 0.2
    too_little_penalty = -0.5

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty
    
    # 7. Encourage balanced bin usage
    average_fill = np.mean(bins_remain_cap) / bin_size #As percentage
    balance_bonus = 0.1

    #Give a small bonus for bins that are close to the average fill level after placing the item
    average_fill_proximity = np.abs(normalized_waste - average_fill)
    priorities[feasible_bins] -= balance_bonus * average_fill_proximity

    
    #8. Prioritize bins based on current fullness
    current_fill_level = (bin_size - bins_remain_cap)/bin_size
    fullness_bonus = 0.05 #A small weight so it does not dominate

    priorities[feasible_bins] += fullness_bonus * current_fill_level[feasible_bins]

    # 9. Normalize priorities if feasible bins exist to make them comparable
    if np.any(feasible_bins):
        max_priority = np.max(priorities[feasible_bins])
        min_priority = np.min(priorities[feasible_bins])

        if max_priority != min_priority:
            priorities[feasible_bins] = (priorities[feasible_bins] - min_priority) / (max_priority - min_priority)
    #If no feasible bin, return equal priorities
    else:
        priorities = np.ones_like(priorities) / len(bins_remain_cap)


    return priorities
```
