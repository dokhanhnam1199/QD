{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste minimization: Prioritize bins with less waste (remaining capacity).\n    waste = bins_remain_cap - item\n    waste[~feasible_bins] = np.inf  # Mark infeasible bins with infinite waste.\n    priorities[feasible_bins] = -waste[feasible_bins]  # Smaller waste is better (higher priority)\n\n    # 3. Consolidation: Give a bonus for bins that become near-full after adding the item.\n    near_full_threshold = 0.2  # Define \"near-full\" as having <= 20% remaining capacity\n    near_full_bonus = 15\n    post_fill_capacity = bins_remain_cap - item\n    near_full_bins = feasible_bins & (post_fill_capacity >= 0) & (post_fill_capacity / np.max(bins_remain_cap, initial=0) <= near_full_threshold)\n    priorities[near_full_bins] += near_full_bonus\n\n    # 4. Avoid tiny remaining capacities: Penalize bins that would have very little space left.\n    tiny_rem_threshold = 0.1  # Define \"tiny\" as having <= 10% remaining capacity relative to bin size\n    tiny_rem_penalty = -10\n    tiny_rem_bins = feasible_bins & (post_fill_capacity > 0) & (post_fill_capacity / np.max(bins_remain_cap, initial=0) <= tiny_rem_threshold)\n    priorities[tiny_rem_bins] += tiny_rem_penalty\n\n    # 5. Perfect fit: Reward perfect fits handsomely.\n    perfect_fit_bonus = 25\n    perfect_fit_bins = np.isclose(bins_remain_cap, item) & feasible_bins\n    priorities[perfect_fit_bins] += perfect_fit_bonus\n    \n    # 6. Handling the infeasible case: if no bins fit, distribute randomly\n    if not np.any(feasible_bins):\n        priorities[:] = 1.0 / len(bins_remain_cap)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item\n    post_fill_levels = bins_remain_cap - item\n    \n    # 3. Infesibility penalty\n    priorities[~feasible_bins] = -np.inf\n    \n    # 4. Reward tight fits, penalize waste:\n    waste = post_fill_levels[feasible_bins]\n    bin_size = bins_remain_cap.max() #Assuming all bins have the same capacity\n    normalized_waste = waste / bin_size #Waste as a percentage of bin capacity\n    \n    priorities[feasible_bins] =  -normalized_waste  #Invert waste to make it a priority.\n\n    # 5. Bonus for near-full bins:\n    near_full_threshold = 0.1  # Define a threshold for \"near full\" (e.g., 10% remaining capacity)\n    near_full_bonus = 1\n\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))  #Only consider non-negative remaining capacities to fix error\n    priorities[near_full_bins] += near_full_bonus\n    \n    # 6. Penalize bins that would have too little remaining capacity, to consolidate items.\n    too_little_threshold = 0.2\n    too_little_penalty = -0.5\n\n    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))\n    priorities[too_little_bins] += too_little_penalty\n\n    # 7. Normalize priorities if no feasible bin exists:\n    if not np.any(feasible_bins):\n       priorities = np.ones_like(priorities)\n\n    return priorities\n\n[Reflection]\nPrioritize normalized waste, balance consolidation/fragmentation, and use extreme values (-inf) for infeasibility.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}