```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority if the item fits snugly (but not perfectly)
    fit_snugly = (bins_remain_cap >= item) & (bins_remain_cap < 1.2 * item)
    priorities[fit_snugly] += 10

    # Moderate priority if the item fits with some space to spare
    fit_ok = (bins_remain_cap >= item)
    priorities[fit_ok] += (bins_remain_cap[fit_ok] - item) / np.max(bins_remain_cap)

    # Give a lower priority to almost full bins as we want to keep them for small items
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= 0.2)
    priorities[almost_full] -= 5
        
    # Give a higher penalty if the item doesn't fit
    doesnt_fit = bins_remain_cap < item
    priorities[doesnt_fit] = -np.inf

    return priorities
```
