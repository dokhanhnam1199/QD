{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give very low priority to bins that cannot fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    \n    # For feasible bins:\n\n    # 1. First-Fit-Decreasing heuristic inspired priority: prefer bins with smallest remaining capacity that can still fit item\n    # This favors filling partially-full bins instead of starting new ones\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] = bins_remain_cap[feasible_bins] # Smaller remaining cap is better\n\n        # 2. Modified Best-Fit heuristic inspired priority\n        # Smaller wasted space is better. Use only feasible bins from above\n        waste = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += 1.0 / (waste + 0.0001)  # Add a small constant to avoid division by zero\n    \n        #3. Avoid near perfect fits - they block the bins\n        near_perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item, rtol=1e-05, atol=1e-08)\n        priorities[feasible_bins][near_perfect_fit] *= 0.5 #Reduce priority for perfect fits.\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            waste = cap - item\n            # Prioritize bins with smallest waste, but give a boost to almost full bins\n            priorities[i] = (1 / (waste + 0.0001)) + (100 if waste < 0.1 else 0)  # Add a small constant to avoid division by zero\n\n        else:\n            priorities[i] = -1000 # Very low priority if item doesn't fit\n    return priorities\n\n[Reflection]\nPrioritize smallest waste. Heavily penalize infeasible bins. Reward almost-full bins to consolidate items.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}