```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste Minimization: Primary objective is to minimize waste.
    post_fill_levels = bins_remain_cap - item
    normalized_waste = post_fill_levels / bin_size
    priorities[feasible_bins] = -normalized_waste[feasible_bins]

    # 3. Infeasibility Penalty:  Strong penalty for infeasible bins.
    priorities[~feasible_bins] = -np.inf

    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.  Dynamic bonus.
    near_full_threshold = 0.05
    near_full_bonus = 3.0 * np.exp(-item / bin_size)  # Bonus depends on relative item size

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 5. Consolidate Items: Penalize bins with very small remaining capacity. Dynamic penalty.
    too_little_threshold = 0.15
    too_little_penalty = -2.0 * (1 - item / bin_size)  # Penalty inversely proportional to item size.

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty

    # 6. Large Item Strategy: Fill nearly empty bins if the item is large.
    large_item_threshold = 0.7
    nearly_empty_threshold = 0.95
    nearly_empty_bonus = 2.0

    if item > bin_size * large_item_threshold:
        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)
        priorities[nearly_empty_bins] += nearly_empty_bonus

    # 7. Preferentially choose bins that are already relatively full - small bonus
    already_full_threshold = 0.85
    already_full_bonus = 0.3

    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))
    priorities[already_full_bins] += already_full_bonus

    # 8. Handle No Feasible Bins: Select the least infeasible bin with a small score.
    if not np.any(feasible_bins):
      least_infeasible_bin = np.argmin(bins_remain_cap + item)
      priorities[least_infeasible_bin] = -0.01  # Very small, negative priority

    return priorities
```
