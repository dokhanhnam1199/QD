```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # Initialize infeasible bin priorities to a very low value.
    priorities[~feasible_bins] = -np.inf
    
    # Remaining capacity after adding the item.
    post_fill_levels = bins_remain_cap - item
    
    # Inverse waste:  Heavily penalize larger waste. Avoid zero division
    waste = np.clip(post_fill_levels[feasible_bins], a_min=1e-9, a_max=None)  # avoid zero division
    priorities[feasible_bins] += 1 / waste 

    # Bonus for near-full bins.
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_bonus = 5  #Slightly toned down bonus
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= near_full_threshold)
    priorities[near_full_bins] += near_full_bonus

    # Penalty for bins that would become too empty.
    too_empty_threshold = 0.2 * bins_remain_cap.max()
    too_empty_penalty = -2 #Slightly toned down penalty
    too_empty_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels > near_full_threshold) & (post_fill_levels <= too_empty_threshold) # Don't penalize near full bins that also happen to be relatively empty.
    priorities[too_empty_bins] += too_empty_penalty
    
    # Normalize priorities if no bin is feasible, prevents -inf
    if not np.any(feasible_bins):
        priorities = np.ones_like(priorities)

    return priorities
```
