```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    
    # If no bin can fit, prioritize bins with the largest remaining capacity to potentially accommodate future smaller items.
    if not np.any(can_fit):
        max_cap = np.max(bins_remain_cap)
        priorities = bins_remain_cap / max_cap if max_cap > 0 else np.zeros_like(bins_remain_cap)  # Normalize; prevent division by zero
    else:
        # Prioritize bins that can fit the item
        priorities[can_fit] = 1.0
        
        # Calculate wasted space for bins that can fit
        wasted_space = bins_remain_cap - item
        wasted_space[~can_fit] = np.inf  # Ignore bins that can't fit
        
        min_waste = np.min(wasted_space[can_fit])  # Find the minimum waste among bins that can fit

        # Prioritize bins with the smallest wasted space (close fit), but give them slightly lower priority than nearly full bins.
        close_fit = can_fit & (wasted_space <= (min_waste + 0.1)) #Tolerance added.
        priorities[close_fit] = 2.0

        # Prioritize nearly full bins to try and close them, give them highest priority
        nearly_full = can_fit & (bins_remain_cap <= 2 * item)  # Adjust factor of 2 based on item size distribution
        priorities[nearly_full] = 3.0

    return priorities
```
