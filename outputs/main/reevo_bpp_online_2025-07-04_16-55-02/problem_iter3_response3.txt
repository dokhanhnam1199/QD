```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization & Inverse Waste
    post_fill_levels = bins_remain_cap - item
    
    #Handle infeasible bins: very large negative priority
    priorities[~feasible_bins] = -1e9  

    #Inverse waste
    waste = np.abs(post_fill_levels)
    inverse_waste = 1.0 / (waste + 1e-6)  # Avoid division by zero
    priorities[feasible_bins] += inverse_waste[feasible_bins]

    # 3. Reward nearly full bins
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_reward = 10.0
    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= near_full_threshold)
    priorities[near_full_bins] += near_full_reward

    # 4. Penalize bins with too little remaining capacity to avoid fragmentation
    too_little_threshold = 0.2 * bins_remain_cap.max()
    too_little_penalty = -5.0
    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= too_little_threshold)
    priorities[too_little_bins] += too_little_penalty
    

    return priorities
```
