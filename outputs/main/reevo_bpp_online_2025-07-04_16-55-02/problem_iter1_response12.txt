```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Basic score based on remaining capacity.  Higher capacity gets a higher base score.
            priority = cap

            # Bonus for bins where the item fills a significant portion.
            fill_ratio = item / cap
            if 0.75 <= fill_ratio <= 1.0:
                priority += 10  # subtracct to have higher capacity have smaller score. and the more filling one have higher score.
            elif 0.5 <= fill_ratio < 0.75:
                 priority += 5

            # Penalize near-full bins.  Try to avoid creating bins that are just barely used.
            remaining_after_fill = cap - item
            if 0 < remaining_after_fill <= 0.1: #Avoid creating very small space
                priority -= 20

            priorities[i] = priority

        else:
            priorities[i] = -np.inf  # Impossible to place, make it a very low priority.

    return priorities
```
