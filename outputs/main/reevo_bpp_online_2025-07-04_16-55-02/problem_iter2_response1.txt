```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits and the remaining capacity is minimized.
    fit_indices = remaining_after_add >= 0
    if np.any(fit_indices):
        priorities[fit_indices] = 1 / (remaining_after_add[fit_indices] + 0.00001)  # avoid division by zero
        # Prioritize tighter fits even more.  Square the inverse of remaining capacity.
        priorities[fit_indices] = priorities[fit_indices]**2

    # For bins where the item doesn't fit, assign a negative priority proportional to the overflow.
    no_fit_indices = ~fit_indices
    if np.any(no_fit_indices):
        overflow = item - bins_remain_cap[no_fit_indices]
        priorities[no_fit_indices] = -overflow  # Negative values. Larger when the item cannot fit

    return priorities
```
