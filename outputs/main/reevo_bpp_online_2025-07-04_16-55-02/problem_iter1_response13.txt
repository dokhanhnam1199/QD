```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic inspiration: prioritize bins that can fit the item with minimal waste.
    # However, we are in the online setting, so we adapt the core idea.

    # 1. Bins that cannot fit the item get a negative priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. For feasible bins, prioritize based on remaining capacity AFTER packing the item.
    feasible_mask = ~infeasible_mask
    remaining_after_pack = bins_remain_cap[feasible_mask] - item
    
    # 3. A smaller remaining capacity is preferred (First Fit Decreasing).
    # Use a transformation to scale the priority values; avoid division by zero if some bins fit perfectly
    priorities[feasible_mask] = -remaining_after_pack + np.max(bins_remain_cap) # Larger max to allow for items larger than single bin.

    #4 Introduce noise
    priorities += np.random.normal(0,0.001, size = bins_remain_cap.shape)

    return priorities
```
