```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item

    # 3. Infesibility penalty
    priorities[~feasible_bins] = -np.inf

    # 4. Reward tight fits, penalize waste:
    waste = np.clip(post_fill_levels, a_min=0, a_max=None)  # Consider only positive waste
    bin_size = bins_remain_cap.max()  # Assuming all bins have the same capacity
    normalized_waste = waste / bin_size  # Waste as a percentage of bin capacity

    priorities[feasible_bins] = -normalized_waste[feasible_bins]  # Invert waste to make it a priority.

    # 5. Bonus for utilization - favor higher utilization
    utilization = (bin_size - bins_remain_cap + item) / bin_size #Utilization after placing the item.
    utilization[~feasible_bins] = 0 # set utilization to zero for infeasible bins.

    priorities[feasible_bins] += utilization[feasible_bins]

    return priorities
```
