```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Waste minimization: Prioritize bins with smallest remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item
    
    # 3. Infesibility penalty
    priorities[~feasible_bins] = -np.inf
    
    # 4. Reward tight fits, penalize waste:
    waste = post_fill_levels[feasible_bins]
    bin_size = bins_remain_cap.max() #Assuming all bins have the same capacity
    normalized_waste = waste / bin_size #Waste as a percentage of bin capacity
    
    priorities[feasible_bins] =  -normalized_waste  #Invert waste to make it a priority.

    # 5. Bonus for near-full bins: increased bonus to encourage packing items into partially filled bins
    near_full_threshold = 0.1  # Define a threshold for "near full" (e.g., 10% remaining capacity)
    near_full_bonus = 2

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))  #Only consider non-negative remaining capacities to fix error
    priorities[near_full_bins] += near_full_bonus
    
    # 6. Penalize bins that would have too little remaining capacity, to consolidate items. increased penalty to improve consolidation
    too_little_threshold = 0.2
    too_little_penalty = -1

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty
    
    #7. Modify waste calculation to avoid division by zero and use relative waste.
    waste_ratio = np.zeros_like(bins_remain_cap, dtype=float)
    
    valid_bins = bins_remain_cap > 0 #Avoid division by zero

    waste_ratio[valid_bins] = item / bins_remain_cap[valid_bins] #Ratio of item size to remaining capacity

    priorities[feasible_bins] += waste_ratio[feasible_bins] #Add the ratio as a priority

    # 8. Normalize priorities if no feasible bin exists:Removed normalization
    if not np.any(feasible_bins):
       priorities = np.full_like(priorities, -np.inf) #If no bins are available, mark all as unavailable by giving a large negative priority

    return priorities
```
