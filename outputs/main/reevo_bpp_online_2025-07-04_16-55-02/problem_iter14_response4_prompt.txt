{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste.  Stronger weight.\n    post_fill_levels = bins_remain_cap - item\n    priorities[feasible_bins] = -10 * post_fill_levels[feasible_bins] / bin_size  # Increased weight to waste minimization\n\n    # 3. Infeasibility Penalty: Very strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -1e9\n\n    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full. Even tighter fit. Larger bonus.\n    near_full_threshold = 0.04  # Even tighter fit\n    near_full_bonus = 5.0  # Further increased bonus\n\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n    # 5. Consolidate Items: Penalize bins with very small remaining capacity, relative to the item size. More Aggressive\n    too_little_threshold = 0.3 # Increased threshold, more aggressive\n    too_little_penalty = -4.0  # Much Stronger penalty\n\n    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold)) & (post_fill_levels > item * 0.1) #Check if enough space remains to be usable\n    priorities[too_little_bins] += too_little_penalty\n\n    # 6. Large Item Strategy: Fill nearly empty bins if the item is large. Make this a very strong incentive\n    large_item_threshold = 0.75 #Increased threshold slightly\n    nearly_empty_threshold = 0.96 #Increased threshold slightly\n    nearly_empty_bonus = 7.0 #Significantly increased bonus\n\n    if item > bin_size * large_item_threshold:\n        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)\n        priorities[nearly_empty_bins] += nearly_empty_bonus\n\n    # 7. Slightly prefer bins that are already relatively full. Increased incentive\n    already_full_threshold = 0.8\n    already_full_bonus = 1.0 #increased bonus\n\n    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))\n    priorities[already_full_bins] += already_full_bonus\n    \n    # 8. Moderate item prefers moderate fill level.\n    moderate_item_threshold_lower = 0.3\n    moderate_item_threshold_upper = 0.6\n    moderate_fill_level_lower = 0.3\n    moderate_fill_level_upper = 0.7\n    moderate_item_bonus = 2.0\n    \n    if moderate_item_threshold_lower * bin_size < item < moderate_item_threshold_upper * bin_size:\n        moderate_fill_bins = feasible_bins & (bins_remain_cap < bin_size * (1 - moderate_fill_level_lower)) & (bins_remain_cap > bin_size * (1 - moderate_fill_level_upper))\n        priorities[moderate_fill_bins] += moderate_item_bonus\n\n\n    # 9. Handle No Feasible Bins: Ensure a bin is always chosen.  Fall back to largest remaining capacity.\n    if not np.any(feasible_bins):\n        # If no feasible bins exist, select the bin with largest remaining capacity. Weight by item size to promote use when its bigger.\n        max_cap_bin = np.argmax(bins_remain_cap)\n        priorities[max_cap_bin] = 0.0001 * item #Arbitrary positive value, weighted\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste.\n    post_fill_levels = bins_remain_cap - item\n    priorities[feasible_bins] = -post_fill_levels[feasible_bins] / bin_size  # Directly use negative normalized waste\n\n    # 3. Infeasibility Penalty:  Very strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -1e9\n\n    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.\n    near_full_threshold = 0.03  # Even tighter fit\n    near_full_bonus = 5.0  # Increased bonus\n\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n    # 5. Consolidate Items: Penalize bins with very small remaining capacity, relative to the item size.\n    too_little_threshold = 0.20 #Increased threshold, more aggresive\n    too_little_penalty = -3.0  # Stronger penalty\n\n    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold)) & (post_fill_levels > item * 0.05) #Check if enough space remains to be usable\n    priorities[too_little_bins] += too_little_penalty\n\n    # 6. Large Item Strategy: Fill nearly empty bins if the item is large.  Make this a strong incentive\n    large_item_threshold = 0.75\n    nearly_empty_threshold = 0.97\n    nearly_empty_bonus = 6.0\n\n    if item > bin_size * large_item_threshold:\n        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)\n        priorities[nearly_empty_bins] += nearly_empty_bonus\n\n    # 7. Slightly prefer bins that are already relatively full\n    already_full_threshold = 0.75\n    already_full_bonus = 1.0 #increased bonus slightly\n\n    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))\n    priorities[already_full_bins] += already_full_bonus\n\n    # 8. Perfect Fit Bonus: Biggest bonus to encourage perfect fit\n    perfect_fit_bonus = 10.0\n    perfect_fit_bins = feasible_bins & (post_fill_levels == 0)\n    priorities[perfect_fit_bins] += perfect_fit_bonus\n\n    # 9. Handle No Feasible Bins:  Ensure a bin is always chosen.\n    if not np.any(feasible_bins):\n        # If no feasible bins exist, select the bin with largest remaining capacity\n        max_cap_bin = np.argmax(bins_remain_cap)\n        priorities[max_cap_bin] = 0.0001 #Arbitrary positive value\n    \n    return priorities\n\n[Reflection]\nDirectly use normalized waste; prioritize perfect fits; and fine-tune thresholds for better performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}