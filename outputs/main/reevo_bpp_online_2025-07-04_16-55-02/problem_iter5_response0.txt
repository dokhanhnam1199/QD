```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Waste minimization: Calculate remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item
    
    # 3. Infesibility penalty: Very negative priority for bins that can't fit the item
    priorities[~feasible_bins] = -np.inf
    
    # 4. Prioritize tight fits and penalize waste using inverse of remaining capacity.
    # Numerical stability is ensured by adding a small constant.
    waste = post_fill_levels[feasible_bins]
    priorities[feasible_bins] = 1 / (waste + 1e-9)  # Inverse waste, adding a small constant
    
    # Normalize waste so that priorities for small waste are emphasized
    bin_size = bins_remain_cap.max()
    priorities[feasible_bins] = priorities[feasible_bins] / bin_size

    # 5. Adjust priority based on bin utilization. Favor bins that are already somewhat full,
    #    to encourage consolidation and reduce the number of open bins.
    utilization = (bin_size - bins_remain_cap) / bin_size
    utilization_weight = 0.5 # Weighing utilization vs. waste minimization
    priorities[feasible_bins] = (1 - utilization_weight) * priorities[feasible_bins] + utilization_weight * utilization[feasible_bins]

    return priorities
```
