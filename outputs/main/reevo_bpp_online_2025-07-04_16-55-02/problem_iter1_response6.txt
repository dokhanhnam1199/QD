```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority on how much space is left after placing the item. Favor bins that leave less empty space.
            remaining_space = cap - item
            priorities[i] = 1.0 / (remaining_space + 0.0001)  # Avoid division by zero
            
            # Give a bonus to bins that are nearly full, so we can close them sooner.
            if remaining_space <= 0.1:
                priorities[i] += 10  # Substantially boost the priority
                
            # Penalize bins with very high capacity compared to item size.
            if cap > 2 * item:
                priorities[i] *= 0.5

    return priorities
```
