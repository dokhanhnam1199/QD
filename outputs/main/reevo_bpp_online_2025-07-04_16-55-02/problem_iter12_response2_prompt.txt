{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max() #Assuming all bins have the same capacity\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Infeasibility penalty: Set a very large negative priority.\n    priorities[~feasible_bins] = -np.inf\n\n    # Proceed only if at least one bin is feasible\n    if np.any(feasible_bins):\n        # Calculate remaining capacity after placing the item for feasible bins\n        post_fill_levels = bins_remain_cap[feasible_bins] - item\n\n        # 3. Waste minimization: Prioritize bins with smallest waste AFTER placing the item\n        normalized_waste = post_fill_levels / bin_size\n        priorities[feasible_bins] = -normalized_waste\n\n        # 4. Bonus for near-full bins:\n        near_full_threshold = 0.1\n        near_full_bonus = 1.0\n        near_full_bins = (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))\n        priorities[feasible_bins][near_full_bins] += near_full_bonus\n\n        # 5. Penalty for bins that would have too little remaining capacity, to consolidate items.\n        too_little_threshold = 0.2\n        too_little_penalty = -0.5\n        too_little_bins = (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))\n        priorities[feasible_bins][too_little_bins] += too_little_penalty\n\n        # 6. Small preference for bins with more initial capacity before placing the item\n        #    among the feasible bins, to encourage using partially filled bins first.\n        priorities[feasible_bins] += bins_remain_cap[feasible_bins] / (2 * bin_size)\n\n    else:\n        # If no bin is feasible, give preference to the fullest bin to open it.\n        # But use a lower priority than potentially feasible bins.\n        if np.any(bins_remain_cap > 0):\n            priorities = bins_remain_cap / bin_size - 1.1 # Slightly negative to avoid immediate use if feasible becomes available\n        else:\n            #All bins are full, but no feasible bin exists. This shouldn't happen\n            priorities = np.ones_like(priorities) * -1.1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = bins_remain_cap.max()\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Waste Minimization: Primary objective is to minimize waste.\n    post_fill_levels = bins_remain_cap - item\n    priorities[feasible_bins] = -post_fill_levels[feasible_bins] / bin_size  # Directly use negative normalized waste\n\n    # 3. Infeasibility Penalty:  Strong penalty for infeasible bins.\n    priorities[~feasible_bins] = -np.inf\n\n    # 4. Tight Fit Bonus: Significant bonus for bins that become nearly full.\n    near_full_threshold = 0.05  # Even tighter fit\n    near_full_bonus = 3.0  # Increased bonus\n\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n    # 5. Consolidate Items: Penalize bins with very small remaining capacity.\n    too_little_threshold = 0.15\n    too_little_penalty = -2.0  # Stronger penalty\n\n    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))\n    priorities[too_little_bins] += too_little_penalty\n\n    # 6. Large Item Strategy: Fill nearly empty bins if the item is large.\n    large_item_threshold = 0.7\n    nearly_empty_threshold = 0.95\n    nearly_empty_bonus = 2.5\n\n    if item > bin_size * large_item_threshold:\n        nearly_empty_bins = feasible_bins & (bins_remain_cap >= bin_size * nearly_empty_threshold)\n        priorities[nearly_empty_bins] += nearly_empty_bonus\n\n    # 7. Slightly prefer bins that are already relatively full\n    already_full_threshold = 0.85\n    already_full_bonus = 0.5\n\n    already_full_bins = feasible_bins & (bins_remain_cap <= bin_size * (1 - already_full_threshold))\n    priorities[already_full_bins] += already_full_bonus\n\n    # 8. Dynamic penalty based on remaining capacity and item size\n    capacity_ratio = bins_remain_cap / bin_size\n    item_ratio = item / bin_size\n    dynamic_penalty = -np.abs(capacity_ratio - item_ratio)\n\n    priorities[feasible_bins] += dynamic_penalty[feasible_bins]\n\n    # 9. Handle No Feasible Bins:  Ensure a bin is always chosen.\n    if not np.any(feasible_bins):\n       # Find the bin with the maximum remaining capacity among infeasible bins.\n        max_infeasible_cap = np.max(bins_remain_cap[~feasible_bins], initial=-1)\n\n        # If there are infeasible bins\n        if max_infeasible_cap > -1:\n            best_infeasible_bin = np.argmax(bins_remain_cap == max_infeasible_cap)\n            priorities[best_infeasible_bin] = -1e-6 # Very small value\n        else: #no bins at all\n           priorities = np.zeros_like(priorities) # keep same size\n           priorities[0] = -1e-6\n        \n\n    return priorities\n\n[Reflection]\nFocus on waste minimization, tight fits, and consolidating items with dynamic penalties.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}