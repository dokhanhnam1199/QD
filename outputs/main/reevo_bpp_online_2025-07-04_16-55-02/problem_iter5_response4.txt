```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Post-fill remaining capacity.
    post_fill_levels = bins_remain_cap - item
    
    # 3. Infeasibility penalty.  Set to very low number rather than -inf for stability.
    priorities[~feasible_bins] = -1e9
    
    # 4.  Prioritize tight fits based on inverse of remaining waste
    # Numerical stability is ensured by adding a small epsilon
    epsilon = 1e-6
    waste = post_fill_levels[feasible_bins] + epsilon  # Avoid division by zero
    priorities[feasible_bins] = 1.0 / waste #The smaller waste gets, the bigger the inverse becomes
    
    #Normalize to make comparable even across very different item/bin sizes.
    if np.sum(feasible_bins) > 0: # only when a feasible bin is found
       priorities[feasible_bins] /= np.sum(priorities[feasible_bins])
        
    return priorities
```
