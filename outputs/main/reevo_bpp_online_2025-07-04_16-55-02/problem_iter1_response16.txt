```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize with a base score (e.g., remaining capacity)
    priorities = bins_remain_cap.copy()

    # 1. Feasibility: prioritize bins that can actually fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf # Extremely low priority, practically exclude
    
    # 2. Fill ratio: Prioritize bins that would be filled close to full
    # But not overflowing. Closer to 1 is better
    fill_ratios = item / bins_remain_cap
    fill_ratios[infeasible_mask] = 0 # set fill_ratios of invalid bins to 0
    
    priorities += 5 * (1 - np.abs(1 - fill_ratios)) # Adding the 'inverse distance' from fill ration to 1.

    # 3. Avoid fragmentation: penalize bins that will have a very small remaining capacity
    remaining_after_placement = bins_remain_cap - item
    fragmentation_penalty = np.where(remaining_after_placement > 0, -10 * (remaining_after_placement < 0.1), 0) # heavily penalize if remaining capacity < 0.1
    priorities += fragmentation_penalty
    
    #4. First Fit Adjustment: Slight bias towards bins seen earlier.
    priorities += 0.01 * np.arange(len(bins_remain_cap))

    return priorities
```
