```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        waste = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (1e-9 + waste)  # Prioritize tight fits using inverse waste, add small constant for numerical stability.
        
        #Optional: Adjust priority based on remaining capacity to break ties based on more full bins.
        #priorities[can_fit] += bins_remain_cap[can_fit] / np.max(bins_remain_cap)
        
    else:
        # If no bin can fit the item, spread the probability based on available capacity.
        # This helps to distribute items and potentially open up space in the future.
        total_capacity = np.sum(bins_remain_cap)
        if total_capacity > 0:  # Avoid division by zero if all bins are full.
            priorities = bins_remain_cap / total_capacity
        else:
            priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap) #Distribute evenly if everything is full
            
    return priorities
```
