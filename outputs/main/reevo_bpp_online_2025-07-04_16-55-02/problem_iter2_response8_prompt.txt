{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Assign high priority to bins that can accommodate the item\n    # with minimal waste.  Avoids creating many almost-full bins.\n    mask = bins_remain_cap >= item\n    if np.any(mask):\n        waste = bins_remain_cap[mask] - item\n        priorities[mask] = 1 / (waste + 1e-6)  # Minimize waste\n        # Further prioritize bins with small waste relative to bin size.\n\n        relative_waste = waste / bins_remain_cap[mask]\n        priorities[mask] += 1/(relative_waste + 1e-6)\n\n    # Assign low priority to bins that cannot accommodate the item.\n    priorities[bins_remain_cap < item] = -1e9 # Very low priority\n\n    # A bin that is almost full receives lower priority\n    priorities -= 10*(1 - bins_remain_cap/bins_remain_cap.max()) # Encourage bins to be used\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no feasible bins, return all -inf\n    if not np.any(feasible_bins):\n        return np.full_like(bins_remain_cap, -np.inf)\n\n    # 2. Remaining capacity after packing: Prefer bins that leave less wasted space.\n    remaining_after_packing = bins_remain_cap - item\n    remaining_after_packing[remaining_after_packing < 0] = np.inf  # Mark infeasible bins as infinitely bad\n\n    # 3. Utilization: Prioritize bins with higher utilization after packing (avoid near-empty bins).\n    utilization = (bins_remain_cap - remaining_after_packing) / bins_remain_cap\n    utilization[~feasible_bins] = 0  # Set utilization of infeasible bins to 0\n\n\n    # Combine these factors into a single priority score.\n\n    priorities = feasible_bins * (1 / (remaining_after_packing + 1e-9))  # higher priority for lower remaining after packing (among feasible bins)\n\n    # Enhance priority using utilization, by adding some weight\n    priorities = priorities + utilization\n\n    return priorities\n\n[Reflection]\nThe better code uses feasibility as a hard constraint and combines waste minimization and utilization effectively.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}