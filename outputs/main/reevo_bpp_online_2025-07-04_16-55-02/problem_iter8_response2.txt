```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap.max()

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. Calculate remaining capacity *after* placing the item
    post_fill_levels = bins_remain_cap - item

    # 3. Infeasibility penalty: Heavily penalize infeasible bins.
    priorities[~feasible_bins] = -np.inf

    # 4. Prioritize bins with higher utilization after placing the item.
    utilization = (bin_size - post_fill_levels) / bin_size
    utilization[~feasible_bins] = -np.inf  # Ensure infeasible bins have the lowest priority
    priorities = utilization

    # 5. Encourage tighter fits by slightly rewarding near-full bins after placement
    near_full_threshold = 0.1
    near_full_bonus = 0.15

    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))
    priorities[near_full_bins] += near_full_bonus

    # 6. Penalize bins that would have too little remaining capacity, to consolidate items.
    too_little_threshold = 0.2
    too_little_penalty = -0.05

    too_little_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_little_threshold))
    priorities[too_little_bins] += too_little_penalty

    # 7. If no feasible bin found, give all bins a default priority to allow placement in any bin.
    if not np.any(feasible_bins):
        priorities = np.ones_like(priorities) * 0.01 # Add a tiny value for arbitrary choice

    return priorities
```
