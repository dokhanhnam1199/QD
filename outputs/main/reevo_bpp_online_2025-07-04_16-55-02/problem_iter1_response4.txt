```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    # If no feasible bins, return all -inf
    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    # 2. Remaining capacity after packing: Prefer bins that leave less wasted space.
    remaining_after_packing = bins_remain_cap - item
    remaining_after_packing[remaining_after_packing < 0] = np.inf  # Mark infeasible bins as infinitely bad

    # 3. Utilization: Prioritize bins with higher utilization after packing (avoid near-empty bins).
    utilization = (bins_remain_cap - remaining_after_packing) / bins_remain_cap
    utilization[~feasible_bins] = 0  # Set utilization of infeasible bins to 0


    # Combine these factors into a single priority score.

    priorities = feasible_bins * (1 / (remaining_after_packing + 1e-9))  # higher priority for lower remaining after packing (among feasible bins)

    # Enhance priority using utilization, by adding some weight
    priorities = priorities + utilization

    return priorities
```
