```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can accommodate the item
    # with minimal waste.  Avoids creating many almost-full bins.
    mask = bins_remain_cap >= item
    if np.any(mask):
        waste = bins_remain_cap[mask] - item
        priorities[mask] = 1 / (waste + 1e-6)  # Minimize waste
        # Further prioritize bins with small waste relative to bin size.

        relative_waste = waste / bins_remain_cap[mask]
        priorities[mask] += 1/(relative_waste + 1e-6)

    # Assign low priority to bins that cannot accommodate the item.
    priorities[bins_remain_cap < item] = -1e9 # Very low priority

    # A bin that is almost full receives lower priority
    priorities -= 10*(1 - bins_remain_cap/bins_remain_cap.max()) # Encourage bins to be used

    return priorities
```
