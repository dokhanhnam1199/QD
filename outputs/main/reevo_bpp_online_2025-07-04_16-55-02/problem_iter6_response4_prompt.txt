{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Reward fitting items significantly.\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 100  # Substantially reward fitting\n\n    # Heuristic 2: Among bins that fit, prefer those with the least *percentage* of remaining capacity after placing the item.\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    percentage_remaining = remaining_after_fit / bins_remain_cap[fit_mask]\n    priorities[fit_mask] += np.exp(-10 * percentage_remaining)  # Exponential decay favors smaller percentages\n\n    # Heuristic 3: Heavily penalize bins that cannot fit, proportional to the overflow.\n    no_fit_mask = bins_remain_cap < item\n    overflow = item - bins_remain_cap[no_fit_mask]\n    priorities[no_fit_mask] -= 50 * overflow  # Penalty proportional to overflow\n    \n\n    # Heuristic 4: If no bins can fit, prefer bins with largest capacity.  Only apply if no fit is possible.\n    if not np.any(fit_mask):\n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:\n            priorities += bins_remain_cap / max_cap  # Normalize to avoid dominating penalties\n        else:\n            priorities += 0  # All bins are empty, so no preference\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Calculate remaining capacity after placing the item\n    post_fill_levels = bins_remain_cap - item\n\n    # 3. Infeasibility penalty: Very low priority for infeasible bins\n    priorities[~feasible_bins] = -np.inf\n\n    # 4. Waste minimization using normalized waste\n    bin_size = bins_remain_cap.max()  # Assuming all bins have the same capacity\n    waste = post_fill_levels[feasible_bins]\n    normalized_waste = waste / bin_size\n    priorities[feasible_bins] = -normalized_waste\n\n    # 5. Bonus for near-full bins (encourage filling bins completely)\n    near_full_threshold = 0.1\n    near_full_bonus = 1.0\n    near_full_bins = feasible_bins & (post_fill_levels >= 0) & (post_fill_levels <= (bin_size * near_full_threshold))\n    priorities[near_full_bins] += near_full_bonus\n\n    # 6. Penalty for bins that would become too empty (encourage consolidation)\n    too_empty_threshold = 0.2\n    too_empty_penalty = -0.5\n    too_empty_bins = feasible_bins & (post_fill_levels > 0) & (post_fill_levels <= (bin_size * too_empty_threshold))\n    priorities[too_empty_bins] += too_empty_penalty\n\n    # 7. If no feasible bin exists, give all bins equal priority\n    if not np.any(feasible_bins):\n        priorities = np.ones_like(priorities)\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, normalize waste, and encourage near-full/avoid too-empty bins for improved packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}