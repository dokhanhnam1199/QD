```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get a higher priority.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Rule 2: Give higher priority to bins with less remaining capacity (among those that can fit the item)
    # Prioritize filling up bins to completion. Also adding a small value to avoid division by zero.
    remaining_capacity_priority = 1 / (bins_remain_cap[fit_mask] + 0.00001)
    priorities[fit_mask] += remaining_capacity_priority

    # Rule 3: Smallest Wastage Heuristic: Prefer to place the item in the bin that will result in the least wasted space if it fits
    wastage = bins_remain_cap - item
    wastage_priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    fit_mask2 = bins_remain_cap >= item
    wastage_priority[fit_mask2] = -wastage[fit_mask2]

    priorities[fit_mask2] += wastage_priority[fit_mask2]

    return priorities
```
