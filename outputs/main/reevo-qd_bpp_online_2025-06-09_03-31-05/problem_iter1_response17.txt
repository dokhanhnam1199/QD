```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Prefer bins where the item fits.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Rule 2: For bins where the item fits, prefer bins with less remaining capacity *after* packing.
    #          This encourages filling bins completely.
    remaining_after_pack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (remaining_after_pack + 0.0001)  # Add a small constant to avoid division by zero.

    # Rule 3: For bins where the item *doesn't* fit, penalize them heavily (but still allow packing if no other choice exists).
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] -= (item - bins_remain_cap[no_fit_mask]) * 0.1  # Penalize based on the gap.

    # Rule 4: Give slight priority to more empty bins.  This helps avoid using almost-full bins early on if possible.
    priorities += bins_remain_cap * 0.01

    return priorities
```
