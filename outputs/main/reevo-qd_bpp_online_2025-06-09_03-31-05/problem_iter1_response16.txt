```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority: prioritize bins that can accommodate the item
    # and have the least remaining space after packing

    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_space_after_packing = bins_remain_cap[valid_bins] - item
        # Prioritize bins with smallest remaining space
        priorities[valid_bins] = -remaining_space_after_packing # Negate to make it priority, smaller space means higher priority
    else:
        # If no bin can accomodate, assign a large negative priority (discourage adding to any bin)
        priorities[:] = -np.inf

    # Add a small bonus for bins that are relatively empty
    # to avoid filling almost empty bins right away if other more full bins
    # could accept the current item. The bonus is added only if there is available bin
    if np.any(valid_bins):
        priorities[valid_bins] += 0.01 * (1 - bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
        #The intuition is that bins with more capacity relative to maximum will get higher bonus
    return priorities
```
