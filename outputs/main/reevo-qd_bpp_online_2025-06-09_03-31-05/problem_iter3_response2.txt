```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Primary Priority: Tight Fit
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)
        
        # Secondary Priority: Almost Full Bins (Boosting)
        almost_full = (bins_remain_cap[can_fit] < 2 * item) & (bins_remain_cap[can_fit] >= item)
        priorities[can_fit][almost_full] *= 3 # Higher boost

        # Tertiary Priority: Moderate Remaining Space
        moderate_space = (remaining_space_after_fit > item) & can_fit
        priorities[moderate_space] *= 0.5 # Reduce priority

        # Slightly prefer bins with some content already
        non_empty = bins_remain_cap < np.max(bins_remain_cap) # Check to see if they contain contents
        priorities[non_empty] += 0.1 # Slight bonus for bins with items.

    else:
        # Infeasible Placement: Heavy Penalty
        priorities[:] = -1e9
    
    return priorities
```
