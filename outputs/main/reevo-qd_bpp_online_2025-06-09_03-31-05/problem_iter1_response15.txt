```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1.0  # Give these bins a base priority

    # Heuristic 2:  Fill the fullest bin.
    priorities[can_accommodate] += bins_remain_cap[can_accommodate] # Prioritize bins that have more space

    # Heuristic 3: Give high priority to bins that will be filled by the item
    almost_full = np.abs(bins_remain_cap - item) < 0.01 # adjust 0.01 for granularity or item size
    priorities[almost_full] += 5

    # Heuristic 4: Penalize bins with very little remaining capacity after adding the item (fragmentation)
    remaining_after_add = bins_remain_cap - item
    small_remaining = (remaining_after_add > 0) & (remaining_after_add < 0.1) # adjust 0.1 for granularity
    priorities[small_remaining] -= 2  # Penalize, so the bins wont be easily selected

    # Handle bins that can't accommodate the item: Very low priority
    priorities[~can_accommodate] = -100
    
    return priorities
```
