```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tight fits (smaller remaining space is better)
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9) 
        
        # Encourage near-fullness (bins closer to full get higher priority)
        near_fullness = bins_remain_cap[can_fit] / np.max(bins_remain_cap)
        priorities[can_fit] += near_fullness 

        # Additional boost if item fills a bin to a very high level
        very_full = (remaining_space_after_fit / item) < 0.1 
        priorities[can_fit][very_full] *= 3

    else:
        # Strong penalty for infeasible bins.  Important to avoid this if possible.
        priorities[:] = -1e9  

    return priorities
```
