```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize bins with smaller remaining space
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9) 
        
        # Boost priority if the bin becomes nearly full after adding the item
        nearly_full = (remaining_space_after_fit < 0.1) # Threshold = 0.1
        priorities[can_fit][nearly_full] += 10  # subatantial boost when bin becomes nearly full after placement

        # Further boost priority for very tight fits to ensure utilization
        tight_fit = (item > 0.8 * bins_remain_cap[can_fit]) # item close to bin capacity
        priorities[can_fit][tight_fit] += 5

    else:
        # Strongly penalize infeasible placements
        priorities[:] = -1e9  

    return priorities
```
