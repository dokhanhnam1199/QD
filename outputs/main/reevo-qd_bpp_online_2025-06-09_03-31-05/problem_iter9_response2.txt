```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Check feasibility first
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        priorities[:] = -1e9  # Huge penalty for infeasibility
        return priorities

    # Reward tight fits
    remaining_space = bins_remain_cap - item
    priorities[can_fit] = 1.0 / (remaining_space[can_fit] + 1e-9)  # Prioritize tight fits

    # Boost almost full bins
    almost_full = can_fit & (bins_remain_cap < 2 * item)
    priorities[almost_full] *= 2.0  # Increased reward for nearly full bins

    # Penalize large wasted space
    large_waste = can_fit & (remaining_space > 0.5)  # Wasted space > 50% of bin size
    priorities[large_waste] *= 0.5  # Reduce priority if significant space wasted

    # Introduce randomization
    priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1  # Small random perturbation

    return priorities
```
