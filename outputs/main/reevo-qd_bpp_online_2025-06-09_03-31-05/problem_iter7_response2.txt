```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tighter fits (smaller remaining space)
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)

        # Enhance priority for bins that become nearly full after adding the item
        nearly_full_after = remaining_space_after_fit < 0.1  # Threshold for "nearly full"
        priorities[can_fit][nearly_full_after] *= 5  # Substantially boost priority

        # Slightly increase priority for bins that are already somewhat full
        already_full = bins_remain_cap[can_fit] < 0.5
        priorities[can_fit][already_full] *= 1.2
        
        # Penalize bins where too much space remains, relatively to the item size
        wasteful_fit = remaining_space_after_fit > 2 * item
        priorities[can_fit][wasteful_fit] *= 0.5 # reduce priority

    else:
        # Strongly penalize infeasible placements
        priorities[:] = -1e9

    return priorities
```
