```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority
    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Boost priority for bins that are almost full
        almost_full = (bins_remain_cap[can_fit] <= 1.1 * item) #more aggressively define almost full
        priorities[can_fit][almost_full] *= 5  # Increase the priority boost

        # Slightly penalize bins that have a lot of free space
        # but can fit the item. Avoid very sparse packing at start.
        relatively_empty = (bins_remain_cap[can_fit] >= 3 * item)
        priorities[can_fit][relatively_empty] *= 0.5 #reduce the priority

    else:
      # if none of the bins fit, penalize all bins
      priorities[:] = -1e9 

    return priorities
```
