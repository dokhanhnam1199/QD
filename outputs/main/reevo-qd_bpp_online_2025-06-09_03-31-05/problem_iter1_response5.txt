```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Heuristic 1: First Fit Decreasing (FFD) - Modified
    # Give higher priority to bins that can accommodate the item reasonably well
    # without leaving too much or too little space.
    # Calculate wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item
    # Give a bonus if the wasted space is within a desirable range.
    desirable_range_min = 0.1  #tuneable parameter
    desirable_range_max = 0.3 #tuneable parameter
    bonus = np.where((wasted_space >= desirable_range_min) & (wasted_space <= desirable_range_max), 1, 0)
    priorities += bonus

    # Heuristic 2: Avoid Fragmentation
    # Penalize bins that are just large enough to fit the item, to avoid creating tiny fragments
    penalty_threshold = item * 0.1  # Tuneable parameter: Percentage of item size
    penalty = np.where((wasted_space >= 0) & (wasted_space <= penalty_threshold), -0.5, 0) # Penalize, not prohibit
    priorities += penalty

    # Heuristic 3: Prefer bins that are already partially filled
    # This promotes filling bins more completely, potentially reducing the overall bin count.
    priorities += bins_remain_cap/bins_remain_cap.max() #scale to make sure they're compatible with other heuristics

    # Heuristic 4: Very Large item protection
    very_large_item_threshold = 0.8 # If an item is 80% of bin capacity protect large bin. Tuneable.
    protection_factor = 0.1 # Reduce prioritiy slightly so these larger bins have some consideration

    protection = np.where(item > very_large_item_threshold * bins_remain_cap.max(),-protection_factor,0)
    priorities+=protection

    # Ineligible bins get a very negative priority
    priorities = np.where(bins_remain_cap < item, -1e9, priorities)

    return priorities
```
