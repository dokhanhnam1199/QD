```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority
    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Boost priority for bins that are almost full
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] *= 2.0  # Double the priority if almost full
        
        # Further boost for very tight fits, prioritize even more
        very_tight = (bins_remain_cap[can_fit] - item) < 0.1
        priorities[can_fit][very_tight] *= 5.0  # Quintuple the priority for very tight fits
        
        # Bonus for bins that fit the item well (not too tight, not too empty). Balance utilization
        well_fitted = (remaining_space_after_fit >= 0.1) & (remaining_space_after_fit <= 0.5 * np.max(bins_remain_cap)) # Defined well-fitted range
        priorities[can_fit][well_fitted] *= 1.5 # 50% bonus

        # Introduce a slight penalty for fragmentation - large empty spaces after placing item
        fragmented = remaining_space_after_fit > 0.75 * np.max(bins_remain_cap) # Define fragmented threshold
        priorities[can_fit][fragmented] *= 0.8 # 20% penalty to fragmented spaces

    else:
        # if none of the bins fit, heavily penalize all bins
        priorities[:] = -1e9 

    return priorities
```
