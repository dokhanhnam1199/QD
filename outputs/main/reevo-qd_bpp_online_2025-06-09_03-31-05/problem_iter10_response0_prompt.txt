{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit Decreasing heuristic inspired priority\n    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        remaining_space_after_fit = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space\n\n        # Boost priority for bins that are almost full\n        almost_full = (bins_remain_cap[can_fit] < 2 * item)\n        priorities[can_fit][almost_full] *= 2  # Double the priority if almost full\n        \n        # Further boost for very tight fits, but also consider the item size\n        very_tight = (bins_remain_cap[can_fit] - item) < 0.1\n        priorities[can_fit][very_tight] *= (3 + item) # Boost proportional to item size\n\n        # Slightly penalize bins that are too big compared to the item\n        not_ideal_fit = (bins_remain_cap[can_fit] > 3 * item)\n        priorities[can_fit][not_ideal_fit] *= 0.5 # Reduce priority if significantly larger\n\n    else:\n      # if none of the bins fit, heavily penalize all bins\n      priorities[:] = -1e9 \n\n    return priorities\n\n[Reflection]\nExploiting domain knowledge (item size, remaining capacity) with nuanced boosting and penalization creates better heuristics.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}