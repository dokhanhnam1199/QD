```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority
    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Boost priority for bins that are almost full
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] *= 2  # Double the priority if almost full
        
        # Further boost for very tight fits, but also consider the item size
        very_tight = (bins_remain_cap[can_fit] - item) < 0.1
        priorities[can_fit][very_tight] *= (3 + item) # Boost proportional to item size

        # Slightly penalize bins that are too big compared to the item, but make it item-size aware
        not_ideal_fit = (bins_remain_cap[can_fit] > 3 * item)
        priorities[can_fit][not_ideal_fit] *= 0.5 # Reduce priority if significantly larger

        # Moderate penalty for large bins and small items, indicating wasted space if used
        large_bin_small_item = (bins_remain_cap[can_fit] > 5 * item) & (item < 0.2)
        priorities[can_fit][large_bin_small_item] *= 0.25 # Even larger penalty

        # Incentive to start a new bin if item is large (reduces fragmentation)
        if item > 0.7:
            priorities[can_fit] *= 0.75 # de-prioritize existing bins slightly
        
        # If the remaining capacity is close to 1 (full bin), add a larger boost
        almost_full_bin = (bins_remain_cap[can_fit] > 0.9) and (bins_remain_cap[can_fit] < 1.1)
        priorities[can_fit][almost_full_bin] *= 4  # Large bonus for almost full bins

    else:
      # if none of the bins fit, heavily penalize all bins
      priorities[:] = -1e9 

    return priorities
```
