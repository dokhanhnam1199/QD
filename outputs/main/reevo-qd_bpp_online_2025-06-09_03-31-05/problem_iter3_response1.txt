```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tight fits (smallest remaining space) more strongly
        priorities[can_fit] = 10.0 / (remaining_space_after_fit + 1e-9)

        # Heavily reward bins that become nearly full after placement
        nearly_full_threshold = 0.1  # Define "nearly full" as having <= 10% capacity remaining
        nearly_full_after_fit = remaining_space_after_fit <= nearly_full_threshold
        priorities[can_fit][nearly_full_after_fit] += 100  # Huge bonus for making a bin nearly full

        # Moderate reward for bins that are already somewhat full
        somewhat_full_threshold = 0.5
        somewhat_full_already = bins_remain_cap[can_fit] <= somewhat_full_threshold
        priorities[can_fit][somewhat_full_already] += 5 # Add moderate value

        # Slightly penalize bins with very large remaining space
        large_space_threshold = 0.9
        large_space_already = bins_remain_cap[can_fit] >= large_space_threshold
        priorities[can_fit][large_space_already] -= 1

    else:
        # Infeasible placement: very negative priority.
        priorities[:] = -1e9

    return priorities
```
