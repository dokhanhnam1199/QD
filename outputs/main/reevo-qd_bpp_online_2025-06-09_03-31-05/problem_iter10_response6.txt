```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Boost priority for bins that are almost full
        almost_full = (bins_remain_cap[can_fit] <= 1.1 * item) #Slightly relaxed version of "almost full"
        priorities[can_fit][almost_full] *= 3  # Triple the priority if almost full

        # Further boost priority to bins that are best fit 
        min_remaining = np.min(remaining_space_after_fit)
        best_fit = (remaining_space_after_fit == min_remaining)
        priorities[can_fit][best_fit] *= 4 # Quadruple the priority if best fit within available bins

    else:
        # If none of the bins fit, strongly penalize all bins, but slightly prefer bins with larger remaining capacity
        priorities = -1e9 + bins_remain_cap 
        
    return priorities
```
