```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority
    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize bins based on how full they will be *after* placing the item
        fill_ratios = (bins_remain_cap[can_fit] - remaining_space_after_fit) / bins_remain_cap[can_fit]
        priorities[can_fit] = fill_ratios  # Prioritize based on fill ratio

        # Further boost priority for bins that are almost full after placing item
        almost_full = (remaining_space_after_fit < 0.1 * bins_remain_cap[can_fit]) #remaining space is less than 10% of the bin size
        priorities[can_fit][almost_full] += 1  # Add a constant priority boost if almost full

        # Penalize bins that would become almost empty after placing the item
        almost_empty = (remaining_space_after_fit > 0.9 * bins_remain_cap[can_fit]) #remaining space is more than 90% of the bin size
        priorities[can_fit][almost_empty] -= 0.5 #Subtract a penalty.

    else:
      # if none of the bins fit, penalize all bins
      priorities[:] = -1e9 

    return priorities
```
