```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority:
    # Give highest priority to bins that can accommodate the item with least waste.
    # If the bin cannot accommodate the item, give it a very low priority.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = cap - item  # Smaller waste, higher priority
        else:
            priorities[i] = -1e9  # Very low priority for bins that can't fit

    # Reverse the waste values to have higher score for less waste. Add a large number to give a bin fitting the item much higher priority than others.
    priorities = -priorities # reverse the sign to convert to a maximization problem
    priorities = priorities + 1e8*(priorities > -1e9)

    return priorities
```
