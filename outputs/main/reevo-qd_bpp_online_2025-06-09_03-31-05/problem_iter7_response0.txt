```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible placement penalty
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very low priority for infeasible bins

    # Feasible placement scoring
    feasible = ~infeasible
    if np.any(feasible):
        remaining_space = bins_remain_cap[feasible] - item

        # Tight fit bonus (inverse of remaining space)
        priorities[feasible] = 1.0 / (remaining_space + 1e-9)

        # Nearly full bin bonus
        nearly_full = (bins_remain_cap[feasible] - item) <= 0.1  # Define 'nearly full' as having <= 0.1 remaining
        priorities[feasible][nearly_full] += 1  # Add 1 to priority for nearly full bins

        # Medium sized item and bin => try to target half-full bins
        medium_item = 0.25 <= item <= 0.75
        if medium_item:
          half_full_bin = np.abs(bins_remain_cap[feasible] - item - 0.5)
          priorities[feasible] /= (half_full_bin + 1e-9) # Try to fit where the result will be close to half full.

    return priorities
```
