```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Calculate waste if item is placed in bin
    waste = bins_remain_cap - item
    
    # 3. Give higher priority to bins with smallest waste that still can fit the item
    priorities[feasible_bins] = 1 / (waste[feasible_bins] + 0.00001) # adding small value to avoid zero division
    
    # 4. Give a boost to bins that are almost full after placing the item
    almost_full = (waste >= 0) & (waste <= 0.1 * np.max(bins_remain_cap)) # or replace max(bins_remain_cap) with fixed threshold
    priorities[almost_full] *= 2 # can tune the weight for almost_full bins
    
    # 5. Consider bin utilization before adding the new item.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # normalized remaining cap.
    priorities += utilization

    # Avoid very large values by normalizing (optional, but can help with stability)
    if np.sum(priorities) > 0:
      priorities = priorities / np.sum(priorities)
    

    return priorities
```
