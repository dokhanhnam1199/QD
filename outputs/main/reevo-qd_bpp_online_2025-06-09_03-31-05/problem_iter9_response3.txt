```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Tight fit reward, scaled by item size
        priorities[can_fit] = (item / (remaining_space_after_fit + 1e-9))

        # Almost full reward, scaled inversely by remaining space
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] += 2 * (1 / (bins_remain_cap[can_fit][almost_full] + 1e-9))
        
        # Introduce randomization to encourage exploration
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1
    else:
      # Strong penalty for infeasibility
      priorities[:] = -1e9
    

    return priorities
```
