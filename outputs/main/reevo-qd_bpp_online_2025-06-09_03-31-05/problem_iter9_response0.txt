```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility penalty
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very low priority if infeasible

    # Reward tight fits
    feasible = ~infeasible
    if np.any(feasible):
        remaining_space = bins_remain_cap[feasible] - item
        priorities[feasible] = 1.0 / (remaining_space + 1e-9)

        # Bonus for nearly full bins
        almost_full = (bins_remain_cap[feasible] - item) <= 0.1 #tune the threshold
        priorities[feasible][almost_full] += 1.0

        # Scale reward by item size: Favor using smaller items in smaller remaining spaces
        priorities[feasible] *= item
        
        # Randomization: Add some noise to break ties and encourage exploration
        priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.1

    return priorities
```
