```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit-Decreasing heuristic-inspired score: Prefer bins where the item
            # fills a large portion of the bin, but leave enough space to accommodate
            # potentially smaller items later.
            fill_ratio = item / cap
            remaining_ratio = (cap - item) / cap

            # Give high priority to bins that the item fits reasonably well.

            priorities[i] = 10*fill_ratio - 5*(abs(remaining_ratio - 0.25)) #Prefer leaving some space
            if remaining_ratio < 0.05: # Punish nearly full bins to encourage balancing
                priorities[i] -=5
            # Small bonus for utilizing a larger percentage of space
            priorities[i] += 0.5*fill_ratio
            # Penalize bins with small remaining capacity.

        else:
            priorities[i] = -np.inf  # Cannot fit, so assign a very low priority

    return priorities
```
