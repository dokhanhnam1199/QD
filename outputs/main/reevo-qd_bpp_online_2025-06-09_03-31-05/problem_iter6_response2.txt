```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Primary priority: maximize bin utilization
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)
        
        # Encourage tighter fits. More aggressive boosting than v1
        almost_full = (bins_remain_cap[can_fit] <= 1.5 * item)
        priorities[can_fit][almost_full] *= 4  # Significantly boost almost full bins
        
        # Heavily boost for very tight fits, scale boost with item and available space
        very_tight = (bins_remain_cap[can_fit] - item) <= 0.05
        priorities[can_fit][very_tight] *= (5 + item + 1.0/(bins_remain_cap[can_fit] - item + 0.001))

        # Penalize larger bins, but progressively.  Larger penalties for much larger bins
        not_ideal_fit = (bins_remain_cap[can_fit] > 2 * item)
        priorities[can_fit][not_ideal_fit] *= 0.7  # Moderate penalty

        too_large = (bins_remain_cap[can_fit] > 4 * item)
        priorities[can_fit][too_large] *= 0.3  # Severe penalty if bin is much larger

        wasteful = (bins_remain_cap[can_fit] > 6 * item)
        priorities[can_fit][wasteful] *= 0.1 # Extremely low priority if incredibly wasteful
        
    else:
      # if none of the bins fit, heavily penalize all bins
      priorities[:] = -1e9 

    return priorities
```
