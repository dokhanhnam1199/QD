```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Encourage bins that have just enough space (minimize wasted space)
    space_left = bins_remain_cap - item
    
    # Give a bonus to bins where the remaining space is small
    priorities[~infeasible_bins] += np.exp(-5 * space_left[~infeasible_bins] / np.max(bins_remain_cap)) # Use exponential decay to prioritize small space

    #Prioritize bins with higher fill ratio (item size / original capacity). Assume original capacity is same across bins
    priorities[~infeasible_bins] += item / (item + space_left[~infeasible_bins] + 1e-9) # Avoid division by zero

    # Slightly prioritize bins that are not completely empty (to avoid creating too many nearly empty bins)
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    priorities[empty_bins] -= 0.1 # Small penalty for fully empty bins


    return priorities
```
