```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Filter out bins that cannot accommodate the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Very low priority for infeasible bins

    # 2. Best Fit: Prefer bins where the remaining capacity is close to the item size.
    #   This aims to reduce fragmentation and increase bin utilization.
    feasible_mask = ~infeasible_mask
    remaining_after_fit = bins_remain_cap[feasible_mask] - item
    
    # Give higher priority to bins where the remaining capacity after adding the item is small
    # We apply a non-linear transform (e.g., exponential) to emphasize bins with very tight fits
    # Small remaining cap means high priority

    priorities[feasible_mask] = np.exp(-remaining_after_fit)

    # 3. Avoid small waste
    small_waste_threshold = 0.1 # relative to the bin capacity

    relative_waste = remaining_after_fit / np.max(bins_remain_cap)
    small_waste_bins = relative_waste < small_waste_threshold

    priorities[feasible_mask][small_waste_bins] *= 2 # boost those bins

    # 4. Bonus for almost full bins
    almost_full_threshold = 0.9

    relative_fill = (bins_remain_cap[feasible_mask] - remaining_after_fit) / np.max(bins_remain_cap)
    almost_full_bins = relative_fill > almost_full_threshold

    priorities[feasible_mask][almost_full_bins] *= 3

    return priorities
```
