```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate fit gets highest priority
    immediate_fit = (bins_remain_cap == item)
    priorities[immediate_fit] = 1000  # High priority for immediate fit

    # First-fit decreasing heuristic
    can_fit = (bins_remain_cap >= item)
    
    # Prioritize bins that have enough space to fit, more free space is better, but not too much
    priorities[can_fit] = 100 / (bins_remain_cap[can_fit] - item + 0.0001)  # Avoid division by zero. Closer fit, better.
    
    # Reduce priority if we cause significant fragmentation.
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    fragmentation_penalty[can_fit] = (bins_remain_cap[can_fit] - item) # remaining space
    
    # Further penalize if small item and causes fragment > some threshold. 
    small_frag_threshold = 0.2  #fragment > 20% capacity. can tune the hyperparameters
    priorities[can_fit & (fragmentation_penalty > small_frag_threshold)] /= 2.0 # Moderate penalty.

    
    # Give bins close to full a bonus
    full_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Add bonus for bins close to becoming full after packing.
    almost_full_threshold = 0.1
    after_packing = bins_remain_cap[can_fit] - item
    full_bonus[can_fit & (after_packing < almost_full_threshold)] += 50
    
    priorities += full_bonus #add this as well

    # Avoid bins with small capacity if there is a bigger bin available.
    small_bin_threshold = 0.3
    priorities[bins_remain_cap < small_bin_threshold] *= 0.5 # Reduce priority slightly. 
    
    return priorities
```
