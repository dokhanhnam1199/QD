```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Tight fit bonus
        tight_fit = (remaining_space_after_fit <= 0.1) #tuneable parameter
        priorities[can_fit][tight_fit] += 10 # Significant bonus

        # Fill percentage priority. Higher fill => more priority
        fill_percentage = item / bins_remain_cap[can_fit]

        # Adjusting the priority to prefer bins that get closer to full.
        priorities[can_fit] += fill_percentage * 5  # Scale fill_percentage for impact
        
        priorities[can_fit] += 1 / (remaining_space_after_fit + 1e-9) # Ensure smaller gaps have higher priority
        
        # Penalize bins with large remaining capacity.
        large_space = remaining_space_after_fit > 0.5 #tuneable parameter
        priorities[can_fit][large_space] -= 2 # Reduce priority if it leaves large space.

    else:
        priorities[:] = -1e9  # Large negative priority if the item cannot fit

    return priorities
```
