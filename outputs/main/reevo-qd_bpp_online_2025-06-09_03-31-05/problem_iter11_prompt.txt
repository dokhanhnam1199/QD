{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize tight fits and near-full bins using domain knowledge (item size, remaining capacity). Dynamically adjust rewards/penalties based on feasibility and remaining space, strongly penalizing infeasible assignments. Add randomization for exploration.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit Decreasing heuristic inspired priority\n    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        remaining_space_after_fit = bins_remain_cap[can_fit] - item\n        \n        # Prioritize tight fits (smaller remaining space)\n        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space, avoid division by zero\n\n        # Boost priority for bins that are almost full, but only if item fits\n        almost_full = (bins_remain_cap[can_fit] < 1.5 * item) & can_fit[can_fit] #Slightly relaxed almost full condition\n        priorities[can_fit][almost_full] *= 5  # Give stronger priority boost if almost full\n        \n        # Slightly encourage use of emptier bins, but not as much as tight fits\n        normalized_remaining_capacity = bins_remain_cap[can_fit] / np.max(bins_remain_cap)\n        priorities[can_fit] += 0.05 * normalized_remaining_capacity  # Add small bonus, decreased weight\n    else:\n      # if none of the bins fit, strongly penalize all bins, proportional to how much it doesnt fit\n      # prioritize bins which are \"closest\" to fitting\n      priorities = -1e9 * np.ones_like(bins_remain_cap)\n      diff = item - bins_remain_cap\n      priorities = -diff # Prioritize by minimizing the difference\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}