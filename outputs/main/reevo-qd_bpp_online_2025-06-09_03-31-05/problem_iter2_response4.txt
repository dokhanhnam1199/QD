```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority
    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        # Inverse of remaining space, but scaled to remaining capacity
        priorities[can_fit] = (bins_remain_cap[can_fit] / (remaining_space_after_fit + 1e-9))

        # Boost priority for bins that are almost full
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] *= 2.0  # Double the priority if almost full

        # Slightly prioritize bins that have been used before (helps with fragmentation)
        non_empty = bins_remain_cap < np.max(bins_remain_cap) # Assuming all bins start with same capacity
        priorities[can_fit & non_empty[can_fit]] *= 1.1 # 10% boost

    else:
        # if none of the bins fit, penalize all bins severely.
        priorities[:] = -1e9

    return priorities
```
