```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired heuristic: Prefer bins that can accommodate the item well
    # (but not too perfectly, to avoid small leftovers).

    # Give a high priority to bins where the item fits and leaves a "reasonable" space
    fit_indices = np.where(bins_remain_cap >= item)[0]
    
    if len(fit_indices) > 0:
        remaining_space = bins_remain_cap[fit_indices] - item
        
        # Reasonable space is between 10% and 50% of bin capacity
        reasonable_fit = np.where((remaining_space >= 0.1 * bins_remain_cap[fit_indices]) & (remaining_space <= 0.5 * bins_remain_cap[fit_indices]))[0]

        # Give those the highest priority
        priorities[fit_indices[reasonable_fit]] += 100

        # Give a decent priority to bins where the item fits but doesn't fit as well
        ok_fit = np.where((remaining_space > 0.5 * bins_remain_cap[fit_indices]) & (remaining_space <= bins_remain_cap[fit_indices]))[0]
        priorities[fit_indices[ok_fit]] += 50
        
        # Add some priority when the item can fit (even with low space)
        priorities[fit_indices] += 10
        

    # Penalize bins where the item doesn't fit at all, if only slightly. Avoid these first.
    no_fit_indices = np.where(bins_remain_cap < item)[0]
    priorities[no_fit_indices] -= 1 
    
    return priorities
```
