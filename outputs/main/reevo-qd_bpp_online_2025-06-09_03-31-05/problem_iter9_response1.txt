```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize tight fits and nearly full bins, penalize infeasibility

    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Tight Fit Reward (Inverse of remaining space, scaled by item size)
        priorities[can_fit] = item / (remaining_space_after_fit + 1e-9) 
        
        # Nearly Full Bin Bonus
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] *= 1.5  # Increase priority if almost full

        # Moderate-sized item prefers more empty bins
        if 0.25 < item < 0.75:
            relatively_empty = bins_remain_cap[can_fit] > 1.5 * item
            priorities[can_fit][relatively_empty] *= 0.75 # Slightly de-prioritize relatively empty bins

        # Randomization (exploration)
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1
        
    else:
        # Severe penalty for bins that cannot fit the item
        priorities[:] = -1e9  

    return priorities
```
