```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Basic score based on remaining capacity after placing the item. Higher remaining capacity is preferred.
            remaining_cap = cap - item
            priorities[i] = remaining_cap

            # Bonus for bins that are relatively empty to encourage fullness (avoid fragments)
            priorities[i] += 0.5 * (1 - (remaining_cap / cap)) #Scaled between 0 to 0.5

            # Slight penalty for bins which is over 90% to become full
            if remaining_cap <= cap*0.1 and remaining_cap > 0:
                priorities[i] -=0.2
            elif remaining_cap == 0:
                priorities[i] +=0.1 # Small boost for full bin.
            else:
                pass
        else:
            priorities[i] = -np.inf  # Not feasible

    return priorities
```
