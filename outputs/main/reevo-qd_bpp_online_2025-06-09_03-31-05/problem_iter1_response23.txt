```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing-like heuristic: Prefer bins that can accommodate the item with minimal wasted space
    #Give bins a high priority if they can perfectly fit the item
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000 # Very high priority for perfect fit

    #Give bins higher priority if they can accommodate the item
    can_accommodate = bins_remain_cap >= item
    
    remaining_space = bins_remain_cap - item
    
    #Prioritize bins with the smallest remaining space after packing the item, but only if they can accommodate it
    priorities[can_accommodate] = 100 / (remaining_space[can_accommodate] + 0.0001) # Add small number to avoid division by zero. higher remaining space -> smaller priority
   
    #Negative priority if cannot accommodate
    priorities[~can_accommodate] = -1000  # Very low priority

    #Try to balance bin usage: Prioritize bins that are more empty
    priorities += bins_remain_cap / np.sum(bins_remain_cap) *10

    return priorities
```
