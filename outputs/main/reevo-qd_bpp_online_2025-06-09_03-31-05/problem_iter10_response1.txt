```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Boost priority for bins that are almost full
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] *= 2

        # Further boost for very tight fits, prioritize even more
        very_tight = (bins_remain_cap[can_fit] - item) < 0.1
        priorities[can_fit][very_tight] *= 5

        # Slight bonus for bins that are not too empty after placing the item
        not_too_empty = remaining_space_after_fit > 0.2 * np.max(bins_remain_cap)
        priorities[can_fit][not_too_empty] *= 1.1

        # Prioritize bins that are already somewhat full
        already_full = bins_remain_cap[can_fit] < 0.75 * np.max(bins_remain_cap)
        priorities[can_fit][already_full] *= 1.2 # Give a slight bonus to those already somewhat full
        
        # Penalize bins that are much larger than the item size, leading to fragmentation
        fragmentation_risk = bins_remain_cap[can_fit] > 3 * item
        priorities[can_fit][fragmentation_risk] *= 0.8 # Reduce priority of potentially fragmenting bins
    else:
        priorities[:] = -1e9

    return priorities
```
