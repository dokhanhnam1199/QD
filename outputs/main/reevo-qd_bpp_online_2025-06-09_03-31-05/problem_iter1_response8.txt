```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining capacity as a priority: prefer bins with smaller remaining capacity after placing item
    remaining_after_fit = bins_remain_cap - item
    priorities[feasible_bins] = bins_remain_cap[feasible_bins] # Use original capacities, not diff

    # 3. Bins that can fit perfectly are given a huge priority boost
    perfect_fit = np.abs(remaining_after_fit) < 1e-6  # tolerance for floating point errors.
    priorities[perfect_fit] = np.inf

    # 4. Consider bin utilization ratio
    utilization_ratio = item / bins_remain_cap
    utilization_ratio[~feasible_bins] = 0  #Avoid errors in non-feasible bins

    priorities = priorities + utilization_ratio # Add to the capacity priority

    # 5. Avoid putting small items in near full bins
    near_full = bins_remain_cap < 2*item #arbitrary threshold, consider it almost full if there isnt enough space for another item of the same size
    priorities[near_full] = priorities[near_full]/2

    # Return final priorities
    return priorities
```
