```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Heavily penalize bins where item doesn't fit
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Very low priority if it doesn't fit

    # Prioritize bins where the item fits
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Inverse of remaining space: smaller remaining space -> higher priority
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)

        # Boost priority for bins that are almost full after adding the item
        almost_full = (remaining_space_after_fit < 0.1)  # Tolerance 0.1
        priorities[can_fit][almost_full] *= 5  # Significantly boost if almost full

        # Moderate boost for bins that were already almost full before adding item
        pre_almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][pre_almost_full] *= 1.5 # Give some preference to partially filled bins

        # Small penalty for bins with a lot of space left
        large_space = (remaining_space_after_fit > 0.5) # More than half the bin is empty
        priorities[can_fit][large_space] *= 0.8 # Reduce priority slightly if too much space is left
    
    # If no bins can fit, slightly prefer bins with more space. This helps when opening new bins is necessary in later iterations.
    if not np.any(can_fit):
        priorities = bins_remain_cap / np.max(bins_remain_cap) * 0.1 - 1e9 # Prefer bins that used to have capacity

    return priorities
```
