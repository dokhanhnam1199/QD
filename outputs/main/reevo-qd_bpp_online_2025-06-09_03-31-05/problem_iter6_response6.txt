```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Inspired by First-Fit Decreasing and Best-Fit heuristics
    # Prefer bins where item fits with minimal wasted space.
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Primary priority: Minimize remaining space after placing the item.
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Bonus for tight fits (reduces fragmentation)
        tight_fit = (remaining_space_after_fit / item) <= 0.1 #remaining space is less than 10% of item size.
        priorities[can_fit][tight_fit] *= (4 + item) # Significantly boost priority

        # Penalize bins that are significantly larger than the item to avoid scattering items.
        large_gap = (bins_remain_cap[can_fit] > 2.5 * item)
        priorities[can_fit][large_gap] *= 0.4 # Reduce priority by significant amount.

        # Moderate boost for almost full bins
        almost_full = (bins_remain_cap[can_fit] < 1.7 * item)
        priorities[can_fit][almost_full] *= 1.6 # boost priority by a smaller amount

    else:
        # If no bin fits, apply a strong penalty to discourage placement.
        priorities[:] = -1e9  # High negative value

    return priorities
```
