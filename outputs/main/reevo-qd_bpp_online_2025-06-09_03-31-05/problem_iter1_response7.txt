```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing inspired: Prioritize bins with smallest remaining capacity that *can* fit the item.
            priorities[i] = 1.0 / (cap + 1e-9)  # Avoid division by zero. Small capacity = High Priority
            
            # Refinement: Consider item size relative to capacity
            priorities[i] *= (item / cap) # Favor bins where item fills a larger proportion. Might help consolidation.
            
        else:
            # Cannot fit. Assign a very low priority.
            priorities[i] = -1e9  # Very low priority, essentially excluding it.

    return priorities
```
