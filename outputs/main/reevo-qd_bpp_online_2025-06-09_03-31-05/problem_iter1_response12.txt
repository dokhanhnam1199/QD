```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate wasted space if the item is placed in the bin
            wasted_space = cap - item

            # Prioritize bins with less wasted space
            priorities[i] = 1 / (wasted_space + 0.00001)  # Adding a small constant to avoid division by zero

            # Boost priority for bins where the item fills a large portion
            # This can prevent creating too many bins with small items
            priorities[i] += (item / cap) * 2  # Weighs filling percentage higher

            # Prioritize bins close to item size (avoid tiny items in near-full bins, avoid filling tiny free bin)
            priorities[i] += np.exp(-abs(cap - 2*item)/ (item + 0.00001))

        else:
            priorities[i] = -1  # Assign a negative priority for bins that cannot fit the item

    return priorities
```
