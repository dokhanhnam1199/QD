```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize tight fits, boost near-full bins, and penalize infeasible placements.
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tighter fits (smaller remaining space)
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)

        # Boost priority for bins that are almost full.  Tuning parameter 'item' is important.
        almost_full = (bins_remain_cap[can_fit] <= 1.5 * item) # A bit more aggressive than v1
        priorities[can_fit][almost_full] *= 3 # Increased boost

        # Slightly prefer bins with larger remaining space relative to the item size (less fragmentation)
        relative_remaining_space = remaining_space_after_fit / item
        priorities[can_fit] += 0.5 * relative_remaining_space # Add a small bonus, preventing overfilling
    else:
        # Penalize infeasible placements heavily
        priorities[:] = -1e9

    return priorities
```
