```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins that can accommodate the item. Give low priority to bins that can't.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Extremely low priority if item doesn't fit
    
    # Heuristic 2: Among bins that can fit the item, prioritize bins with less remaining capacity *after* placing the item. 
    # This encourages filling bins as much as possible.

    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] = -remaining_after_fit #The smaller after fit, the better.
    
    #Heuristic 3: if remaining after fit close to zero, make them even more prioritized
    close_to_zero = np.abs(remaining_after_fit) < 0.1
    priorities[can_fit][close_to_zero] += 10  #Boost priority if remaining very low
    

    # Heuristic 4: if item is large, prioritize partially empty bins less to avoid creating many nearly full bins
    if item > 0.5:  # If the item is large (say, > half the bin capacity):
      emptyish = bins_remain_cap > 0.9
      priorities[emptyish] -= 2  # Discourage putting large items in near-empty bins
    
    return priorities
```
