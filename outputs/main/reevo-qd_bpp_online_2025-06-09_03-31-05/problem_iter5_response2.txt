```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        # Strongly penalize if item doesn't fit in any bin
        priorities[:] = -1e9
        return priorities

    # Calculate remaining space if item were placed in the bin
    remaining_space = bins_remain_cap - item

    # Prioritize bins where the item fits
    priorities[can_fit] = 1.0

    # Prioritize tight fits (minimize remaining space)
    priorities[can_fit] /= (remaining_space[can_fit] + 1e-9)

    # Bonus for near-fullness: Prefer bins that are almost full after placing the item
    almost_full = (remaining_space >= 0) & (remaining_space <= 0.1)  # Define 'almost full' as <= 0.1
    priorities[almost_full] *= 5 # Increase priority significantly if almost full

    # Moderate penalty for bins with large remaining capacity
    large_capacity = (remaining_space > 0.5) & can_fit #if remaining capacity is larger than 0.5

    priorities[large_capacity] *= 0.5  # Reduce priority if large remaining capacity


    return priorities
```
