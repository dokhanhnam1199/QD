```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority to bins that can fit the item with minimal waste
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-9)  # Avoid division by zero

    # Negative priority to bins that can't fit the item at all
    priorities[bins_remain_cap < item] = -1e9

    # Prioritize bins that are already relatively full (but can fit item)
    priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap + 1e-9)

    return priorities
```
