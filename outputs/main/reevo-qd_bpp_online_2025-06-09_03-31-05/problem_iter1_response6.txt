```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very High priority if the item fits perfectly (or nearly perfectly)
    perfect_fit_threshold = 0.01  # Allow a small tolerance
    perfect_fit = np.abs(bins_remain_cap - item) <= perfect_fit_threshold
    priorities[perfect_fit] = 1000

    # High priority for bins where the item fits with minimal remaining space
    fits = bins_remain_cap >= item
    if np.any(fits):  # Only consider fitting bins
        remaining_space = bins_remain_cap[fits] - item
        min_remaining = np.min(remaining_space)
        priorities[fits] = 100 / (remaining_space + 0.001)  # Prioritize smaller remaining space. Add small constant to avoid division by zero

    # Give small negative priority to bins that cannot fit the item.
    no_fit = bins_remain_cap < item
    priorities[no_fit] = -10  # discourage filling almost full bins

    return priorities
```
