```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Heuristic 2: Prefer bins with smaller remaining capacity (but can fit)
    # to leave larger bins for potentially larger future items.  This is a "best fit" tendency
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += np.exp(-remaining_after_fit) # Higher priority for smaller remainders

    # Heuristic 3: Penalize bins that are almost full after adding the item
    almost_full = (bins_remain_cap - item) < 0.1
    priorities[almost_full] -= 0.5  # Slight penalty to avoid very small remainders

    # Heuristic 4: Large empty bins should be somewhat preserved for bigger future items.
    # Add a scaled remaining cap penalty if it can fit
    priorities[can_fit] += bins_remain_cap[can_fit] * 0.01

    return priorities
```
