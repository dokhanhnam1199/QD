```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tighter fits
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  

        # Encourage filling bins close to full, scale the item by remaining cap
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] *= (item / bins_remain_cap[can_fit][almost_full]) * 2  # Scale up priority

        # Further boost bins close to completely full
        very_full = (remaining_space_after_fit < 0.1)
        priorities[can_fit][very_full] *= 5 # Increase priority even more if nearly full
    else:
        # Strongly penalize infeasible bins.
        priorities[:] = -1e9

    return priorities
```
