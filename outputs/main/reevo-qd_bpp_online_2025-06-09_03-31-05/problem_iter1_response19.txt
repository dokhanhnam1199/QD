```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # Remaining space ratio, smaller the better (higher priority)
    priorities[fit_mask] = 1 - priorities[fit_mask] #Invert so that lower remaining space has higher priority

    # Assign a very low (negative) priority to bins that cannot fit the item.
    priorities[~fit_mask] = -1e9 # Assign a very low priority

    # Boost the priority of almost full bins if the item fits to try to close the bin.
    almost_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)
    priorities[almost_full_mask] += 0.5 # Moderate increase

    # Adding some randomness can help escape local optima
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
