```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize bins with smallest remaining space
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9) 
        
        # Further boost priority for bins that are almost full (more aggressive filling)
        almost_full = (bins_remain_cap[can_fit] < 1.5 * item) #tuned parameter
        priorities[can_fit][almost_full] *= 3  # Significantly higher priority

        #Slightly penalize bins with very large remaining capacity after the item is added.
        large_remaining = (remaining_space_after_fit > 0.5 * np.max(bins_remain_cap))
        priorities[can_fit][large_remaining] /= 1.5

    else:
        # Penalize all bins if no bin can fit the item
        priorities[:] = -1e9

    return priorities
```
