```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Inspired by First-Fit Decreasing, but adapted for online setting.
    # Prioritizes bins where item fits with minimal wasted space.
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Give higher priority to bins with less remaining space after adding the item
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)
        
        # Boost priority for bins that are almost full *after* placing the item
        almost_full = (remaining_space_after_fit < 0.1 * np.max(bins_remain_cap)) # Check if remaining space is less than 10% of max capacity. Use a relative threshold
        priorities[can_fit][almost_full] *= 3  # Significantly boost priority if almost full

        # Slightly Boost priority for bins with larger original capacity, but still fits. Tries to reduce fragmentation.
        # This encourages using larger bins if they fit, even if the remaining space isn't minimal.
        priorities[can_fit] += bins_remain_cap[can_fit] / np.max(bins_remain_cap) * 0.5
    else:
        # If item doesn't fit, penalize all bins *less severely* than v1.
        # Instead of -inf, use a large negative number that's still possible to overcome 
        # if a better fitting item comes along later (simulated annealing-like behavior).
        priorities[:] = -1.0 

    return priorities
```
