```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize tight fits and nearly full bins while strongly penalizing infeasibility.
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Reward tight fits based on item size.  Larger items filling bins tightly get higher priority
        tight_fit_reward = item / (remaining_space_after_fit + 1e-9) 
        priorities[can_fit] = tight_fit_reward

        # Boost priority for bins that are almost full, scaled by item size and remaining cap
        almost_full = (bins_remain_cap[can_fit] < 2 * item)
        priorities[can_fit][almost_full] += item * (bins_remain_cap[can_fit][almost_full] / (item + 1e-9))

        # Introduce slight randomization
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1
    else:
      # Strongly penalize infeasibility
      priorities[:] = -1e9 

    return priorities
```
