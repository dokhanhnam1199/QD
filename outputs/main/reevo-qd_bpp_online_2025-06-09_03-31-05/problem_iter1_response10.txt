```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: prioritize bins that can actually fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1.0

    # 2. Remaining Capacity: prioritize bins with less remaining capacity
    #    (to avoid fragmentation)
    remaining_capacity_priority = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    remaining_capacity_priority[~feasible_bins] = 0.0 # Don't prioritize infeasible bins

    priorities += remaining_capacity_priority

    # 3. Item Size to Bin Size Ratio: Prioritize bins where item_size/bin_size is close to 1 (fit well)
    item_ratio = item / bins_remain_cap
    item_ratio[~feasible_bins] = 0.0 # ignore the ratio for infeasible bins

    priorities += item_ratio

    # 4. Bonus if perfect fit.
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] += 2

    return priorities
```
