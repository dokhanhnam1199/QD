```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing inspired: prioritize bins where item fits best
            priority = cap - item  # Smaller difference is higher priority (fits better)

            # If remaining cap is close to item size, prioritize it even more
            if 0 < cap - item <= 0.1 * item : #tune 0.1 here to impact packing density
                priority += item #boost close fit.
            elif 0 < cap- item <=0.2*item:
                priority +=0.5*item

            #Bonus to partially filled containers, might need tuning or removal
            if cap < 0.9:
                 priority += (0.9 - cap) #prioritize bins less than 90% filled
            
            
            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority

    return priorities
```
