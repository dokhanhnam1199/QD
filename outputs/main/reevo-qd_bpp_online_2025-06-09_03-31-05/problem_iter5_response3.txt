```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Tight-fit reward: Higher priority for smaller remaining space
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)

        # Near-full bonus: Significant boost if the bin is close to full after adding the item
        near_full_threshold = 0.1  # e.g., within 10% of bin capacity
        near_full = remaining_space_after_fit <= near_full_threshold
        priorities[can_fit][near_full] *= 5  # Substantially increase priority if near full
        
        # Moderate remaining space bonus: Increase priority if not too much wasted space.
        moderate_waste = (remaining_space_after_fit > near_full_threshold) & (remaining_space_after_fit < item)
        priorities[can_fit][moderate_waste] *= 1.5

    else:
        # Strong infeasibility penalty: Extremely low priority if the item doesn't fit
        priorities[:] = -1e9  

    return priorities
```
