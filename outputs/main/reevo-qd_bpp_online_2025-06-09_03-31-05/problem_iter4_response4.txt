```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize bins with smaller remaining space. Add a small constant to avoid division by zero.
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)
        
        # Boost priority for bins that are almost full (more significant boost).
        almost_full = (bins_remain_cap[can_fit] <= 1.1 * item)  #More strict almost full condition
        priorities[can_fit][almost_full] *= 5 # Increased boost
        
        # Further prioritize bins with remaining capacity closest to item size
        best_fit = np.argmin(remaining_space_after_fit)
        priorities[can_fit][best_fit] *= 2 # give the best fit an extra boost

        #Slightly prioritize bins that are already somewhat full (but not almost full)
        partially_full = (bins_remain_cap[can_fit] > 1.1 * item) & (bins_remain_cap[can_fit] < 3 * item)
        priorities[can_fit][partially_full] *= 1.2 #Slightly increase priority

    else:
      # if none of the bins fit, penalize all bins severely
      priorities[:] = -1e9 

    return priorities
```
