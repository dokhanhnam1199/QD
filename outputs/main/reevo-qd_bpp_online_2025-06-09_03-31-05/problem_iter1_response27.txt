```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority to bins that can fit the item snugly
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices] # Remaining space ratio. The smaller the ratio, the better. We inverse this
    priorities[fit_indices] = 1 - priorities[fit_indices] # Invert the ratio

    # Assign a very low priority to bins that can't fit the item (to avoid them if possible)
    priorities[~fit_indices] = -1e9  # Very small number

    # Slightly prefer bins that are already somewhat full.
    # Add a small bonus based on the current fullness of the bin.
    fullness = 1 - (bins_remain_cap / bins_remain_cap.max()) # Normalized fullness ratio

    priorities += 0.1 * fullness

    return priorities
```
