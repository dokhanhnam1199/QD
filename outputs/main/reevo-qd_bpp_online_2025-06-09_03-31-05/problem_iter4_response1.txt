```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority
    # Prefer bins where item fits with least remaining space.  This tries to fill bins completely
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        #Prioritize smaller remaining space
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)  # Inverse of remaining space

        # Boost priority for bins that are almost full (but not too full)
        almost_full = (bins_remain_cap[can_fit] <= 2 * item) & (bins_remain_cap[can_fit] >= item)
        priorities[can_fit][almost_full] *= 2  # Double the priority if almost full, but item fits reasonably well.

        #Slightly penalize bins that will have too much space remaining after adding the item.  Avoid fragmenting bins too much.
        large_remaining = (remaining_space_after_fit > 0.5 * np.max(bins_remain_cap))
        priorities[can_fit][large_remaining] *= 0.75  # reduce priority
        
    else:
      # if none of the bins fit, heavily penalize all bins, but give slightly higher priority to bins with largest remaining capacity
      priorities[:] = -1e9  #Very low priority
      priorities[np.argmax(bins_remain_cap)] = -1e8 #Slightly better than the rest, if no bin can fit

    return priorities
```
