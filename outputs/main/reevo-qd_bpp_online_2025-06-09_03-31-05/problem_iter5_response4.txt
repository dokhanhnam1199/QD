```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tight fits (minimize wasted space)
        priorities[can_fit] = 1.0 / (remaining_space_after_fit + 1e-9)
        
        # Strong preference for bins that become nearly full after adding the item
        nearly_full_threshold = 0.1  # Define "nearly full" as remaining capacity below 10% of bin size
        bin_size = bins_remain_cap[can_fit] + item  # Infer original bin size

        nearly_full = (remaining_space_after_fit / bin_size) < nearly_full_threshold
        priorities[can_fit][nearly_full] *= 5  # Significantly boost priority

        # Moderate boost for using already somewhat filled bins
        already_filled = bins_remain_cap[can_fit] < bin_size * 0.75 # filled more than 25%
        priorities[can_fit][already_filled] *= 1.5

    else:
        # Severe penalty if the item doesn't fit in the bin
        priorities[:] = -1e9  # Huge negative priority

    return priorities
```
