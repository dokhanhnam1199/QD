```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible placements get strongly negative priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9
    
    # Feasible placements: prioritize based on tightness of fit and how full the bin will be
    feasible = ~infeasible
    remaining_space = bins_remain_cap[feasible] - item
    
    # Prioritize smaller remaining space.  Add a small constant to avoid division by zero.
    priorities[feasible] = 1.0 / (remaining_space + 1e-9)
    
    # Give a bonus to bins that will be nearly full after placement
    nearly_full_threshold = 0.1  # Define "nearly full" as within 10% of capacity
    post_fill_levels = 1.0 - (remaining_space / bins_remain_cap[feasible])
    nearly_full = post_fill_levels > (1 - nearly_full_threshold)
    priorities[feasible][nearly_full] *= 2  # Increase priority if nearly full
    
    # Scale priority based on remaining capacity.  Preferentially fill bins that are already well filled.
    initial_fill_levels = (bins_remain_cap[feasible] + item - remaining_space) / (bins_remain_cap[feasible] + item)  # fraction of bin filled prior to placing new item
    priorities[feasible] *= (1 + initial_fill_levels)  # Increase priority for already filled bins

    return priorities
```
