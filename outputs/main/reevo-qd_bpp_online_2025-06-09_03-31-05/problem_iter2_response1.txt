```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check
    can_fit = bins_remain_cap >= item
    
    if not np.any(can_fit):
        # If item doesn't fit in any bin, heavily penalize all bins.
        priorities[:] = -1e9
        return priorities
    
    # Remaining space after placing the item (only for feasible bins)
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf  # Assign infinite remaining space to infeasible bins so they are not considered during minimization

    # Prioritize bins with smaller remaining space
    priorities = 1.0 / (remaining_space + 1e-9)

    # Bin utilization heuristic: Prefer bins that are already relatively full
    bin_utilization = (1 - bins_remain_cap / bins_remain_cap.max()) # Normalize bin remain cap
    priorities += bin_utilization # Add bin utilization score to priorities

    # Bonus for near-full bins
    near_full_threshold = 0.2  # Define "near full" as having <= 20% capacity remaining
    near_full_bonus = 2.0  # Increase priority by this factor
    near_full = bins_remain_cap <= (bins_remain_cap.max() * near_full_threshold)
    priorities[near_full] *= near_full_bonus
    
    return priorities
```
