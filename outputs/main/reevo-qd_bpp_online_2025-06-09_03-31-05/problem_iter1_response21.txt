```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Higher priority for bins that can fit the item
            space_left = cap - item
            priorities[i] = (1 / (space_left + 0.0001))  # Avoid division by zero
            # Give higher priority to bins that are closer to being full, but only when space is availabe
            priorities[i] += 1 / (cap + 0.0001)
            
            # Add a small bonus for bins with capacity closer to the item size to avoid creating very small fragments.
            priorities[i] += np.exp(-abs(cap - item) / (item + 0.0001))
        else:
            # Negative priority to avoid bins that cannot fit the item.
            priorities[i] = -1000

    return priorities
```
