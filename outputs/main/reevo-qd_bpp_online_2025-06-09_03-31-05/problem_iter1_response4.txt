```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Prioritize bins that can fit the item
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1 

    # Further prioritize bins where the remaining capacity after adding the item
    # is close to zero (but still non-negative)
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    
    #Give better priority to close fits if remaining capacity is larger than some percentage.
    close_fit_bonus = np.exp(-remaining_after_fit * 10)  # Exponential decay
    priorities[fit_indices] += close_fit_bonus
    

    # Penalize bins that cannot fit the item severely (set to -inf) to strongly avoid
    # assigning to them when other bins can fit.  A slight alternative would be 0, but -inf ensures no possibility
    priorities[bins_remain_cap < item] = -np.inf
    
    # Introduce a tie-breaking mechanism using a small random number
    # to prevent pathological behavior when multiple bins have the same priority
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
