```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heavily penalize infeasible placements
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -1e9

    # Prioritize tight fits
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_space + 1e-9)  # Inverse of remaining space

        # Reward near-full bins more
        near_full = (bins_remain_cap[can_fit] - item) <= 0.1  # Adjust threshold as needed
        priorities[can_fit][near_full] += 10  # Significantly boost near-full bins

        # Slightly favor bins with more space (exploration), but less than tight fits reward
        remaining_space_ratio = (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit]
        priorities[can_fit] -= 0.1 * remaining_space_ratio # Subtract a little if have a lot of space
    
    # If no bin can fit, heavily penalize all to allow a new bin to be created (handled in outer loop, here mainly for correctness)
    # This is implicitly handled by setting -1e9 above for infeasible bins

    return priorities
```
