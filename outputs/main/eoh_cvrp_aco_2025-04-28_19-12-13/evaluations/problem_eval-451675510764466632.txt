import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples random routes, evaluates their feasibility with respect to capacity constraints, and assigns higher scores to edges that appear frequently in feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = np.random.permutation(range(1, n))
        
        # Build routes based on the permutation
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route at the depot
                current_load = demands[customer]

        current_route.append(0) # Close the final route
        routes.append(current_route)
            
        # Mark edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += 1
                heuristics_matrix[route[i+1], route[i]] += 1

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
