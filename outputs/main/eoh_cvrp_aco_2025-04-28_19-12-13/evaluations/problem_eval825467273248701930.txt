import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility and cost with respect to capacity constraints, and uses the frequency of each edge appearing in feasible routes to estimate its desirability.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000  # Number of random routes to sample

    for _ in range(num_samples):
        # Generate a random permutation of customer nodes (excluding depot)
        route = list(range(1, n))
        random.shuffle(route)

        # Split the route into feasible sub-routes based on capacity
        sub_routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)  # Return to depot
                sub_routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]

        current_route.append(0)  # Return to depot
        sub_routes.append(current_route)

        # Update the heuristics matrix based on the edges in the feasible routes
        for sub_route in sub_routes:
            for i in range(len(sub_route) - 1):
                node1 = sub_route[i]
                node2 = sub_route[i + 1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Since it's undirected

    return heuristics_matrix
