import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs routes iteratively by inserting customers based on a combination of distance and demand, prioritizing nodes that minimize the ratio of route length increase to demand served while respecting capacity constraints.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 500

    for _ in range(num_iterations):
        unvisited = set(range(1, n))
        routes = []

        while unvisited:
            current_route = [0]
            current_load = 0
            
            while unvisited:
                best_customer = None
                best_insertion_score = float('inf')

                for customer in unvisited:
                    if current_load + demands[customer] <= capacity:
                        # Calculate insertion score: (extra distance added) / (demand served)
                        insertion_cost = distance_matrix[current_route[-1]][customer] + distance_matrix[customer][0] - distance_matrix[current_route[-1]][0]
                        insertion_score = insertion_cost / demands[customer] if demands[customer] > 0 else float('inf')

                        if insertion_score < best_insertion_score:
                            best_insertion_score = insertion_score
                            best_customer = customer

                if best_customer is None:
                    break  # No feasible customer can be added

                current_route.append(best_customer)
                current_load += demands[best_customer]
                unvisited.remove(best_customer)
            
            current_route.append(0)
            routes.append(current_route)
        
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
    
    heuristics_matrix /= num_iterations
    return heuristics_matrix
