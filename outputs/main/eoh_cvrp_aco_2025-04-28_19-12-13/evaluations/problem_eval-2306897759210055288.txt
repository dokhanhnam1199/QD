import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm builds routes iteratively, selecting the next node based on a weighted combination of distance, demand, and pheromone values, and updates pheromone levels on traversed edges based on route length.}
    """
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones((n, n))
    heuristic_matrix = np.zeros((n, n))

    num_iterations = 100
    alpha = 1  # Influence of pheromone
    beta = 2  # Influence of distance
    rho = 0.1  # Evaporation rate
    Q = 100   # Pheromone deposit factor

    for _ in range(num_iterations):
        current_node = 0
        route = [0]
        remaining_nodes = list(range(1, n))
        vehicle_load = 0
        current_route = []
        route_distance = 0

        while remaining_nodes:
            # Calculate probabilities for each remaining node
            probabilities = np.zeros(len(remaining_nodes))
            for i, node_idx in enumerate(remaining_nodes):
                demand = demands[node_idx]
                if vehicle_load + demand <= capacity:
                    probabilities[i] = (pheromone_matrix[current_node, node_idx]**alpha) * \
                                       ((1 / (distance_matrix[current_node, node_idx] + 1e-9))**beta)
                else:
                    probabilities[i] = 0

            # Normalize probabilities
            if np.sum(probabilities) > 0:
                probabilities = probabilities / np.sum(probabilities)
                # Choose next node based on probabilities
                next_node_idx = np.random.choice(len(remaining_nodes), p=probabilities)
                next_node = remaining_nodes[next_node_idx]
            else:
                #If no possible next node, go back to depot
                next_node = 0
                current_node = 0
                vehicle_load = 0
                current_route = []
                continue

            # Update route information
            route.append(next_node)
            current_route.append(next_node)
            route_distance += distance_matrix[current_node, next_node]
            vehicle_load += demands[next_node]

            # Remove node from remaining nodes
            remaining_nodes.remove(next_node)
            current_node = next_node
        
        #Return to depot
        route.append(0)
        route_distance += distance_matrix[current_node, 0]
        
        # Update pheromone levels on the route
        for i in range(len(route) - 1):
            u = route[i]
            v = route[i+1]
            pheromone_matrix[u, v] += Q / route_distance
            pheromone_matrix[v, u] += Q / route_distance

        # Evaporate pheromones
        pheromone_matrix = (1 - rho) * pheromone_matrix

    heuristic_matrix = pheromone_matrix
    return heuristics_matrix
