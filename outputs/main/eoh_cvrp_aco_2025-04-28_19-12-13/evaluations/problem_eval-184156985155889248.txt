import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes satisfying capacity constraints, 
    then calculates the frequency of each edge appearing in feasible routes to build a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Build routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route from depot
                current_demand = demands[customer]

        current_route.append(0) # Close the last route.
        routes.append(current_route) # Append the last route
        
        # Update heuristics_matrix based on edges in the feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Symmetric

    # Normalize the heuristics matrix (optional, but can be beneficial)
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
