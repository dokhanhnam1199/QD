import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs routes using a greedy approach guided by a pheromone matrix, iteratively improving the pheromone trails based on route length and feasibility.}
    """
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones((n, n))
    alpha = 1
    beta = 2
    rho = 0.5
    Q = 100

    num_iterations = 100

    for iteration in range(num_iterations):
        all_routes = []
        for start_node in range(1, n):  # Start from each customer node
            current_node = 0
            route = [0]
            remaining_nodes = list(range(1, n))
            vehicle_load = 0
            
            while remaining_nodes:
                probabilities = np.zeros(len(remaining_nodes))
                for i, next_node in enumerate(remaining_nodes):
                    if vehicle_load + demands[next_node] <= capacity:
                        probabilities[i] = (pheromone_matrix[current_node, next_node]**alpha) / (distance_matrix[current_node, next_node]**beta)
                    else:
                        probabilities[i] = 0

                if np.sum(probabilities) == 0:
                    route.append(0)
                    current_node = 0
                    vehicle_load = 0
                    continue

                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(remaining_nodes, p=probabilities)
                route.append(next_node)
                vehicle_load += demands[next_node]
                current_node = next_node
                remaining_nodes.remove(next_node)

            route.append(0)
            all_routes.append(route)

        # Update pheromone matrix
        delta_pheromone = np.zeros((n, n))
        for route in all_routes:
            route_distance = 0
            for i in range(len(route) - 1):
                route_distance += distance_matrix[route[i], route[i+1]]
            
            for i in range(len(route) - 1):
                delta_pheromone[route[i], route[i+1]] += Q / route_distance
                delta_pheromone[route[i+1], route[i]] += Q / route_distance
        
        pheromone_matrix = (1 - rho) * pheromone_matrix + delta_pheromone
        
    return heuristics_matrix
