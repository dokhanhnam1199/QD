import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses stochastic sampling to explore the solution space by iteratively constructing routes and updating edge frequencies based on route feasibility and cost, thereby building a heuristics matrix that reflects the likelihood of each edge being part of a good CVRP solution.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 100  # Number of sample routes to generate
    
    for _ in range(num_samples):
        # Initialize route and remaining nodes
        current_route = [0]  # Start at depot
        remaining_nodes = set(range(1, n))
        current_load = 0
        routes = []
        
        while remaining_nodes:
            # Find the nearest feasible node
            nearest_node = None
            min_distance = float('inf')

            possible_nodes = []
            for node in remaining_nodes:
                if current_load + demands[node] <= capacity:
                    possible_nodes.append(node)
            
            if not possible_nodes:
                current_route.append(0) # Return to depot
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                continue

            #Choose randomly among feasible nodes
            nearest_node = random.choice(possible_nodes) 

            # Update current route, remaining nodes, and current load
            current_route.append(nearest_node)
            remaining_nodes.remove(nearest_node)
            current_load += demands[nearest_node]
        
        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix based on the route
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Assuming symmetry
    
    #Normalize the heuristics matrix to obtain probabilities
    total_visits = np.sum(heuristics_matrix)
    if total_visits > 0:
        heuristics_matrix = heuristics_matrix / total_visits

    return heuristics_matrix
