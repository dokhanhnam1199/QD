import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively refines routes by probabilistically merging and splitting routes based on edge similarity, guided by the distance matrix and capacity constraints.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 50
    num_routes = 5

    # Initialize routes randomly
    routes = []
    for _ in range(num_routes):
        unvisited = list(range(1, n))
        random.shuffle(unvisited)
        current_route = [0]
        current_load = 0
        for node in unvisited:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
        current_route.append(0)
        routes.append(current_route)

    for _ in range(num_iterations):
        # Merge routes based on edge similarity
        if len(routes) > 1:
            route1 = random.choice(routes)
            route2 = random.choice(routes)
            if route1 != route2 and len(route1)>2 and len(route2)>2:

                #calculate similarity between the routes by averaging all edges between them
                similarity = 0
                num_edges = 0
                for i in range(len(route1)-1):
                    for j in range(len(route2)-1):
                        similarity += 1/(distance_matrix[route1[i],route1[i+1]] + distance_matrix[route2[j],route2[j+1]]+1e-6) # avoid division by zero
                        num_edges+=1
                
                if num_edges>0:
                  similarity /= num_edges
                
                if random.random() < similarity:
                    # Merge routes
                    new_route = route1[:-1] + route2[1:]
                    total_demand = sum(demands[node] for node in new_route if node != 0)
                    if total_demand <= capacity * (len(new_route)//(n//5)): #crude estimate

                        routes.remove(route1)
                        routes.remove(route2)
                        routes.append(new_route)
        # Split routes probabilistically
        route = random.choice(routes)
        if len(route) > 4:
            split_point = random.randint(1, len(route) - 2)
            if random.random() < 0.3:
                new_route1 = [0] + route[1:split_point] + [0]
                new_route2 = [0] + route[split_point:-1] + [0]

                routes.remove(route)
                routes.append(new_route1)
                routes.append(new_route2)

    # Update heuristics matrix
    for route in routes:
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] += 1
            heuristics_matrix[route[i+1], route[i]] += 1

    # Normalize heuristic matrix
    total_visits = np.sum(heuristics_matrix)
    if total_visits > 0:
        heuristics_matrix = heuristics_matrix / total_visits

    return heuristics_matrix
