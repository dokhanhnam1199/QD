import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs routes by iteratively adding the closest feasible node based on a combination of distance and pheromone-like intensity, updating intensity after each route construction to encourage exploration of promising edges.}
    """
    n = len(demands)
    intensity = np.ones_like(distance_matrix) # Initialize pheromone-like intensity
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 100

    for iteration in range(num_iterations):
        routes = []
        unvisited = set(range(1, n))
        
        while unvisited:
            current_route = [0]
            current_load = 0
            
            while unvisited:
                
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    break
                
                # Select the next node based on distance and intensity
                scores = []
                for node in feasible_nodes:
                    scores.append((intensity[current_route[-1], node] / distance_matrix[current_route[-1], node] if distance_matrix[current_route[-1], node] > 0 else intensity[current_route[-1], node]))
                
                # Normalize scores to probabilities
                probabilities = scores / np.sum(scores) if np.sum(scores) > 0 else np.ones(len(scores)) / len(scores)
                
                next_node = random.choices(feasible_nodes, weights=probabilities, k=1)[0]
                
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
            
            current_route.append(0)
            routes.append(current_route)
        
        # Update intensity based on the iteration's routes
        route_length = sum(distance_matrix[routes[r][i], routes[r][i+1]] for r in range(len(routes)) for i in range(len(routes[r]) - 1))

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                intensity[node1, node2] = (1 - 0.1) * intensity[node1, node2] + 0.1 * (1 / route_length)
                intensity[node2, node1] = (1 - 0.1) * intensity[node2, node1] + 0.1 * (1 / route_length)

        # Update heuristics matrix
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
    
    # Normalize heuristics matrix
    heuristics_matrix /= num_iterations

    return heuristics_matrix
