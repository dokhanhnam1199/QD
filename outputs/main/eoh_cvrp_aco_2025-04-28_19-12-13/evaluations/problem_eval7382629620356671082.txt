import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm simulates an ant colony optimizing pheromone levels on edges based on route cost and feasibility, favoring edges in cheaper, feasible routes.}
    """
    n = len(demands)
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    rho = 0.5  # Evaporation rate
    Q = 100   # Pheromone deposit constant
    num_ants = 50
    num_iterations = 100

    for iteration in range(num_iterations):
        all_routes = []
        all_costs = []

        for ant in range(num_ants):
            unvisited = list(range(1, n))
            current_route = [0]
            current_load = 0
            routes = []

            while unvisited:
                probabilities = []
                for node in unvisited:
                    if current_load + demands[node] <= capacity:
                        pheromone = pheromone_matrix[current_route[-1], node] ** alpha
                        distance = (1 / (distance_matrix[current_route[-1], node] + 1e-9)) ** beta
                        probabilities.append(pheromone * distance)
                    else:
                        probabilities.append(0)

                if sum(probabilities) == 0:
                    current_route.append(0)
                    routes.append(current_route)
                    current_route = [0]
                    current_load = 0
                    continue
                    
                probabilities = np.array(probabilities) / sum(probabilities)
                next_node = np.random.choice(unvisited, p=probabilities)

                if current_load + demands[next_node] <= capacity:
                    current_route.append(next_node)
                    current_load += demands[next_node]
                    unvisited.remove(next_node)
                else:
                    current_route.append(0)
                    routes.append(current_route)
                    current_route = [0]
                    current_load = 0

            current_route.append(0)
            routes.append(current_route)
            all_routes.append(routes)

            cost = 0
            for route in routes:
                for i in range(len(route) - 1):
                    cost += distance_matrix[route[i], route[i+1]]
            all_costs.append(cost)

        # Update pheromones
        for i in range(n):
            for j in range(n):
                pheromone_matrix[i, j] *= (1 - rho)

        for k in range(num_ants):
            routes = all_routes[k]
            cost = all_costs[k]
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    pheromone_matrix[node1, node2] += Q / (cost + 1e-9)
                    pheromone_matrix[node2, node1] += Q / (cost + 1e-9)
    
    return heuristics_matrix
