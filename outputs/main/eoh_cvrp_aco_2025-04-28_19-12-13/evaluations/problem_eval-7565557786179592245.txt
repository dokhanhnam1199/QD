import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge importance by randomly generating feasible routes
    and counting how often each edge appears in those routes, favoring shorter edges and
    routes that respect vehicle capacity limits.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Randomly shuffle customers (excluding the depot)
        customers = list(range(1, n))
        random.shuffle(customers)

        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customers:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_load = demands[customer]

        current_route.append(0)  # Return to depot after last customer
        routes.append(current_route)

        # Update heuristic matrix based on edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1 # Symmetric matrix

    # Normalize the heuristic matrix
    heuristics_matrix = heuristics_matrix / num_samples

    # Incorporate distance information (shorter distances are better)
    heuristics_matrix = heuristics_matrix / (distance_matrix + 1e-6) # Avoid division by zero

    return heuristics_matrix
