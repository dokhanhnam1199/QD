import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses a cluster-first, route-second approach, first clustering nodes based on their proximity to seed nodes and demand, then optimizing routes within each cluster using a nearest neighbor heuristic.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_clusters = int(np.ceil(np.sum(demands) / capacity))
    
    # Cluster Initialization
    cluster_centers = random.sample(range(1, n), min(num_clusters, n - 1))
    clusters = [[] for _ in range(len(cluster_centers))]
    
    # Assign nodes to clusters
    for node in range(1, n):
        closest_cluster = min(range(len(cluster_centers)), 
                              key=lambda i: distance_matrix[node, cluster_centers[i]])
        clusters[closest_cluster].append(node)
    
    # Route Construction within each cluster using Nearest Neighbor
    routes = []
    for cluster in clusters:
        if not cluster:
            continue
        
        current_node = 0
        route = [0]
        unvisited_nodes = set(cluster)
        current_load = 0
        
        while unvisited_nodes:
            nearest_node = None
            min_distance = float('inf')
            
            for neighbor in unvisited_nodes:
                if current_load + demands[neighbor] <= capacity and distance_matrix[current_node, neighbor] < min_distance:
                    nearest_node = neighbor
                    min_distance = distance_matrix[current_node, neighbor]
            
            if nearest_node is None:
                route.append(0)
                routes.append(route)
                current_node = 0
                route = [0]
                current_load = 0
                continue

            route.append(nearest_node)
            current_load += demands[nearest_node]
            current_node = nearest_node
            unvisited_nodes.remove(nearest_node)

        route.append(0)
        routes.append(route)
        
    # Heuristic Matrix Update
    for route in routes:
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] += 1
            heuristics_matrix[route[i+1], route[i]] += 1
            
    #Normalize heuristic matrix
    total_visits = np.sum(heuristics_matrix)
    if total_visits > 0:
      heuristics_matrix = heuristics_matrix / total_visits
            
    return heuristics_matrix
