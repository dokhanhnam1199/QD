import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a large number of random routes, evaluates their feasibility and cost, and uses the frequency with which each edge appears in feasible routes to build a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000
    
    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        
        # Construct routes
        routes = []
        current_route = [0]  # Start at depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_demand = demands[customer]
        
        current_route.append(0)  # Close the last route
        routes.append(current_route)
        
        # Evaluate feasibility (we've already done this during route construction)
        
        # Update heuristics matrix based on edges in feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix
                
    # Normalize heuristics matrix (optional, but can be helpful)
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
