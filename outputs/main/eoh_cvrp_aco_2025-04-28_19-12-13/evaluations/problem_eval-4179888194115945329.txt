import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes respecting capacity constraints,
    evaluates the cost of each route, and then constructs a heuristic matrix
    where each entry reflects the frequency with which the corresponding edge
    appears in the best routes found during the sampling process.}
    """
    n = len(demands)
    num_samples = 1000
    best_routes = []
    best_costs = []

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(np.arange(1, n))
        
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0

        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer] # Start new route
                current_capacity = demands[customer]

        current_route.append(0)
        routes.append(current_route)


        # Calculate the total cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_cost += distance_matrix[route[i], route[i+1]]

        # Keep track of best solutions
        if len(best_costs) < 10 or total_cost < max(best_costs):
            if len(best_costs) == 10:
                max_index = np.argmax(best_costs)
                best_costs.pop(max_index)
                best_routes.pop(max_index)

            best_routes.append(routes)
            best_costs.append(total_cost)
    
    # Build the heuristic matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    for routes in best_routes:
        for route in routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += 1
                heuristics_matrix[route[i+1], route[i]] += 1

    return heuristics_matrix
