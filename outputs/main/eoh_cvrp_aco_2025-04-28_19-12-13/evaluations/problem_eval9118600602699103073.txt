import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs initial routes randomly, then iteratively refines these routes using local search (2-opt, swap, relocate) guided by a score function that combines distance and edge frequency, and updates edge frequencies based on the improved solutions.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 50
    alpha = 0.5 #Weight for distance
    beta = 0.5 #Weight for frequency

    # Initial route construction (Random)
    routes = []
    unvisited = set(range(1, n))
    while unvisited:
        route = [0]
        current_load = 0
        while unvisited:
            possible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
            if not possible_nodes:
                break
            next_node = random.choice(possible_nodes)
            route.append(next_node)
            unvisited.remove(next_node)
            current_load += demands[next_node]
        route.append(0)
        routes.append(route)

    # Iterative Improvement (Local Search - 2-opt within routes, swap, relocate)
    for _ in range(num_iterations):
        for route in routes:
            if len(route) <= 3:
                continue
            
            #2-opt
            for i in range(1, len(route) - 2):
                for k in range(i + 1, len(route) - 1):
                    # 2-opt swap
                    new_route = route[:i] + route[i:k+1][::-1] + route[k+1:]
                    
                    current_cost = 0
                    for j in range(len(route) - 1):
                        current_cost += distance_matrix[route[j], route[j+1]]
                    
                    new_cost = 0
                    for j in range(len(new_route) - 1):
                        new_cost += distance_matrix[new_route[j], new_route[j+1]]

                    if new_cost < current_cost:
                        route[:] = new_route  # Update route in place

            #Swap
            for i in range(1, len(route) - 1):
                for j in range(1, len(route)-1):
                    if i == j:
                        continue
                    new_route = route[:]
                    new_route[i], new_route[j] = new_route[j], new_route[i]

                    current_cost = 0
                    for k in range(len(route) - 1):
                        current_cost += distance_matrix[route[k], route[k+1]]
                    
                    new_cost = 0
                    for k in range(len(new_route) - 1):
                        new_cost += distance_matrix[new_route[k], new_route[k+1]]
                    
                    if new_cost < current_cost:
                        route[:] = new_route

            #Relocate
            for i in range(1, len(route) - 1):
                for j in range(1, len(route)):
                    if i == j:
                        continue
                    new_route = route[:]
                    node_to_relocate = new_route[i]
                    del new_route[i]
                    new_route.insert(j, node_to_relocate)

                    current_cost = 0
                    for k in range(len(route) - 1):
                        current_cost += distance_matrix[route[k], route[k+1]]
                    
                    new_cost = 0
                    for k in range(len(new_route) - 1):
                        new_cost += distance_matrix[new_route[k], new_route[k+1]]
                    
                    if new_cost < current_cost:
                        route[:] = new_route
                        

    # Update heuristics matrix
    for route in routes:
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] += 1
            heuristics_matrix[route[i+1], route[i]] += 1
            
    #Normalize heuristic matrix
    total_visits = np.sum(heuristics_matrix)
    if total_visits > 0:
      heuristics_matrix = heuristics_matrix / total_visits

    return heuristics_matrix
