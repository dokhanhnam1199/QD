import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm initializes a pheromone matrix, iteratively constructs solutions using an Ant Colony Optimization approach with route construction based on pheromone levels and distance, updates pheromones based on solution quality, and returns the pheromone matrix as a heuristic.}
    """
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones((n, n))
    alpha = 1
    beta = 2
    rho = 0.5
    Q = 100
    num_ants = 20
    num_iterations = 100

    def construct_solution(pheromone_matrix, demands, capacity):
        routes = []
        remaining_nodes = set(range(1, n))
        while remaining_nodes:
            route = [0]
            current_node = 0
            current_capacity = capacity
            while True:
                probabilities = []
                eligible_nodes = []
                for node in remaining_nodes:
                    if demands[node] <= current_capacity:
                        eligible_nodes.append(node)
                        probabilities.append((pheromone_matrix[current_node, node]**alpha) / (distance_matrix[current_node, node]**beta))

                if not eligible_nodes:
                    break

                probabilities = np.array(probabilities)
                probabilities /= probabilities.sum()

                next_node = random.choices(eligible_nodes, weights=probabilities)[0]
                route.append(next_node)
                current_capacity -= demands[next_node]
                remaining_nodes.remove(next_node)
                current_node = next_node
            route.append(0)
            routes.append(route)
        return routes

    def calculate_cost(routes):
        cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                cost += distance_matrix[route[i]][route[i+1]]
        return cost

    for iteration in range(num_iterations):
        ant_solutions = []
        for ant in range(num_ants):
            ant_solutions.append(construct_solution(pheromone_matrix, demands, capacity))

        best_solution = min(ant_solutions, key=calculate_cost)
        best_cost = calculate_cost(best_solution)

        # Pheromone Update
        for i in range(n):
            for j in range(n):
                pheromone_matrix[i, j] *= (1 - rho)

        for route in best_solution:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                pheromone_matrix[node1, node2] += Q / best_cost
                pheromone_matrix[node2, node1] += Q / best_cost

    return heuristics_matrix
