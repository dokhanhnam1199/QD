import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility and cost, and uses edge frequencies in feasible routes to generate a heuristic matrix favoring edges appearing in good solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(np.arange(1, n))
        
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        
        current_route.append(0) # Return to depot
        routes.append(current_route)
        

        # Check Feasibility (simplified, assuming all demands <= capacity)
        feasible = True
        for route in routes:
            route_demand = sum(demands[i] for i in route)
            if route_demand > capacity:
                feasible = False
                break
        

        if feasible:
            # Update heuristics matrix based on edge frequencies in feasible routes
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += 1
                    heuristics_matrix[v, u] += 1  # Assume symmetric distance matrix

    # Normalize the heuristic matrix
    total_edge_visits = np.sum(heuristics_matrix)
    if total_edge_visits > 0:
       heuristics_matrix = heuristics_matrix / total_edge_visits
    

    return heuristics_matrix
