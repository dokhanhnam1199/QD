import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes satisfying capacity constraints, evaluates their cost, and uses the edge frequencies in low-cost routes to construct a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    best_cost = float('inf')

    for _ in range(num_samples):
        unvisited = list(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while unvisited:
            next_node = np.random.choice(unvisited)
            
            if current_capacity >= demands[next_node]:
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity

        current_route.append(0)
        routes.append(current_route)

        cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                cost += distance_matrix[route[i], route[i+1]]

        if cost < best_cost:
            best_cost = cost
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1

    return heuristics_matrix
