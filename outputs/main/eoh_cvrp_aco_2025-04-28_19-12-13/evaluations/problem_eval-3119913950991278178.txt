import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively builds routes by probabilistically selecting the next closest feasible node based on a combination of distance and demand, and updates a matrix reflecting the desirability of each edge.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100

    for _ in range(num_iterations):
        unvisited = set(range(1, n))  # Exclude depot
        routes = []

        while unvisited:
            current_route = [0]
            current_capacity = capacity

            while unvisited:
                feasible_nodes = [node for node in unvisited if demands[node] <= current_capacity]
                if not feasible_nodes:
                    break

                # Probabilistic selection considering both distance and demand
                distances = [distance_matrix[current_route[-1]][node] for node in feasible_nodes]
                demand_factors = [demands[node] / capacity for node in feasible_nodes]  # Normalize demand
                
                # Combine distance and demand to calculate probabilities. Higher demand and higher distance are less favorable.
                probabilities = [1 / (d * (1 + df)) if d > 0 else 1 for d, df in zip(distances, demand_factors)]
                probabilities = [p / sum(probabilities) for p in probabilities]

                next_node = random.choices(feasible_nodes, weights=probabilities, k=1)[0]
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)

            current_route.append(0)
            routes.append(current_route)

        # Update heuristics matrix based on the edges in the constructed routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i + 1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_iterations

    return heuristics_matrix
