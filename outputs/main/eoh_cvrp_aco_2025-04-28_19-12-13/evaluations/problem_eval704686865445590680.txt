import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs solutions by iteratively adding the edge with the highest probability based on a weighted combination of distance and demand considerations, while respecting capacity constraints.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    edge_probabilities = np.zeros_like(distance_matrix)

    num_iterations = 500
    alpha = 0.7  # Weight for distance
    beta = 0.3   # Weight for demand

    for _ in range(num_iterations):
        unvisited = set(range(1, n))
        routes = []
        
        while unvisited:
            current_route = [0]
            current_load = 0
            
            while unvisited:
                possible_edges = []
                for u in current_route[-1:]:
                    for v in unvisited:
                        if current_load + demands[v] <= capacity:
                            possible_edges.append((u, v))

                if not possible_edges:
                    break
                
                edge_scores = []
                for u, v in possible_edges:
                    score = alpha * (1 / distance_matrix[u, v]) + beta * (1 / demands[v])
                    edge_scores.append(score)
                
                probabilities = np.array(edge_scores) / np.sum(edge_scores)
                
                chosen_edge_index = np.random.choice(len(possible_edges), p=probabilities)
                chosen_edge = possible_edges[chosen_edge_index]
                
                next_node = chosen_edge[1]
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)

            current_route.append(0)
            routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_iterations
    return heuristics_matrix
