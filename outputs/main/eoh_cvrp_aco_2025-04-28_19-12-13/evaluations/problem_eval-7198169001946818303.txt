import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs initial routes using a savings-based approach, then iteratively refines these routes using local search and updates edge frequencies based on the improved solutions.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 50

    # Savings calculation
    savings = np.zeros((n, n), dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Initial route construction (Savings based)
    routes = []
    unvisited = set(range(1, n))
    while unvisited:
        best_saving = -1
        best_i = -1
        best_j = -1
        for i in unvisited:
            for j in unvisited:
                if i != j and savings[i, j] > best_saving:
                    best_saving = savings[i, j]
                    best_i = i
                    best_j = j

        if best_i == -1:  # If no savings, create a route from depot to any remaining node
            node = unvisited.pop()
            routes.append([0, node, 0])
            continue
        
        route = [0, best_i, best_j, 0]
        current_load = demands[best_i] + demands[best_j]
        unvisited.remove(best_i)
        unvisited.remove(best_j)

        # add more nodes until reaching capacity.
        while True:
            best_add_node = -1
            best_add_saving = -1

            for node in unvisited:
                if current_load + demands[node] <= capacity:

                    saving_i = savings[best_i, node]
                    saving_j = savings[best_j, node]
                    
                    if saving_i >= saving_j and saving_i > best_add_saving :
                        best_add_node = node
                        best_add_saving = saving_i
                    
                    elif saving_j > saving_i and saving_j > best_add_saving:
                        best_add_node = node
                        best_add_saving = saving_j


            if best_add_node != -1:
                route.insert(len(route)-1,best_add_node)
                current_load += demands[best_add_node]
                unvisited.remove(best_add_node)
                
                best_j = route[-2] #update best_j
                best_i = route[1]
                

            else:
                routes.append(route)
                break

    # Iterative Improvement (Local Search - 2-opt within routes)
    for _ in range(num_iterations):
        for route in routes:
            if len(route) <= 3:
                continue
            
            for i in range(1, len(route) - 2):
                for k in range(i + 1, len(route) - 1):
                    # 2-opt swap
                    new_route = route[:i] + route[i:k+1][::-1] + route[k+1:]
                    
                    current_cost = 0
                    for j in range(len(route) - 1):
                        current_cost += distance_matrix[route[j], route[j+1]]
                    
                    new_cost = 0
                    for j in range(len(new_route) - 1):
                        new_cost += distance_matrix[new_route[j], new_route[j+1]]

                    if new_cost < current_cost:
                        route[:] = new_route  # Update route in place

    # Update heuristics matrix
    for route in routes:
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] += 1
            heuristics_matrix[route[i+1], route[i]] += 1
    
    #Normalize heuristic matrix
    total_visits = np.sum(heuristics_matrix)
    if total_visits > 0:
      heuristics_matrix = heuristics_matrix / total_visits
    return heuristics_matrix
