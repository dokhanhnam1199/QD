import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility and cost, and then constructs a heuristic matrix indicating the frequency with which each edge appears in feasible routes, weighted by their contribution to route costs.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = np.random.permutation(range(1, n))
        
        # Construct routes based on the permutation and capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        
        current_route.append(0) # Return to depot for the last route.
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i]][route[i+1]]

        # Update the heuristic matrix based on the edges in the feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u][v] += 1.0 / total_distance  # Weight edges by inverse of route cost
                heuristics_matrix[v][u] += 1.0 / total_distance  # Ensure symmetry

    return heuristics_matrix
