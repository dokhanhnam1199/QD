import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes respecting capacity constraints,
    and then calculates a matrix where each entry represents the frequency that edge
    was used in the sampled routes, thus indicating how promising it is to include
    each edge in the solution.}
    """
    n = len(demands)
    num_samples = 100  # Number of random routes to sample
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        unvisited = set(range(1, n))  # Exclude depot (node 0)
        routes = []

        while unvisited:
            current_route = [0]  # Start at the depot
            current_capacity = capacity
            
            while unvisited and current_capacity >= min(demands[list(unvisited)]):
                # Find feasible nodes to add
                feasible_nodes = [node for node in unvisited if demands[node] <= current_capacity]
                
                if not feasible_nodes:
                    break
                
                #Select next node probabilistically favoring close unvisited nodes
                distances_to_current_node = [distance_matrix[current_route[-1]][node] for node in feasible_nodes]
                probabilities = [1/d if d > 0 else 1 for d in distances_to_current_node]
                probabilities = [p / sum(probabilities) for p in probabilities]

                next_node = random.choices(feasible_nodes, weights=probabilities, k=1)[0]
                
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            
            current_route.append(0)  # Return to depot
            routes.append(current_route)

        # Update heuristics matrix based on the edges in the sampled routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples

    return heuristics_matrix
