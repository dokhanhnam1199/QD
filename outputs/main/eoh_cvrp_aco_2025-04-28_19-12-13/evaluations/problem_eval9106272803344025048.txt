import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge probabilities by repeatedly sampling random routes, favoring edges to nearby nodes with smaller demands, and penalizing edges in routes exceeding capacity.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones((n, n))

    num_samples = 1000
    penalty_factor = 10
    demand_weight = 0.5 # Weight for demand in node selection


    for _ in range(num_samples):
        current_node = 0
        route = [0]
        remaining_nodes = list(range(1, n))
        vehicle_load = 0
        current_route = []

        while remaining_nodes:
            # Select the next node based on a combination of distance and demand
            distances = distance_matrix[current_node, remaining_nodes]
            demands_subset = np.array([demands[node] for node in remaining_nodes])

            # Calculate a score based on distance and demand, prioritizing closer nodes with smaller demands
            scores = distances + demand_weight * demands_subset

            sorted_indices = np.argsort(scores)
            
            next_node_found = False
            for idx in sorted_indices:
              candidate_node = remaining_nodes[idx]
              if vehicle_load + demands[candidate_node] <= capacity:
                next_node = candidate_node
                next_node_found = True
                break

            if not next_node_found:
              # Return to depot if no feasible node found
              for node in current_route:
                heuristics_matrix[current_node, 0] -= penalty_factor
                heuristics_matrix[0, current_node] -= penalty_factor
              current_node = 0 # restart current_node from depot
              vehicle_load = 0
              current_route = []
              continue

            # Update route information
            route.append(next_node)
            current_route.append(next_node)
            vehicle_load += demands[next_node]

            # Update heuristic matrix
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            # Remove node from remaining nodes
            remaining_nodes.remove(next_node)
            current_node = next_node

        # Return to depot
        route.append(0)
        heuristics_matrix[current_node, 0] += 1
        heuristics_matrix[0, current_node] += 1

    return heuristics_matrix
