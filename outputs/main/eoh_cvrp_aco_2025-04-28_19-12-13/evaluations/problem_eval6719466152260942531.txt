import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge inclusion probabilities by sampling random routes, 
     penalizing edges used in infeasible routes, and rewarding edges in feasible routes, 
     ultimately building a heuristic matrix favoring edges that frequently appear in good solutions.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)
        route = [0] + route + [0]  # Add depot to start and end

        is_feasible = True
        current_load = 0
        current_route = [0]

        vehicle_routes = []
        
        for i in range(1, len(route)):
            node = route[i]
            if node == 0:
                if current_load > 0:
                    vehicle_routes.append(current_route)
                    current_route = [0]
                    current_load = 0
                else:
                    current_route = [0]
                    current_load = 0
            else:
                if current_load + demands[node] <= capacity:
                    current_load += demands[node]
                    current_route.append(node)
                else:
                    vehicle_routes.append(current_route)
                    current_route = [0, node]
                    current_load = demands[node]

        if current_route:
            vehicle_routes.append(current_route)
        

        total_demand_exceeded = False
        for vehicle_route in vehicle_routes:
            route_demand = sum([demands[node] for node in vehicle_route])
            if route_demand > capacity:
                total_demand_exceeded = True
                break


        if total_demand_exceeded:
            is_feasible = False

        route = []
        for vehicle_route in vehicle_routes:
            route += vehicle_route
            if vehicle_route[-1] != 0 and vehicle_route != vehicle_routes[-1]:
                route += [0]
        route += [0]
        
        # Update heuristics matrix
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            if is_feasible:
                heuristics_matrix[node1, node2] += 1.0
                heuristics_matrix[node2, node1] += 1.0
            else:
                heuristics_matrix[node1, node2] -= 0.5
                heuristics_matrix[node2, node1] -= 0.5


    # Normalize heuristics matrix
    max_val = np.max(heuristics_matrix)
    min_val = np.min(heuristics_matrix)
    
    if max_val > min_val:
        heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    else:
        heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
        
    return heuristics_matrix
