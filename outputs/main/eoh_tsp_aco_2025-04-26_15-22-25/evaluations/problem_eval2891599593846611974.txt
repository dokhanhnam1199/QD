import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a number of random tours, computes the frequency of each edge appearing in the best tours, and uses this frequency as a heuristic indicator of edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    best_tour_lengths = []
    best_tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        best_tour_lengths.append(tour_length)
        best_tours.append(tour)

    # Select the top 10% best tours.
    num_top_tours = int(0.1 * num_samples)
    sorted_indices = np.argsort(best_tour_lengths)
    top_tours_indices = sorted_indices[:num_top_tours]
    top_tours = [best_tours[i] for i in top_tours_indices]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for tour in top_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1 #symmetric
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1 #symmetric
    
    heuristics_matrix = heuristics_matrix / num_top_tours

    return heuristics_matrix
