import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples solutions by adding edges based on a combination of shortest distances, edge uniqueness, and penalty for closing cycles prematurely, and uses the frequency of edges appearing in good solutions as heuristic indicators.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    
    for _ in range(num_samples):
        current_path = [np.random.randint(n)]
        unvisited = set(range(n))
        unvisited.remove(current_path[0])
        
        edges_used = set()
        
        while unvisited:
            current_node = current_path[-1]
            
            # Calculate scores for each possible edge to unvisited nodes
            edge_scores = {}
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                
                # Uniqueness factor - prefer less used edges
                uniqueness = 1 / (1 + heuristics_matrix[current_node, neighbor])
                
                # Cycle penalty - avoid closing cycles too early
                cycle_penalty = 1.0
                
                if len(current_path) > 2 and neighbor == current_path[0]:
                    cycle_penalty = 0.1  # High penalty to close cycle prematurely, unless last node
                
                edge_scores[neighbor] = distance * cycle_penalty / uniqueness # Try to penalize long travel

            # Select the next node based on edge scores (lower is better)
            best_neighbor = min(edge_scores, key=edge_scores.get)
                
            current_path.append(best_neighbor)
            unvisited.remove(best_neighbor)

        # Complete the cycle
        current_path.append(current_path[0])

        # Calculate total distance of the sampled path
        total_distance = 0
        for i in range(n):
            total_distance += distance_matrix[current_path[i], current_path[i+1]]
            
        # Update heuristics based on path quality
        # paths that have shorter distances are considered better.
        # Only good enough samples will be counted, to keep the samples relevant

        if total_distance < np.mean(distance_matrix) * n * 1.5: #consider sample if total distance is smaller than 1.5 times of mean times node number
           for i in range(n):
              node1, node2 = current_path[i], current_path[i+1]
              heuristics_matrix[node1, node2] += 1
              heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
