import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines edge probabilities based on the pheromone update rule inspired by Ant Colony Optimization, encouraging edges found in shorter tours and discouraging longer ones.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with equal probabilities
    pheromone_levels = np.ones_like(distance_matrix, dtype=float) # Initilize pheromone levels.

    alpha = 1.0  # Pheromone influence
    beta = 2.0  # Distance influence
    evaporation_rate = 0.1 # Evaporation rate

    num_iterations = 50

    for _ in range(num_iterations):
        # Construct a tour using probabilistic edge selection
        current_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        tour_distance = 0.0

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = (pheromone_levels[current_node, neighbor]**alpha) * ((1.0 / distance_matrix[current_node, neighbor])**beta)
            
            # Normalize probabilities
            probabilities = probabilities / np.sum(probabilities)
            
            # Select the next node probabilistically
            next_node = np.random.choice(n, p=probabilities)
            if next_node not in unvisited:
                # Handle case where a tiny probability causes a re-selection
                remaining_nodes = list(unvisited)
                if len(remaining_nodes) == 0:
                    next_node = tour[0] #return to the start
                else:
                    next_node = min(remaining_nodes, key=lambda x: distance_matrix[current_node, x])  # Fallback to nearest neighbor if probabilistic selection fails.


            tour_distance += distance_matrix[current_node, next_node]
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node
        # Complete tour
        tour_distance += distance_matrix[current_node, tour[0]]

        # Update pheromone levels
        pheromone_levels *= (1 - evaporation_rate) #evaporation

        # Pheromone deposit: Higher deposit for shorter tours.
        pheromone_deposit = 1.0 / tour_distance
        for i in range(n):
            pheromone_levels[tour[i], tour[(i + 1) % n]] += pheromone_deposit
            pheromone_levels[tour[(i+1) % n], tour[i]] += pheromone_deposit # Symmetry

        #Update Heuristic Matrix
        heuristics_matrix = pheromone_levels

    return heuristics_matrix
