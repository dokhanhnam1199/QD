import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs solutions by iteratively adding the shortest edge that doesn't create a sub-cycle, prioritizing edges that connect to nodes with high degree based on the current partial solution, and uses edge frequency in near-optimal solutions to build the heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    
    for _ in range(num_samples):
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j, distance_matrix[i, j]))
        
        edges.sort(key=lambda x: x[2])  # Sort edges by distance

        parent = list(range(n))
        degree = [0] * n
        path_length = 0
        selected_edges = []

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                parent[root_i] = root_j
                return True
            return False
        
        for u, v, distance in edges:
            if degree[u] < 2 and degree[v] < 2 and union(u, v):
                selected_edges.append((u, v))
                degree[u] += 1
                degree[v] += 1
                path_length += distance

        # close cycle
        u, v = -1, -1
        min_dist = np.inf
        for i in range(n):
          for j in range(i+1, n):
            if degree[i] < 2 and degree[j] < 2:
              if distance_matrix[i, j] < min_dist:
                min_dist = distance_matrix[i, j]
                u, v = i, j
        if u != -1 and v != -1:
          selected_edges.append((u,v))
          path_length += distance_matrix[u, v]

        
        if path_length < np.mean(distance_matrix) * n * 2:
            for u, v in selected_edges:
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
