import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines edge selection probabilities through iterative sampling of sub-optimal tours and reinforcement of edges appearing in shorter tours within a temperature-controlled exploration-exploitation framework.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)
    temperature = 1.0
    cooling_rate = 0.95
    num_iterations = 50

    for _ in range(num_iterations):
        sampled_tours = []
        tour_lengths = []
        num_samples = 50

        for _ in range(num_samples):
            current_node = np.random.randint(n)
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            tour = [current_node]

            while unvisited_nodes:
                probabilities = np.array([heuristics_matrix[current_node, node] for node in unvisited_nodes])
                probabilities = np.exp(probabilities / temperature)  # Temperature-controlled exploration
                probabilities /= np.sum(probabilities)

                nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)
                tour.append(nearest_node)
                unvisited_nodes.remove(nearest_node)
                current_node = nearest_node

            tour.append(tour[0])
            sampled_tours.append(tour)

            tour_length = 0
            for i in range(n):
                tour_length += distance_matrix[tour[i], tour[i+1]]
            tour_lengths.append(tour_length)

        min_tour_length = min(tour_lengths)
        
        #Reinforce good edges
        for i in range(num_samples):
            if tour_lengths[i] <= min_tour_length * 1.1: #Consider near-optimal tours only
                tour = sampled_tours[i]
                for j in range(n):
                    node1 = tour[j]
                    node2 = tour[j+1]
                    heuristics_matrix[node1, node2] *= 1.2  # Reinforce edge
                    heuristics_matrix[node2, node1] *= 1.2
        
        # Normalize heuristics matrix
        heuristics_matrix /= np.mean(heuristics_matrix)
        heuristics_matrix = np.clip(heuristics_matrix, 0.1, 10) # Ensure a range.

        temperature *= cooling_rate  #Reduce Temperture

    return heuristics_matrix
