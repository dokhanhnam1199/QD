import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm generates multiple random tours using a nearest neighbor heuristic, and then calculates a heuristic matrix based on the inverse of the average rank of each edge distance within its row.}"""
  n = distance_matrix.shape[0]
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

  for i in range(n):
    distances = distance_matrix[i, :]
    ranks = np.argsort(distances)
    
    for j in range(n):
      if i != j:
        rank = np.where(ranks == j)[0][0] + 1  # Rank starts from 1
        heuristics_matrix[i, j] = 1 / rank
      else:
        heuristics_matrix[i, j] = 0

  return heuristics_matrix
