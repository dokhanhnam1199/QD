import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple candidate TSP solutions using a nearest neighbor heuristic with randomized starting nodes and edge selection probabilities biased towards shorter distances, then averages the edge usage frequencies across these samples to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]

        while unvisited:
            distances = distance_matrix[current_node, :]
            probabilities = 1.0 / (distances + 1e-6)  # Avoid division by zero
            probabilities[current_node] = 0  # Prevent returning to the current node

            # Zero out the probabilities for visited nodes
            for visited_node in path:
                probabilities[visited_node] = 0
                
            probabilities /= np.sum(probabilities)

            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited:
              available_nodes = list(unvisited)
              if available_nodes:
                next_node = available_nodes[0]
              else:
                break

            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1  # Symmetric

            path.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1

    heuristics_matrix /= num_samples

    return heuristics_matrix
