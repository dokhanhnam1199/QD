import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a combination of nearest neighbor and shortest edge principles, iteratively sampling and refining paths based on edge frequency and length to build a heuristic matrix, where the score function considers both path length and the number of hops.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    num_samples = 100
    for _ in range(num_samples):
        # Start with a random node
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]
        path_length = 0
        num_hops = 0

        while unvisited:
            # Find the nearest neighbor from the current node among unvisited nodes
            nearest_neighbor = None
            min_distance = np.inf
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            path.append(nearest_neighbor)
            path_length += min_distance
            num_hops += 1
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        # Return to the starting node
        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]
        num_hops += 1

        # Update heuristics matrix based on edges in the path
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1 / (path_length * num_hops)
            heuristics_matrix[node2, node1] += 1 / (path_length * num_hops)

    return heuristics_matrix
