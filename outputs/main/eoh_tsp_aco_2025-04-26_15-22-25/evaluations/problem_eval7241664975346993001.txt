import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by prioritizing edges connecting nodes with high degree centrality in the inverse distance graph.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Create an inverse distance graph
    inverse_distance_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                inverse_distance_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero

    # Calculate degree centrality for each node in the inverse distance graph
    degree_centrality = np.sum(inverse_distance_matrix, axis=1)

    # Populate the heuristics matrix based on degree centrality
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics_matrix[i, j] = degree_centrality[i] + degree_centrality[j]

    # Normalize the heuristics matrix
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix /= max_heuristic

    return heuristics_matrix
