import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix for the TSP by sampling random tours, evaluating their lengths, and rewarding edges that frequently appear in shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        # Reward edges in shorter tours
        reward = 1.0 / (tour_length + 1e-6)  # Avoid division by zero

        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += reward
            heuristics_matrix[tour[i+1], tour[i]] += reward # make symetric

        heuristics_matrix[tour[-1], tour[0]] += reward
        heuristics_matrix[tour[0], tour[-1]] += reward # make symetric
    
    return heuristics_matrix
