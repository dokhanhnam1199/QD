import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm computes the average distance to the k-nearest neighbors for each node, and uses the inverse of the sum of these averages for each edge as a heuristic.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    k = min(5, num_nodes - 1)  # Consider top 5 nearest neighbors, or less if num_nodes < 6

    for i in range(num_nodes):
        distances = distance_matrix[i, :]
        nearest_neighbors = np.argsort(distances)[1:k+1]  # Exclude self (distance 0)
        avg_distance_i = np.mean(distances[nearest_neighbors])

        for j in range(num_nodes):
            if i != j:
                distances = distance_matrix[j, :]
                nearest_neighbors = np.argsort(distances)[1:k+1]
                avg_distance_j = np.mean(distances[nearest_neighbors])
                heuristics_matrix[i, j] = 1 / (avg_distance_i + avg_distance_j) if (avg_distance_i + avg_distance_j) > 0 else 0
            else:
                heuristics_matrix[i, j] = 0

    return heuristics_matrix
