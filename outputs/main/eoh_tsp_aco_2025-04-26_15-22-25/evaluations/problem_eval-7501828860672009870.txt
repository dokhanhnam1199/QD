import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-greedy solutions using a probabilistic nearest neighbor selection biased by distance and combines the edge frequencies across solutions to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = 1 / distances[neighbor] if distances[neighbor] > 0 else 0
            
            if np.sum(probabilities) == 0:
                next_node = min(unvisited_nodes)
            else:
                probabilities = probabilities / np.sum(probabilities)
                next_node = np.random.choice(n, p=probabilities)


            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            path.append(next_node)
            current_node = next_node
            unvisited_nodes.remove(current_node)

        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1
        
    return heuristics_matrix
