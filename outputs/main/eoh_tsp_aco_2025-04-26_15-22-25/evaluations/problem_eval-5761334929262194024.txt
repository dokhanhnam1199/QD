import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, and for each tour, it calculates the tour length and updates a heuristic matrix by rewarding edges present in shorter tours and penalizing edges present in longer tours.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)

        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[n - 1], tour[0]]

        # Update the heuristics matrix
        for i in range(n - 1):
            u = tour[i]
            v = tour[i + 1]
            heuristics_matrix[u, v] += 1.0 / tour_length
            heuristics_matrix[v, u] += 1.0 / tour_length # Make symmetric
        u = tour[n - 1]
        v = tour[0]
        heuristics_matrix[u, v] += 1.0 / tour_length
        heuristics_matrix[v, u] += 1.0 / tour_length # Make symmetric

    return heuristics_matrix
