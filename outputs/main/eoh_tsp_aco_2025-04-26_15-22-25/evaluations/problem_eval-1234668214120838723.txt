import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest edge and degree-based edge prioritization principles to prioritize edges likely to be in the optimal TSP tour.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the degree of each node based on inverse distance
    node_degrees = np.zeros(n)
    for i in range(n):
        for j in range(n):
            if i != j:
                node_degrees[i] += 1.0 / distance_matrix[i, j]

    # Normalize node degrees
    node_degrees /= np.sum(node_degrees)

    # Heuristic based on node degrees and shortest edges
    shortest_edge_threshold = np.percentile(distance_matrix[distance_matrix > 0], 25)  # Consider top 25% shortest edges

    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] <= shortest_edge_threshold:
                    heuristics_matrix[i, j] += (0.7 / distance_matrix[i, j]) + (0.3 * (node_degrees[i] + node_degrees[j]))
                    heuristics_matrix[j, i] += (0.7 / distance_matrix[j, i]) + (0.3 * (node_degrees[j] + node_degrees[i]))
                else:
                    heuristics_matrix[i, j] += 0.1 * (node_degrees[i] + node_degrees[j])
                    heuristics_matrix[j, i] += 0.1 * (node_degrees[j] + node_degrees[i])

    return heuristics_matrix
