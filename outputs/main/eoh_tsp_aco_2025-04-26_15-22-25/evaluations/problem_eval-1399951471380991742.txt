import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm constructs a heuristic matrix by iteratively improving random tours using a 3-opt swap, and the heuristic value of an edge reflects how often it appears in these improved tours.}"""
  n = distance_matrix.shape[0]
  num_iterations = 50
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

  for _ in range(num_iterations):
    # Generate a random tour
    tour = np.random.permutation(n)
    tour = np.append(tour, tour[0])

    # Improve the tour using 3-opt swaps
    improved = True
    while improved:
      improved = False
      for i in range(1, n - 1):
        for j in range(i + 2, n):
          for k in range(j + 2, n + 1):
            # Consider different 3-opt swap options
            segments = [tour[i:j], tour[j:k]]
            
            # Original order
            current_cost = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]] + distance_matrix[tour[k-1], tour[k]]
            
            # 2-opt (i,j)
            new_cost1 = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[k-1]] + distance_matrix[tour[j], tour[k]]
            if new_cost1 < current_cost:
              tour[i:j] = tour[i:j][::-1]
              improved = True
              
            # 2-opt (j,k)
            current_cost = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]] + distance_matrix[tour[k-1], tour[k]]
            new_cost2 = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[k-1]] + distance_matrix[tour[j], tour[k]]
            if new_cost2 < current_cost:
              tour[j:k] = tour[j:k][::-1]
              improved = True
              
            # 3-opt
            current_cost = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]] + distance_matrix[tour[k-1], tour[k]]
            new_cost3 = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[k-1]] + distance_matrix[tour[j], tour[k]]
            
            if new_cost3 < current_cost:
                tour[i:j] = tour[i:j][::-1]
                improved = True
    # Update the heuristic matrix
    for i in range(n):
      node1 = tour[i]
      node2 = tour[i+1]
      heuristics_matrix[node1, node2] += 1
      heuristics_matrix[node2, node1] += 1

  heuristics_matrix /= num_iterations
  return heuristics_matrix
