import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm constructs a heuristic matrix by combining shortest path distances with edge appearance counts from a set of greedy tours, where tours start from each node.}"""
  n = distance_matrix.shape[0]
  shortest_path_matrix = np.zeros_like(distance_matrix, dtype=float)
  for i in range(n):
    for j in range(n):
      if i != j:
        shortest_path_matrix[i, j] = np.inf
  for i in range(n):
    for j in range(n):
      if i != j and distance_matrix[i, j] > 0:
        shortest_path_matrix[i, j] = distance_matrix[i, j]

  for k in range(n):
    for i in range(n):
      for j in range(n):
        shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])
  
  num_tours = n
  edge_counts = np.zeros_like(distance_matrix)

  for start_node in range(n):
    unvisited_nodes = set(range(n))
    current_node = start_node
    tour = [current_node]
    unvisited_nodes.remove(current_node)

    while unvisited_nodes:
      nearest_neighbor = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])
      tour.append(nearest_neighbor)
      unvisited_nodes.remove(nearest_neighbor)
      current_node = nearest_neighbor

    tour.append(start_node)
    
    for i in range(n):
      node1 = tour[i]
      node2 = tour[i+1]
      edge_counts[node1, node2] += 1
      edge_counts[node2, node1] += 1
      
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
  for i in range(n):
    for j in range(n):
      if distance_matrix[i, j] > 0:
        heuristics_matrix[i, j] = edge_counts[i, j] / shortest_path_matrix[i, j]
      else:
        heuristics_matrix[i, j] = 0

  return heuristics_matrix
