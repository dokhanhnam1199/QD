import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm generates multiple random tours using a nearest neighbor heuristic with probabilistic neighbor selection based on distance, and then calculates a heuristic matrix based on the frequency with which each edge appears in these tours, raised to the power of edge distance.}"""
  n = distance_matrix.shape[0]
  num_tours = 100
  edge_counts = np.zeros_like(distance_matrix)
  alpha = 1.0
  
  for _ in range(num_tours):
    start_node = np.random.randint(n)
    unvisited_nodes = set(range(n))
    current_node = start_node
    tour = [current_node]
    unvisited_nodes.remove(current_node)
    
    while unvisited_nodes:
      probabilities = []
      for neighbor in unvisited_nodes:
          probabilities.append(1.0 / (distance_matrix[current_node, neighbor]**alpha))
          
      probabilities = np.array(probabilities)
      probabilities /= probabilities.sum()
          
      nearest_neighbor = np.random.choice(list(unvisited_nodes), p=probabilities)      
      
      tour.append(nearest_neighbor)
      unvisited_nodes.remove(nearest_neighbor)
      current_node = nearest_neighbor
      
    tour.append(start_node) 
    
    for i in range(n):
      node1 = tour[i]
      node2 = tour[i+1]
      edge_counts[node1, node2] += 1
      edge_counts[node2, node1] += 1

  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
  for i in range(n):
    for j in range(n):
        if distance_matrix[i,j] > 0:
            heuristics_matrix[i, j] = edge_counts[i, j] ** distance_matrix[i, j]
        else:
            heuristics_matrix[i,j] = 0

  return heuristics_matrix
