import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm generates tours using a stochastic nearest neighbor heuristic, favoring closer neighbors with a probability, and calculates a heuristic matrix based on the frequency of each edge appearing in these tours, normalized by the edge distance.}"""
  n = distance_matrix.shape[0]
  num_tours = 100
  edge_counts = np.zeros_like(distance_matrix)
  
  for _ in range(num_tours):
    start_node = np.random.randint(n)
    unvisited_nodes = set(range(n))
    current_node = start_node
    tour = [current_node]
    unvisited_nodes.remove(current_node)
    
    while unvisited_nodes:
      probabilities = np.zeros(n)
      for neighbor in unvisited_nodes:
        probabilities[neighbor] = 1 / distance_matrix[current_node, neighbor] if distance_matrix[current_node, neighbor] > 0 else 0
      probabilities /= np.sum(probabilities) if np.sum(probabilities) > 0 else 1/len(unvisited_nodes) # Normalize to create a probability distribution

      nearest_neighbor = np.random.choice(list(range(n)), p=probabilities)
      while nearest_neighbor not in unvisited_nodes:
          probabilities[nearest_neighbor] = 0
          if np.sum(probabilities) == 0:
              nearest_neighbor = np.random.choice(list(unvisited_nodes))
              break
          probabilities /= np.sum(probabilities)
          nearest_neighbor = np.random.choice(list(range(n)), p=probabilities)
          
      tour.append(nearest_neighbor)
      unvisited_nodes.remove(nearest_neighbor)
      current_node = nearest_neighbor
      
    tour.append(start_node) 
    
    for i in range(n):
      node1 = tour[i]
      node2 = tour[i+1]
      edge_counts[node1, node2] += 1
      edge_counts[node2, node1] += 1

  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
  for i in range(n):
    for j in range(n):
        if distance_matrix[i,j] > 0:
            heuristics_matrix[i, j] = edge_counts[i, j] / distance_matrix[i, j]
        else:
            heuristics_matrix[i,j] = 0

  return heuristics_matrix
