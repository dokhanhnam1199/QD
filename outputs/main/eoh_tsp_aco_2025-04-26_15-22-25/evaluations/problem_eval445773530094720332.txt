import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs simulated annealing to explore the solution space and constructs a heuristic matrix based on the acceptance rate of each edge.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def acceptance_probability(old_cost, new_cost, temperature):
        if new_cost < old_cost:
            return 1.0
        return np.exp((old_cost - new_cost) / temperature)

    num_iterations = 10000
    initial_temperature = 100
    cooling_rate = 0.999

    for _ in range(10):
      current_tour = list(np.random.permutation(n))
      current_cost = calculate_tour_length(current_tour)
      temperature = initial_temperature

      for iteration in range(num_iterations):
          i, j = np.random.choice(n, 2, replace=False)
          new_tour = current_tour[:]
          new_tour[i], new_tour[j] = new_tour[j], new_tour[i]
          new_cost = calculate_tour_length(new_tour)
          
          if acceptance_probability(current_cost, new_cost, temperature) > np.random.rand():
              current_tour = new_tour
              current_cost = new_cost

              
          for k in range(n):
              node1 = current_tour[k]
              node2 = current_tour[(k + 1) % n]
              heuristics_matrix[node1, node2] += 1
              heuristics_matrix[node2, node1] += 1
          
          temperature *= cooling_rate

    total_counts = np.sum(heuristics_matrix)
    if total_counts > 0:
      heuristics_matrix /= total_counts
    
    return heuristics_matrix
