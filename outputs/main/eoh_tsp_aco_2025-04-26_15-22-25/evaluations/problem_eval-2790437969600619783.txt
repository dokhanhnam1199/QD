import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple tours using a nearest neighbor heuristic, and the heuristics matrix reflects the frequency with which each edge appears in the sampled tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node, node])
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        tour.append(start_node)

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
