import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random TSP tours, and the heuristic matrix is built by counting how many times each edge appears in these sampled tours, normalized by the number of samples.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Count edge occurrences in the tour
        for i in range(n):
            u = tour[i]
            v = tour[(i + 1) % n]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1 # Assuming symmetric distance matrix

    # Normalize by the number of samples
    heuristics_matrix /= num_samples

    return heuristics_matrix
