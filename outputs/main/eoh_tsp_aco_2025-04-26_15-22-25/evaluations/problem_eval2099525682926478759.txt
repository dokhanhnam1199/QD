import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge frequency in near-optimal tours and edge centrality in a series of randomly generated spanning trees.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Part 1: Edge frequency in near-optimal tours
    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited = set(range(num_nodes))
        unvisited.remove(start_node)
        tour = [start_node]

        while unvisited:
            next_node = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)

        for i in range(num_nodes):
            heuristics_matrix[tour[i], tour[i-1]] += 1
            heuristics_matrix[tour[i-1], tour[i]] += 1

    # Part 2: Edge centrality in random spanning trees
    for _ in range(num_samples):
        edges = []
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                edges.append((i, j, distance_matrix[i, j]))
        np.random.shuffle(edges)  # Randomize edge order

        parent = list(range(num_nodes))

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                parent[root_i] = root_j
                return True
            return False

        spanning_tree_edges = []
        for i, j, _ in edges:
            if union(i, j):
                spanning_tree_edges.append((i, j))

        #Edge Centrality
        
        for i, j in spanning_tree_edges:
            heuristics_matrix[i, j] += 1
            heuristics_matrix[j, i] += 1

    heuristics_matrix /= (2 * num_samples) #Average of edge frequencies and edge centrality.

    return heuristics_matrix
