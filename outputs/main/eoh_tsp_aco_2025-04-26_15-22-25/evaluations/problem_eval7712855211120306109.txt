import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples TSP solutions using a nearest-neighbor-inspired heuristic and then calculates a matrix where each entry indicates the frequency with which the corresponding edge appears in the sampled good solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]
        
        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = np.inf
            
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor
                    
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
            
        path.append(start_node)
        
        path_length = 0
        for i in range(n):
            path_length += distance_matrix[path[i], path[i+1]]
            
        if path_length < np.mean(distance_matrix) * n * 2: # Accept only "good" solutions
            for i in range(n):
                node1 = path[i]
                node2 = path[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
                
    heuristics_matrix /= num_samples
    return heuristics_matrix
