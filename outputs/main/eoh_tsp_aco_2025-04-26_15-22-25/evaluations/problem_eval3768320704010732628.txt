import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-optimal TSP solutions using a greedy approach with probabilistic edge selection biased by inverse distance, and then averages the edge frequencies across these solutions to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]

        while unvisited:
            distances = distance_matrix[current_node, :]
            probabilities = np.zeros(n)
            for node in unvisited:
                probabilities[node] = 1 / distances[node] if distances[node] > 0 else 0
            
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities) if np.sum(probabilities) > 0 else unvisited.pop()

            if next_node in unvisited:
                tour.append(next_node)
                unvisited.remove(next_node)
                
                heuristics_matrix[current_node, next_node] += 1
                heuristics_matrix[next_node, current_node] += 1 #Symmetric TSP
                current_node = next_node
            else:
                #Handle case where the probability selection failed and didn't produce an unvisited node
                alt_next_node = unvisited.pop()
                tour.append(alt_next_node)

                heuristics_matrix[current_node, alt_next_node] += 1
                heuristics_matrix[alt_next_node, current_node] += 1 #Symmetric TSP
                current_node = alt_next_node
                

        tour.append(tour[0])  # Return to starting node
        heuristics_matrix[tour[-2], tour[-1]] += 1
        heuristics_matrix[tour[-1], tour[-2]] += 1
        

    heuristics_matrix /= num_samples
    return heuristics_matrix
