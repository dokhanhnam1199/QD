import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, calculates the length of each tour, and then uses the tour lengths to assign a score to each edge based on how frequently it appears in shorter tours.}"""
    num_nodes = distance_matrix.shape[0]
    num_iterations = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_iterations):
        tour = np.random.permutation(num_nodes)
        tour_length = 0
        for i in range(num_nodes - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)
        tours.append(tour)

    # Normalize tour lengths to create weights (shorter tours have higher weights)
    max_length = max(tour_lengths)
    weights = [(max_length - length) / max_length for length in tour_lengths]

    for tour_index, tour in enumerate(tours):
        weight = weights[tour_index]
        for i in range(num_nodes - 1):
            heuristics_matrix[tour[i], tour[i + 1]] += weight
            heuristics_matrix[tour[i + 1], tour[i]] += weight
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight

    return heuristics_matrix
