import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest path information with node degree centrality, favoring edges connecting nodes with high centrality within short paths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    # Calculate shortest path matrix using Floyd-Warshall algorithm
    shortest_path_matrix = distance_matrix.copy()
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])
    
    # Calculate degree centrality based on inverse shortest path lengths
    degree_centrality = np.zeros(n)
    for i in range(n):
        for j in range(n):
            if i != j and shortest_path_matrix[i, j] > 0:
                degree_centrality[i] += 1.0 / shortest_path_matrix[i, j]
                
    # Normalize degree centrality
    degree_centrality /= np.sum(degree_centrality)
    
    # Construct heuristics matrix
    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] > 0:
                heuristics_matrix[i, j] = (degree_centrality[i] + degree_centrality[j]) / distance_matrix[i, j]
            else:
                heuristics_matrix[i, j] = 0.0
                
    return heuristics_matrix
