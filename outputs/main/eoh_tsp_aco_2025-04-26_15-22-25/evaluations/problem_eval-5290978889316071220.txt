import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours by randomly selecting edges with probabilities inversely proportional to their distances, and the heuristics matrix reflects the average usage of each edge across these tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes[:]  # Start with a random permutation

        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
