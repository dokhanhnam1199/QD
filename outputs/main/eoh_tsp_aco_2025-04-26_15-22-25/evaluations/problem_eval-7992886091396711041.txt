import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines shortest path computations with edge frequency analysis from randomly generated subgraphs to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_subgraphs = 50
    subgraph_size = int(n * 0.6)

    for _ in range(num_subgraphs):
        nodes = np.random.choice(n, subgraph_size, replace=False)
        subgraph_matrix = distance_matrix[np.ix_(nodes, nodes)]

        
        path_matrix = np.zeros_like(subgraph_matrix, dtype=float)
        for i in range(subgraph_size):
            for j in range(subgraph_size):
                if i != j:
                    
                    d = subgraph_matrix[i,j]
                    path_matrix[i, j] = 1 / d if d>0 else 0
        
        for i in range(subgraph_size):
            for j in range(subgraph_size):
                node_i = nodes[i]
                node_j = nodes[j]
                heuristics_matrix[node_i, node_j] += path_matrix[i, j]
                heuristics_matrix[node_j, node_i] += path_matrix[i, j]
    

    return heuristics_matrix
