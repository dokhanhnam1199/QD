import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples tours using a greedy approach guided by dynamically updated edge weights based on tour quality, favoring edges that appear in shorter tours.}"""
    n = distance_matrix.shape[0]
    edge_weights = np.ones_like(distance_matrix)  # Initialize edge weights
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100

    for _ in range(num_iterations):
        tour = []
        unvisited = list(range(n))
        start_node = np.random.choice(unvisited)
        current_node = start_node
        tour.append(current_node)
        unvisited.remove(current_node)
        tour_length = 0

        while unvisited:
            # Select next node greedily based on edge weights and distance
            best_node = None
            best_score = np.inf
            for next_node in unvisited:
                score = distance_matrix[current_node, next_node] / edge_weights[current_node, next_node]
                if score < best_score:
                    best_score = score
                    best_node = next_node

            tour.append(best_node)
            tour_length += distance_matrix[current_node, best_node]
            current_node = best_node
            unvisited.remove(current_node)

        tour.append(start_node)  # Return to start
        tour_length += distance_matrix[current_node, start_node]
        
        # Update edge weights based on tour length. Better tours increase the weights of their edges.
        weight_delta = 1 / tour_length
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_weights[node1, node2] += weight_delta
            edge_weights[node2, node1] += weight_delta

    heuristics_matrix = edge_weights  # Heuristics are the final edge weights
    return heuristics_matrix
