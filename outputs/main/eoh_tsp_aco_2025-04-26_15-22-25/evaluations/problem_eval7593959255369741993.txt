import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm simulates an ant colony system where ants probabilistically construct tours based on pheromone trails and distance, updating pheromones based on tour quality.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 1  # Pheromone influence
    beta = 2  # Distance influence
    rho = 0.1  # Evaporation rate
    Q = 100  # Pheromone deposit constant
    num_ants = n
    num_iterations = 50

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_iterations):
        all_tours = []
        all_tour_lengths = []

        for ant in range(num_ants):
            unvisited = list(range(n))
            start_node = np.random.choice(unvisited)
            current_node = start_node
            unvisited.remove(current_node)
            tour = [current_node]

            while unvisited:
                probabilities = np.zeros(len(unvisited))
                for i, next_node in enumerate(unvisited):
                    probabilities[i] = (pheromone_matrix[current_node, next_node]**alpha) * ((1 / distance_matrix[current_node, next_node])**beta)
                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(unvisited, p=probabilities)
                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            all_tours.append(tour)
            
            tour_length = 0
            for i in range(n):
                tour_length += distance_matrix[tour[i], tour[i+1]]
            all_tour_lengths.append(tour_length)

        # Update pheromones
        pheromone_matrix *= (1 - rho)
        for ant in range(num_ants):
            tour = all_tours[ant]
            tour_length = all_tour_lengths[ant]
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                pheromone_matrix[node1, node2] += Q / tour_length
                pheromone_matrix[node2, node1] += Q / tour_length

        # Accumulate heuristics based on pheromone levels
        heuristics_matrix += pheromone_matrix

    heuristics_matrix /= num_iterations
    return heuristics_matrix
