import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours by iteratively adding the shortest edge that doesn't create a sub-tour, promoting edges that connect disparate clusters of nodes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j, distance_matrix[i, j]))
        
        edges.sort(key=lambda x: x[2])  # Sort edges by distance
        
        parent = list(range(n))

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                parent[root_i] = root_j
                return True
            return False
            
        num_edges_added = 0
        tour_edges = []
        
        for u, v, dist in edges:
            if union(u, v):
                tour_edges.append((u, v))
                num_edges_added +=1
            if num_edges_added == n-1:
                break
        
        # Find the last edge to complete the tour
        start_node = tour_edges[0][0]  # Arbitrary starting node
        end_nodes = set(range(n))
        for u, v in tour_edges:
          if u in end_nodes:
            end_nodes.remove(u)
          if v in end_nodes:
            end_nodes.remove(v)
        
        other_node = end_nodes.pop()
        tour_edges.append((start_node, other_node))
        
        
        for u, v in tour_edges:
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    return heuristics_matrix
