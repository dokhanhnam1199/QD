import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest edge and degree-penalty principles to prioritize edges likely to be in the optimal TSP tour.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Shortest edge threshold
    shortest_edge_threshold = np.percentile(distance_matrix[distance_matrix > 0], 25)  # Consider top 25% shortest edges

    # Degree penalty parameters
    degree = np.zeros(n, dtype=int)
    degree_penalty_factor = 0.75

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse distance
                heuristics_matrix[i, j] = 1.0 / distance_matrix[i, j]

                # Shortest edge bonus
                if distance_matrix[i, j] <= shortest_edge_threshold:
                    heuristics_matrix[i, j] += 0.5 / distance_matrix[i, j]

                # Degree penalty: discourage high-degree nodes
                heuristics_matrix[i, j] *= (1 - degree_penalty_factor * (degree[i] / (n-1))) * (1 - degree_penalty_factor * (degree[j] / (n-1)))

    return heuristics_matrix
