import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm uses a k-means clustering approach to group nodes, then calculates the average inverse distance between cluster centroids, creating a heuristic matrix favoring connections between nodes in closer clusters.}"""
  num_nodes = distance_matrix.shape[0]
  num_clusters = int(np.sqrt(num_nodes))
  
  #K-means clustering
  centroids = np.random.rand(num_clusters, num_nodes)
  clusters = [[] for _ in range(num_clusters)]
  
  for i in range(num_nodes):
      distances = np.sum((centroids - np.tile(distance_matrix[i,:], (num_clusters, 1)))**2, axis=1)
      cluster_id = np.argmin(distances)
      clusters[cluster_id].append(i)
      
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

  cluster_centroids = np.zeros((num_clusters, num_nodes))

  for k in range(num_clusters):
      if len(clusters[k]) > 0:
          cluster_centroids[k, :] = np.mean(distance_matrix[clusters[k], :], axis=0)
      else:
          cluster_centroids[k, :] = np.random.rand(num_nodes) # Handle empty clusters

  for i in range(num_nodes):
      for j in range(i + 1, num_nodes):
          cluster_i = -1
          cluster_j = -1
          for k in range(num_clusters):
              if i in clusters[k]:
                  cluster_i = k
              if j in clusters[k]:
                  cluster_j = k
          
          if cluster_i != -1 and cluster_j != -1:
              cluster_distance = np.linalg.norm(cluster_centroids[cluster_i, :] - cluster_centroids[cluster_j, :])
              if cluster_distance > 0:
                  heuristics_matrix[i, j] = 1 / cluster_distance
                  heuristics_matrix[j, i] = 1 / cluster_distance
              else:
                  heuristics_matrix[i, j] = 1 # Assign high value to nodes in identical location
                  heuristics_matrix[j, i] = 1
          else:
              heuristics_matrix[i, j] = 0.0001
              heuristics_matrix[j, i] = 0.0001

  return heuristics_matrix
