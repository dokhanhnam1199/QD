import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm constructs a heuristic matrix by iteratively improving random tours using a 2-opt swap, and the heuristic value of an edge reflects how much shorter the tour becomes on average when including the edge.}"""
  n = distance_matrix.shape[0]
  num_iterations = 100
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

  for _ in range(num_iterations):
    # Generate a random tour
    tour = np.random.permutation(n)
    tour = np.append(tour, tour[0])
    
    original_tour_length = 0
    for i in range(n):
        original_tour_length += distance_matrix[tour[i], tour[i+1]]

    # Improve the tour using 2-opt swaps
    for i in range(1, n):
      for j in range(i + 2, n + 1):
        if distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]] > distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]:
          tour[i:j] = tour[i:j][::-1]

    improved_tour_length = 0
    for i in range(n):
        improved_tour_length += distance_matrix[tour[i], tour[i+1]]
    
    tour_improvement = original_tour_length - improved_tour_length

    # Update the heuristic matrix
    for i in range(n):
      node1 = tour[i]
      node2 = tour[i+1]
      heuristics_matrix[node1, node2] += tour_improvement
      heuristics_matrix[node2, node1] += tour_improvement

  heuristics_matrix /= num_iterations
  return heuristics_matrix
