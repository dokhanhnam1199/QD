import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, applies a 2-opt local search to improve them, and then uses the frequency of each edge's appearance in the improved tours as a heuristic indicator of its desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def calculate_distance(tour):
        total_distance = 0
        for i in range(len(tour) - 1):
            total_distance += distance_matrix[tour[i], tour[i+1]]
        total_distance += distance_matrix[tour[-1], tour[0]]
        return total_distance

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_distance = calculate_distance(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, len(tour) - 1):
                for k in range(i + 1, len(tour)):
                    new_tour = two_opt_swap(tour, i, k)
                    new_distance = calculate_distance(new_tour)
                    if new_distance < best_distance:
                        best_distance = new_distance
                        best_tour = new_tour
                        improved = True
            tour = best_tour
        return best_tour

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Improve the tour using 2-opt
        improved_tour = two_opt(tour)
        
        # Update heuristics matrix
        for i in range(len(improved_tour) - 1):
            heuristics_matrix[improved_tour[i], improved_tour[i+1]] += 1
            heuristics_matrix[improved_tour[i+1], improved_tour[i]] += 1
        heuristics_matrix[improved_tour[-1], improved_tour[0]] += 1
        heuristics_matrix[improved_tour[0], improved_tour[-1]] += 1

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
