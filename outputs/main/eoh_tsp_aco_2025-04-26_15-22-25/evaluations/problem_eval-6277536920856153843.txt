import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, and then assigns higher heuristic values to edges that appear more frequently in shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tours.append(tour)

        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)

    # Normalize tour lengths to be between 0 and 1 (lower is better)
    max_length = max(tour_lengths)
    normalized_tour_lengths = [(max_length - length) / max_length for length in tour_lengths]

    # Update heuristics matrix based on tour frequencies and normalized lengths
    for idx, tour in enumerate(tours):
        weight = normalized_tour_lengths[idx]
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight
    
    # Optional: Normalize heuristics_matrix
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
