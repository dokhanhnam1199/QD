import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency from short, randomly sampled tours with a penalty based on edge distance relative to the average distance, resulting in a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    avg_distance = np.mean(distance_matrix[distance_matrix > 0])

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = list(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        
        for _ in range(n - 1):
            next_node = np.random.choice(unvisited)
            tour.append(next_node)
            unvisited.remove(next_node)
        
        tour.append(start_node)
        
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_samples

    for i in range(n):
        for j in range(n):
            if i != j:
                penalty = max(0, distance_matrix[i, j] - avg_distance) / avg_distance
                heuristics_matrix[i, j] -= penalty

    return heuristics_matrix
