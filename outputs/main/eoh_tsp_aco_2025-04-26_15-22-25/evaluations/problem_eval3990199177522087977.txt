import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge proximity (inverse distance) with node centrality (degree of connectedness) to favor edges connected to central nodes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate node centrality based on inverse distances (higher is more central)
    node_centrality = np.sum(1.0 / (distance_matrix + np.eye(n)), axis=1)

    # Normalize node centralities
    node_centrality = (node_centrality - np.min(node_centrality)) / (np.max(node_centrality) - np.min(node_centrality))


    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine edge proximity with node centrality
                heuristics_matrix[i, j] = (1.0 / distance_matrix[i, j]) * (node_centrality[i] + node_centrality[j]) / 2
            else:
                heuristics_matrix[i, j] = 0

    return heuristics_matrix
