import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by prioritizing shorter edges and penalizing edges that would create short cycles with previously selected edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    # Initialize heuristics based on inverse distance
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = 1.0 / distance_matrix[i, j]
    
    # Iteratively select edges and penalize short cycles
    selected_edges = []
    for _ in range(n * (n - 1) // 2): # Iterate through all possible edges
        # Find edge with highest heuristic value
        best_i, best_j = np.unravel_index(np.argmax(heuristics_matrix), (n, n))
        
        # Add the edge to selected edges
        selected_edges.append((best_i, best_j))
        
        # Penalize edges that form short cycles (length 3 or 4)
        for i in range(n):
            for j in range(n):
                if i != j:
                    # Check for cycle of length 3
                    if (best_i, i) in selected_edges and (i, best_j) in selected_edges:
                        heuristics_matrix[i, j] *= 0.5
                    if (best_j, i) in selected_edges and (i, best_i) in selected_edges:
                        heuristics_matrix[i, j] *= 0.5
                        
                    # Check for cycle of length 4
                    for k in range(n):
                        if k != best_i and k != best_j and k != i:
                            if (best_i, i) in selected_edges and (i, k) in selected_edges and (k, best_j) in selected_edges:
                                heuristics_matrix[i, j] *= 0.5
                            if (best_j, i) in selected_edges and (i, k) in selected_edges and (k, best_i) in selected_edges:
                                heuristics_matrix[i, j] *= 0.5
                                
        # Set heuristic value of selected edge to zero to avoid re-selection
        heuristics_matrix[best_i, best_j] = 0
        heuristics_matrix[best_j, best_i] = 0
        
    return heuristics_matrix
