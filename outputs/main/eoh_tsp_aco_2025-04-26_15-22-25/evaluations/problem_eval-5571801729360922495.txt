import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples paths using a biased random walk based on inverse distance, combines edge counts with inverse distance, and incorporates a nearest neighbor heuristic.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for i in range(num_samples):
        current_node = np.random.randint(n)
        path = [current_node]
        
        while len(path) < n:
            
            remaining_nodes = list(set(range(n)) - set(path))
            
            if not remaining_nodes:
                break
            
            probabilities = []
            for neighbor in remaining_nodes:
                probabilities.append(1.0 / (distance_matrix[current_node, neighbor] + 1e-6))
            
            probabilities = np.array(probabilities) / np.sum(probabilities)
            
            next_node = np.random.choice(remaining_nodes, p=probabilities)
            
            edge_counts[current_node, next_node] += 1
            edge_counts[next_node, current_node] += 1
            
            path.append(next_node)
            current_node = next_node
        
        # Complete the cycle
        edge_counts[path[-1], path[0]] += 1
        edge_counts[path[0], path[-1]] += 1

    # Normalize edge counts
    normalized_edge_counts = edge_counts / num_samples

    # Combine with inverse distance
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))  # Avoid division by zero
    combined_heuristic = normalized_edge_counts + inverse_distance

    # Nearest Neighbor Heuristic
    nn_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for start_node in range(n):
        nearest_neighbors = np.argsort(distance_matrix[start_node, :])[1:]  # Exclude self
        nn_heuristic[start_node, nearest_neighbors[0]] = 1
        nn_heuristic[nearest_neighbors[0], start_node] = 1

    # Combine all heuristics
    heuristics_matrix = combined_heuristic + nn_heuristic

    return heuristics_matrix
