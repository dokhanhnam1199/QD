{
     "algorithm": "This algorithm constructs a heuristic matrix by iteratively improving random tours using a 2-opt swap, and the heuristic value of an edge reflects how often it appears in these improved tours.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n  \"\"\"{This algorithm constructs a heuristic matrix by iteratively improving random tours using a 2-opt swap, and the heuristic value of an edge reflects how often it appears in these improved tours.}\"\"\"\n  n = distance_matrix.shape[0]\n  num_iterations = 100\n  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n  for _ in range(num_iterations):\n    # Generate a random tour\n    tour = np.random.permutation(n)\n    tour = np.append(tour, tour[0])\n\n    # Improve the tour using 2-opt swaps\n    for i in range(1, n):\n      for j in range(i + 2, n + 1):\n        if distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]] > distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]:\n          tour[i:j] = tour[i:j][::-1]\n\n    # Update the heuristic matrix\n    for i in range(n):\n      node1 = tour[i]\n      node2 = tour[i+1]\n      heuristics_matrix[node1, node2] += 1\n      heuristics_matrix[node2, node1] += 1\n\n  heuristics_matrix /= num_iterations\n  return heuristics_matrix",
     "objective": 5.85543,
     "other_inf": null
}