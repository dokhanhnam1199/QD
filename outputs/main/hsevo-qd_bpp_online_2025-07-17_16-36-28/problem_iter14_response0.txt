```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, waste, fill level, spread, and adaptive exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 1.0  # Basic fit check
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)  # Minimize waste

    mean_cap = np.mean(bins_remain_cap)
    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - mean_cap / 2)
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)  # Target half-full

    scaled_bins = bins_remain_cap[valid_bins] ** 2
    priorities[valid_bins] += scaled_bins / (np.sum(scaled_bins) + 1e-6)  # Spread

    # Adaptive exploration: higher randomness for nearly full bins
    nearly_full = bins_remain_cap[valid_bins] < item * 1.1
    random_weight = np.where(nearly_full, 0.02, 0.01)  # More exploration if needed
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * random_weight
    
    # Fit ratio component - prioritize closer fits and avoid near-full
    fit_ratio = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += (1 - np.abs(fit_ratio - 1)) - 0.01 * (bins_remain_cap[valid_bins] - item)

    return priorities
```
