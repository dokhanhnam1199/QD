```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Identify bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    
    if not np.any(valid_bins):
        # If no bin fits, prioritize the bin with largest remaining capacity
        priorities[np.argmax(bins_remain_cap)] = -1 #assign negative priority so that we will never assign to this bin by default

        return priorities
    
    # Give a base priority to bins where the item fits
    priorities[valid_bins] = 1.0
    
    # Prioritize bins that will have the least wasted space, but scaled.
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 2.0 / (1e-6 + wasted_space) # Scale wasted space

    # Prioritize bins based on how full they are getting (more full = better, but with diminishing returns)
    # Aim to fill bins completely, but avoid overfilling if possible.
    bin_utilization = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
    priorities[valid_bins] += np.clip(bin_utilization * 3, 0, 2) # Scale utilization, clip to avoid excessive priority

    # Add a small penalty to bins that are too empty, avoiding creating many almost-empty bins
    empty_bin_penalty = np.where(bins_remain_cap[valid_bins] > 0.75 * np.max(bins_remain_cap), -0.5, 0)
    priorities[valid_bins] += empty_bin_penalty

    return priorities
```
