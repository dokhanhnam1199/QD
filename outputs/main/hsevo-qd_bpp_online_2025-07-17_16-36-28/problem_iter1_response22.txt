```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins where the item fits. Prioritize bins that are closer to a perfect fit.
            # The closer the item size is to the remaining capacity, the higher the priority.
            # Adding a small penalty to almost full bins
            fit_ratio = item / cap
            priorities[i] = (1 - abs(fit_ratio - 1)) - 0.01*(cap-item)

            #Alternatively we can try this as well which is more deterministic:
            #priorities[i] = 1/(cap - item + 0.000001)  # Avoid division by zero. Prefer smaller remaining space after insertion

        else:
            # Item doesn't fit, so very low priority.  Set to a large negative value
            priorities[i] = -np.inf

    return priorities
```
