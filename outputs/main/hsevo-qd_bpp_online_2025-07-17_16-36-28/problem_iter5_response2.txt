```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1 to create effective heuristic."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 1.0 # Fits check
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space) # Minimize wasted space

    mean_cap = np.mean(bins_remain_cap)
    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - mean_cap/2)
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff) # Target Half-full

    scaled_bins = bins_remain_cap[valid_bins]**2
    priorities[valid_bins] += scaled_bins / (np.sum(scaled_bins) + 1e-6) # Spread items

    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01 # Break ties

    return priorities
```
