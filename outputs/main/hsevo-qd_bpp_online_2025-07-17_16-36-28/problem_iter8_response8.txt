```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space, target fill, item fit ratio, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # Wasted space component (minimize wasted space)
    remaining_cap_after_add = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (1e-6 + remaining_cap_after_add)

    # Target fill component (aim for half-full bins)
    half_full_diff = np.abs(remaining_cap_after_add - np.mean(bins_remain_cap) / 2)
    priorities[fit_mask] += 1.0 / (1e-6 + half_full_diff)

    # Fit ratio component (prioritize closer fits) - adapted from v1
    fit_ratio = item / bins_remain_cap[fit_mask]
    priorities[fit_mask] += (1 - np.abs(fit_ratio - 1))

    # Randomness for exploration
    priorities[fit_mask] += np.random.rand(np.sum(fit_mask)) * 0.01

    return priorities
```
