```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities using fit, waste, fill, fragmentation, & adaptive exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] += 1.0 # Feasibility

    wasted_space = bins_remain_cap[valid_bins] - item
    wasted_space_weight = min(1.0, item)
    priorities[valid_bins] += (1.0 / (1e-6 + wasted_space)) * wasted_space_weight

    target_fill = np.mean(bins_remain_cap) / 2.0
    fill_diff = np.abs(bins_remain_cap[valid_bins] - item - target_fill)
    fill_weight = 1 - (np.mean(bins_remain_cap) / np.max(bins_remain_cap))
    priorities[valid_bins] += (1.0 / (1e-6 + fill_diff)) * fill_weight

    occupied_space = np.max(bins_remain_cap) - bins_remain_cap[valid_bins]
    fragmentation_priority = occupied_space / (np.max(bins_remain_cap) + 1e-6)
    priorities[valid_bins] += fragmentation_priority

    nearly_full = bins_remain_cap[valid_bins] < item * 1.1
    random_weight = np.where(nearly_full, 0.02, 0.01)
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * random_weight

    return priorities
```
