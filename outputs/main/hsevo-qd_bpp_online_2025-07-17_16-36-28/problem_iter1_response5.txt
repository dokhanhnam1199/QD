```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. Waste minimization: Prioritizes bins where the remaining space after adding the item is small.
    2. Bin utilization: Rewards bins that are already relatively full.
    3. Avoiding near-empty bins: Penalizes placing an item in a nearly empty bin.
    4. Feasibility: Only considers bins with sufficient capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, all priorities remain zero.

    remaining_space = bins_remain_cap - item
    remaining_space[~feasible_bins] = np.inf  # Mark infeasible bins as having infinite remaining space

    # Waste minimization: Prefer bins that leave less remaining space (higher priority)
    waste_priority = -remaining_space

    # Bin utilization: Prefer bins that are already relatively full
    utilization_priority = 1 / (bins_remain_cap + 1e-9)  # Add a small constant to avoid division by zero
    utilization_priority[~feasible_bins] = 0 # set priority of infeasible bins to 0

    # Avoiding near-empty bins. Penalize placing the item if the bin will still have >90% capacity remaining *after* adding item.  If the bin is close to full already, then no penalty.
    near_empty_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1 # assumed fixed size of bin.
    near_empty_bins = remaining_space > 0.9 * bin_size # check which remaining space leads to near empty
    near_empty_penalty[near_empty_bins] = -1  # Large penalty for near-empty bins

    # Combine the priorities
    priorities = waste_priority + utilization_priority + near_empty_penalty

    # Infeasible bins get a very low priority to ensure they are not selected.
    priorities[~feasible_bins] = -np.inf

    return priorities
```
