```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit ratio and remaining capacity to determine priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # Fit ratio component: prioritize closer fits
    fit_ratio = item / bins_remain_cap[fit_mask]
    priorities[fit_mask] = 1 - np.abs(fit_ratio - 1)

    # Remaining capacity component: penalize bins with very little remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] -= np.clip(1 / (remaining_cap_after_add + 1e-9) -0.1, a_min=0, a_max=0.2)


    return priorities
```
