```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after placing the item in each bin.
    remaining_capacities = bins_remain_cap - item

    # High priority for bins where the item fits and leaves minimal waste.
    fit_mask = remaining_capacities >= 0
    if np.any(fit_mask):
        waste = remaining_capacities[fit_mask]
        priorities[fit_mask] = 1.0 / (1e-6 + waste)  # Smaller waste = higher priority
    else:
        # If no bin fits, prioritize the bin with least insufficient space,
        # but penalize severely.  This is a desperate measure.
        insufficient_space = item - bins_remain_cap
        priorities = -insufficient_space # Prioritize least insufficient bin. More negative = worse
        priorities = priorities - np.max(priorities) -1 # making all negative, but retaining ordering of which bin is the least bad.
    
    #Further prioritize almost full bins to minimize the # of bins opened.
    priorities = priorities + bins_remain_cap / np.sum(bins_remain_cap)
    
    return priorities
```
