```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for the online bin packing problem.

    This version incorporates adaptive elements and problem-specific knowledge
    to achieve improved packing efficiency. It considers aspects like
    remaining capacity distribution, item size relative to bin sizes, and
    introduces a dynamic exploration factor.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # Base priority for valid bins
    priorities[valid_bins] = 1.0

    # Minimize wasted space - scaled by item size
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += item / (1e-6 + wasted_space)

    # Encourage filling bins closer to a target level (e.g., 75% full)
    target_fill = 0.75  # Adjust as needed
    bin_size = bins_remain_cap.max() + item # Assuming all bins have same initial capacity
    target_capacity = target_fill * bin_size

    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - (bin_size - item) - target_capacity)
    priorities[valid_bins] += 1.0 / (1e-6 + fill_level_diff)

    # Balance bin usage - penalize bins with significantly larger remaining capacity
    capacity_ratio = bins_remain_cap[valid_bins] / (bin_size + 1e-6)
    priorities[valid_bins] += (1 - capacity_ratio)**2  # Higher priority for fuller bins

    # Adaptive exploration factor: Adjusts randomness based on problem state
    # More randomness when bins are relatively empty or very full
    avg_capacity = np.mean(bins_remain_cap)
    exploration_factor = np.clip(1 - np.abs(bins_remain_cap[valid_bins] - avg_capacity) / (bin_size + 1e-6), 0.01, 0.1) # Scale exploration with difference from mean capacity

    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * exploration_factor

    # Favor bins that are close to the item size
    size_difference = np.abs(bins_remain_cap[valid_bins] - item)
    priorities[valid_bins] += 1.0 / (1e-6 + size_difference)
    
    return priorities
```
