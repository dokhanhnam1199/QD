{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit, waste, target fill, spread with dynamic scaling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    priorities[valid_bins] = 1.0\n\n    wasted_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] += (item / (np.mean(bins_remain_cap[valid_bins]) + 1e-6)) / (1e-6 + wasted_space)\n\n    mean_cap = np.mean(bins_remain_cap)\n    target_level = max(mean_cap / 2, item * 0.75)\n    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - target_level)\n    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)\n\n    scaled_bins = bins_remain_cap[valid_bins]**2\n    priorities[valid_bins] += (scaled_bins / (np.sum(scaled_bins) + 1e-6)) * (mean_cap / (np.max(bins_remain_cap)+1e-6))\n\n    tiebreak_values = np.random.rand(np.sum(valid_bins))\n    size_diffs = np.abs(bins_remain_cap[valid_bins] - item)\n    normalized_size_diffs = size_diffs / (np.max(bins_remain_cap) + 1e-6)\n    priorities[valid_bins] += tiebreak_values * (1 - normalized_size_diffs) * 0.01\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to \"Current Self-Reflection\" for designing better heuristics:\n\n*   **Keywords:** Problem context, dynamic weighting, adaptive exploration, performance measurement.\n\n*   **Advice:** Focus on designing heuristics that dynamically adapt to the specific problem instance and phase. Prioritize measurable performance improvements over theoretical elegance.\n\n*   **Avoid:** Premature optimization, reliance on static parameters, ignoring the problem's nuances and edge cases.\n\n*   **Explanation:** Effective self-reflection analyzes *why* a heuristic works or fails in specific scenarios, guiding iterative refinement informed by empirical data. Don't just consider factors; understand their *impact* and interaction.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}