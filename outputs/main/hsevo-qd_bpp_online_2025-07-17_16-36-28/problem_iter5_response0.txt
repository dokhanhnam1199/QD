```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, wasted space, and balance considerations."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # Prioritize bins that can fit the item
    priorities[fit_mask] = 1.0

    # Score based on minimizing wasted space
    wasted_space = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (1e-6 + wasted_space)

    # Balance bin occupancy (try to achieve similar fill levels)
    mean_cap = np.mean(bins_remain_cap)
    diff_from_half = np.abs(bins_remain_cap[fit_mask] - item - mean_cap/2)
    priorities[fit_mask] += 1.0 / (1e-6 + diff_from_half)

    # Spread items across bins
    scaled_cap = bins_remain_cap[fit_mask]**2
    priorities[fit_mask] += scaled_cap / (np.sum(scaled_cap) + 1e-6)
    
    # Add a small random component to break ties
    priorities[fit_mask] += np.random.rand(np.sum(fit_mask)) * 0.01
    
    return priorities
```
