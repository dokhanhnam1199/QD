{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Reward bins where the item fits. Prioritize bins that are closer to a perfect fit.\n            # The closer the item size is to the remaining capacity, the higher the priority.\n            # Adding a small penalty to almost full bins\n            fit_ratio = item / cap\n            priorities[i] = (1 - abs(fit_ratio - 1)) - 0.01*(cap-item)\n\n            #Alternatively we can try this as well which is more deterministic:\n            #priorities[i] = 1/(cap - item + 0.000001)  # Avoid division by zero. Prefer smaller remaining space after insertion\n\n        else:\n            # Item doesn't fit, so very low priority.  Set to a large negative value\n            priorities[i] = -np.inf\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic considers:\n        1. Space utilization (closeness of item size to remaining capacity).\n        2. Avoidance of near-full bins unless necessary (discourages filling almost full bins further).\n        3. Preference for bins that can accommodate the item comfortably,\n           but not too much waste, i.e., balance.\n        4. Introduce a stochastic element for exploration and escape local optima, especially when bins are very similar.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate space utilization.  Prefer higher utilization, but penalize overfilling.\n    utilization = item / bins_remain_cap\n    utilization = np.clip(utilization, 0, 1) # cap it\n\n    # Calculate remaining space after adding the item.\n    remaining_space = bins_remain_cap - item\n    remaining_space[remaining_space < 0] = -1  # Make invalid (cannot accommodate) zero (it will then have small priority.\n\n    # Give preference to bins that can accommodate the item (positive remaining space).\n    valid_mask = remaining_space >= 0\n    priorities[valid_mask] += 1.0  # Base priority for valid bins\n\n    # Heuristic for space utilization for available slots:\n    #  - We prefer higher utilization (item_size / remaining_capacity) up to some point\n    #  - After that we give preference to slots that create a bin neither too full, nor too empty.\n    utilization_available = utilization[valid_mask]\n    remaining_available = remaining_space[valid_mask]\n\n    # Score based on space-left after fitting:\n    priorities[valid_mask] += np.exp(-np.abs(remaining_available - item / 2))  # Bell curve shaped prefrence around item/2\n\n    # Boost with utilization score (how well this item fills a bin), without going over 1.\n    priorities[valid_mask] += utilization_available\n    # Avoid near-full bins unless very small space available (discourage too full)\n\n    almost_full_bins_id = (remaining_available < (0.05 * item))\n    if almost_full_bins_id.any():\n      priorities[valid_mask][almost_full_bins_id] -= 0.5 # Penality\n\n    # Introduce a bit of randomness to avoid getting stuck in local minima:\n\n    priorities += np.random.normal(0, 0.001, size=priorities.shape)\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic utilizes numpy for vectorized operations to calculate priorities, while the worst directly calculates the ratio of item size to remaining capacity and takes the negative logarithm. (2nd) vs (19th) shows a similar pattern: the better heuristic calculates a fit ratio and penalizes based on wasted space, including handling cases where the item doesn't fit using `-np.inf`, whereas the worse only calculates the priority based on the ratio of item size to bin capacity and doesn't add a penalty.\nComparing (1st) vs (2nd), the 1st attempts to spread items and consider wasted space, while the 2nd focuses on fitting the items more closely. Comparing (3rd) vs (4th), these are the same code, indicating no difference in performance.\nComparing (2nd worst) vs (worst), the 19th is a duplicated code from 17th/18th, which calculates utilization ratios, penalizes almost-full bins, and boosts bins that can fit the item more than minimally. The 20th calculates priorities simply as the negative log of the item/bin capacity ratio. This implies more complex considerations in priority calculation work better.\n\nOverall: The better heuristics calculate priorities based on multiple factors, including wasted space, utilization ratios, and penalties for almost-full bins and spreading items accross bins to avoid fragmentation. Vectorized operations using NumPy are more efficient. Handling edge cases such as items that don't fit is also crucial. More complex consideration in priority calculation is better.\n- \nOkay, let's redefine \"Current Self-Reflection\" for better heuristic design.\n\n*   **Keywords:** Heuristic Improvement, Adaptive Strategy, Performance Profiling, Solution Diversity.\n*   **Advice:** Systematically explore the solution space by generating diverse candidate heuristics. Profile performance to identify bottlenecks. Design adaptive mechanisms to adjust heuristic parameters based on problem instance characteristics.\n*   **Avoid:** Premature optimization, relying solely on intuition without empirical validation, neglecting solution diversity.\n*   **Explanation:** Move beyond generic advice. Focus on structured exploration, data-driven analysis, and flexible adaptation for robust and efficient heuristics.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}