```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # I, Galileo, believe that the heavens are ordered, and so too must be our bins!
    # We seek balance and efficiency. First, let us consider only those bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)  # Initialize priorities to zero.

    # For eligible bins, calculate a priority based on a combination of factors:
    # 1. Remaining capacity:  Smaller remaining capacity is generally preferred to avoid excessive fragmentation.
    # 2. Item-bin ratio: How well the item fits into the bin. A tighter fit is favored.
    # 3. A slight preference for filling empty or near-empty bins to a moderate level first.
    
    for i in range(len(bins_remain_cap)):
        if eligible_bins[i]:
            remaining_cap = bins_remain_cap[i]
            ratio = item / remaining_cap
            
            # Give higher priority to bins that will be filled more completely. Avoid perfect fit to reduce computation.
            # Try to fill to 75% of the bins
            fill_percentage = item / (1 - 0.25)
            priorities[i] = (1/(abs(fill_percentage-remaining_cap)+ 0.0001)) + (1/ (remaining_cap + 0.0001))
            #if(remaining_cap>=item and item/(remaining_cap) >0.95):
            # priorities[i] =0


    # Return the priorities.
    return priorities
```
