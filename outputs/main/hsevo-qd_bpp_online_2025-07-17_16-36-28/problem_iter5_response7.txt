```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, wasted space, and fill level for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    priorities[valid_bins] = 1

    #Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Encourage bins to be near half full
    bin_size = np.max(bins_remain_cap) + item  # Infer full bin size
    half_full_diff = np.abs(bins_remain_cap[valid_bins] - bin_size / 2)
    priorities[valid_bins] += np.exp(-half_full_diff / (bin_size / 4))  # Gaussian-like preference

    return priorities
```
