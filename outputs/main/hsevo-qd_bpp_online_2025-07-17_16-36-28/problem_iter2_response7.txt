```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization focus with fragmentation avoidance."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        priorities = bins_remain_cap
        return priorities

    remaining_cap = bins_remain_cap[valid_bins] - item
    utilization = 1 - (remaining_cap / bins_remain_cap[valid_bins])
    priorities[valid_bins] = utilization

    almost_full = np.isclose(bins_remain_cap[valid_bins], item, rtol=0.05)
    priorities[valid_bins][almost_full] += 0.5

    too_empty = remaining_cap > 0.5 * np.max(bins_remain_cap)
    priorities[valid_bins][too_empty] -= 0.25

    # Bell curve preference around item/2
    priorities[valid_bins] += np.exp(-np.abs(remaining_cap - item / 2)) * 0.5

    return priorities
```
