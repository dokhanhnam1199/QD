```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for the online bin packing problem that combines
    several strategies for improved performance.  It focuses on fill level,
    waste minimization, and exploration of bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # 1. Feasibility Check: Prioritize bins that can accommodate the item
    priorities[valid_bins] += 1.0

    # 2. Minimize Wasted Space:  Prefer bins where the item fits best.  Use a squared
    #    term to aggressively penalize larger amounts of waste.
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space**2)  # Minimize wasted space, stronger effect

    # 3. Target Half-Full (or slightly more): Aim to fill bins near a target level.
    #    This can help reduce the overall number of bins used.  Experiment with
    #    different target fill levels.  Using a soft target instead of an exact
    #    match tends to perform better.
    target_fill = np.mean(bins_remain_cap) * 0.75 # Adjusted target to 75%
    fill_diff = np.abs(bins_remain_cap[valid_bins] - item - target_fill)
    priorities[valid_bins] += 1.0 / (1e-6 + fill_diff)

    # 4. Bin Balancing:  Encourage a more even distribution of items across bins.
    #    Instead of just using remaining capacity, consider the current fill level
    #    of each bin.
    scaled_bins = (bins_remain_cap[valid_bins])**3  # Increased scaling power
    priorities[valid_bins] += scaled_bins / (np.sum(scaled_bins) + 1e-6)  # Spread items

    # 5. Exploration/Diversification: Introduce a small degree of randomness to
    #    explore different bin placements, especially when priorities are close.
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.005 # Reduced randomness

    # 6.  Empty Bin Preference (Conditional): If there's an almost empty bin,
    #     strongly prefer it for the first few items to start packing effectively.
    #     This is an adaptive element.
    if np.any(bins_remain_cap > 0.95 * np.max(bins_remain_cap)):  # Almost empty check
        empty_bin_indices = np.where(bins_remain_cap > 0.95 * np.max(bins_remain_cap))[0]
        valid_empty_bins = np.intersect1d(empty_bin_indices, np.where(valid_bins)[0]) #Validate still fits.
        if len(valid_empty_bins) > 0:
           priorities[valid_empty_bins] += 2.0  #Strong preference for almost empty bins.

    return priorities
```
