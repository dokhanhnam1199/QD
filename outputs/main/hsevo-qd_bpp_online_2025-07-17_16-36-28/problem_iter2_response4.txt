```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization ratio, wasted space penalty, and spreading."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Utilization ratio for feasible bins.
    utilization_ratios = np.where(feasible_bins, item / bins_remain_cap, 0)
    priorities[feasible_bins] = utilization_ratios[feasible_bins]

    # Wasted space penalty.
    remaining_capacity_after_packing = bins_remain_cap - item
    almost_full_threshold = 0.95
    almost_full_penalty = np.where(remaining_capacity_after_packing > 0, np.where((bins_remain_cap - item) / bins_remain_cap < (1 - almost_full_threshold), -10, 0), 0)
    priorities += almost_full_penalty

    # Encourage spreading by penalizing small remaining space.
    capacity_target = np.mean(bins_remain_cap) / 3
    bonus = np.exp(-np.abs(remaining_capacity_after_packing - capacity_target))
    priorities += bonus
    priorities[~feasible_bins] = -np.inf

    return priorities
```
