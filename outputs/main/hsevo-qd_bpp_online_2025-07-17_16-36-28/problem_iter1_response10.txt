```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, consider bins that can fit the item.
    fit_indices = bins_remain_cap >= item
    
    if np.any(fit_indices):
      
        # Among bins that fit, prioritize bins with tighter fit (smaller wasted space).
        waste = bins_remain_cap[fit_indices] - item
        priorities[fit_indices] = 1 / (waste + 1e-9) # Add a small constant to avoid division by zero
        
        # Boost bins which nearly filled, giving greater fill rate:
        fill_rate = item / (bins_remain_cap[fit_indices])
        priorities[fit_indices] = priorities[fit_indices] * (1 + fill_rate)

    else:
        # If no bin fits, prioritize bins with the largest remaining capacity to minimize wasted space.  Penalize greatly compared to the "fit" case
        priorities = bins_remain_cap * 0.01 # Much smaller prioirities than when it fits
    
    return priorities
```
