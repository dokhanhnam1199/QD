```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Identify bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    
    if not np.any(valid_bins):
        # Item doesn't fit in any bin.  Consider a penalty or a very low priority.
        # Could also trigger a bin creation here in a more complex setting.
        return priorities  # All priorities remain zero

    # Give a base priority to bins where the item fits
    priorities[valid_bins] = 1.0

    # Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)  # Avoid division by zero

    # Prioritize bins that are relatively full (but still have space)
    # This encourages filling bins instead of spreading items too thinly.
    priorities[valid_bins] += (bins_remain_cap[valid_bins] / np.max(bins_remain_cap) )

    # Add a small randomness to break ties and explore different packings.
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01  # Scale randomness to be small
    
    # Penalize bins that become too full after adding the item.  We want to avoid bins that are nearly full.
    # This encourages using bins with more buffer if they are available.
    near_full_threshold = 0.1 # Tuning parameter: what constitutes "near full" (e.g., remaining capacity < 10% of bin size)
    near_full_bins = (remaining_cap_after_add[valid_bins] / np.max(bins_remain_cap)) < near_full_threshold
    priorities[valid_bins][near_full_bins] *= 0.5  # Reduce priority for these bins. Adjust scaling factor (0.5)
    

    return priorities
```
