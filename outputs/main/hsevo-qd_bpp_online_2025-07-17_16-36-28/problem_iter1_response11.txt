```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have enough space for the item
    but avoids bins that are *too* empty after the item is placed,
    to maximize bin utilization and reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        #If no bin can accomodate, assign uniform priority based on space left
        priorities = bins_remain_cap
        return priorities

    # Calculate remaining capacity after placing the item in valid bins
    remaining_cap = bins_remain_cap[valid_bins] - item

    # High priority to bins that would be well-utilized
    # After filling the bin.
    # Penalize bins that would have too little capacity remaining
    utilization = 1 - (remaining_cap / bins_remain_cap[valid_bins])
    priorities[valid_bins] = utilization # Basic utilisation score

    # Further adjustments to the priority:
    # 1. Bins with capacity almost equal to the item size get higher priority (First Fit heuristic tweak)
    almost_full = np.isclose(bins_remain_cap[valid_bins], item, rtol=0.05) #within 5%
    priorities[valid_bins][almost_full] += 0.5

    #2. Penalize bins that after putting the item would be too empty, creating fragmenation
    # Here, if the resulting remaining capacity is more than, say, 50% of the total bin size, we penalize.
    too_empty = remaining_cap > 0.5 * np.max(bins_remain_cap) #Compare remaining space to max remaining space
    priorities[valid_bins][too_empty] -= 0.25

    return priorities
```
