```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit ratio, energy landscape, and wasted space for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities # No valid bins

    # Fit ratio component: prioritize closer fits
    fit_ratio = item / bins_remain_cap[fit_mask]
    priorities[fit_mask] = 1 - np.abs(fit_ratio - 1)

    # Energy landscape component: disincentivize largely empty bins
    priorities[fit_mask] /= (bins_remain_cap[fit_mask] + 1e-9)

    # Wasted space component: prioritize bins with less wasted space after adding the item.
    remaining_cap_after_add = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (remaining_cap_after_add + 1e-9)

    return priorities
```
