```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Identify bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    
    if not np.any(valid_bins):
        # If no bin can fit the item, prioritize the fullest bin (least remaining capacity)
        priorities = 1.0 / (bins_remain_cap + 1e-6)
        return priorities

    # Give a high base priority to bins where the item fits
    priorities[valid_bins] = 1.0

    # Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Try to spread items across bins while also considering fullness
    # A bin is considered "near full" if its remaining capacity is less than, say, 20% of total capacity.
    bin_capacity = np.max(bins_remain_cap) #Assuming all bins have the same initial capacity.
    near_full_threshold = 0.2 * bin_capacity

    # Scale spreading factor based on whether the bin is near full
    spreading_factor = np.where(bins_remain_cap[valid_bins] > near_full_threshold,
                                 bins_remain_cap[valid_bins] / (np.sum(bins_remain_cap[valid_bins]) + 1e-6),
                                 0.5 * bins_remain_cap[valid_bins] / (np.sum(bins_remain_cap[valid_bins]) + 1e-6))  # Reduce spreading effect for near-full bins

    priorities[valid_bins] += spreading_factor

    # Introduce a small penalty for bins that are already very full, to encourage using emptier bins if possible.
    # This is a refinement to avoid completely filling one bin before using others.
    very_full_threshold = 0.1 * bin_capacity
    very_full_bins = bins_remain_cap[valid_bins] < very_full_threshold
    priorities[valid_bins][very_full_bins] *= 0.9  # Reduce priority slightly

    return priorities
```
