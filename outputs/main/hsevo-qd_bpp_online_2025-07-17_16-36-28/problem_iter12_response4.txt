```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """A more refined heuristic for online bin packing, focusing on balance and adaptability."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # 1. Fit Check (Essential)
    priorities[valid_bins] += 1.0

    # 2. Minimize Wasted Space (but with scaling to avoid over-prioritization of tiny wastes)
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space * bins_remain_cap[valid_bins])

    # 3. Target Half-Full, but more flexibly
    mean_cap = np.mean(bins_remain_cap)
    half_full_target = mean_cap / 2.0
    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - half_full_target)
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)

    # 4. Bin Utilization - Encourage filling bins that are already relatively full
    relative_fill = (bins_remain_cap[valid_bins]) / (np.max(bins_remain_cap) + 1e-6) #Normalize bin capacity
    priorities[valid_bins] += relative_fill

    # 5. Introduce a bias towards bins with more available capacity if the item is relatively large
    item_relative_size = item / (np.max(bins_remain_cap) + 1e-6)
    priorities[valid_bins] += bins_remain_cap[valid_bins] * item_relative_size

    # 6. Randomization (but smaller, and adaptive)
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.005  # Smaller randomness

    return priorities
```
