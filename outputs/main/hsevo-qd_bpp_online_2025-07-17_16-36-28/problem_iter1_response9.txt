```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Calculate the waste if the item were placed in each bin
    waste = bins_remain_cap - item

    # Assign high priority to bins where the item fits
    # and low waste remains
    valid_bins = waste >= 0

    if np.any(valid_bins):
        priorities[valid_bins] = 1 / (waste[valid_bins] + 0.0001) # Add small constant to avoid division by zero
        # Also consider bins that are nearly full already. Encourages filling bins and reduces external fragmentation.
        nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= item*1.1) #tolerate a bit bigger than item size because its close
        priorities[nearly_full] += 10 # Adding constant bonus to already full bins
    else:
        # Item does not fit any bin. return inverse of remaining capacity
        priorities = 1/ (bins_remain_cap + 0.0001)

    return priorities
```
