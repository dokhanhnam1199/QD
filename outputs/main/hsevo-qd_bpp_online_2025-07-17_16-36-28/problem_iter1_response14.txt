```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function combines several heuristics:
    1.  Remaining capacity (favor bins with more remaining space to avoid fragmentation).
    2.  Ratio of item size to remaining capacity (favor bins where the item fits reasonably well).
    3.  A "perfect fit" bonus: if an item fits almost perfectly, greatly increase the priority.
    4.  Penalize bins where the item doesn't fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            # Item doesn't fit, very low priority
            priorities[i] = -np.inf
        else:
            # Primary Priority: Favor larger remaining capacity
            priorities[i] += cap

            # Secondary Priority: Consider ratio
            ratio = item / cap
            priorities[i] += (1 - ratio)  # Smaller ratio (item is small relative to capacity) gets higher priority

            # Bonus for "perfect fit" (item fits with minimal waste)
            if 0 < (cap - item) < 0.1:  # Adjust the 0.1 for desired perfect fit window
                priorities[i] += 10  # Huge bonus for near-perfect fit

            # Adjustments to priorities (feel free to tweak)
            priorities[i] += 1 # slight additive offset to ensure the item always gets placed, no matter the bin.
            priorities[i] += (item * 0.5) # slight bias towards using some of the space

    return priorities
```
