{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Calculates bin priorities considering fit, waste, fill level, and spread.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap - item >= 0\n\n    if not np.any(valid_bins):\n        return priorities\n\n    priorities[valid_bins] = 1.0  # Fit check\n    wasted_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)  # Minimize waste\n\n    mean_cap = np.mean(bins_remain_cap)\n    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - mean_cap / 2)\n    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)  # Half-full target\n\n    scaled_bins = bins_remain_cap[valid_bins] ** 2\n    priorities[valid_bins] += scaled_bins / (np.sum(scaled_bins) + 1e-6)  # Spread items\n\n    # Adaptive exploration: higher randomness for nearly full bins\n    nearly_full = bins_remain_cap[valid_bins] < item * 1.1\n    random_weight = np.where(nearly_full, 0.02, 0.01)  # more exploration if nearly full\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * random_weight\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    An enhanced priority function for the online bin packing problem.\n\n    This version incorporates adaptive elements and problem-specific knowledge\n    to achieve improved packing efficiency. It considers aspects like\n    remaining capacity distribution, item size relative to bin sizes, and\n    introduces a dynamic exploration factor.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap - item >= 0\n\n    if not np.any(valid_bins):\n        return priorities\n\n    # Base priority for valid bins\n    priorities[valid_bins] = 1.0\n\n    # Minimize wasted space - scaled by item size\n    wasted_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] += item / (1e-6 + wasted_space)\n\n    # Encourage filling bins closer to a target level (e.g., 75% full)\n    target_fill = 0.75  # Adjust as needed\n    bin_size = bins_remain_cap.max() + item # Assuming all bins have same initial capacity\n    target_capacity = target_fill * bin_size\n\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - (bin_size - item) - target_capacity)\n    priorities[valid_bins] += 1.0 / (1e-6 + fill_level_diff)\n\n    # Balance bin usage - penalize bins with significantly larger remaining capacity\n    capacity_ratio = bins_remain_cap[valid_bins] / (bin_size + 1e-6)\n    priorities[valid_bins] += (1 - capacity_ratio)**2  # Higher priority for fuller bins\n\n    # Adaptive exploration factor: Adjusts randomness based on problem state\n    # More randomness when bins are relatively empty or very full\n    avg_capacity = np.mean(bins_remain_cap)\n    exploration_factor = np.clip(1 - np.abs(bins_remain_cap[valid_bins] - avg_capacity) / (bin_size + 1e-6), 0.01, 0.1) # Scale exploration with difference from mean capacity\n\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * exploration_factor\n\n    # Favor bins that are close to the item size\n    size_difference = np.abs(bins_remain_cap[valid_bins] - item)\n    priorities[valid_bins] += 1.0 / (1e-6 + size_difference)\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristic uses a combination of factors like fit, wasted space, target fill, and spreading items, along with a small random component for tie-breaking. The worst heuristic solely relies on the log of the item size to bin capacity ratio.\n\nComparing (3rd) vs (4th), the only difference is in the docstring. The function is functionally equivalent, therefore, their performance should be identical.\n\nComparing (1st) vs (6th), both functions calculate priorities based on similar factors (fit, wasted space, half-full target, spreading). However, the top heuristic is more concise and uses slightly more efficient numpy operations.\n\nComparing (11th) vs (15th), the 11th heuristic incorporates adaptive weighting, a target fill level that dynamically adjusts, a bin fragmentation penalty, and a controlled exploration mechanism. This makes it much more sophisticated than the 15th heuristic which just calculates a log ratio.\n\nComparing (second worst) vs (worst), we see both heuristics perform the same calculation, using the log ratio of item size to bin capacity to determine priority. This approach is much simpler compared to the higher ranked heuristics which combine multiple factors.\n\nOverall: The better heuristics combine multiple factors influencing bin packing efficiency. They consider not only whether an item fits but also the amount of wasted space, the target fill level of bins, and the desire to spread items across bins. Adaptive weights and controlled exploration (randomness) further improve performance. Simpler heuristics relying on a single factor perform significantly worse.\n- \nOkay, let's refine the concept of \"Current self-reflection\" to make it truly effective for heuristic design, focusing on actionable insights and avoiding common pitfalls.\n\nHere's a redefined approach, designed to avoid the weaknesses of the 'Ineffective self-reflection':\n\n*   **Keywords:** Problem Understanding, Adaptive Strategies, Computational Efficiency, Exploration-Exploitation Balance, Validation.\n*   **Advice:** Deeply analyze problem structure and constraints. Prioritize computationally efficient implementations. Design heuristics that dynamically adapt to instance characteristics. Rigorously test and validate heuristic performance across diverse datasets.\n*   **Avoid:** Vague generalities, focusing on single factors in isolation, premature optimization, neglecting edge cases and stability.\n*   **Explanation:** Move beyond surface-level advice. Emphasize understanding the underlying problem, designing adaptable strategies, and systematically validating performance. Prioritize efficiency without sacrificing the exploration of the solution space.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}