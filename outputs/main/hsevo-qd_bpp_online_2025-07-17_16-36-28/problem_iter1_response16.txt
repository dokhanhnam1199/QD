```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Hawking Radiation Inspired Priority:
    # Smaller bins radiating more intensely (higher priority) if the item can fit.
    # Avoid excessive fragmentation: prioritize bins that fit the item snugly.
    # Introduce a stochastic element mimicking quantum uncertainty (exploration).

    priorities = np.zeros_like(bins_remain_cap)

    # Step 1: Identify feasible bins (those with enough remaining capacity)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # No feasible bins, all priorities remain 0. Might want to open a new bin then
        return priorities

    # Step 2: Calculate Hawking-inspired "radiation intensity" for feasible bins.
    # In Hawking radiation, smaller black holes radiate more. Apply a similar concept here.
    radiation_intensity = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)  # Avoid division by zero

    # Step 3: Apply a "snug fit" bonus: the closer the fit, the higher the priority.
    snug_fit_bonus = np.exp(-np.abs(bins_remain_cap[feasible_bins] - item))

    # Step 4: Combine radiation intensity and snug fit bonus.
    priorities[feasible_bins] = radiation_intensity * snug_fit_bonus

    # Step 5: Introduce a small stochastic element (exploration).
    noise = np.random.normal(0, 0.01, size=np.sum(feasible_bins)) #Adjust scale as needed
    priorities[feasible_bins] += noise

    #Normalize to make it a probability distribution-like, although not strictly necessary
    priorities = priorities / (np.sum(priorities) + 1e-9)

    return priorities
```
