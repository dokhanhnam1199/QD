```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A heuristic based on:
    1. Utilization of space, prioritizing bins that would be well-utilized after adding the item.
    2. Avoiding fragmentation, penalizing bins where adding the item leaves a small, unusable remainder.
    3. Bin proximity, prioritizing bins that are relatively close to being full without being overfilled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_cap in enumerate(bins_remain_cap):
        if item <= remaining_cap:
            # Utilization: higher priority for bins that, after packing, will be better utilized.
            utilization = (item / remaining_cap)**0.5 #Square root damps the effect.

            # Fragmentation penalty: reduce priority if too much space is wasted. Avoid bins with capacity slightly greater than item
            waste = remaining_cap - item
            fragmentation_penalty = 0.0
            if waste > 0:
                fragmentation_penalty = (waste / remaining_cap)**2 #Quadratic penalty. Increase fast with waste. Prevent fragmentation

            #Bin Proximity (avoid almost empty and almost full).
            proximity = np.exp(-((remaining_cap - item) / item) **2 ) #Gaussian centered on remaining_cap == item.

            priorities[i] = utilization * proximity - fragmentation_penalty

    return priorities
```
