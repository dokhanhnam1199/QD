{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins that can fit the item snugly (small wasted space),\n    but also avoids bins that are almost full to reduce fragmentation.\n    It incorporates a sigmoid function to balance these two aspects.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate wasted space for each bin\n    wasted_space = bins_remain_cap - item\n\n    # Bins that can't fit the item get a very low priority\n    priorities = np.where(wasted_space < 0, -np.inf, 0.0)\n\n    # For bins that *can* fit the item:\n\n    # 1. Calculate \"snugness\":  Inversely proportional to wasted space.  Smaller waste is better.\n    # Avoid division by zero by adding a small epsilon.\n    snugness = 1 / (wasted_space + 1e-9)\n    snugness = np.nan_to_num(snugness, nan=0.0, posinf=0.0, neginf=0.0)  # Handle potential infinities.\n\n    # 2. Calculate \"fragmentation risk\": high when the remaining capacity is close to the item size.\n    #  This is where the sigmoid comes in.\n    #  Sigmoid will be close to 1 when item size approaches bin capacity, and close to 0 if its almost empty.\n    # Higher sigmoid means bins which has smaller space compared to item\n    sigmoid_input = 5 * (bins_remain_cap - item) / bins_remain_cap  # Scale the difference\n    fragmentation_risk = 1 / (1 + np.exp(-sigmoid_input))  # Sigmoid function\n\n\n    # 3. Combine snugness and fragmentation risk\n    priorities = np.where(wasted_space >= 0, snugness * (1-fragmentation_risk), priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing a heuristic inspired by gravitational potential energy\n    and a dash of spring-like force to achieve more refined bin packing.\n    A lower potential energy (more filled bin) indicates higher priority,\n    but we add a 'spring force' term penalizing near-overflowing bins.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Gravitational Potential Energy analogy: Lower energy is preferred (more filled)\n    potential_energy = bins_remain_cap\n\n    # Spring-like force: Penalize bins that are too close to overflowing (small remaining capacity).\n    #This will simulate resistance when a bin is almost full, and it prevents to fill up such bin.\n    spring_constant = 1.0  # Adjust to control the strength of the spring force\n    spring_force = np.where(bins_remain_cap < item, -np.inf, spring_constant * (item - bins_remain_cap))\n    #Use spring_force = -np.exp(-bins_remain_cap+item) instead of spring_force = spring_constant * (item - bins_remain_cap) when overflow situation could happen.\n    # Total priority combines \"gravitational\" and \"spring\" terms, inverting the sum for maximization.\n\n    priorities = - (potential_energy + spring_force) #high score for high density after packing, penalty for overflow.\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic utilizes numpy for vectorized operations to calculate priorities, while the worst directly calculates the ratio of item size to remaining capacity and takes the negative logarithm. (2nd) vs (19th) shows a similar pattern: the better heuristic calculates a fit ratio and penalizes based on wasted space, including handling cases where the item doesn't fit using `-np.inf`, whereas the worse only calculates the priority based on the ratio of item size to bin capacity and doesn't add a penalty.\nComparing (1st) vs (2nd), the 1st attempts to spread items and consider wasted space, while the 2nd focuses on fitting the items more closely. Comparing (3rd) vs (4th), these are the same code, indicating no difference in performance.\nComparing (2nd worst) vs (worst), the 19th is a duplicated code from 17th/18th, which calculates utilization ratios, penalizes almost-full bins, and boosts bins that can fit the item more than minimally. The 20th calculates priorities simply as the negative log of the item/bin capacity ratio. This implies more complex considerations in priority calculation work better.\n\nOverall: The better heuristics calculate priorities based on multiple factors, including wasted space, utilization ratios, and penalties for almost-full bins and spreading items accross bins to avoid fragmentation. Vectorized operations using NumPy are more efficient. Handling edge cases such as items that don't fit is also crucial. More complex consideration in priority calculation is better.\n- \nOkay, let's redefine \"Current Self-Reflection\" for better heuristic design.\n\n*   **Keywords:** Heuristic Improvement, Adaptive Strategy, Performance Profiling, Solution Diversity.\n*   **Advice:** Systematically explore the solution space by generating diverse candidate heuristics. Profile performance to identify bottlenecks. Design adaptive mechanisms to adjust heuristic parameters based on problem instance characteristics.\n*   **Avoid:** Premature optimization, relying solely on intuition without empirical validation, neglecting solution diversity.\n*   **Explanation:** Move beyond generic advice. Focus on structured exploration, data-driven analysis, and flexible adaptation for robust and efficient heuristics.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}