import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                valid_bin_priority: float = 0.6819266480456518,
                wasted_space_epsilon: float = 4.928005035012728e-07,
                half_full_diff_epsilon: float = 3.2211307986749752e-06,
                spread_items_epsilon: float = 9.543736857067582e-06,
                random_component_weight: float = 0.04833710799565915) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        valid_bin_priority: Priority added to valid bins. Default is 1.0.
        wasted_space_epsilon: Epsilon to avoid division by zero when prioritizing bins with least wasted space. Default is 1e-6.
        half_full_diff_epsilon: Epsilon to avoid division by zero when prioritizing bins closer to half-full. Default is 1e-6.
        spread_items_epsilon: Epsilon to avoid division by zero when spreading items across bins. Default is 1e-6.
        random_component_weight: Weight of the random component added to break ties. Default is 0.01.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item

    # Give a high priority to bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    if not np.any(valid_bins):
        return priorities # No valid bins, all priorities remain 0

    priorities[valid_bins] = valid_bin_priority

    # Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (wasted_space_epsilon + wasted_space)

    # Prioritize bins closer to half-full after adding the item
    half_full_diff = np.abs(remaining_cap_after_add[valid_bins] - np.mean(bins_remain_cap) / 2) # Try to make bins uniformly occupied
    priorities[valid_bins] += 1.0 / (half_full_diff_epsilon + half_full_diff)

    #Scale the bin_remain_cap to emphasize almost full bins
    scaled_bins_remain_cap = bins_remain_cap[valid_bins]**2

    # Try to spread items across bins if possible, less important when nearing full bins
    priorities[valid_bins] += scaled_bins_remain_cap / np.sum(scaled_bins_remain_cap + spread_items_epsilon)

    # Add a small random component to break ties and explore different solutions
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * random_component_weight

    return priorities
