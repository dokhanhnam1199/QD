```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is only feasible if the item fits.
    feasible_bins = bins_remain_cap >= item

    # If no bin can fit item, assign minimum priority (this should ideally never happen).
    if not np.any(feasible_bins):
        return priorities - np.inf  # Assign very low priority to all bins

    # Prioritize bins that can fit the item and have the least remaining capacity after packing, but not too little.
    remaining_capacity_after_packing = bins_remain_cap - item
    # Bins which cannot fit have rem cap as negative. Convert to infinity so that feasible is always preferred
    remaining_capacity_after_packing[remaining_capacity_after_packing < 0] = np.inf

    # Give higher priority to bins with low remaining capacity *after* packing
    priorities = -remaining_capacity_after_packing

    # Add a bonus to bins whose remaining capacity after packing is still significant
    # This prevents bins from being overly packed. Set the target to ~ 1/3 or 1/4 bin usage
    capacity_target = np.mean(bins_remain_cap)/3
    bonus = np.exp(-np.abs(remaining_capacity_after_packing - capacity_target))

    priorities = priorities + bonus


    # Zero out priority for infeasible bins
    priorities[~feasible_bins] = -np.inf

    return priorities
```
