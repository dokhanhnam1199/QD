```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates bin priorities considering fit, wasted space, and randomness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Prioritize fitting bins
    fit_priority = 1.0
    priorities[valid_bins] += fit_priority

    # Prioritize bins with least wasted space
    wasted_space = bins_remain_cap[valid_bins] - item
    min_wasted_space = np.min(wasted_space)
    wasted_space_priority = 1.0 / (wasted_space + 1e-6)  # Avoid division by zero
    priorities[valid_bins] += wasted_space_priority

    # Add small random component to break ties
    random_component = 0.01 * np.random.rand(np.sum(valid_bins))
    priorities[valid_bins] += random_component

    return priorities
```
