```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more refined priority function that combines several strategies for online bin packing.
    This version aims to improve bin utilization and reduce the number of bins used by:
        1. Prioritizing bins that are already relatively full to encourage consolidation.
        2. Considering the item size relative to the average remaining capacity.
        3. Introducing a small penalty for bins with very little remaining capacity after packing.
        4. Adding a random factor for tie-breaking.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): An array of the remaining capacities of each bin.

    Returns:
        np.ndarray: An array of priority scores for each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # 1. Prioritize bins already relatively full
    priorities[valid_bins] += bins_remain_cap[valid_bins] / np.max(bins_remain_cap[valid_bins])

    # 2. Item size relative to average remaining capacity
    mean_cap = np.mean(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap[valid_bins] - mean_cap)
    priorities[valid_bins] += 1.0 / (1e-6 + capacity_diff)


    # 3. Penalty for bins with very little remaining capacity after packing
    remaining_after_pack = bins_remain_cap[valid_bins] - item
    small_capacity_penalty = np.where(remaining_after_pack < 0.1 * np.max(bins_remain_cap), -0.5, 0)  # Penalize if remaining is less than 10% max cap
    priorities[valid_bins] += small_capacity_penalty

    # 4. Random tie-breaking
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01

    return priorities
```
