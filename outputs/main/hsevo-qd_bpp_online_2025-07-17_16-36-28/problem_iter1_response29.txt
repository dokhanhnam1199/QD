```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins with remaining capacity closest to the item size,
    but also considers bins that can accommodate multiple items of similar size.
    Uses a combination of absolute difference in remaining capacity and a normalized capacity factor.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between remaining capacity and item size
    diff = np.abs(bins_remain_cap - item)

    # Calculate a capacity factor.  Bins with very small capacity compared to item size get a very low factor. Bins that can take item more than once also get penalized
    capacity_factor = np.clip(bins_remain_cap / item, 0.1, 1.5) # Lower clipping to avoid infinite priority.

    # Combine the difference and capacity factor to calculate the priority
    priorities = capacity_factor / (1 + diff) # Dividing by (1 + diff) ensures that smaller differences yield higher priority

    #Set priority to 0 for bins that can't fit the item
    priorities[bins_remain_cap < item] = 0

    return priorities
```
