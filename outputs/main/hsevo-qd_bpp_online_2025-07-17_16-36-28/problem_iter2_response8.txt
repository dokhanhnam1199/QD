```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1.
    Balances close fit with avoiding near-full bins.
    """
    priorities = np.zeros_like(bins_remain_cap)
    fit_mask = bins_remain_cap >= item

    # Calculate remaining difference for fitting bins
    remaining_diff = bins_remain_cap - item
    priorities[fit_mask] = 1.0 / (remaining_diff[fit_mask] + 0.0001)

    # Penalize near-full bins severely. Adjust the threshold dynamically.
    near_full_threshold = 0.1 * np.mean(bins_remain_cap)  # Dynamic threshold based on avg capacity
    nearly_full_mask = bins_remain_cap < near_full_threshold
    priorities[nearly_full_mask] = -1e9

    # Capacity factor like v0, but applied only to fitting bins.
    capacity_factor = np.clip(bins_remain_cap[fit_mask] / item, 0.1, 1.5)
    priorities[fit_mask] *= capacity_factor

    return priorities
```
