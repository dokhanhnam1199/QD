```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item with minimal waste.
    It also incorporates a term that encourages filling bins that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Filter bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can fit the item, prioritize the bin with largest remaining capacity.
        priorities = bins_remain_cap
        return priorities

    # Calculate waste for bins that can fit the item
    waste = bins_remain_cap[valid_bins] - item
    
    # Prioritize bins with smallest waste
    priorities[valid_bins] = -waste

    #Add bonus for bins that are already somewhat full (avoid creating many almost-empty bins)
    # The more full the bin is (without overflowing), the higher the bonus.
    priorities[valid_bins] += (bins_remain_cap[valid_bins] / np.sum(bins_remain_cap))

    return priorities
```
