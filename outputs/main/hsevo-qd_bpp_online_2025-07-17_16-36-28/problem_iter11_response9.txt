```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities considering fit, waste, fill level, and exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 1.0  # Fit check
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += item / (1e-6 + wasted_space)  # Minimize waste, scaled by item

    bin_size = bins_remain_cap.max() + item # Assuming all bins have same initial capacity
    target_fill = 0.75
    target_capacity = target_fill * bin_size

    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - (bin_size - item) - target_capacity)
    priorities[valid_bins] += 1.0 / (1e-6 + fill_level_diff) # Target fill level

    # Adaptive exploration based on bin fullness
    avg_capacity = np.mean(bins_remain_cap)
    exploration_factor = np.clip(1 - np.abs(bins_remain_cap[valid_bins] - avg_capacity) / (bin_size + 1e-6), 0.01, 0.1)
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * exploration_factor
    
    return priorities
```
