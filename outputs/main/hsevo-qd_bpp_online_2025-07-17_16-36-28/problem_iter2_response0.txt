```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns bin priorities considering fit, wasted space, and bin utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return priorities # No possible bin
    
    remaining_cap_after_add = bins_remain_cap - item
    wasted_space = remaining_cap_after_add[valid_bins]

    # Base priority for bins that can fit the item
    priorities[valid_bins] = 1.0

    # Prioritize bins with less wasted space
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Prioritize bins to encourage spreading items
    priorities[valid_bins] += bins_remain_cap[valid_bins] / (np.sum(bins_remain_cap[valid_bins]) + 1e-6)
    
    # Bonus for bins that are not too full after adding the item
    utilization_ratio = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    priorities[valid_bins] += np.clip(utilization_ratio, 0, 1) #avoid negative values

    return priorities
```
