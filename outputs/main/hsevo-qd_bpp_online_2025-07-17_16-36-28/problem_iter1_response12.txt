```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a heuristic inspired by gravitational potential energy
    and a dash of spring-like force to achieve more refined bin packing.
    A lower potential energy (more filled bin) indicates higher priority,
    but we add a 'spring force' term penalizing near-overflowing bins.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Gravitational Potential Energy analogy: Lower energy is preferred (more filled)
    potential_energy = bins_remain_cap

    # Spring-like force: Penalize bins that are too close to overflowing (small remaining capacity).
    #This will simulate resistance when a bin is almost full, and it prevents to fill up such bin.
    spring_constant = 1.0  # Adjust to control the strength of the spring force
    spring_force = np.where(bins_remain_cap < item, -np.inf, spring_constant * (item - bins_remain_cap))
    #Use spring_force = -np.exp(-bins_remain_cap+item) instead of spring_force = spring_constant * (item - bins_remain_cap) when overflow situation could happen.
    # Total priority combines "gravitational" and "spring" terms, inverting the sum for maximization.

    priorities = - (potential_energy + spring_force) #high score for high density after packing, penalty for overflow.
    return priorities
```
