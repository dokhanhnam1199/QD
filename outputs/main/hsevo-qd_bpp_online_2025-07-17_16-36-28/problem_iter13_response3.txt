import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_priority: float = 1.5046895869595223, wasted_space_weight: float = 1.2205349440970406,
                half_full_weight: float = 0.8690034851911159, spread_weight: float = 0.28447988519366363, random_weight: float = 0.05843344975666462,
                epsilon: float = 1.2610323994725302e-06, half_full_scaling: float = 2.0764214452888035) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        fit_priority: Priority score for bins where the item fits.
        wasted_space_weight: Weight of the wasted space component.
        half_full_weight: Weight of the half-full component.
        spread_weight: Weight of the spread component.
        random_weight: Weight of the random component.
        epsilon: Small value to avoid division by zero.
        half_full_scaling: Scaling exponent for bin remaining capacities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item

    # Give a high priority to bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    if not np.any(valid_bins):
        return priorities # No valid bins, all priorities remain 0

    priorities[valid_bins] = fit_priority

    # Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += wasted_space_weight / (epsilon + wasted_space)

    # Prioritize bins closer to half-full after adding the item
    half_full_diff = np.abs(remaining_cap_after_add[valid_bins] - np.mean(bins_remain_cap) / 2) # Try to make bins uniformly occupied
    priorities[valid_bins] += half_full_weight / (epsilon + half_full_diff)

    #Scale the bin_remain_cap to emphasize almost full bins
    scaled_bins_remain_cap = bins_remain_cap[valid_bins]**half_full_scaling

    # Try to spread items across bins if possible, less important when nearing full bins
    priorities[valid_bins] += spread_weight * scaled_bins_remain_cap / np.sum(scaled_bins_remain_cap + epsilon)

    # Add a small random component to break ties and explore different solutions
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * random_weight

    return priorities
