```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins for an item, considering fit, wasted space, and spreading."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 1.0

    #Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Try to spread items across bins
    priorities[valid_bins] += bins_remain_cap[valid_bins] / (np.sum(bins_remain_cap[valid_bins]) + 1e-6)
    
    #Further prioritize bins closer to half-full (if feasible)
    bin_capacity = bins_remain_cap[valid_bins] + item #approximating bin capacity
    half_full_diff = np.abs(bin_capacity/2 - (bin_capacity - wasted_space))
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)

    return priorities
```
