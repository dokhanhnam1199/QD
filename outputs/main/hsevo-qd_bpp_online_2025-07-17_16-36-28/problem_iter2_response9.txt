```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines snugness, fragmentation risk, and potential energy for priority."""

    wasted_space = bins_remain_cap - item
    priorities = np.where(wasted_space < 0, -np.inf, 0.0)

    snugness = 1 / (wasted_space + 1e-9)
    snugness = np.nan_to_num(snugness, nan=0.0, posinf=0.0, neginf=0.0)

    sigmoid_input = 5 * (bins_remain_cap - item) / bins_remain_cap
    fragmentation_risk = 1 / (1 + np.exp(-sigmoid_input))

    potential_energy = bins_remain_cap / np.max(bins_remain_cap) # Normalize potential energy

    priorities = np.where(wasted_space >= 0, snugness * (1 - fragmentation_risk) - potential_energy, priorities)
    return priorities
```
