```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function that balances bin utilization, item fragmentation,
    and exploration of potentially better placements.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # 1. Bin Utilization: Favor bins that will be reasonably full after packing.
    priorities[valid_bins] += (bins_remain_cap[valid_bins] - item) / np.max(bins_remain_cap) # Normalize wasted space

    # 2. Item Fragmentation Avoidance: Penalize bins that cause small remaining space.
    remaining_space = bins_remain_cap[valid_bins] - item
    fragmentation_penalty = np.exp(-remaining_space * 10)  # Exponential penalty for very small remaining space. Adjust the factor (10) as needed.
    priorities[valid_bins] -= fragmentation_penalty

    # 3. Balance Strategy: Dynamically adjust balance between exploration and exploitation based on the state of the bins.
    bin_utilization_rate = np.mean((bins_remain_cap - np.min(bins_remain_cap)) / np.max(bins_remain_cap))

    # Explore only if we have decent utilization
    if bin_utilization_rate > 0.2:
      priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.05  # Add a touch of randomness for exploration.
    else: # Force compaction
      priorities[valid_bins] += bins_remain_cap[valid_bins] / np.max(bins_remain_cap)

    # 4. Prioritize nearly full bins
    nearly_full = (bins_remain_cap[valid_bins] - item) < (0.1 * np.max(bins_remain_cap))
    priorities[valid_bins][nearly_full] += 0.5

    #5. Prioritize small remaining space
    priorities[valid_bins] += 1.0 / (0.00001 + bins_remain_cap[valid_bins] - item)

    return priorities
```
