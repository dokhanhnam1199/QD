```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a more nuanced approach based on 'quantum tunneling'
    probability metaphor - the closer to fitting perfectly, the better
    but with a penalty for bins that are too small (negative tunneling).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    delta = bins_remain_cap - item

    # Define the "potential" landscape.
    potential = np.where(delta >= 0, np.exp(-np.abs(delta) / item), -np.inf)  # "Tunneling" where delta>0, infinite barrier when delta<0
    #Consider also the level of occupancy.
    occupancy_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))

    #Combine terms for the priority
    priorities = potential + 0.1 * occupancy_level # Add an extra term.
    return priorities
```
