```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Combines fit, waste, fill level and adds exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    priorities[valid_bins] = 1

    #Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Try to spread items across bins if possible
    priorities[valid_bins] += bins_remain_cap[valid_bins] / np.sum(bins_remain_cap[valid_bins] + 1e-6)
    
    #Adaptive exploration: Add randomness, prioritize more when bins are nearly full
    nearly_full = bins_remain_cap < 0.1  # bins are nearly full when capacity is less than 10% of bin size
    randomness = np.random.rand(len(bins_remain_cap)) * 0.1
    priorities[valid_bins] += np.where(nearly_full[valid_bins], randomness[valid_bins] * 2, randomness[valid_bins]) #more randomness to nearly full

    return priorities
```
