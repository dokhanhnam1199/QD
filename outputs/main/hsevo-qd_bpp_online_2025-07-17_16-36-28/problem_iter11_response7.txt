```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities balancing fit, waste, fill level, spread, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # 1. Feasibility Boost:
    priorities[valid_bins] += 1.0

    # 2. Wasted Space Minimization (Adaptive Weighting):
    wasted_space = bins_remain_cap[valid_bins] - item
    wasted_space_priority = 1.0 / (1e-6 + wasted_space)
    wasted_space_weight = min(1.0, item)  # Smaller items, waste matters more
    priorities[valid_bins] += wasted_space_priority * wasted_space_weight

    # 3. Target Fill Level (Dynamic Adjustment):
    target_fill = np.mean(bins_remain_cap) / 2.0
    fill_diff = np.abs(bins_remain_cap[valid_bins] - item - target_fill)
    fill_priority = 1.0 / (1e-6 + fill_diff)
    fill_weight = 1 - (np.mean(bins_remain_cap) / np.max(bins_remain_cap))
    priorities[valid_bins] += fill_priority * fill_weight

    # 4. Encourage Spread (Non-linear Scaling):
    empty_bin_bonus = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins])**2
    priorities[valid_bins] += empty_bin_bonus / (np.sum(empty_bin_bonus) + 1e-6)

    # 5. Controlled Exploration (Adaptive):
    # More randomness when bins are nearly full to explore alternatives
    nearly_full = bins_remain_cap[valid_bins] < item * 1.1
    temperature = np.where(nearly_full, 0.02, 0.01)
    random_noise = np.random.rand(np.sum(valid_bins)) * temperature
    priorities[valid_bins] += random_noise

    # 6. Prioritize bins closer to item size
    size_diff = np.abs(bins_remain_cap[valid_bins] - item)
    size_priority = 1.0 / (1e-6 + size_diff)
    size_weight = 0.5
    priorities[valid_bins] += size_priority * size_weight

    return priorities
```
