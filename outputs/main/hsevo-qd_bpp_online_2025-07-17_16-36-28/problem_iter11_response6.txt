```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, wasted space, and balance."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    remaining_cap_after_add = bins_remain_cap[valid_bins] - item

    priorities[valid_bins] = 1.0 / (1e-6 + remaining_cap_after_add) # Wasted space
    priorities[valid_bins] += bins_remain_cap[valid_bins] / np.sum(bins_remain_cap[valid_bins] + 1e-6) # Balance

    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01 # Tie-breaker
    return priorities
```
