```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by gravitational attraction and space-time distortion.
    Bigger items warp space-time more (desire closer fit).
    Closer fit = higher priority.
    Bins with higher remaining capacity have more "inertia"
    and are harder to warp (lower priority unless very close fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Avoid division by zero: Add a small epsilon to remaining capacities
    epsilon = 1e-9
    bins_remain_cap = np.array(bins_remain_cap) + epsilon

    # Calculate how much space will be wasted
    waste = bins_remain_cap - item

    # A bin cannot be used if the waste is negative
    waste[waste < 0] = np.inf  # Mark invalid bins

    # Calculate the "gravitational potential" or warping of spacetime
    # Higher potential = higher priority
    potential = item / (waste + epsilon)

    # Normalize the potential based on remaining capacity.
    # Larger remaining capacities "resist" being used.

    priorities = potential / (bins_remain_cap**0.5) # square root provides diminishing resistance

    # Mark invalid bins as minimum priority.
    priorities[waste == np.inf] = -np.inf # bins where item won't fit

    return priorities
```
