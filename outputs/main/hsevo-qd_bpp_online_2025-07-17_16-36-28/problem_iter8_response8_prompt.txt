{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_add = bins_remain_cap - item\n\n    # Give a high priority to bins where the item fits\n    valid_bins = remaining_cap_after_add >= 0\n    if not np.any(valid_bins):\n        return priorities # No valid bins, all priorities remain 0\n\n    priorities[valid_bins] = 1\n\n    # Prioritize bins that will have the least wasted space\n    wasted_space = remaining_cap_after_add[valid_bins]\n    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)\n\n    # Prioritize bins closer to half-full after adding the item\n    half_full_diff = np.abs(remaining_cap_after_add[valid_bins] - np.mean(bins_remain_cap) / 2) # Try to make bins uniformly occupied\n    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)\n\n    #Scale the bin_remain_cap to emphasize almost full bins\n    scaled_bins_remain_cap = bins_remain_cap[valid_bins]**2\n\n    # Try to spread items across bins if possible, less important when nearing full bins\n    priorities[valid_bins] += scaled_bins_remain_cap / np.sum(scaled_bins_remain_cap + 1e-6)\n\n    # Add a small random component to break ties and explore different solutions\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit ratio and energy landscape concepts for priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n    \n    # Fit ratio component: prioritize closer fits, avoid near-full bins\n    fit_ratio = item / bins_remain_cap[fit_mask]\n    priorities[fit_mask] = (1 - np.abs(fit_ratio - 1)) - 0.01 * (bins_remain_cap[fit_mask] - item)\n    \n    # Energy landscape component: disincentivize largely empty bins\n    priorities[fit_mask] /= (bins_remain_cap[fit_mask] + 1e-9) # Avoid division by zero\n    \n    # Set low priority for bins where item doesn't fit\n    priorities[~fit_mask] = -np.inf\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a multi-faceted approach, considering fitting, wasted space, target fill level, and spreading items. It also includes a small random factor. The worst heuristic simply uses the negative log of the ratio of item size to remaining capacity.\n\nComparing (2nd) vs (19th) & (3rd) vs (18th), the trend is the same with the top heuristics using wasted space, a half full target and attempt to spread items, and the bottom heuristics using a basic log ratio calculation.\n\nComparing (1st) vs (2nd), these functions are identical.\n\nComparing (3rd) vs (4th), these functions are identical.\n\nComparing (5th) vs (6th), these functions are identical.\n\nComparing (7th) vs (10th), these functions are identical.\n\nComparing (11th) vs (17th), these functions only have comments and an if statement.\n\nComparing (18th) vs (20th), these functions are identical.\n\nComparing (second worst) vs (worst), we see that the second worst heuristics from 11th to 17th are incomplete implementations only containing comments and the starting `if` statement. This is much worse than the final 3 which utilize basic ratios.\n\nOverall: The better heuristics combine multiple factors, like fitting, minimizing wasted space, aiming for half-full bins, and spreading items across bins. The use of a small random factor also seems beneficial. Worse heuristics rely on overly simple metrics like the log ratio of item size to bin capacity or are incomplete implementations.\n- \nOkay, let's refine \"Current self-reflection\" to design better heuristics, focusing on actionable advice and avoiding pitfalls.\n\n*   **Keywords:** Multi-faceted evaluation, adaptive strategies, nuanced weighting, controlled exploration.\n*   **Advice:** Go beyond feasibility checks. Design heuristics that dynamically adjust strategies based on bin states (e.g., fragmentation, fill level). Prioritize adaptive weighting schemes for different factors. Introduce randomness via controlled mechanisms (e.g., simulated annealing).\n*   **Avoid:** Static weights, myopic decisions, numerical instability.\n*   **Explanation:** Heuristics should not be rigid. Adaptability improves robustness and exploration avoids getting trapped in local optima. Numerical stability ensures the heuristic functions reliably.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}