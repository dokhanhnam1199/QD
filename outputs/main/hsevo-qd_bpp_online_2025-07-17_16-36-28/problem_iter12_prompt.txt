{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best aspects of v0 and v1 to create effective heuristic.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap - item >= 0\n\n    if not np.any(valid_bins):\n        return priorities\n\n    priorities[valid_bins] = 1.0 # Fits check\n    wasted_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space) # Minimize wasted space\n\n    mean_cap = np.mean(bins_remain_cap)\n    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - mean_cap/2)\n    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff) # Target Half-full\n\n    scaled_bins = bins_remain_cap[valid_bins]**2\n    priorities[valid_bins] += scaled_bins / (np.sum(scaled_bins) + 1e-6) # Spread items\n\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01 # Break ties\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine the concept of \"Current self-reflection\" to make it truly effective for heuristic design, focusing on actionable insights and avoiding common pitfalls.\n\nHere's a redefined approach, designed to avoid the weaknesses of the 'Ineffective self-reflection':\n\n*   **Keywords:** Problem Understanding, Adaptive Strategies, Computational Efficiency, Exploration-Exploitation Balance, Validation.\n*   **Advice:** Deeply analyze problem structure and constraints. Prioritize computationally efficient implementations. Design heuristics that dynamically adapt to instance characteristics. Rigorously test and validate heuristic performance across diverse datasets.\n*   **Avoid:** Vague generalities, focusing on single factors in isolation, premature optimization, neglecting edge cases and stability.\n*   **Explanation:** Move beyond surface-level advice. Emphasize understanding the underlying problem, designing adaptable strategies, and systematically validating performance. Prioritize efficiency without sacrificing the exploration of the solution space.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}