```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns bin priorities considering fit, waste, fill level, and spread."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 1.0  # Basic fit priority

    remaining_cap = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + remaining_cap)  # Favor less waste

    mean_cap = np.mean(bins_remain_cap)
    target_fill = mean_cap / 2
    priorities[valid_bins] += 1.0 / (1e-6 + np.abs(remaining_cap - target_fill)) # Get bin close to target

    # Scaling bin remaining capacity with square
    scaled_cap = bins_remain_cap[valid_bins]**2
    priorities[valid_bins] += scaled_cap / np.sum(scaled_cap + 1e-6) # Spread among bins

    # Increase randomness for bins nearly full (adaptive exploration)
    nearly_full = remaining_cap < mean_cap / 4 #Tune this value carefully
    random_component = np.random.rand(np.sum(valid_bins)) * 0.01
    random_component[nearly_full] *= 2 # Increase random if bin is nearly full
    priorities[valid_bins] += random_component

    return priorities
```
