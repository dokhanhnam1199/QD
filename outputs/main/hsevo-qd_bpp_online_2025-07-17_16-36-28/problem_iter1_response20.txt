```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give higher priority to bins that can fit the item perfectly or near perfectly
            space_left = cap - item
            if space_left == 0:
                priorities[i] = 1000  # Perfect fit gets highest priority
            else:
                priorities[i] = 1.0 / (space_left + 0.0001) # Smaller space left, higher priority
                #priorities[i] = (cap-item)/cap # how full will it be
        else:
            priorities[i] = -1000  # Cannot fit, lowest priority
    return priorities
```
