```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority to add item to each bin. Combines wasted space, half-full target, and scaled bin capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_cap_after_add = bins_remain_cap - item
    valid_bins = remaining_cap_after_add >= 0

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 1  # Base priority for fitting

    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space) # Prioritize less wasted space

    half_full_diff = np.abs(remaining_cap_after_add[valid_bins] - np.mean(bins_remain_cap) / 2)
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff) # Prioritize closer to half-full

    scaled_bins_remain_cap = bins_remain_cap[valid_bins]**2
    priorities[valid_bins] += scaled_bins_remain_cap / np.sum(scaled_bins_remain_cap + 1e-6) # Spread across bins

    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01 # Break ties

    return priorities
```
