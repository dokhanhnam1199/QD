```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Combines fit ratio, wasted space, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Fit ratio with penalty for small remaining capacity
    fit_ratio = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] = (1 - np.abs(fit_ratio - 1))

    # Wasted space component, prioritize bins with less wasted space.
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Add small random number for tie breaking.
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01

    return priorities
```
