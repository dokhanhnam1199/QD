```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a default low value
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf

    # Find bins where the item can fit
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Calculate remaining capacity after placing the item
        remaining_capacities = bins_remain_cap[valid_bins] - item

        # Give higher priority to bins with smaller remaining capacity
        # (First-Fit Decreasing heuristic influence)
        priorities[valid_bins] = 1.0 / (remaining_capacities + 1e-9)  # Avoid division by zero

        # Add a bonus for bins where the remaining capacity is close to zero, but still positive
        near_full = (remaining_capacities > 0) & (remaining_capacities < 0.1 * np.max(bins_remain_cap))  # Adjust 0.1 based on problem context
        priorities[valid_bins][near_full] += 10  # Large bonus to encourage filling nearly-full bins
    else:
        # No bin can accommodate the item; assign minimal negative priorities
        priorities = -1e9 * np.ones_like(bins_remain_cap)

    return priorities
```
