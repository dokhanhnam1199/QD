```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more sophisticated priority function for online bin packing, incorporating
    multiple factors with adaptive weighting and controlled randomness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # 1. Feasibility Check (Base Priority)
    priorities[valid_bins] = 1.0

    # 2. Minimize Wasted Space (Adaptive Weighting)
    wasted_space = bins_remain_cap[valid_bins] - item
    # Scale wasted space inversely, small wasted space = high priority.  Avoid division by zero.
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # 3. Target Half-Full Bins (Adaptive Weighting Based on Fill Level)
    mean_cap = np.mean(bins_remain_cap)
    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - mean_cap / 2)
    # Prioritize bins closer to half-full.  Avoid division by zero.
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)

    # 4. Spread Items Evenly (Proportional to Remaining Capacity, with a Twist)
    # Give higher priority to bins with larger remaining capacity, but penalize almost-full bins
    scaled_bins = bins_remain_cap[valid_bins]**2  # Squaring emphasizes larger bins
    priorities[valid_bins] += scaled_bins / (np.sum(scaled_bins) + 1e-6)  # Normalize

    # 5. Fragmentation Penalty (Prioritize Less Fragmented Bins)
    # Penalize bins that are almost full, to reduce future fragmentation
    fragmentation_penalty = np.exp(-5 * (bins_remain_cap[valid_bins] - item) / mean_cap) # Exponential penalty for small remainders
    priorities[valid_bins] += fragmentation_penalty

    # 6. Adaptive Exploration (Simulated Annealing - Inspired Randomness)
    # Introduce controlled randomness to escape local optima.
    temperature = 0.1  # Adjust this to control exploration vs. exploitation
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * temperature

    # 7. Bin diversity priority. Favor using more diverse bins for the current item size to prevent filling up bins with same remaining cap.

    unique_caps, counts = np.unique(bins_remain_cap[valid_bins], return_counts=True)
    cap_counts = dict(zip(unique_caps, counts))

    for i, bin_cap in enumerate(bins_remain_cap[valid_bins]):
      priorities[valid_bins][i] += 1.0/(1e-6 + cap_counts[bin_cap]) #The less bin count, the higher priority

    return priorities
```
