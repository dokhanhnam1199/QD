```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A heuristic for online bin packing that combines several strategies:
    1. Fits check: Ensures the item fits in the bin.
    2. Minimize wasted space: Prioritizes bins with minimal remaining space after packing.
    3. Balance bin utilization: Encourages bins to be filled to a target utilization level.
    4. Bin Diversity: Select bins that are dissimilar to the average bin, calculated dynamically using a variance estimate.
    5. Stochastic Perturbation: Introduces randomness to avoid local optima.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap - item >= 0

    if not np.any(valid_bins):
        return priorities

    # Fits check
    priorities[valid_bins] += 1.0

    # Minimize wasted space
    wasted_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (1e-6 + wasted_space)

    # Balance bin utilization (Target a utilization ratio of 75%)
    target_utilization = 0.75
    target_capacity = target_utilization * np.max(bins_remain_cap) # Assuming bins have similar max cap
    half_full_diff = np.abs(bins_remain_cap[valid_bins] - item - target_capacity)
    priorities[valid_bins] += 1.0 / (1e-6 + half_full_diff)

    # Bin Diversity (Variance from mean)
    mean_cap = np.mean(bins_remain_cap)
    bin_variance = np.var(bins_remain_cap) # estimate diversity
    diversity_score = np.abs(bins_remain_cap[valid_bins] - mean_cap)
    if bin_variance > 1e-6:
         priorities[valid_bins] += diversity_score / bin_variance
    else:
        priorities[valid_bins] += diversity_score # Handle the case when variance is too low.
    # Stochastic Perturbation
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01

    return priorities
```
