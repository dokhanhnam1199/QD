```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Identify bins where the item fits
    valid_bins = remaining_cap_after_add >= 0
    
    if not np.any(valid_bins):
        # Item doesn't fit in any bin, return low priorities
        return priorities

    #Prioritize bins that will have the least wasted space
    wasted_space = remaining_cap_after_add[valid_bins]
    priorities[valid_bins] = 1.0 / (1e-6 + wasted_space)

    # Bonus for bins that are relatively full.
    priorities[valid_bins] += (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) 

    # Adaptive element: If item is small, prioritize almost empty bins
    if item < np.mean(bins_remain_cap):
        empty_bin_bonus = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / (np.max(bins_remain_cap) + 1e-6)
        priorities[valid_bins] += empty_bin_bonus * 0.5 # Scale the bonus
    
    # Adaptive element: If item is large, try to fill almost full bins
    if item > np.mean(bins_remain_cap):
        almost_full_bin_bonus = bins_remain_cap[valid_bins] / (np.max(bins_remain_cap) + 1e-6)
        priorities[valid_bins] += almost_full_bin_bonus * 0.5

    # Normalize priorities to sum to 1 (important if using a softmax later)
    priorities[valid_bins] /= np.sum(priorities[valid_bins] + 1e-6)

    return priorities
```
