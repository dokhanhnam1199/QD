{
     "algorithm": "Assign a priority score to each bin based on its remaining capacity relative to the item size, favoring bins with remaining capacity slightly larger than the item size.",
     "code": "def priority_v2(item, bins_remain_cap):\n  \"\"\"{Assign a priority score to each bin based on its remaining capacity relative to the item size, favoring bins with remaining capacity slightly larger than the item size.}\"\"\"\n  priority = []\n  for cap in bins_remain_cap:\n    if cap >= item:\n      priority.append(1.0 / (cap - item + 0.1)) # Prioritize bins with smaller differences between cap and item size\n    else:\n      priority.append(-1.0) # Disqualify bins that cannot fit the item\n\n  return priority",
     "objective": 4.04866,
     "other_inf": null,
     "SLOC": 10.0,
     "cyclomatic_complexity": 3.0,
     "halstead": 74.00879436282185
}