def priority_v2(item, bins_remain_cap):
  """{This algorithm focuses on filling bins as much as possible by prioritizing bins where the item fits and leaves the least remaining capacity, but also considers the initial capacity of the bin to avoid overly prioritizing very small bins.}"""
  priority = []
  bin_size = 1.0 #Assume bin size is 1, can be changed to other values accordingly
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_percentage = (cap - item) / bin_size
      priority_score = 1 - remaining_percentage # Higher priority if it fills the bin more
    else:
      priority_score = -1000 # Very low priority if it doesn't fit
    priority.append(priority_score)
  return priority
