def priority_v2(item, bins_remain_cap):
    """{This algorithm dynamically adjusts the weight given to remaining capacity and wasted space based on the item size relative to the bin size, favoring bins that are a good fit without excessive waste.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Dynamically adjust weights based on the item size relative to bin size.
            fit_ratio = item / cap
            capacity_weight = fit_ratio
            waste_weight = 1 - fit_ratio
            priority_score = (cap * capacity_weight) - (wasted_space * waste_weight)
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
