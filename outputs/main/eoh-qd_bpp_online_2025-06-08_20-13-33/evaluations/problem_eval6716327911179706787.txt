def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority to each bin based on a combination of the percentage of the bin filled by the item, the absolute difference between the item size and half of the bin capacity, and a bonus for bins that are already partially filled.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_percentage = item / 100 #scaling item and cap to avoid having a large number to calculate
            cap_percentage = cap / 100 #scaling item and cap to avoid having a large number to calculate
            
            item_percentage = item / (cap+ 0.0001)
            
            
            # Calculate a score based on fill percentage, penalizing items too different from half the bin size.
            score =  item_percentage  - abs(item_percentage - 0.5) / 10 + cap_percentage/10 # Adding a small bonus for bins that are already partially filled.
            
            priority.append(score)
        else:
            priority.append(-1)
    return priority
