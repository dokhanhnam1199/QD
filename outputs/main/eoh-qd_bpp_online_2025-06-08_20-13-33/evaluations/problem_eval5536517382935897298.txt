def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority score to each bin based on the ratio of the item size to the remaining capacity, favoring bins where the item fills a large portion of the remaining space, while also penalizing bins that are already nearly full to encourage better space utilization.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_space = cap - item
      if remaining_space == 0:
          priority.append(1000) #perfect fit
      else:
          priority.append((item / cap) * 100 - (cap / 100)) # item/cap represents the portion the item fills, cap/100 penalizes nearly full bins
    else:
      priority.append(-1)
  return priority
