def priority_v2(item, bins_remain_cap):
  """{Prioritize bins by considering both the absolute remaining capacity and the relative utilization after placing the item, favoring bins that maintain a balanced fill level without excessive fragmentation.}"""
  priorities = []
  for capacity in bins_remain_cap:
    if capacity >= item:
      remaining_capacity_score = capacity
      utilization_ratio = (item) / (1 - capacity + item + 0.001) # Avoid division by zero and normalize
      priority = remaining_capacity_score * (1 + utilization_ratio)
    else:
      priority = -1
    priorities.append(priority)
  return priority
