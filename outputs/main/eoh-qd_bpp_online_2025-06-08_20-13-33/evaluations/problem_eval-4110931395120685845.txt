def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on the ratio of remaining capacity to wasted space if the item is placed in the bin, favoring bins where the remaining capacity is significantly larger than the wasted space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      # Avoid division by zero. If wasted space is zero, assign a very high priority based on remaining capacity.
      if wasted_space == 0:
        priority = cap * 10  # Assign a high priority if there's no wasted space
      else:
        priority = cap / wasted_space  # Calculate the ratio of remaining capacity to wasted space
      priorities.append(priority)
    else:
      priorities.append(-1)  # Assign -1 priority if the item doesn't fit.
  return priority
