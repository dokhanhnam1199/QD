def priority_v3(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on the percentage of remaining capacity utilized by the item and penalizes bins with very little remaining capacity after packing the item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization_ratio = float(item) / cap
            remaining_ratio = float(cap - item) / cap
            penalty = 0
            if remaining_ratio < 0.1:
                penalty = 100  # Penalize bins with very little space left

            priority_score = utilization_ratio * 100 - penalty
            priority.append(priority_score)
        else:
            priority.append(-1)  # Assign a low priority if the bin cannot accommodate the item
    return priority
