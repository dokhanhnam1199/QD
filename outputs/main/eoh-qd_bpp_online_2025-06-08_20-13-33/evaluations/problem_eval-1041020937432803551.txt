def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins that have a remaining capacity close to the item size, but also considers the absolute remaining capacity to avoid overly full bins.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(10 / (abs(cap - item) + 1) + cap / 100) #Prioritizes bins with remaining capacity close to item size + favors bins with higher cap.
        else:
            priority.append(-1000)  # Penalize infeasible bins
    return priority
