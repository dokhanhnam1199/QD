def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin by considering both the wasted space and the percentage of the bin that would be filled, favoring bins that lead to a higher fill percentage without excessive wasted space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            fill_percentage = item / cap
            priority.append(fill_percentage / (wasted_space + 0.0001)) # Higher fill, less waste is better
        else:
            priority.append(-1000)  # Penalize infeasible bins
    return priority
