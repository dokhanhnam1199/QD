def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering the percentage of bin utilization after placing the item, combined with a penalty for bins that are too empty or too full after placement.}"""
    priority = []
    bin_capacity = 1 # Assuming bin capacity is 1 as bins_remain_cap is already normalized.
    for cap in bins_remain_cap:
        if cap >= item:
            new_cap = cap - item
            utilization = 1 - new_cap  #Utilization of the bin after item is placed.
            # Penalize bins that are either almost empty or almost full after placement.
            penalty = abs(utilization - 0.5) #Penalty is low if bin is half full, high if it is almost empty or full.
            priority_score = utilization - penalty
        else:
            priority_score = -1  # Assign a negative priority if the item doesn't fit
        priority.append(priority_score)
    return priority
