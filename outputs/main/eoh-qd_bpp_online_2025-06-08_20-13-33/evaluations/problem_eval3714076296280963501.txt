def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted sum of remaining capacity closeness and how full the bin would be after packing the item, favoring bins that are nearly full after packing and penalizing bins that would be nearly empty.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage_after = (1 - (cap - item) / 100)
      closeness = 100 - abs(cap - item)
      score = 0.7 * fill_percentage_after + 0.3 * closeness
    else:
      score = -1000 
    priorities.append(score)
  return priority
