def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on how well the item 'fits' relative to the bin's size, favoring bins where the item occupies a substantial portion of the remaining capacity without completely filling it.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the utilization ratio: item size / remaining capacity.
            utilization = item / cap
            # Prioritize bins where the item fills a significant portion of the bin, but not entirely (avoiding near-full bins if other options exist)
            priority_score = utilization - (utilization**2)  # Maximize utilization while penalizing filling the bin completely
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
