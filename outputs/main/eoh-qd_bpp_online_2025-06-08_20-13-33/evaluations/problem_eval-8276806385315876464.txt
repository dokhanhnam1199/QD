def priority_v2(item, bins_remain_cap):
    """
    {This algorithm prioritizes bins based on a weighted combination of how close the item size is to the remaining bin capacity (optimizing space utilization) and a penalty for creating overly empty bins after packing.}
    """
    priorities = []
    for cap in bins_remain_cap:
        if item <= cap:
            # Closeness score: how close item size is to remaining capacity (higher is better)
            closeness = 1 - abs(item - cap) / 100
            
            # Empty bin penalty: penalize bins that become too empty after packing (lower is better)
            empty_penalty = 0
            remaining_after = cap - item
            if remaining_after > 75:
                empty_penalty = remaining_after / 100

            # Weighted combination of closeness and penalty
            priority = closeness - empty_penalty

        else:
            priority = -1  # Impossible to pack

        priorities.append(priority)
    return priority
