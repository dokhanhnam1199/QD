def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on the percentage of the bin that would be filled by the item, combined with a penalty for bins that are already mostly full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_percentage = float(item) / cap
            # Penalize bins that are already mostly full (e.g., > 80% full)
            occupancy_penalty = 0
            if (1 - float(cap) / 100) > 0.8: #Assume bin size is 100
                occupancy_penalty = -0.5 * (1 - float(cap) / 100) # Example penalty; adjust as needed
            priority.append(fill_percentage + occupancy_penalty)
        else:
            priority.append(-1)
    return priority
