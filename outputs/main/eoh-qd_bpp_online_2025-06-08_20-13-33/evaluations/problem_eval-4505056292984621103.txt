def priority_v2(item, bins_remain_cap):
  """{Assign a priority score to each bin based on a combination of remaining capacity, wasted space, and a penalty for nearly full bins to balance space utilization and bin count.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      if wasted_space == 0:
          wasted_space_score = 100
      else:
          wasted_space_score = 100/(wasted_space + 0.001) 

      # Penalize bins that become very full after placing the item
      if cap - item < 0.1:  # Assuming bin size is normalized to 1
        penalty = -50
      else:
        penalty = 0
      
      priority_score = wasted_space_score + penalty
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))  # Not feasible, assign lowest priority
  return priority
