def priority_v2(item, bins_remain_cap):
  """{Prioritize bins based on the ratio of item size to remaining capacity, preferring bins where the item fills a significant portion without overflowing, normalized by the bin index to encourage earlier bin usage.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      fill_ratio = item / cap
      priority_score = fill_ratio / (i + 1) # Normalize by bin index
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))
  return priority
