def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both the fullness achieved after packing and a penalty based on proximity to a target fullness, aiming to balance bin utilization and avoid creating bins that are far from a desired fill level.}"""
  priorities = []
  target_fullness = 0.8 # Target 80% fullness
  for cap in bins_remain_cap:
    if cap >= item:
      fullness_after = (100 - (cap - item)) / 100 
      fullness_diff = abs(fullness_after - target_fullness)
      priority = fullness_after - 0.5 * fullness_diff
    else:
      priority = -1000
    priorities.append(priority)
  return priority
