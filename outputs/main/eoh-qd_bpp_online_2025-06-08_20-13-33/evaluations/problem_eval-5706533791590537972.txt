def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a "best fit" approach, favoring bins where the item fills a significant portion of the remaining capacity, while also considering the overall remaining space to avoid extreme fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      remaining_space_factor = 1 / (cap + 0.1)
      priority_score = fill_ratio - remaining_space_factor
      priority.append(priority_score)
    else:
      priority.append(-1000)  # Penalize bins that cannot fit the item
  return priority
