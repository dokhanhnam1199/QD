def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the percentage of remaining capacity utilized by the item, with a bonus for bins that are nearly full and a penalty for bins that cannot fit the item or leave excessive space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization_ratio = float(item) / cap
      wasted_space = cap - item
      if utilization_ratio > 0.9:  # Bonus for almost full bins
          priority_score = utilization_ratio * 10 + 5 # utilization ratio * weight + bonus
      elif utilization_ratio < 0.1:
          priority_score = -100 #penalty for small item
      else:
        priority_score = utilization_ratio * 10 # utilization ratio * weight
      priority.append(priority_score)
    else:
      priority.append(-1000)  # Penalize bins that cannot fit the item
  return priority
