def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority score to each bin based on how much empty space would remain after packing the item, favoring bins that would be filled close to full but not overfilled, and also factoring in existing fill levels.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_space = cap - item
      if remaining_space == 0:
          priority.append(1000) #perfect fit
      else:
          priority.append(100/(remaining_space+0.0001) + cap) # high score if remaining_space is low and also proportional to existing capacity
    else:
      priority.append(-1)
  return priority
