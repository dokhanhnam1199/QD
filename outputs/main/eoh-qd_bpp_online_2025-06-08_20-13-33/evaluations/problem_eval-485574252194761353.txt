def priority_v3(item, bins_remain_cap):
  """{Assign a priority score to each bin based on a combination of remaining capacity, fill percentage, and a bonus for bins with capacity close to the item size, rewarding efficient packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = item / (1 - cap + item + 0.001)  # Fill percentage of the bin if item is placed (normalized bin size)
      
      # Bonus for bins where the remaining capacity is close to the item size.
      if abs(cap - item) < 0.2:
        bonus = 30
      else:
        bonus = 0

      priority_score = fill_percentage * 50 + bonus
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))  # Not feasible, assign lowest priority
  return priority
