def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a combination of remaining capacity relative to item size and a penalty for bins that are too empty after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority_val = (cap - item) / item - (sum(bins_remain_cap)/len(bins_remain_cap) - (cap - item)) / (sum(bins_remain_cap)/len(bins_remain_cap)) #Waste relative to item size - emptiness penalty
      priority.append(priority_val)
    else:
      priority.append(-1000) # Large negative priority if bin is too full
  return priority
