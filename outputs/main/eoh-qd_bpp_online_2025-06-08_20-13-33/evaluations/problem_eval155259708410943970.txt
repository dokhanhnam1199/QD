def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on the remaining capacity and the item size, favoring bins that can accommodate the item with minimal waste and penalizing those that are too full or too empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority.append((cap - item) / (sum(bins_remain_cap)/len(bins_remain_cap))) # Reduced waste, normalized by average bin capacity
    else:
      priority.append(-1000) # Large negative priority if bin is too full
  return priority
