def priority_v2(item, bins_remain_cap):
  """{Assign a priority score to each bin based on a weighted combination of bin fullness (percentage of bin filled) and number of items already in the bin, favouring bins with fewer items and a better fit.}"""
  priority = []
  num_items_in_bin = [0] * len(bins_remain_cap) #keep track of the number of items in each bin; assume initialy empty
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      bin_fullness = item / (1 - cap + item + 0.0001)  # the percentage of bin getting filled. The +0.0001 is to avoid zero division
      num_items_score = 1 / (num_items_in_bin[i] + 1) #Prioritize bins with fewer items.
      priority_score = 0.7 * bin_fullness + 0.3 * num_items_score #Weigh bin fullness a bit more.
      priority.append(priority_score)
      num_items_in_bin[i] +=1
    else:
      priority.append(-1)
  return priority
