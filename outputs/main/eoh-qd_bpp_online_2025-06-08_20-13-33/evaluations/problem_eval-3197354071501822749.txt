def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and wasted space if the item is placed in the bin, favoring bins with closer fits and lower wasted space while penalizing bins that are too full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      priority_score = (1.0 / (wasted_space + 0.1)) + (item / (cap + 0.1)) #Adding 0.1 to denominators to avoid division by zero
      priority.append(priority_score)
    else:
      priority.append(-1000) # Penalize bins that cannot fit the item
  return priority
