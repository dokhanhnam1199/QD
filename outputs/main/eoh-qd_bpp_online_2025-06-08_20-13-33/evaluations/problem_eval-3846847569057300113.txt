def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a weighted sum of remaining capacity and wasted space if the item is placed in the bin, favoring bins with smaller wasted space and higher remaining capacity.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      # Assign priority based on remaining capacity and wasted space.
      # Higher remaining capacity and lower wasted space are favored.
      priority = (cap * 0.7) - (wasted_space * 0.3)
      priorities.append(priority)
    else:
      priorities.append(-1)  # Assign -1 priority if the item doesn't fit.
  return priority
