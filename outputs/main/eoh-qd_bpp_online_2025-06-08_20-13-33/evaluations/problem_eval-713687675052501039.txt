def priority_v2(item, bins_remain_cap):
    """
    {This algorithm prioritizes bins based on a weighted combination of fit ratio, remaining capacity (penalizing almost-full bins), and a bonus for using bins with mid-range capacity.}
    """
    priorities = []
    for cap in bins_remain_cap:
        if item <= cap:
            fit_ratio = item / cap  # How well the item fits into the remaining space
            remaining_capacity_penalty = cap / 100  # Penalize bins with little remaining capacity

            # Bonus for bins with mid-range capacity
            mid_range_bonus = 0
            if 25 <= cap <= 75:  # Arbitrary mid-range values
                mid_range_bonus = 0.3

            priority = (2 * fit_ratio) - remaining_capacity_penalty + mid_range_bonus
        else:
            priority = -1  # Impossible to pack

        priorities.append(priority)
    return priority
