def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin by considering the percentage of the bin that would be filled by the item, penalizing bins that are too full after packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = item / cap
      remaining_after_pack = cap - item
      # Penalize bins that become too full after packing (e.g., less than 10% remaining)
      if remaining_after_pack / cap < 0.1:
        priority_score = fill_percentage * 0.5  # Reduce priority if almost full
      else:
        priority_score = fill_percentage
      priority.append(priority_score)
    else:
      priority.append(-1)  # Assign a low priority if the item doesn't fit
  return priority
