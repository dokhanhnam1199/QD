def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns a priority score to each bin based on the relative fullness it would achieve after adding the item, penalizing bins that are too empty or too full, and also considering the absolute waste left in the bin.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fullness = 1 - (waste / 10)  # Adjusting fullness factor
            
            # Prioritize bins with higher fullness, penalize high waste and nearly full bins.
            priority = fullness - (waste / 1000)+ ((cap-item)/cap - 0.5) # adjust the waste factor
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign very low priority if the item doesn't fit

    return priority
