def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a score that exponentially decreases as the item's size approaches the bin's remaining capacity, favoring bins with sufficient space while discouraging near-fits.}"""
  priorities = []
  for capacity in bins_remain_cap:
    if capacity >= item:
      priority = (capacity / item) * (capacity - item)
    else:
      priority = -1
    priorities.append(priority)
  return priority
