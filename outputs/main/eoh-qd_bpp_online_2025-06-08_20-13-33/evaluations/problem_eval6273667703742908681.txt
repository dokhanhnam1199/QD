def priority_v2(item, bins_remain_cap):
    """
    {This algorithm assigns a priority score to each bin based on how much space would be wasted if the item is placed in that bin, favoring bins that would be filled more completely, and also considering the current fill level of the bin and the item size to penalize bins that are already too full or would be almost empty after placement.}
    """
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fill_ratio = item / cap
            
            # Prioritize bins with less waste. Add a small penalty for nearly empty or nearly full bins
            priority = 1 / (waste + 0.0001) + fill_ratio - abs(fill_ratio - 0.5)/5

            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign very low priority if the item doesn't fit

    return priority
