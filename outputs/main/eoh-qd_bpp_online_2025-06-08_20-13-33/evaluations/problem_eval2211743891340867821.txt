def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on how well the item 'fits' into the bins, considering both the remaining capacity and how full the bin would be after the item is placed, penalizing bins that become excessively full or remain almost empty.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            post_fill = (cap - item)  # Remaining space after placing the item
            fill_ratio = (1 - cap) #how full the bin is before placing the item
            priority_score = -abs(post_fill - fill_ratio) # penalizing bins that lead to disproportionate fill levels.
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
