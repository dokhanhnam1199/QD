def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a weighted combination of remaining capacity percentage and the wasted space relative to bin capacity.}"""
    priority = []
    bin_capacity = 1  # Assuming bin capacity is 1, can be generalized.
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Calculate remaining capacity percentage and wasted space percentage
            remaining_capacity_percentage = cap / bin_capacity
            wasted_space_percentage = wasted_space / bin_capacity

            # Weighted priority score
            priority_score = (0.7 * (1 - wasted_space_percentage)) + (0.3 * remaining_capacity_percentage)
        else:
            priority_score = -1  # Assign a negative priority if the item doesn't fit
        priority.append(priority_score)
    return priority
