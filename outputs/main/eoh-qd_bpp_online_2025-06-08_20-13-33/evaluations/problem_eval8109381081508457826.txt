def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by balancing bin utilization and fragmentation, favoring bins that can accommodate the item while maximizing the filled percentage of the bin relative to the item size.}"""
  priority = []
  for cap in bins_remain_cap:
    if item <= cap:
      filled_percentage = item / (cap + 0.0001) # Ratio of item size to bin capacity (with small value to prevent division by zero)
      utilization_score = 1 - (cap - item) # Favor bins with more space used
      priority_score = filled_percentage + utilization_score
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
