def priority_v2(item, bins_remain_cap):
  """{Assign a priority score based on the ratio of item size to remaining capacity, rewarding bins where the item fills a significant portion of the remaining space while avoiding bins that would become overly full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      
      #Bonus for filling a large portion of bin but not close to full, penalty when remaining cap is too small.
      if cap - item < 0.1:
        priority_score = -float('inf')
      else:
        priority_score = fill_ratio 
      
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))
  return priority
