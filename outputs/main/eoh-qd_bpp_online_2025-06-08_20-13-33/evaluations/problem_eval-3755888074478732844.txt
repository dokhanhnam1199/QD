def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering both the fullness of the bin after placing the item and a penalty for bins that are too full or too empty, encouraging balanced utilization.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_cap = cap - item
            fullness_score = 1 - (remaining_cap / 1)  # Assuming bin capacity is 1
            
            # Penalty for being too full or too empty after placing item.
            # Ideal range might be 0.2 to 0.8, adjust as needed.
            if remaining_cap < 0.2:
                penalty = (0.2 - remaining_cap) * 2
            elif remaining_cap > 0.8:
                penalty = (remaining_cap - 0.8) * 2
            else:
                penalty = 0

            priority.append(fullness_score - penalty)
        else:
            priority.append(-1000)
    return priority
