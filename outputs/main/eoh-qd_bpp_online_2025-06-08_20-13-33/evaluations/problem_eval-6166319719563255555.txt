def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins primarily based on how full the bin would be after packing the item, with a minor penalty for bins that are already very full.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage_after = (1 - (cap - item) / 100)
      fullness_penalty = 0 if cap < 90 else -5 * (cap/100) #Small penalty if already almost full before the item
      score = 0.9 * fill_percentage_after + 0.1 * fullness_penalty
    else:
      score = -1000 
    priorities.append(score)
  return priority
