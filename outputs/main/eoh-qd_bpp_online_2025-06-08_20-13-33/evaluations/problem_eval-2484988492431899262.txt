def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity after placing the item, favoring bins that can accommodate the item and then prioritizing based on fullness with a slight preference for bins leaving a small amount of space.}"""
  priority = []
  for cap in bins_remain_cap:
    if item <= cap:
      remaining_cap = cap - item
      priority.append(100 * (1 - (remaining_cap / 1.01)) + (remaining_cap < 0.1) * 5 ) #prioritize fullness, small remaining cap bonus
    else:
      priority.append(-100)
  return priority
