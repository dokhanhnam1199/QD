def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by combining a normalized remaining capacity score with a bonus if the item fits perfectly or nearly perfectly, penalizing bins that are too full or too empty after packing.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after = cap - item
      
      # Normalize remaining capacity to range [0, 1], lower is better
      normalized_remaining = remaining_after / 100 

      # Bonus for nearly perfect fit
      if remaining_after <= 5:  # Tweak threshold if needed
          fit_bonus = 0.5
      else:
          fit_bonus = 0
      
      score = (1 - normalized_remaining) + fit_bonus # Higher is better
    else:
      score = -1000
    priorities.append(score)
  return priority
