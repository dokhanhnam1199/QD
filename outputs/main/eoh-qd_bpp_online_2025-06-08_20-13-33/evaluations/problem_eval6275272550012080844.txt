def priority_v2(item, bins_remain_cap):
    """
    {This algorithm calculates the priority of each bin based on a score derived from how well the item size fits into the remaining bin capacity, giving higher priority to bins where the item fills a larger proportion of the remaining space while also considering a penalty for wasted space.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap
            waste = cap - item
            priority.append(fill_ratio - (waste / (2 * cap))) # Modified priority: fill ratio - weighted waste
        else:
            priority.append(-1)
    return priority
