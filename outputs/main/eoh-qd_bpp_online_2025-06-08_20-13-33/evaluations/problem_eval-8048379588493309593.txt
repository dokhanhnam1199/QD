def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on the remaining capacity relative to the item size, favoring bins where the item fits best and penalizing both near-empty and near-full bins, with a bonus for bins already somewhat filled.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fit_ratio = item / cap

            # Prioritize bins where the item fits well, penalize near-empty and near-full, and reward some initial fill
            priority = fit_ratio - abs(0.5 - fit_ratio)/5 + (1 - waste / cap)/10

            priorities.append(priority)
        else:
            priorities.append(-1)  # Item does not fit

    return priority
