def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority based on the wasted space percentage if the item is placed in the bin, giving preference to bins where the wasted space percentage is minimized, but only if the item fits.}"""
  priority = []
  for cap in bins_remain_cap:
    if item <= cap:
      wasted_space = cap - item
      wasted_percentage = (wasted_space / 1.0) * 100 #Consider bin size is 1.0.
      priority.append(100 - wasted_percentage)
    else:
      priority.append(-1)
  return priority
