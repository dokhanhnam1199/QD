def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the ratio of the item's size to the remaining capacity, favoring bins where the item fills a significant portion of the remaining space, combined with a penalty for bins that are too empty after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = float(item) / cap
      remaining_space = cap - item
      space_penalty = 1.0 / (remaining_space + 1)  # Penalize large remaining space
      priority_score = fill_ratio + space_penalty
      priority.append(priority_score)
    else:
      priority.append(-1000)  # Large negative value for bins that can't fit the item
  return priority
