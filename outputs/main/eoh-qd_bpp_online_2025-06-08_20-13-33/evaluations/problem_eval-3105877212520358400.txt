def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on how closely the item size matches the remaining capacity, penalizing both excessive wasted space and significant capacity shortfall, and rewarding bins that are nearly full after packing the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Calculate a score based on how closely the item size matches the remaining capacity
            match_score = 1 - abs(item - cap/2) / 100
            
            # Give a bonus for bins that are nearly full after packing
            fullness_bonus = 0
            if wasted_space < 10:
                fullness_bonus = 0.3
            
            priority = match_score + fullness_bonus
        else:
            priority = -1  # Impossible to pack
        priorities.append(priority)
    return priority
