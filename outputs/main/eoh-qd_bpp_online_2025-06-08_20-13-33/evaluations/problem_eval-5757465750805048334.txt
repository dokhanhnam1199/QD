def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering both the percentage of bin utilization after placing the item and a penalty for exceeding the bin capacity, favoring bins that lead to high utilization without overflow.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = item / (1 - cap + item + 0.0001) # Calculate utilization after adding item, avoid zero division
            priority_score = utilization # Higher utilization is better
        else:
            penalty = (item - cap)**2 # Penalty for exceeding capacity
            priority_score = -penalty # Assign a negative priority proportional to the squared excess
        priority.append(priority_score)
    return priority
