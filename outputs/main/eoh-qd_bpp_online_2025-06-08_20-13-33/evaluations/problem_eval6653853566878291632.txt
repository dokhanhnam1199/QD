def priority_v2(item, bins_remain_cap):
  """{The algorithm prioritizes bins based on a weighted combination of space utilization (how much of the bin is used) and fragmentation (how much space is left over), penalizing bins that cannot fit the item.}"""
  priorities = []
  for cap in bins_remain_cap:
    if item <= cap:
      utilization = item / 100
      fragmentation = (cap - item) / 100
      priority = 2 * utilization - fragmentation # Weighting utilization higher than fragmentation
    else:
      priority = -1000 

    priorities.append(priority)
  return priority
