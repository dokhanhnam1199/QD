def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by combining a bin utilization score with a penalty based on how much the new item exceeds the ideal remaining capacity after insertion, thus balancing efficient bin usage with avoiding excessive fragmentation.}"""
  priorities = []
  bin_capacity = 1.0 # Assume bin capacity is 1.0
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      utilization_score = (bin_capacity - remaining_cap) / bin_capacity
      ideal_remaining = 0.2  #Adjustable parameter
      penalty = abs(remaining_cap - ideal_remaining)
      priority = utilization_score - penalty * 0.5  # Adjustable penalty factor
      priorities.append(priority)
    else:
      priorities.append(-1)
  return priority
