def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on the potential utilization rate of the bin after packing the item, favoring bins where the item fills a larger proportion of the remaining capacity, and penalizing bins that cannot accommodate the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization_rate = item / cap  # Calculate the utilization rate
            priorities.append(utilization_rate)
        else:
            priorities.append(-1)  # Impossible to pack
    return priority
