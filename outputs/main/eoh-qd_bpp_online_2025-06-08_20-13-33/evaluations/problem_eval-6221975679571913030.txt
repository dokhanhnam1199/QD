def priority_v3(item, bins_remain_cap):
  """{Assign a priority score to each bin based on a combination of fill percentage, a bonus for filling bins close to full, and a penalty for highly fragmented bins to encourage both fullness and minimize fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = item / (1 - cap + item + 0.001)  # Percentage of bin filled by the item.

      # Bonus for filling the bin close to full
      if cap - item < 0.2:
          fullness_bonus = 50 * (1 - (cap - item)/0.2) #linear bonus as approaching nearly-full condition
      else:
          fullness_bonus = 0
      
      # Penalty for highly fragmented bins after placement
      if cap - item > 0.5:
          fragmentation_penalty = -20 * (cap - item)
      else:
          fragmentation_penalty = 0

      priority_score = fill_percentage * 100 + fullness_bonus + fragmentation_penalty
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))  # Not feasible, assign lowest priority
  return priority
