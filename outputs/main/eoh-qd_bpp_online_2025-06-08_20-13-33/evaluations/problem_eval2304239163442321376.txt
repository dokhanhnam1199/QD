def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins that can accommodate the item, rewarding bins with higher remaining capacity relative to the item size and penalizing near-full bins.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append((cap / item) - (item / cap))  # Reward higher relative capacity, penalize near-full bins.
        else:
            priority.append(-1000)  # Penalize infeasible bins
    return priority
