def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin by considering both the waste and the fill ratio, favoring bins with higher fill ratios and lower waste, while still penalizing infeasible bins.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fill_ratio = item / cap
            priority.append(fill_ratio / (waste + 0.0001))  # Favor high fill ratio and low waste
        else:
            priority.append(-1000)  # Penalize infeasible bins
    return priority
