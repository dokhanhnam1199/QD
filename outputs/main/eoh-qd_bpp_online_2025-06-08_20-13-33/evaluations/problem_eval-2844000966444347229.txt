def priority_v2(item, bins_remain_cap):
    """
    {This algorithm prioritizes bins based on the absolute difference between the item size and the remaining bin capacity, favoring bins with smaller differences and sufficient capacity.}
    """
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            priorities.append(cap - item)
        else:
            priorities.append(float('inf'))

    # Invert priorities to favor smaller differences (smaller differences = higher priority)
    inverted_priorities = [-p for p in priorities]
    return priority
