def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a score for each bin based on a combination of the bin's remaining capacity, the item's size relative to the bin size, and a penalty for bins that are too empty or too full after placing the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_after_fit = cap - item
            bin_utilization = 1 - (remaining_after_fit / 10)

            # Reward high utilization of bins, penalize bins that are near-empty or near-full after placing the item.
            priority = bin_utilization - abs(0.5 - (1 - (cap - item) / 10))
            priorities.append(priority)
        else:
            priorities.append(-1)

    return priority
