def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on the remaining capacity and item size, favoring bins that can accommodate the item with minimal wasted space and penalizing those that would lead to excessive fragmentation or rejection.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(1 / (cap - item + 0.0001))  # Minimize wasted space
        else:
            priority.append(-1000)  # Penalize infeasible bins
    return priority
