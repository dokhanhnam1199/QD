def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the percentage of remaining capacity that the item would fill, adjusted by a penalty for bins that are already nearly full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = float(item) / cap
      remaining_capacity_ratio = float(cap) / sum(bins_remain_cap) #Normalized by total remaining capacity

      #Adjust priority based on fill percentage and remaining capacity
      priority_score = fill_percentage - (1 - remaining_capacity_ratio) # Penalizing bins that is nearly full

      priority.append(priority_score)
    else:
      priority.append(-1000) # Penalize bins that cannot fit the item
  return priority
