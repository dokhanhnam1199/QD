def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity and wasted space if the item is placed in the bin, preferring bins that can accommodate the item with minimal wasted space while also considering bins that are already relatively full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Give higher priority to bins with less wasted space and bins that are already relatively full.
            priority_score = 1 / (wasted_space + 0.0001) + (1 - cap)  #Adding small value to avoid dividing by 0 and normalizing the wasted space.
        else:
            priority_score = -1  # Assign a negative priority if the item doesn't fit
        priority.append(priority_score)
    return priority
