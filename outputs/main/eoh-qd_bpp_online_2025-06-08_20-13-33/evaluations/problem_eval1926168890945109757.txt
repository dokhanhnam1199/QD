def priority_v2(item, bins_remain_cap):
  """{Prioritize bins by balancing remaining capacity, item size relative to the bin, and the number of items already in the bin to encourage a diverse fill level across all bins.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      item_ratio = item / (cap + 0.001)
      remaining_capacity_ratio = cap / (sum(bins_remain_cap) + 0.001)
      items_in_bin = (1 - cap) if cap < 1 else 0
      priority_score = item_ratio + remaining_capacity_ratio + items_in_bin
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))
  return priority
