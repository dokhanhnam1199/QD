```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, and angle; normalizes output.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))
    distance_matrix = distance_matrix + 1e-6

    heuristic_matrix = 1.0 / (distance_matrix**2)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
                continue

            remaining_capacity_i = capacity - demands[i] if i != 0 else capacity
            remaining_capacity_j = capacity - demands[j] if j != 0 else capacity

            if (demands[i] + demands[j]) > capacity and i != 0 and j != 0:
               heuristic_matrix[i, j] *= 0.1

            if j == 0 and i != 0:
                heuristic_matrix[i,j] *=0.8

    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_heuristic = 0
            for k in range(n):
                if k == i or k == j: continue

                vector_ki = coordinates[i] - coordinates[k]
                vector_ij = coordinates[j] - coordinates[i]

                dot_product = np.dot(vector_ki, vector_ij)
                magnitudes = np.linalg.norm(vector_ki) * np.linalg.norm(vector_ij)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_heuristic += (np.pi - angle)

            if n > 2:
              angle_heuristic /= (n - 2)
            heuristic_matrix[i, j] += 0.1* angle_heuristic

    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum

    return heuristic_matrix
```
