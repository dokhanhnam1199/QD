```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) based on distance, demand,
    and spatial distribution. Incorporates a probabilistic element for stochastic sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Heuristic matrix indicating edge desirability.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Inverse distance: Shorter distances are generally preferred.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Demand factor: Penalize edges that connect nodes with high cumulative demand
    # early in a route.  This is a *rough* proxy for route fullness.
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_factor[i, j] = 0  # No self-loops
            else:
                demand_factor[i, j] = 1.0 / (demands[i] + demands[j] + 1e-9) #Avoid divide by zero

    # Depot proximity bonus: Encourage connections to and from the depot (node 0).
    depot_proximity = np.zeros_like(distance_matrix)
    for i in range(n):
        depot_proximity[0, i] = 1.0
        depot_proximity[i, 0] = 1.0

    # Spatial dispersion penalty: Penalize connecting nodes that are very close spatially,
    # especially if they're far from the depot.  This encourages exploring a wider area.
    spatial_penalty = np.zeros_like(distance_matrix)
    center = np.mean(coordinates, axis=0) #Calculate the center coordinate
    dist_to_center = np.linalg.norm(coordinates - center, axis=1)

    for i in range(n):
        for j in range(n):
            spatial_proximity = np.linalg.norm(coordinates[i] - coordinates[j])
            spatial_penalty[i,j] = 1.0 / (spatial_proximity + 1e-9) * dist_to_center[i] * dist_to_center[j]

    # Combine the factors with weights. These weights can be tuned.
    heuristic_matrix = (
        0.6 * inverse_distance +
        0.2 * demand_factor +
        0.1 * depot_proximity -
        0.1 * spatial_penalty  # Subtract the penalty
    )

    # Add stochasticity: Introduce randomness to allow exploration of diverse solutions.
    # This helps avoid getting stuck in local optima. The scaling factor adjusts the
    # amount of randomness.
    random_noise = np.random.rand(n, n) * 0.1 # Adjust the multiplier for noise magnitude

    heuristic_matrix = heuristic_matrix + random_noise

    # Ensure no self-loops and non-negative values
    for i in range(n):
        heuristic_matrix[i, i] = 0
        for j in range(n):
            heuristic_matrix[i, j] = max(0, heuristic_matrix[i, j]) # ensure non-negativity


    return heuristic_matrix
```
