{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    CVRP heuristic combining distance, demand, angle, and depot proximity, with adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Demand-based penalty/reward\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity and i != 0 and j != 0:\n                heuristic_matrix[i, j] *= 0.05  # Harsh penalty for exceeding capacity\n            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored\n                heuristic_matrix[i,j] *= 1.1\n                \n            #Proximity to depot\n            if j == 0 and i != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n            if i == 0 and j != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n\n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n\n    # Depot attraction (nodes closer to the depot are encouraged)\n\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        if i == j: continue\n      depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n      heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]\n\n\n    # Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Adaptive Sparsification\n    threshold = np.mean(heuristic_matrix) * 0.3 # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    CVRP heuristic combining distance, demand, and angle, with capacity consideration.\n    Emphasizes normalization and sparsification for efficient solution sampling.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n    \n    # Inverse square distance heuristic\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Capacity penalty\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n                continue\n            if (demands[i] + demands[j]) > capacity and i != 0 and j != 0:\n                heuristic_matrix[i, j] *= 0.1\n            if j == 0 and i != 0:\n                heuristic_matrix[i,j] *=0.8 # Discount connection to depot\n                \n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n    # Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Sparsify: remove edges with low heuristic values\n    threshold = np.mean(heuristic_matrix) * 0.2 # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (7th) vs (11th), we see the 7th heuristic incorporates \"node criticality\" based on demand relative to capacity and proximity to the depot, while the 11th only considers a combined demand penalty and depot discount. The 7th also discounts *to* the depot only, while the 11th discounts edges generally connected to the depot.  The 7th uses a more refined demand factor.\n\nComparing (16th) vs (11th), the 16th heuristic attempts to estimate *remaining* capacity when connecting nodes to the depot, offering a more nuanced capacity assessment than the 11th, which applies a simple combined demand check.  Also the 16th uses an average angle score from many potential previous nodes, while the 11th directly adds angle heuristic (without averaging). Also sparsification is missing from 16th.\n\nComparing (1st) vs (11th), the 1st heuristic incorporates the depot attraction element which is missing from 11th. Also, the 1st favors low-demand edges.\n\nComparing (20th) vs (19th) vs (18th), all the same. And distance_matrix is used directly.\n\nOverall: The better heuristics incorporate more problem-specific knowledge, such as node criticality and depot attraction, and use more nuanced capacity considerations. They also normalize the angle heuristic better or discount it in sensible ways.  Simpler heuristics rely on fundamental distance and demand penalties but lack refinement.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I understand the goal: to refine the definition of \"Current self-reflection\" to make it more effective for designing better heuristics, while actively avoiding the pitfalls of \"Ineffective self-reflection.\" Let's break it down:\n\n*   **Keywords:** Problem-specific knowledge, constraint awareness, normalization impact, iterative simplification, rigorous testing.\n\n*   **Advice:** Focus on understanding *why* certain factors are relevant, and *how* constraints interact. Prioritize analyzing the effects of normalization choices. Test simplifications methodically.\n\n*   **Avoid:** Vague \"combining factors,\" blanket normalization without justification, premature sparsification, and refinement without rigorous impact assessment.\n\n*   **Explanation:** Effective self-reflection involves deep problem understanding, critical evaluation of normalization techniques, and data-driven simplification. This ensures a more robust and adaptable heuristic design process.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}