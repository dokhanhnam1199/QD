{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and angle.  Inspired by physics:\n    - Inverse square law for distance (gravity).\n    - Penalize edges that would overload a vehicle.\n    - Encourage connections that \"straighten\" the route (reduce turning).\n\n    Args:\n        distance_matrix: Distance between nodes.\n        coordinates:  Node coordinates (x, y).\n        demands:  Node demands.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix of heuristic values for each edge.  Higher values indicate more promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Add a small constant to distances to avoid division by zero and handle self-loops gracefully\n    distance_matrix = distance_matrix + 1e-6\n\n    # Heuristic based on inverse square distance (like gravity's influence):\n    heuristic_matrix = 1.0 / (distance_matrix**2)\n\n\n    # Penalize connections that would likely overload a vehicle *IF* considered early in route construction:\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # Never connect a node to itself.\n                continue\n\n            # Rough estimate of the remaining capacity if connecting i and j to the depot:\n            #  This is crude since it doesn't know the whole tour!  Helps avoid grossly infeasible early decisions.\n\n            remaining_capacity_i = capacity - demands[i] if i != 0 else capacity # Assume depot has effectively infinite capacity.\n            remaining_capacity_j = capacity - demands[j] if j != 0 else capacity\n\n            if (demands[i] + demands[j]) > capacity and i != 0 and j != 0:\n               heuristic_matrix[i, j] *= 0.1 # Harsh penalty for immediate overload.\n\n            # Slightly discount connection to the depot for non-depot nodes to encourage intermediate hops first\n            if j == 0 and i != 0: #returning to depot\n                heuristic_matrix[i,j] *=0.8\n\n    # Angle Heuristic (encourage straighter paths):\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            # Consider node k as a potential \"previous\" node to node i:\n            angle_heuristic = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                # Calculate vectors for edges ki and ij:\n                vector_ki = coordinates[i] - coordinates[k]\n                vector_ij = coordinates[j] - coordinates[i]\n\n                # Calculate the angle between vectors ki and ij:\n                dot_product = np.dot(vector_ki, vector_ij)\n                magnitudes = np.linalg.norm(vector_ki) * np.linalg.norm(vector_ij)\n\n                if magnitudes > 0: # Avoid division by zero.\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))  # Clip to handle potential floating-point errors\n\n                    # Straighter paths have smaller angles (closer to 0).\n                    #  Prioritize straighter paths by rewarding small angles.\n                    angle_heuristic += (np.pi - angle) # Increase score as the angle decreases\n                # Average angle heuristic over all potential \"previous\" nodes\n            if n > 2:\n              angle_heuristic /= (n - 2)  # Normalize.  Helps if # of locations dramatically varies\n            heuristic_matrix[i, j] += 0.1* angle_heuristic  # Weight the angle heuristic less than distance.\n\n    #Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (11th), we see the top heuristic incorporates more factors (distance, demand, angle) and constraints (capacity) than the bottom one, which solely relies on inverse distance. The top heuristic also normalizes the heuristic matrix.\n\nComparing (2nd) vs (12th), (3rd) vs (13th)... all the way to (10th) vs (20th), we find the same pattern: the top 10 heuristics are identical and vastly superior to the bottom 10 heuristics, which simply return the inverse of the distance matrix.\n\nComparing (1st) vs (2nd), (3rd) vs (4th)... (9th) vs (10th), we see all top 10 heuristics are identical. This indicates that the ranking is based on some external factor not present in the code itself.\n\nOverall: The better heuristics consider multiple factors beyond just distance, including demand and angles between nodes. They also incorporate capacity constraints and normalize the heuristic matrix. Simpler heuristics solely based on distance are less effective. Also, all of the first 10 heuristics are exactly the same and ranked the best.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current Self-Reflection\" for better heuristic design.\n\n*   **Keywords:** Rigorous testing, iterative simplification, multi-factor analysis, normalization impact, constraint awareness.\n\n*   **Advice:** Begin with a feature-rich heuristic model. Systematically remove components, rigorously testing the effect on performance. Explore diverse normalization strategies to improve robustness.\n\n*   **Avoid:** Premature simplification, neglecting constraints, inconsistent testing, overlooking normalization's influence.\n\n*   **Explanation:** A structured approach of progressive simplification coupled with thorough testing reveals critical components and optimal configurations, leading to robust and efficient heuristics.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}