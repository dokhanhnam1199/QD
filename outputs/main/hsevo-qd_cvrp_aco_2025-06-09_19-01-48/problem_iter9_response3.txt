```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic combining distance, demand, angle, depot proximity, and capacity utilization with adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # Demand-based penalty/reward, focusing on remaining capacity
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
                continue

            combined_demand = demands[i] + demands[j]
            if i == 0 or j == 0: # Depot connection
                if combined_demand > capacity and i != j:  # can't connect to depot if exceeds capacity after visiting a single customer
                    heuristic_matrix[i,j] *= 0.01 # Harsh penalty

                else:
                    heuristic_matrix[i,j] *= 0.8 # Slight incentive to connect to depot as it ends a tour.
            else: #Customer to customer
                if combined_demand > capacity:
                    heuristic_matrix[i, j] *= 0.05  # Harsh penalty
                else:
                    remaining_capacity = capacity - combined_demand
                    capacity_utilization_bonus = 1 + (1 - (remaining_capacity / capacity)) # Closer to full, better the bonus
                    heuristic_matrix[i, j] *= capacity_utilization_bonus

    # Angle heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j: continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i,j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i,j] = 0

            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]


    # Depot attraction (nodes closer to the depot are encouraged, but penalize long detours)
    depot_attraction = np.zeros((n, n))
    for i in range(n):
      for j in range(n):
        if i == j: continue
      depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))

      # Penalize connections that would cause long detours from depot
      detour_penalty = (distance_matrix[i,j] / (distance_matrix[i,0] + distance_matrix[j,0] + 1e-6))
      depot_attraction[i, j] /= (1 + detour_penalty)
      heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]


    # Normalize heuristics for each node, but only for non-zero rows
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum

    # Adaptive Sparsification
    threshold = np.mean(heuristic_matrix) * 0.4 # Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
