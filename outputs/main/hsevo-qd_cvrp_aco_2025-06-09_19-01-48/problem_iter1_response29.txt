```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP based on distance, demand, and angle.

    This version incorporates a few refinements. First, inverse-distance scaling
    is augmented by a soft-penalty for demand feasibility with vehicles, and
    a weak encouragement to "close loops" via the angle heuristic.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Node coordinates (n x 2).
        demands (np.ndarray): Node demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior indicators (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Scale the distances to avoid divide by zero and extreme values
    scaled_distances = 1 / (distance_matrix + 1e-6)

    # Soft-penalty for routes where demand exceeds vehicle capacity
    for i in range(n):
        for j in range(n):
            if i != j:
                # Demand heuristic: nodes i and j's total demand compared to capacity.
                # Apply a scaling factor to bring the penalty term into the same magnitude
                # as other terms.
                demand_penalty = max(0, (demands[i] + demands[j] - capacity) / capacity) * 0.5  #Soft penalization
                # Angle heuristic: encourages to close tours/routes to minimize overall distance
                # Check adjacent points to reduce overall route length to reduce computation time.
                # This is approximate. Should also consider depot if possible.

                # Angle Heuristic to incentivize routes to return to depot node.

                # Normalize vectors.
                vec_i_depot = coordinates[0] - coordinates[i]
                vec_j_depot = coordinates[0] - coordinates[j]
                norm_i = np.linalg.norm(vec_i_depot)
                norm_j = np.linalg.norm(vec_j_depot)

                # Ensure that the norms are non-zero to avoid zero division errors.
                if norm_i > 0 and norm_j > 0:
                    vec_i_depot = vec_i_depot / norm_i
                    vec_j_depot = vec_j_depot / norm_j
                    dot_product = np.dot(vec_i_depot, vec_j_depot)
                    # Clip the dot product to the range [-1, 1] for numerical stability.
                    dot_product = np.clip(dot_product, -1, 1)
                    angle_heuristic = np.arccos(dot_product) / np.pi # Angle in [0, 1] scale. small value if near depot.
                    angle_factor = 0.1 * (1 - angle_heuristic) #Incentivize going back to depot

                else:
                    angle_factor = 0 # zero if the distance from any point is zero.
                heuristic_matrix[i, j] = scaled_distances[i, j] - demand_penalty + angle_factor
    return heuristic_matrix
```
