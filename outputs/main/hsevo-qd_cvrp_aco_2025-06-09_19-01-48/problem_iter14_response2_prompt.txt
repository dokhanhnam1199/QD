{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"CVRP heuristic: Combines distance, demand, angle, depot proximity, capacity buffer, adaptive sparsification, and node criticality.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # 2. Demand-based penalty/reward with capacity buffer (refined)\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_factor[i, j] = 0\n                continue\n            if i == 0 or j == 0:\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            remaining_capacity = capacity - combined_demand\n\n            if combined_demand > capacity:\n                demand_factor[i, j] = 0.01  # Strong penalty\n            elif remaining_capacity > (capacity / 2):\n                demand_factor[i, j] = 1.20 # Increased reward\n            elif remaining_capacity > (capacity / 4):\n                demand_factor[i, j] = 1.10 # Moderate reward\n            else:\n                demand_factor[i, j] = 0.9  # Slight penalty\n    heuristic_matrix = heuristic_matrix * demand_factor\n\n    # 3. Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n    # 4. Depot attraction (refined)\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n            depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n            heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]\n\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 0.6  # Discourage direct connections from depot (less aggressive)\n        heuristic_matrix[i, 0] *= 0.6  # Discourage direct connections to depot (less aggressive)\n\n    # 5. Capacity Aware Depot Connection\n    capacity_depot_connection = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n            if i == 0 and demands[j] > capacity / 2:\n                capacity_depot_connection[i, j] = 0.2  # Heavily Penalize\n            if j == 0 and demands[i] > capacity / 2:\n                capacity_depot_connection[i, j] = 0.2 # Heavily Penalize\n    heuristic_matrix = heuristic_matrix * (1-capacity_depot_connection)\n\n\n    # 6. Node Criticality (New Feature): Identify critical nodes based on demand and distance to depot\n    node_criticality = np.zeros(n)\n    for i in range(1, n):\n        node_criticality[i] = demands[i] * distance_matrix[i, 0]  # Demand * Distance to depot\n    \n    # Normalize criticality scores\n    max_criticality = np.max(node_criticality)\n    if max_criticality > 0:\n        node_criticality = node_criticality / max_criticality\n    \n    # Incorporate criticality into the heuristic\n    criticality_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                criticality_factor[i,j] = 0\n                continue\n            criticality_factor[i, j] = 1 + 0.1 * (node_criticality[i] + node_criticality[j])\n\n    heuristic_matrix = heuristic_matrix * criticality_factor\n\n\n    # 7. Adaptive Sparsification (refined): Adjust threshold dynamically\n    non_zero_values = heuristic_matrix[heuristic_matrix > 0]\n    if non_zero_values.size > 0:\n        threshold = np.quantile(non_zero_values, 0.30)  # Increased sparsification\n        heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # 8. Normalize heuristics for each node (after sparsification)\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    CVRP heuristic combining distance, demand, angle, and depot proximity, with adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Demand-based penalty/reward\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity and i != 0 and j != 0:\n                heuristic_matrix[i, j] *= 0.05  # Harsh penalty for exceeding capacity\n            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored\n                heuristic_matrix[i,j] *= 1.1\n                \n            #Proximity to depot\n            if j == 0 and i != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n            if i == 0 and j != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n\n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n\n    # Depot attraction (nodes closer to the depot are encouraged)\n\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        if i == j: continue\n      depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n      heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]\n\n\n\n    # Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Adaptive Sparsification\n    threshold = np.mean(heuristic_matrix) * 0.3 # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see the 1st heuristic incorporates \"Node Criticality\" and refines the \"Demand-based penalty/reward\" and \"Adaptive Sparsification\" strategies. The demand factor in the 1st heuristic gives increased reward; the 2nd does not. The 1st also uses a more aggressive sparsification (30% quantile vs. 25% quantile). The 1st also has Capacity Aware Depot Connection\nComparing (2nd) vs (3rd), these heuristics are identical.\nComparing (3rd) vs (4th), these heuristics are identical.\nComparing (4th) vs (5th), the 5th heuristic removes the Depot Attraction form the original demand factor and makes this equal to 1, or no penalty.\nComparing (5th) vs (6th), the 6th heuristic removes capacity buffer consideration and depot aware connection in the demand factor calculations. Instead of rewarding or penalizing edges based on remaining capacity, it applies a harsh penalty only for exceeding capacity and a slight reward for small demand edges. The 6th heuristic also uses mean instead of quantile.\nComparing (6th) vs (7th), these heuristics are identical.\nComparing (7th) vs (8th), these heuristics are identical.\nComparing (8th) vs (9th), these heuristics are identical.\nComparing (9th) vs (10th), these heuristics are identical.\nComparing (10th) vs (11th), these heuristics are identical.\nComparing (11th) vs (12th), the 12th heuristic reintroduces a demand factor. It also focuses depot attraction on edges *to* the depot. It introduces node criticality with high demand nodes. and Uses an increased mean for adaptive sparsification\nComparing (12th) vs (13th), these heuristics are identical.\nComparing (13th) vs (14th), these heuristics are identical.\nComparing (14th) vs (15th), the 15th heuristic simplifies capacity handling, only penalizing edges exceeding capacity. It removes depot attraction and node criticality. The angle heuristic weight is kept. Normalization and sparsification are maintained.\nComparing (15th) vs (16th), these heuristics are identical.\nComparing (16th) vs (17th), these heuristics are identical.\nComparing (17th) vs (18th), the 18th heuristic uses a distance matrix to calculate the heuristic matrix, uses crude estimations for capacity, slight discounts for connections to the depot. The major difference is in the angle heuristics: consider node k as a potential \"previous\" node to node i, Calculate vectors for edges ki and ij, Calculate the angle between vectors ki and ij.\nComparing (18th) vs (19th), these heuristics are identical.\nComparing (19th) vs (20th), the 20th heuristic returns a basic distance matrix, ignoring all other considerations.\n\nOverall: The trend seems to be adding more sophisticated considerations (demand, angle, depot proximity, node criticality, adaptive sparsification) leads to better heuristics and removing them leads to worse heuristics. Adaptive sparsification using quantiles appears superior to using the mean. The best heuristic seems to balance multiple factors with carefully tuned weights and thresholds, while the worst relies solely on distance.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I understand. We need to redefine \"Current Self-Reflection\" to be more effective in guiding the design of better CVRP heuristics, while avoiding the pitfalls of \"Ineffective Self-Reflection\". Here's a revised definition:\n\n*   **Keywords:** Rigorous Evaluation, Trade-off Analysis, Component Isolation, Granularity Control\n*   **Advice:** Focus on isolating and quantifying the impact of each heuristic component. Prioritize rigorous evaluation and trade-off analysis.\n*   **Avoid:** Vague recommendations like \"consider multiple factors\" or \"start with a comprehensive solution.\"\n*   **Explanation:** Shift from general advice to concrete strategies for evaluating and refining heuristic components individually. Emphasize quantifiable improvements and trade-off understanding, not just complexity.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}