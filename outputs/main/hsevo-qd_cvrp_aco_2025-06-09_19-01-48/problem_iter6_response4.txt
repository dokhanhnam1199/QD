```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining distance, demand, angle, depot proximity, and capacity slack, with adaptive sparsification and normalization.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # Demand-based penalty/reward
    demand_effect = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_effect[i, j] = 0
                continue

            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity and i != 0 and j != 0:
                demand_effect[i, j] = -0.9  # Harsh penalty for exceeding capacity
            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored
                demand_effect[i, j] = 0.1
            elif i != 0 and j != 0:
                demand_effect[i, j] = 0.0 # No effect otherwise

    heuristic_matrix += demand_effect

    # Depot attraction (nodes closer to the depot are encouraged)
    depot_attraction = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                depot_attraction[i, j] = 0
                continue
            depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))
    heuristic_matrix += 0.05 * depot_attraction


    # Angle heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                angle_heuristic[i, j] = 0
                continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j:
                    continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i, j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i, j] = 0

    heuristic_matrix += 0.1 * angle_heuristic



    # Capacity slack heuristic
    capacity_slack = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                capacity_slack[i, j] = 0
                continue

            remaining_capacity_i = capacity - demands[i] if i != 0 else capacity
            remaining_capacity_j = capacity - demands[j] if j != 0 else capacity

            # Give a small bonus if both nodes have sufficient remaining capacity
            if remaining_capacity_i > (capacity / 5) and remaining_capacity_j > (capacity / 5):
                capacity_slack[i, j] = 0.02

    heuristic_matrix += capacity_slack

    # Penalize direct connections to depot, except from depot itself
    depot_penalty = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
          if i==j:
            depot_penalty[i,j] = 0
            continue

          if (i == 0 and j != 0) or (j == 0 and i != 0):
            depot_penalty[i, j] = -0.05
    heuristic_matrix += depot_penalty

    # Normalize heuristics for each node
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum


    # Adaptive Sparsification
    threshold = np.mean(heuristic_matrix) * 0.3
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
