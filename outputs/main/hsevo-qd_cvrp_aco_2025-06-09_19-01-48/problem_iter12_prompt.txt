{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"CVRP heuristic: Combines distance, demand, angle, depot proximity, capacity buffer, and adaptive sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Demand-based penalty/reward with capacity buffer\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_factor[i, j] = 0\n                continue\n            if i == 0 or j == 0:\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            remaining_capacity = capacity - combined_demand\n\n            if combined_demand > capacity:\n                demand_factor[i, j] = 0.01\n            elif remaining_capacity > (capacity / 2):\n                demand_factor[i, j] = 1.15\n            elif remaining_capacity > (capacity / 4):\n                demand_factor[i, j] = 1.05\n            else:\n                demand_factor[i, j] = 0.9\n    heuristic_matrix = heuristic_matrix * demand_factor\n                \n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n\n    # Depot attraction\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        if i == j: continue\n        depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n        heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]\n\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 0.5 # Discourage direct connections from depot\n        heuristic_matrix[i, 0] *= 0.5 # Discourage direct connections to depot\n\n    # Capacity Aware Depot Connection\n    capacity_depot_connection = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n            if i == 0 and demands[j] > capacity / 2:\n                capacity_depot_connection[i, j] = 0.1  # Heavily Penalize\n            if j == 0 and demands[i] > capacity / 2:\n                capacity_depot_connection[i, j] = 0.1 # Heavily Penalize\n    heuristic_matrix = heuristic_matrix * (1-capacity_depot_connection)\n\n    # Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Adaptive Sparsification\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's refine \"Current Self-Reflection\" to design better heuristics, steering clear of the vagueness and pitfalls of \"Ineffective Self-Reflection.\" We need actionable, specific guidance.\n\nHere's a revised approach focusing on *effective* self-reflection:\n\n*   **Keywords:** Adaptive parameters, Problem-specific features, Capacity constraints, Normalization impact, Rigorous testing.\n*   **Advice:** Explicitly define \"relevant factors\" (e.g., criticality metrics, depot influence functions). Implement adaptive parameter tuning based on performance (e.g., reinforcement learning).\n*   **Avoid:** Vague statements like \"consider multiple factors\" or \"normalization can be helpful.\"\n*   **Explanation:** Go beyond suggesting general ideas. Instead, prompt the designer to *define* and *quantify* key problem characteristics and to *test* specific adaptations rigorously. Focus on adaptive strategies, not just static inclusion of elements.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}