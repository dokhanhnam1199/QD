```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance-based preference (shorter distances are preferred).
    2. Demand-based discouragement (edges connecting nodes that would overload a vehicle are discouraged).
    3. Depot proximity encouragement (edges closer to the depot are preferred, especially for routes ending).
    4. Node connectivity encouragement (edges connecting to less connected nodes are preferred - explores better).
    5. Random noise to add diversity.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance-based preference
    heuristic_matrix = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Demand-based discouragement
    for i in range(n):
        for j in range(n):
            if i != j:
                if demands[i] + demands[j] > capacity: #Check if nodes demands alone is over the capacity
                    heuristic_matrix[i, j] *= 0.1  # Discourage edges if they overload a vehicle

    # 3. Depot proximity encouragement
    depot_index = 0
    for i in range(n):
        heuristic_matrix[depot_index, i] *= 1.5  # Encourage edges from the depot
        heuristic_matrix[i, depot_index] *= 1.5  # Encourage edges to the depot

    # 4. Node connectivity encouragement (encourages exploration)
    node_connections = np.sum(heuristic_matrix > 0, axis=0) #Number of non zero entries for each column
    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i,j] *= (1 / (node_connections[i] + node_connections[j] + 1e-6))**(0.5) # Prefer edges connected to disconnected nodes


    # 5. Random noise for diversity
    noise = np.random.rand(n, n) * 0.1
    heuristic_matrix += noise

    return heuristic_matrix
```
