```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) based on distance,
    demand, and geometric proximity.  Uses a combination of inverse distance,
    demand consideration, and angle penalty to prioritize edges.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Euclidean coordinates of nodes.
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge
                    in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Inverse distance component
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero

    # Demand consideration: Penalize edges connecting nodes with high combined demand
    demand_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            demand_penalty[i, j] = (demands[i] + demands[j]) / (2 * capacity)

    # Angle penalty: Penalize sharp turns.
    angle_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate angles between edges (i, j) and edges from j to other nodes
                angles = np.zeros(n)
                for k in range(n):
                    if k != i and k != j:
                        # Vector from j to i and from j to k
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[j]

                        # Normalize vectors
                        v1 = v1 / (np.linalg.norm(v1) + 1e-6)
                        v2 = v2 / (np.linalg.norm(v2) + 1e-6)

                        # Calculate the cosine of the angle
                        cos_angle = np.dot(v1, v2)
                        # Clip values to avoid domain errors
                        cos_angle = np.clip(cos_angle, -1.0, 1.0)

                        # Calculate angle in radians
                        angle = np.arccos(cos_angle)
                        angles[k] = angle

                angle_penalty[i, j] = np.mean(angles)  # Average angle to other nodes
            else:
                angle_penalty[i, j] = 1.0

    # Combine heuristics
    heuristic_matrix = inverse_distance / (1 + demand_penalty + angle_penalty)
    
    # Ensure that the depot is more connected.
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.2 # Slightly boost depot connections
        heuristic_matrix[i, 0] *= 1.2

    return heuristic_matrix
```
