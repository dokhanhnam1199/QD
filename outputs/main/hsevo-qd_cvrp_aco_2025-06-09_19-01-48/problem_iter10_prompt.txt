{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    CVRP heuristic combining distance, demand, angle, and depot proximity, with adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Demand-based penalty/reward\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity and i != 0 and j != 0:\n                heuristic_matrix[i, j] *= 0.05  # Harsh penalty for exceeding capacity\n            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored\n                heuristic_matrix[i,j] *= 1.1\n                \n            #Proximity to depot\n            if j == 0 and i != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n            if i == 0 and j != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n\n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n\n    # Depot attraction (nodes closer to the depot are encouraged)\n\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        if i == j: continue\n      depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n      heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]\n\n\n\n    # Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Adaptive Sparsification\n    threshold = np.mean(heuristic_matrix) * 0.3 # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}