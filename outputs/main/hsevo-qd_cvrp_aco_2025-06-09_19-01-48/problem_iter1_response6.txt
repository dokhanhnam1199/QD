```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A more sophisticated heuristics function for the Capacitated Vehicle Routing Problem (CVRP).
    Combines distance, demand, and angular considerations to estimate the desirability of each edge.

    Args:
        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes.
        coordinates (np.ndarray): Euclidean coordinates of the nodes.
        demands (np.ndarray): A vector of customer demands.
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: A matrix of heuristics values, indicating the desirability of including each edge in a solution.
                     Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters for tuning the heuristics
    alpha = 1.0  # Weight for distance
    beta = 1.0  # Weight for demand
    gamma = 1.0  # Weight for angle relative to depot
    delta = 0.5  # Weight for capacity feasibility


    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0.0  # No self-loops
            else:
                # Distance component (shorter distances are preferred)
                distance_heuristic = alpha / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0.0

                # Demand component (penalize edges connecting nodes with high demand)
                demand_heuristic = 1.0 / (demands[i] + demands[j]) if (demands[i] + demands[j]) > 0 else 0.0
                #demand_heuristic = np.exp(-beta * (demands[i] + demands[j]) / capacity) # alternative approach for demand heuristics

                # Angle component (nodes closer to a direct path from/to depot are preferred)
                # Calculate angles between node i, node j, and the depot (node 0)
                vector_i = coordinates[i] - coordinates[0]  # Vector from depot to node i
                vector_j = coordinates[j] - coordinates[0]  # Vector from depot to node j
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0)) #Ensure the value is between -1 and 1.
                    angle_heuristic = np.exp(-gamma * angle)
                else:
                    angle_heuristic = 0.0

                #Capacity feasilbility
                if demands[i] + demands[j] > capacity :
                    capacity_feasibility = 0.0 #Penalize, this route might not be feasible.
                else:
                    capacity_feasibility = 1.0

                # Combine the heuristics components
                heuristic_matrix[i, j] = (
                    distance_heuristic
                    + beta * demand_heuristic
                    + gamma * angle_heuristic
                    + delta * capacity_feasibility
                )
                if i==0 or j == 0:
                  heuristic_matrix[i,j] *= 1.5 # prioritize connecting to depot

    return heuristic_matrix
```
