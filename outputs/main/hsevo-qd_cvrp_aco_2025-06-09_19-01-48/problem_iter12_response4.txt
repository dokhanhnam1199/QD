```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Advanced heuristic combining distance, demand, angle, depot proximity, capacity buffer, adaptive sparsification, and criticality metric."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # 2. Demand-based Penalty/Reward with Capacity Buffer and Slack
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_factor[i, j] = 0
                continue
            if i == 0 or j == 0:
                continue

            combined_demand = demands[i] + demands[j]
            remaining_capacity = capacity - combined_demand

            if combined_demand > capacity:
                demand_factor[i, j] = 0.01  # Strong penalty for exceeding capacity
            elif remaining_capacity > (0.75 * capacity):
                demand_factor[i, j] = 1.20 # Reward for large buffer
            elif remaining_capacity > (0.5 * capacity):
                demand_factor[i, j] = 1.10 # Moderate reward
            elif remaining_capacity > (0.25 * capacity):
                demand_factor[i, j] = 1.00 # Slight reward
            else:
                demand_factor[i, j] = 0.85  # Penalty for near-full capacity
    heuristic_matrix = heuristic_matrix * demand_factor

    # 3. Angle Heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j:
                    continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i, j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i, j] = 0

            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i, j]

    # 4. Depot Attraction with Capacity Consideration
    depot_attraction = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))
            # Scale depot attraction based on demand of connected nodes
            depot_attraction[i,j] *= (1 - (demands[i]/capacity if i !=0 else 0) - (demands[j]/capacity if j !=0 else 0))
            heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]

    for i in range(1, n):
        heuristic_matrix[0, i] *= 0.6 # Discourage direct connections from depot, increased penalty.
        heuristic_matrix[i, 0] *= 0.6 # Discourage direct connections to depot, increased penalty.

    # 5. Capacity Aware Depot Connection (Stronger Penalty)
    capacity_depot_connection = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            if i == 0 and demands[j] > capacity / 2:
                capacity_depot_connection[i, j] = 0.5  # Heavily Penalize
            if j == 0 and demands[i] > capacity / 2:
                capacity_depot_connection[i, j] = 0.5 # Heavily Penalize

    heuristic_matrix = heuristic_matrix * (1-capacity_depot_connection)

    # 6. Node Criticality Metric (Based on Depot Distance and Demand)
    criticality = np.zeros(n)
    for i in range(1, n): # Exclude depot
        criticality[i] = (demands[i] / capacity) + (1 / (distance_matrix[i, 0] + 1e-6))

    # Adjust heuristic based on criticality
    for i in range(1, n):
      for j in range(1, n):
        if i == j: continue
        heuristic_matrix[i,j] *= (1 + 0.1 * (criticality[i] + criticality[j]))


    # 7. Normalize heuristics for each node (Row-wise)
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum

    # 8. Adaptive Sparsification (Dynamic Threshold)
    # Adjust threshold based on instance size 'n'.
    sparsification_percentile = max(5, min(25, 50 - n/10 ))  #Example: n=10 -> 45, n=20 -> 40, n=40 -> 30, n=100 -> 5
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], sparsification_percentile/100)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
