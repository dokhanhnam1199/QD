```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates several factors to estimate edge importance: distance, demand,
    angle relative to the depot, and depot proximity.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # No self-loops
                continue

            distance = distance_matrix[i, j]

            # Factor 1: Inverse distance (shorter distances are better)
            distance_factor = 1 / distance if distance > 0 else 0

            # Factor 2: Demand consideration (avoid connecting nodes that individually almost fill a truck)
            demand_factor = 1.0
            if demands[i] >= 0.8 * capacity or demands[j] >= 0.8 * capacity:
                demand_factor = 0.1 # Penalize if a node almost fills the truck on its own

            # Factor 3: Angle to depot (helps with creating routes radiating from depot)
            #Calculate angles of nodes i and j relative to the depot

            angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)

            angle_diff = np.abs(angle_i - angle_j)
            angle_diff = np.min([angle_diff, 2 * np.pi - angle_diff])  # Ensure difference is in [0, pi]
            angle_factor = 1.0 / (1 + angle_diff) # Smaller angles are preferred (near each other)


            # Factor 4: Proximity to depot for route return (encourages route segments near the depot)
            depot_distance_i = distance_matrix[i, 0]
            depot_distance_j = distance_matrix[j, 0]
            depot_proximity_factor = 1 / (depot_distance_i + depot_distance_j + 1e-6)

            # Combine the factors (adjust weights as needed)
            heuristics[i, j] = (
                0.5 * distance_factor +
                0.1 * demand_factor +
                0.2 * angle_factor +
                0.2 * depot_proximity_factor
            )

    return heuristics
```
