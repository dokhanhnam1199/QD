```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """CVRP heuristic: Combines distance, demand, angle, depot proximity, capacity buffer, adaptive sparsification, and node criticality."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # 2. Demand-based penalty/reward with capacity buffer (refined)
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_factor[i, j] = 0
                continue
            if i == 0 or j == 0:
                continue

            combined_demand = demands[i] + demands[j]
            remaining_capacity = capacity - combined_demand

            if combined_demand > capacity:
                demand_factor[i, j] = 0.01  # Strong penalty
            elif remaining_capacity > (capacity / 2):
                demand_factor[i, j] = 1.20 # Increased reward
            elif remaining_capacity > (capacity / 4):
                demand_factor[i, j] = 1.10 # Moderate reward
            else:
                demand_factor[i, j] = 0.9  # Slight penalty
    heuristic_matrix = heuristic_matrix * demand_factor

    # 3. Angle heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j: continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i,j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i,j] = 0

            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]

    # 4. Depot attraction (refined)
    depot_attraction = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j: continue
            depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))
            heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]

    for i in range(1, n):
        heuristic_matrix[0, i] *= 0.6  # Discourage direct connections from depot (less aggressive)
        heuristic_matrix[i, 0] *= 0.6  # Discourage direct connections to depot (less aggressive)

    # 5. Capacity Aware Depot Connection
    capacity_depot_connection = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j: continue
            if i == 0 and demands[j] > capacity / 2:
                capacity_depot_connection[i, j] = 0.2  # Heavily Penalize
            if j == 0 and demands[i] > capacity / 2:
                capacity_depot_connection[i, j] = 0.2 # Heavily Penalize
    heuristic_matrix = heuristic_matrix * (1-capacity_depot_connection)


    # 6. Node Criticality (New Feature): Identify critical nodes based on demand and distance to depot
    node_criticality = np.zeros(n)
    for i in range(1, n):
        node_criticality[i] = demands[i] * distance_matrix[i, 0]  # Demand * Distance to depot
    
    # Normalize criticality scores
    max_criticality = np.max(node_criticality)
    if max_criticality > 0:
        node_criticality = node_criticality / max_criticality
    
    # Incorporate criticality into the heuristic
    criticality_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                criticality_factor[i,j] = 0
                continue
            criticality_factor[i, j] = 1 + 0.1 * (node_criticality[i] + node_criticality[j])

    heuristic_matrix = heuristic_matrix * criticality_factor

    # 7. Enhanced Adaptive Sparsification
    non_zero_values = heuristic_matrix[heuristic_matrix > 0]
    if non_zero_values.size > 0:
        # Dynamically adjust sparsification based on problem size and demand variance
        demand_std = np.std(demands[1:])  # Standard deviation of customer demands
        problem_size_factor = min(1.0, n / 100.0)  # Scale sparsification with problem size

        # Adjust quantile based on demand variance and problem size
        quantile = 0.20 + 0.10 * (demand_std / capacity) * problem_size_factor
        quantile = min(0.50, quantile)  # Cap at 50% to prevent over-sparsification
        threshold = np.quantile(non_zero_values, quantile)
        heuristic_matrix[heuristic_matrix < threshold] = 0

    # 8. Demand Balancing Heuristic
    demand_balancing = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                continue

            # Encourage connections that balance demand within routes
            expected_remaining_capacity_i = capacity - demands[i]
            expected_remaining_capacity_j = capacity - demands[j]
            
            # Calculate the "demand pressure" - how close the node is to exceeding capacity if added to a route
            demand_pressure_i = demands[i] / capacity
            demand_pressure_j = demands[j] / capacity

            # Favor connecting nodes with opposite "demand pressure"
            demand_balancing[i,j] = 1 - abs(demand_pressure_i - demand_pressure_j)

            # Scale the balancing factor (adjust the 0.1 coefficient to fine-tune the effect)
            heuristic_matrix[i, j] += 0.05 * demand_balancing[i, j]

    # 9. Normalize heuristics for each node (after sparsification)
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum

    return heuristic_matrix
```
