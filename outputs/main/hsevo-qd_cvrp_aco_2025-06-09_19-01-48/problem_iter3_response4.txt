```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining distance, demand, angle, and depot proximity, with adaptive capacity consideration.
    Emphasizes normalization and sparsification for efficient solution sampling.  Includes pheromone concept.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))
    
    # Inverse distance heuristic with stronger weighting
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**3
    heuristic_matrix = distance_heuristic.copy()

    # Capacity penalty with adaptive scaling
    capacity_penalty = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                capacity_penalty[i, j] = 0
                continue
            if (demands[i] + demands[j]) > capacity and i != 0 and j != 0:
                capacity_penalty[i, j] = 0.05  # Higher penalty
            if j == 0 and i != 0:
                capacity_penalty[i,j] = 0.5  # Discount connection to depot

    heuristic_matrix *= capacity_penalty
                
    # Angle heuristic (encourage straighter paths) - Improved Angle Calculation
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j: continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)**2 # Penalize sharper angles more

            if n > 2:
                angle_heuristic[i,j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i,j] = 0

            heuristic_matrix[i, j] += 0.05 * angle_heuristic[i,j] # reduced weight

    # Depot Proximity - Favor connections closer to the depot when capacity is an issue
    depot_proximity = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == 0 or j == 0:
                continue
            depot_proximity[i,j] = 1.0 / (distance_matrix[i,0] + distance_matrix[j,0] + 1e-6)
    heuristic_matrix += 0.02 * depot_proximity  # Small influence

   # Pheromone concept - encourage reuse of edges
    pheromone_matrix = np.ones((n,n)) # Initialize - can be loaded from previous solution
    heuristic_matrix *= (pheromone_matrix**0.5) # Add a bit of pheromone effect

    # Normalize heuristics for each node - Sigmoid Normalization
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            # Sigmoid normalization to emphasize high values
            heuristic_matrix[i,:] = 1 / (1 + np.exp(-heuristic_matrix[i,:]))


    # Sparsify: remove edges with low heuristic values - Adaptive threshold
    threshold = np.mean(heuristic_matrix) * 0.3 # adaptive threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
