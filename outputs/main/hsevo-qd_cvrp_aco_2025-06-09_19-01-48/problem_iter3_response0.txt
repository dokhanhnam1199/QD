```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining distance, demand, angle, and depot proximity with adaptive sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # Demand-based capacity penalty and reward
    demand_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_factor[i, j] = 0
                continue

            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity and i != 0 and j != 0:
                demand_factor[i, j] = 0.1  # Significant penalty for exceeding capacity
            elif combined_demand <= capacity and i !=0 and j!=0:
                 demand_factor[i,j] = 1 + 0.2*(1 - (combined_demand/capacity)) # Reward for smaller load
            else:
                demand_factor[i,j] = 1 # No penalty when connecting to depot

            heuristic_matrix[i, j] *= demand_factor[i,j] # apply factor

    # Depot proximity (reward connections closer to depot)
    depot_proximity = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j:
                depot_proximity[i,j] = 0
                continue
            depot_proximity[i,j] = (1-distance_matrix[0,j]/np.max(distance_matrix[0,:])) + (1-distance_matrix[0,i]/np.max(distance_matrix[0,:]))
            if i == 0 or j == 0:
                depot_proximity[i,j] = 1 # No bonus when directly connecting to depot

            heuristic_matrix[i, j] += 0.05 * depot_proximity[i,j]

    # Angle heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j: continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i,j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i,j] = 0

            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]

    # Row-wise normalization
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum

    # Adaptive sparsification based on row-wise threshold
    for i in range(n):
        threshold = np.mean(heuristic_matrix[i,:]) * 0.7  # Adaptive threshold
        heuristic_matrix[i, heuristic_matrix[i,:] < threshold] = 0


    return heuristic_matrix
```
