{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    CVRP heuristic combining distance, demand, angle, and depot proximity, with adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Demand-based penalty/reward\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity and i != 0 and j != 0:\n                heuristic_matrix[i, j] *= 0.05  # Harsh penalty for exceeding capacity\n            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored\n                heuristic_matrix[i,j] *= 1.1\n                \n            #Proximity to depot\n            if j == 0 and i != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n            if i == 0 and j != 0:\n                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot\n\n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.1 * angle_heuristic[i,j]\n\n\n    # Depot attraction (nodes closer to the depot are encouraged)\n\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        if i == j: continue\n      depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n      heuristic_matrix[i, j] += 0.05 * depot_attraction[i, j]\n\n\n\n    # Normalize heuristics for each node\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Adaptive Sparsification\n    threshold = np.mean(heuristic_matrix) * 0.3 # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    CVRP heuristic combining distance, demand, angle, depot proximity, and node criticality with adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic (inverse square)\n    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2\n    heuristic_matrix = distance_heuristic.copy()\n\n    # Demand-based penalty/reward\n    demand_factor = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_factor[i, j] = 0\n                continue\n\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity and i != 0 and j != 0:\n                demand_factor[i, j] = 0.01  # Harsh penalty for exceeding capacity\n            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored\n                demand_factor[i, j] = 1.2\n            else:\n                demand_factor[i,j] = 1.0\n\n\n    heuristic_matrix *= demand_factor\n\n\n    # Angle heuristic (encourage straighter paths)\n    angle_heuristic = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n\n            angle_sum = 0\n            for k in range(n):\n                if k == i or k == j: continue\n\n                v1 = coordinates[i] - coordinates[k]\n                v2 = coordinates[j] - coordinates[i]\n\n                dot_product = np.dot(v1, v2)\n                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n\n                if magnitudes > 0:\n                    cosine_angle = dot_product / magnitudes\n                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                    angle_sum += (np.pi - angle)\n\n            if n > 2:\n                angle_heuristic[i,j] = angle_sum / (n - 2)\n            else:\n                angle_heuristic[i,j] = 0\n\n            heuristic_matrix[i, j] += 0.05 * angle_heuristic[i,j]\n\n    # Depot attraction (nodes closer to the depot are encouraged).  Focus on edges *to* the depot\n    depot_attraction = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n            # Only incentivize connections *to* the depot, not *from* (less critical).\n            if j == 0 and i != 0: # Attract to depot\n                depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6))\n            heuristic_matrix[i, j] += 0.1 * depot_attraction[i, j]\n\n    # Node criticality:  Nodes with high demand have high criticality to be close to depot.\n    node_criticality = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n            if (demands[i] > (capacity / 2) or demands[j] > (capacity / 2)) and i != 0 and j != 0:\n                node_criticality[i,j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))\n                heuristic_matrix[i,j] += 0.15 * node_criticality[i,j]\n\n\n    # Normalize heuristics for each node, but only if the sum is non-zero\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i,:])\n        if row_sum > 0:\n            heuristic_matrix[i,:] /= row_sum\n\n    # Adaptive Sparsification\n    threshold = np.mean(heuristic_matrix) * 0.4 # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates distance, demand, angle, depot proximity, capacity buffer, and adaptive sparsification, while the worst only uses inverse distance. (2nd best) vs (second worst) shows the same contrast. Comparing (1st) vs (2nd), we see that (1st) has capacity buffer consideration. Comparing (3rd) vs (4th), we see no differences. Comparing (second worst) vs (worst), they are identical. Overall: better heuristics incorporate multiple factors (distance, demand, angle, depot) and utilize techniques like normalization and sparsification. Adaptive parameter tuning is crucial.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's refine \"Current Self-Reflection\" to design better heuristics, steering clear of the vagueness and pitfalls of \"Ineffective Self-Reflection.\" We need actionable, specific guidance.\n\nHere's a revised approach focusing on *effective* self-reflection:\n\n*   **Keywords:** Adaptive parameters, Problem-specific features, Capacity constraints, Normalization impact, Rigorous testing.\n*   **Advice:** Explicitly define \"relevant factors\" (e.g., criticality metrics, depot influence functions). Implement adaptive parameter tuning based on performance (e.g., reinforcement learning).\n*   **Avoid:** Vague statements like \"consider multiple factors\" or \"normalization can be helpful.\"\n*   **Explanation:** Go beyond suggesting general ideas. Instead, prompt the designer to *define* and *quantify* key problem characteristics and to *test* specific adaptations rigorously. Focus on adaptive strategies, not just static inclusion of elements.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}