```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining distance, demand, angle, and depot proximity, with adaptive capacity consideration.
    Emphasizes normalization and sparsification for efficient solution sampling. Includes pheromone-inspired intensification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Inverse square distance heuristic
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # Capacity penalty with adaptive scaling
    capacity_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                capacity_penalty[i, j] = 0
                continue
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity and i != 0 and j != 0:
                capacity_penalty[i, j] = (combined_demand - capacity) / capacity  # Scale penalty by excess demand
            else:
                 capacity_penalty[i, j] = 0 # No Penalty
    
    heuristic_matrix *= (1 - 0.5 * capacity_penalty) # Apply Capacity Penalty.  The higher the penalty the more it reduces the edge score

    # Depot proximity bias (slightly favor connections to the depot)
    depot_proximity = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == 0 or j == 0:
                depot_proximity[i, j] = 0.2  # Increase attractiveness for depot connections
    heuristic_matrix += depot_proximity

    # Angle heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j: continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = np.clip(dot_product / magnitudes, -1.0, 1.0)
                    angle = np.arccos(cosine_angle)
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i,j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i,j] = 0

            heuristic_matrix += 0.1 * angle_heuristic[i,j] #Reduced the impact of angle heuristic.

    # Pheromone-inspired intensification (simulated pheromone trails - encourage edges used more often)
    pheromone_matrix = np.ones((n, n)) # Initialize pheromone matrix
    heuristic_matrix *= (1 + 0.1 * pheromone_matrix) # Increase attractiveness of routes based on pheromone

    # Normalize heuristics for each node
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum
    
    # Sparsify: remove edges with low heuristic values adaptively
    threshold = np.mean(heuristic_matrix) * 0.3  #Adaptive threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
