```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, angle, depot proximity,
    and node criticality with adaptive sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # Demand-based penalty/reward
    demand_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_factor[i, j] = 0
                continue

            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity and i != 0 and j != 0:
                demand_factor[i, j] = 0.01  # Harsh penalty
            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand favored
                demand_factor[i, j] = 1.2
            else:
                demand_factor[i,j] = 1.0

    heuristic_matrix *= demand_factor

    # Angle heuristic (encourage straighter paths)
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j: continue

            angle_sum = 0
            for k in range(n):
                if k == i or k == j: continue

                v1 = coordinates[i] - coordinates[k]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)

                if magnitudes > 0:
                    cosine_angle = dot_product / magnitudes
                    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                    angle_sum += (np.pi - angle)

            if n > 2:
                angle_heuristic[i,j] = angle_sum / (n - 2)
            else:
                angle_heuristic[i,j] = 0

            heuristic_matrix[i, j] += 0.05 * angle_heuristic[i,j]

    # Depot attraction (nodes closer to the depot are encouraged).
    depot_attraction = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j: continue
            if j == 0 and i != 0: # Attract to depot
                depot_attraction[i, j] = (1 / (distance_matrix[i, 0] + 1e-6))
            heuristic_matrix[i, j] += 0.1 * depot_attraction[i, j]

    # Node criticality:  Nodes with high demand have high criticality to be close to depot.
    node_criticality = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == j: continue
            if (demands[i] > (capacity / 2) or demands[j] > (capacity / 2)) and i != 0 and j != 0:
                node_criticality[i,j] = (1 / (distance_matrix[i, 0] + 1e-6)) + (1 / (distance_matrix[j, 0] + 1e-6))
                heuristic_matrix[i,j] += 0.15 * node_criticality[i,j]

    # Normalize heuristics for each node
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i,:])
        if row_sum > 0:
            heuristic_matrix[i,:] /= row_sum

    # Adaptive Sparsification
    threshold = np.mean(heuristic_matrix) * 0.4
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
