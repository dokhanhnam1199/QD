```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic for CVRP based on distance, demand, and savings.

    Args:
        distance_matrix: Distance between nodes.
        coordinates: Coordinates of nodes.
        demands: Demand of each node.
        capacity: Vehicle capacity.

    Returns:
        A matrix indicating the attractiveness of each edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Calculate savings for each pair of nodes (savings heuristic).
    savings = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Combine distance, demand, and savings information.
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # No self-loops
            else:
                # Prioritize shorter distances
                distance_component = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

                # Penalize connections involving nodes with high demand if either node has a high demand.
                demand_penalty = (demands[i] + demands[j]) / (2 * capacity + 1e-6) #demand penalty related to vehicle capacity
                demand_component = 1 / (demand_penalty + 1e-6)
                
                # Incorporate savings. Higher savings are more attractive.
                savings_component = savings[i, j]

                heuristics[i, j] = distance_component * (1 + savings_component / (np.max(savings)+ 1e-6))* demand_component 

    return heuristics
```
