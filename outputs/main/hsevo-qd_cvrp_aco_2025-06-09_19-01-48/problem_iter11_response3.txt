```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining distance, demand, angle, and depot proximity with capacity consideration.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic (inverse square)
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)**2
    heuristic_matrix = distance_heuristic.copy()

    # Demand-based penalty/reward
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
                continue

            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity and i != 0 and j != 0:
                heuristic_matrix[i, j] *= 0.05  # Harsh penalty for exceeding capacity
            elif combined_demand <= (capacity / 4) and i != 0 and j != 0:  # Small demand edges are slightly favored
                heuristic_matrix[i,j] *= 1.1
                
            #Proximity to depot
            if j == 0 and i != 0:
                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot
            if i == 0 and j != 0:
                 heuristic_matrix[i,j] *= 0.7 # Discount connection to depot
    

    return heuristic_matrix
```
