```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improves upon the simple inverse distance heuristic for the TSP by
    incorporating information about node degree and overall network density.

    This heuristic favors edges connecting nodes with relatively low degree
    and in sparser regions of the network. The idea is to encourage the
    exploration of less-traveled paths and avoid clustering around high-degree nodes
    early on, promoting a more balanced and potentially shorter tour.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                         between nodes. distance_matrix[i, j] is the
                                         distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                      element represents a prior indicator of how promising it is
                      to include the corresponding edge in a TSP solution. Higher
                      values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate node degrees (number of neighbors)
    degrees = np.sum(distance_matrix > 0, axis=0)  # Assumes 0 distance means no connection

    # Calculate network density (average number of connections per node)
    avg_degree = np.mean(degrees)

    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] > 0:
                # Base heuristic: Inverse distance
                h = 1 / distance_matrix[i, j]

                # Adjust heuristic based on node degrees
                # Favor edges connected to nodes with lower degrees
                h *= (1 + (avg_degree - degrees[i])/avg_degree + (avg_degree - degrees[j])/avg_degree )/3

                heuristics[i, j] = h

    return heuristics
```
