```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on a combination of distance, node degree,
    and shortest path information.  Aims to identify promising edges
    for inclusion in solutions, weighting shorter edges connecting
    less-connected nodes more favorably.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the
                                      distance matrix between nodes.
                                      distance_matrix[i, j] is the distance
                                      between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing heuristic values for each edge. Higher
                    values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate node degree (number of neighbors) based on inverse distance
    # High inverse distance = strong connection = high degree contribution
    node_degree = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)

    # Calculate shortest paths using Dijkstra's algorithm to estimate proximity
    # (This could be precomputed for efficiency in a real application.)
    shortest_paths = np.zeros((n, n))
    for i in range(n):
        dist = np.full(n, np.inf)
        visited = np.zeros(n, dtype=bool)
        dist[i] = 0
        for _ in range(n):
            u = np.argmin(dist + visited * np.inf)  # select minimum unseen index
            visited[u] = True
            for v in range(n):
                if distance_matrix[u, v] > 0 and dist[v] > dist[u] + distance_matrix[u, v]:
                    dist[v] = dist[u] + distance_matrix[u, v]

        shortest_paths[i, :] = dist


    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse distance.  Smaller distance = better
                h = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero

                # Penalize connections between high-degree nodes
                h *= 1 / (node_degree[i] * node_degree[j] + 1e-9)

                # Favor edges that are part of a short path (less importance)
                h *= np.exp(-shortest_paths[i,j] / np.mean(distance_matrix[distance_matrix > 0])) # Penalize edges within "long" min path distances
                # assign value. The closer the two nodes are in shortest paths, the more impact it has

                heuristics[i, j] = h
    return heuristics
```
