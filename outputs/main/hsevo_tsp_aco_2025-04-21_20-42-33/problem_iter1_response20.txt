```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Generates heuristic indicators for the Traveling Salesman Problem (TSP) based on distance matrix.
    This version prioritizes shorter edges and edges connecting to nodes with high average distance.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j] represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element indicates the desirability
                      of including the corresponding edge in the TSP solution.  Higher values indicate a more
                      desirable edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate average distance for each node
    avg_distances = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse of distance
                heuristic_value = 1 / distance_matrix[i, j]

                # Adjust heuristic based on average distances of connected nodes.
                # Nodes with high average distances are likely on the "outside" of the graph
                # and connecting to them might be valuable in creating a shorter tour.
                heuristic_value *= (avg_distances[i] + avg_distances[j]) / 2

                heuristic_matrix[i, j] = heuristic_value
            else:
                heuristic_matrix[i, j] = 0  # Disallow self-loops

    return heuristic_matrix
```
