```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: shortest paths + adaptive degree bias + sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # 2. Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # 3. Degree bias (adaptive penalty)
    degree_penalty = np.ones((n, n))  # Initialize to 1 for no penalty by default
    avg_degree = 0
    degrees = np.sum(inverse_distance, axis=1) - np.diag(inverse_distance)
    avg_degree = np.mean(degrees)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Adaptive degree penalty: only penalize if degree > avg
                penalty_i = max(1, avg_degree / (degrees[i] + 1e-9))
                penalty_j = max(1, avg_degree / (degrees[j] + 1e-9))
                degree_penalty[i, j] = penalty_i * penalty_j
            else:
                degree_penalty[i, j] = 0

    # 4. Combine heuristics
    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + 1e-9)

    # 5. Sparsification: Remove edges with low heuristic values
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20) # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 6. Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:  # Avoid division by zero
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
