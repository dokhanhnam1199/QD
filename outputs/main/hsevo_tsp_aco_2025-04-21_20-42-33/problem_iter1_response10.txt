```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance and node degree.

    This version combines inverse distance with a penalty for high-degree nodes
    to encourage a more balanced exploration of the solution space.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance heuristic
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Degree-based penalty (encourages low-degree nodes)
    degree_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                # Approximating the degree penalty based on the sum of inverse distances from each node
                degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i,i] #subtract diagonal
                degree_j = np.sum(inverse_distance[j, :]) - inverse_distance[j,j] #subtract diagonal
                degree_penalty[i, j] = 1 / (degree_i * degree_j + 1e-9)  # Encourage connections to low degree nodes, avoid zero division.
            else:
                degree_penalty[i, j] = 0

    # Combine heuristics
    heuristic_matrix = inverse_distance * degree_penalty
    return heuristic_matrix
```
