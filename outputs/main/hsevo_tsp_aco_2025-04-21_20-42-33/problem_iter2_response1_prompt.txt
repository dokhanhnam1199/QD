{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    A heuristic for the Traveling Salesman Problem (TSP) that considers\n    both distance and global graph structure to estimate the desirability\n    of including each edge in the optimal tour.  It uses a combination\n    of inverse distance (basic desirability) and a measure of connectivity\n    via the shortest paths between nodes. The idea is to slightly favor edges\n    that bridge disconnected parts of the graph or connect nodes that are otherwise\n    far apart in terms of path length.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances\n                                       between nodes. distance_matrix[i, j] is the\n                                       distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each\n                    element represents the desirability (heuristic value) of\n                    including the corresponding edge in the TSP tour. Higher\n                    values indicate more desirable edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Basic desirability: inverse of distance\n    base_heuristic = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # All-pairs shortest path lengths (using the distance matrix)\n    path_lengths = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        path_lengths[i,j] = distance_matrix[i, j]\n    for k in range(n):\n      for i in range(n):\n        for j in range(n):\n          path_lengths[i, j] = min(path_lengths[i, j], path_lengths[i, k] + path_lengths[k, j])\n\n\n    # Connectivity bonus:\n    # The bonus is higher if nodes i and j are far apart in terms of path length,\n    # suggesting the edge (i,j) can significantly shorten the tour.\n\n    connectivity_bonus = path_lengths / (np.max(path_lengths) + 1e-9)\n\n    heuristic_matrix = base_heuristic + (1 - connectivity_bonus) # Combine with inverse distance\n    #heuristic_matrix = np.clip(heuristic_matrix, 0, 1)  # Ensure values are non-negative\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Improves upon the basic inverse distance heuristic by considering\n    a combination of distance, node degree, and local density to guide\n    the TSP solver.  This is done by calculating how central a particular edge is compared to the total distances from that edge.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix\n                         for the TSP problem. distance_matrix[i, j] is the\n                         distance between city i and city j.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, where each\n        element represents a heuristic score indicating the desirability\n        of including the corresponding edge in the TSP tour. Higher scores\n        indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate a heuristic score for each edge\n    for i in range(n):\n        for j in range(n):\n            if i != j:  # Avoid self-loops\n                # Inverse distance: Shorter edges are more desirable\n                distance_term = 1 / distance_matrix[i, j]\n\n                # Calculate local density around each node. A node with low average distance is considered to have a high density\n                i_density = np.sum(1/distance_matrix[i, :])\n                j_density = np.sum(1/distance_matrix[j, :])\n                \n                # Combines the inverse distance and the density heuristic.\n\n                heuristic_matrix[i, j] = distance_term + i_density + j_density\n            else:\n                heuristic_matrix[i, j] = 0  # No self-loops\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates shortest paths using Dijkstra's algorithm to estimate proximity, and penalizes connections between high-degree nodes and edges that are part of a long path. The worst uses a combination of inverse distance, node degree preference, and simulated annealing-inspired perturbation.\n\nComparing (2nd) vs (19th), the second-best heuristic combines inverse distance, node degree bias, and global average distance, boosting edges significantly shorter than average. The 19th considers inverse distance and local density around each node.\n\nComparing (1st) vs (2nd), the first heuristic utilizes Dijkstra's algorithm and shortest path estimations, while the second relies on global average distance. This suggests the shortest path calculations contribute more effectively.\n\nComparing (3rd) vs (4th), the third prioritizes nodes with fewer close neighbors and penalizes long edges to well-connected nodes. The fourth prioritizes shorter edges, penalizes edges on longer paths, adds randomness, and ensures non-zero heuristic values. The more sophisticated degree adjustment seems advantageous.\n\nComparing (second worst) vs (worst), the 19th combines inverse distance with local density. The 20th uses inverse distance, node degree penalties, and simulated annealing-inspired perturbation. The inclusion of randomness doesn't seem to boost its position.\n\nOverall: The top-performing heuristics consider a combination of inverse distance, node degree, and shortest path information or global distance awareness, while penalizing connections between high-degree nodes. The use of shortest paths (via Dijkstra or similar) appears more effective than global averages or local density alone. Randomness, although often included, doesn't guarantee better results. More informed exploration strategies, like those based on node degree or shortest paths, tend to perform better.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I will help you redefine \"Current Self-Reflection\" to design better heuristics, avoiding pitfalls and focusing on effective strategies. Here's a breakdown to guide the process:\n\n*   **Keywords:** Informed Exploration, Node Degree Penalty, Inverse Distance, Shortest Path Integration, Controlled Randomness, Solution Balancing.\n\n*   **Advice:** Prioritize shortest path information and inverse distance metrics, then gently bias exploration by penalizing high-degree node connections only when necessary. Use randomization sparingly, guided by the quality of the existing solution.\n\n*   **Avoid:** Blindly penalizing high-degree nodes, uncontrolled or excessive randomness, neglecting shortest path information and solution balance.\n\n*   **Explanation:** Combining these factors ensures the heuristic balances exploration with exploitation of good solutions, leverages distance and path information, and avoids getting stuck in local optima due to over-penalization or excessive randomness.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}