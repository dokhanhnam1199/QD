```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra


def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: Combines inverse distance, adaptive degree bias, shortest paths,
    and node potential with controlled sparsification and temperature scaling."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance with a small constant to avoid division by zero
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # Adaptive degree bias (penalize high-degree nodes, encourage exploration)
    degrees = np.sum(inverse_distance, axis=1)
    avg_degree = np.mean(degrees)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty[i, j] = max(0.1, avg_degree / (degrees[i] * degrees[j] + 1e-9))  #Min penalty to avoid div by zero problems
            else:
                degree_penalty[i, j] = 0

    # Node potential (estimate of node "importance" based on connections)
    node_potential = np.sum(inverse_distance, axis=0)  # Sum of inverse distances to each node
    node_potential_matrix = np.outer(node_potential, node_potential)

    # Combine heuristics (weighted combination)
    alpha = 0.6  # Weight for inverse distance
    beta = 0.2   # Weight for degree penalty
    gamma = 0.2  # Weight for node potential

    heuristic_matrix = (alpha * inverse_distance +
                        beta * degree_penalty +
                        gamma * node_potential_matrix / (shortest_paths + 1e-9)) # Avoid div by 0


    # Sparsification (remove less promising edges)
    temperature = 0.8 # Control level of sparsification
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], temperature*20)  # Adjust percentile
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Post-Normalization
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
