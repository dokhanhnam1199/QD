```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: Combines inverse distance, adaptive degree penalty, and shortest paths with sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Shortest path heuristic
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = np.zeros_like(distance_matrix)
    for i in range(n):
        shortest_paths[i] = dijkstra(graph, indices=i, unweighted=False)

    # Adaptive Node degree penalty
    row_sums = np.sum(distance_matrix, axis=1)
    mean_row_sum = np.mean(row_sums)

    degree_penalty = np.ones_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                if row_sums[i] > mean_row_sum and row_sums[j] > mean_row_sum:
                    penalty = (row_sums[i] + row_sums[j]) / (2 * mean_row_sum)
                    degree_penalty[i, j] = 1/penalty

    heuristic_matrix = inverse_distance * degree_penalty + 1 / (shortest_paths + 1e-9)


    # Sparsification
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalization
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
