```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP) based on a combination of
    inverse distance, nearest neighbor considerations, and a bit of stochasticity inspired by Brownian motion.

    Args:
        distance_matrix: A numpy array representing the distance matrix between cities.
                         distance_matrix[i][j] is the distance from city i to city j.

    Returns:
        A numpy array of the same shape as distance_matrix, where each element represents
        the desirability of including the corresponding edge in a solution. Higher values
        indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component (as in the trivial version)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Nearest neighbor component
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Find the nearest neighbors for city i
        neighbors = np.argsort(distance_matrix[i, :])[1:4]  # Exclude itself (distance 0) and take top 3 nearest
        for neighbor in neighbors:
            nearest_neighbor_bonus[i, neighbor] = 0.5  # Add a bonus for edges to nearest neighbors

    # Stochastic component (Brownian motion inspired)
    random_noise = np.random.normal(0, 0.1, size=(n, n))  # Add some Gaussian noise

    # Combine the components
    heuristics = inverse_distance + nearest_neighbor_bonus + random_noise

    # Make sure the values are non-negative (though not strictly required)
    heuristics = np.clip(heuristics, 0, None)

    return heuristics
```
