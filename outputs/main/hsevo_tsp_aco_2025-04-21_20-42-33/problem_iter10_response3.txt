import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra


def heuristics_v2(distance_matrix: np.ndarray, inverse_distance_epsilon: float = 6.807099090583381e-07,
                  degree_penalty_threshold_factor: float = 1.4194716065534059, degree_penalty_min: float = 0.6088347872097863,
                  inverse_distance_power: float = 1.4002834882297654, shortest_paths_power: float = 0.7450061093687188,
                  sparsification_percentile: float = 34.48823313714568) -> np.ndarray:
    """TSP heuristic: Combines inverse distance, shortest paths, and adaptive degree penalty, sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + inverse_distance_epsilon)

    # 2. Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # 3. Adaptive degree bias
    degree_penalty = np.ones_like(distance_matrix)
    avg_degree = 0
    for i in range(n):
        degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]
        avg_degree += degree_i
    avg_degree /= n

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]
                degree_j = np.sum(inverse_distance[j, :]) - inverse_distance[j, j]

                if degree_i > degree_penalty_threshold_factor * avg_degree:
                    degree_penalty[i, j] *= max(degree_penalty_min, avg_degree / (degree_i + inverse_distance_epsilon))
                if degree_j > degree_penalty_threshold_factor * avg_degree:
                    degree_penalty[i, j] *= max(degree_penalty_min, avg_degree / (degree_j + inverse_distance_epsilon))
            else:
                degree_penalty[i, j] = 0

    # 4. Combine heuristics
    heuristic_matrix = inverse_distance**inverse_distance_power * degree_penalty / (shortest_paths + inverse_distance_epsilon)**shortest_paths_power

    # 5. Sparsification
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], sparsification_percentile)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 6. Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
