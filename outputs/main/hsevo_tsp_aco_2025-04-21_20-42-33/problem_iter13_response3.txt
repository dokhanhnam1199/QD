import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray, inverse_distance_epsilon: float = 2.5395447749389465e-07,
                  degree_penalty_epsilon: float = 4.2818380785400695e-07, randomness_factor: float = 0.09064313636060466,
                  sparsification_threshold_percentile: float = 31.499668166641598) -> np.ndarray:
    """TSP heuristic: Combines inverse distance, adaptive degree bias, shortest paths, sparsification, and controlled randomness."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + inverse_distance_epsilon)

    # Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # Adaptive degree bias
    degree_penalty = np.ones((n, n))
    degrees = np.sum(inverse_distance, axis=1)
    avg_degree = np.mean(degrees)

    for i in range(n):
        for j in range(n):
            if i != j:
                penalty_i = max(1, avg_degree / (degrees[i] + degree_penalty_epsilon))
                penalty_j = max(1, avg_degree / (degrees[j] + degree_penalty_epsilon))
                degree_penalty[i, j] = penalty_i * penalty_j
            else:
                degree_penalty[i, j] = 0

    # Combine heuristics
    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + inverse_distance_epsilon)

    # Introduce controlled randomness
    random_matrix = np.random.rand(n, n) * randomness_factor * inverse_distance
    heuristic_matrix += random_matrix

    # Sparsification BEFORE normalization
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], sparsification_threshold_percentile)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
