```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP) that estimates
    the "promisingness" of each edge based on a combination of distance and
    global connectivity.  Shorter distances and higher global connectivity are favored.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
                                       matrix between cities. distance_matrix[i, j] is
                                       the distance between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    where each element represents the heuristic value for the
                    corresponding edge. Higher values indicate a more promising edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the average distance from each city to all other cities.
    city_connectivity = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)  # Added small positive value to prevent division by zero and make edges to same node unatrractive

    # Heuristic combines inverse distance with connectivity measures
    for i in range(n):
        for j in range(n):
             if i != j: # do not consider loops, keep value 0 to prevent selection
                 heuristic_matrix[i, j] = (1 / distance_matrix[i, j]) * (city_connectivity[i] + city_connectivity[j])  # Prioritize shorter and well-connected locations.

    return heuristic_matrix
```
