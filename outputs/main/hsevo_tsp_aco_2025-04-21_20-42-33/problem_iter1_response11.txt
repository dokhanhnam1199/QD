```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP) that provides
    prior indicators of how promising it is to include each edge in a solution,
    considering both distance and neighborhood density.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                      represents the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                      element indicates the desirability of including the
                      corresponding edge in the TSP tour. Higher values represent
                      more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are generally more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero.

    # 2. Nearest Neighbor Consideration: Reward edges connecting to nodes with few close neighbors.
    neighbor_density = np.zeros(n)
    for i in range(n):
        # Find the k nearest neighbors for each city (excluding itself)
        distances = distance_matrix[i, :]
        nearest_neighbors_indices = np.argsort(distances)[1:min(4, n)]  # top 3 neighbors are good enough if there are that many neighbors.
        neighbor_density[i] = np.sum(1.0 / (distance_matrix[i, nearest_neighbors_indices] + 1e-9)) #Sum of inversed distance to neighbors.
    
    # Normalize the density values.
    neighbor_density = (neighbor_density - np.min(neighbor_density)) / (np.max(neighbor_density) - np.min(neighbor_density) + 1e-9) # scale density to be between 0 and 1.

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = inverse_distance[i, j] * (0.5 + 0.25 * (1 - neighbor_density[i]) + 0.25 * (1 - neighbor_density[j]))

    return heuristics
```
