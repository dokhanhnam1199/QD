```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on a combination of factors:
    1. Inverse distance: Shorter distances are generally preferred.
    2. Node degree encouragement: Encourages edges connected to nodes with fewer connections in the current path.
    3. Regularization: Adds a small value to prevent division by zero and stabilize the heuristic.

    Args:
        distance_matrix: A numpy array representing the distance matrix between nodes.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the heuristic values for each edge.
    """
    n = distance_matrix.shape[0]
    regularization = 1e-6  # Small value to prevent division by zero

    # Inverse distance heuristic
    inverse_distance = 1 / (distance_matrix + regularization)

    # Node degree encouragement (initially all nodes have degree 0)
    node_degrees = np.zeros(n)  # Initialize node degrees to zero for all nodes
    degree_encouragement = np.ones_like(distance_matrix)  # Initialize to all ones
    for i in range(n):
        for j in range(n):
            if i != j:
                  degree_encouragement[i, j] = 1 - (node_degrees[i] + node_degrees[j]) / (2 * (n-1))
                  degree_encouragement[i,j] = max(degree_encouragement[i,j],0.05) # prevent 0

    # Combine heuristics
    heuristic_matrix = inverse_distance * degree_encouragement


    return heuristic_matrix
```
