```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: Combines inverse distance, degree bias, shortest paths, and introduces stochasticity."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # Adaptive degree bias with a bit more sophistication
    degrees = np.sum(inverse_distance, axis=1)
    avg_degree = np.mean(degrees)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty[i, j] = (avg_degree / (degrees[i] + 1e-9)) * (avg_degree / (degrees[j] + 1e-9))
            else:
                degree_penalty[i, j] = 0

    # Combine heuristics - multiplicative and additive components
    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + 1e-9)

    # Introduce stochasticity based on heuristic values. Higher heuristic -> lower temperature
    temperature = 0.1 / (heuristic_matrix + 0.01) # Avoid division by zero.  Temperature is inversely proportional to heuristic
    random_matrix = np.random.rand(n, n) * temperature
    heuristic_matrix += random_matrix # Adding noise to the heuristic scores

    # Sparsification - more aggressive
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30) # Higher percentile for sparsification
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # Normalize the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
