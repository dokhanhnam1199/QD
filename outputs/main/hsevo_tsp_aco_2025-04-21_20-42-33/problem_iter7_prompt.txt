{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\nimport scipy.sparse\nfrom scipy.sparse.csgraph import dijkstra\n\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse distance, shortest paths, and adaptive degree penalty.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n\n    # Shortest paths (Dijkstra's)\n    shortest_paths = np.zeros((n, n))\n    for i in range(n):\n        dist = np.full(n, np.inf)\n        visited = np.zeros(n, dtype=bool)\n        dist[i] = 0\n        for _ in range(n):\n            u = np.argmin(dist + visited * np.inf)\n            visited[u] = True\n            for v in range(n):\n                if distance_matrix[u, v] > 0 and dist[v] > dist[u] + distance_matrix[u, v]:\n                    dist[v] = dist[u] + distance_matrix[u, v]\n        shortest_paths[i, :] = dist\n\n    # Node degree (inverse distance based)\n    node_degree = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)\n    mean_distance = np.mean(distance_matrix[distance_matrix > 0])\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                h = inverse_distance[i, j]\n\n                # Adaptive degree penalty\n                degree_penalty = 1 / (np.sqrt(node_degree[i] * node_degree[j]) + 1e-9)\n                h *= degree_penalty\n\n                # Favor edges on shorter paths\n                h *= np.exp(-shortest_paths[i, j] / mean_distance)\n\n                heuristics[i, j] = h\n\n    # Normalize\n    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics) + 1e-9)\n\n    # Sparsify based on percentile threshold.  More aggressive sparsification.\n    threshold = np.percentile(heuristics[heuristics > 0], 50)\n    heuristics[heuristics < threshold] = 0\n\n    return heuristics\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}