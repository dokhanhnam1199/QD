```python
import numpy as np
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, Dijkstra shortest paths, and degree bias.
    """
    n = distance_matrix.shape[0]
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    heuristic_matrix = inverse_distance.copy() # Initialize

    # Dijkstra shortest path heuristic
    dist_matrix = dijkstra(csgraph=distance_matrix, directed=False, unweighted=False)
    shortest_path_heuristic = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j and np.isfinite(dist_matrix[i, j]):
                shortest_path_heuristic[i, j] = 1.0 / (dist_matrix[i, j] + 1e-9)

    heuristic_matrix += shortest_path_heuristic # Add shortest path

    # Degree bias: penalize connection between high-degree nodes
    degree = np.sum(np.isfinite(distance_matrix), axis=0)
    for i in range(n):
      for j in range(n):
        if i!=j:
          heuristic_matrix[i,j] /= (degree[i] + degree[j]) # Penality

    # Remove self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0.0

    return heuristic_matrix
```
