{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    A more sophisticated heuristic for the Traveling Salesman Problem.\n\n    This heuristic combines several factors:\n    1. Inverse distance: Shorter distances are generally more desirable.\n    2. Node degree bias: Preferentially selects edges connected to nodes with fewer connected edges so far\n    3. Global average distance: Adjusts edge weights based on the overall average distance in the matrix.  Edges significantly shorter than average are boosted.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j] is the distance between node i and node j.  Inf or 0 indicates no direct connection. Diagonal elements should be Inf.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                      indicates how promising that edge is. Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # 1. Inverse distance\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Avoid division by zero\n\n    # 2. Degree bias (initially uniform). Later to be adjusted iteratively, but not within the pure heuristic function. This simulates the concept of \"nearest neighbor\" like behavior.\n    degree_bias = np.ones((n, n))\n\n    # 3. Global average distance (robustly calculated)\n    valid_distances = distance_matrix[distance_matrix != np.inf]\n    avg_distance = np.mean(valid_distances) if valid_distances.size > 0 else 0.0 # in case all edges are blocked\n\n    # Combine the factors. Significantly shorter edges get a boost.\n    heuristic_matrix = inverse_distance * degree_bias * (1 + np.maximum(0.0, (avg_distance - distance_matrix) / avg_distance))\n\n    # Ensure no connection to self\n    for i in range(n):\n        heuristic_matrix[i, i] = 0.0  # No loops\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Tesla's Intuition for TSP Edge Importance.\n\n    This function estimates the \"promise\" of each edge in a TSP problem\n    based on a combination of factors: distance, neighborhood density,\n    and overall connectivity. It leverages principles of electromagnetic\n    induction (where proximity enhances interaction) and network theory.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances\n                                     between cities.  distance_matrix[i, j] is the\n                                     distance between city i and city j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each\n                    element represents the heuristic score of including the\n                    corresponding edge in the TSP tour. Higher scores indicate\n                    more promising edges.\n\n    Technical details:\n    1. Inverse Distance: Shorter distances are generally more desirable, so we\n       start with the inverse of the distance.  This represents a basic attraction.\n    2. Neighborhood Influence: We calculate a \"neighborhood density\" for each city.\n       This is based on the idea that a city with many close neighbors might be a\n       good \"hub\" for connecting different parts of the tour. We sum the inverse\n       distances to nearby cities as a measure of neighborhood density.\n       The score is adjusted using (1 + neighbor_influence[i] + neighbor_influence[j]), so a city near highly connected hubs will have a good chance to be a part of the route.\n    3. Connectivity Reinforcement: A penalty is applied if two cities are highly inter-connected to other hubs, otherwise it will lead to sub-optimal convergence.\n\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Tesla's Principle #1: Inverse Distance\n    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Avoid division by zero\n\n    # Tesla's Principle #2: Neighborhood Influence (Electromagnetic Induction Analogy)\n    neighbor_influence = np.sum(inverse_distance, axis=1)\n\n    # Combine the factors, with a focus on local density and a tempering effect from direct distance\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics[i, j] = inverse_distance[i, j] * (1 + neighbor_influence[i] + neighbor_influence[j])\n            else:\n                heuristics[i, j] = 0 # Avoid self-loops\n    return heuristics\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates shortest paths using Dijkstra's algorithm to estimate proximity, and penalizes connections between high-degree nodes and edges that are part of a long path. The worst uses a combination of inverse distance, node degree preference, and simulated annealing-inspired perturbation.\n\nComparing (2nd) vs (19th), the second-best heuristic combines inverse distance, node degree bias, and global average distance, boosting edges significantly shorter than average. The 19th considers inverse distance and local density around each node.\n\nComparing (1st) vs (2nd), the first heuristic utilizes Dijkstra's algorithm and shortest path estimations, while the second relies on global average distance. This suggests the shortest path calculations contribute more effectively.\n\nComparing (3rd) vs (4th), the third prioritizes nodes with fewer close neighbors and penalizes long edges to well-connected nodes. The fourth prioritizes shorter edges, penalizes edges on longer paths, adds randomness, and ensures non-zero heuristic values. The more sophisticated degree adjustment seems advantageous.\n\nComparing (second worst) vs (worst), the 19th combines inverse distance with local density. The 20th uses inverse distance, node degree penalties, and simulated annealing-inspired perturbation. The inclusion of randomness doesn't seem to boost its position.\n\nOverall: The top-performing heuristics consider a combination of inverse distance, node degree, and shortest path information or global distance awareness, while penalizing connections between high-degree nodes. The use of shortest paths (via Dijkstra or similar) appears more effective than global averages or local density alone. Randomness, although often included, doesn't guarantee better results. More informed exploration strategies, like those based on node degree or shortest paths, tend to perform better.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I will help you redefine \"Current Self-Reflection\" to design better heuristics, avoiding pitfalls and focusing on effective strategies. Here's a breakdown to guide the process:\n\n*   **Keywords:** Informed Exploration, Node Degree Penalty, Inverse Distance, Shortest Path Integration, Controlled Randomness, Solution Balancing.\n\n*   **Advice:** Prioritize shortest path information and inverse distance metrics, then gently bias exploration by penalizing high-degree node connections only when necessary. Use randomization sparingly, guided by the quality of the existing solution.\n\n*   **Avoid:** Blindly penalizing high-degree nodes, uncontrolled or excessive randomness, neglecting shortest path information and solution balance.\n\n*   **Explanation:** Combining these factors ensures the heuristic balances exploration with exploitation of good solutions, leverages distance and path information, and avoids getting stuck in local optima due to over-penalization or excessive randomness.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}