```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Newtonian Heuristic for TSP.

    Inspired by gravitational force and shortest path principles.
    Edges between closer nodes are more attractive (higher heuristic value),
    and nodes in sparsely connected regions get a boost to encourage exploration.

    Args:
        distance_matrix: A numpy array representing the distance matrix of the TSP.

    Returns:
        A numpy array of the same shape as distance_matrix, representing heuristic values for each edge.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Inverse distance, akin to gravitational attraction
    heuristics = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero.

    # 2. Connectivity boost - encourage exploration of sparser regions.  Nodes with higher connection cost receive higher boost.
    #    This will use the sum of row elements as the connection costs
    row_sums = np.sum(distance_matrix, axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] *= (row_sums[i] + row_sums[j]) / (2 * np.mean(row_sums))  # Normalized scaling factor

    # 3. Normalization
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic

    return heuristics
```
