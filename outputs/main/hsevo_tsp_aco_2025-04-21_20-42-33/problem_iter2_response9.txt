```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: Dijkstra shortest paths, inverse distance, degree penalty."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Dijkstra shortest path heuristic
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = np.zeros_like(distance_matrix)
    for i in range(n):
        shortest_paths[i] = dijkstra(graph, indices=i, unweighted=False)

    heuristic_matrix = 1 / (shortest_paths + 1e-9)

    # Node degree penalty
    neighbor_counts = np.sum(distance_matrix < np.mean(distance_matrix[distance_matrix != np.inf]), axis=0)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (1 + (distance_matrix[i,j] * neighbor_counts[i]/n) +  (distance_matrix[i,j] * neighbor_counts[j]/n))
    return heuristic_matrix
```
