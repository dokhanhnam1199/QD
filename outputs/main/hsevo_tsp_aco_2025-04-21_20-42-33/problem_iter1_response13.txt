```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic for the Traveling Salesman Problem (TSP).

    This function calculates a heuristic matrix that estimates the "promisingness"
    of including each edge in a TSP solution. It combines distance information
    with a measure of nodal accessibility to favor edges connected to nodes
    that are less connected to others (higher degree nodes should be penalized).

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                        represents the distance between city i and city j.

    Returns:
        np.ndarray: A heuristic matrix of the same shape as distance_matrix,
                    where higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate a nodal "degree penalty" based on inverse squared distance to others
    degree_penalties = np.zeros(n)
    for i in range(n):
        degree_penalties[i] = np.sum(1 / (distance_matrix[i, :] + 1e-9))  # Adding small value to avoid division by zero

    # Combine distance (inverse) with node degree penalization
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (1 / (distance_matrix[i, j] + 1e-9)) * np.sqrt(1/(degree_penalties[i] * degree_penalties[j] + 1e-9)) #Inverse the product of degree_penalties

    return heuristic_matrix
```
