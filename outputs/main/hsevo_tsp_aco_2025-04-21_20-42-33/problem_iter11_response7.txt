```python
import numpy as np
import scipy.sparse
from scipy.sparse.linalg import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: Adaptive degree penalty, Dijkstra SP, sparsification, controlled randomness."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # 2. Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # 3. Adaptive Degree Bias
    degree_penalty = np.ones_like(distance_matrix)
    degrees = np.sum(inverse_distance, axis=1) - np.diag(inverse_distance)
    avg_degree = np.mean(degrees)

    for i in range(n):
        for j in range(n):
            if i != j:
                if degrees[i] > avg_degree:
                    degree_penalty[i, j] *= max(0.1, avg_degree / (degrees[i] + 1e-9))
                if degrees[j] > avg_degree:
                    degree_penalty[i, j] *= max(0.1, avg_degree / (degrees[j] + 1e-9))

    # 4. Combine heuristics
    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + 1e-9)

    # 5. Sparsification BEFORE normalization
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 25)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 6. Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    # 7. Controlled Randomness
    randomness_factor = 0.01
    random_matrix = np.random.rand(n, n) * randomness_factor * inverse_distance
    heuristic_matrix += random_matrix

    return heuristic_matrix
```
