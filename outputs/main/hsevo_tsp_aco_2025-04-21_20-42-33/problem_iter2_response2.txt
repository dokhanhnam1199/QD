```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance with node degree penalty and shortest-path approximation.
    """
    n = distance_matrix.shape[0]

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))
    inverse_distance[np.diag_indices_from(inverse_distance)] = 0.0

    # Node degree penalty (penalize links between popular nodes)
    node_degrees = np.sum(inverse_distance, axis=0)
    degree_matrix = np.outer(node_degrees, node_degrees)
    degree_penalty = 1.0 / (degree_matrix + 1e-9)

    # Heuristic combination
    heuristic_matrix = inverse_distance * degree_penalty

    return heuristic_matrix
```
