```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristics for TSP based on a combination of distance,
    node degree centrality, and randomness to encourage exploration.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                        between cities. distance_matrix[i][j] is the
                                        distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                    element represents the heuristic score for including that edge
                    in a potential TSP tour.  Higher values indicate more promising
                    edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate node degree centrality (approximation using inverse distance sum)
    node_centrality = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse distance (shorter distances are better)
                h = 1 / distance_matrix[i, j]

                # Incorporate node centrality: Preferentially connect to "important" nodes
                # This is normalized so edges between higher degree nodes don't dominate

                h *= (np.sqrt(node_centrality[i] * node_centrality[j])) #Geometric Mean
                # Small random component to introduce exploration, especially early on
                h += np.random.rand() * 0.1
                heuristics[i, j] = h

    return heuristics
```
