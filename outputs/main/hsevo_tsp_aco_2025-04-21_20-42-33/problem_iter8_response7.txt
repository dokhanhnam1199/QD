```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines inverse distance, adaptive degree penalty, shortest paths, and controlled randomness. """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # 2. Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # 3. Adaptive degree bias (geometric mean) and penalty if above average
    degree_penalty = np.ones((n, n))
    degrees = np.sum(inverse_distance, axis=1)
    avg_degree = np.mean(degrees)

    for i in range(n):
        for j in range(n):
            if i != j:
                if degrees[i] > avg_degree and degrees[j] > avg_degree:
                    penalty_i = max(0.1, avg_degree / (degrees[i] + 1e-9))
                    penalty_j = max(0.1, avg_degree / (degrees[j] + 1e-9))
                    degree_penalty[i, j] = np.sqrt(penalty_i * penalty_j) #Geometric mean

            else:
                degree_penalty[i, j] = 0

    # 4. Combine heuristics
    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + 1e-9)

    # 5. Controlled randomness (scaled by heuristic value)
    temperature_scale = 0.01
    temperature = temperature_scale * (1 - heuristic_matrix / (np.max(heuristic_matrix)+1e-9)) # Lower temp for high heuristics.
    randomness = np.random.rand(n, n) * temperature
    heuristic_matrix += randomness

    # 6. Sparsification (percentile-based before normalization)
    threshold = np.percentile(heuristic_matrix, 75)
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # 7. Normalize
    max_heuristic = np.max(heuristic_matrix)
    heuristic_matrix /= (max_heuristic+1e-9)

    return heuristic_matrix
```
