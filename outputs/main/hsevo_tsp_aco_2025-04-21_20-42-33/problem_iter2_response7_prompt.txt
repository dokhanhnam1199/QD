{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Newtonian Heuristic for TSP.\n\n    Inspired by gravitational force and shortest path principles.\n    Edges between closer nodes are more attractive (higher heuristic value),\n    and nodes in sparsely connected regions get a boost to encourage exploration.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix of the TSP.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing heuristic values for each edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # 1. Inverse distance, akin to gravitational attraction\n    heuristics = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero.\n\n    # 2. Connectivity boost - encourage exploration of sparser regions.  Nodes with higher connection cost receive higher boost.\n    #    This will use the sum of row elements as the connection costs\n    row_sums = np.sum(distance_matrix, axis=1)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics[i, j] *= (row_sums[i] + row_sums[j]) / (2 * np.mean(row_sums))  # Normalized scaling factor\n\n    # 3. Normalization\n    max_heuristic = np.max(heuristics)\n    heuristics /= max_heuristic\n\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Improves upon simple inverse distance by considering the average distance\n    to a node's nearest neighbors.  This favors edges that connect\n    nodes to their closer neighbors, increasing the likelihood of\n    locally optimal segments.  Also introduces a small amount of random\n    noise to encourage exploration.\n\n    Args:\n        distance_matrix: A numpy ndarray representing the distance matrix.\n\n    Returns:\n        A numpy ndarray of the same shape as the input, representing\n        prior indicators of how promising each edge is.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    for i in range(n):\n        # Find nearest neighbors for node i, excluding itself.\n        neighbors = np.argsort(distance_matrix[i, :])[1:min(4, n)]  # Top 3 nearest neighbors (or fewer if n < 4)\n\n        # Calculate the average distance to the nearest neighbors.\n        avg_neighbor_distance = np.mean(distance_matrix[i, neighbors])\n\n        for j in range(n):\n            if i != j:\n                # Heuristic is the inverse of the distance, adjusted by the\n                # average distance to nearest neighbors. The closer the neighbors on average,\n                # the higher the weighting. The closer two given nodes (i and j), the higher the weighting.\n                # The adjustment also ensures we favor more densely connected graphs by giving them an edge.\n                heuristics[i, j] = (avg_neighbor_distance / distance_matrix[i, j])\n\n                # Add some noise to the heuristic value to explore potentially suboptimal paths\n                noise = np.random.normal(0, 0.05)\n                heuristics[i, j] += noise\n\n                # Ensure the values are not zero.\n                heuristics[i, j] = max(heuristics[i, j], 0.0001) # Prevents zero divide, gives a base value.\n\n    return heuristics\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates shortest paths using Dijkstra's algorithm to estimate proximity, and penalizes connections between high-degree nodes and edges that are part of a long path. The worst uses a combination of inverse distance, node degree preference, and simulated annealing-inspired perturbation.\n\nComparing (2nd) vs (19th), the second-best heuristic combines inverse distance, node degree bias, and global average distance, boosting edges significantly shorter than average. The 19th considers inverse distance and local density around each node.\n\nComparing (1st) vs (2nd), the first heuristic utilizes Dijkstra's algorithm and shortest path estimations, while the second relies on global average distance. This suggests the shortest path calculations contribute more effectively.\n\nComparing (3rd) vs (4th), the third prioritizes nodes with fewer close neighbors and penalizes long edges to well-connected nodes. The fourth prioritizes shorter edges, penalizes edges on longer paths, adds randomness, and ensures non-zero heuristic values. The more sophisticated degree adjustment seems advantageous.\n\nComparing (second worst) vs (worst), the 19th combines inverse distance with local density. The 20th uses inverse distance, node degree penalties, and simulated annealing-inspired perturbation. The inclusion of randomness doesn't seem to boost its position.\n\nOverall: The top-performing heuristics consider a combination of inverse distance, node degree, and shortest path information or global distance awareness, while penalizing connections between high-degree nodes. The use of shortest paths (via Dijkstra or similar) appears more effective than global averages or local density alone. Randomness, although often included, doesn't guarantee better results. More informed exploration strategies, like those based on node degree or shortest paths, tend to perform better.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I will help you redefine \"Current Self-Reflection\" to design better heuristics, avoiding pitfalls and focusing on effective strategies. Here's a breakdown to guide the process:\n\n*   **Keywords:** Informed Exploration, Node Degree Penalty, Inverse Distance, Shortest Path Integration, Controlled Randomness, Solution Balancing.\n\n*   **Advice:** Prioritize shortest path information and inverse distance metrics, then gently bias exploration by penalizing high-degree node connections only when necessary. Use randomization sparingly, guided by the quality of the existing solution.\n\n*   **Avoid:** Blindly penalizing high-degree nodes, uncontrolled or excessive randomness, neglecting shortest path information and solution balance.\n\n*   **Explanation:** Combining these factors ensures the heuristic balances exploration with exploitation of good solutions, leverages distance and path information, and avoids getting stuck in local optima due to over-penalization or excessive randomness.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}