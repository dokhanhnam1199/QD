```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    TSP heuristics: Combines inverse distance, shortest paths, and node centrality.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # 2. Shortest Path (approximated via Floyd-Warshall)
    dist = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i, j] = min(dist[i, j], dist[i, k] + dist[k, j])

    #Edge Centrality based on shortest path
    closeness_centrality = np.zeros((n,n))
    for i in range(n):
      for j in range(n):
        closeness_centrality[i][j] = 1/(dist[i,j] + 1e-9)


    # 3. Node Centrality (degree approximation) - softened penalty
    node_centrality = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)
    centrality_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            centrality_matrix[i, j] = np.sqrt(node_centrality[i] * node_centrality[j])

    # Combine and normalize
    heuristics = inverse_distance + closeness_centrality #+ centrality_matrix*0.1 #soft penalty
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics) + 1e-9)

    # Add small randomness
    randomness = np.random.rand(n, n) * 0.01
    heuristics += randomness
    heuristics = np.clip(heuristics, 0, 1)

    return heuristics
```
