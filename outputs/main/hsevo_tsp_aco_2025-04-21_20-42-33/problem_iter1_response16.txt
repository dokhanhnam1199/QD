```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP).

    This version incorporates multiple heuristics to estimate the desirability of each edge:
    1. Inverse distance: Shorter distances are more desirable.
    2. Nearest neighbor: Edges connecting nodes to their nearest neighbors are favored.
    3. Minimum Spanning Tree (MST) approximation: Edges likely to be in an MST are favored.  This is approximated by favoring edges connecting to nodes with high degree in a locally-constructed approximate MST.  Local approximation is faster.
    4. Avoidance of long edges: Edges longer than the average edge length are penalized.
    5. Randomization: Introduces some randomness to explore diverse solutions.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j] is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the desirability of including the corresponding edge in the TSP solution.  Higher values indicate more desirable edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Nearest neighbor
    for i in range(n):
        nearest_neighbor = np.argsort(distance_matrix[i])[1]  # Exclude self-loop (distance 0)
        heuristics[i, nearest_neighbor] += 0.5  # Increased reward for nearest neighbor
        heuristics[nearest_neighbor, i] += 0.5  # Ensure symmetry

    # 3. MST Approximation (local)
    num_neighbors = min(5, n - 1)  # Consider only a limited number of neighbors for speed
    degrees = np.zeros(n)
    for i in range(n):
        neighbors = np.argsort(distance_matrix[i])[1:num_neighbors + 1] # Exclude self-loop
        degrees[i] = len(neighbors)
        for neighbor in neighbors:
            degrees[i] +=1

    for i in range(n):
      for j in range(n):
          heuristics[i,j]+=0.1*(degrees[i]+degrees[j]) # Encourage connection to high-degree nodes.

    # 4. Avoid long edges
    average_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > average_distance:
                heuristics[i, j] *= 0.5  # Penalize long edges

    # 5. Randomization
    randomness = np.random.rand(n, n) * 0.1
    heuristics += randomness

    # Ensure symmetry and remove self loops
    for i in range(n):
        heuristics[i, i] = 0
        for j in range(i): # Exploit upper/lower triangular symmetry.
          heuristics[j,i] = heuristics[i,j]


    return heuristics
```
