```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: Combines inverse distance, degree bias, shortest paths, and introduces controlled randomness with adaptive scaling."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Degree bias
    degrees = np.sum(inverse_distance, axis=1)
    avg_degree = np.mean(degrees)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty[i, j] = max(0.1, avg_degree / (degrees[i] + degrees[j] + 1e-9)) # Smoother penalty
            else:
                degree_penalty[i, j] = 0

    # Shortest path estimate (Dijkstra) - using sparse matrix for efficiency
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))
    shortest_paths_penalty = 1 / (shortest_paths + 1e-9)

    # Introduce controlled randomness - scaled by inverse distance
    randomness_factor = 0.05  # Adjust for desired exploration
    random_matrix = np.random.rand(n, n) * randomness_factor * inverse_distance


    # Combine heuristics with adaptive scaling
    alpha = 0.6 # Weight for distance
    beta = 0.3  # Weight for degree
    gamma = 0.1 # Weight for shortest path

    heuristic_matrix = alpha * inverse_distance + beta * degree_penalty + gamma * shortest_paths_penalty + random_matrix

    # Sparsification (remove less promising edges early)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30) # Adjusted percentile
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # Normalize the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
