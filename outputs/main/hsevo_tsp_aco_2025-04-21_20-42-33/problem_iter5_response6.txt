```python
import numpy as np
from scipy.sparse.csgraph import dijkstra


def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, Dijkstra shortest paths, and adaptive
    degree penalty for informed edge selection.
    """
    n = distance_matrix.shape[0]

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Dijkstra shortest path
    dist_matrix = dijkstra(csgraph=distance_matrix, directed=False, unweighted=False)
    shortest_path_heuristic = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j and np.isfinite(dist_matrix[i, j]):
                shortest_path_heuristic[i, j] = 1.0 / (dist_matrix[i, j] + 1e-9)

    heuristic_matrix = inverse_distance + shortest_path_heuristic

    # Adaptive degree penalty
    degree = np.sum(np.isfinite(distance_matrix), axis=0)
    avg_degree = np.mean(degree)
    degree_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                penalty = max(0, (degree[i] - avg_degree) + (degree[j] - avg_degree))
                degree_penalty[i, j] = penalty

    max_penalty = np.max(degree_penalty)
    if max_penalty > 0:
        degree_penalty = degree_penalty / max_penalty
    heuristic_matrix = heuristic_matrix * (1 - 0.1 * degree_penalty)

    # Controlled randomness
    heuristic_matrix = heuristic_matrix + np.random.rand(*heuristic_matrix.shape) * 0.01

    # Ensure non-zero values
    heuristic_matrix = np.where(heuristic_matrix <= 0, 0.0001, heuristic_matrix)

    # Remove self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0.0

    return heuristic_matrix
```
