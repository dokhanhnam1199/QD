```python
import numpy as np
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance with shortest path estimates to prioritize promising edges.
    """
    n = distance_matrix.shape[0]

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + np.eye(n) * 1e-6)
    np.fill_diagonal(inverse_distance, 0)

    # Shortest path estimates (using Dijkstra)
    shortest_paths = dijkstra(distance_matrix, return_predecessors=False)
    max_path_length = np.max(shortest_paths[np.isfinite(shortest_paths)])
    path_penalty = shortest_paths / max_path_length  # Normalize to [0, 1]

    heuristic_matrix = inverse_distance * (1 - path_penalty)

    # Normalize
    heuristic_matrix = (heuristic_matrix + 1e-9) / np.sum(heuristic_matrix + 1e-9)

    return heuristic_matrix
```
