{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"TSP heuristic: shortest paths + degree bias.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n\n    # 2. Shortest path estimate (Dijkstra)\n    graph = scipy.sparse.csr_matrix(distance_matrix)\n    shortest_paths = dijkstra(graph, directed=False, indices=range(n))\n\n    # 3. Degree bias (adaptive penalty)\n    degree_penalty = np.zeros((n, n))\n    avg_degree = 0\n    for i in range(n):\n        degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]\n        avg_degree += degree_i\n    avg_degree /= n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]\n                degree_j = np.sum(inverse_distance[j, :]) - inverse_distance[j, j]\n                # Adaptive degree penalty: only penalize if degree > avg\n                penalty_i = max(1, avg_degree / (degree_i + 1e-9))\n                penalty_j = max(1, avg_degree / (degree_j + 1e-9))\n                degree_penalty[i, j] = penalty_i * penalty_j\n            else:\n                degree_penalty[i, j] = 0\n\n    # 4. Combine heuristics\n    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + 1e-9)\n    \n    # 5. Normalize\n    max_heuristic = np.max(heuristic_matrix)\n    heuristic_matrix /= max_heuristic\n\n    return heuristic_matrix\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I will help you redefine \"Current Self-Reflection\" to design better heuristics, avoiding pitfalls and focusing on effective strategies. Here's a breakdown to guide the process:\n\n*   **Keywords:** Informed Exploration, Node Degree Penalty, Inverse Distance, Shortest Path Integration, Controlled Randomness, Solution Balancing.\n\n*   **Advice:** Prioritize shortest path information and inverse distance metrics, then gently bias exploration by penalizing high-degree node connections only when necessary. Use randomization sparingly, guided by the quality of the existing solution.\n\n*   **Avoid:** Blindly penalizing high-degree nodes, uncontrolled or excessive randomness, neglecting shortest path information and solution balance.\n\n*   **Explanation:** Combining these factors ensures the heuristic balances exploration with exploitation of good solutions, leverages distance and path information, and avoids getting stuck in local optima due to over-penalization or excessive randomness.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}