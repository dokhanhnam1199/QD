{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\nimport scipy.sparse\nfrom scipy.sparse.csgraph import dijkstra\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    \"\"\"TSP heuristic: shortest paths + adaptive degree bias + controlled randomness.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n\n    # 2. Shortest path estimate (Dijkstra)\n    graph = scipy.sparse.csr_matrix(distance_matrix)\n    shortest_paths = dijkstra(graph, directed=False, indices=range(n))\n\n    # 3. Adaptive degree bias (only penalize high degree nodes)\n    degree_penalty = np.ones_like(distance_matrix)\n    avg_degree = 0\n    for i in range(n):\n        degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]\n        avg_degree += degree_i\n    avg_degree /= n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]\n                degree_j = np.sum(inverse_distance[j, :]) - inverse_distance[j, j]\n\n                # Penalize only if degree is significantly above average\n                if degree_i > 1.5 * avg_degree:\n                    degree_penalty[i, j] *= max(0.5, avg_degree / (degree_i + 1e-9)) # Reduced penalty\n                if degree_j > 1.5 * avg_degree:\n                    degree_penalty[i, j] *= max(0.5, avg_degree / (degree_j + 1e-9)) # Reduced penalty\n            else:\n                degree_penalty[i, j] = 0\n\n    # 4. Combine heuristics: Prioritize inverse distance and shortest paths\n    heuristic_matrix = inverse_distance * degree_penalty / (shortest_paths + 1e-9)\n\n    # 5. Controlled Randomness (only add if heuristic value is non-zero)\n    randomness_factor = 0.01  # Reduced randomness\n    for i in range(n):\n        for j in range(n):\n            if heuristic_matrix[i, j] > 0:\n                heuristic_matrix[i, j] += randomness_factor * np.random.rand()\n\n    # 6. Normalize\n    max_heuristic = np.max(heuristic_matrix)\n    heuristic_matrix /= max_heuristic\n\n    # 7. Sparsify: Remove edges with very low heuristic value\n    threshold = 0.01 #Adjust threshold to control sparcity\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}