```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristic: shortest paths + adaptive degree bias + controlled randomness."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # 2. Shortest path estimate (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    shortest_paths = dijkstra(graph, directed=False, indices=range(n))

    # 3. Degree bias (adaptive penalty)
    degree_penalty = np.ones((n, n))  # Initialize with ones for no penalty by default
    avg_degree = 0
    for i in range(n):
        degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]
        avg_degree += degree_i
    avg_degree /= n

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(inverse_distance[i, :]) - inverse_distance[i, i]
                degree_j = np.sum(inverse_distance[j, :]) - inverse_distance[j, j]

                # Adaptive degree penalty: only penalize if degree > avg
                if degree_i > avg_degree or degree_j > avg_degree:
                    penalty_i = max(0.5, avg_degree / (degree_i + 1e-9))  # Reduced penalty
                    penalty_j = max(0.5, avg_degree / (degree_j + 1e-9))  # Reduced penalty
                    degree_penalty[i, j] = penalty_i * penalty_j
            else:
                degree_penalty[i, j] = 0

    # 4. Combine heuristics (emphasize shortest paths and inverse distance)
    heuristic_matrix = inverse_distance**1.2 * degree_penalty / (shortest_paths + 1e-9)**0.8

    # 5. Sparsification (remove less promising edges)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30)  # Keep top 70%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 6. Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    # 7. Controlled Randomness (only when no strong signal)
    if np.sum(heuristic_matrix > 0) < n:  # If too sparse, add some noise
        random_matrix = np.random.rand(n, n) * 0.1
        heuristic_matrix += random_matrix
        max_heuristic = np.max(heuristic_matrix)
        heuristic_matrix /= max_heuristic


    return heuristic_matrix
```
