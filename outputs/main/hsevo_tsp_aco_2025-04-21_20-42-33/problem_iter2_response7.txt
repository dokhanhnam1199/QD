```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import dijkstra


def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, shortest paths, and controlled node degree bias.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # 2. Shortest path influence (Dijkstra)
    graph = scipy.sparse.csr_matrix(distance_matrix)
    dist_matrix = dijkstra(csgraph=graph, directed=False, unweighted=False)
    normalized_dist_matrix = dist_matrix / np.max(dist_matrix)  # Normalize

    heuristics += 1 / (normalized_dist_matrix + 1e-9)

    # 3. Node degree bias (controlled)
    row_sums = np.sum(distance_matrix, axis=1)
    mean_row_sum = np.mean(row_sums)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Penalize edges connected to nodes with above-average degree
                if row_sums[i] > mean_row_sum and row_sums[j] > mean_row_sum:
                    penalty = (row_sums[i] + row_sums[j]) / (2 * mean_row_sum)
                    heuristics[i, j] /= penalty # Reduce the heuristic

    # 4. Normalization
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic

    return heuristics
```
