```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improves upon the basic inverse distance heuristic by considering
    a combination of distance, node degree, and local density to guide
    the TSP solver.  This is done by calculating how central a particular edge is compared to the total distances from that edge.

    Args:
        distance_matrix: A numpy array representing the distance matrix
                         for the TSP problem. distance_matrix[i, j] is the
                         distance between city i and city j.

    Returns:
        A numpy array of the same shape as distance_matrix, where each
        element represents a heuristic score indicating the desirability
        of including the corresponding edge in the TSP tour. Higher scores
        indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate a heuristic score for each edge
    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops
                # Inverse distance: Shorter edges are more desirable
                distance_term = 1 / distance_matrix[i, j]

                # Calculate local density around each node. A node with low average distance is considered to have a high density
                i_density = np.sum(1/distance_matrix[i, :])
                j_density = np.sum(1/distance_matrix[j, :])
                
                # Combines the inverse distance and the density heuristic.

                heuristic_matrix[i, j] = distance_term + i_density + j_density
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    return heuristic_matrix
```
