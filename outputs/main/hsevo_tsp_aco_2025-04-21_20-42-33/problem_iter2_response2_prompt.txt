{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    A more sophisticated heuristics for the Traveling Salesman Problem.\n    This version considers a combination of inverse distance and node degree.\n\n    Args:\n        distance_matrix: A numpy array representing the distance between cities.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing the\n        prior indicators of how promising it is to include each edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # 1. Inverse Distance: Closer cities are more attractive.  Avoid divide by zero.\n    inverse_distance = 1.0 / (distance_matrix + np.eye(n))  # Add identity to avoid div by zero for self-loops\n    inverse_distance[np.diag_indices_from(inverse_distance)] = 0.0  # Ensure diagonal is zero\n\n    # 2. Nearest Neighbor Consideration: Promote edges connecting to nodes with few close neighbors.\n    #    This encourages visiting sparsely connected areas early.  A low degree\n    #    implies that connecting to this node is crucial, whereas a high-degree\n    #    is that this node will surely be linked with a lot of nodes.\n\n    # Sort distances from each city and find the indices of the k nearest neighbors\n    k = min(5, n - 1)  # Consider the k nearest neighbors, at most 5 or n-1.\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:k + 1] # Exclude the city itself\n\n    # Calculate the sum of the inverse distances to the k nearest neighbors for each city.\n    # Higher sum implies the city has close neighbors.\n    neighbor_attractiveness = np.zeros((n, n))\n    for i in range(n):\n        total_neighbor_distance = np.sum(1.0 / distance_matrix[i, nearest_neighbors[i]])\n        for j in range(n):\n            if i != j:\n                neighbor_attractiveness[i,j] = total_neighbor_distance\n            else:\n                neighbor_attractiveness[i, j] = 0\n\n    # Normalize the neighbour attractiveness so the scaling factor would not overwhelm\n    # the inverse distance\n    neighbor_attractiveness_normalized = (neighbor_attractiveness - np.min(neighbor_attractiveness)) / (np.max(neighbor_attractiveness) - np.min(neighbor_attractiveness)) if np.max(neighbor_attractiveness) != np.min(neighbor_attractiveness) else np.zeros((n,n))\n\n    neighbor_attractiveness_scaled = 1 - neighbor_attractiveness_normalized  # Inverted to make smaller neighbour attractive values higher\n\n    # 3. Combine heuristics:  Inverse distance is primary, adjust with neighbor consideration.\n    # Consider a weighted average or multiplication of the two.  Multiplication\n    # appears more suitable in this context.\n\n    heuristics = inverse_distance * (1+neighbor_attractiveness_scaled) # Amplifying the effect of neighbour attractivness\n\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Hawking-inspired heuristics for the Traveling Salesman Problem (TSP).\n\n    This function employs a combination of strategies inspired by black hole physics\n    and simulated annealing to generate edge priority indicators.\n\n    The heuristic combines:\n    1. Inverse Distance: Shorter edges are generally more desirable.  Mimics the\n       basic gravitational pull - closer objects (cities) are more attractive.\n    2. Node Degree Preference: Encourages nodes with fewer close neighbors to be\n       connected early. Analogous to a black hole consuming sparsely distributed matter first.\n    3. Simulated Annealing Inspired Perturbation: Introduces randomness with a temperature\n       parameter to explore more diverse solutions and escape local optima.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Inverse Distance (Attraction)\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Avoid division by zero\n\n    # 2. Node Degree Preference (Sparse Consumption)\n    node_degrees = np.sum(inverse_distance, axis=0)\n    node_degree_matrix = np.outer(node_degrees, node_degrees)\n    degree_penalty = 1 / (node_degree_matrix + 1e-9) # Lower score to edges that are between popular nodes\n\n    # 3. Simulated Annealing Inspired Perturbation (Exploration)\n    temperature = 0.1  # Control the randomness - can tune this\n    random_perturbation = np.random.normal(0, temperature, size=(n, n))\n    \n    # Combine the factors\n    heuristic_matrix = inverse_distance * degree_penalty + random_perturbation\n    \n    # Ensure that the diagonal elements are small\n    for i in range(n):\n        heuristic_matrix[i, i] = -np.inf # Penalize self-loops\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates shortest paths using Dijkstra's algorithm to estimate proximity, and penalizes connections between high-degree nodes and edges that are part of a long path. The worst uses a combination of inverse distance, node degree preference, and simulated annealing-inspired perturbation.\n\nComparing (2nd) vs (19th), the second-best heuristic combines inverse distance, node degree bias, and global average distance, boosting edges significantly shorter than average. The 19th considers inverse distance and local density around each node.\n\nComparing (1st) vs (2nd), the first heuristic utilizes Dijkstra's algorithm and shortest path estimations, while the second relies on global average distance. This suggests the shortest path calculations contribute more effectively.\n\nComparing (3rd) vs (4th), the third prioritizes nodes with fewer close neighbors and penalizes long edges to well-connected nodes. The fourth prioritizes shorter edges, penalizes edges on longer paths, adds randomness, and ensures non-zero heuristic values. The more sophisticated degree adjustment seems advantageous.\n\nComparing (second worst) vs (worst), the 19th combines inverse distance with local density. The 20th uses inverse distance, node degree penalties, and simulated annealing-inspired perturbation. The inclusion of randomness doesn't seem to boost its position.\n\nOverall: The top-performing heuristics consider a combination of inverse distance, node degree, and shortest path information or global distance awareness, while penalizing connections between high-degree nodes. The use of shortest paths (via Dijkstra or similar) appears more effective than global averages or local density alone. Randomness, although often included, doesn't guarantee better results. More informed exploration strategies, like those based on node degree or shortest paths, tend to perform better.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I will help you redefine \"Current Self-Reflection\" to design better heuristics, avoiding pitfalls and focusing on effective strategies. Here's a breakdown to guide the process:\n\n*   **Keywords:** Informed Exploration, Node Degree Penalty, Inverse Distance, Shortest Path Integration, Controlled Randomness, Solution Balancing.\n\n*   **Advice:** Prioritize shortest path information and inverse distance metrics, then gently bias exploration by penalizing high-degree node connections only when necessary. Use randomization sparingly, guided by the quality of the existing solution.\n\n*   **Avoid:** Blindly penalizing high-degree nodes, uncontrolled or excessive randomness, neglecting shortest path information and solution balance.\n\n*   **Explanation:** Combining these factors ensures the heuristic balances exploration with exploitation of good solutions, leverages distance and path information, and avoids getting stuck in local optima due to over-penalization or excessive randomness.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}