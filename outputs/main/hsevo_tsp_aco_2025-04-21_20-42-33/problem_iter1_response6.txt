```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Hawking-inspired heuristics for the Traveling Salesman Problem (TSP).

    This function employs a combination of strategies inspired by black hole physics
    and simulated annealing to generate edge priority indicators.

    The heuristic combines:
    1. Inverse Distance: Shorter edges are generally more desirable.  Mimics the
       basic gravitational pull - closer objects (cities) are more attractive.
    2. Node Degree Preference: Encourages nodes with fewer close neighbors to be
       connected early. Analogous to a black hole consuming sparsely distributed matter first.
    3. Simulated Annealing Inspired Perturbation: Introduces randomness with a temperature
       parameter to explore more diverse solutions and escape local optima.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Inverse Distance (Attraction)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Avoid division by zero

    # 2. Node Degree Preference (Sparse Consumption)
    node_degrees = np.sum(inverse_distance, axis=0)
    node_degree_matrix = np.outer(node_degrees, node_degrees)
    degree_penalty = 1 / (node_degree_matrix + 1e-9) # Lower score to edges that are between popular nodes

    # 3. Simulated Annealing Inspired Perturbation (Exploration)
    temperature = 0.1  # Control the randomness - can tune this
    random_perturbation = np.random.normal(0, temperature, size=(n, n))
    
    # Combine the factors
    heuristic_matrix = inverse_distance * degree_penalty + random_perturbation
    
    # Ensure that the diagonal elements are small
    for i in range(n):
        heuristic_matrix[i, i] = -np.inf # Penalize self-loops

    return heuristic_matrix
```
