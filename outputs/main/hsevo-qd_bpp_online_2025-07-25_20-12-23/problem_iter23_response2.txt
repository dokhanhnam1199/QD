```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit bonus, adaptive scaling, and sigmoid reward to optimize bin packing.
    """
    penalty = -9459.645242722696
    sigmoid_threshold_min = 0.6896808736373103
    sigmoid_threshold_max = 0.08876173133481396
    sigmoid_slope = 1.1169141074890545
    sigmoid_offset = 0.278808023854411
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 1000.0
    
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = EXACT_FIT_BONUS
    
    # Adaptive scaling based on the remaining capacity
    adaptive_scale = np.where(bins_remain_cap >= item, SCALE_FACTOR * np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2))), 0)
    
    # Sigmoid reward for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        new_remain_cap = bins_remain_cap[non_exact_fit_mask] - item
        reward = 1 / (1 + np.exp(-sigmoid_slope * (new_remain_cap - sigmoid_offset)))
        priority_scores[non_exact_fit_mask] = reward

    
    # Penalize bins that cannot fit the item
    priority_scores = np.where(bins_remain_cap < item, penalty, priority_scores + adaptive_scale)
    
    return priority_scores
```
