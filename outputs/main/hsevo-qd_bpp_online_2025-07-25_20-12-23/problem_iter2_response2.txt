```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balanced heuristic prioritizing tight fit and initial bin size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of priority scores for each bin.
    """
    # High priority if adding this item leaves minimal space in the bin
    ifbinsfit = bins_remain_cap >= item
    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)
    # Relative space left factor to consider initial bin size
    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)
    # Combine factors with a balance
    return priority + 0.5 * relative_space_left_factor
```
