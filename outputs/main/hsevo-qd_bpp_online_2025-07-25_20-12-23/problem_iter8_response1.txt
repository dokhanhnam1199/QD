```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority score for each bin by balancing remaining capacity and rewarding exact fits."""
    # Penalize bins that cannot fit the item
    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)
    # Reward bins that fit the item exactly
    exact_fit_reward = np.where(bins_remain_cap == item, 1.0, 0.0)
    # Inverse of remaining capacity for bins that can fit the item
    capacity_penalty = 1.0 / (bins_remain_cap + 0.1)  # adding epsilon to avoid division by zero
    # Combined priority score
    priority_score = feasible_caps - capacity_penalty + exact_fit_reward
    return priority_score
```
