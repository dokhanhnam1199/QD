```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic for online Bin Packing Problem using adaptive scaling,
    exact fit prioritization, and dynamic penalties for underutilization.
    """
    # Constants for tuning the heuristic
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 1500.0
    UNDERUTILIZATION_PENALTY = -500.0
    ADAPTIVE_SCALING_DECAY = 0.8
    HIGH_UTILIZATION_BONUS = 200.0
    HIGH_UTILIZATION_THRESHOLD = 0.9

    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        current_utilization = 1 - (remaining_cap - item) / item
        adaptive_scale = SCALE_FACTOR * np.exp(-ADAPTIVE_SCALING_DECAY * (1 - current_utilization) ** 2)
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = UNDERUTILIZATION_PENALTY

    # Reward bins that are highly utilized
    high_utilization_mask = bins_remain_cap < (1 - HIGH_UTILIZATION_THRESHOLD) * item
    priority_scores[high_utilization_mask] += HIGH_UTILIZATION_BONUS

    return priority_scores
```
