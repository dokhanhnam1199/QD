{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes adaptability and simplicity by prioritizing bins that \n    can immediately accommodate the item while still considering how full the bins are.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority score based on whether the bin can fit the item and remaining capacity\n    can_fit = (bins_remain_cap >= item).astype(float)\n    return can_fit * (bins_remain_cap / item)\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (1st) uses adaptive scaling with a reward/penalty system for precise control over bin prioritization, including rewarding bins that would be filled exactly and penalizing very small remaining capacities. It considers multiple factors to efficiently fill the bins. The worst heuristic (20th) only considers whether the bin can fit the item and how full the bin is, without additional rewards or penalties.\n(second best) vs (second worst), we see an improvement from the second-best heuristic (2nd) that uses an inverse of the remaining capacity to prioritize nearly full bins, to the second-worst heuristic (19th) that similarly scores bins based on fit possibility but lacks the nuanced adjustments present in the (2nd).\nComparing (1st) vs (2nd), we see that the first heuristic includes rewards for exact fits and penalties for bins with very small remaining capacities which are absent in the second heuristic.\n(3rd) vs (4th) show no difference in implementation, both have the same problem of large penalties for bins that cannot fit the item, leading to a simple structure without accounting for efficient packing or balancing empty space.\nComparing (second worst) vs (worst), both use the same logic but lack complexity and adaptive adjustments. The final two heuristics exhibit no differences in their implementations.\nOverall: There is a significant gap in sophistication and effectiveness between heuristics ranging from those with adaptive scaling and reward/penalty mechanisms to those with simple fit checks.\n- \n- **Keywords**: Adaptive scaling, reward/penalty systems, nuanced control, multiple factors\n- **Advice**: Implement adaptive scaling and balanced reward/penalty systems that incorporate strategic conditions and avoid overly detailed penalties/rewards\n- **Avoid**: Overly simplistic heuristics, unnecessary functions or complexities, detailed balancing that might reduce efficiency, and neglecting strategic placement rewards\n- **Explanation**: Focus on integrating adaptive mechanisms that can adjust based on the current state of the bin packing problem while balancing rewards and penalties to encourage strategic placements. This should be nuanced enough to guide the heuristic effectively without adding unnecessary complexity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}