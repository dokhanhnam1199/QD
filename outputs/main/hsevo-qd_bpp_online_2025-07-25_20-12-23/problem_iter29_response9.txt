```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive scaling and exact fit prioritization with dynamic penalties for efficient online bin packing.
    """
    EXACT_FIT_BONUS: float = 1000.0
    SCALE_FACTOR: float = 10.0
    PENALTY: float = -10000.0
    
    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = PENALTY

    return priority_scores
```
