[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines penalties for leftover space and rewards for bins close to item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins that can fit the item with minimal leftover space\n    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    # Penalty for larger spaces left after placing the item\n    space_penalty = -feasible_caps\n    # Reward for bins closer to being full after adding the item\n    close_fit_reward = np.clip(bins_remain_cap - item, 0, 1) * 2\n    # Combined priority score\n    priority_score = space_penalty + close_fit_reward\n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.457518946948548,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and adjusted penalty to prioritize bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Adjust capacity left after adding the item\n    adjusted_remaining_capacity = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Normalize adjusted remaining capacity\n    norm_adjusted_capacity = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9)\n    \n    # Calculate priority score by combining normalized capacity and penalty\n    priority_scores = norm_adjusted_capacity - penalty_for_new_bin\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 21.170721978460307,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic prioritizing tight fit and initial bin size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Relative space left factor to consider initial bin size\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine factors with a balance\n    return priority + 0.5 * relative_space_left_factor",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit priority and remaining capacity to minimize waste.\"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit has highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # For non-exact fits, prioritize based on how close they are to being full\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        priority_scores[non_exact_fit_mask] = 1 - (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n    \n    # Penalize bins with less remaining capacity (after exact and non-exact fit considerations)\n    priority_scores = np.where(bins_remain_cap < item, -1000, priority_scores)\n    \n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit priority and remaining capacity to minimize waste.\"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit has highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # For non-exact fits, prioritize those close to being full\n    non_exact_fit_mask = bins_remain_cap >= item\n    if np.any(non_exact_fit_mask):\n        # Calculate priority based on remaining space after adding item\n        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Closer to full is better\n    \n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic prioritizing tight fit and initial bin size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Normalize by initial bin capacity for consistency\n    initial_cap = np.max(bins_remain_cap, initial=1.0)\n    normalized_remaining = bins_remain_cap / initial_cap\n    # Combine factors: prioritize tight fit and consider initial bin size\n    return priority + (1 - normalized_remaining) * (bins_remain_cap + 1e-6)",
    "response_id": 5,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines penalties for leftover space and rewards for bins close to item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins that can fit the item with minimal leftover space\n    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    # Penalty for larger spaces left after placing the item\n    space_penalty = -feasible_caps\n    # Reward for bins closer to being full after adding the item\n    close_fit_reward = np.clip(bins_remain_cap - item, 0, 1) * 2\n    # Combined priority score\n    priority_score = space_penalty + close_fit_reward\n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.457518946948548,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances remaining capacity and adaptively penalizes new bins while rewarding efficient use of space.\"\"\"\n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Calculate adjusted remaining capacity after adding the item\n    adjusted_remaining_capacity = np.where(\n        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Reward bins that leave minimal space after adding the item\n    minimized_space_penalty = bins_remain_cap - adjusted_remaining_capacity\n    \n    # Combine penalties and rewards into a priority score\n    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin + minimized_space_penalty / np.max(bins_remain_cap + 1e-9)\n    \n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 21.170721978460307,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines penalties for leftover space with incentives for exact fits and snug fills.\"\"\"\n    \n    # Ensure the item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate space left after adding the item\n    space_left = bins_remain_cap - item\n    \n    # Priority for exact fits\n    exact_fit_priority = can_fit * (bins_remain_cap == item)\n    \n    # Priority for bins that are not exact fits, penalizing leftover space\n    non_exact_fit_priority = can_fit * (1 - (space_left / bins_remain_cap)) * (bins_remain_cap != item)\n    \n    # Combine both priorities\n    priority = exact_fit_priority + non_exact_fit_priority\n    \n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin, balancing leftover space and efficiency.\"\"\"\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, 1.0 / (bins_remain_cap - item + 0.1), -np.inf)\n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]