```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function for Online Bin Packing Problem (BPP) that incorporates dynamic adaptive scaling,
    exact fit rewards, penalties for inefficiencies, and multifactor design for better adaptability and efficiency.
    """
    # Constants for tuning the heuristic
    SCALE_FACTOR = 150.0
    EXACT_FIT_BONUS = 2000.0
    ADAPTIVE_SCALE_DECAY = 0.95
    SIGMOID_SLOPE = 1.2
    SIGMOID_OFFSET = 0.3
    PENALTY = -10000.0
    UNDERUTILIZATION_THRESHOLD = 0.2

    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = SCALE_FACTOR * np.exp(-remaining_cap ** 2 / (2 * (item ** 2))) * ADAPTIVE_SCALE_DECAY ** (len(bins_remain_cap) - np.sum(non_exact_fit_mask))
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Sigmoid reward for non-exact fits
    if np.any(non_exact_fit_mask):
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        reward = np.clip(reward, 0, 1)
        priority_scores[non_exact_fit_mask] *= reward

    # Penalty for bins that underutilize their capacity
    underutilization_mask = bins_remain_cap / item < UNDERUTILIZATION_THRESHOLD
    priority_scores[underutilization_mask] *= 0.5

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = PENALTY

    return priority_scores
```
