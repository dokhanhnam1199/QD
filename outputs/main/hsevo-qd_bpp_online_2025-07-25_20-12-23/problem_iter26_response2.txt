```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balanced heuristic combining adaptive scaling, exact fit rewards, and penalties for inefficiency."""
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 1000.0
    UNDERUTILIZATION_PENALTY_FACTOR = 0.5

    # Adaptive scaling based on the item size relative to the remaining capacity
    adaptive_scale = SCALE_FACTOR * np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2)))

    # Specific reward for bins that would be filled to capacity by this item
    exact_fit_reward = np.where(bins_remain_cap == item, EXACT_FIT_BONUS, 0.0)

    # Penalty for underutilization
    underutilization_penalty = np.where(bins_remain_cap < 0.5 * bins_remain_cap.max(), UNDERUTILIZATION_PENALTY_FACTOR, 0.0)

    # Combined priority score
    priority_score = adaptive_scale + exact_fit_reward - underutilization_penalty

    return priority_score
```
