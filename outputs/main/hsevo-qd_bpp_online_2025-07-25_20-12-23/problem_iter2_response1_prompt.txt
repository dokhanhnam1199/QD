{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used when deciding the priority. Bins that have more remaining capacity\n    but do not risk creating new bins unnecessarily are preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    remaining_capacity_score = bins_remain_cap / np.max(bins_remain_cap)\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Adjust capacity left after adding the item\n    adjusted_remaining_capacity = np.where(\n        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Create priority score by combining the adjusted remaining capacity and petential bin penalty\n    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity to discourage \n    fresher, larger bins while potentially prioritizing bins that are more nearly full and \n    might need closure. This balance may decrease the total number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero or negative values by using np.clip to ensure no zero capacity\n    res_capacity_clipped = np.clip(bins_remain_cap - item, a_min=0, a_max=None)\n    # Give higher priority to bins that will still have some fractional capacity left after the item is added\n    # This encourages filling bins before prematurely starting new ones.\n    priority_score = res_capacity_clipped / (bins_remain_cap + 1e-9)  # Stability constant (1e-9) ensures no div by zero\n    return priority_score\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (1st) effectively balances between not exceeding the bin capacity and minimizing the leftover space, which leads to efficient bin usage and minimizes waste. The worst heuristic (20th) prioritizes bins with the largest remaining capacity regardless of the leftover space, leading to underutilized bins and higher waste. (Second best) vs (second worst) shows a stark contrast in flexibility; while the second best considers both the space left and exact fitting, the second worst purely penalizes larger empty spaces. Comparing (1st) vs (2nd), we see that the first efficiently uses both penalties and bonuses, whereas the second complicates the priority with a sinusoidal function that may not effectively prioritize closely filled bins. (3rd) vs (4th) shows redundant implementations of similar logic with the fourth introducing unnecessary complexity. Comparing (second worst) vs (worst), we see a minimal difference in approach; both prioritize large remaining capacity without differentiating the leftover space effectively. Overall, the most effective heuristics balance penalties for leftover space with incentives for efficient bin usage, highlighting the need for simplicity and a clear approach to balance these factors.\n- \n- **Keywords**: Bin packing, efficiency, simplicity, penalization, reward, heuristics.\n- **Advice**: Focus on clear and adaptable scoring systems that penalize poor packing and reward optimal use. Incorporate machine learning techniques to dynamically adjust penalties and rewards based on empirical data.\n- **Avoid**: Overly complex calculations that do not significantly improve efficiency; rigid systems that do not adapt to different scenarios; unnecessary penalizations or rewards that do not contribute to better outcomes.\n- **Explanation**: By maintaining simplicity while allowing for adaptability and intelligent adjustments, the heuristic can effectively optimize bin usage without introducing unnecessary complexity. This balance ensures that the heuristic remains both efficient and effective across a wide range of scenarios.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}