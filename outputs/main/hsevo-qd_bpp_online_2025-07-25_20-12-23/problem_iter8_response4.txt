```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit rewards, adaptive scaling, and balanced penalties for efficient packing.
    """
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit has highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = 1.0
    
    # Non-exact fits: prioritize based on how close they are to being full, with adaptive scaling
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        priority_scores[non_exact_fit_mask] = 0.5 * (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]
    
    # Penalize bins with less remaining capacity than the item size
    priority_scores = np.where(bins_remain_cap < item, -1000, priority_scores)
    
    # Add a slight penalty for the last bin to avoid opening a new bin unnecessarily
    priority_scores[-1] -= 1.0
    
    return priority_scores
```
