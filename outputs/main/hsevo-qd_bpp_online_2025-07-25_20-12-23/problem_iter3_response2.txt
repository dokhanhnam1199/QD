```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function aims to balance between filling
    bins to full capacity and avoiding fragmentation. It penalizes bins that
    would be too full after adding the item and rewards bins that are closer
    to being full but not overloaded. The priority score uses a sigmoid function
    to achieve this balance and add adaptability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the new remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item

    # Penalize bins where the item would make the new remaining capacity negative
    penalty = np.where(new_remain_cap < 0, -100, 0)

    # Use a sigmoid function to reward bins that are fuller after adding the item
    reward = 1 / (1 + np.exp(-new_remain_cap))

    # Combine penalty and reward
    priority_score = reward + penalty

    return priority_score
```
