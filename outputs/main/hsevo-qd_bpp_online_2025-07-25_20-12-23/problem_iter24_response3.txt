```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function for Online Bin Packing Problem (BPP) that incorporates dynamic adaptive scaling,
    exact fit rewards, and multifactor penalties to guide efficient bin selection.
    """
    # Constants for tuning the heuristic
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 2000.0
    ADAPTIVE_PENALTY_START = 0.75  # Starting point for adaptive penalty
    ADAPTIVE_PENALTY_SLOPE = 5.0  # Slope for adaptive penalty scaling
    INEFFICIENCY_PENALTY_FACTOR = 30.0  # Penalty factor for inefficiency
    MIN_PRIORITY = -10000.0  # Minimum priority score to avoid numerical issues

    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Calculate the adaptive scaling for non-exact fits
    non_exact_fit_mask = bins_remain_cap >= item
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Introduce adaptive penalties for bins that are nearly full but cannot fit the item
    nearly_full_mask = np.logical_and(bins_remain_cap < item, bins_remain_cap / item > ADAPTIVE_PENALTY_START)
    if np.any(nearly_full_mask):
        penalty_factor = ADAPTIVE_PENALTY_SLOPE * (remaining_cap[nearly_full_mask] / item - ADAPTIVE_PENALTY_START)
        penalty = -INEFFICIENCY_PENALTY_FACTOR * penalty_factor
        priority_scores[nearly_full_mask] += penalty

    # Penalize bins that cannot fit the item at all
    priority_scores[bins_remain_cap < item] = MIN_PRIORITY

    return priority_scores
```
