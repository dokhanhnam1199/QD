```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used when deciding the priority. Bins that have more remaining capacity
    but do not risk creating new bins unnecessarily are preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize the last bin to avoid opening a new bin unless strictly necessary
    penalty_last_bin = 10.0
    remaining_capacity_score = bins_remain_cap / np.max(bins_remain_cap)
    number_of_bins = len(bins_remain_cap)
    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)
    
    # Adjust capacity left after adding the item
    adjusted_remaining_capacity = np.where(
        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)
    
    # Create priority score by combining the adjusted remaining capacity and petential bin penalty
    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin
    
    return priority_scores
```
