```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function uses an adaptive mechanism that 
    rewards bins where the item would leave the least empty space, but also 
    includes a penalty for bins that are too full to ensure we don't pack 
    items into bins that will be overly filled soon, encouraging a more 
    balanced distribution of items among bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the new remaining capacity if the item is added
    new_remain_cap = bins_remain_cap - item
    
    # Reward for bins that would be closer to full with the item added
    reward = 1.0 / (new_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero
    
    # Penalty for bins that are already full or cannot fit the item
    penalty = np.where(new_remain_cap < 0, 500, 0)  # high penalty for bins that cannot fit the item
    
    # Penalty for bins that would be over 80% full after adding the item
    soft_penalty = np.where(new_remain_cap < 0.2 * np.max(bins_remain_cap), 5, 0)
    
    # Combine the reward and penalties
    priority_scores = reward - penalty - soft_penalty
    
    return priority_scores
```
