import numpy as np
import random
import math
import scipy
import torch
def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    penalty: float = -2496.182133888302,
    sigmoid_threshold_min: float = 0.7801887122782176,
    sigmoid_threshold_max: float = 0.3931106696119819,
    sigmoid_slope: float = 0.803070895838782,
    sigmoid_offset: float = -0.012485488708927628) -> np.ndarray:
    """
    Combines exact fit prioritization with adaptive sigmoid reward to balance filling bins effectively.
    """
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = 1.0
    
    # Non-exact fits are rewarded based on a sigmoid function for capacity utilization
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        new_remain_cap = bins_remain_cap[non_exact_fit_mask] - item
        reward = 1 / (1 + np.exp(-sigmoid_slope * (new_remain_cap - sigmoid_offset)))
        priority_scores[non_exact_fit_mask] = reward
    
    # Penalize bins that cannot fit the item
    priority_scores = np.where(bins_remain_cap < item, penalty, priority_scores)
    
    return priority_scores
