```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic combining adaptive scaling with exact fit prioritization,
    sigmoid rewards for balanced online bin packing, and tailored penalties.
    """
    # Tuning constants
    SCALE_FACTOR = 150.0
    EXACT_FIT_BONUS = 1500.0
    SIGMOID_SLOPE = 1.2
    SIGMOID_OFFSET = 0.3
    INEFFICIENCY_PENALTY = -2000.0
    UNDERUTILIZATION_THRESHOLD = 0.2  # Threshold to consider bin underutilized
    UNDERUTILIZATION_PENALTY = -100.0  # Penalty for bins that are underutilized

    # Exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Calculate remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        # Adaptive scaling based on remaining capacity
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] = adaptive_scale

        # Sigmoid reward for non-exact fits to balance the filling
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        priority_scores[non_exact_fit_mask] *= reward

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = INEFFICIENCY_PENALTY

    # Penalize bins that are underutilized
    underutilization_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap / bins_remain_cap.max() > UNDERUTILIZATION_THRESHOLD)
    priority_scores[underutilization_mask] += UNDERUTILIZATION_PENALTY

    return priority_scores
```
