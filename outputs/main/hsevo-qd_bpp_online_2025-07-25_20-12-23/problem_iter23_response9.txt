```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Heuristic combining exact fit bonuses, adaptive scaling, and penalties for inefficiency.
    """
    # Constants for tuning
    EXACT_FIT_BONUS = 1000.0
    INEFFICIENCY_PENALTY = -1000.0
    INITIAL_SCALE_FACTOR = 100.0
    ADAPTIVE_SCALING_DECAY = 0.95

    # Exact fit bonus
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale_factor = INITIAL_SCALE_FACTOR * np.exp(-np.abs(remaining_cap - item) / item)
        priority_scores[non_exact_fit_mask] = adaptive_scale_factor

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = INEFFICIENCY_PENALTY

    # Dynamic scaling based on current bin utilization
    utilization = bins_remain_cap / bins_remain_cap.max()
    dynamic_scale = np.mean(utilization) * ADAPTIVE_SCALING_DECAY
    priority_scores *= dynamic_scale

    return priority_scores
```
