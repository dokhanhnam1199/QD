```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive scaling with exact fit rewards and sigmoid capacity utilization rewards.
    """
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = 1.0
    
    # Non-exact fits are rewarded based on adaptive scaling and sigmoid function for capacity utilization
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        new_remain_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = item / (bins_remain_cap[non_exact_fit_mask] + 0.1)  # adaptive scaling
        sigmoid_slope = 1.1169141074890545
        sigmoid_offset = 0.278808023854411
        reward = adaptive_scale * (1 / (1 + np.exp(-sigmoid_slope * (new_remain_cap - sigmoid_offset))))
        priority_scores[non_exact_fit_mask] = reward
    
    # Penalize bins that cannot fit the item
    penalty = -9459.645242722696
    priority_scores = np.where(bins_remain_cap < item, penalty, priority_scores)
    
    return priority_scores
```
