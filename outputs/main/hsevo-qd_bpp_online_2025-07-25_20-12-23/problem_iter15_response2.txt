```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses an adaptive scaling mechanism to prioritize bins that
    are closer to being filled, while also penalizing bins that are too full
    to fit the current item. It aims to balance rewards and penalties to
    encourage strategic placements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Scale factor for adaptive scaling
    scale_factor = 1.5
    
    # Adaptive scaling based on remaining capacity
    adaptive_scale = np.exp(-scale_factor * (1 - bins_remain_cap / bins_remain_cap.max()))
    
    # Reward for nearly full bins (penalize bins that are too full to fit the item)
    reward = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    
    # Penalty for very full bins (those with low remaining capacity)
    penalty = np.where(bins_remain_cap < bins_remain_cap.max() * 0.2, bins_remain_cap.max() - bins_remain_cap, 0)
    
    # Combine adaptive scaling, reward, and penalty
    priority_score = adaptive_scale + reward - penalty
    
    return priority_score
```
