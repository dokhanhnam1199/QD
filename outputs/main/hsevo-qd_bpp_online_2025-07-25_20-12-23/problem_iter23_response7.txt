```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit priority, adaptive scaling, and sigmoid rewards to balance capacity utilization.
    """
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = 1000.0
    
    # Non-exact fits are rewarded based on sigmoid function for capacity utilization
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        sigmoid_reward = 1 / (1 + np.exp(-1.2 * (remaining_cap - 0.5)))
        adaptive_scale_factor = 100.0 * np.exp(-np.abs(remaining_cap - item) / item)
        priority_scores[non_exact_fit_mask] = adaptive_scale_factor * sigmoid_reward
    
    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = -1000.0

    # Reward for efficient usage of bin capacity
    utilization = bins_remain_cap / bins_remain_cap.max()
    efficient_usage_mask = utilization >= 0.9
    efficiency_reward = efficient_usage_mask * (bins_remain_cap - item) * 10.
    priority_scores += efficiency_reward
    
    # Penalize inefficiencies
    inefficiency_penalty_mask = utilization < 0.9
    inefficiency_penalty = inefficiency_penalty_mask * -1000.0
    priority_scores += inefficiency_penalty

    return priority_scores
```
