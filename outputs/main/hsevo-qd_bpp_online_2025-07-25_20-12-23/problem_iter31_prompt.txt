{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic for online bin packing problem that dynamically adjusts scaling and rewards/penalties.\n    \"\"\"\n    # Constants for tuning the heuristic\n    INITIAL_SCALE_FACTOR = 100.0\n    EXACT_FIT_BONUS = 1000.0\n    INEFFICIENCY_PENALTY = -1000.0\n    UNDERUTILIZATION_PENALTY = -500.0\n    ADAPTIVE_SCALING_DECAY = 0.95\n    EFFICIENCY_THRESHOLD = 0.9\n    SIGMOID_SLOPE = 1.2\n    SIGMOID_OFFSET = 0.5\n\n    # Calculate the exact fit indicator\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores = exact_fit_mask * EXACT_FIT_BONUS\n\n    # Adaptive scaling based on remaining capacity for non-exact fits\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        remaining_cap = bins_remain_cap[non_exact_fit_mask]\n        adaptive_scale_factor = INITIAL_SCALE_FACTOR * np.exp(-np.abs(remaining_cap - item) / item)\n        priority_scores[non_exact_fit_mask] = adaptive_scale_factor\n\n    # Dynamically adjust scaling factor based on current bin utilization\n    utilization = bins_remain_cap / bins_remain_cap.max()\n    dynamic_scale = np.mean(utilization) * ADAPTIVE_SCALING_DECAY\n    priority_scores *= dynamic_scale\n\n    # Reward for efficient usage of bin capacity\n    efficient_usage_mask = utilization >= EFFICIENCY_THRESHOLD\n    efficiency_reward = efficient_usage_mask * (bins_remain_cap - item) * 10.\n    priority_scores += efficiency_reward\n\n    # Penalties for inefficiencies and underutilization\n    inefficiency_penalty_mask = utilization < EFFICIENCY_THRESHOLD\n    inefficiency_penalty = inefficiency_penalty_mask * INEFFICIENCY_PENALTY\n    underutilization_penalty_mask = (bins_remain_cap - item) / bins_remain_cap.max() > 0.8\n    underutilization_penalty = underutilization_penalty_mask * UNDERUTILIZATION_PENALTY\n    priority_scores += inefficiency_penalty + underutilization_penalty\n\n    # Sigmoid reward for non-exact fits with nuanced control\n    if np.any(non_exact_fit_mask):\n        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))\n        priority_scores[non_exact_fit_mask] *= reward\n\n    # Penalize bins that cannot fit the item\n    priority_scores[bins_remain_cap < item] = INEFFICIENCY_PENALTY\n\n    return priority_scores\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}