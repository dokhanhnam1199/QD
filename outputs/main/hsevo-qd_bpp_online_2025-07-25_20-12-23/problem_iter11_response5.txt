```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority score combining fitting feasibility and capacity utilization rewards.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of priority scores for each bin.
    """
    # Base priority: Can the item fit in the bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Adaptive scaling based on item size relative to remaining capacity
    base_priority = can_fit * (item / (bins_remain_cap + 0.1))
    
    # Reward for bins that would be filled to capacity by this item
    exact_fill_reward = np.where(bins_remain_cap == item, 1.0, 0.0)
    
    # Combined priority score
    priority_score = base_priority + exact_fill_reward
    
    return priority_score
```
