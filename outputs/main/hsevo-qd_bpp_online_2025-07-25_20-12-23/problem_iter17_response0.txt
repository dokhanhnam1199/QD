```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive scaling with exact fill rewards and small capacity penalties for efficient bin usage."""
    # Adaptive scaling based on item size relative to remaining capacity
    base_priority = item / (bins_remain_cap + 0.1)
    
    # Reward for bins that would be filled exactly by this item
    exact_fill_reward = np.where(bins_remain_cap == item, 1.0, 0.0)
    
    # Penalty for very small remaining capacities to avoid precision issues
    small_capacity_penalty = np.where((bins_remain_cap < item) & (bins_remain_cap > 0.1), 0.1, 0.0)
    
    # Combine base priority, exact fill rewards, and small capacity penalties
    priority_score = base_priority + exact_fill_reward - small_capacity_penalty
    
    # Apply sigmoid function to balance rewards and penalties effectively
    priority_score = 1 / (1 + np.exp(-priority_score))
    
    return priority_score
```
