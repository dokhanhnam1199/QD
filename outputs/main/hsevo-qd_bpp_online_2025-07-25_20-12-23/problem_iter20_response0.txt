```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive scaling with sigmoid rewards for partial fits and penalties for unsuitable bins.
    """
    # Base priority: Adaptive scaling based on item size relative to remaining capacity
    base_priority = item / (bins_remain_cap + 0.1)  # Adding a small epsilon to avoid division by zero
    
    # Reward for exact fits
    exact_fit_reward = np.where(bins_remain_cap == item, 1.0, 0.0)
    
    # Sigmoid reward for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap > 0.1)
    if np.any(non_exact_fit_mask):
        new_remain_cap = bins_remain_cap[non_exact_fit_mask] - item
        sigmoid_reward = 1 / (1 + np.exp(-new_remain_cap))
        base_priority[non_exact_fit_mask] += sigmoid_reward
    
    # Penalty for bins that cannot fit the item
    penalty = -3.0  # Adjusted penalty
    base_priority[bins_remain_cap < item] += penalty
    
    return base_priority
```
