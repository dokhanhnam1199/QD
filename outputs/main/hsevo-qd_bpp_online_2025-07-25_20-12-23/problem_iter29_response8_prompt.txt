{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    item: float, \n    bins_remain_cap: np.ndarray, \n    penalty: float = -9459.645242722696,\n    sigmoid_threshold_min: float = 0.6896808736373103,\n    sigmoid_threshold_max: float = 0.08876173133481396,\n    sigmoid_slope: float = 1.1169141074890545,\n    sigmoid_offset: float = 0.278808023854411) -> np.ndarray:\n    \"\"\"\n    Combines exact fit prioritization with adaptive sigmoid reward to balance filling bins effectively.\n    \"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit gets highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # Non-exact fits are rewarded based on a sigmoid function for capacity utilization\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        new_remain_cap = bins_remain_cap[non_exact_fit_mask] - item\n        reward = 1 / (1 + np.exp(-sigmoid_slope * (new_remain_cap - sigmoid_offset)))\n        priority_scores[non_exact_fit_mask] = reward\n    \n    # Penalize bins that cannot fit the item\n    priority_scores = np.where(bins_remain_cap < item, penalty, priority_scores)\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses adaptive scaling and a reward/penalty system to prioritize bins that are more likely to close, promoting efficient use of space.\n    \n    Adaptive scaling adjusts the priority based on the ratio of item size to remaining capacity, encouraging filling of bins to a similar extent.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: Adaptive scaling based on the item size relative to the remaining capacity\n    base_priority = item / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero\n    \n    # Specific reward for bins that would be filled to capacity by this item\n    exact_fill_reward = np.where(bins_remain_cap == item, 1.0, 0.0)\n    \n    # Penalty for very small remaining capacities to avoid precision issues with very small numbers\n    small_capacity_penalty = np.where((bins_remain_cap < item) & (bins_remain_cap > 0.1), 0.1, 0.0)\n    \n    # Combined priority score\n    priority_score = base_priority + exact_fill_reward - small_capacity_penalty\n    \n    return priority_score\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (Heuristics 1st) incorporates multiple sophisticated mechanisms such as exact fit prioritization, adaptive scaling, sigmoid rewards with clipping, and underutilization penalties, all finely tuned with specific, justified constants. The worst (Heuristics 20th) simplifies the problem to a binary fit or not and a linear factor of remaining capacity, lacking complexity and fine-grained prioritization.\n\n(Second best) Heuristics 4th and (second worst) Heuristics 19th also show stark differences. Heuristics 4th includes adaptive scaling, exact fit bonuses, sigmoid rewards with clipping, penalties for inefficiencies, and dynamic adjustments based on utilization. In contrast, Heuristics 19th merely checks if the item can fit and multiplies by remaining capacity, losing out on strategic prioritization.\n\nComparing (1st) vs (2nd), there are no differences since they are identical, indicating consistent usage of the best parameters and logic.\n\n(3rd) vs (4th) shows slight changes, such as different sigmoid thresholds and adaptive scaling factor, which seem marginal but underscore the iterative refinement process in heuristic design.\n\nComparing (third worst) Heuristics 16th vs (worst) Heuristics 20th, Heuristics 16th includes adaptive scaling, exact fit rewards, and additional penalties for certain conditions, thus offering a more nuanced decision-making process compared to the binary and linear approach of the worst.\n\nOverall: The top-ranked heuristics leverage adaptive scaling, exact fit prioritization, sigmoid rewards, clipping, penalties for inefficiencies, and dynamic adjustments based on bin utilization, leading to better strategic decision-making.\n- \n- **Keywords:** Adaptive scaling, exact fit rewards, dynamic penalty system, parameter tuning, complexity awareness, holistic heuristic components.\n- **Advice:** Develop a heuristic that dynamically adapts scaling based on real-time data, rewards placements that achieve exact fits, and employs a flexible penalty system to discourage waste and inefficiency. Focus on holistic design that integrates multiple adaptive components for enhanced performance.\n- **Avoid:** Overcomplicating the heuristic design with unnecessary functions or overly simplistic rules that ignore complexity; rigid reward and penalty structures that lack adaptability.\n- **Explanation:** By combining adaptive scaling, rewards for exact fits, and a dynamic penalty system, the heuristic can better respond to varying conditions. Holistic parameter tuning ensures that different aspects of efficiency are balanced, leading to a more robust and effective solution.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}