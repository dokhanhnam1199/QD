```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses adaptive scaling and a reward/penalty system to prioritize bins that are more likely to close, promoting efficient use of space.
    
    Adaptive scaling adjusts the priority based on the ratio of item size to remaining capacity, encouraging filling of bins to a similar extent.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: Adaptive scaling based on the item size relative to the remaining capacity
    base_priority = item / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero
    
    # Specific reward for bins that would be filled to capacity by this item
    exact_fill_reward = np.where(bins_remain_cap == item, 1.0, 0.0)
    
    # Penalty for very small remaining capacities to avoid precision issues with very small numbers
    small_capacity_penalty = np.where((bins_remain_cap < item) & (bins_remain_cap > 0.1), 0.1, 0.0)
    
    # Combined priority score
    priority_score = base_priority + exact_fill_reward - small_capacity_penalty
    
    return priority_score
```
