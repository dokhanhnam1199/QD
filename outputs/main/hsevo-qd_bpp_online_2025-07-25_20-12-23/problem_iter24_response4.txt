```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function for Online Bin Packing Problem (BPP) that incorporates dynamic adaptive scaling,
    exact fit rewards, and multifactor penalties to guide efficient bin selection.
    """
    # Constants for tuning the heuristic
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 2000.0
    ADAPTIVE_PENALTY_WEIGHT = 0.1
    INEFFICIENCY_PENALTY_BASE = 500.0
    INEFFICIENCY_PENALTY_EXPONENT = 2.0
    SIGMOID_SLOPE = 1.2
    SIGMOID_OFFSET = 0.3
    SIGMOID_THRESHOLD_MIN = 0.7
    SIGMOID_THRESHOLD_MAX = 0.1

    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Inefficiency penalty for excess space
    inefficiency_penalty = INEFFICIENCY_PENALTY_BASE * (remaining_cap / item) ** INEFFICIENCY_PENALTY_EXPONENT
    priority_scores[non_exact_fit_mask] -= ADAPTIVE_PENALTY_WEIGHT * inefficiency_penalty

    # Sigmoid reward for non-exact fits
    if np.any(non_exact_fit_mask):
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        reward = np.clip(reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)
        priority_scores[non_exact_fit_mask] *= reward

    # Penalize bins that cannot fit the item
    penalty_values = -np.inf * np.ones(bins_remain_cap.shape)
    penalty_values[bins_remain_cap < item] = -9999.9  # Ensure these bins are never chosen
    priority_scores += penalty_values

    return priority_scores
```
