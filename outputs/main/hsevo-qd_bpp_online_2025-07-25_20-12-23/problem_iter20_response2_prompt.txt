{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function implements a heuristic that uses adaptive scaling,\n    strategic rewards for exact fits, and penalties for inefficient placements. It aims to \n    balance bin usage precisely to avoid large leftovers while encouraging efficient packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Constants for tuning the heuristic\n    SCALE_FACTOR = 100.0\n    EXACT_FIT_BONUS = 1000.0\n    UNDERUTILIZATION_PENALTY_FACTOR = 0.5\n\n    # Calculate the exact fit indicator\n    exact_fit = (bins_remain_cap == item).astype(float) * EXACT_FIT_BONUS\n\n    # Calculate the penalty for underutilization\n    underutilization_penalty = (bins_remain_cap < 0.5 * bins_remain_cap.max()).astype(float) * UNDERUTILIZATION_PENALTY_FACTOR\n\n    # Adaptive scaling based on the remaining capacity\n    adaptive_scale = SCALE_FACTOR * np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2)))\n\n    # Combine the components to get the priority score\n    priority_score = adaptive_scale + exact_fit - underutilization_penalty\n\n    return priority_score\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority score for each bin using a combination of penalty and reward,\n    balancing leftover space and efficiency with adaptive scaling.\n    \"\"\"\n    ifbinsfit = bins_remain_cap >= item\n    penalty = np.where(ifbinsfit, 0, -np.inf)\n    reward = np.where(ifbinsfit, 1.0 / (bins_remain_cap - item + 0.1), 0)\n    priority_score = penalty + reward\n    return priority_score\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic uses an adaptive scoring system with exact fit prioritization, sigmoid rewards for partial fits, and penalties for unsuitable bins, finely tuned with specific parameters. The worst heuristic simply applies a penalty to insufficient bins and a reward inversely proportional to the remaining capacity, without the refined adjustments seen in the best heuristic. Comparing (second best) vs (second worst), the second best retains most characteristics of the best heuristic, while the second worst follows the simplistic scoring of the worst heuristic with minor variations. Overall, the best heuristics incorporate multiple strategic adjustments and adaptive scaling, whereas the worst heuristics lack these nuances, relying on a basic reward-penalty mechanism.\n- \n- **Keywords**: Adaptive scaling, exact fit rewards, penalties, inefficiency, nuanced control, avoidance of simplism\n\n- **Advice**:\n  - Design heuristics that dynamically adjust parameters based on the current state or previous outcomes (adaptive scaling).\n  - Implement precise reward systems for obtaining exact fits to encourage optimal packing decisions.\n  - Introduce penalties for underutilization or inefficient placements to discourage poor configurations.\n  - Emphasize the importance of balancing multiple factors with fine-grained control mechanisms.\n\n- **Avoid**:\n  - Over-reliance on simplistic balancing measures like penalizing large leftover spaces without contextual considerations.\n  - Neglecting the complexity required for designing robust and adaptive heuristics.\n  - Simplicity in heuristic design to the point of overlooking nuanced aspects of efficient solutions.\n\n- **Explanation**: By focusing on adaptive scaling and strategic reward/penalty systems, the heuristic design becomes more dynamic and responsive to various scenarios, leading to better packing efficiency. Avoiding simplism ensures that the heuristic can handle the complexity and nuance of real-world problems, ultimately yielding more efficient results.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}