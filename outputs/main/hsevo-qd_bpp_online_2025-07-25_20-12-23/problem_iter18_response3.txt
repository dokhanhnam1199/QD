```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function implements a heuristic that uses adaptive scaling,
    strategic rewards for exact fits, and penalties for inefficient placements. It aims to 
    balance bin usage precisely to avoid large leftovers and promote optimal packing conditions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Constants for strategic rewards and penalties
    EXACT_FIT_REWARD = 10.0     # High reward for exact fits
    UNDERUTILIZATION_PENALTY = 0.1  # Penalty for bins that are underutilized after placement

    # Calculate the potential remaining capacity after placing the item in each bin
    potential_remaining_cap = bins_remain_cap - item

    # Create a base priority score based on adaptive scaling (filling tighter bins first)
    base_priority = 1.0 / (potential_remaining_cap + 0.1)  # Adding epsilon to avoid division by zero

    # Identify bins that would be exactly filled by the item
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=1e-5)

    # Identify bins that would be underutilized after placing the item
    underutilized_mask = potential_remaining_cap > 0.5 * item  # Assuming underutilization if more than half the bin is left

    # Apply strategic rewards for exact fits
    base_priority[exact_fit_mask] += EXACT_FIT_REWARD

    # Apply penalties for inefficient placements in underutilized bins
    base_priority[underutilized_mask] -= UNDERUTILIZATION_PENALTY

    return base_priority
```
