```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive scaling with sigmoid rewards and penalties to prioritize bins effectively.
    """
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = 1000.0
    
    # Adaptive scaling for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale_factor = 100.0 * np.exp(-np.abs(remaining_cap - item) / item)
        priority_scores[non_exact_fit_mask] = adaptive_scale_factor
    
    # Sigmoid reward for non-exact fits
    if np.any(non_exact_fit_mask):
        reward = 1 / (1 + np.exp(-1.1169141074890545 * (remaining_cap - 0.278808023854411)))
        priority_scores[non_exact_fit_mask] *= reward
    
    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = -9459.645242722696
    
    return priority_scores
```
