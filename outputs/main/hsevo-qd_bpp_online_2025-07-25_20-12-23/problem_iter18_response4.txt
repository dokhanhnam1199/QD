```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function implements a heuristic that balances adaptive scaling,
    strategic rewards for exact fits, and penalties for inefficient placements. It aims to efficiently
    use bin space while avoiding large leftovers and promoting optimal packing conditions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: Inverse of remaining capacity to prioritize tighter bins
    base_priority = 1.0 / (bins_remain_cap + 0.1)  # Adding a small epsilon to avoid division by zero

    # Exact fit reward: High reward for bins where item fits exactly
    exact_fit_reward = np.where(bins_remain_cap == item, 10.0, 0.0)

    # Underutilization penalty: Penalize bins that would become underutilized after placing the item
    # Assuming an optimal bin size is 80% full post-item insertion for this example
    optimal_fullness = 0.8 * bins_remain_cap + item
    underutilization_penalty = np.where(bins_remain_cap + item < optimal_fullness, bins_remain_cap + item - optimal_fullness, 0.0)
    underutilization_penalty = -1.0 * underutilization_penalty  # Convert to penalty

    # Adaptive scaling: Scale based on current item size to adjust priority dynamically
    adaptive_scale = np.where(bins_remain_cap > item, item / np.max(bins_remain_cap), 0.1)

    # Combine priorities
    priority_scores = base_priority * adaptive_scale + exact_fit_reward + underutilization_penalty

    return priority_scores
```
