```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes larger
    remaining capacities to encourage better use of bins. It also decreases priority for bins where the item would not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority for bins that have enough remaining capacity
    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    # Further prioritize bins that are almost full after placing the item
    adjusted_priority = base_priority / (bins_remain_cap + 1e-9) ** 0.5
    # Ensure that bins which cannot fit the item have an infinitesimally small priority
    priority_scores = np.where(bins_remain_cap >= item, adjusted_priority, -np.inf)
    return priority_scores
```
