```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive scaling, exact fit rewards, sigmoid-based rewards, and efficiency penalties.
    """
    # Constants for tuning the heuristic
    EXACT_FIT_BONUS = 2000.0
    INEFFICIENCY_PENALTY = -5000.0
    SCALE_FACTOR = 100.0
    SIGMOID_SLOPE = 1.1
    SIGMOID_OFFSET = 0.25
    SIGMOID_THRESHOLD_MIN = 0.6
    SIGMOID_THRESHOLD_MAX = 0.1

    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = EXACT_FIT_BONUS
    
    # Non-exact fits are rewarded based on adaptive scaling
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] += adaptive_scale
        
        # Apply sigmoid reward for non-exact fits
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        reward = np.clip(reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)
        priority_scores[non_exact_fit_mask] *= reward
    
    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = INEFFICIENCY_PENALTY
    
    return priority_scores
```
