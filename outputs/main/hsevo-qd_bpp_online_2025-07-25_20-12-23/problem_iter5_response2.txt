```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balances penalties for leftover space and rewards for bins close to item size, adjusting for bin capacity."""
    # Prioritize bins that can fit the item with minimal leftover space
    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)
    # Penalty for larger spaces left after placing the item
    space_penalty = -feasible_caps
    # Reward for bins closer to being full after adding the item
    close_fit_reward = np.clip(bins_remain_cap - item, 0, 1) * 2
    # Normalize the rewards and penalties
    norm_reward = close_fit_reward / (np.max(close_fit_reward) + 1e-9)
    norm_penalty = space_penalty / (np.max(-space_penalty) + 1e-9)
    # Combined priority score with adaptive scaling
    priority_score = norm_penalty + norm_reward
    return priority_score
```
