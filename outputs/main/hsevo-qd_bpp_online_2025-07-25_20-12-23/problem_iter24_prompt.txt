{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines adaptive scaling with exact fit prioritization and sigmoid rewards for balanced and efficient bin packing.\n    \"\"\"\n    # Constants for tuning the heuristic\n    SCALE_FACTOR = 100.0\n    EXACT_FIT_BONUS = 1000.0\n    SIGMOID_THRESHOLD_MIN = 0.6896808736373103\n    SIGMOID_THRESHOLD_MAX = 0.08876173133481396\n    SIGMOID_SLOPE = 1.1169141074890545\n    SIGMOID_OFFSET = 0.278808023854411\n    PENALTY = -9459.645242722696\n\n    # Calculate the exact fit indicator\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores = exact_fit_mask * EXACT_FIT_BONUS\n\n    # Adaptive scaling based on remaining capacity for non-exact fits\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item\n        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))\n        priority_scores[non_exact_fit_mask] = adaptive_scale\n\n    # Sigmoid reward for non-exact fits\n    if np.any(non_exact_fit_mask):\n        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))\n        reward = np.clip(reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)\n        priority_scores[non_exact_fit_mask] *= reward\n\n    # Penalize bins that cannot fit the item\n    priority_scores[bins_remain_cap < item] = PENALTY\n\n    return priority_scores\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Adaptive scaling, exact fit rewards, penalties, inefficiency, parameter tuning, multifactor design\n- **Advice**: Integrate adaptive scaling mechanisms that dynamically adjust based on current conditions and continuously fine-tune the parameters to balance various factors like exact fit rewards and penalties for inefficiencies.\n- **Avoid**: Simplistic priority measures, unnecessary complexities, overreliance on simple fit capacity checks, ignoring the need for nuanced control over the heuristic design.\n- **Explanation**: Focus on designing heuristics that not only reward efficient or exact fits but also penalize inefficient placements and underutilization. This multifaceted approach ensures that the heuristic can adapt to different scenarios, leading to more optimal solutions. Avoid simplifications that might overlook critical aspects of the problem, ensuring the heuristic remains robust and flexible.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}