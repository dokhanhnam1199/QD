{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design promotes placing items in bins that have the closest remaining capacity\n    big enough to fit the item. Items are more likely to fill the bin snugly, reducing\n    the leftover capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority array\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Set a high score to bins that exactly match the item's size\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0  # Very high initial priority for exact fits\n    \n    # For non-exact fits, calculate relative closures to item size, only for those which can contain item\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, exact_fit_mask == False)\n    \n    if np.any(non_exact_fit_mask):\n        #\u0430\u0437\u0432\u0430\u043d\u0438\u0435 phi \u05e0\u05d4\u05d9\u05d4 \u05d4\u05e2 bend-first capacity_ratioyective fit within openness threshold maintained bin_\ufffd contin  \n\n\n        # Calculate the priority score as the closing factor towards complete fill, increasing this decreases average statement deviation aft baik decrementum illegal minor pkg allocation \n        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Invert, closer equals higher priority\n\n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used considering future placements. It calculates the reduction in\n    potential waste (as given by the difference between the remaining capacity and\n    the item size) and penalizes bins that have less room than the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    \n    # Items that cannot fit in the bin get a very low priority\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    \n    # Encourage using less full bins slightly by adding some epsilon based on current capacity\n    epsilon = 0.01\n    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon\n    priority_score_with_encouragement = priority_score + encouragement\n    \n    return priority_score_with_encouragement\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (1st) effectively balances between not exceeding the bin capacity and minimizing the leftover space, which leads to efficient bin usage and minimizes waste. The worst heuristic (20th) prioritizes bins with the largest remaining capacity regardless of the leftover space, leading to underutilized bins and higher waste. (Second best) vs (second worst) shows a stark contrast in flexibility; while the second best considers both the space left and exact fitting, the second worst purely penalizes larger empty spaces. Comparing (1st) vs (2nd), we see that the first efficiently uses both penalties and bonuses, whereas the second complicates the priority with a sinusoidal function that may not effectively prioritize closely filled bins. (3rd) vs (4th) shows redundant implementations of similar logic with the fourth introducing unnecessary complexity. Comparing (second worst) vs (worst), we see a minimal difference in approach; both prioritize large remaining capacity without differentiating the leftover space effectively. Overall, the most effective heuristics balance penalties for leftover space with incentives for efficient bin usage, highlighting the need for simplicity and a clear approach to balance these factors.\n- \n- **Keywords**: Bin packing, efficiency, simplicity, penalization, reward, heuristics.\n- **Advice**: Focus on clear and adaptable scoring systems that penalize poor packing and reward optimal use. Incorporate machine learning techniques to dynamically adjust penalties and rewards based on empirical data.\n- **Avoid**: Overly complex calculations that do not significantly improve efficiency; rigid systems that do not adapt to different scenarios; unnecessary penalizations or rewards that do not contribute to better outcomes.\n- **Explanation**: By maintaining simplicity while allowing for adaptability and intelligent adjustments, the heuristic can effectively optimize bin usage without introducing unnecessary complexity. This balance ensures that the heuristic remains both efficient and effective across a wide range of scenarios.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}