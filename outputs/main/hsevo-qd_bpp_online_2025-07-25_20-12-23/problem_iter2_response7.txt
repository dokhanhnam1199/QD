```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balances remaining capacity and adaptively penalizes new bins while rewarding efficient use of space."""
    # Penalize the last bin to avoid opening a new bin unless strictly necessary
    penalty_last_bin = 10.0
    number_of_bins = len(bins_remain_cap)
    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)
    
    # Calculate adjusted remaining capacity after adding the item
    adjusted_remaining_capacity = np.where(
        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)
    
    # Reward bins that leave minimal space after adding the item
    minimized_space_penalty = bins_remain_cap - adjusted_remaining_capacity
    
    # Combine penalties and rewards into a priority score
    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin + minimized_space_penalty / np.max(bins_remain_cap + 1e-9)
    
    return priority_scores
```
