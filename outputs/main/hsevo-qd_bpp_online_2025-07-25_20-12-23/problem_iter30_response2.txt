```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Advanced heuristic for online Bin Packing Problem that combines adaptive scaling,
    exact fit prioritization, sigmoid rewards, and a dynamic penalty system.
    """

    # Constants for tuning the heuristic
    SCALE_FACTOR = 50.0
    EXACT_FIT_BONUS = 500.0
    SIGMOID_SLOPE = 1.5
    SIGMOID_OFFSET = 0.5
    DYNAMIC_PENALTY_BASE = -500.0
    DYNAMIC_PENALTY_SCALING = 2.0

    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Sigmoid reward for non-exact fits
    if np.any(non_exact_fit_mask):
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        priority_scores[non_exact_fit_mask] *= reward

    # Dynamic penalty for bins that cannot fit the item
    penalty_mask = bins_remain_cap < item
    # Increase penalty based on how much the item exceeds the bin's capacity
    exceeding_amount = item - bins_remain_cap[penalty_mask]
    dynamic_penalty = DYNAMIC_PENALTY_BASE - DYNAMIC_PENALTY_SCALING * exceeding_amount
    priority_scores[penalty_mask] = dynamic_penalty

    return priority_scores
```
