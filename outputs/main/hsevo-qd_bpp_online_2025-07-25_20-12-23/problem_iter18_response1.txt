```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function implements a heuristic that uses adaptive scaling,
    strategic rewards for exact fits, and penalties for inefficient placements. It aims to 
    balance bin usage precisely to avoid large leftovers while encouraging efficient packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Constants for tuning the heuristic
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 1000.0
    UNDERUTILIZATION_PENALTY_FACTOR = 0.5

    # Calculate the exact fit indicator
    exact_fit = (bins_remain_cap == item).astype(float) * EXACT_FIT_BONUS

    # Calculate the penalty for underutilization
    underutilization_penalty = (bins_remain_cap < 0.5 * bins_remain_cap.max()).astype(float) * UNDERUTILIZATION_PENALTY_FACTOR

    # Adaptive scaling based on the remaining capacity
    adaptive_scale = SCALE_FACTOR * np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2)))

    # Combine the components to get the priority score
    priority_score = adaptive_scale + exact_fit - underutilization_penalty

    return priority_score
```
