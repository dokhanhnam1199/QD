{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines adaptive scaling with exact fit prioritization and sigmoid rewards for balanced and efficient bin packing.\n    \"\"\"\n    # Constants for tuning the heuristic\n    SCALE_FACTOR = 100.0\n    EXACT_FIT_BONUS = 1000.0\n    SIGMOID_THRESHOLD_MIN = 0.6896808736373103\n    SIGMOID_THRESHOLD_MAX = 0.08876173133481396\n    SIGMOID_SLOPE = 1.1169141074890545\n    SIGMOID_OFFSET = 0.278808023854411\n    PENALTY = -9459.645242722696\n\n    # Calculate the exact fit indicator\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores = exact_fit_mask * EXACT_FIT_BONUS\n\n    # Adaptive scaling based on remaining capacity for non-exact fits\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item\n        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))\n        priority_scores[non_exact_fit_mask] = adaptive_scale\n\n    # Sigmoid reward for non-exact fits\n    if np.any(non_exact_fit_mask):\n        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))\n        reward = np.clip(reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)\n        priority_scores[non_exact_fit_mask] *= reward\n\n    # Penalize bins that cannot fit the item\n    priority_scores[bins_remain_cap < item] = PENALTY\n\n    return priority_scores\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Adaptive scaling, exact fit rewards, penalties, inefficiency, nuanced control, avoidance of simplism\n\n- **Advice**:\n  - Design heuristics that dynamically adjust parameters based on the current state or previous outcomes (adaptive scaling).\n  - Implement precise reward systems for obtaining exact fits to encourage optimal packing decisions.\n  - Introduce penalties for underutilization or inefficient placements to discourage poor configurations.\n  - Emphasize the importance of balancing multiple factors with fine-grained control mechanisms.\n\n- **Avoid**:\n  - Over-reliance on simplistic balancing measures like penalizing large leftover spaces without contextual considerations.\n  - Neglecting the complexity required for designing robust and adaptive heuristics.\n  - Simplicity in heuristic design to the point of overlooking nuanced aspects of efficient solutions.\n\n- **Explanation**: By focusing on adaptive scaling and strategic reward/penalty systems, the heuristic design becomes more dynamic and responsive to various scenarios, leading to better packing efficiency. Avoiding simplism ensures that the heuristic can handle the complexity and nuance of real-world problems, ultimately yielding more efficient results.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}