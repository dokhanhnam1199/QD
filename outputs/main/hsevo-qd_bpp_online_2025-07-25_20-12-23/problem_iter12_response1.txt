```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function uses an adaptive mechanism that 
    rewards bins where the item would leave the least empty space, but also 
    includes a penalty for bins that are too full to ensure we don't pack 
    items into bins that will be overly filled soon, encouraging a more 
    balanced distribution of items among bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the new remaining capacity if the item is added
    new_remain_cap = bins_remain_cap - item
    
    # Reward bins where the item would leave the least empty space
    fill_reward = 1.0 / (new_remain_cap[new_remain_cap >= 0] + 0.1)  # adding a small epsilon to avoid division by zero
    
    # Penalty for bins that are too full (assuming bins with less than 10% remaining capacity are bad candidates)
    penalty_factor = np.where(new_remain_cap < 0.1 * bins_remain_cap, 0.1, 1.0)
    
    # Combine rewards and penalties to get the priority score
    priority_scores = fill_reward * penalty_factor
    
    # Handle bins where the item cannot fit
    priority_scores = np.pad(priority_scores, (0, len(bins_remain_cap) - len(priority_scores)), 'constant', constant_values=-np.inf)
    
    return priority_scores
```
