```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive scaling for efficient bin usage with strategic sigmoid rewards for better decision-making.
    """
    # Scale factor for adaptive scaling
    scale_factor = 1.5
    
    # Adaptive scaling based on remaining capacity
    adaptive_scale = np.exp(-scale_factor * (1 - bins_remain_cap / np.max(bins_remain_cap)))
    
    # Check if the item can fit in the bin
    can_fit = bins_remain_cap >= item
    
    # Sigmoid reward for bins that can fit the item
    sigmoid_reward = 1 / (1 + np.exp(-bins_remain_cap + item))
    
    # Combine adaptive scaling with sigmoid reward
    reward = adaptive_scale * sigmoid_reward * can_fit
    
    # Penalty for bins that cannot fit the item
    penalty = -np.inf * ~can_fit
    
    # Combine reward and penalty
    priority_scores = reward + penalty
    
    return priority_scores
```
