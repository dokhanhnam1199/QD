```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses an adaptive scaling mechanism to prioritize bins that
    are closer to being filled, while also penalizing bins that are too full
    to fit the current item. It aims to balance rewards and penalties to
    encourage strategic placements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Determine the ideal fill level for bins
    ideal_fill_level = np.mean(bins_remain_cap)
    
    # Calculate the difference between the ideal fill level and the current remaining capacity
    deviation_from_ideal = np.abs(ideal_fill_level - bins_remain_cap)
    
    # Reward bins that are closer to the ideal fill level but can still fit the item
    # Penalize bins that are too full to fit the item or deviate significantly from the ideal level
    priority_scores = (ideal_fill_level - deviation_from_ideal) / (bins_remain_cap + item + 0.1)
    
    # Ensure that bins which cannot fit the item receive a very low priority
    priority_scores[bins_remain_cap < item] = -np.inf
    
    # Apply adaptive scaling based on the current item size relative to the average bin capacity
    avg_bin_capacity = np.mean(bins_remain_cap + item)
    adaptive_scale = np.exp(-((item - avg_bin_capacity) / avg_bin_capacity) ** 2)
    priority_scores *= adaptive_scale
    
    return priority_scores
```
