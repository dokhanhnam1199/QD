```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin using adaptive scaling, exact fit rewards, sigmoid rewards, and penalties.
    """
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * 1000.0

    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale_factor = 100.0 * np.exp(-np.abs(remaining_cap - item) / item)
        priority_scores[non_exact_fit_mask] = adaptive_scale_factor

    utilization = bins_remain_cap / bins_remain_cap.max()
    dynamic_scale = np.mean(utilization) * 0.95
    priority_scores *= dynamic_scale

    reward = 1 / (1 + np.exp(-1.2 * (remaining_cap - 0.5)))
    priority_scores[non_exact_fit_mask] *= reward

    inefficiency_penalty = (utilization < 0.9) * -1000.0
    penalty = np.where(bins_remain_cap < item, -1000.0, inefficiency_penalty)
    priority_scores += penalty

    return priority_scores
```
