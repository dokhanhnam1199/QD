```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines penalties for leftover space and rewards for bins close to item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins that can fit the item with minimal leftover space
    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)
    # Penalty for larger spaces left after placing the item
    space_penalty = -feasible_caps
    # Reward for bins closer to being full after adding the item
    close_fit_reward = np.clip(bins_remain_cap - item, 0, 1) * 2
    # Combined priority score
    priority_score = space_penalty + close_fit_reward
    return priority_score
```
