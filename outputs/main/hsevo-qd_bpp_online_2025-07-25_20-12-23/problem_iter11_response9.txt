```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines remaining capacity inversely with sigmoid reward for nearly full bins.
    """
    # Base priority: inverse of remaining capacity to fill tighter bins first
    base_priority = 1.0 / (bins_remain_cap + 0.1)
    
    # Sigmoid reward for bins that will be nearly full after adding the item
    new_remain_cap = bins_remain_cap - item
    sigmoid_reward = 1 / (1 + np.exp(-new_remain_cap))
    
    # Combine base priority with sigmoid reward
    priority_scores = base_priority + sigmoid_reward
    
    # Penalize bins that cannot fit the item
    priority_scores[new_remain_cap < 0] = -1.0
    
    return priority_scores
```
