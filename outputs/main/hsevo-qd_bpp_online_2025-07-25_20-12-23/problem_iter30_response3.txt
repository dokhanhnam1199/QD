```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Advanced heuristic for online Bin Packing Problem that combines adaptive scaling,
    exact fit prioritization, dynamic penalty system, and holistic design.
    """
    
    # Constants for tuning the heuristic
    SCALE_FACTOR = 200.0
    EXACT_FIT_BONUS = 1500.0
    DYNAMIC_SCALING_THRESHOLD = 0.5
    FLEXIBLE_PENALTY = -2000.0
    COMPLEXITY_AWARENESS = 0.8

    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = np.zeros_like(bins_remain_cap)
    priority_scores[exact_fit_mask] = EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap > item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale_factor = 1 - (remaining_cap - item) / remaining_cap.max()
        adaptive_scale_factor = np.clip(adaptive_scale_factor, 0, 1)  # Ensure non-negative scaling
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2))) * adaptive_scale_factor
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Dynamic penalty system based on bin occupancy complexity
    occupied_ratio = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    dynamic_penalty = FLEXIBLE_PENALTY * np.exp(COMPLEXITY_AWARENESS * occupied_ratio)
    slot_penalty_mask = bins_remain_cap < item
    priority_scores[slot_penalty_mask] = dynamic_penalty[slot_penalty_mask]

    return priority_scores
```
