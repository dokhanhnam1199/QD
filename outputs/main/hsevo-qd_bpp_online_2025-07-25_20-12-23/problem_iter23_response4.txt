```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin using adaptive scaling, exact fit rewards, and inefficiency penalties.
    """
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 1000.0
    UNDERUTILIZATION_PENALTY_FACTOR = 0.5

    # Calculate exact fit bonus
    exact_fit = (bins_remain_cap == item).astype(float) * EXACT_FIT_BONUS

    # Calculate underutilization penalty
    underutilization_penalty = (bins_remain_cap < 0.5 * bins_remain_cap.max()).astype(float) * UNDERUTILIZATION_PENALTY_FACTOR

    # Adaptive scaling based on remaining capacity
    adaptive_scale = SCALE_FACTOR * np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2)))

    # Penalty for bins that cannot fit the item
    penalty = np.where(bins_remain_cap >= item, 0, -np.inf)

    # Reward for tighter fit (avoiding excessive space)
    reward = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    reward = np.max(reward) - reward  # Invert reward to prioritize tighter fits

    # Combine components to get priority score
    priority_score = penalty + adaptive_scale + exact_fit - underutilization_penalty + reward

    return priority_score
```
