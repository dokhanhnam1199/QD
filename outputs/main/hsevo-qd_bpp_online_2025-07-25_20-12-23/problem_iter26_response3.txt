```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function combining adaptive scaling, exact fit rewards, penalties, and sigmoid rewards for Online BPP.
    """
    # Constants for tuning
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 2000.0
    INEFFICIENCY_PENALTY = -5000.0
    SIGMOID_SLOPE = 1.2
    SIGMOID_OFFSET = 0.3
    SIGMOID_THRESHOLD_MIN = 0.6
    SIGMOID_THRESHOLD_MAX = 0.1

    # Base priority: Adaptive scaling based on remaining capacity
    base_priority = SCALE_FACTOR * np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2)))
    
    # Exact fit reward
    exact_fit_reward = np.where(bins_remain_cap == item, EXACT_FIT_BONUS, 0.0)
    
    # Penalize inefficiencies
    inefficiency_penalty = np.where(bins_remain_cap < item, INEFFICIENCY_PENALTY, 0.0)
    
    # Sigmoid reward for non-exact fits
    remaining_cap = bins_remain_cap - item
    sigmoid_reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
    sigmoid_reward = np.clip(sigmoid_reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)
    
    # Combined priority score
    priority_score = base_priority + exact_fit_reward + sigmoid_reward * base_priority + inefficiency_penalty
    
    return priority_score
```
