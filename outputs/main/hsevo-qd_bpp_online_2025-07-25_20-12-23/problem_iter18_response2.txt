```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the priority function implements a heuristic that uses adaptive scaling,
    strategic rewards for exact fits, and penalties for inefficient placements. It aims to 
    balance bin usage precisely to avoid large leftovers and make optimal packing decisions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: inverse of remaining capacity with a small epsilon to avoid division by zero
    base_priority = 1.0 / (bins_remain_cap + 0.1)
    
    # Strategic rewards for bins that would be exactly filled by the item
    exact_fit_bonus = np.where(bins_remain_cap == item, 10.0, 0.0)
    
    # Penalties for bins that would be underutilized (e.g., remaining capacity > 90% after placing the item)
    underutilization_penalty = np.where(bins_remain_cap / item > 1.1, 1.0, 0.0)
    
    # Adaptive scaling: scale priorities based on the relative size of the item to the bin capacity
    adaptive_scale_factor = 1.0 / (item + 0.1)  # Smaller items get a higher scale factor
    
    # Final priority score
    priority_score = base_priority + exact_fit_bonus - underutilization_penalty
    priority_score *= adaptive_scale_factor
    
    return priority_score
```
