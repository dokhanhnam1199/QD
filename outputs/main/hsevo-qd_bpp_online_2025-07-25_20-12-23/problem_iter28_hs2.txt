import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    SCALE_FACTOR: float = 94.94874942867393,
    EXACT_FIT_BONUS: float = 1040.8585603915121,
    SIGMOID_THRESHOLD_MIN: float = 0.8615886070330878,
    SIGMOID_THRESHOLD_MAX: float = -0.043945181220107044,
    SIGMOID_SLOPE: float = 1.7938838058020878,
    SIGMOID_OFFSET: float = 0.39915329633781066,
    PENALTY: float = -9670.843222149864) -> np.ndarray:
    """
    Combines adaptive scaling with exact fit prioritization and sigmoid rewards for balanced and efficient bin packing.
    """
    
    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask] - item
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        priority_scores[non_exact_fit_mask] = adaptive_scale

    # Sigmoid reward for non-exact fits
    if np.any(non_exact_fit_mask):
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        reward = np.clip(reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)
        priority_scores[non_exact_fit_mask] *= reward

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = PENALTY

    return priority_scores
