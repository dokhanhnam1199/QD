```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function combining adaptive scaling, exact fit rewards, sigmoid rewards, 
    and dynamic penalties for efficient online bin packing.
    """
    SCALE_FACTOR = 100.0
    EXACT_FIT_BONUS = 2000.0
    INEFFICIENCY_PENALTY = -5000.0
    UNDERUTILIZATION_PENALTY = -1000.0
    SIGMOID_SLOPE = 1.2
    SIGMOID_OFFSET = 0.3
    SIGMOID_THRESHOLD_MIN = 0.6
    SIGMOID_THRESHOLD_MAX = 0.1
    UNDERUTILIZATION_THRESHOLD = 0.2

    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * EXACT_FIT_BONUS

    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale = SCALE_FACTOR * np.exp(-((remaining_cap - item) ** 2) / (2 * (item ** 2)))
        reward = 1 / (1 + np.exp(-SIGMOID_SLOPE * (remaining_cap - SIGMOID_OFFSET)))
        reward = np.clip(reward, SIGMOID_THRESHOLD_MIN, SIGMOID_THRESHOLD_MAX)
        priority_scores[non_exact_fit_mask] = adaptive_scale * reward

    priority_scores[bins_remain_cap < item] = INEFFICIENCY_PENALTY

    underutilized_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap / item < UNDERUTILIZATION_THRESHOLD)
    priority_scores[underutilized_mask] += UNDERUTILIZATION_PENALTY

    return priority_scores
```
