{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    exact_fit_weight: float = 1.685583733229666, \n    non_exact_fit_weight: float = 0.6350903531464809, \n    threshold: float = 0.3949485466196684) -> np.ndarray:\n    \"\"\"Combines penalties for leftover space with incentives for exact fits and snug fills.\"\"\"\n    \n    # Ensure the item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate space left after adding the item\n    space_left = bins_remain_cap - item\n    \n    # Priority for exact fits\n    exact_fit_priority = can_fit * (bins_remain_cap == item) * exact_fit_weight\n    \n    # Priority for bins that are not exact fits, penalizing leftover space\n    non_exact_fit_priority = can_fit * (1 - (space_left / bins_remain_cap)) * (bins_remain_cap != item) * non_exact_fit_weight\n    \n    # Combine both priorities\n    priority = exact_fit_priority + non_exact_fit_priority\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    exact_fit_weight: float = 1.685583733229666, \n    non_exact_fit_weight: float = 0.6350903531464809, \n    threshold: float = 0.3949485466196684) -> np.ndarray:\n    \"\"\"Combines penalties for leftover space with incentives for exact fits and snug fills.\"\"\"\n    \n    # Ensure the item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate space left after adding the item\n    space_left = bins_remain_cap - item\n    \n    # Priority for exact fits\n    exact_fit_priority = can_fit * (bins_remain_cap == item) * exact_fit_weight\n    \n    # Priority for bins that are not exact fits, penalizing leftover space\n    non_exact_fit_priority = can_fit * (1 - (space_left / bins_remain_cap)) * (bins_remain_cap != item) * non_exact_fit_weight\n    \n    # Combine both priorities\n    priority = exact_fit_priority + non_exact_fit_priority\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin, balancing leftover space and efficiency.\"\"\"\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, 1.0 / (bins_remain_cap - item + 0.1), -np.inf)\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit priority and remaining capacity to minimize waste.\"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit has highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # For non-exact fits, prioritize based on how close they are to being full\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        priority_scores[non_exact_fit_mask] = 1 - (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n    \n    # Penalize bins with less remaining capacity (after exact and non-exact fit considerations)\n    priority_scores = np.where(bins_remain_cap < item, -1000, priority_scores)\n    \n    return priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit priority and remaining capacity to minimize waste.\"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit has highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # For non-exact fits, prioritize based on how close they are to being full\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        priority_scores[non_exact_fit_mask] = 1 - (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n    \n    # Penalize bins with less remaining capacity (after exact and non-exact fit considerations)\n    priority_scores = np.where(bins_remain_cap < item, -1000, priority_scores)\n    \n    return priority_scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit priority and remaining capacity to minimize waste.\"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit has highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # For non-exact fits, prioritize based on how close they are to being full\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        priority_scores[non_exact_fit_mask] = 1 - (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n    \n    # Penalize bins with less remaining capacity (after exact and non-exact fit considerations)\n    priority_scores = np.where(bins_remain_cap < item, -1000, priority_scores)\n    \n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines penalties for leftover space and rewards for bins close to item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins that can fit the item with minimal leftover space\n    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    # Penalty for larger spaces left after placing the item\n    space_penalty = -feasible_caps\n    # Reward for bins closer to being full after adding the item\n    close_fit_reward = np.clip(bins_remain_cap - item, 0, 1) * 2\n    # Combined priority score\n    priority_score = space_penalty + close_fit_reward\n    return priority_score\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit priority and remaining capacity to minimize waste.\"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit has highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # For non-exact fits, prioritize those close to being full\n    non_exact_fit_mask = bins_remain_cap >= item\n    if np.any(non_exact_fit_mask):\n        # Calculate priority based on remaining space after adding item\n        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Closer to full is better\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and adjusted penalty to prioritize bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Adjust capacity left after adding the item\n    adjusted_remaining_capacity = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Normalize adjusted remaining capacity\n    norm_adjusted_capacity = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9)\n    \n    # Calculate priority score by combining normalized capacity and penalty\n    priority_scores = norm_adjusted_capacity - penalty_for_new_bin\n    \n    return priority_scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances remaining capacity and adaptively penalizes new bins while rewarding efficient use of space.\"\"\"\n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Calculate adjusted remaining capacity after adding the item\n    adjusted_remaining_capacity = np.where(\n        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Reward bins that leave minimal space after adding the item\n    minimized_space_penalty = bins_remain_cap - adjusted_remaining_capacity\n    \n    # Combine penalties and rewards into a priority score\n    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin + minimized_space_penalty / np.max(bins_remain_cap + 1e-9)\n    \n    return priority_scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the priority function aims to balance between filling\n    bins to full capacity and avoiding fragmentation. It penalizes bins that\n    would be too full after adding the item and rewards bins that are closer\n    to being full but not overloaded. The priority score uses a sigmoid function\n    to achieve this balance and add adaptability.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the new remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n\n    # Penalize bins where the item would make the new remaining capacity negative\n    penalty = np.where(new_remain_cap < 0, -100, 0)\n\n    # Use a sigmoid function to reward bins that are fuller after adding the item\n    reward = 1 / (1 + np.exp(-new_remain_cap))\n\n    # Combine penalty and reward\n    priority_score = reward + penalty\n\n    return priority_score\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic prioritizing tight fit and initial bin size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Relative space left factor to consider initial bin size\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine factors with a balance\n    return priority + 0.5 * relative_space_left_factor\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}