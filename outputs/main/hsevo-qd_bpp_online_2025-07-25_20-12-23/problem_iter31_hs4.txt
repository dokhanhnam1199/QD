import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray,
    initial_scale_factor: float = 110.68125392470083,
    exact_fit_bonus: float = 555.9170254672667,
    inefficiency_penalty: float = -1933.484386870457,
    underutilization_penalty: float = -863.5360920667945,
    adaptive_scaling_decay: float = 0.9796753287594376,
    efficiency_threshold: float = 0.9434991537007226,
    sigmoid_slope: float = 1.2156451733487166,
    sigmoid_offset: float = 0.3252727327061809) -> np.ndarray:
    """
    Enhanced heuristic for online bin packing problem that dynamically adjusts scaling and rewards/penalties.
    """
    # Calculate the exact fit indicator
    exact_fit_mask = bins_remain_cap == item
    priority_scores = exact_fit_mask * exact_fit_bonus

    # Adaptive scaling based on remaining capacity for non-exact fits
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)
    if np.any(non_exact_fit_mask):
        remaining_cap = bins_remain_cap[non_exact_fit_mask]
        adaptive_scale_factor = initial_scale_factor * np.exp(-np.abs(remaining_cap - item) / item)
        priority_scores[non_exact_fit_mask] = adaptive_scale_factor

    # Dynamically adjust scaling factor based on current bin utilization
    utilization = bins_remain_cap / bins_remain_cap.max()
    dynamic_scale = np.mean(utilization) * adaptive_scaling_decay
    priority_scores *= dynamic_scale

    # Reward for efficient usage of bin capacity
    efficient_usage_mask = utilization >= efficiency_threshold
    efficiency_reward = efficient_usage_mask * (bins_remain_cap - item) * 10.
    priority_scores += efficiency_reward

    # Penalties for inefficiencies and underutilization
    inefficiency_penalty_mask = utilization < efficiency_threshold
    inefficiency_penalty_masked = inefficiency_penalty_mask * inefficiency_penalty
    underutilization_penalty_mask = (bins_remain_cap - item) / bins_remain_cap.max() > 0.8
    underutilization_penalty_masked = underutilization_penalty_mask * underutilization_penalty
    priority_scores += inefficiency_penalty_masked + underutilization_penalty_masked

    # Sigmoid reward for non-exact fits with nuanced control
    if np.any(non_exact_fit_mask):
        reward = 1 / (1 + np.exp(-sigmoid_slope * (remaining_cap - sigmoid_offset)))
        priority_scores[non_exact_fit_mask] *= reward

    # Penalize bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = inefficiency_penalty

    return priority_scores
