{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    item: float, \n    bins_remain_cap: np.ndarray, \n    penalty: float = -3586.2115429161977,\n    sigmoid_threshold_min: float = 0.7607170824887122,\n    sigmoid_threshold_max: float = 0.42411238386705796) -> np.ndarray:\n    \"\"\"\n    Combines exact fit prioritization with adaptive sigmoid reward to balance filling bins effectively.\n    \"\"\"\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit gets highest priority\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0\n    \n    # Non-exact fits are rewarded based on a sigmoid function for capacity utilization\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, ~exact_fit_mask)\n    if np.any(non_exact_fit_mask):\n        new_remain_cap = bins_remain_cap[non_exact_fit_mask] - item\n        reward = 1 / (1 + np.exp(-new_remain_cap))\n        priority_scores[non_exact_fit_mask] = reward\n    \n    # Penalize bins that cannot fit the item\n    priority_scores = np.where(bins_remain_cap < item, penalty, priority_scores)\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic uses an adaptive reward/penalty system combined with sigmoid functions to balance utilization efficiently, while the worst only considers whether an item can fit into a bin, ignoring remaining capacity or penalties for very full bins. (Second best) vs (second worst) also highlights a sophisticated reward system for exact fits and penalties for bins with very small remaining capacities, whereas the second worst still lacks in dynamic decision-making based on capacity. Comparing (1st) vs (2nd), we see both using similar base priority mechanisms but the 1st includes additional nuanced rewards and penalties. (3rd) vs (4th) shows slight variations but both prioritize bins that can accommodate the item and use a reward system but without significant differences in complexity. Comparing (second worst) vs (worst), we see minimal differences as both focus on whether the item fits, without adaptive mechanisms. Overall: The best heuristics incorporate adaptive mechanisms, rewards, and penalties for smarter decision-making, whereas the worst focus solely on feasibility of item fitting.\n- \n- **Keywords**: Adaptive mechanisms, strategic rewards, item placement efficiency, simplicity\n- **Advice**: Focus on dynamic parameter tuning based on solution progress; design rewards that encourage proximity to optimal solutions; streamline decision-making processes by clearly defining criteria for penalties.\n- **Avoid**: Excessive penalties/reward schemes that complicate decision logic; overfitting the heuristic to specific instances rather than maintaining generality.\n- **Explanation**: By focusing on adaptive mechanisms, the heuristic can improve over time and iterations without being overly complex. Strategic rewards should be targeted and meaningful to guide the solution towards better outcomes. Simplicity ensures that the heuristic remains robust and applicable across a wide range of scenarios, avoiding the pitfalls of overly intricate designs.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}