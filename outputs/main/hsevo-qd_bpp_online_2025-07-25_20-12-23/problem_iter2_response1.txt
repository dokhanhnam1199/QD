```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines remaining capacity and adjusted penalty to prioritize bins efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Adjust capacity left after adding the item
    adjusted_remaining_capacity = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)
    
    # Penalize the last bin to avoid opening a new bin unless strictly necessary
    penalty_last_bin = 10.0
    number_of_bins = len(bins_remain_cap)
    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)
    
    # Normalize adjusted remaining capacity
    norm_adjusted_capacity = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9)
    
    # Calculate priority score by combining normalized capacity and penalty
    priority_scores = norm_adjusted_capacity - penalty_for_new_bin
    
    return priority_scores
```
