{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that only bins with sufficient remaining capacity are considered\n    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Penalty for larger spaces left after placing the item\n    priority_score = -feasible_caps\n    \n    return priority_score\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that only bins with sufficient remaining capacity are considered\n    feasible_caps = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Penalty for larger spaces left after placing the item\n    priority_score = -feasible_caps\n    \n    return priority_score\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Penalty for too much leftover space, decreased when the remaining space is minimal\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 0.1)  # adding a small epsilon to avoid division by zero\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design promotes placing items in bins that have the closest remaining capacity\n    big enough to fit the item. Items are more likely to fill the bin snugly, reducing\n    the leftover capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority array\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Set a high score to bins that exactly match the item's size\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0  # Very high initial priority for exact fits\n    \n    # For non-exact fits, calculate relative closures to item size, only for those which can contain item\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, exact_fit_mask == False)\n    \n    if np.any(non_exact_fit_mask):\n        #\u0430\u0437\u0432\u0430\u043d\u0438\u0435 phi \u05e0\u05d4\u05d9\u05d4 \u05d4\u05e2 bend-first capacity_ratioyective fit within openness threshold maintained bin_\ufffd contin  \n\n\n        # Calculate the priority score as the closing factor towards complete fill, increasing this decreases average statement deviation aft baik decrementum illegal minor pkg allocation \n        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Invert, closer equals higher priority\n\n    return priority_scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design promotes placing items in bins that have the closest remaining capacity\n    big enough to fit the item. Items are more likely to fill the bin snugly, reducing\n    the leftover capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority array\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Set a high score to bins that exactly match the item's size\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0  # Very high initial priority for exact fits\n    \n    # For non-exact fits, calculate relative closures to item size, only for those which can contain item\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, exact_fit_mask == False)\n    \n    if np.any(non_exact_fit_mask):\n        #\u0430\u0437\u0432\u0430\u043d\u0438\u0435 phi \u05e0\u05d4\u05d9\u05d4 \u05d4\u05e2 bend-first capacity_ratioyective fit within openness threshold maintained bin_\ufffd contin  \n\n\n        # Calculate the priority score as the closing factor towards complete fill, increasing this decreases average statement deviation aft baik decrementum illegal minor pkg allocation \n        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Invert, closer equals higher priority\n\n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design promotes placing items in bins that have the closest remaining capacity\n    big enough to fit the item. Items are more likely to fill the bin snugly, reducing\n    the leftover capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority array\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Set a high score to bins that exactly match the item's size\n    exact_fit_mask = bins_remain_cap == item\n    priority_scores[exact_fit_mask] = 1.0  # Very high initial priority for exact fits\n    \n    # For non-exact fits, calculate relative closures to item size, only for those which can contain item\n    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, exact_fit_mask == False)\n    \n    if np.any(non_exact_fit_mask):\n        #\u0430\u0437\u0432\u0430\u043d\u0438\u0435 phi \u05e0\u05d4\u05d9\u05d4 \u05d4\u05e2 bend-first capacity_ratioyective fit within openness threshold maintained bin_\ufffd contin  \n\n\n        # Calculate the priority score as the closing factor towards complete fill, increasing this decreases average statement deviation aft baik decrementum illegal minor pkg allocation \n        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]\n        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Invert, closer equals higher priority\n\n    return priority_scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used when deciding the priority. Bins that have more remaining capacity\n    but do not risk creating new bins unnecessarily are preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    remaining_capacity_score = bins_remain_cap / np.max(bins_remain_cap)\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Adjust capacity left after adding the item\n    adjusted_remaining_capacity = np.where(\n        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Create priority score by combining the adjusted remaining capacity and petential bin penalty\n    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used when deciding the priority. Bins that have more remaining capacity\n    but do not risk creating new bins unnecessarily are preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize the last bin to avoid opening a new bin unless strictly necessary\n    penalty_last_bin = 10.0\n    remaining_capacity_score = bins_remain_cap / np.max(bins_remain_cap)\n    number_of_bins = len(bins_remain_cap)\n    penalty_for_new_bin = np.linspace(0, penalty_last_bin, number_of_bins)\n    \n    # Adjust capacity left after adding the item\n    adjusted_remaining_capacity = np.where(\n        bins_remain_cap - item >= 0, bins_remain_cap - item, -np.inf)\n    \n    # Create priority score by combining the adjusted remaining capacity and petential bin penalty\n    priority_scores = adjusted_remaining_capacity / (np.max(adjusted_remaining_capacity) + 1e-9) - penalty_for_new_bin\n    \n    return priority_scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # First, prioritize bins with capacity close to the item size but not less\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    \n    # Next, prioritize bins with the largest remaining capacity (first-fit decreasing)\n    largest_first_fit = bins_remain_cap\n\n    # Combine the priorities, giving larger weights to bins close to the item size\n    priority_score = close_bins * 1.5 + largest_first_fit\n\n    return priority_score\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity to discourage \n    fresher, larger bins while potentially prioritizing bins that are more nearly full and \n    might need closure. This balance may decrease the total number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero or negative values by using np.clip to ensure no zero capacity\n    res_capacity_clipped = np.clip(bins_remain_cap - item, a_min=0, a_max=None)\n    # Give higher priority to bins that will still have some fractional capacity left after the item is added\n    # This encourages filling bins before prematurely starting new ones.\n    priority_score = res_capacity_clipped / (bins_remain_cap + 1e-9)  # Stability constant (1e-9) ensures no div by zero\n    return priority_score\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Give higher priority to bins that were less initially full (more empty space at the start)\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine these two factors into a priority score\n    return priority + relative_space_left_factor\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used considering future placements. It calculates the reduction in\n    potential waste (as given by the difference between the remaining capacity and\n    the item size) and penalizes bins that have less room than the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    \n    # Items that cannot fit in the bin get a very low priority\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    \n    # Encourage using less full bins slightly by adding some epsilon based on current capacity\n    epsilon = 0.01\n    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon\n    priority_score_with_encouragement = priority_score + encouragement\n    \n    return priority_score_with_encouragement\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used considering future placements. It calculates the reduction in\n    potential waste (as given by the difference between the remaining capacity and\n    the item size) and penalizes bins that have less room than the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    \n    # Items that cannot fit in the bin get a very low priority\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    \n    # Encourage using less full bins slightly by adding some epsilon based on current capacity\n    epsilon = 0.01\n    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon\n    priority_score_with_encouragement = priority_score + encouragement\n    \n    return priority_score_with_encouragement\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Give higher priority to bins that were less initially full (more empty space at the start)\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine these two factors into a priority score\n    return priority + relative_space_left_factor\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # First, prioritize bins with capacity close to the item size but not less\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    \n    # Next, prioritize bins with the largest remaining capacity (first-fit decreasing)\n    largest_first_fit = bins_remain_cap\n\n    # Combine the priorities, giving larger weights to bins close to the item size\n    priority_score = close_bins * 1.5 + largest_first_fit\n\n    return priority_score\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Give higher priority to bins that were less initially full (more empty space at the start)\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine these two factors into a priority score\n    return priority + relative_space_left_factor\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Give higher priority to bins that were less initially full (more empty space at the start)\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine these two factors into a priority score\n    return priority + relative_space_left_factor\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}