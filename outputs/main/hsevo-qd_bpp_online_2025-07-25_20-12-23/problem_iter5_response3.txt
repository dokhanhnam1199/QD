```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines penalties for inefficiency and rewards for minimal space left, using a sigmoid for balance.
    """
    # Calculate new remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item

    # Penalize bins where the item would make the new remaining capacity negative
    penalty = np.where(new_remain_cap < 0, -100, 0)

    # Reward bins that leave minimal space after adding the item using a sigmoid
    reward = 1 / (1 + np.exp(-new_remain_cap))

    # Penalize the last bin to avoid opening a new bin unless strictly necessary
    penalty_for_new_bin = np.linspace(0, 10.0, len(bins_remain_cap))

    # Combine penalties and rewards into a priority score
    priority_score = reward + penalty - penalty_for_new_bin

    return priority_score
```
