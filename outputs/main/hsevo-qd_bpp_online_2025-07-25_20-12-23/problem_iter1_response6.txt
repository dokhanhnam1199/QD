```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design increases priority for bins that have more remaining capacity to discourage 
    fresher, larger bins while potentially prioritizing bins that are more nearly full and 
    might need closure. This balance may decrease the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero or negative values by using np.clip to ensure no zero capacity
    res_capacity_clipped = np.clip(bins_remain_cap - item, a_min=0, a_max=None)
    # Give higher priority to bins that will still have some fractional capacity left after the item is added
    # This encourages filling bins before prematurely starting new ones.
    priority_score = res_capacity_clipped / (bins_remain_cap + 1e-9)  # Stability constant (1e-9) ensures no div by zero
    return priority_score
```
