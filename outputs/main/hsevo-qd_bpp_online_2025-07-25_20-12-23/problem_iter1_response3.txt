```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design promotes placing items in bins that have the closest remaining capacity
    big enough to fit the item. Items are more likely to fill the bin snugly, reducing
    the leftover capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Set a high score to bins that exactly match the item's size
    exact_fit_mask = bins_remain_cap == item
    priority_scores[exact_fit_mask] = 1.0  # Very high initial priority for exact fits
    
    # For non-exact fits, calculate relative closures to item size, only for those which can contain item
    non_exact_fit_mask = np.logical_and(bins_remain_cap >= item, exact_fit_mask == False)
    
    if np.any(non_exact_fit_mask):
        #азвание phi נהיה הע bend-first capacity_ratioyective fit within openness threshold maintained bin_� contin  


        # Calculate the priority score as the closing factor towards complete fill, increasing this decreases average statement deviation aft baik decrementum illegal minor pkg allocation 
        priority_scores[non_exact_fit_mask] = (bins_remain_cap[non_exact_fit_mask] - item) / bins_remain_cap[non_exact_fit_mask]
        priority_scores[non_exact_fit_mask] = 1 - priority_scores[non_exact_fit_mask]  # Invert, closer equals higher priority

    return priority_scores
```
