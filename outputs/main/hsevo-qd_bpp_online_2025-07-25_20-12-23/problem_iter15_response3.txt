```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses an adaptive scaling mechanism to prioritize bins that
    are more战略ically placed for future item placements. It incorporates a
    reward system that encourages filling bins to a point where they are nearly
    full but not overly packed, promoting better utilization and distribution of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base reward for remaining capacity
    base_reward = bins_remain_cap
    
    # Adaptive scaling factor to encourage bins that are nearly full but not packed
    adaptive_scaling = np.exp(-((bins_remain_cap - item) ** 2) / (2 * (item ** 2)))
    
    # Penalty for bins that would overflow with the current item
    overflow_penalty = np.where(bins_remain_cap < item, -1.0, 0.0)
    
    # Combine rewards and penalties
    priority_scores = base_reward * adaptive_scaling + overflow_penalty
    
    return priority_scores
```
