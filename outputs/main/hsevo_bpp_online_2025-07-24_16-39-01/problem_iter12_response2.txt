```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a heuristic that combines multiple factors for effective prioritization.
    It prioritizes bins that have just enough capacity for the item and are most filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Create a mask for bins that can fit the item
    can_fit_item = bins_remain_cap >= item
    
    # For bins that can fit the item, calculate the priority score as a combination of 
    # the negative remaining capacity after addition (to prioritize bins that are most filled) 
    # and the remaining capacity (to prioritize bins that have just enough capacity)
    priority_scores = np.where(can_fit_item, 
                               -remaining_cap_after_addition + 0.1 * (1 - (remaining_cap_after_addition / bins_remain_cap)), 
                               -np.inf)
    
    return priority_scores
```
