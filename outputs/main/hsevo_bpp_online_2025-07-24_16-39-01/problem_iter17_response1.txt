```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit score and remaining capacity score for prioritization with an enhanced tie-breaker.
    """
    # Calculate fit score and remaining capacity score
    fit_score = 1 - (item / np.maximum(bins_remain_cap, epsilon))
    remain_cap_score = bins_remain_cap / (item + epsilon)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -fit_score + remain_cap_score * 0.1, -np.inf)
    
    # Enhanced tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
```
