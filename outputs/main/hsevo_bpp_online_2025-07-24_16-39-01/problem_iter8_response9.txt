```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin. 
    Combines prioritizing bins with just enough capacity and a robust tie-breaking strategy.
    """
    # Prioritize bins that have just enough capacity for the item
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Add a small factor considering the initial remaining capacity and random noise to break ties
    initial_capacities = np.full_like(bins_remain_cap, 1.0)  
    priority_scores += 0.1 * np.where(bins_remain_cap >= item, (initial_capacities - bins_remain_cap), 0) + np.random.rand(*priority_scores.shape) * 1e-6
    
    return priority_scores
```
