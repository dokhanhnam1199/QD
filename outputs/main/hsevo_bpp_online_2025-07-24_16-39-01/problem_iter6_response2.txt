```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a more sophisticated heuristic that takes into account 
    both the remaining capacity after adding the item and the number of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item
    # So, we use a combination of the negative of the remaining capacity after adding the item and a bin utilization factor
    # If the item doesn't fit, the priority score is negative infinity
    
    # Calculate the utilization factor for each bin if the item is added
    utilization_factor = (bins_remain_cap - item) / bins_remain_cap
    
    # For bins that can fit the item, assign a priority score based on the utilization factor and remaining capacity
    priority_scores = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - (bins_remain_cap - item) / np.max(bins_remain_cap), -np.inf)
    
    # To break ties, we can add a small random noise to the priority scores
    # However, for simplicity and reproducibility, we will not add noise here
    
    return priority_scores
```
