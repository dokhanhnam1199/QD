```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                fit_score_weight: float = 0.3, utilization_weight: float = 0.4, 
                remaining_capacity_weight: float = 0.2, tie_breaker_index_weight: float = 0.05, 
                tie_breaker_random_weight: float = 0.05, epsilon: float = 1e-6) -> np.ndarray:
    """
    Advanced priority function that combines fit score, utilization factor, remaining capacity, 
    and sophisticated tie-breakers for enhanced online bin packing.
    """
    # Calculate fit score: how well the item fits into the bin
    fit_score = 1 - np.abs(bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, fit_score, -np.inf)
    
    # Utilization factor considering the item size and bin capacity
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Normalize remaining capacity for comparison
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Weighted score combining fit, utilization, and remaining capacity
    weighted_score = (fit_score * fit_score_weight + 
                      -np.abs(utilization_factor) * utilization_weight + 
                      norm_remain_cap * remaining_capacity_weight)
    
    # Introduce tie-breakers based on bin index and randomness
    num_bins = len(bins_remain_cap)
    tie_breaker_index = (1 - np.arange(num_bins) / num_bins) * tie_breaker_index_weight
    tie_breaker_random = np.random.rand(num_bins) * tie_breaker_random_weight
    
    # Priority score is the sum of weighted score and tie-breakers
    priority = weighted_score + tie_breaker_index + tie_breaker_random
    
    # Ensure bins that cannot fit the item have the lowest priority
    priority = np.where(bins_remain_cap >= item, priority, -np.inf)
    
    return priority
```
