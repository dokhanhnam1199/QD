```python
import numpy as np

epsilon = 1e-6  # small value to avoid division by zero
tie_breaker_coef = 1e-3  # coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that balances utilization factor, remaining capacity, 
    and a novel tie-breaker based on the bin's relative remaining capacity.
    """
    # Calculate the utilization factor after placing the item in each bin
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate a weighted score combining utilization factor and remaining capacity
    score = np.where(bins_remain_cap >= item, -0.5 * np.abs(utilization_factor) + 0.5 * (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)
    
    # Introduce a novel tie-breaker that favors bins with remaining capacity closer to the item size
    tie_breaker = np.where(bins_remain_cap >= item, -np.abs(bins_remain_cap - item), 0)
    
    # Combine the score and tie-breaker
    priority = score + tie_breaker_coef * tie_breaker
    
    # Add a secondary tie-breaker based on bin index to ensure a deterministic order
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef ** 2)
    
    return priority
```
