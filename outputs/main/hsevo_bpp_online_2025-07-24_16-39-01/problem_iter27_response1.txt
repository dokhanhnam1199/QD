```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that combines multiple factors for effective bin selection.
    """
    # Calculate the utilization factor after placing the item in each bin
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the remaining capacity factor, normalized to be between 0 and 1
    remaining_capacity_factor = bins_remain_cap / (item + epsilon)
    
    # Priority score for bins that can fit the item, combining utilization factor and remaining capacity factor
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) + remaining_capacity_factor, -np.inf)
    
    # Introduce a tie-breaker that favors bins with lower indices (older bins), using a logarithmic scale
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Further differentiate bins with very similar priorities by considering their original capacity (assuming all bins have the same capacity)
    # This step is skipped as it requires knowing the original capacity, but it's a potential enhancement
    
    return priority
```
