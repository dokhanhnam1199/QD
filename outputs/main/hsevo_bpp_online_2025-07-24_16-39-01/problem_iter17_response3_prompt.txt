{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\n    \"\"\"\n    Enhanced prioritization function combining multiple factors for online Bin Packing Problem.\n    \n    This function calculates a priority score for each bin based on how well it can accommodate the item,\n    considering both the bin's remaining capacity and its relative utilization. It also incorporates a \n    tie-breaker based on bin index to favor newer bins.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity\n    # Lower difference indicates a better fit\n    fit_score = np.abs(bins_remain_cap - item)\n    \n    # Calculate a utilization score; bins with lower remaining capacity (higher utilization) are preferred\n    utilization_score = bins_remain_cap\n    \n    # Priority score for bins that can fit the item, using a combination of fit score and utilization score\n    priority = np.where(bins_remain_cap >= item, -(fit_score / np.maximum(bins_remain_cap, epsilon)) + utilization_score / np.maximum(bins_remain_cap, epsilon), -np.inf)\n    \n    # Incorporate a tie-breaker based on bin index to favor bins with lower indices (older bins)\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Normalize the priority scores to ensure they are on a comparable scale\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:  # Check if there are any bins that can fit the item\n        priority = np.where(priority != -np.inf, priority - max_priority, -np.inf)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\nepsilon = 1e-6  # A small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for the tie-breaker\n\n    \"\"\"\n    An advanced prioritization function that combines multiple factors for online Bin Packing Problem.\n    \n    It considers not just the utilization factor and remaining capacity but also the relative size of the item to the bin capacity.\n    \"\"\"\n    # Calculate the relative size of the item to the bin's remaining capacity\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate a 'fit score' that rewards bins where the item fits well (i.e., fills a significant portion of the bin)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score is a combination of the fit score and a penalty for bins that are too full or too empty\n    priority = np.where(bins_remain_cap >= item, fit_score + np.log(bins_remain_cap + epsilon) * 0.1, -np.inf)\n    \n    # Add a tie-breaker based on the bin index to ensure a consistent ordering when priorities are equal\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) and the worst heuristic (20th), we see that both use a combination of factors like utilization and remaining capacity, but the best heuristic uses a more straightforward tie-breaker based on bin index. Comparing the 2nd and 19th, we notice similar patterns. The top heuristics tend to have simpler, more effective tie-breakers. Comparing the 1st and 2nd, we see identical implementations, suggesting that the top-performing heuristics share common characteristics. Overall, effective heuristics balance multiple factors and use simple, effective tie-breakers.\n- \nTo redesign 'Current self-reflection', let's analyze the given information.\n\n### Analysis\nThe 'Current self-reflection' focuses on balancing multiple factors and using simple tie-breakers. However, 'Ineffective self-reflection' provides various strategies that can be used to improve it.\n\n### Redefining 'Current self-reflection'\nHere's a redefined version in 4 bullet points:\n\n* **Keywords**: Prioritization, Tie-breaking, Multiple factors, Balance\n* **Advice**: Combine multiple relevant factors (e.g., utilization, remaining capacity) and use effective tie-breakers (e.g., bin index, random noise) with smaller coefficients to achieve a balance.\n* **Avoid**: Unnecessary complexity, division by zero, and ineffective prioritization strategies.\n* **Explanation**: By considering multiple factors and using effective tie-breakers, we can design better heuristics that balance prioritization and randomness, leading to improved performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}