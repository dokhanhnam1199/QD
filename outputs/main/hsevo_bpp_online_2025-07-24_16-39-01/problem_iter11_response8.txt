```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and remaining capacity with tie-breaking using bin index.
    """
    # Calculate priority score for bins that can fit the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    # Prioritize bins that are just enough for the item
    priority = valid_bins * (-(bins_remain_cap - item) + 0.1 * bins_remain_cap.max() - 0.1 * bins_remain_cap)
    
    # Add a small factor considering the bin index to break ties
    num_bins = len(bins_remain_cap)
    priority += valid_bins * np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3
    
    # Set priority to negative infinity for bins that cannot fit the item
    priority = np.where(bins_remain_cap >= item, priority, -np.inf)
    
    return priority
```
