{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines fit score, remaining capacity, and a tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Fit score: prioritize bins where the item fits well\n    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition)), -np.inf)\n    \n    # Secondary prioritization based on remaining capacity\n    secondary_priority = np.where(bins_remain_cap >= item, -bins_remain_cap / np.max(bins_remain_cap), 0)\n    \n    # Tie-breaker based on bin index\n    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3\n    \n    # Combine fit score, secondary priority, and tie-breaker\n    priority_scores = fit_score + secondary_priority + tie_breaker\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines utilization factor, remaining capacity, and bin index for prioritization.\n    \"\"\"\n    # Calculate utilization factor after adding the item\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-8)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -(np.abs(utilization_factor - 0.5) + 0.1 * (1 - bins_remain_cap / np.max(bins_remain_cap))), -np.inf)\n    \n    # Add a tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * np.log(num_bins / (1 + np.arange(num_bins))) * 1e-6\n    \n    # Introduce a small random noise for further tie-breaking\n    np.random.seed(int(item * 1e6))  \n    priority += (bins_remain_cap >= item) * np.random.uniform(-1e-8, 1e-8, size=num_bins)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic combines utilization factor and remaining capacity with a simple tie-breaker, while the worst relies on a more complex combination of remaining capacity, utilization factor, and a sophisticated tie-breaker. \nComparing (1st) vs (2nd), we see that they are identical, suggesting that the top two heuristics are the same. \n(3rd) vs (4th) also shows identical code, indicating a pattern of duplicate top heuristics. \nComparing (5th) vs (6th), we observe that both use fit score and tie-breaker, but (6th) adds random noise. \n(19th) vs (20th) shows that both use a combination of factors, but (20th) has a more complex tie-breaker. \nOverall, top heuristics tend to use a balanced combination of utilization factor, remaining capacity, and simple tie-breakers, while worse heuristics tend to introduce more complexity or randomness.\n- \nTo design better heuristics, let's analyze the given information. Here are the key takeaways:\n\n* **Keywords**: \n    + Utilization\n    + Remaining capacity\n    + Tie-breaking\n    + Simplicity\n* **Advice**: \n    + Combine multiple relevant factors\n    + Use effective tie-breakers\n    + Balance prioritization and randomness\n* **Avoid**: \n    + Unnecessary complexity\n    + Excessive randomness\n    + Redundant components\n* **Explanation**: By focusing on key factors, using effective tie-breakers, and maintaining simplicity, we can design better heuristics that balance prioritization and randomness, ultimately leading to improved performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}