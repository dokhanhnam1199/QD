{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo redesign 'Current self-reflection', let's analyze the given information.\n\n* The task is to come up with ideas to design better heuristics by avoiding 'Ineffective self-reflection' and redefining 'Current self-reflection'.\n\nUpon examining 'Ineffective self-reflection', common themes emerge:\n- Prioritization strategies and effective tie-breaking are crucial.\n- Combining multiple relevant factors is key.\n- Simplicity is preferred over unnecessary complexity.\n\nHere's the redefined 'Current self-reflection' in 4 bullet points:\n\n* **Keywords**: Prioritization, Multiple Factors, Simplicity, Tie-breaking.\n* **Advice**: Combine key factors like utilization and remaining capacity with simple, effective tie-breakers.\n* **Avoid**: Unnecessary complexity, excessive randomness, and redundant components.\n* **Explanation**: By focusing on prioritization strategies, combining multiple relevant factors, and maintaining simplicity, we can design better heuristics that are both effective and efficient.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}