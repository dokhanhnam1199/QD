```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines prioritizing bins with just enough capacity and a robust tie-breaking strategy.
    Utilizes a mix of remaining capacity and random noise for effective tie-breaking.
    """
    # Prioritize bins that have just enough capacity for the item
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Add a factor considering the proportion of remaining capacity and a small random noise for tie-breaking
    num_bins = len(bins_remain_cap)
    priority_scores += 0.1 * np.where(bins_remain_cap >= item, (1 - bins_remain_cap), 0) + np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3 + np.random.rand(*priority_scores.shape) * 1e-6
    
    return priority_scores
```
