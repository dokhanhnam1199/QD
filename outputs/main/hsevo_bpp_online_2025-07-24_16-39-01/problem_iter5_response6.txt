```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to bins based on remaining capacity and 'fullness'.
    Prioritizes bins that fit the item tightly, with a small random noise to break ties.
    """
    # Calculate priority scores: negative remaining capacity after adding the item
    mask = bins_remain_cap >= item  # Mask for bins that can accommodate the item
    priority_scores = np.where(mask, -(bins_remain_cap - item), -np.inf)
    
    # Add a small random noise to break ties, only for valid bins
    noise = np.random.uniform(0, 1e-6, size=np.sum(mask))
    priority_scores[mask] += noise
    
    return priority_scores
```
