```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced priority function that combines the remaining capacity, utilization factor, 
    and a sophisticated tie-breaker for online Bin Packing Problem.
    
    Parameters:
    - item: The size of the item to be packed.
    - bins_remain_cap: An array of the remaining capacities of the bins.
    
    Returns:
    - priority: An array of priority scores for each bin.
    """
    epsilon = 1e-6  # Small value to avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker
    
    # Calculate the utilization factor after packing the item, avoiding division by zero
    new_utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap - item + epsilon, epsilon)
    
    # Priority score for bins that can fit the item, based on the new utilization factor after packing
    priority = np.where(bins_remain_cap >= item, new_utilization_factor, -np.inf)
    
    # Introduce a sophisticated tie-breaker that considers both bin fullness and index
    num_bins = len(bins_remain_cap)
    bin_fullness = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + epsilon))  # Normalize bin fullness
    tie_breaker = (bins_remain_cap >= item) * ((bin_fullness * 0.7) + (np.log(num_bins / (1 + np.arange(num_bins))) / np.log(num_bins) * 0.3))
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker * tie_breaker_coef
    
    return priority
```
