```python
import numpy as np

epsilon = 1e-6  # A small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced priority function that combines multiple factors for effective bin selection in online Bin Packing Problem.
    
    It considers the remaining capacity, utilization factor, and a dynamic tie-breaker based on bin index and randomness.
    """
    # Calculate utilization factor, focusing on how much the bin will be utilized if the item is placed in it
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # First component of priority: Bins that can fit the item get a score based on their utilization factor
    priority = np.where(bins_remain_cap >= item, -utilization_factor, -np.inf)
    
    # Second component: Add a tie-breaker that combines bin index (to avoid always filling the first bins) and randomness (for exploration)
    num_bins = len(bins_remain_cap)
    tie_breaker = np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, tie_breaker_coef, size=num_bins)
    priority += (bins_remain_cap >= item) * tie_breaker
    
    # Normalize the priority scores to ensure they are on the same scale and to enhance numerical stability
    max_priority = np.max(priority)
    if max_priority != -np.inf:  # Check if there are bins that can fit the item
        priority = np.where(priority != -np.inf, priority - max_priority, -np.inf)
    
    return priority
```
