```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a more sophisticated heuristic that combines multiple factors for effective prioritization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # For bins that have enough capacity, calculate the priority score
    # We want to prioritize bins that have just enough capacity for the item (to maximize utilization)
    # and also consider the absolute remaining capacity (to avoid leaving too much empty space)
    priority_scores = np.where(bins_remain_cap >= item, 
                               -(np.abs(remaining_cap_after_addition)) +  # prioritize bins with just enough capacity
                               0.01 * bins_remain_cap,  # slightly prioritize bins with more remaining capacity
                               -np.inf)  # bins that can't fit the item get -inf priority
    
    return priority_scores
```
