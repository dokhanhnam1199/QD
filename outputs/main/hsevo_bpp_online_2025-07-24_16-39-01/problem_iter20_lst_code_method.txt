{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 6.092855021862127e-07, tie_breaker_coef: float = 0.054746423211797395) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 6.092855021862127e-07, tie_breaker_coef: float = 0.054746423211797395) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Heuristic combining fit score, utilization, and bin index tie-breaker.\n    \"\"\"\n    epsilon = 1e-6  # Avoid division by zero\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Fit score and utilization score\n    fit_score = np.abs(bins_remain_cap - item)\n    utilization_score = bins_remain_cap\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -(fit_score / np.maximum(bins_remain_cap, epsilon)) + utilization_score / np.maximum(bins_remain_cap, epsilon), -np.inf)\n    \n    # Incorporate a tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Normalize priority scores\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:  \n        priority = np.where(priority != -np.inf, priority - max_priority, -np.inf)\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization and remaining capacity with a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # Calculate remaining capacity and utilization after adding the item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    utilization_after_addition = 1.0 - remaining_after_addition / bins_remain_cap[valid_bins]\n    \n    # Priority score combines negative remaining capacity and utilization\n    priority_scores_valid = -remaining_after_addition + utilization_after_addition\n    \n    # Create array to store priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    # Add a simple tie-breaker based on bin index with a smaller coefficient\n    num_bins = len(bins_remain_cap)\n    tie_breaker_coef = 1e-3\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef, \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and a simple tie-breaker for prioritization.\n    \"\"\"\n    # Calculate utilization factor after adding the item, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-8)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 1e-6)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization and remaining capacity with a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # Calculate remaining capacity and utilization after adding the item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    utilization_after_addition = 1.0 - remaining_after_addition / bins_remain_cap[valid_bins]\n    \n    # Priority score combines negative remaining capacity and utilization\n    priority_scores_valid = -remaining_after_addition + utilization_after_addition\n    \n    # Create array to store priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    # Add a simple tie-breaker based on bin index with a smaller coefficient\n    num_bins = len(bins_remain_cap)\n    tie_breaker_coef = 1e-3\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef, \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit score, remaining capacity, and bin index for effective prioritization.\n    \"\"\"\n    # Calculate relative size and fit score\n    epsilon = 1e-6  # Avoid division by zero\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n\n    # Calculate priority score\n    max_capacity = np.max(bins_remain_cap) + item  # Assuming all bins have the same max capacity\n    priority = np.where(bins_remain_cap >= item, \n                        fit_score + 0.1 * (max_capacity - bins_remain_cap), \n                        -np.inf)\n\n    # Add a simple tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority = np.where(priority != -np.inf, priority + np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3, -np.inf)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit score and a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Fit score: prioritize bins where the item fits well\n    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition)), -np.inf)\n    \n    # Simple tie-breaker based on bin index\n    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3\n    \n    # Combine fit score and tie-breaker\n    priority_scores = fit_score + tie_breaker\n    \n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and utilization with a simple tie-breaker.\n    Prioritizes bins that fit the item, have high utilization, and lower index.\n    \"\"\"\n    # Filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # Calculate remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    \n    # Calculate utilization after adding the item\n    bin_utilization_after_addition = 1 - (remaining_after_addition / bins_remain_cap[valid_bins])\n    \n    # Priority score combines negative remaining capacity and utilization\n    priority_scores_valid = -remaining_after_addition + bin_utilization_after_addition\n    \n    # Create array to store priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + 0.01 * np.log(num_bins / (1 + np.arange(num_bins))), \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit score and a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Fit score: prioritize bins where the item fits well\n    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition)), -np.inf)\n    \n    # Simple tie-breaker based on bin index\n    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3\n    \n    # Combine fit score and tie-breaker\n    priority_scores = fit_score + tie_breaker\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and a simple tie-breaker for effective prioritization.\n    \"\"\"\n    epsilon = 1e-6  # Avoid division by zero\n    # Calculate a utilization factor that rewards bins with just enough capacity\n    utilization_factor = np.exp(-((bins_remain_cap - item) / (item + epsilon)) ** 2)\n    \n    # Assign a high priority score to bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, utilization_factor, -np.inf)\n    \n    # Introduce a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    tie_breaker = (bins_remain_cap >= item) * np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3\n    \n    # Combine the priority score with the tie-breaker\n    priority += tie_breaker\n    \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and a simple tie-breaker for effective prioritization.\n    \"\"\"\n    epsilon = 1e-6  # Avoid division by zero\n    # Calculate a utilization factor that rewards bins with just enough capacity\n    utilization_factor = np.exp(-((bins_remain_cap - item) / (item + epsilon)) ** 2)\n    \n    # Assign a high priority score to bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, utilization_factor, -np.inf)\n    \n    # Introduce a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    tie_breaker = (bins_remain_cap >= item) * np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3\n    \n    # Combine the priority score with the tie-breaker\n    priority += tie_breaker\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\neps = 1e-6  # small value to avoid division by zero\ntie_breaker_coef = 0.1  # coefficient for tie-breaker\nrandom_noise_max = 1e-3  # maximum random noise\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity with a simple tie-breaker and logarithmic bin index.\n    Uses a more straightforward utilization factor calculation and adds random noise for tie-breaking.\n    \"\"\"\n    # Calculate utilization factor\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, eps)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient and random noise\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n                                              np.random.uniform(0, random_noise_max, size=num_bins))\n    \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\neps = 1e-6  # small value to avoid division by zero\ntie_breaker_coef = 0.1  # coefficient for tie-breaker\nrandom_noise_max = 1e-3  # maximum random noise\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity with a simple tie-breaker and logarithmic bin index.\n    Uses a more straightforward utilization factor calculation and adds random noise for tie-breaking.\n    \"\"\"\n    # Calculate utilization factor\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, eps)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient and random noise\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n                                              np.random.uniform(0, random_noise_max, size=num_bins))\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for the tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit score and remaining capacity score for prioritization with an enhanced tie-breaker.\n    \"\"\"\n    # Calculate fit score and remaining capacity score\n    fit_score = 1 - (item / np.maximum(bins_remain_cap, epsilon))\n    remain_cap_score = bins_remain_cap / (item + epsilon)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -fit_score + remain_cap_score * 0.1, -np.inf)\n    \n    # Enhanced tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for the tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced prioritization function that combines multiple factors and uses an effective tie-breaker.\n    \"\"\"\n    # Calculate the utilization factor after placing the item, avoiding division by zero\n    new_utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the relative remaining capacity after placing the item\n    relative_remain_cap = (bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    \n    # Priority score for bins that can fit the item, combining utilization factor and relative remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(new_utilization_factor) + relative_remain_cap, -np.inf)\n    \n    # Introduce a tie-breaker based on a combination of bin index and a random noise for bins that can fit the item\n    num_bins = len(bins_remain_cap)\n    bin_index_factor = np.log(num_bins / (1 + np.arange(num_bins)))\n    random_noise = np.random.uniform(0, 1, size=num_bins) * tie_breaker_coef\n    priority += (bins_remain_cap >= item) * (bin_index_factor + random_noise)\n    \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced prioritization function that combines multiple factors for online Bin Packing Problem.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after placing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Assign high priority to bins that can fit the item and have a remaining fraction close to zero\n    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)\n    \n    # Introduce a secondary prioritization based on the remaining capacity\n    priority += (bins_remain_cap >= item) * (-bins_remain_cap / np.max(bins_remain_cap))\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Add a small random noise to the priority for further tie-breaking\n    np.random.seed(0)  # For reproducibility\n    priority += (bins_remain_cap >= item) * (np.random.rand(num_bins) * tie_breaker_coef * 0.1)\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced prioritization function that combines multiple factors for online Bin Packing Problem.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after placing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Assign high priority to bins that can fit the item and have a remaining fraction close to zero\n    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)\n    \n    # Introduce a secondary prioritization based on the remaining capacity\n    priority += (bins_remain_cap >= item) * (-bins_remain_cap / np.max(bins_remain_cap))\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Add a small random noise to the priority for further tie-breaking\n    np.random.seed(0)  # For reproducibility\n    priority += (bins_remain_cap >= item) * (np.random.rand(num_bins) * tie_breaker_coef * 0.1)\n    \n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Improved priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after placing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of remaining fraction and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)\n    \n    # Add a tie-breaker based on the bin's remaining capacity and index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (\n        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n        bins_remain_cap / np.max(bins_remain_cap) * tie_breaker_coef * 0.1\n    )\n    \n    # Introduce a small random noise for further tie-breaking\n    np.random.seed(int(item * 1e6))  # Seed based on item size for reproducibility\n    priority += (bins_remain_cap >= item) * np.random.uniform(-tie_breaker_coef * 1e-2, tie_breaker_coef * 1e-2, size=num_bins)\n    \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Improved priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after placing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of remaining fraction and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)\n    \n    # Add a tie-breaker based on the bin's remaining capacity and index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (\n        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n        bins_remain_cap / np.max(bins_remain_cap) * tie_breaker_coef * 0.1\n    )\n    \n    # Introduce a small random noise for further tie-breaking\n    np.random.seed(int(item * 1e6))  # Seed based on item size for reproducibility\n    priority += (bins_remain_cap >= item) * np.random.uniform(-tie_breaker_coef * 1e-2, tie_breaker_coef * 1e-2, size=num_bins)\n    \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}