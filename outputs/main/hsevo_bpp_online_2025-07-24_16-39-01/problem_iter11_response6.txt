```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines prioritizing bins with just enough capacity and a robust tie-breaking strategy.
    Utilizes a simple utilization factor and random noise for tie-breaking.
    """
    # Prioritize bins that have just enough capacity for the item
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Calculate a utilization factor based on the remaining capacity
    max_capacity = np.max(bins_remain_cap) + item  # Assuming all bins have the same max capacity
    utilization_factor = (max_capacity - bins_remain_cap - item) / max_capacity
    
    # Combine the priority score with the utilization factor
    priority_scores += 0.1 * np.where(bins_remain_cap >= item, utilization_factor, 0)
    
    # Add random noise for tie-breaking
    priority_scores += np.random.rand(*priority_scores.shape) * 1e-6
    
    return priority_scores
```
