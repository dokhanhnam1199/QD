```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Create a mask to identify bins that have enough capacity for the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # For bins with enough capacity, the priority is inversely proportional to the remaining capacity after addition
    # This encourages packing items tightly into bins
    priority_valid_bins = 1 / (remaining_cap_after_addition + 1e-6)  # Add a small value to avoid division by zero
    
    # For bins without enough capacity, the priority is negative infinity (or a very low number in practice)
    # This effectively prevents the item from being assigned to these bins
    priority_invalid_bins = -np.inf * np.ones_like(priority_valid_bins)
    
    # Combine the priorities for valid and invalid bins based on the mask
    priority = np.where(valid_bins_mask, priority_valid_bins, priority_invalid_bins)
    
    return priority
```
