```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Heuristics combining utilization factors and a simple tie-breaker for effective bin selection.
    """
    epsilon = 1e-6  # Avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    
    # Calculate post-utilization and pre-utilization factors
    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    pre_utilization = bins_remain_cap / np.maximum(bins_remain_cap + item, epsilon)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(post_utilization) + 0.5 * pre_utilization, -np.inf)
    
    # Add a simple tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
```
