```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Heuristics combining utilization factor, relative remaining capacity, and effective tie-breaker.
    """
    epsilon = 1e-6  # Avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    
    # Calculate new utilization factor and relative remaining capacity
    new_utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_remain_cap = (bins_remain_cap - item) / (bins_remain_cap + epsilon)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(new_utilization_factor) + relative_remain_cap, -np.inf)
    
    # Effective tie-breaker based on bin index and small random noise
    num_bins = len(bins_remain_cap)
    bin_index_factor = np.log(num_bins / (1 + np.arange(num_bins)))
    random_noise = np.random.uniform(0, 1, size=num_bins) * tie_breaker_coef
    priority += (bins_remain_cap >= item) * (bin_index_factor + random_noise)
    
    return priority
```
