```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that combines multiple factors for online Bin Packing Problem.
    """
    # Calculate the 'Best Fit' factor: the smaller the remaining capacity after packing, the better
    best_fit_factor = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    
    # Calculate a utilization factor that rewards bins that are more full
    utilization_factor = bins_remain_cap / (item + bins_remain_cap)
    
    # Priority score is a combination of best fit and utilization factor, with a penalty for bins that can't fit the item
    priority = np.where(bins_remain_cap >= item, -best_fit_factor + utilization_factor, -np.inf)
    
    # Add a tie-breaker based on bin index to ensure a deterministic order when priorities are equal
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
```
