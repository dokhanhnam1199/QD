```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines effective prioritization of bins with just enough capacity and robust tie-breaking.
    """
    # Check if the item can fit into the bin
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Prioritize bins that are just enough for the item, with a simpler formula
    priority = valid_bins * (-(bins_remain_cap - item))
    
    # Add a small random noise and consider bin index for tie-breaking
    num_bins = len(bins_remain_cap)
    priority += valid_bins * (np.log(num_bins / (1 + np.arange(num_bins))) + np.random.rand(*priority.shape) * 1e-6)
    
    return priority
```
