```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                utilization_weight: float = 0.43, fit_score_weight: float = 0.27, 
                remaining_capacity_weight: float = 0.30, tie_breaker_log_weight: float = 0.65, 
                epsilon: float = 1e-6) -> np.ndarray:
    """
    Advanced priority function incorporating utilization, fit score, remaining capacity, and a sophisticated tie-breaker.
    """
    # Normalize remaining capacity for better comparison
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate a fit score that rewards bins with just enough capacity for the item
    fit_score = -np.abs(bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate weighted factors for bins that can fit the item
    weighted_utilization = np.where(bins_remain_cap >= item, 
                                     (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon) * utilization_weight, 
                                     -np.inf)
    weighted_fit_score = np.where(bins_remain_cap >= item, fit_score * fit_score_weight, -np.inf)
    weighted_remaining_capacity = np.where(bins_remain_cap >= item, norm_remain_cap * remaining_capacity_weight, -np.inf)
    
    # Priority score combining multiple weighted factors
    priority = weighted_utilization + weighted_fit_score + weighted_remaining_capacity
    
    # Introduce a nuanced tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_log_weight)
    priority += tie_breaker
    
    return priority
```
