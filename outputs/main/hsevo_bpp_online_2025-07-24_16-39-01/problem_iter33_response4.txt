```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                fit_score_weight: float = 0.3, utilization_weight: float = 0.4, 
                remaining_capacity_weight: float = 0.3, tie_breaker_log_weight: float = 0.2, 
                epsilon: float = 1e-6) -> np.ndarray:
    """
    Enhanced priority function combining fit score, utilization factor, and remaining capacity with a sophisticated tie-breaker.
    """
    # Fit score: how well the item fits into the bin
    fit_score = 1 - np.abs(bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, fit_score, -np.inf)
    
    # Utilization factor: how much of the bin will be used after placing the item
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Normalize remaining capacity to enhance comparison
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate priority score as a weighted sum of fit score, utilization factor, and remaining capacity
    priority = (fit_score * fit_score_weight + 
                -np.abs(utilization_factor) * utilization_weight + 
                norm_remain_cap * remaining_capacity_weight)
    
    # Introduce a nuanced tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_log_weight)
    priority += tie_breaker
    
    return priority
```
