```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a heuristic that combines the remaining capacity 
    and the utilization of the bin to determine the priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the initial capacity of the bins (assuming it's the same for all bins)
    # Here, we assume the initial capacity is the maximum remaining capacity seen so far
    max_remain_cap = np.max(bins_remain_cap)
    
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item
    # and also have a high utilization (i.e., low remaining capacity)
    priority_scores = np.where(
        bins_remain_cap >= item, 
        # Combine the negative of the remaining capacity after adding the item 
        # and the utilization of the bin (1 - remaining capacity / initial capacity)
        -(bins_remain_cap - item) + (1 - bins_remain_cap / max_remain_cap), 
        -np.inf  # If the item doesn't fit, the priority score is negative infinity
    )
    
    return priority_scores
```
