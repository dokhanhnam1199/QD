```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that balances utilization factor, remaining capacity, and a novel tie-breaker.
    """
    # Calculate a normalized utilization factor, considering both the item size and bin remaining capacity
    utilization_factor = 1 - (item / np.maximum(bins_remain_cap, epsilon))
    
    # Priority score for bins that can fit the item, based on a combination of utilization factor and a non-linear remaining capacity term
    priority = np.where(bins_remain_cap >= item, utilization_factor * (1 - np.exp(-(bins_remain_cap - item))), -np.inf)
    
    # Introduce a more nuanced tie-breaker that considers both bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + (bins_remain_cap / (1 + np.sum(bins_remain_cap))) * tie_breaker_coef)
    
    # Combine the priority score with the tie-breaker, ensuring that the tie-breaker does not dominate the priority score
    priority += tie_breaker
    
    return priority
```
