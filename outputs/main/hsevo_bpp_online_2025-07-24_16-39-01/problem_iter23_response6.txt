```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines post-utilization factor and remaining capacity with a simple tie-breaker.
    """
    # Calculate post-utilization factor, avoiding division by zero
    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Priority score for bins that can fit the item, using a combination of post-utilization and remaining capacity
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(post_utilization - 0.5) + 0.5 - (bins_remain_cap - item) / (1 + bins_remain_cap.max()), 
                        -np.inf)
    
    # Add a tie-breaker based on bin index with a small coefficient
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
```
