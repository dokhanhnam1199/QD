```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.
    """
    epsilon = 1e-6  # Small value to avoid division by zero
    utilization_factor_weight = 0.98  # Weight for utilization factor
    fit_score_weight = 0.45  # Weight for fit score
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, 
                        -np.inf)
    
    # Introduce a tie-breaker that considers both bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * (
        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + 
        bins_remain_cap / (1 + item) * tie_breaker_coef * 0.1
    )
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
