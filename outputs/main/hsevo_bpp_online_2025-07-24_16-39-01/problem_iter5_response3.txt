```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin.
    
    Combines the First-Fit decreasing heuristic with a tie-breaker based on bin index.
    """
    # Calculate priority scores based on remaining capacity
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Add a small random noise to break ties
    num_bins = len(bins_remain_cap)
    priority_scores = np.where(priority_scores != -np.inf, 
                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))), 
                               -np.inf)
    
    return priority_scores
```
