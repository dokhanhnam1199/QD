```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines effective prioritization with robust tie-breaking.
    Prioritizes bins with just enough capacity and uses a balanced tie-breaking strategy.
    """
    # Prioritize bins with just enough capacity using a utilization factor
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-9)  
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)
    
    # Add a small factor considering the bin index for tie-breaking
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3 + np.random.rand(*priority.shape) * 1e-6)
    
    return priority
```
