```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that combines multiple factors for effective bin selection.
    """
    # Calculate the 'fit' factor: how well the item fits into the bin
    fit_factor = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)
    fit_factor = np.where(bins_remain_cap >= item, fit_factor, -np.inf)  # Penalize bins that can't fit the item
    
    # Calculate the 'utilization' factor: how full the bin will be after adding the item
    utilization_factor = (bins_remain_cap - item) / (bins_remain_cap + epsilon)
    
    # Combine fit and utilization factors into a priority score
    priority = fit_factor + utilization_factor
    
    # Add a tie-breaker based on bin index to favor newer bins
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
```
