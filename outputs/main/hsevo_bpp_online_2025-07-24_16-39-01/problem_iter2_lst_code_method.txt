{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements the First-Fit decreasing heuristic with a twist.\n    It prioritizes bins that have just enough capacity for the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # So, we use the negative of the remaining capacity after adding the item\n    # If the item doesn't fit, the priority score is negative infinity\n    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # To avoid division by zero and make the score more meaningful, we can add a small value to the denominator\n    # However, in this case, it's not necessary because we're not using the remaining capacity as a denominator\n    \n    return priority_scores\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # If the item cannot fit in a bin, set the priority to negative infinity\n    priority = np.where(remaining_capacity_after_addition >= 0, \n                        # Prioritize bins with less remaining capacity after addition\n                        -remaining_capacity_after_addition, \n                        # Use negative infinity for bins that are too small\n                        -np.inf)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the item can fit into the bin\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Give higher priority to bins with less remaining capacity that can still fit the item\n    priority = valid_bins * (1 - bins_remain_cap / np.max(bins_remain_cap))\n    \n    # Add a small random noise to break ties\n    priority += np.random.rand(*priority.shape) * 1e-6\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with remaining capacity closest to the item size will have the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score as the negative of the difference (lower difference means higher priority)\n    # Add a small value to avoid division by zero when bins_remain_cap equals item\n    priority = -diff + 1e-6\n    \n    # Set the priority to negative infinity for bins that cannot accommodate the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements the First-Fit-Decreasing heuristic.\n    It prioritizes bins that have just enough capacity for the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # The score is high if the bin has just enough capacity for the item\n    # and low if the bin is too small or too large for the item\n    priority_scores = np.where(bins_remain_cap >= item, \n                               bins_remain_cap - item, \n                               np.inf)\n    # Invert the scores so that smaller values (i.e., bins that are a good fit) have higher priority\n    priority_scores = 1 / (1 + priority_scores)\n    \n    return priority_scores\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with a remaining capacity closest to the item size gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score as the negative of the difference (lower difference means higher priority)\n    # Add a small value to the denominator to avoid division by zero\n    priority = -diff / (bins_remain_cap + 1e-6)\n    \n    # Set the priority score to negative infinity for bins that cannot accommodate the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements the First-Fit decreasing heuristic with a twist. \n    It gives higher priority to bins that have enough capacity for the item \n    and are most full. If a bin does not have enough capacity, its priority is \n    set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # Priority is high when the bin has just enough capacity for the item\n    # and is most full, i.e., has the least remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                        # The more full the bin is, the higher the priority\n                        1 / (bins_remain_cap + 1e-6), \n                        # If the bin does not have enough capacity, set priority to negative infinity\n                        -np.inf)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    The bin with the least remaining capacity that can still fit the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # If the item cannot fit in the bin, the priority score is -inf\n    # Otherwise, the priority score is the negative of the remaining capacity after adding the item\n    # This way, the bin with the least remaining capacity that can still fit the item gets the highest priority\n    priority_scores = np.where(bins_remain_cap >= item, - (bins_remain_cap - item), -np.inf)\n    \n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with remaining capacity closest to the item size gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Assign a very low priority to bins that cannot accommodate the item\n    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)\n    \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    The priority is calculated based on the remaining capacity of each bin. \n    The bin with the least remaining capacity that can still fit the item gets the highest priority.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # If the item can fit in the bin, the priority score is the negative of the remaining capacity\n    # If the item cannot fit in the bin, the priority score is negative infinity\n    priority_scores = np.where(bins_remain_cap >= item, -bins_remain_cap, -np.inf)\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins that have just enough \n    remaining capacity to fit the item. It discourages bins that would be left \n    with a lot of remaining capacity after the item is added, as well as bins \n    that are too small to fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to avoid division by zero and to ignore bins that are too small\n    mask = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that are too small\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n    \n    # For bins that can fit the item, calculate the priority score\n    # The score is higher when the remaining capacity after adding the item is smaller\n    priority_scores[mask] = 1 - (bins_remain_cap[mask] - item) / bins_remain_cap[mask]\n    \n    return priority_scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins that have just enough \n    remaining capacity to fit the item. It discourages bins that would be left \n    with a lot of remaining capacity after the item is added, as well as bins \n    that are too small to fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to avoid division by zero and to ignore bins that are too small\n    mask = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that are too small\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n    \n    # For bins that can fit the item, calculate the priority score\n    # The score is higher when the remaining capacity after adding the item is smaller\n    priority_scores[mask] = 1 - (bins_remain_cap[mask] - item) / bins_remain_cap[mask]\n    \n    return priority_scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins that have just enough \n    remaining capacity to fit the item. It discourages bins that would be left \n    with a lot of remaining capacity after the item is added, as well as bins \n    that are too small to fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to avoid division by zero and to ignore bins that are too small\n    mask = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that are too small\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n    \n    # For bins that can fit the item, calculate the priority score\n    # The score is higher when the remaining capacity after adding the item is smaller\n    priority_scores[mask] = 1 - (bins_remain_cap[mask] - item) / bins_remain_cap[mask]\n    \n    return priority_scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins that have just enough \n    remaining capacity to fit the item. It discourages bins that would be left \n    with a lot of remaining capacity after the item is added, as well as bins \n    that are too small to fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to avoid division by zero and to ignore bins that are too small\n    mask = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that are too small\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n    \n    # For bins that can fit the item, calculate the priority score\n    # The score is higher when the remaining capacity after adding the item is smaller\n    priority_scores[mask] = 1 - (bins_remain_cap[mask] - item) / bins_remain_cap[mask]\n    \n    return priority_scores\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin based on the remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Create a mask to identify bins that have enough capacity for the item\n    valid_bins = remaining_capacity_after_addition >= 0\n    \n    # Assign a high priority to valid bins and a low priority to invalid bins\n    priority = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin based on \n    the remaining capacity of the bins and the size of the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity\n    # and the size of the item. A bin with a remaining capacity closest to the \n    # item size will have the highest priority score.\n    priority_scores = np.where(bins_remain_cap >= item, \n                               bins_remain_cap - item, \n                               -np.inf)\n    \n    # Normalize the priority scores to ensure they are in a comparable range.\n    # Here, we use a simple normalization by subtracting the minimum score and \n    # then dividing by the range of scores. However, since we're using -inf for \n    # bins that can't fit the item, this step is somewhat redundant but remains \n    # for potential future adjustments to the scoring system.\n    finite_scores = priority_scores[np.isfinite(priority_scores)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            normalized_scores = (priority_scores - min_score) / (max_score - min_score)\n        else:\n            normalized_scores = np.where(priority_scores == max_score, 1.0, 0.0)\n    else:\n        normalized_scores = np.zeros_like(priority_scores)\n    \n    # Softmax normalization to ensure the scores are positive and sum to 1.\n    # However, for simplicity and to maintain the relative order, we'll directly \n    # return the priority scores. To introduce softmax, uncomment the following.\n    # e_scores = np.exp(normalized_scores)\n    # return e_scores / np.sum(e_scores)\n    return normalized_scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin based on the remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Create a mask to identify bins that have enough capacity for the item\n    valid_bins = remaining_capacity_after_addition >= 0\n    \n    # Assign a high priority to valid bins and a low priority to invalid bins\n    priority = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin based on \n    the remaining capacity of the bins and the size of the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity\n    # and the size of the item. A bin with a remaining capacity closest to the \n    # item size will have the highest priority score.\n    priority_scores = np.where(bins_remain_cap >= item, \n                               bins_remain_cap - item, \n                               -np.inf)\n    \n    # Normalize the priority scores to ensure they are in a comparable range.\n    # Here, we use a simple normalization by subtracting the minimum score and \n    # then dividing by the range of scores. However, since we're using -inf for \n    # bins that can't fit the item, this step is somewhat redundant but remains \n    # for potential future adjustments to the scoring system.\n    finite_scores = priority_scores[np.isfinite(priority_scores)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            normalized_scores = (priority_scores - min_score) / (max_score - min_score)\n        else:\n            normalized_scores = np.where(priority_scores == max_score, 1.0, 0.0)\n    else:\n        normalized_scores = np.zeros_like(priority_scores)\n    \n    # Softmax normalization to ensure the scores are positive and sum to 1.\n    # However, for simplicity and to maintain the relative order, we'll directly \n    # return the priority scores. To introduce softmax, uncomment the following.\n    # e_scores = np.exp(normalized_scores)\n    # return e_scores / np.sum(e_scores)\n    return normalized_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin based on the remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Create a mask to identify bins that have enough capacity for the item\n    valid_bins = remaining_capacity_after_addition >= 0\n    \n    # Assign a high priority to valid bins and a low priority to invalid bins\n    priority = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin based on \n    the remaining capacity of the bins and the size of the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity\n    # and the size of the item. A bin with a remaining capacity closest to the \n    # item size will have the highest priority score.\n    priority_scores = np.where(bins_remain_cap >= item, \n                               bins_remain_cap - item, \n                               -np.inf)\n    \n    # Normalize the priority scores to ensure they are in a comparable range.\n    # Here, we use a simple normalization by subtracting the minimum score and \n    # then dividing by the range of scores. However, since we're using -inf for \n    # bins that can't fit the item, this step is somewhat redundant but remains \n    # for potential future adjustments to the scoring system.\n    finite_scores = priority_scores[np.isfinite(priority_scores)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            normalized_scores = (priority_scores - min_score) / (max_score - min_score)\n        else:\n            normalized_scores = np.where(priority_scores == max_score, 1.0, 0.0)\n    else:\n        normalized_scores = np.zeros_like(priority_scores)\n    \n    # Softmax normalization to ensure the scores are positive and sum to 1.\n    # However, for simplicity and to maintain the relative order, we'll directly \n    # return the priority scores. To introduce softmax, uncomment the following.\n    # e_scores = np.exp(normalized_scores)\n    # return e_scores / np.sum(e_scores)\n    return normalized_scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}