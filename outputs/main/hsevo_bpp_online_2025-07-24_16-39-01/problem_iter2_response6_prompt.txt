{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements the First-Fit decreasing heuristic with a twist. \n    It gives higher priority to bins that have enough capacity for the item \n    and are most full. If a bin does not have enough capacity, its priority is \n    set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # Priority is high when the bin has just enough capacity for the item\n    # and is most full, i.e., has the least remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                        # The more full the bin is, the higher the priority\n                        1 / (bins_remain_cap + 1e-6), \n                        # If the bin does not have enough capacity, set priority to negative infinity\n                        -np.inf)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on the remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Create a mask to identify bins that have enough capacity for the item\n    valid_bins = remaining_capacity_after_addition >= 0\n    \n    # Assign a high priority to valid bins and a low priority to invalid bins\n    priority = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we observe that the top heuristic prioritizes bins with just enough capacity for the item, using `-(bins_remain_cap - item)` for valid bins. In contrast, the worst heuristic normalizes the scores, which may not be necessary. Comparing (1st) vs (2nd), both prioritize bins with less remaining capacity after addition, but (1st) directly uses the negative remaining capacity. (3rd) vs (4th), (3rd) adds a small random noise to break ties, while (4th) doesn't. Overall, effective prioritization and handling of edge cases are key to a good heuristic.\n- \nTo design better heuristics, let's rethink 'Current self-reflection'. Since 'Ineffective self-reflection' is None, we'll focus on enhancing the current approach.\n\n* **Keywords**: prioritization, capacity, edge cases\n* **Advice**: Explore alternative prioritization strategies and robust handling of edge cases.\n* **Avoid**: Static prioritization methods and fragile edge case handling.\n* **Explanation**: By emphasizing dynamic prioritization and edge case management, we can create more effective and resilient heuristics, ultimately leading to better optimization outcomes.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}