{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo improve the 'Current self-reflection' and design better heuristics, let's analyze the given information. \n\n* **Keywords**: simplicity, effective tie-breaker, prioritization, multiple factors, remaining capacity, bin fullness, randomness.\n* **Advice**: Combine multiple factors (e.g., remaining capacity, utilization, bin index) and use effective tie-breaking strategies. Consider simplicity and clear purpose for each component.\n* **Avoid**: Redundant complexity, unnecessary components, division by zero, and ineffective tie-breaking methods.\n* **Explanation**: By focusing on simplicity, combining relevant factors, and using effective tie-breakers, we can create more efficient heuristics that balance prioritization and randomness, ultimately leading to better performance.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}