```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced priority function that combines the utilization factor, remaining capacity, 
    and a sophisticated tie-breaker for online Bin Packing Problem.
    """
    # Calculate the utilization factor after placing the item in each bin
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate a priority score based on utilization factor and a penalty for bins that cannot fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor - 1), -np.inf)  # Prioritize bins where the item fits and utilization is maximized
    
    # Introduce a more nuanced tie-breaker that considers both bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + (bins_remain_cap / (item + epsilon)) * secondary_tie_breaker_coef)
    
    # Combine the primary priority score with the tie-breaker
    priority += tie_breaker
    
    return priority

secondary_tie_breaker_coef = 1e-4  # Coefficient for the secondary tie-breaker component
```
