```python
import numpy as np

epsilon = 1e-6  # A small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced prioritization function that combines multiple factors for online Bin Packing Problem.
    
    It considers not just the utilization factor and remaining capacity but also the relative size of the item to the bin capacity.
    """
    # Calculate the relative size of the item to the bin's remaining capacity
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate a 'fit score' that rewards bins where the item fits well (i.e., fills a significant portion of the bin)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score is a combination of the fit score and a penalty for bins that are too full or too empty
    priority = np.where(bins_remain_cap >= item, fit_score + np.log(bins_remain_cap + epsilon) * 0.1, -np.inf)
    
    # Add a tie-breaker based on the bin index to ensure a consistent ordering when priorities are equal
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
```
