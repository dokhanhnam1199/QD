```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines remaining capacity and 'fullness' with a simple yet effective tie-breaker.

    Prioritizes bins that fit the item, are relatively empty, and have a lower index.
    """
    # Calculate priority score for bins that can fit the item
    max_capacity = np.max(bins_remain_cap) + item  # assuming all bins have the same max capacity
    priority = np.where(bins_remain_cap >= item, 
                        -(bins_remain_cap - item) + 0.1 * (max_capacity - bins_remain_cap), 
                        -np.inf)  # prioritize bins that are relatively empty
    
    # Add a simple tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority = np.where(priority != -np.inf, priority + np.log(num_bins / (1 + np.arange(num_bins))), -np.inf)
    
    return priority
```
