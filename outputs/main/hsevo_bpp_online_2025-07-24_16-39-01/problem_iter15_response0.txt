```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function combining multiple factors for online Bin Packing Problem.
    """
    # Calculate the utilization factor after placing the item, ensuring no division by zero
    post_utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the relative remaining capacity after placing the item
    relative_remain_cap = bins_remain_cap - item
    
    # Priority score for bins that can fit the item, combining post-utilization factor and relative remaining capacity
    priority = np.where(bins_remain_cap >= item, -np.abs(post_utilization_factor) + relative_remain_cap / (item + epsilon), -np.inf)
    
    # Introduce a tie-breaker based on bin index to favor bins that are filled more evenly and are earlier in the list
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins)))) * tie_breaker_coef + (1 - (bins_remain_cap / (item + epsilon))) * tie_breaker_coef)
    
    return priority
```
