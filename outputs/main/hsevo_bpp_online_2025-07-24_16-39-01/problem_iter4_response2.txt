import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                random_noise_upper_bound: float = 0.0008006322822533891, 
                invalid_bin_priority: float = -2886558417.5477495) -> np.ndarray:
    """
    Returns priority score for each bin by prioritizing bins with just enough capacity for the item and breaking ties randomly.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        random_noise_upper_bound: Upper bound for random noise added to break ties.
        invalid_bin_priority: Priority for bins that are too small for the item.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_capacity_after_addition = bins_remain_cap - item
    
    # Prioritize bins with less remaining capacity after addition and break ties randomly
    priority = np.where(remaining_capacity_after_addition >= 0, 
                        -remaining_capacity_after_addition + np.random.uniform(0, random_noise_upper_bound, size=len(bins_remain_cap)), 
                        invalid_bin_priority)
    
    return priority
