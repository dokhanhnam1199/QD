import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                tie_breaker_weight: float = 0.5727197902003588) -> np.ndarray:
    """
    Combines remaining capacity and utilization with a simple tie-breaker.
    Prioritizes bins that fit the item, have high utilization, and lower index.
    """
    # Filter out bins that cannot fit the item
    valid_bins = bins_remain_cap >= item
    
    # Calculate remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap[valid_bins] - item
    
    # Calculate utilization after adding the item
    bin_utilization_after_addition = 1 - (remaining_after_addition / bins_remain_cap[valid_bins])
    
    # Priority score combines negative remaining capacity and utilization
    priority_scores_valid = -remaining_after_addition + bin_utilization_after_addition
    
    # Create array to store priority scores for all bins
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priority_scores[valid_bins] = priority_scores_valid
    
    # Add a simple tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority_scores = np.where(priority_scores != -np.inf, 
                               priority_scores + tie_breaker_weight * np.log(num_bins / (1 + np.arange(num_bins))), 
                               -np.inf)
    
    return priority_scores
