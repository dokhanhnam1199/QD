```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a sophisticated tie-breaker for online Bin Packing Problem.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Fit score and utilization factor
    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition) / bins_remain_cap), -np.inf)
    utilization_after_addition = 1.0 - remaining_cap_after_addition / bins_remain_cap
    utilization_score = np.where(bins_remain_cap >= item, utilization_after_addition, 0)
    
    # Combine fit score and utilization score with a focus on bins that are almost full
    priority_scores = fit_score + utilization_score
    
    # Sophisticated tie-breaker based on a combination of bin remaining capacity and index
    epsilon = 1e-6  # Small value to avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((bins_remain_cap / (item + epsilon)) + np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Combine priority score with tie-breaker and a small random noise for further tie-breaking
    priority_scores = np.where(priority_scores != -np.inf, priority_scores + tie_breaker + np.random.uniform(0, 1e-6, size=len(bins_remain_cap)), -np.inf)
    
    return priority_scores
```
