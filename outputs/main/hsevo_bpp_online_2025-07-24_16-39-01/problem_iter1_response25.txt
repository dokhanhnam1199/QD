```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign a high priority score to bins that have enough capacity for the item
    # and a low priority score to bins that don't have enough capacity
    priority_scores = np.where(remaining_cap_after_addition >= 0, 
                               -remaining_cap_after_addition,  # Lower remaining capacity is preferred
                               -np.inf)  # Bins that can't fit the item get the lowest priority
    
    # To avoid division by zero and to make the scores more distinguishable, 
    # we can add a small value to the denominator or use a different scoring function
    # Here, we simply use the negative remaining capacity as the score
    
    return priority_scores
```
