```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity and item size.
    Prioritizes bins with capacity closest to the item size, with a tie-breaker.
    """
    # Calculate the priority score as the negative of the remaining capacity after adding the item
    priority = -np.abs(bins_remain_cap - item)  # prioritize bins with just enough capacity
    
    # Add a small random noise to break ties
    np.random.seed(0)  # for reproducibility
    priority += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    # Set the priority to negative infinity for bins that cannot accommodate the item
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
