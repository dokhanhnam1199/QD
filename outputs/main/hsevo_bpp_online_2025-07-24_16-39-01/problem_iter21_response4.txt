```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that combines remaining capacity, utilization factor, 
    and a sophisticated tie-breaker for online Bin Packing Problem.
    """
    # Calculate utilization factor, ensuring no division by zero
    utilization_factor = 1 - (item / np.maximum(bins_remain_cap, epsilon))
    
    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity
    priority = np.where(bins_remain_cap >= item, utilization_factor, -np.inf)
    
    # Enhanced tie-breaker: combines bin index and remaining capacity for more nuanced decision-making
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + 
                                               (bins_remain_cap / (1 + np.arange(num_bins)) * tie_breaker_coef * 1e-2))
    
    # Final priority score with the enhanced tie-breaker
    priority += tie_breaker
    
    return priority
```
