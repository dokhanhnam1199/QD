```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.
    Favors bins that are almost full to minimize waste.
    """
    epsilon = 1e-6  # Small value to avoid division by zero
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, 
                        # Combine utilization factor and fit score with a bias towards utilization factor
                        -np.abs(utilization_factor) * 0.95 + fit_score * 0.5, 
                        -np.inf)
    
    # Add a simple tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 0.008)
    
    # Slightly favor bins that are almost full to minimize waste
    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - np.abs(utilization_factor)) * 0.12
    
    return priority
```
