import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, eps: float = 8.946095972744283e-07, tie_breaker_coef: float = 0.008463189358813801, random_noise_max: float = 0.0006215371867152027) -> np.ndarray:
    """
    Combines utilization factor and remaining capacity with a simple tie-breaker and logarithmic bin index.
    """
    # Calculate utilization factor
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, eps)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)
    
    # Add a tie-breaker based on bin index with a small coefficient
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + np.random.uniform(0, random_noise_max, size=num_bins))
    
    return priority
