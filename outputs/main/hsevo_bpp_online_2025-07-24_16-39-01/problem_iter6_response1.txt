```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a heuristic that prioritizes bins based on their remaining capacity and the item size.
    It combines the benefits of First-Fit and Best-Fit heuristics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item (like Best-Fit)
    # and also consider the bins that are already filled the most (like First-Fit with a twist)
    # So, we use a combination of the negative of the remaining capacity after adding the item and the current fill level
    priority_scores = np.where(bins_remain_cap >= item, 
                               -(bins_remain_cap - item) + 0.1 * bins_remain_cap,  # Add a small bonus for more filled bins
                               -np.inf)
    
    # To break ties, we can slightly prioritize bins with more remaining capacity
    # However, this is already handled by the term -(bins_remain_cap - item)
    
    return priority_scores
```
