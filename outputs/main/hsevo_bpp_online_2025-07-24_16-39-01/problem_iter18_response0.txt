```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that combines multiple factors and uses an effective tie-breaker.
    """
    # Calculate the utilization factor after placing the item, avoiding division by zero
    new_utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the relative remaining capacity after placing the item
    relative_remain_cap = (bins_remain_cap - item) / (bins_remain_cap + epsilon)
    
    # Priority score for bins that can fit the item, combining utilization factor and relative remaining capacity
    priority = np.where(bins_remain_cap >= item, -np.abs(new_utilization_factor) + relative_remain_cap, -np.inf)
    
    # Introduce a tie-breaker based on a combination of bin index and a random noise for bins that can fit the item
    num_bins = len(bins_remain_cap)
    bin_index_factor = np.log(num_bins / (1 + np.arange(num_bins)))
    random_noise = np.random.uniform(0, 1, size=num_bins) * tie_breaker_coef
    priority += (bins_remain_cap >= item) * (bin_index_factor + random_noise)
    
    return priority
```
