```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on the remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_capacity_after_addition = bins_remain_cap - item
    
    # Create a mask to identify bins that have enough capacity for the item
    valid_bins = remaining_capacity_after_addition >= 0
    
    # Assign a high priority to valid bins and a low priority to invalid bins
    priority = np.where(valid_bins, bins_remain_cap - item, -np.inf)
    
    return priority
```
