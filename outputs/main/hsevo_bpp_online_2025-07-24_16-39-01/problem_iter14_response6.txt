```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to bins, combining remaining capacity and a tie-breaker.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Priority score: bins with just enough capacity are prioritized
    priority_scores = np.where(bins_remain_cap >= item, 
                               -(np.abs(remaining_cap_after_addition)) +  # prioritize bins with just enough capacity
                               np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))),  # tie-breaker
                               -np.inf)  # bins that can't fit the item get -inf priority
    
    return priority_scores
```
