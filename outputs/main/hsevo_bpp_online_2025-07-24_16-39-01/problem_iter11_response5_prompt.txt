{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin. \n    Combines prioritizing bins with just enough capacity and a robust tie-breaking strategy.\n    \"\"\"\n    # Prioritize bins that have just enough capacity for the item\n    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Add a small factor considering the initial remaining capacity and random noise to break ties\n    initial_capacities = np.full_like(bins_remain_cap, 1.0)  \n    priority_scores += 0.1 * np.where(bins_remain_cap >= item, (initial_capacities - bins_remain_cap), 0) + np.random.rand(*priority_scores.shape) * 1e-6\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for adding an item to bins, combining \n    remaining capacity and 'fullness' with a tie-breaker based on bin index.\n    \"\"\"\n    # Calculate max capacity assuming all bins have the same max capacity\n    max_capacity = np.max(bins_remain_cap) + item\n    \n    # Priority score: negative remaining capacity after addition, \n    # plus a 'fullness' factor\n    priority_scores = np.where(bins_remain_cap >= item, \n                               -(bins_remain_cap - item) + (max_capacity - bins_remain_cap - item) / max_capacity, \n                               -np.inf)\n    \n    # Add a tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, 1e-6, size=num_bins), \n                               -np.inf)\n    \n    # Normalize scores to avoid extreme values\n    finite_scores = priority_scores[np.isfinite(priority_scores)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            priority_scores[np.isfinite(priority_scores)] = (finite_scores - min_score) / (max_score - min_score)\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best (Heuristics 1st) and the worst (Heuristics 20th), we see that both prioritize bins with just enough capacity, but the best uses a more sophisticated utilization factor and a smaller coefficient for tie-breaking. \nComparing (1st) vs (2nd), we see that (1st) uses a more complex utilization factor, while (2nd) relies on a combination of negative remaining capacity and bin utilization ratio. \n(3rd) vs (4th) shows that (3rd) uses random noise for tie-breaking, whereas (4th) considers the proportion of remaining capacity occupied by the item. \nOverall, the top heuristics tend to use a combination of factors, including utilization, remaining capacity, and tie-breaking strategies.\n- \nTo design better heuristics, let's rethink the 'Current self-reflection' to avoid the pitfalls in 'Ineffective self-reflection'. Here's a redefined approach:\n\n* **Keywords**: Prioritization, tie-breaking, remaining capacity, utilization\n* **Advice**: Combine multiple factors effectively, handle edge cases, and use simple yet effective formulas for prioritization.\n* **Avoid**: Ineffective prioritization strategies, division by zero, and overly complex or concise code at the expense of clarity.\n* **Explanation**: By focusing on effective prioritization, handling edge cases, and using a balanced combination of factors for tie-breaking, we can design more efficient heuristics that outperform existing ones.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}