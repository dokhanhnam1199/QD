```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a more sophisticated heuristic that prioritizes bins 
    based on their remaining capacity and the item size. It combines the benefits 
    of First-Fit and Best-Fit heuristics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item
    # So, we use a combination of the negative of the remaining capacity after 
    # adding the item and a term that rewards bins with smaller remaining capacity
    
    # For bins that can fit the item, calculate the remaining capacity
    remaining_cap = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    
    # Calculate the priority score as a combination of the remaining capacity and 
    # a term that rewards bins with smaller remaining capacity
    priority_scores = -remaining_cap + 1 / (remaining_cap + 1e-6)
    
    # For bins that cannot fit the item, set the priority score to negative infinity
    priority_scores = np.where(bins_remain_cap >= item, priority_scores, -np.inf)
    
    return priority_scores
```
