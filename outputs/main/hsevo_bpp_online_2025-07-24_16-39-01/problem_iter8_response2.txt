```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin.
    Prioritizes bins with just enough capacity, considering remaining capacity and adding random noise to break ties.
    """
    # Calculate priority score for bins that can accommodate the item
    mask = bins_remain_cap >= item
    # Combine the effective prioritization strategy from priority_v0 with a more sophisticated tie-breaking from priority_v1
    priority = np.where(mask, 
                        -(bins_remain_cap - item) / (bins_remain_cap + 1e-6) + 1 / (bins_remain_cap + 1e-6), 
                        -np.inf)
    # Add a small factor considering the bin index (older bins are prioritized) and random noise to break ties
    num_bins = len(bins_remain_cap)
    priority[mask] += np.log(num_bins / (1 + np.arange(num_bins))[mask]) * 1e-3 + np.random.uniform(0, 1e-6, np.sum(mask))
    return priority
```
