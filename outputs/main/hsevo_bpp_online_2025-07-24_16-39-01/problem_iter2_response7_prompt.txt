{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    The bin with the least remaining capacity that can still fit the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # If the item cannot fit in the bin, the priority score is -inf\n    # Otherwise, the priority score is the negative of the remaining capacity after adding the item\n    # This way, the bin with the least remaining capacity that can still fit the item gets the highest priority\n    priority_scores = np.where(bins_remain_cap >= item, - (bins_remain_cap - item), -np.inf)\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin based on \n    the remaining capacity of the bins and the size of the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity\n    # and the size of the item. A bin with a remaining capacity closest to the \n    # item size will have the highest priority score.\n    priority_scores = np.where(bins_remain_cap >= item, \n                               bins_remain_cap - item, \n                               -np.inf)\n    \n    # Normalize the priority scores to ensure they are in a comparable range.\n    # Here, we use a simple normalization by subtracting the minimum score and \n    # then dividing by the range of scores. However, since we're using -inf for \n    # bins that can't fit the item, this step is somewhat redundant but remains \n    # for potential future adjustments to the scoring system.\n    finite_scores = priority_scores[np.isfinite(priority_scores)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            normalized_scores = (priority_scores - min_score) / (max_score - min_score)\n        else:\n            normalized_scores = np.where(priority_scores == max_score, 1.0, 0.0)\n    else:\n        normalized_scores = np.zeros_like(priority_scores)\n    \n    # Softmax normalization to ensure the scores are positive and sum to 1.\n    # However, for simplicity and to maintain the relative order, we'll directly \n    # return the priority scores. To introduce softmax, uncomment the following.\n    # e_scores = np.exp(normalized_scores)\n    # return e_scores / np.sum(e_scores)\n    return normalized_scores\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we observe that the top heuristic prioritizes bins with just enough capacity for the item, using `-(bins_remain_cap - item)` for valid bins. In contrast, the worst heuristic normalizes the scores, which may not be necessary. Comparing (1st) vs (2nd), both prioritize bins with less remaining capacity after addition, but (1st) directly uses the negative remaining capacity. (3rd) vs (4th), (3rd) adds a small random noise to break ties, while (4th) doesn't. Overall, effective prioritization and handling of edge cases are key to a good heuristic.\n- \nTo design better heuristics, let's rethink 'Current self-reflection'. Since 'Ineffective self-reflection' is None, we'll focus on enhancing the current approach.\n\n* **Keywords**: prioritization, capacity, edge cases\n* **Advice**: Explore alternative prioritization strategies and robust handling of edge cases.\n* **Avoid**: Static prioritization methods and fragile edge case handling.\n* **Explanation**: By emphasizing dynamic prioritization and edge case management, we can create more effective and resilient heuristics, ultimately leading to better optimization outcomes.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}