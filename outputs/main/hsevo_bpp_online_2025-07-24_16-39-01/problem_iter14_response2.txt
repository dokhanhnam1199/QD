```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, remaining capacity, and a simple tie-breaker for prioritization.
    """
    # Calculate utilization factor after adding the item, avoiding division by zero
    utilization_factor = (1 - (bins_remain_cap - item))  # Assuming bin capacity is 1.0
    
    # Priority score for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    priority = np.where(valid_bins, -np.abs(bins_remain_cap - item) + utilization_factor, -np.inf)
    
    # Add a tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += valid_bins * (np.log(num_bins / (1 + np.arange(num_bins))) * 0.01)  # Using a small coefficient for tie-breaker
    
    return priority
```
