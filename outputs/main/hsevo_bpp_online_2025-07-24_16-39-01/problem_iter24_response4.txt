```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced priority function that combines multiple factors for effective bin selection.
    """
    # Calculate the utilization factor after placing the item in each bin
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate a 'waste' factor representing how much space will be left after placing the item
    waste_factor = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    
    # Priority score is a combination of utilization factor and waste factor
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - waste_factor / (1 + item), -np.inf)
    
    # Introduce a tie-breaker that considers both bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * (
        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + 
        bins_remain_cap / (1 + item) * tie_breaker_coef * 0.1
    )
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
