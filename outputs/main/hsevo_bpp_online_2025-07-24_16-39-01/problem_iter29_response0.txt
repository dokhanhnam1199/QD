```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a simple tie-breaker for effective bin selection.
    """
    epsilon = 1e-6  # Avoid division by zero
    # Calculate priority score for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    priority = np.where(valid_bins, -remaining_fraction + np.exp(-np.abs(bins_remain_cap - item) / item), -np.inf)
    
    # Introduce a tie-breaker based on the bin index
    num_bins = len(bins_remain_cap)
    tie_breaker_coef = 1e-3
    priority += valid_bins * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Favor bins that are almost full
    almost_full_bins = np.logical_and(valid_bins, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - remaining_fraction) * 0.1
    
    # Enhance with remaining capacity factor for valid bins
    remaining_capacity_factor = bins_remain_cap / (item + epsilon)
    priority += valid_bins * remaining_capacity_factor * 0.05  # Weighted addition
    
    return priority
```
