```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a sophisticated tie-breaker for effective bin selection.
    """
    epsilon = 1e-6  
    utilization_factor_weight = 0.8  
    fit_score_weight = 0.2  
    tie_breaker_coef = 1e-3  
    
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, 
                        -np.inf)
    
    # Enhanced tie-breaker: combines bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    priority += valid_bins * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + 
                               (- (bins_remain_cap - item) / (1 + bins_remain_cap.max()) * 0.01))
    
    # Favor bins that are almost full (additional factor from priority_v1)
    almost_full_bins = np.logical_and(valid_bins, bins_remain_cap - item < item * 0.1)
    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    priority += almost_full_bins * (1 - remaining_fraction) * 0.1
    
    return priority
```
