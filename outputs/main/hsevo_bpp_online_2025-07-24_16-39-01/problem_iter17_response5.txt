```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and a simple tie-breaker for prioritization.
    """
    # Calculate utilization factor after adding the item, avoiding division by zero
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-8)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)
    
    # Add a tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 1e-6)
    
    return priority
```
