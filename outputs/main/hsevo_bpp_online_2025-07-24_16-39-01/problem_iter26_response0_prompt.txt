{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray, \n                epsilon: float = 0.0006462524660114609, \n                tie_breaker_coef: float = 0.006809150777702792, \n                utilization_factor_weight: float = 0.9834522541574382, \n                fit_score_weight: float = 0.4501654097793421) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Constants\n    epsilon = 1e-6  # Avoid division by zero\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * 0.9 + fit_score * 0.1, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the top-ranked heuristics (1st) with the lower-ranked ones (e.g., 19th, 20th), we see that the top heuristics tend to have more complex priority calculations involving multiple factors like utilization factor, fit score, and tie-breakers. \n(1st) vs (20th), we notice that (1st) uses a combination of utilization factor and fit score with specific weights, while (20th) uses a simpler post-utilization factor and remaining capacity calculation.\n(2nd) to (5th) are identical to (1st), suggesting that the exact same heuristic is considered top-ranked multiple times, potentially indicating its robustness or overfitting to the evaluation criteria.\nComparing (6th) to (8th) and others, we see variations in how the priority is calculated, with some using more straightforward methods and others incorporating additional factors like waste factor or randomness for tie-breaking.\nOverall, top heuristics tend to balance multiple factors for bin selection and often include a tie-breaker mechanism.\n- \nTo redesign 'Current self-reflection', let's analyze the given information.\n\n* The task is to come up with ideas to design better heuristics by avoiding 'Ineffective self-reflection' and redefining 'Current self-reflection'.\n\nUpon examining 'Ineffective self-reflection', common themes emerge:\n- Prioritization strategies and effective tie-breaking are crucial.\n- Combining multiple relevant factors is key.\n- Simplicity is preferred over unnecessary complexity.\n\nHere's the redefined 'Current self-reflection' in 4 bullet points:\n\n* **Keywords**: Prioritization, Multiple Factors, Simplicity, Tie-breaking.\n* **Advice**: Combine key factors like utilization and remaining capacity with simple, effective tie-breakers.\n* **Avoid**: Unnecessary complexity, excessive randomness, and redundant components.\n* **Explanation**: By focusing on prioritization strategies, combining multiple relevant factors, and maintaining simplicity, we can design better heuristics that are both effective and efficient.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}