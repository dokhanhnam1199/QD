```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and fit score with a balanced tie-breaker.
    """
    # Constants to avoid division by zero and for tie-breaker
    epsilon = 1e-6  
    tie_breaker_coef = 1e-3  
    
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    fit_score = 1 - (item / np.maximum(bins_remain_cap, epsilon))
    
    # Priority score for bins that can fit the item, balancing utilization and fit
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - fit_score * 0.1, -np.inf)
    
    # Enhanced tie-breaker: combines bin index and a small randomness component
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + 
                                              (np.random.rand(num_bins) * tie_breaker_coef / (10 * (1 + np.arange(num_bins)))))
    
    # Additional consideration for remaining capacity to differentiate bins with similar utilization
    priority += (bins_remain_cap >= item) * (- (bins_remain_cap - item) / (1 + bins_remain_cap.max()) * 0.01)
    
    return priority
```
