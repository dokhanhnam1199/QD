{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines fit score and a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Fit score: prioritize bins where the item fits well\n    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition)), -np.inf)\n    \n    # Simple tie-breaker based on bin index\n    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3\n    \n    # Combine fit score and tie-breaker\n    priority_scores = fit_score + tie_breaker\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\neps = 1e-6  # small value to avoid division by zero\ntie_breaker_coef = 0.1  # coefficient for tie-breaker\nrandom_noise_max = 1e-3  # maximum random noise\n\n    \"\"\"\n    Combines utilization factor and remaining capacity with a simple tie-breaker and logarithmic bin index.\n    Uses a more straightforward utilization factor calculation and adds random noise for tie-breaking.\n    \"\"\"\n    # Calculate utilization factor\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, eps)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient and random noise\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n                                              np.random.uniform(0, random_noise_max, size=num_bins))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristics (1st and 2nd) with the worst (19th and 20th), we see that the top heuristics use a more refined utilization factor calculation and a tie-breaker based on bin index. The worst heuristics introduce additional complexity with multiple factors and random noise. \nComparing (1st) vs (2nd), we see identical code, indicating potential redundancy or overfitting in the ranking. \n(3rd) vs (4th) shows a shift from a simpler utilization and remaining capacity calculation to a more complex scoring system. \nComparing (second worst) vs (worst), we see identical code again, similar to the top two. \nOverall, effective heuristics seem to balance simplicity with a thoughtful tie-breaker mechanism.\n- \nTo improve the 'Current self-reflection' and design better heuristics, let's analyze the given information. \n\n* **Keywords**: simplicity, effective tie-breaker, prioritization, multiple factors, remaining capacity, bin fullness, randomness.\n* **Advice**: Combine multiple factors (e.g., remaining capacity, utilization, bin index) and use effective tie-breaking strategies. Consider simplicity and clear purpose for each component.\n* **Avoid**: Redundant complexity, unnecessary components, division by zero, and ineffective tie-breaking methods.\n* **Explanation**: By focusing on simplicity, combining relevant factors, and using effective tie-breakers, we can create more efficient heuristics that balance prioritization and randomness, ultimately leading to better performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}