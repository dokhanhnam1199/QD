```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that combines multiple factors for online Bin Packing Problem.
    
    This function calculates a priority score for each bin based on how well it can accommodate the item,
    considering both the utilization factor and the remaining capacity. It also incorporates a tie-breaker
    to differentiate between bins with similar characteristics.
    """
    # Normalize the remaining capacity to emphasize bins that are closer to being full or empty
    normalized_remain_cap = bins_remain_cap / (item + epsilon)
    
    # Calculate a utilization factor that rewards bins that are not too empty or too full
    utilization_factor = np.exp(-((normalized_remain_cap - 1) ** 2) / 2)
    
    # Assign a high priority score to bins that can fit the item, weighted by their utilization factor
    priority = np.where(bins_remain_cap >= item, utilization_factor, -np.inf)
    
    # Introduce a tie-breaker based on the bin's remaining capacity and its index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + (bins_remain_cap / (item + epsilon)) * 1e-2)
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
