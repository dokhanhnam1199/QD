```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit score, utilization factor, and a simple tie-breaker for online Bin Packing Problem.
    """
    # Mask for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Fit score: prioritize bins where the item fits well
    fit_score = np.where(valid_bins, -np.abs(remaining_cap_after_addition), -np.inf)
    
    # Utilization factor
    utilization_factor = np.where(valid_bins, -remaining_cap_after_addition / bins_remain_cap.max(), 0)
    
    # Simple tie-breaker based on bin index
    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3
    
    # Combine fit score, utilization factor, and tie-breaker
    priority_scores = fit_score + utilization_factor + tie_breaker
    
    return priority_scores
```
