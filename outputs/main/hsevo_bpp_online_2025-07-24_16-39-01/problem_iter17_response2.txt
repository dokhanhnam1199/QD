```python
import numpy as np

eps = 1e-6  # small value to avoid division by zero
tie_breaker_coef = 0.1  # coefficient for tie-breaker
random_noise_max = 1e-3  # maximum random noise

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and remaining capacity with a simple tie-breaker and logarithmic bin index.
    Uses a more straightforward utilization factor calculation and adds random noise for tie-breaking.
    """
    # Calculate utilization factor
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, eps)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)
    
    # Add a tie-breaker based on bin index with a small coefficient and random noise
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + 
                                              np.random.uniform(0, random_noise_max, size=num_bins))
    
    return priority
```
