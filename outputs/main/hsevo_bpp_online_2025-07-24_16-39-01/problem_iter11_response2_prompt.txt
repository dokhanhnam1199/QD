{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a heuristic that prioritizes bins based on their remaining capacity,\n    the item size, and a tie-breaking strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # So, we use a combination of the negative of the remaining capacity after adding the item and the bin utilization ratio\n\n    # First, calculate the remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n\n    # For bins that can fit the item, calculate the priority score\n    # We use a combination of the negative remaining capacity and the bin utilization ratio\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        -(remaining_cap_after_addition) + (1 / (bins_remain_cap + 1e-9)), \n        -np.inf\n    )\n\n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines effective prioritization of bins with just enough capacity and robust tie-breaking.\n    \"\"\"\n    # Check if the item can fit into the bin\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Prioritize bins that are just enough for the item, with a simpler formula\n    priority = valid_bins * (-(bins_remain_cap - item))\n    \n    # Add a small random noise and consider bin index for tie-breaking\n    num_bins = len(bins_remain_cap)\n    priority += valid_bins * (np.log(num_bins / (1 + np.arange(num_bins))) + np.random.rand(*priority.shape) * 1e-6)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best (Heuristics 1st) and the worst (Heuristics 20th), we see that both prioritize bins with just enough capacity, but the best uses a more sophisticated utilization factor and a smaller coefficient for tie-breaking. \nComparing (1st) vs (2nd), we see that (1st) uses a more complex utilization factor, while (2nd) relies on a combination of negative remaining capacity and bin utilization ratio. \n(3rd) vs (4th) shows that (3rd) uses random noise for tie-breaking, whereas (4th) considers the proportion of remaining capacity occupied by the item. \nOverall, the top heuristics tend to use a combination of factors, including utilization, remaining capacity, and tie-breaking strategies.\n- \nTo design better heuristics, let's rethink the 'Current self-reflection' to avoid the pitfalls in 'Ineffective self-reflection'. Here's a redefined approach:\n\n* **Keywords**: Prioritization, tie-breaking, remaining capacity, utilization\n* **Advice**: Combine multiple factors effectively, handle edge cases, and use simple yet effective formulas for prioritization.\n* **Avoid**: Ineffective prioritization strategies, division by zero, and overly complex or concise code at the expense of clarity.\n* **Explanation**: By focusing on effective prioritization, handling edge cases, and using a balanced combination of factors for tie-breaking, we can design more efficient heuristics that outperform existing ones.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}