{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray, \n                epsilon: float = 0.0006462524660114609, \n                tie_breaker_coef: float = 0.006809150777702792, \n                utilization_factor_weight: float = 0.9834522541574382, \n                fit_score_weight: float = 0.4501654097793421) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray, \n                epsilon: float = 0.0006462524660114609, \n                tie_breaker_coef: float = 0.006809150777702792, \n                utilization_factor_weight: float = 0.9834522541574382, \n                fit_score_weight: float = 0.4501654097793421) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray, \n                epsilon: float = 0.0006462524660114609, \n                tie_breaker_coef: float = 0.006809150777702792, \n                utilization_factor_weight: float = 0.9834522541574382, \n                fit_score_weight: float = 0.4501654097793421) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray, \n                epsilon: float = 0.0006462524660114609, \n                tie_breaker_coef: float = 0.006809150777702792, \n                utilization_factor_weight: float = 0.9834522541574382, \n                fit_score_weight: float = 0.4501654097793421) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray, \n                epsilon: float = 0.0006462524660114609, \n                tie_breaker_coef: float = 0.006809150777702792, \n                utilization_factor_weight: float = 0.9834522541574382, \n                fit_score_weight: float = 0.4501654097793421) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Constants\n    epsilon = 1e-6  # Avoid division by zero\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * 0.9 + fit_score * 0.1, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    An advanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after packing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    remaining_diff = np.abs(bins_remain_cap - item)\n    \n    # Priority score for bins that can fit the item, using a combination of remaining fraction and difference\n    priority = np.where(bins_remain_cap >= item, -remaining_fraction + np.exp(-remaining_diff / item), -np.inf)\n    \n    # Introduce a tie-breaker based on the bin index to favor bins with lower indices\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Slightly favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - remaining_fraction) * 0.1\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit score, utilization, and a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Fit score: prioritize bins where the item fits well\n    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition) / bins_remain_cap), -np.inf)\n    \n    # Utilization factor\n    utilization_after_addition = 1.0 - remaining_cap_after_addition / bins_remain_cap\n    utilization_score = np.where(bins_remain_cap >= item, utilization_after_addition, 0)\n    \n    # Combine fit score and utilization score\n    priority_scores = fit_score + utilization_score\n    \n    # Simple tie-breaker based on bin index\n    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3\n    \n    # Add tie-breaker to priority scores\n    priority_scores = np.where(priority_scores != -np.inf, priority_scores + tie_breaker, -np.inf)\n    \n    # Add a small random noise for further tie-breaking\n    random_noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))\n    priority_scores = np.where(priority_scores != -np.inf, priority_scores + random_noise, -np.inf)\n    \n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    An advanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after packing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    remaining_diff = np.abs(bins_remain_cap - item)\n    \n    # Priority score for bins that can fit the item, using a combination of remaining fraction and difference\n    priority = np.where(bins_remain_cap >= item, -remaining_fraction + np.exp(-remaining_diff / item), -np.inf)\n    \n    # Introduce a tie-breaker based on the bin index to favor bins with lower indices\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Slightly favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - remaining_fraction) * 0.1\n    \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after placing the item\n    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the fraction of remaining capacity before placing the item\n    pre_utilization = bins_remain_cap / np.maximum(bins_remain_cap + item, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of post-utilization and pre-utilization\n    priority = np.where(bins_remain_cap >= item, -np.abs(post_utilization) + 0.5 * pre_utilization, -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient and a non-linear term\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins)))) * tie_breaker_coef + \n                                              (1 / (1 + np.arange(num_bins))) * tie_breaker_coef * 0.1)\n    \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    An advanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after packing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    remaining_diff = np.abs(bins_remain_cap - item)\n    \n    # Priority score for bins that can fit the item, using a combination of remaining fraction and difference\n    priority = np.where(bins_remain_cap >= item, -remaining_fraction + np.exp(-remaining_diff / item), -np.inf)\n    \n    # Introduce a tie-breaker based on the bin index to favor bins with lower indices\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Slightly favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - remaining_fraction) * 0.1\n    \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    An advanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after packing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    remaining_diff = np.abs(bins_remain_cap - item)\n    \n    # Priority score for bins that can fit the item, using a combination of remaining fraction and difference\n    priority = np.where(bins_remain_cap >= item, -remaining_fraction + np.exp(-remaining_diff / item), -np.inf)\n    \n    # Introduce a tie-breaker based on the bin index to favor bins with lower indices\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Slightly favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - remaining_fraction) * 0.1\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a balanced tie-breaker.\n    \"\"\"\n    epsilon = 1e-6  # Avoid division by zero\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    fit_score = 1 - (item / np.maximum(bins_remain_cap, epsilon))\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - fit_score * 0.1, -np.inf)\n    \n    # Balanced tie-breaker based on bin index and a small randomness component\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + \n                                              (np.random.rand(num_bins) * tie_breaker_coef / (10 * (1 + np.arange(num_bins)))))\n    \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    An advanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the utilization factor after placing the item in each bin\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate a 'waste' factor representing how much space will be left after placing the item\n    waste_factor = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    \n    # Priority score is a combination of utilization factor and waste factor\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - waste_factor / (1 + item), -np.inf)\n    \n    # Introduce a tie-breaker that considers both bin index and remaining capacity\n    num_bins = len(bins_remain_cap)\n    tie_breaker = (bins_remain_cap >= item) * (\n        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n        bins_remain_cap / (1 + item) * tie_breaker_coef * 0.1\n    )\n    \n    # Combine the priority score with the tie-breaker\n    priority += tie_breaker\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, remaining capacity, and a simple tie-breaker for effective bin selection.\n    \"\"\"\n    # Calculate remaining capacity and utilization after adding the item\n    valid_bins = bins_remain_cap >= item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    utilization_after_addition = 1.0 - remaining_after_addition / bins_remain_cap[valid_bins]\n    \n    # Priority score combines negative remaining capacity and utilization\n    priority_scores_valid = -np.abs(remaining_after_addition / bins_remain_cap[valid_bins] - 0.5) + utilization_after_addition\n    \n    # Create array to store priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    # Simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    tie_breaker_coef = 1e-3\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef, \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the 'fit' factor: how well the item fits into the bin\n    fit_factor = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    fit_factor = np.where(bins_remain_cap >= item, fit_factor, -np.inf)  # Penalize bins that can't fit the item\n    \n    # Calculate the 'utilization' factor: how full the bin will be after adding the item\n    utilization_factor = (bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    \n    # Combine fit and utilization factors into a priority score\n    priority = fit_factor + utilization_factor\n    \n    # Add a tie-breaker based on bin index to favor newer bins\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the 'fit' factor: how well the item fits into the bin\n    fit_factor = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    fit_factor = np.where(bins_remain_cap >= item, fit_factor, -np.inf)  # Penalize bins that can't fit the item\n    \n    # Calculate the 'utilization' factor: how full the bin will be after adding the item\n    utilization_factor = (bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    \n    # Combine fit and utilization factors into a priority score\n    priority = fit_factor + utilization_factor\n    \n    # Add a tie-breaker based on bin index to favor newer bins\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function that combines multiple factors for effective bin selection.\n    \"\"\"\n    # Calculate the 'fit' factor: how well the item fits into the bin\n    fit_factor = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    fit_factor = np.where(bins_remain_cap >= item, fit_factor, -np.inf)  # Penalize bins that can't fit the item\n    \n    # Calculate the 'utilization' factor: how full the bin will be after adding the item\n    utilization_factor = (bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    \n    # Combine fit and utilization factors into a priority score\n    priority = fit_factor + utilization_factor\n    \n    # Add a tie-breaker based on bin index to favor newer bins\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines post-utilization factor and remaining capacity with a simple tie-breaker.\n    \"\"\"\n    # Calculate post-utilization factor, avoiding division by zero\n    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of post-utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                        -np.abs(post_utilization - 0.5) + 0.5 - (bins_remain_cap - item) / (1 + bins_remain_cap.max()), \n                        -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines post-utilization factor and remaining capacity with a simple tie-breaker.\n    \"\"\"\n    # Calculate post-utilization factor, avoiding division by zero\n    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of post-utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                        -np.abs(post_utilization - 0.5) + 0.5 - (bins_remain_cap - item) / (1 + bins_remain_cap.max()), \n                        -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}