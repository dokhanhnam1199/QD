```python
import numpy as np

epsilon = 1e-6  # Avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function combining utilization factor, remaining capacity, and a sophisticated tie-breaker.
    """
    # Normalize remaining capacity to enhance comparison
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate a weighted utilization factor that considers both the item size and bin capacity
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    weighted_utilization = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) * 0.7 + norm_remain_cap * 0.3, -np.inf)
    
    # Priority score for bins that can fit the item, emphasizing both utilization and remaining capacity
    priority = weighted_utilization
    
    # Introduce a more nuanced tie-breaker based on bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * 0.5 + norm_remain_cap * 0.5) * tie_breaker_coef)
    priority += tie_breaker
    
    return priority
```
