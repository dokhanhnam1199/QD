```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that combines utilization factor, remaining capacity, and a sophisticated tie-breaker.
    """
    # Calculate the utilization factor after placing the item in each bin
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the priority score for bins that can fit the item, using a combination of utilization and remaining capacity
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor - 0.5), -np.inf)  # Target utilization around 0.5 for better packing
    
    # Add a sophisticated tie-breaker based on a combination of bin remaining capacity and index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((bins_remain_cap / (item + epsilon)) + np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
