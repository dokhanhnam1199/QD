{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for the tie-breaker\n\n    \"\"\"\n    Enhanced prioritization function that combines multiple factors and uses an effective tie-breaker.\n    \"\"\"\n    # Calculate the utilization factor after placing the item, avoiding division by zero\n    new_utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the relative remaining capacity after placing the item\n    relative_remain_cap = (bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    \n    # Priority score for bins that can fit the item, combining utilization factor and relative remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(new_utilization_factor) + relative_remain_cap, -np.inf)\n    \n    # Introduce a tie-breaker based on a combination of bin index and a random noise for bins that can fit the item\n    num_bins = len(bins_remain_cap)\n    bin_index_factor = np.log(num_bins / (1 + np.arange(num_bins)))\n    random_noise = np.random.uniform(0, 1, size=num_bins) * tie_breaker_coef\n    priority += (bins_remain_cap >= item) * (bin_index_factor + random_noise)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\nepsilon = 1e-6  # Small value to avoid division by zero\ntie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n\n    \"\"\"\n    Enhanced prioritization function that combines multiple factors for online Bin Packing Problem.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after placing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Assign high priority to bins that can fit the item and have a remaining fraction close to zero\n    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)\n    \n    # Introduce a secondary prioritization based on the remaining capacity\n    priority += (bins_remain_cap >= item) * (-bins_remain_cap / np.max(bins_remain_cap))\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Add a small random noise to the priority for further tie-breaking\n    np.random.seed(0)  # For reproducibility\n    priority += (bins_remain_cap >= item) * (np.random.rand(num_bins) * tie_breaker_coef * 0.1)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristics (1st and 2nd) with the worst (19th and 20th), we see that the top heuristics use a more refined utilization factor calculation and a tie-breaker based on bin index. The worst heuristics introduce additional complexity with multiple factors and random noise. \nComparing (1st) vs (2nd), we see identical code, indicating potential redundancy or overfitting in the ranking. \n(3rd) vs (4th) shows a shift from a simpler utilization and remaining capacity calculation to a more complex scoring system. \nComparing (second worst) vs (worst), we see identical code again, similar to the top two. \nOverall, effective heuristics seem to balance simplicity with a thoughtful tie-breaker mechanism.\n- \nTo improve the 'Current self-reflection' and design better heuristics, let's analyze the given information. \n\n* **Keywords**: simplicity, effective tie-breaker, prioritization, multiple factors, remaining capacity, bin fullness, randomness.\n* **Advice**: Combine multiple factors (e.g., remaining capacity, utilization, bin index) and use effective tie-breaking strategies. Consider simplicity and clear purpose for each component.\n* **Avoid**: Redundant complexity, unnecessary components, division by zero, and ineffective tie-breaking methods.\n* **Explanation**: By focusing on simplicity, combining relevant factors, and using effective tie-breakers, we can create more efficient heuristics that balance prioritization and randomness, ultimately leading to better performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}