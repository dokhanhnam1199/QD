```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that combines multiple factors for online Bin Packing Problem.
    """
    # Calculate the fraction of remaining capacity after placing the item
    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Assign high priority to bins that can fit the item and have a remaining fraction close to zero
    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)
    
    # Introduce a secondary prioritization based on the remaining capacity
    priority += (bins_remain_cap >= item) * (-bins_remain_cap / np.max(bins_remain_cap))
    
    # Add a tie-breaker based on bin index with a small coefficient
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Add a small random noise to the priority for further tie-breaking
    np.random.seed(0)  # For reproducibility
    priority += (bins_remain_cap >= item) * (np.random.rand(num_bins) * tie_breaker_coef * 0.1)
    
    return priority
```
