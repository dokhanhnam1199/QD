```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on First-Fit heuristic with a twist to encourage fuller bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin
    # For bins that can fit the item, the priority score is inversely proportional to the remaining capacity after adding the item
    # This encourages packing items into bins that will be fuller after adding the item
    scores = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1e-9), -1.0)
    # The '+ 1e-9' is to avoid division by zero
    
    return scores
```
