import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = -2.3348886927785414e-06, 
                weight_utilization: float = 0.8817202301278111, weight_norm_remain_cap: float = 0.348855919335821, 
                tie_breaker_coef: float = 0.003023210848671852, weight_log_term: float = 0.2693622980738091, 
                weight_remain_cap_term: float = 0.5067834426513216, noise_upper_bound: float = 5.424194267550403e-06) -> np.ndarray:
    """
    Combines weighted utilization factor, remaining capacity, and a sophisticated tie-breaker for online Bin Packing Problem.
    """
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Weighted utilization factor considering item size and bin capacity
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    weighted_utilization = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) * weight_utilization + norm_remain_cap * weight_norm_remain_cap, -np.inf)
    
    # Sophisticated tie-breaker based on bin remaining capacity and index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * weight_log_term + 
                                                (bins_remain_cap / (item + epsilon)) * weight_remain_cap_term) * tie_breaker_coef)
    
    # Combine weighted utilization with tie-breaker and a small random noise for further tie-breaking
    priority = np.where(weighted_utilization != -np.inf, weighted_utilization + tie_breaker + np.random.uniform(0, noise_upper_bound, size=num_bins), -np.inf)
    
    return priority
