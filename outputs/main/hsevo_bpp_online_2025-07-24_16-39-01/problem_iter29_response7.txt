```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a sophisticated tie-breaker for effective prioritization.
    """
    # Constants for epsilon and tie-breaker coefficient
    epsilon = 1e-6  
    tie_breaker_coef = 1e-3  
    
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score for bins that can fit the item, combining utilization factor and fit score
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(utilization_factor) * 0.7 + fit_score * 0.3, 
                        -np.inf)
    
    # Add a sophisticated tie-breaker based on a combination of bin remaining capacity and index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    priority += tie_breaker
    
    # Favor bins that are almost full to minimize waste
    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - utilization_factor) * 0.05
    
    return priority
```
