{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo redesign 'Current self-reflection', let's analyze the given information.\n\n### Analysis\nThe 'Current self-reflection' focuses on balancing multiple factors and using simple tie-breakers. However, 'Ineffective self-reflection' provides various strategies that can be used to improve it.\n\n### Redefining 'Current self-reflection'\nHere's a redefined version in 4 bullet points:\n\n* **Keywords**: Prioritization, Tie-breaking, Multiple factors, Balance\n* **Advice**: Combine multiple relevant factors (e.g., utilization, remaining capacity) and use effective tie-breakers (e.g., bin index, random noise) with smaller coefficients to achieve a balance.\n* **Avoid**: Unnecessary complexity, division by zero, and ineffective prioritization strategies.\n* **Explanation**: By considering multiple factors and using effective tie-breakers, we can design better heuristics that balance prioritization and randomness, leading to improved performance.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}