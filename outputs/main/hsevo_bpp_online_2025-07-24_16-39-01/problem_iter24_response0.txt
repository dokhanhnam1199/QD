```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that combines multiple factors for effective bin selection.
    """
    # Calculate the fraction of remaining capacity after placing the item
    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the fraction of remaining capacity before placing the item
    pre_utilization = bins_remain_cap / np.maximum(bins_remain_cap + item, epsilon)
    
    # Priority score for bins that can fit the item, using a combination of post-utilization and pre-utilization
    priority = np.where(bins_remain_cap >= item, -np.abs(post_utilization) + 0.5 * pre_utilization, -np.inf)
    
    # Add a tie-breaker based on bin index with a small coefficient and a non-linear term
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins)))) * tie_breaker_coef + 
                                              (1 / (1 + np.arange(num_bins))) * tie_breaker_coef * 0.1)
    
    return priority
```
