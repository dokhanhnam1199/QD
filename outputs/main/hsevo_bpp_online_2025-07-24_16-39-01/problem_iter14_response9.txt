```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and remaining capacity with a tie-breaker for prioritization.
    """
    # Calculate utilization factor with a regularization to avoid division by zero
    max_remain_cap = np.max(bins_remain_cap)
    utilization_factor = 1 - bins_remain_cap / max_remain_cap
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -(bins_remain_cap - item) + utilization_factor, -np.inf)
    
    # Add a tie-breaker based on bin index to resolve ties
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 1e-6)
    
    return priority
```
