```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a heuristic that prioritizes bins based on their remaining capacity,
    the item size, and a tie-breaking strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item
    # So, we use a combination of the negative of the remaining capacity after adding the item and the bin utilization ratio

    # First, calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item

    # For bins that can fit the item, calculate the priority score
    # We use a combination of the negative remaining capacity and the bin utilization ratio
    priority_scores = np.where(
        bins_remain_cap >= item, 
        -(remaining_cap_after_addition) + (1 / (bins_remain_cap + 1e-9)), 
        -np.inf
    )

    return priority_scores
```
