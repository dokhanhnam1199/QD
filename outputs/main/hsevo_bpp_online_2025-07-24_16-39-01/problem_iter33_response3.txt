```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                utilization_weight: float = 0.5, fit_score_weight: float = 0.3, 
                remaining_capacity_weight: float = 0.2, tie_breaker_index_weight: float = 0.1, 
                epsilon: float = 1e-6) -> np.ndarray:
    """
    Enhanced priority function combining utilization factor, fit score, remaining capacity, and a tie-breaker based on bin index.
    """
    # Calculate a fit score that rewards bins where the item fits well
    fit_score = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon), 0)
    
    # Calculate utilization factor
    utilization_factor = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon), -np.inf)
    
    # Normalize remaining capacity to enhance comparison
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate the priority score as a weighted sum of the factors
    priority = (utilization_factor * utilization_weight + 
                fit_score * fit_score_weight + 
                norm_remain_cap * remaining_capacity_weight)
    
    # Introduce a tie-breaker based on bin index to favor earlier bins
    num_bins = len(bins_remain_cap)
    tie_breaker = (1 / (1 + np.arange(num_bins))) * tie_breaker_index_weight
    
    # Add the tie-breaker to the priority score
    priority += tie_breaker
    
    # Ensure that bins that cannot fit the item have a very low priority
    priority = np.where(bins_remain_cap >= item, priority, -np.inf)
    
    return priority
```
