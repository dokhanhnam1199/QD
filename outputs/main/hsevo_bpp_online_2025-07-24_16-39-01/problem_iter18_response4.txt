```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Improved priority function that combines multiple factors for effective bin selection.
    """
    # Calculate the fraction of remaining capacity after placing the item
    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Priority score for bins that can fit the item, using a combination of remaining fraction and remaining capacity
    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_fraction - 0.5), -np.inf)
    
    # Add a tie-breaker based on the bin's remaining capacity and index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (
        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + 
        bins_remain_cap / np.max(bins_remain_cap) * tie_breaker_coef * 0.1
    )
    
    # Introduce a small random noise for further tie-breaking
    np.random.seed(int(item * 1e6))  # Seed based on item size for reproducibility
    priority += (bins_remain_cap >= item) * np.random.uniform(-tie_breaker_coef * 1e-2, tie_breaker_coef * 1e-2, size=num_bins)
    
    return priority
```
