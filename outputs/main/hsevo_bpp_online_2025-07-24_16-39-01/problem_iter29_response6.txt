```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a simple tie-breaker for effective bin selection.
    Favors bins that are almost full to minimize waste.
    """
    epsilon = 1e-6  # Avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

    # Calculate the fraction of remaining capacity after packing the item
    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the fit factor: how well the item fits into the bin
    fit_factor = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)
    fit_factor = np.where(bins_remain_cap >= item, fit_factor, -np.inf)  # Penalize bins that can't fit the item
    
    # Combine remaining fraction and fit factor into a priority score
    priority = -remaining_fraction + fit_factor
    
    # Introduce a tie-breaker based on the bin index to favor bins with lower indices
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + remaining_fraction * 1e-6)
    priority += tie_breaker
    
    # Slightly favor bins that are almost full to minimize waste
    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - remaining_fraction) * 0.1
    
    return priority
```
