```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Improved priority function that combines multiple factors for effective bin selection.
    """
    # Calculate the fraction of remaining capacity after placing the item
    post_utilization = (bins_remain_cap - item) / (bins_remain_cap + epsilon)
    
    # Priority score is a combination of the post-utilization factor and the remaining capacity
    # for bins that can fit the item, with a penalty for bins that are too full or too empty
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(post_utilization - 0.5) + 0.5 - (bins_remain_cap - item) / (1 + bins_remain_cap.max()), 
                        -np.inf)
    
    # Introduce a randomness component with a decaying coefficient based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.random.rand(num_bins) * tie_breaker_coef / (1 + np.arange(num_bins)))
    
    return priority
```
