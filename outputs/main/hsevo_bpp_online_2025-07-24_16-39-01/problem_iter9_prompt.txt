{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements the First-Fit decreasing heuristic with a twist.\n    It prioritizes bins that have just enough capacity for the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # So, we use the negative of the remaining capacity after adding the item\n    # If the item doesn't fit, the priority score is negative infinity\n    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # To avoid division by zero and make the score more meaningful, we can add a small value to the denominator\n    # However, in this case, it's not necessary because we're not using the remaining capacity as a denominator\n    \n    return priority_scores\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo redesign 'Current self-reflection,' let's analyze the given information and reframe it to avoid the pitfalls mentioned in 'Ineffective self-reflection.' Here's a step-by-step breakdown:\n\n### Analysis\n- The 'Current self-reflection' focuses on simple prioritization formulas and tie-breaking using multiple factors.\n- The 'Ineffective self-reflection' suggests looking into more effective prioritization strategies and handling edge cases.\n\n### Redefined 'Current self-reflection'\nTo design better heuristics, consider the following:\n* **Keywords**: Effective prioritization, multiple factors, edge cases.\n* **Advice**: Focus on strategies like negative or inverse remaining capacity and implement robust tie-breaking.\n* **Avoid**: Simple, non-effective prioritization and lack of edge case handling.\n* **Explanation**: Combining effective prioritization strategies with robust handling of edge cases like division by zero and ties will lead to better heuristics.\n\nLet's refine our approach with these insights. I'm ready to help design better heuristics.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}