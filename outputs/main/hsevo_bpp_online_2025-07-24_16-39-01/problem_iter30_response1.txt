```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that balances utilization, remaining capacity, and bin index for online Bin Packing Problem.
    """
    # Calculate the 'fitting score' based on how well the item fits into the bin
    fitting_score = np.where(bins_remain_cap >= item, 
                             1 - np.abs((bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)), 
                             0)  # Score is 0 if the item cannot fit
    
    # Priority score is a combination of fitting score and a tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority = fitting_score + tie_breaker_coef * (np.log(num_bins / (1 + np.arange(num_bins))))
    
    # Ensure bins that cannot fit the item have the lowest priority
    priority = np.where(bins_remain_cap >= item, priority, -np.inf)
    
    return priority
```
