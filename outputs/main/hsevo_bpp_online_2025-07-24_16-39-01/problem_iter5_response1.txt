```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to bins.
    Combines remaining capacity and 'fullness' of bins, with tie-breaking noise.
    """
    # Calculate max capacity assuming all bins have the same max capacity
    max_capacity = np.max(bins_remain_cap) + item
    
    # Priority score: negative remaining capacity after addition, 
    # plus a 'fullness' factor, and a small random noise to break ties
    priority_scores = np.where(bins_remain_cap >= item, 
                               -(bins_remain_cap - item) + (max_capacity - bins_remain_cap - item) / max_capacity + np.random.uniform(0, 1e-6, size=len(bins_remain_cap)), 
                               -np.inf)
    
    # Normalize scores to avoid extreme values
    finite_scores = priority_scores[np.isfinite(priority_scores)]
    if len(finite_scores) > 0:
        min_score, max_score = np.min(finite_scores), np.max(finite_scores)
        if max_score != min_score:
            priority_scores[np.isfinite(priority_scores)] = (finite_scores - min_score) / (max_score - min_score)
    
    return priority_scores
```
