```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a dynamic prioritization strategy that considers both 
    the remaining capacity of the bin and the number of bins available.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the number of available bins
    num_bins = len(bins_remain_cap)
    
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item
    # and also consider the number of available bins
    priority_scores = np.where(bins_remain_cap >= item, 
                               -(bins_remain_cap - item) + np.log(num_bins / (1 + np.arange(num_bins))), 
                               -np.inf)
    
    # Normalize the priority scores to ensure they are within a comparable range
    max_score = np.max(priority_scores)
    if max_score != -np.inf:
        priority_scores = np.where(priority_scores != -np.inf, priority_scores - max_score, -np.inf)
    
    return priority_scores
```
