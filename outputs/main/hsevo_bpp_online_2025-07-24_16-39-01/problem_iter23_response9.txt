```python
import numpy as np

epsilon = 1e-6  # Avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and remaining capacity with a tie-breaker that includes randomness for exploration.
    """
    # Calculate utilization factor
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)
    
    # Tie-breaker with randomness for exploration
    num_bins = len(bins_remain_cap)
    tie_breaker = np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, tie_breaker_coef, size=num_bins)
    priority += (bins_remain_cap >= item) * tie_breaker
    
    # Normalize priority scores
    max_priority = np.max(priority)
    if max_priority != -np.inf:  
        priority = np.where(priority != -np.inf, priority - max_priority, -np.inf)
    
    return priority
```
