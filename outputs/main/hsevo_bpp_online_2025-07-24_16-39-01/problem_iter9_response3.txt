```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a more sophisticated heuristic that considers both 
    the remaining capacity after adding the item and the proportion of the bin's 
    remaining capacity that the item occupies.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item
    # and where the item occupies a significant proportion of the remaining capacity
    
    # First, calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # For bins that can fit the item, calculate the priority score as a combination
    # of the negative remaining capacity after addition (to prioritize bins that are 
    # just enough for the item) and the proportion of the remaining capacity that 
    # the item occupies (to prioritize bins where the item is a significant portion)
    priority_scores = np.where(
        bins_remain_cap >= item, 
        -(remaining_cap_after_addition) + (item / bins_remain_cap), 
        -np.inf
    )
    
    return priority_scores
```
