```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit score, remaining capacity, and bin index for effective prioritization.
    """
    # Calculate relative size and fit score
    epsilon = 1e-6  # Avoid division by zero
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)

    # Calculate priority score
    max_capacity = np.max(bins_remain_cap) + item  # Assuming all bins have the same max capacity
    priority = np.where(bins_remain_cap >= item, 
                        fit_score + 0.1 * (max_capacity - bins_remain_cap), 
                        -np.inf)

    # Add a simple tie-breaker based on bin index with a small coefficient
    num_bins = len(bins_remain_cap)
    priority = np.where(priority != -np.inf, priority + np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3, -np.inf)
    
    return priority
```
