import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                epsilon: float = 0.00045513611548818594, 
                tie_breaker_coef: float = 0.0072516065446720955, 
                utilization_factor_weight: float = 0.6033277383765239, 
                fit_score_weight: float = 0.23798924463875806) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.
    Weights are chosen based on the analysis of top-ranked heuristics.
    """
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, 
                        # Combine utilization factor and fit score with a bias towards utilization factor
                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, 
                        -np.inf)
    
    # Add a simple tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    return priority
