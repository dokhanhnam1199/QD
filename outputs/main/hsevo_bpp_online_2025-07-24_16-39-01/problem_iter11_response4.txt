```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to bins, combining remaining capacity, 
    utilization factor, and a simple tie-breaker based on bin index.
    """
    # Calculate priority score as a combination of negative remaining capacity 
    # after addition and the proportion of the remaining capacity that the item occupies
    remaining_cap_after_addition = bins_remain_cap - item
    priority_scores = np.where(
        bins_remain_cap >= item, 
        -(remaining_cap_after_addition) + (item / bins_remain_cap), 
        -np.inf
    )
    
    # Add a simple tie-breaker based on bin index to favor earlier bins
    num_bins = len(bins_remain_cap)
    priority_scores = np.where(priority_scores != -np.inf, 
                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))), 
                               -np.inf)
    
    return priority_scores
```
