```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin.
    Combines effective prioritization with robust tie-breaking.
    """
    # Prioritize bins with just enough capacity
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-9)  # Avoid division by zero
    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - (bins_remain_cap - item) / np.max(bins_remain_cap), -np.inf)
    
    # Add a small factor considering the bin index to break ties
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3)  # Use a smaller coefficient
    
    return priority
```
