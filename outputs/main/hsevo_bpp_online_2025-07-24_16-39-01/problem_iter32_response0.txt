```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, remaining capacity, and sophisticated tie-breaker for effective bin selection.
    """
    epsilon = 1e-6  # Avoid division by zero
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate weighted utilization factor
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    weighted_utilization = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) + norm_remain_cap * 0.05, -np.inf)
    
    # Priority score for bins that can fit the item
    priority = weighted_utilization
    
    # Introduce a nuanced tie-breaker based on bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    tie_breaker_coef = 1e-3
    tie_breaker = valid_bins * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + norm_remain_cap * 0.01))
    priority += tie_breaker
    
    # Favor bins that are almost full
    almost_full_bins = np.logical_and(valid_bins, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - utilization_factor) * 0.1
    
    return priority
```
