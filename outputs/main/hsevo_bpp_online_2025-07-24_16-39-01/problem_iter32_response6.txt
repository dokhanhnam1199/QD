```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced scoring and tie-breakers for efficient bin packing.
    """
    epsilon = 1e-6  # Avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    
    # Calculate utilization factor and weighted score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    score = np.where(bins_remain_cap >= item, -0.5 * np.abs(utilization_factor) + 0.5 * (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)
    
    # Novel tie-breaker favoring bins with remaining capacity close to item size
    tie_breaker = np.where(bins_remain_cap >= item, -np.abs(bins_remain_cap - item), 0)
    priority = score + tie_breaker_coef * tie_breaker
    
    # Secondary tie-breaker based on bin index for deterministic order
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef ** 2)
    
    # Additional nuance from v1: considering remaining capacity proportion
    remaining_capacity_proportion = (bins_remain_cap / (1 + np.sum(bins_remain_cap))) * tie_breaker_coef
    priority += (bins_remain_cap >= item) * remaining_capacity_proportion
    
    return priority
```
