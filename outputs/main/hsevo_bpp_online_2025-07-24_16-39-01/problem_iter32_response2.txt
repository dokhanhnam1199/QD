```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, fit score, and a nuanced tie-breaker for effective prioritization.
    Favors bins that are almost full and balances multiple factors.
    """
    epsilon = 1e-6  # Small value to avoid division by zero
    tie_breaker_coef = 0.008  # Coefficient for tie-breaker
    
    # Calculate utilization factor and fit score
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    relative_size = item / np.maximum(bins_remain_cap, epsilon)
    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(utilization_factor) * 0.7 + fit_score * 0.3, 
                        -np.inf)
    
    # Introduce a nuanced tie-breaker that considers both bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + 
                                               (bins_remain_cap / (1 + np.sum(bins_remain_cap))) * tie_breaker_coef)
    
    # Combine the priority score with the tie-breaker and slightly favor bins that are almost full
    priority += tie_breaker
    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - np.abs(utilization_factor)) * 0.1
    
    return priority
```
