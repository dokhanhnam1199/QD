```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced priority function that combines multiple factors for effective bin selection.
    """
    # Calculate the fraction of remaining capacity after packing the item
    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate the absolute difference between the remaining capacity and the item size
    remaining_diff = np.abs(bins_remain_cap - item)
    
    # Priority score for bins that can fit the item, using a combination of remaining fraction and difference
    priority = np.where(bins_remain_cap >= item, -remaining_fraction + np.exp(-remaining_diff / item), -np.inf)
    
    # Introduce a tie-breaker based on the bin index to favor bins with lower indices
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Slightly favor bins that are almost full to minimize waste
    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)
    priority += almost_full_bins * (1 - remaining_fraction) * 0.1
    
    return priority
```
