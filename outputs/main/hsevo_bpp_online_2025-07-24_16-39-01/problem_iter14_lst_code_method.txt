{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 6.092855021862127e-07, tie_breaker_coef: float = 0.054746423211797395) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 6.092855021862127e-07, tie_breaker_coef: float = 0.054746423211797395) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 6.092855021862127e-07, tie_breaker_coef: float = 0.054746423211797395) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-9)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3)\n    \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines prioritizing bins with just enough capacity and a robust tie-breaking strategy.\n    Utilizes a mix of remaining capacity and random noise for effective tie-breaking.\n    \"\"\"\n    # Prioritize bins that have just enough capacity for the item\n    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Add a factor considering the proportion of remaining capacity and a small random noise for tie-breaking\n    num_bins = len(bins_remain_cap)\n    priority_scores += 0.1 * np.where(bins_remain_cap >= item, (1 - bins_remain_cap), 0) + np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3 + np.random.rand(*priority_scores.shape) * 1e-6\n    \n    return priority_scores\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a heuristic that prioritizes bins based on their remaining capacity and utilization.\n    It combines the factors of having just enough capacity for the item and the overall utilization of the bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # and also have a high overall utilization\n    \n    # First, filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    \n    # Calculate the utilization of the bin after adding the item\n    # Assuming the bin capacity is 1.0 (or normalize it to 1.0)\n    bin_utilization_after_addition = (1.0 - remaining_after_addition) / 1.0\n    \n    # Priority score is a combination of the negative remaining capacity (to prioritize bins with just enough capacity)\n    # and the bin utilization after adding the item (to prioritize bins that are more full)\n    priority_scores_valid = -remaining_after_addition + bin_utilization_after_addition\n    \n    # Create an array to store the priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    \n    # Assign the calculated priority scores to the valid bins\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    return priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines effective prioritization of bins with just enough capacity and robust tie-breaking.\n    Uses a utilization factor and a small random noise for tie-breaking.\n    \"\"\"\n    # Filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # Calculate the priority score for valid bins\n    # Use a combination of negative remaining capacity and a utilization factor\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(valid_bins, \n                                -(bins_remain_cap - item) +  # Prioritize bins with just enough capacity\n                                np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3 +  # Tie-breaker based on bin index\n                                np.random.uniform(0, 1e-6, size=num_bins),  # Random noise for tie-breaking\n                                -np.inf)  # Negative infinity for bins that cannot fit the item\n    \n    return priority_scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a heuristic that prioritizes bins based on their remaining capacity and utilization.\n    It combines the factors of having just enough capacity for the item and the overall utilization of the bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # and also have a high overall utilization\n    \n    # First, filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    \n    # Calculate the utilization of the bin after adding the item\n    # Assuming the bin capacity is 1.0 (or normalize it to 1.0)\n    bin_utilization_after_addition = (1.0 - remaining_after_addition) / 1.0\n    \n    # Priority score is a combination of the negative remaining capacity (to prioritize bins with just enough capacity)\n    # and the bin utilization after adding the item (to prioritize bins that are more full)\n    priority_scores_valid = -remaining_after_addition + bin_utilization_after_addition\n    \n    # Create an array to store the priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    \n    # Assign the calculated priority scores to the valid bins\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a more sophisticated heuristic that combines multiple factors for effective prioritization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # For bins that have enough capacity, calculate the priority score\n    # We want to prioritize bins that have just enough capacity for the item (to maximize utilization)\n    # and also consider the absolute remaining capacity (to avoid leaving too much empty space)\n    priority_scores = np.where(bins_remain_cap >= item, \n                               -(np.abs(remaining_cap_after_addition)) +  # prioritize bins with just enough capacity\n                               0.01 * bins_remain_cap,  # slightly prioritize bins with more remaining capacity\n                               -np.inf)  # bins that can't fit the item get -inf priority\n    \n    return priority_scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a more sophisticated heuristic that combines multiple factors for effective prioritization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # For bins that have enough capacity, calculate the priority score\n    # We want to prioritize bins that have just enough capacity for the item (to maximize utilization)\n    # and also consider the absolute remaining capacity (to avoid leaving too much empty space)\n    priority_scores = np.where(bins_remain_cap >= item, \n                               -(np.abs(remaining_cap_after_addition)) +  # prioritize bins with just enough capacity\n                               0.01 * bins_remain_cap,  # slightly prioritize bins with more remaining capacity\n                               -np.inf)  # bins that can't fit the item get -inf priority\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a heuristic that prioritizes bins based on their remaining capacity and utilization.\n    It combines the factors of having just enough capacity for the item and the overall utilization of the bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # and also have a high overall utilization\n    \n    # First, filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap[valid_bins] - item\n    \n    # Calculate the utilization of the bin after adding the item\n    # Assuming the bin capacity is 1.0 (or normalize it to 1.0)\n    bin_utilization_after_addition = (1.0 - remaining_after_addition) / 1.0\n    \n    # Priority score is a combination of the negative remaining capacity (to prioritize bins with just enough capacity)\n    # and the bin utilization after adding the item (to prioritize bins that are more full)\n    priority_scores_valid = -remaining_after_addition + bin_utilization_after_addition\n    \n    # Create an array to store the priority scores for all bins\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    \n    # Assign the calculated priority scores to the valid bins\n    priority_scores[valid_bins] = priority_scores_valid\n    \n    return priority_scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a mutated heuristic that combines multiple factors for effective prioritization.\n    It prioritizes bins that have just enough capacity for the item and are relatively more empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # So, we use a combination of the negative of the remaining capacity after adding the item and the current remaining capacity\n    # If the item doesn't fit, the priority score is negative infinity\n    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item) + 0.1 * bins_remain_cap, -np.inf)\n    \n    return priority_scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a heuristic that combines the remaining capacity \n    and the utilization of the bin to determine the priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # Here, we assume the initial capacity is the maximum remaining capacity seen so far\n    max_remain_cap = np.max(bins_remain_cap)\n    \n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # and also have a high utilization (i.e., low remaining capacity)\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        # Combine the negative of the remaining capacity after adding the item \n        # and the utilization of the bin (1 - remaining capacity / initial capacity)\n        -(bins_remain_cap - item) + (1 - bins_remain_cap / max_remain_cap), \n        -np.inf  # If the item doesn't fit, the priority score is negative infinity\n    )\n    \n    return priority_scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and 'fullness' with a tie-breaker based on bin index and random noise.\n    \"\"\"\n    # Calculate max capacity assuming all bins have the same max capacity\n    max_capacity = np.max(bins_remain_cap) + item\n    \n    # Priority score for bins that can fit the item\n    mask = bins_remain_cap >= item\n    priority = np.where(mask, \n                        -(bins_remain_cap - item) + 0.1 * (max_capacity - bins_remain_cap - item) / max_capacity, \n                        -np.inf)\n    \n    # Add a tie-breaker based on bin index and random noise\n    num_bins = len(bins_remain_cap)\n    priority = np.where(priority != -np.inf, \n                        priority + np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, 1e-6, size=num_bins), \n                        -np.inf)\n    \n    # Normalize scores to avoid extreme values\n    finite_scores = priority[np.isfinite(priority)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            priority[np.isfinite(priority)] = (finite_scores - min_score) / (max_score - min_score)\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for adding an item to bins, combining remaining capacity, \n    utilization factor, and a simple tie-breaker based on bin index.\n    \"\"\"\n    # Calculate priority score as a combination of negative remaining capacity \n    # after addition and the proportion of the remaining capacity that the item occupies\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        -(remaining_cap_after_addition) + (item / bins_remain_cap), \n        -np.inf\n    )\n    \n    # Add a simple tie-breaker based on bin index to favor earlier bins\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))), \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for adding an item to bins, combining remaining capacity, \n    utilization factor, and a simple tie-breaker based on bin index.\n    \"\"\"\n    # Calculate priority score as a combination of negative remaining capacity \n    # after addition and the proportion of the remaining capacity that the item occupies\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        -(remaining_cap_after_addition) + (item / bins_remain_cap), \n        -np.inf\n    )\n    \n    # Add a simple tie-breaker based on bin index to favor earlier bins\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))), \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and 'fullness' with a tie-breaker based on bin index and random noise.\n    \"\"\"\n    # Calculate max capacity assuming all bins have the same max capacity\n    max_capacity = np.max(bins_remain_cap) + item\n    \n    # Priority score for bins that can fit the item\n    mask = bins_remain_cap >= item\n    priority = np.where(mask, \n                        -(bins_remain_cap - item) + 0.1 * (max_capacity - bins_remain_cap - item) / max_capacity, \n                        -np.inf)\n    \n    # Add a tie-breaker based on bin index and random noise\n    num_bins = len(bins_remain_cap)\n    priority = np.where(priority != -np.inf, \n                        priority + np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, 1e-6, size=num_bins), \n                        -np.inf)\n    \n    # Normalize scores to avoid extreme values\n    finite_scores = priority[np.isfinite(priority)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            priority[np.isfinite(priority)] = (finite_scores - min_score) / (max_score - min_score)\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for adding an item to bins, combining remaining capacity, \n    utilization factor, and a simple tie-breaker based on bin index.\n    \"\"\"\n    # Calculate priority score as a combination of negative remaining capacity \n    # after addition and the proportion of the remaining capacity that the item occupies\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        -(remaining_cap_after_addition) + (item / bins_remain_cap), \n        -np.inf\n    )\n    \n    # Add a simple tie-breaker based on bin index to favor earlier bins\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))), \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for adding an item to bins, combining remaining capacity, \n    utilization factor, and a simple tie-breaker based on bin index.\n    \"\"\"\n    # Calculate priority score as a combination of negative remaining capacity \n    # after addition and the proportion of the remaining capacity that the item occupies\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        -(remaining_cap_after_addition) + (item / bins_remain_cap), \n        -np.inf\n    )\n    \n    # Add a simple tie-breaker based on bin index to favor earlier bins\n    num_bins = len(bins_remain_cap)\n    priority_scores = np.where(priority_scores != -np.inf, \n                               priority_scores + np.log(num_bins / (1 + np.arange(num_bins))), \n                               -np.inf)\n    \n    return priority_scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and 'fullness' with a tie-breaker based on bin index and random noise.\n    \"\"\"\n    # Calculate max capacity assuming all bins have the same max capacity\n    max_capacity = np.max(bins_remain_cap) + item\n    \n    # Priority score for bins that can fit the item\n    mask = bins_remain_cap >= item\n    priority = np.where(mask, \n                        -(bins_remain_cap - item) + 0.1 * (max_capacity - bins_remain_cap - item) / max_capacity, \n                        -np.inf)\n    \n    # Add a tie-breaker based on bin index and random noise\n    num_bins = len(bins_remain_cap)\n    priority = np.where(priority != -np.inf, \n                        priority + np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, 1e-6, size=num_bins), \n                        -np.inf)\n    \n    # Normalize scores to avoid extreme values\n    finite_scores = priority[np.isfinite(priority)]\n    if len(finite_scores) > 0:\n        min_score, max_score = np.min(finite_scores), np.max(finite_scores)\n        if max_score != min_score:\n            priority[np.isfinite(priority)] = (finite_scores - min_score) / (max_score - min_score)\n    \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}