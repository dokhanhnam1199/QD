```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a dynamic prioritization strategy that considers both the remaining capacity and the 'fullness' of the bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin
    # We want to prioritize bins that have just enough capacity for the item and are relatively full
    # So, we use a combination of the negative of the remaining capacity after adding the item and the current fullness of the bin
    # If the item doesn't fit, the priority score is negative infinity
    max_capacity = np.max(bins_remain_cap) + item  # assuming all bins have the same max capacity
    priority_scores = np.where(bins_remain_cap >= item, 
                               -(bins_remain_cap - item) + (max_capacity - bins_remain_cap - item) / max_capacity, 
                               -np.inf)
    
    # Normalize the scores to avoid extreme values
    finite_scores = priority_scores[np.isfinite(priority_scores)]
    if len(finite_scores) > 0:
        min_score, max_score = np.min(finite_scores), np.max(finite_scores)
        if max_score != min_score:
            priority_scores[np.isfinite(priority_scores)] = (finite_scores - min_score) / (max_score - min_score)
    
    return priority_scores
```
