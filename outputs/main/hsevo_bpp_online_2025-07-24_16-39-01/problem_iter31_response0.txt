import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0005548667061362003, tie_breaker_coef: float = 0.09377484182605285, 
                utilization_weight: float = 0.586691509445321, remaining_capacity_weight: float = 0.19401574340976638, 
                tie_breaker_log_weight: float = 0.4281449050819258, tie_breaker_norm_weight: float = 0.4991053651822197) -> np.ndarray:
    """
    Enhanced priority function combining utilization factor, remaining capacity, and a sophisticated tie-breaker.
    """
    # Normalize remaining capacity to enhance comparison
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate a weighted utilization factor that considers both the item size and bin capacity
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    weighted_utilization = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) * utilization_weight + norm_remain_cap * remaining_capacity_weight, -np.inf)
    
    # Priority score for bins that can fit the item, emphasizing both utilization and remaining capacity
    priority = weighted_utilization
    
    # Introduce a more nuanced tie-breaker based on bin index and remaining capacity
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_log_weight + norm_remain_cap * tie_breaker_norm_weight) * tie_breaker_coef)
    priority += tie_breaker
    
    return priority
