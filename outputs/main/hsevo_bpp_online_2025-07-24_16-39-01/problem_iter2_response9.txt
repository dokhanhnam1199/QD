```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority score for each bin based on remaining capacity and item size.
    Bins with just enough capacity get highest priority, with tie-breaks by randomness.
    """
    # Calculate priority scores: bins with remaining capacity closest to item size get highest priority
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Add a small random noise to break ties
    finite_scores = priority_scores[np.isfinite(priority_scores)]
    if len(finite_scores) > 0:
        noise = np.random.uniform(0, 1e-6, size=len(priority_scores))
        priority_scores = np.where(np.isfinite(priority_scores), priority_scores + noise, -np.inf)
    
    return priority_scores
```
