```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines weighted utilization factor, remaining capacity, and a sophisticated tie-breaker for online Bin Packing Problem.
    """
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    epsilon = 1e-6  # Avoid division by zero
    
    # Weighted utilization factor considering item size and bin capacity
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    weighted_utilization = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) * 0.7 + norm_remain_cap * 0.3, -np.inf)
    
    # Sophisticated tie-breaker based on bin remaining capacity and index
    num_bins = len(bins_remain_cap)
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * 0.5 + 
                                                (bins_remain_cap / (item + epsilon)) * 0.5) * tie_breaker_coef)
    
    # Combine weighted utilization with tie-breaker and a small random noise for further tie-breaking
    priority = np.where(weighted_utilization != -np.inf, weighted_utilization + tie_breaker + np.random.uniform(0, 1e-6, size=num_bins), -np.inf)
    
    return priority
```
