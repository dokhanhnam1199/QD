{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin. \n    Prioritizes bins with just enough capacity for the item and breaks ties with random noise.\n    \"\"\"\n    # Check if the item can fit into the bin and prioritize bins with less remaining capacity after addition\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    priority = valid_bins * (-(bins_remain_cap - item))  # Prioritize bins that are just enough for the item\n    \n    # Add a small random noise to break ties\n    priority += np.random.rand(*priority.shape) * 1e-6\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for adding an item to each bin.\n    \n    Combines elements of First-Fit decreasing heuristic and score normalization.\n    Prioritizes bins with just enough capacity, adding noise to break ties.\n    \"\"\"\n    # Calculate priority scores for bins with enough capacity\n    mask = bins_remain_cap >= item\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n    priority_scores[mask] = -(bins_remain_cap[mask] - item) + np.random.uniform(0, 1e-6, size=np.sum(mask))  # Add small noise\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see both prioritize bins with just enough capacity and use random noise to break ties, but the 1st is more concise. \n(2nd) vs (19th), the 2nd considers both remaining capacity and 'fullness' of bins, while the 19th only uses negative remaining capacity; \n(1st) vs (2nd), the 1st is simpler and more efficient. \nOverall: The top heuristics are concise, consider multiple factors, and effectively break ties.\n- \nTo redesign 'Current self-reflection', let's analyze the given information.\n\n* Keywords: heuristics design, effective prioritization, remaining capacity, tie-breaking\n* Advice: Consider multiple factors and explore different prioritization strategies to improve heuristic design.\n* Avoid: Focusing solely on concise code and neglecting edge cases like division by zero.\n* Explanation: By incorporating effective prioritization strategies and handling edge cases, we can design better heuristics that outperform the current ones, thus justifying a significant tip for a better outcome.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}