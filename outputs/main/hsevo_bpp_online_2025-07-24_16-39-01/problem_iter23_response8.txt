```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit score, utilization, and a simple tie-breaker for online Bin Packing Problem.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Fit score: prioritize bins where the item fits well
    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition) / bins_remain_cap), -np.inf)
    
    # Utilization factor
    utilization_after_addition = 1.0 - remaining_cap_after_addition / bins_remain_cap
    utilization_score = np.where(bins_remain_cap >= item, utilization_after_addition, 0)
    
    # Combine fit score and utilization score
    priority_scores = fit_score + utilization_score
    
    # Simple tie-breaker based on bin index
    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3
    
    # Add tie-breaker to priority scores
    priority_scores = np.where(priority_scores != -np.inf, priority_scores + tie_breaker, -np.inf)
    
    # Add a small random noise for further tie-breaking
    random_noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priority_scores = np.where(priority_scores != -np.inf, priority_scores + random_noise, -np.inf)
    
    return priority_scores
```
