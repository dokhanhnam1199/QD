{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and remaining capacity for prioritization with a simple tie-breaker.\n    \"\"\"\n    # Calculate utilization factor, avoiding division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item, using a combination of utilization and remaining capacity\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor), -np.inf)\n    \n    # Add a tie-breaker based on bin index with a small coefficient\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a heuristic that combines the remaining capacity \n    and the utilization of the bin to determine the priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # Here, we assume the initial capacity is the maximum remaining capacity seen so far\n    max_remain_cap = np.max(bins_remain_cap)\n    \n    # Calculate the priority score for each bin\n    # We want to prioritize bins that have just enough capacity for the item\n    # and also have a high utilization (i.e., low remaining capacity)\n    priority_scores = np.where(\n        bins_remain_cap >= item, \n        # Combine the negative of the remaining capacity after adding the item \n        # and the utilization of the bin (1 - remaining capacity / initial capacity)\n        -(bins_remain_cap - item) + (1 - bins_remain_cap / max_remain_cap), \n        -np.inf  # If the item doesn't fit, the priority score is negative infinity\n    )\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristics (1st) with the worst (20th), we see that the top heuristics use a combination of utilization factor, remaining capacity, and a tie-breaker, whereas the worst ones either lack a tie-breaker or use a less effective combination. \nComparing (1st) vs (2nd), we see that they are identical, indicating that the top two heuristics are the same. \n(3rd) vs (4th), we observe a change in the epsilon value and the tie-breaker coefficient. \n(19th) vs (20th), we see that the 19th heuristic uses a simpler tie-breaker, while the 20th uses a more complex one with normalization. \nOverall: The top heuristics tend to use a more sophisticated combination of factors and tie-breakers.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' while avoiding the pitfalls of 'Ineffective self-reflection'. Here's a breakdown:\n\n* **Keywords**: Prioritization, Multiple factors, Tie-breaking, Simplicity\n* **Advice**: Combine relevant factors, use effective tie-breakers, and prioritize simplicity.\n* **Avoid**: Unnecessary complexity, ineffective tie-breaking, and overly simplistic prioritization.\n* **Explanation**: By focusing on effective prioritization, combining multiple factors, and using simple yet effective tie-breaking methods, we can create better heuristics that balance competing demands and achieve improved performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}