```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Improved prioritization function for online Bin Packing Problem.
    
    Combines the remaining capacity and a 'best-fit' strategy with an effective tie-breaker.
    """
    # Calculate the remaining capacity after placing the item, considering only bins that can fit the item
    remaining_capacity_after = bins_remain_cap - item
    
    # Priority score for bins that can fit the item, focusing on 'best-fit' (smallest remaining capacity)
    priority = np.where(bins_remain_cap >= item, -np.abs(remaining_capacity_after), -np.inf)
    
    # Enhance the priority with a tie-breaker that considers both the bin's remaining capacity and its index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + (1 / (1 + remaining_capacity_after) * tie_breaker_coef))
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
