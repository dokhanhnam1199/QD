```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function combining multiple factors for online Bin Packing Problem.
    """
    # Calculate the utilization factor after placing the item, handling potential division by zero
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Calculate a 'fit score' that rewards bins where the item fits well (leaving minimal remaining capacity)
    fit_score = np.where(bins_remain_cap >= item, -np.abs(bins_remain_cap - item), -np.inf)
    
    # Priority is a weighted sum of utilization factor and fit score
    priority = 0.5 * utilization_factor + 0.5 * fit_score
    
    # Introduce a tie-breaker based on bin index to favor bins that were created earlier
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Add a small random noise to the priority for bins that can fit the item, to avoid deterministic tie-breaks
    np.random.seed(0)  # For reproducibility
    random_noise = (bins_remain_cap >= item) * np.random.uniform(-tie_breaker_coef, tie_breaker_coef, size=num_bins)
    priority += random_noise
    
    return priority
```
