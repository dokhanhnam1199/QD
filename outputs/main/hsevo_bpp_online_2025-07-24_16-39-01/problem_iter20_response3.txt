```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, remaining capacity, and bin index for prioritization.
    """
    # Calculate utilization factor after adding the item
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-8)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, -(np.abs(utilization_factor - 0.5) + 0.1 * (1 - bins_remain_cap / np.max(bins_remain_cap))), -np.inf)
    
    # Add a tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * np.log(num_bins / (1 + np.arange(num_bins))) * 1e-6
    
    # Introduce a small random noise for further tie-breaking
    np.random.seed(int(item * 1e6))  
    priority += (bins_remain_cap >= item) * np.random.uniform(-1e-8, 1e-8, size=num_bins)
    
    return priority
```
