```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin.
    
    Prioritizes bins with just enough capacity, using negative remaining capacity after addition,
    and adds a small noise to break ties.
    """
    # Mask for bins that can accommodate the item
    mask = bins_remain_cap >= item
    
    # Initialize priority scores with negative infinity for bins that are too small
    priority = np.full_like(bins_remain_cap, -np.inf)
    
    # For valid bins, calculate priority as negative remaining capacity after addition with a small noise
    priority[mask] = -(bins_remain_cap[mask] - item) + np.random.uniform(0, 1e-6, np.sum(mask))
    
    return priority
```
