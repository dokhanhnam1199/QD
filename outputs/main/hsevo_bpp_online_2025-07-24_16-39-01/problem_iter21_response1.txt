```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function combining multiple factors for effective bin selection in online Bin Packing Problem.
    """
    # Mask for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    
    # Calculate the 'First-Fit Decreasing Height' inspired score, normalized by bin capacity
    ff_score = (bins_remain_cap - item) / (bins_remain_cap.max() + epsilon)
    
    # Utilization factor, avoiding division by zero
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Combine utilization factor and a 'best-fit' criterion for prioritization
    priority = np.where(valid_bins, -np.abs(utilization_factor) + ff_score, -np.inf)
    
    # Introduce a randomness component with a decaying factor based on bin index for tie-breaking
    num_bins = len(bins_remain_cap)
    randomness_component = valid_bins * (np.random.rand(num_bins) * np.exp(-np.arange(num_bins) / num_bins))
    
    # Add tie-breaker components
    priority += tie_breaker_coef * (valid_bins * (np.log(num_bins / (1 + np.arange(num_bins)))) + randomness_component)
    
    return priority
```
