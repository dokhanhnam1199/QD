```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor, remaining capacity, and a tie-breaker for effective prioritization.
    """
    # Calculate utilization factor, avoiding division by zero
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-6)
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, 
                        -np.abs(utilization_factor) +  # prioritize bins with just enough capacity
                        0.01 * bins_remain_cap,  # slightly prioritize bins with more remaining capacity
                        -np.inf)
    
    # Add a tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 0.001)
    
    return priority
```
