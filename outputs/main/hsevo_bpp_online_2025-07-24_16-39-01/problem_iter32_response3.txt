```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fitting score, utilization factor, and a sophisticated tie-breaker for effective prioritization.
    """
    epsilon = 1e-6  # Small value to avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    
    # Calculate the 'fitting score' based on how well the item fits into the bin
    fitting_score = np.where(bins_remain_cap >= item, 
                             1 - np.abs((bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)), 
                             0)  # Score is 0 if the item cannot fit
    
    # Calculate utilization factor
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Priority score for bins that can fit the item, combining fitting score and utilization factor
    priority = np.where(bins_remain_cap >= item, 
                        fitting_score - np.abs(utilization_factor) * 0.5,  # Balance between fitting score and utilization
                        -np.inf)
    
    # Sophisticated tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    tie_breaker = np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
