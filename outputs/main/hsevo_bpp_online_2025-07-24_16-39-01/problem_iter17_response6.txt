```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines utilization factor and a simple tie-breaker for effective prioritization.
    """
    epsilon = 1e-6  # Avoid division by zero
    # Calculate a utilization factor that rewards bins with just enough capacity
    utilization_factor = np.exp(-((bins_remain_cap - item) / (item + epsilon)) ** 2)
    
    # Assign a high priority score to bins that can fit the item
    priority = np.where(bins_remain_cap >= item, utilization_factor, -np.inf)
    
    # Introduce a simple tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    tie_breaker = (bins_remain_cap >= item) * np.log(num_bins / (1 + np.arange(num_bins))) * 1e-3
    
    # Combine the priority score with the tie-breaker
    priority += tie_breaker
    
    return priority
```
