[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.\n    Weights are chosen based on the analysis of top-ranked heuristics.\n    \"\"\"\n    # Constants\n    epsilon = 0.0006462524660114609  # Avoid division by zero\n    tie_breaker_coef = 0.006809150777702792  # Coefficient for tie-breaker\n    utilization_factor_weight = 0.9834522541574382  # Weight for utilization factor\n    fit_score_weight = 0.4501654097793421  # Weight for fit score\n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for effective bin selection.\n    \"\"\"\n    epsilon = 1e-6  # Avoid division by zero\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Calculate the fraction of remaining capacity after packing the item\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Calculate the fit factor: how well the item fits into the bin\n    fit_factor = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    fit_factor = np.where(bins_remain_cap >= item, fit_factor, -np.inf)  # Penalize bins that can't fit the item\n    \n    # Combine remaining fraction and fit factor into a priority score\n    priority = -remaining_fraction + fit_factor\n    \n    # Introduce a tie-breaker based on the bin index to favor bins with lower indices\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Slightly favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - remaining_fraction) * 0.1\n    \n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Constants\n    epsilon = 1e-6  \n    tie_breaker_coef = 1e-3  \n    utilization_factor_weight = 0.9834522541574382  \n    fit_score_weight = 0.4501654097793421  \n\n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for online Bin Packing Problem.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Fit score and utilization factor\n    fit_score = np.where(bins_remain_cap >= item, -(np.abs(remaining_cap_after_addition) / bins_remain_cap), -np.inf)\n    utilization_after_addition = 1.0 - remaining_cap_after_addition / bins_remain_cap\n    utilization_score = np.where(bins_remain_cap >= item, utilization_after_addition, 0)\n    \n    # Combine fit score and utilization score\n    priority_scores = fit_score + utilization_score\n    \n    # Simple tie-breaker based on bin index with a small coefficient\n    tie_breaker = np.log(len(bins_remain_cap) / (1 + np.arange(len(bins_remain_cap)))) * 1e-3\n    \n    # Add tie-breaker and a small random noise for further tie-breaking\n    priority_scores = np.where(priority_scores != -np.inf, priority_scores + tie_breaker + np.random.uniform(0, 1e-6, size=len(bins_remain_cap)), -np.inf)\n    \n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for effective bin selection.\n    \"\"\"\n    # Calculate the fraction of remaining capacity after packing the item\n    epsilon = 1e-6  # Avoid division by zero\n    remaining_fraction = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    \n    # Priority score for bins that can fit the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, -remaining_fraction + np.exp(-np.abs(bins_remain_cap - item) / item), -np.inf)\n    \n    # Introduce a tie-breaker based on the bin index\n    num_bins = len(bins_remain_cap)\n    tie_breaker_coef = 1e-3\n    priority += valid_bins * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Favor bins that are almost full\n    almost_full_bins = np.logical_and(valid_bins, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - remaining_fraction) * 0.1\n    \n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Heuristics combining utilization factors and a simple tie-breaker for effective bin selection.\n    \"\"\"\n    epsilon = 1e-6  # Avoid division by zero\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Calculate post-utilization and pre-utilization factors\n    post_utilization = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    pre_utilization = bins_remain_cap / np.maximum(bins_remain_cap + item, epsilon)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, -np.abs(post_utilization) + 0.5 * pre_utilization, -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Constants for epsilon and tie-breaker coefficient\n    epsilon = 1e-6  \n    tie_breaker_coef = 1e-3  \n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item, combining utilization factor and fit score\n    priority = np.where(bins_remain_cap >= item, \n                        -np.abs(utilization_factor) * 0.98 + fit_score * 0.45, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)\n    \n    # Favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - utilization_factor) * 0.1\n    \n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.\n    \"\"\"\n    # Calculate utilization factor and fit score\n    epsilon = 1e-6  # Small value to avoid division by zero\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Combine utilization factor and fit score with a bias towards utilization factor\n                        -np.abs(utilization_factor) * 0.98 + fit_score * 0.45, \n                        -np.inf)\n    \n    # Add a simple tie-breaker based on bin index\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * 0.007)\n    \n    # Slightly favor bins that are almost full to minimize waste\n    almost_full_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap - item < item * 0.1)\n    priority += almost_full_bins * (1 - utilization_factor) * 0.1\n    \n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor and fit score with a balanced tie-breaker.\n    \"\"\"\n    # Constants to avoid division by zero and for tie-breaker\n    epsilon = 1e-6  \n    tie_breaker_coef = 1e-3  \n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    fit_score = 1 - (item / np.maximum(bins_remain_cap, epsilon))\n    \n    # Priority score for bins that can fit the item, balancing utilization and fit\n    priority = np.where(bins_remain_cap >= item, -np.abs(utilization_factor) - fit_score * 0.1, -np.inf)\n    \n    # Enhanced tie-breaker: combines bin index and a small randomness component\n    num_bins = len(bins_remain_cap)\n    priority += (bins_remain_cap >= item) * ((np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + \n                                              (np.random.rand(num_bins) * tie_breaker_coef / (10 * (1 + np.arange(num_bins)))))\n    \n    # Additional consideration for remaining capacity to differentiate bins with similar utilization\n    priority += (bins_remain_cap >= item) * (- (bins_remain_cap - item) / (1 + bins_remain_cap.max()) * 0.01)\n    \n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines utilization factor, fit score, and a simple tie-breaker for effective prioritization.\n    \"\"\"\n    epsilon = 1e-6  # Small value to avoid division by zero\n    utilization_factor_weight = 0.98  # Weight for utilization factor\n    fit_score_weight = 0.45  # Weight for fit score\n    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker\n    \n    # Calculate utilization factor and fit score\n    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)\n    relative_size = item / np.maximum(bins_remain_cap, epsilon)\n    fit_score = np.where(bins_remain_cap >= item, 1 - relative_size, 0)\n    \n    # Priority score for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, \n                        -np.abs(utilization_factor) * utilization_factor_weight + fit_score * fit_score_weight, \n                        -np.inf)\n    \n    # Introduce a tie-breaker that considers both bin index and remaining capacity\n    num_bins = len(bins_remain_cap)\n    tie_breaker = (bins_remain_cap >= item) * (\n        np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef + \n        bins_remain_cap / (1 + item) * tie_breaker_coef * 0.1\n    )\n    \n    # Combine the priority score with the tie-breaker\n    priority += tie_breaker\n    \n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 330.875200092308,
    "mi": 86.42581849419302,
    "token_count": 195.0,
    "exec_success": true
  }
]