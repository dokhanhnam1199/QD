```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Heuristic combining refined utilization factor and bin index tie-breaker.
    """
    epsilon = 1e-6  # Avoid division by zero
    tie_breaker_coef = 1e-3  # Coefficient for tie-breaker
    
    # Refined utilization factor
    utilization_factor = np.exp(-((bins_remain_cap - item) / (item + epsilon)) ** 2)
    utilization_score = bins_remain_cap / (item + epsilon)  # Additional utilization score
    
    # Priority score for bins that can fit the item
    priority = np.where(bins_remain_cap >= item, utilization_factor * utilization_score, -np.inf)
    
    # Incorporate a tie-breaker based on bin index
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef
    
    # Normalize priority scores
    max_priority = np.max(priority)
    if max_priority != -np.inf:  
        priority = np.where(priority != -np.inf, priority - max_priority, -np.inf)
    
    return priority
```
