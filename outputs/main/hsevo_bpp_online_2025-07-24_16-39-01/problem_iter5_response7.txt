```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                random_noise_upper_bound: float = 0.000512910372337147, 
                invalid_bin_priority: float = -3582939133.573016) -> np.ndarray:
    """
    Priority score for each bin by considering remaining capacity and bin index, with random tie-breaking.
    """
    # Calculate the number of available bins
    num_bins = len(bins_remain_cap)
    
    # Prioritize bins with enough capacity, considering remaining capacity and bin index
    priority = np.where(bins_remain_cap >= item, 
                        -(bins_remain_cap - item) + np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, random_noise_upper_bound, size=num_bins), 
                        invalid_bin_priority)
    
    return priority
```
