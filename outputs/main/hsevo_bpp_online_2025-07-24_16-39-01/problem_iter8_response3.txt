```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin.
    Combines effective prioritization with a robust tie-breaking strategy.
    """
    # Prioritize bins with just enough capacity
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Tie-break using a combination of remaining capacity and bin index
    num_bins = len(bins_remain_cap)
    priority_scores = np.where(priority_scores != -np.inf, 
                               priority_scores + 0.1 * bins_remain_cap.max() - 0.1 * bins_remain_cap + np.log(num_bins / (1 + np.arange(num_bins))), 
                               -np.inf)
    
    return priority_scores
```
