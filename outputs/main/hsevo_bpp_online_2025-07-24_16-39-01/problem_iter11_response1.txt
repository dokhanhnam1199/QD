```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines remaining capacity and 'fullness' with a tie-breaker based on bin index and random noise.
    """
    # Calculate max capacity assuming all bins have the same max capacity
    max_capacity = np.max(bins_remain_cap) + item
    
    # Priority score for bins that can fit the item
    mask = bins_remain_cap >= item
    priority = np.where(mask, 
                        -(bins_remain_cap - item) + 0.1 * (max_capacity - bins_remain_cap - item) / max_capacity, 
                        -np.inf)
    
    # Add a tie-breaker based on bin index and random noise
    num_bins = len(bins_remain_cap)
    priority = np.where(priority != -np.inf, 
                        priority + np.log(num_bins / (1 + np.arange(num_bins))) + np.random.uniform(0, 1e-6, size=num_bins), 
                        -np.inf)
    
    # Normalize scores to avoid extreme values
    finite_scores = priority[np.isfinite(priority)]
    if len(finite_scores) > 0:
        min_score, max_score = np.min(finite_scores), np.max(finite_scores)
        if max_score != min_score:
            priority[np.isfinite(priority)] = (finite_scores - min_score) / (max_score - min_score)
    
    return priority
```
