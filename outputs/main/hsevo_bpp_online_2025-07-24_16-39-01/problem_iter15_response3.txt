```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for the tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced prioritization function that considers both the fit of the item to the bin and the bin's remaining capacity,
    with a sophisticated tie-breaking mechanism based on both bin index and remaining capacity.
    """
    # Calculate a score that reflects how well the item fits into the bin, avoiding division by zero
    fit_score = 1 - (item / np.maximum(bins_remain_cap, epsilon))
    
    # Calculate a normalized remaining capacity score to encourage packing items tightly
    remain_cap_score = bins_remain_cap / (item + epsilon)
    
    # Priority score for bins that can fit the item, combining fit score and remaining capacity score
    priority = np.where(bins_remain_cap >= item, -fit_score + remain_cap_score * 0.1, -np.inf)
    
    # Enhanced tie-breaking based on both bin index and remaining capacity to diversify bin selection
    num_bins = len(bins_remain_cap)
    tie_breaker = (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef) + (bins_remain_cap / np.max(bins_remain_cap) * tie_breaker_coef * 0.1)
    priority += (bins_remain_cap >= item) * tie_breaker
    
    return priority
```
