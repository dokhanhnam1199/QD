```python
import numpy as np

epsilon = 1e-6  # Small value to avoid division by zero
tie_breaker_coef = 1e-3  # Coefficient for tie-breaker

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that combines multiple factors for bin prioritization.
    """
    # Calculate the fraction of remaining capacity after placing the item
    remaining_fraction = (bins_remain_cap - item) / bins_remain_cap.max()
    
    # Calculate a score based on how well the item fits into the bin
    fit_score = np.where(bins_remain_cap >= item, 1 - np.abs((bins_remain_cap - item) / bins_remain_cap), -np.inf)
    
    # Calculate a utilization factor, avoiding division by zero
    utilization_factor = (bins_remain_cap - item) / np.maximum(bins_remain_cap, epsilon)
    
    # Priority score is a weighted sum of fit score and utilization factor
    priority = np.where(bins_remain_cap >= item, 0.7 * fit_score + 0.3 * utilization_factor, -np.inf)
    
    # Add a tie-breaker based on bin index with a small coefficient
    num_bins = len(bins_remain_cap)
    priority += (bins_remain_cap >= item) * (np.log(num_bins / (1 + np.arange(num_bins))) * tie_breaker_coef)
    
    # Introduce a small random noise for further tie-breaking
    np.random.seed(0)  # For reproducibility
    priority += (bins_remain_cap >= item) * np.random.uniform(0, tie_breaker_coef, size=num_bins)
    
    return priority
```
