```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                noise_weight: float = 4.9723798067088914e-05, 
                random_noise_upper_bound: float = 0.000512910372337147) -> np.ndarray:
    """
    Combines effective prioritization and tie-breaking strategies.
    Prioritizes bins with just enough capacity and breaks ties with a combination of random noise and bin index.
    """
    # Check if the item can fit into the bin
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Prioritize bins that are just enough for the item
    priority = valid_bins * (-(bins_remain_cap - item))
    
    # Add a small random noise and consider bin index to break ties, only for valid bins
    num_bins = len(bins_remain_cap)
    priority += valid_bins * (np.random.uniform(0, random_noise_upper_bound, size=num_bins) + np.log(num_bins / (1 + np.arange(num_bins)))) * noise_weight
    
    # Set a very low priority for invalid bins
    priority = np.where(valid_bins == 1, priority, -1e10)
    
    return priority
```
