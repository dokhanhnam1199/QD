```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to bins based on remaining capacity.

    Prioritizes bins that fit the item tightly, with a small random noise to break ties.
    """
    # Calculate priority scores: negative remaining capacity after adding the item
    priority_scores = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Add a small random noise to break ties
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priority_scores = np.where(np.isfinite(priority_scores), priority_scores + noise, priority_scores)
    
    return priority_scores
```
