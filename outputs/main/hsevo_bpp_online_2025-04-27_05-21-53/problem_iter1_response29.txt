```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Version 2 incorporates more nuanced considerations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Bin is large enough to accommodate the item.
            # Prioritize bins that are "almost full" after adding the item,
            # but penalize near-perfect fits to avoid creating too many bins
            # that can only hold very small items.
            new_cap = cap - item
            fill_ratio = 1 - (new_cap / cap)

            if new_cap > 0.01:  # Prevents division by zero and near-perfect fit penalty.
                priorities[i] = fill_ratio ** 2 # Square it to emphasize close fits

            else:
                 priorities[i] = -1 # Penalize bins that would have too little remaining space.


        else:
            # Bin is too small to accommodate the item. Set priority to a large negative number.
            priorities[i] = -1e9  # A very low priority to ensure it's not selected.

    return priorities
```
