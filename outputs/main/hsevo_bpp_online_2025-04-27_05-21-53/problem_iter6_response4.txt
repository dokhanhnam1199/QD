```python
import numpy as np

def priority_v2(item: float,
                  bins_remain_cap: np.ndarray,
                  exploration_weight: float = 0.4,
                  almost_full_boost: float = 2.5,
                  small_remainder_penalty: float = 1.1,
                  near_perfect_fit_penalty: float = 1.6,
                  moderate_fit_bonus: float = 1.0,
                  almost_full_threshold: float = 0.07,
                  small_remainder_threshold: float = 0.02,
                  near_perfect_fit_threshold: float = 0.04,
                  moderate_fit_threshold_low: float = 0.3,
                  moderate_fit_threshold_high: float = 0.8,
                  bin_diversity_boost: float = 0.2) -> np.ndarray:
    """
    Prioritizes bins based on a combination of factors, including remaining capacity,
    item size relative to bin size, and a penalty for creating small fragments.
    It incorporates a mechanism to encourage exploration and exploitation,
    and dynamically adjusts bin priorities based on remaining capacities,
    item sizes, and additional bonuses.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.
        exploration_weight (float): Weight for exploration factor.
        almost_full_boost (float): Boost for almost full bins.
        small_remainder_penalty (float): Penalty for small remainders.
        near_perfect_fit_penalty (float): Penalty for near perfect fits.
        moderate_fit_bonus (float): Bonus for moderate fits.
        almost_full_threshold (float): Threshold for considering a bin almost full (fraction of bin size).
        small_remainder_threshold (float): Threshold for considering a remainder small (fraction of bin size).
        near_perfect_fit_threshold (float): Threshold for considering a fit near perfect (fraction of bin size).
        moderate_fit_threshold_low: Lower threshold for moderate fit (fraction of bin size).
        moderate_fit_threshold_high: Higher threshold for moderate fit (fraction of bin size).
        bin_diversity_boost (float): Boost to encourage filling bins with diverse fill levels.

    Returns:
        np.ndarray: An array containing the priority score for each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get the lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Base Priority: Bin Utilization (Fill Ratio)
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins]

        # 2. Encourage Exploration (Adaptive): Prioritize less-utilized bins.
        # Adjust exploration based on how full the bins are on average.
        average_fill = 1 - np.mean(bins_remain_cap)
        adaptive_exploration_weight = exploration_weight * (1 - average_fill)  # Reduce exploration as bins fill
        exploration_factor = (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins]))
        priorities[feasible_bins] += adaptive_exploration_weight * exploration_factor

        # 3. Fill-Optimization: Prioritize bins that are closer to being full.
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += almost_full_boost

        # 4. Fragmentation Penalty: Discourage creating small remaining fragments.
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= small_remainder_penalty

        # 5. Near-Perfect Fit Penalty: Slightly discourage near perfect fits.
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= near_perfect_fit_penalty

        # 6. Moderate-Fit Bonus: Encourage balanced filling.
        moderate_fit = feasible_bins & ~almost_full & ~small_remainder & ~near_perfect_fit
        moderate_fit = moderate_fit & (remaining_capacity >= moderate_fit_threshold_low * bins_remain_cap) & (remaining_capacity <= moderate_fit_threshold_high * bins_remain_cap)
        priorities[moderate_fit] += moderate_fit_bonus

        # 7. Bin Diversity Boost: Encourage filling bins with different fill levels to prevent premature convergence.
        bin_fill_levels = 1 - (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap))
        diversity_score = np.std(bin_fill_levels)  # Standard deviation of fill levels
        priorities[feasible_bins] += bin_diversity_boost * diversity_score
        

    return priorities
```
