```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes almost full bins; penalizes near-perfect fits and small remainders."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    
    # Infeasible bins get lowest priority
    priorities[remaining_capacity < 0] = -np.inf
    
    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
      # Prioritize bins close to full
      almost_full_threshold = 0.1
      almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
      priorities[almost_full] += 10

      #Penalize Near-Perfect Fit.
      near_perfect_fit_threshold = 0.01
      near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
      priorities[near_perfect_fit] -= 5
        
      #Penalize small remainders to avoid fragmentation
      small_remainder_threshold = 0.2
      small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
      priorities[small_remainder] -= 2
      
      # Add a base priority based on how much space is used, but avoid dividing by zero
      utilization = item / bins_remain_cap
      priorities[feasible_bins] += utilization[feasible_bins]
      
    return priorities
```
