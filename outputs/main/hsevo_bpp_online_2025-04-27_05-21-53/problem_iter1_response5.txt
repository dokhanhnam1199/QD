```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This function uses a heuristic inspired by the heliocentric model:
    bins closer in capacity to the item's size are favored, as a more harmonious "fit" is sought,
    akin to the celestial spheres finding their proper place.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the difference between the bin capacity and the item size.
    diffs = np.abs(bins_remain_cap - item)

    # Normalize the differences. A smaller difference yields a higher priority.
    # Add a small epsilon to avoid division by zero and to handle cases where item > bin cap
    epsilon = 1e-9
    priorities = 1 / (diffs + epsilon)

    # Further refine the priority: bins with sufficient capacity should have a significantly increased priority.
    # Bins that cannot contain the item receive zero priority (a 'planetary orbit' that cannot contain the object).
    sufficient_capacity = bins_remain_cap >= item
    priorities = np.where(sufficient_capacity, priorities * (1 + (bins_remain_cap - item) / bins_remain_cap) , 0) # Scale priority by percentage filled if valid

    return priorities
```
