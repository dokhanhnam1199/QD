```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value (e.g., -inf) to penalize infeasible bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # Calculate the wasted space if the item is placed in each feasible bin.
        wasted_space = bins_remain_cap[feasible_bins] - item

        # Give higher priority to bins with less wasted space (First-Fit Decreasing heuristic inspiration).
        # Also, prioritize bins that are already relatively full to avoid creating many almost-empty bins.
        # Use a combination of inverse wasted space and current fullness to create the priority score.

        fullness = 1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) # Use max as normalization

        # Combine wasted space and current fullness to calculate priorities.
        priorities[feasible_bins] = 1.0 / (wasted_space + 1e-9) + fullness

        # Introduce some random component for diversity to explore more solutions. This could help in the long run.
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1  # Small random boost

        # Optionally boost almost-full bins
        almost_full_threshold = 0.95 * np.max(bins_remain_cap)
        almost_full_bins = bins_remain_cap[feasible_bins] >= almost_full_threshold
        priorities[feasible_bins][almost_full_bins] += 0.5  # Extra priority boost

    return priorities
```
