```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers multiple factors:
    1. Waste minimization: Favors bins where the remaining space after
       adding the item is small (but non-negative).
    2. Avoidance of near-full bins: Discourages adding to bins that are
       already close to full to prevent creating many near-full bins.
    3. "Just fit" bonus: Gives a bonus to bins where the item fits almost perfectly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_space = bins_remain_cap - item

    # Waste minimization and feasibility
    valid_bins = remaining_space >= 0
    if not np.any(valid_bins):
        return priorities  # Return 0 priority if no bin fits

    waste = remaining_space[valid_bins]
    priorities[valid_bins] = -waste # Lower waste gives higher initial priority

    # Avoidance of near-full bins - applies a penalty if bin nearly full *before* item placement. A hyperbola gives a nice characteristic.
    penalty = 1.0 / (100.0 * (1.0 - bins_remain_cap[valid_bins])**2 + 1.0) #avoid extremely high values near cap = 1.0
    priorities[valid_bins] -= penalty

    # "Just fit" bonus (a bell curve around small amount of waste). The waste needs to be somewhat less than item size.
    just_fit_range = item / 5.0 # The just fit bonus window shrinks as the items grow.
    just_fit_bonus = np.exp(-(waste**2) / (2 * just_fit_range**2))
    priorities[valid_bins] += just_fit_bonus


    return priorities
```
