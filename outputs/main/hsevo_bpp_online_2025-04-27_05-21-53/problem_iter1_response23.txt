```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Only consider bins that can fit the item.
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(valid_bins):
        # Calculate remaining capacity after placing the item.
        remaining_capacity = bins_remain_cap[valid_bins] - item

        # Give higher priority to bins with smaller remaining capacity (First Fit Decreasing principle).
        # Also, penalize bins that result in very small remaining capacity to avoid fragmentation.
        priorities[valid_bins] = (1 / (remaining_capacity + 1e-6)) - (10 * (remaining_capacity < 0.1))  # Adding small epsilon to avoid division by zero

        # Give a boost to bins that can perfectly fit the item if there are any
        perfect_fit = np.abs(remaining_capacity) < 1e-6 # Numerical Stability
        if np.any(perfect_fit):
            priorities[valid_bins][perfect_fit] += 100 # Huge Boost!

    return priorities
```
