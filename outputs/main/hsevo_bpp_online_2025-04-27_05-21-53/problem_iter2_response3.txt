```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity utilization and fragmentation avoidance with adaptive scaling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf

    feasible_bins_count = np.sum(feasible)

    if feasible_bins_count > 0:
        remaining_after_placement = bins_remain_cap[feasible] - item
        
        # Capacity Utilization - Prioritize near-full bins
        capacity_utilization = np.exp(-5 * remaining_after_placement / np.max(bins_remain_cap))
        priorities[feasible] = capacity_utilization

        # Adaptive Fragmentation Avoidance based on item size
        if feasible_bins_count > 2:
            waste_threshold = 0.5 * np.max(bins_remain_cap) #Dynamic threshold.
            waste_penalty = np.zeros_like(remaining_after_placement)
            large_waste = remaining_after_placement > waste_threshold
            waste_penalty[large_waste] = -0.1 * remaining_after_placement[large_waste]
            priorities[feasible] += waste_penalty

    return priorities
```
