```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, perfect fit, and fragmentation."""
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        
        # Prioritize smaller remaining capacity and avoid fragmentation.
        priorities[valid_bins] = (1 / (remaining_capacity + 1e-6)) - (10 * (remaining_capacity < 0.1))
        
        # Boost perfect fits.
        perfect_fit = np.abs(remaining_capacity) < 1e-6
        if np.any(perfect_fit):
            priorities[valid_bins][perfect_fit] += 100
            
        # Relativistic near-overflow penalization
        almost_full = (remaining_capacity > 0) & (remaining_capacity < 0.2)
        if np.any(almost_full):
             priorities[valid_bins][almost_full] -= 50 #Moderate Penalty

    return priorities
```
