```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, capacity utilization, and fragmentation.
    Combines best aspects of v0 and v1 to enhance performance.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf

    feasible_bins_count = np.sum(feasible)

    if feasible_bins_count > 0:
        remaining_after_placement = bins_remain_cap[feasible] - item
        capacity_utilization = np.exp(-5 * remaining_after_placement / np.max(bins_remain_cap))
        priorities[feasible] = capacity_utilization

        if feasible_bins_count > 2:
            waste_penalty = np.zeros_like(remaining_after_placement)
            large_waste = remaining_after_placement > 0.5 * np.max(bins_remain_cap)
            waste_penalty[large_waste] = -0.1 * remaining_after_placement[large_waste]
            priorities[feasible] += waste_penalty

        # Near-perfect fit penalty (from v1 adapted)
        near_perfect_fit = (remaining_after_placement > 0) & (remaining_after_placement <= 0.01 * np.max(bins_remain_cap))
        priorities[feasible][near_perfect_fit] -= 1 # Moderate penalty
    return priorities
```
