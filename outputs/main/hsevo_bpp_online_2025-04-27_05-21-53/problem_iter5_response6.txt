```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines exploration, fill optimization, and fragmentation avoidance."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get the lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Base Priority: Bin Utilization (Fill Ratio)
        utilization = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += utilization

        # 2. Exploration Bonus: Prioritize less-utilized bins.
        exploration_factor = (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins]))
        priorities[feasible_bins] += 0.3 * exploration_factor

        # 3. Fill Optimization: Prioritize bins close to full.
        almost_full_threshold = 0.1
        almost_full = feasible_bins & (remaining_capacity >= 0) & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += 1.2

        # 4. Fragmentation Penalty: Discourage small remainders.
        small_remainder_threshold = 0.2
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= 0.8

        # 5. Perfect Fit Bonus: High bonus
        perfect_fit = np.abs(remaining_capacity) < 1e-6
        if np.any(perfect_fit & feasible_bins):
            priorities[feasible_bins][perfect_fit[feasible_bins]] += 10 #Big bonus

    return priorities
```
