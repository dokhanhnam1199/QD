```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is viable only if it has enough capacity for the item.
    viable_bins = bins_remain_cap >= item
    if not np.any(viable_bins):
      return priorities # If no bin can fit, return all zeros

    # Calculate the remaining capacity after adding the item to each viable bin.
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0 ] = 0 # setting non-viable bins cap to zero, needed for division
    
    # Calculate a "fullness" score for each viable bin.  Bins that are fuller (closer to full) are penalized.
    # Avoid division by zero
    with np.errstate(divide='ignore', invalid='ignore'):  # Handle potential divide by zero. Set invalid to ignore will give us nan, which are handled below
      fullness_scores = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0) # remaining capacity / initial capacity
    fullness_scores = np.nan_to_num(fullness_scores, nan=1.0, posinf = 1.0, neginf = 1.0)
    # Bins that are close to full (smaller relative wasted space) should be prioritized.

    priorities = np.where(viable_bins, 1.0 - fullness_scores, -np.inf) # prioritize viable bins, and discourage (but allow) packing on almost full bins
    
    return priorities
```
