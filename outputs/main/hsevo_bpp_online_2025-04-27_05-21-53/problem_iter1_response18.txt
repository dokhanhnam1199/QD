```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after placing the item
    remaining_capacity_after_placement = bins_remain_cap - item

    # Prioritize bins where the item fits (positive remaining capacity)
    # Higher priority if the remaining capacity after placement is small, but not too small
    valid_bins = remaining_capacity_after_placement >= 0
    
    if np.any(valid_bins):
        priorities[valid_bins] = 1.0 / (remaining_capacity_after_placement[valid_bins] + 1e-9) # Adding a small number to avoid division by zero

        # Additional incentive for bins that leave a relatively small space
        small_space_threshold = item * 0.2 # Example threshold, 20% of the item size
        small_space_bins = (remaining_capacity_after_placement[valid_bins] <= small_space_threshold)
        priorities[valid_bins][small_space_bins] *= 2 # Double priority for bins leaving small spaces
    
    # Very low priority if the item doesn't fit (negative remaining capacity)
    priorities[remaining_capacity_after_placement < 0] = -1e9 # A very negative number to discourage invalid placements

    return priorities
```
