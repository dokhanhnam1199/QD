```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers both the remaining capacity and the "fit".
    A bin that almost perfectly fits the item gets a higher priority.
    A bin that's too small or much larger gets lower priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity < item:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
        else:
            # Calculate the "fit score".  The closer to zero, the better the fit.
            fit_score = np.abs(capacity - item)

            # Scale the fit score so smaller fit score leads to higher priority
            # Using exponential scaling to emphasize near-perfect fits
            priority = np.exp(-fit_score / item)  # Normalize by item size

            # Also, penalize large empty space. A bin nearly full is preffered
            # penalize empty space relative to the item size.
            empty_space_penalty = np.exp(-item / (capacity+1e-9)) # Avoid dividing by zero.  Prioritize smaller remaining space.
            priority = priority * empty_space_penalty
            
            priorities[i] = priority

    return priorities
```
