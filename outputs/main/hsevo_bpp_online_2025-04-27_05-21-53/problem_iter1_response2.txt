```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that can't fit get a negative infinite priority
    priorities = np.where(bins_remain_cap < item, -np.inf, 0)

    # For bins that can fit, prioritize those with smallest remaining capacity *after* packing the item. This approximates minimizing wasted space *locally*.

    possible_bins = bins_remain_cap[bins_remain_cap >= item]
    post_fill_waste = possible_bins - item

    #Use Newton's law of cooling analogy. Larger temperature differences(bins with little space after adding the item) should be cooled down quickly(higher priority).
    # We invert it, so the colder temp gets larger values
    priorities[bins_remain_cap >= item] = -post_fill_waste

    #Add a small bias to partially filled bins to encourage them being completely full
    priorities[bins_remain_cap >= item] += 0.01*(bins_remain_cap[bins_remain_cap >= item]/ np.max(bins_remain_cap)) # add a fraction of the remaining capacity compared to maximum capacity to all bins

    return priorities
```
