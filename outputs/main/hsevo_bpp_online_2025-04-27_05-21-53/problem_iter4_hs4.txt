import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                 exploration_weight: float = 0.0558575361196354,
                 almost_full_boost: float = 0.566595186663328,
                 small_remainder_penalty: float = 1.4192090934727406,
                 near_perfect_fit_penalty: float = 1.5739395628192736,
                 moderate_fit_bonus: float = 0.17556143958731468,
                 almost_full_threshold: float = 0.40264861405936425,
                 small_remainder_threshold: float = 0.02524284985386266,
                 near_perfect_fit_threshold: float = 0.020088314322040637,
                 moderate_fit_threshold_low: float = 0.24765673477931044,
                 moderate_fit_threshold_high: float = 0.5485934222792582) -> np.ndarray:
    """
    Prioritizes bins based on a combination of factors, including remaining capacity,
    item size relative to bin size, and a penalty for creating small fragments.
    It also incorporates a mechanism to encourage exploration of less-utilized bins
    initially and then shift toward filling bins more completely as the packing
    progresses (Adaptive behavior).

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.
        exploration_weight (float): Weight for exploration factor.
        almost_full_boost (float): Boost for almost full bins.
        small_remainder_penalty (float): Penalty for small remainders.
        near_perfect_fit_penalty (float): Penalty for near perfect fits.
        moderate_fit_bonus (float): Bonus for moderate fits.
        almost_full_threshold (float): Threshold for considering a bin almost full (fraction of bin size).
        small_remainder_threshold (float): Threshold for considering a remainder small (fraction of bin size).
        near_perfect_fit_threshold (float): Threshold for considering a fit near perfect (fraction of bin size).
        moderate_fit_threshold_low (float): Lower threshold for moderate fit (fraction of bin size).
        moderate_fit_threshold_high (float): Higher threshold for moderate fit (fraction of bin size).

    Returns:
        np.ndarray: An array containing the priority score for each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get the lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Base Priority: Bin Utilization (Fill Ratio)
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins]

        # 2. Encourage Exploration (Early Stage): Prioritize less-utilized bins initially.
        #    This helps to distribute items across bins, reducing the chance of early convergence
        #    on suboptimal solutions.  The effect diminishes as bins get filled (adaptive).
        exploration_factor = (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins]))
        priorities[feasible_bins] += exploration_weight * exploration_factor

        # 3. Fill-Optimization (Later Stage): As packing progresses, prioritize bins that are
        #    closer to being full. This promotes efficient space utilization.
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += almost_full_boost #Boost almost full slightly higher

        # 4. Fragmentation Penalty: Discourage creating small remaining fragments to avoid wasting space.
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= small_remainder_penalty

        # 5. Near-Perfect Fit Penalty: While fitting snugly is good, extremely close fits can sometimes
        #    lead to more bins being used overall, so a mild penalty is applied.
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= near_perfect_fit_penalty

        # 6. Moderate-Fit Bonus: If the item fits reasonably well without creating a tiny fragment or an almost-perfect fit,
        # it gets a small bonus. This encourages balanced filling.
        moderate_fit = feasible_bins & ~almost_full & ~small_remainder & ~near_perfect_fit
        moderate_fit = moderate_fit & (remaining_capacity >= moderate_fit_threshold_low * bins_remain_cap) & (remaining_capacity <= moderate_fit_threshold_high * bins_remain_cap)
        priorities[moderate_fit] += moderate_fit_bonus

    return priorities
