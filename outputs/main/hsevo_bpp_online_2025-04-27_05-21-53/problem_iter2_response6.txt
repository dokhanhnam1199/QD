```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1.
    Prioritizes snug fits, avoids near overflows, and encourages full bins.
    """
    fits = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(fits):
        return priorities

    # Snug fit score (v1)
    snug_fit_score = (bins_remain_cap[fits] - item) / bins_remain_cap[fits]
    snug_fit_score = 1.0 - snug_fit_score
    snug_fit_score = np.clip(snug_fit_score, 0.0, 1.0)
    priorities[fits] += snug_fit_score

    # Remaining capacity priority (v0-inspired, more direct)
    remaining_capacity = bins_remain_cap[fits] - item
    priorities[fits] += (1 / (remaining_capacity + 1e-6))

    # Near overflow penalty (v1)
    overflow_margin = 0.05 * item
    near_overflow = (bins_remain_cap[fits] - item) < overflow_margin
    if np.any(near_overflow):
        overflow_penalty = np.exp(5 * (bins_remain_cap[fits][near_overflow] - item - overflow_margin) / overflow_margin)
        priorities[fits][near_overflow] -= overflow_penalty

    # Perfect fit bonus (v0)
    perfect_fit = np.abs(remaining_capacity) < 1e-6
    if np.any(perfect_fit):
        priorities[fits][perfect_fit] += 100

    return priorities
```
