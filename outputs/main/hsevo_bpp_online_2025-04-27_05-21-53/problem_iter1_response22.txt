```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers:
    1. The wasted space if the item is added to the bin (smaller wasted space is better).
    2. A preference for bins that are already somewhat full. This encourages filling bins more completely.
    3. A large penalty for bins that are too small to hold the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            # Large negative priority if item doesn't fit.  Think of this as an infinite cost to overflowing a bin.
            priorities[i] = -np.inf
        else:
            wasted_space = cap - item
            # Favor bins with less wasted space (negative because lower wasted space means HIGHER priority)
            priorities[i] -= wasted_space

            # Add a bonus for bins that are already relatively full
            #  The fuller, the better, but with diminishing returns, hence the log.
            # Avoid log(0) if item is exactly the bin capacity.
            if wasted_space > 0:
                 priorities[i] += np.log(item / cap) # Use item/cap for more resolution.
            else:
                priorities[i] += 1.0 # Max bonus if perfect fit (cap=item, wasted space is exactly 0).

    return priorities
```
