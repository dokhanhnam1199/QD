```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins considering multiple factors:
    - Remaining capacity relative to item size.
    - Potential for creating balanced bin utilization.
    - Penalties for creating very small remainders or near-perfect fits.
    - Encourages packing into bins that are already somewhat filled.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Prioritize bins where the item fills a significant portion of the bin.
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += 2 * utilization[feasible_bins]  # Increased weight

        # 2. Encourage balanced bin utilization (avoiding very empty or very full bins after packing).
        #   - Aim for a target utilization around 70-80%.
        target_utilization = 0.75
        expected_new_capacity = bins_remain_cap[feasible_bins] - item
        expected_utilization = (bins_remain_cap[feasible_bins] - expected_new_capacity) / bins_remain_cap[feasible_bins]
        
        # give a higher priority to bins which are closer to target utilization after packing
        balanced_utilization_score = np.exp(-((expected_utilization - target_utilization)**2) / 0.02) # Gaussian-like weighting
        priorities[feasible_bins] += 3 * balanced_utilization_score # Increased weight

        # 3. Penalize Near-Perfect Fit (leaving very little unused space).
        near_perfect_fit_threshold = 0.05  # Increased threshold slightly
        near_perfect_fit = feasible_bins & (remaining_capacity <= near_perfect_fit_threshold * bins_remain_cap)
        priorities[near_perfect_fit] -= 5

        # 4. Penalize small remainders to avoid fragmentation. Adjusted Threshold
        small_remainder_threshold = 0.15 # Decreased threshold
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= 3

        # 5. Give a slight bonus to bins that are already partially filled (but not too full). This encourages
        #    using existing bins instead of always starting new ones.
        already_filled_threshold_low = 0.2
        already_filled_threshold_high = 0.9
        already_filled = feasible_bins & (bins_remain_cap > already_filled_threshold_low * np.max(bins_remain_cap)) & (bins_remain_cap < already_filled_threshold_high * np.max(bins_remain_cap))
        priorities[already_filled] += 1

    return priorities
```
