```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Only consider bins with enough remaining capacity
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit the item, assign a low priority (e.g., -np.inf). Avoid inf
        return np.full_like(bins_remain_cap, -1e9)

    # 1. First-Fit-Decreasing heuristic consideration: Favor bins that were filled first.
    #    This can be approximated by looking at the remaining capacity. Less capacity might indicate it was opened early.
    priorities = 1 / (bins_remain_cap + 1e-6)  # Adding a small constant to avoid division by zero
    
    # 2. Best-Fit heuristic consideration: Favor bins where the item fills the bin more completely.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Infeasible bins set to infinity
    
    priorities -= remaining_after_fit # smaller remainder is better
    
    # Ensure only feasible bins have non-negative priority
    priorities[~feasible_bins] = -1e9 #or np.NINF, avoid inf

    # Scale priorities for better performance and robustness. Avoid INF
    max_priority = np.max(priorities[feasible_bins])

    if max_priority > -1e9 : # some bin is feasible
       priorities[feasible_bins] = priorities[feasible_bins] / (max_priority + 1e-6)

    return priorities
```
