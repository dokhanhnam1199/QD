```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after adding the item.
    remaining_capacities = bins_remain_cap - item
    
    # Give a high priority to bins that can accommodate the item without excessive wasted space.
    # Avoid bins where adding item will exceed bin capacity (resulting negative capacities).

    valid_bins = remaining_capacities >= 0

    if np.any(valid_bins): #prioritize partially filled bins
        priorities[valid_bins] = bins_remain_cap[valid_bins] / (item + 1e-9) #avoid division by zero
        
        # Penalize large waste of space -- E=mc^2 - minimizing energy after filling it.

        waste = remaining_capacities[valid_bins]
        priorities[valid_bins] = priorities[valid_bins] - (waste**2)
        
        # Give slight bonus for bins that are almost full after adding the item
        almost_full = np.where( (remaining_capacities >= 0) & (remaining_capacities <= 0.1) )
        priorities[almost_full] += 1 #arbitrary small constant reward, makes the difference where waste levels are similar

    
    # VERY IMPORTANT: For the invalid bins, assign a VERY negative priority.
    # This ensures that these bins are NEVER considered, unless no valid bins exist.
    priorities[remaining_capacities < 0] = -np.inf
    

    return priorities
```
