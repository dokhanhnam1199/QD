```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic combining utilization, balance, and exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    priorities[remaining_capacity < 0] = -np.inf
    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Utilization priority, scaled by item size
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins] * (0.7 + item)

        # 2. Balanced utilization with Gaussian boost
        target_utilization = 0.75
        expected_utilization = (bins_remain_cap[feasible_bins] - remaining_capacity[feasible_bins]) / bins_remain_cap[feasible_bins]
        balanced_utilization_score = np.exp(-((expected_utilization - target_utilization)**2) / 0.02)
        priorities[feasible_bins] += 3 * balanced_utilization_score

        # 3. Adaptive near-perfect fit penalty
        near_perfect_fit_threshold = 0.05
        near_perfect_fit = feasible_bins & (remaining_capacity <= near_perfect_fit_threshold * bins_remain_cap)
        priorities[near_perfect_fit] -= 5

        # 4. Adaptive small remainder penalty
        small_remainder_threshold = 0.15
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= 3

        # 5. Encourage partially filled bins
        already_filled_threshold_low = 0.2
        already_filled_threshold_high = 0.9
        already_filled = feasible_bins & (bins_remain_cap > already_filled_threshold_low * np.max(bins_remain_cap)) & (bins_remain_cap < already_filled_threshold_high * np.max(bins_remain_cap))
        priorities[already_filled] += 1

        # 6. Bin Level consideration with boost
        bin_level_threshold = 0.8275929469166272
        bin_level_boost = 1.626769834760002
        bin_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalized fill levels
        bin_level_reached = feasible_bins & (bin_levels >= bin_level_threshold)
        priorities[bin_level_reached] += bin_level_boost

    return priorities
```
