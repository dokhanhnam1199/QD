```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors including fill percentage,
    avoidance of small remainders, and a slight preference for bins that are
    already reasonably full.  Uses a more adaptive approach than v1.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # Prioritize bins close to full, but with a more adaptive threshold
        # The threshold depends on the item size, so big items prefer more empty bins
        almost_full_threshold = 0.1 + 0.1 * (item) # adaptive
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += 15  # Increased priority

        #Penalize Near-Perfect Fit, but less aggressively than before
        near_perfect_fit_threshold = 0.01
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= 2  # Reduced penalty

        #Penalize small remainders to avoid fragmentation, but adaptive to item size
        small_remainder_threshold = 0.2 - 0.05 * (item) # adaptive
        small_remainder_threshold = max(0.05, small_remainder_threshold) # ensure its positive
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= 3 # increased penalty

        # Add a base priority based on how much space is used and current bin usage
        # This encourages filling partially filled bins
        utilization = item / bins_remain_cap
        current_fill = (bins_remain_cap - remaining_capacity) / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins] * (1 + current_fill[feasible_bins]) # favor more filled bins
        
        # Add a small random component to break ties and explore diverse solutions
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1

    return priorities
```
