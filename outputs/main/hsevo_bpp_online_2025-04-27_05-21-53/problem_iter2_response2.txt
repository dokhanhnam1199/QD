```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness and near-overflow penalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = bins_remain_cap >= item
    if not np.any(fits):
        return priorities

    # Fullness score: prioritize bins with smaller remaining capacity
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0] = 0
    with np.errstate(divide='ignore', invalid='ignore'):
        fullness_scores = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)
    fullness_scores = np.nan_to_num(fullness_scores, nan=1.0) #set nan to 1
    priorities = np.where(fits, 1.0 - fullness_scores, -np.inf)


    # Near-overflow penalty
    overflow_margin = 0.05 * item
    near_overflow = (bins_remain_cap[fits] - item) < overflow_margin
    if np.any(near_overflow):
        overflow_penalty = np.exp(5 * (bins_remain_cap[fits][near_overflow] - item - overflow_margin) / overflow_margin)
        priorities[fits][near_overflow] -= overflow_penalty

    return priorities
```
