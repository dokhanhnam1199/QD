```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more nuanced approach, considering remaining capacity,
    a safety margin, and the item size relative to bin size.
    Emphasizes filling bins efficiently while avoiding near-misses.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9 # To avoid division by zero and log of zero
    safety_margin = 0.1  # Fraction of bin capacity to keep as margin

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Base priority: how much space will be left *after* packing
            remaining_after = capacity - item + epsilon
            priorities[i] = remaining_after  # Smaller remain -> higher priority
            
            # Adjustments for "good fit" and avoiding near misses:

            # 1. Good fit bonus: Prefer bins where the item fills a substantial
            # portion but doesn't make them *too* full (risk of small item misfit later).
            fill_ratio = item / capacity
            if 0.5 <= fill_ratio <= (1 - safety_margin):
                priorities[i] += 1.0  # Substantial bonus for a decent fill

            # 2. Avoid near misses: Penalize bins where adding the item leaves
            # very little space; subsequent small items won't fit.
            if remaining_after < (bins_remain_cap.max() * safety_margin) :
               priorities[i] -= 0.5 # Slight penalization

            # 3. Incentivize usage: if bin capacity close to item size, add a boost
            if item / capacity > 0.9:
                priorities[i] += 0.2
        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority

    return priorities
```
