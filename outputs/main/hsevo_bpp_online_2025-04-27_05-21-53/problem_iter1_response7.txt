```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # A bin is feasible if it can contain the item
    feasible_bins = bins_remain_cap >= item
    
    # If no bin is feasible, give a low priority to all bins (or potentially try to create a new bin - handled elsewhere)
    if not np.any(feasible_bins):
        return priorities  # All zeros

    # Higher priority to bins that have enough capacity, but not too much.
    # This attempts to fill bins reasonably well without leaving too much space.

    for i in range(len(bins_remain_cap)):
      if feasible_bins[i]:
        remaining_after_fit = bins_remain_cap[i] - item

        # Use an exponential to penalize both large and small remaining capacities more strongly
        priority = np.exp(-np.abs(remaining_after_fit - item/2)/(item/2))

        priorities[i] = priority

    #Boost nearly full ones to try and fill them fully
    nearly_full = (bins_remain_cap - item) < 0.1
    priorities[nearly_full] += 1.0 #boost by a constant

    return priorities
```
