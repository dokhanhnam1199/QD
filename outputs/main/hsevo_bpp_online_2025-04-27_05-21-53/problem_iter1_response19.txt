```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers both remaining capacity and wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate wasted space if item is placed in this bin
            wasted_space = cap - item

            # Prioritize bins where the item fits, but penalize wasted space
            # A small constant is added to avoid division by zero
            priorities[i] = (item / cap) - (wasted_space / (np.sum(bins_remain_cap)+1e-6)) # First-fit decreasing modification; the more tight fit, the higher priority
        else:
            # Negative priority for bins that cannot fit the item
            priorities[i] = -np.inf  # Never select bins that can't fit
    return priorities
```
