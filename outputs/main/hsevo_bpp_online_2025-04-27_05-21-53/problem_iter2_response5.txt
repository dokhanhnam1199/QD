```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space minimization and fullness preference."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf
        else:
            wasted_space = cap - item
            priorities[i] -= wasted_space # Minimize waste

            if wasted_space > 0:
                priorities[i] += np.log(item / cap) # Fullness bonus
            else:
                priorities[i] += 1.0 # Perfect fit bonus

            fullness_after = (bins_remain_cap[i] - item) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
            if fullness_after < 0.1:
                priorities[i] -= 100 * (0.1 - fullness_after) # Penalize nearly full

    return priorities
```
