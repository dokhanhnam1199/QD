```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, adaptive exploration, and penalties/bonuses."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get the lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Base Priority: Bin Utilization (Fill Ratio)
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins]

        # 2. Adaptive Exploration: Prioritize less-utilized bins initially.
        exploration_factor = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins])
        exploration_weight = 0.3 # Exploration weight
        priorities[feasible_bins] += exploration_weight * exploration_factor

        # 3. Near-overflow penalty
        overflow_margin = 0.05 * item
        near_overflow = feasible_bins & (remaining_capacity < overflow_margin)
        overflow_penalty = np.exp(5 * (remaining_capacity[near_overflow] - overflow_margin) / overflow_margin)
        priorities[near_overflow] -= overflow_penalty

        # 4. Perfect fit bonus: Increase the weight slightly.
        perfect_fit_threshold = 0.001
        perfect_fit = feasible_bins & (remaining_capacity >= 0) & (remaining_capacity <= perfect_fit_threshold * bins_remain_cap)
        priorities[perfect_fit] += 0.5
    return priorities
```
