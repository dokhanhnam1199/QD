```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item
    
    # Give very low priority to bins that cannot fit the item
    priorities[remaining_capacity < 0] = -np.inf
    
    # Prioritize bins with smaller wasted space after packing
    priorities[remaining_capacity >= 0] = 1 / (remaining_capacity[remaining_capacity >= 0] + 1e-9)

    # Give higher priority to bins that are almost full after adding the item.
    almost_full_threshold = 0.1  # e.g., bin must be at least 90% full.
    almost_full = (remaining_capacity >= 0) & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
    priorities[almost_full] += 10  # Increase priority significantly

    return priorities
```
