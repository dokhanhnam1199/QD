```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive thresholds with fill ratio & diversity penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get the lowest priority
    priorities[remaining_capacity < 0] = -np.inf
    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # Adaptive almost full threshold
        almost_full_threshold = 0.1 + 0.05 * item
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += 15

        # Adaptive small remainder penalty
        small_remainder_threshold = 0.2 - 0.03 * item
        small_remainder_threshold = max(0.05, small_remainder_threshold)
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= 5

        # Adaptive near perfect fit penalty
        near_perfect_fit_threshold = 0.01 + 0.005 * item
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= 3

        # Utilization priority with fill consideration
        utilization = item / bins_remain_cap
        current_fill = (bins_remain_cap - remaining_capacity) / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins] * (0.75 + current_fill[feasible_bins])

        # Bin diversity penalty (encourage filling different bins)
        bin_diversity_penalty = np.std(current_fill[feasible_bins]) * 2
        priorities[feasible_bins] -= bin_diversity_penalty
        
        # Random component for tie-breaking
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1
    return priorities
```
