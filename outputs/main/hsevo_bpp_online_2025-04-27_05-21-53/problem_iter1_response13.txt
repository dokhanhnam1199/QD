```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., all zeros)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Increase priority for bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Higher priority for fitting bins

    # Further prioritize bins with smaller remaining capacity after fitting.
    # This favors filling bins more completely, potentially reducing fragmentation.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    # Add a small constant to avoid division by zero and further diversify
    # the prorities to improve performance.
    priorities[fit_mask] += 1.0 / (remaining_after_fit + 0.01)
    # Add a penalty for bins that create very small remaining capacity after fit
    # To reduce the probability of creating extremely fragmented bins.
    too_small_mask = remaining_after_fit < 0.1  # Define a "too small" threshold
    priorities[fit_mask][too_small_mask] -= 0.5 # Reduce their probability, but don't make them fully excluded.

    # Give very large remaining capacities a very low priority to avoid overfilling them, potentially at the expense of other already more packed bins.
    large_capacity_mask = bins_remain_cap > 0.9
    priorities[large_capacity_mask] -= 0.1
    return priorities
```
