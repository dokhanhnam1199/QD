```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins based on a combination of factors, including fullness,
    fragmentation avoidance, and a dynamic adjustment based on item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get lowest priority
    priorities[remaining_capacity < 0] = -np.inf
    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Prioritize bins that will be nearly full after packing.
        almost_full_threshold = 0.15  # Slightly wider range
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += 15  # Increased priority

        # 2. Discourage very small remainders (fragmentation).  Slightly more aggressive.
        small_remainder_threshold = 0.25  # Increased threshold
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= 5

        # 3. Penalize near-perfect fits, but less severely if the item is large.
        near_perfect_fit_threshold = 0.01
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= 3  # Slightly reduced penalty

        # 4. Base priority on utilization, scaled by item size.  Larger items get more influence.
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins] * (0.5 + item)  # Scale by item size

        # 5. Adaptive adjustment:  Favor bins whose remaining capacity is close to the item size.
        capacity_difference = np.abs(bins_remain_cap - item)
        priority_boost = np.exp(-capacity_difference / np.mean(bins_remain_cap[feasible_bins]))  # Gaussian-like boost
        priorities[feasible_bins] += priority_boost[feasible_bins] * 2

    return priorities
```
