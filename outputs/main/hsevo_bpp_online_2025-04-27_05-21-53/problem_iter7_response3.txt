import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                 exploration_weight: float = 0.620704809374768,
                 almost_full_boost: float = 2.382377832483464,
                 small_remainder_penalty: float = 3.971072808120566,
                 near_perfect_fit_penalty: float = 4.338336451134117,
                 moderate_fit_bonus: float = 4.957333988818348,
                 almost_full_threshold: float = 0.5838066407628497,
                 small_remainder_threshold: float = 0.0983489873564114,
                 near_perfect_fit_threshold: float = 0.8092961378286379,
                 moderate_fit_threshold_low: float = 0.9283305877278248,
                 moderate_fit_threshold_high: float = 0.4713393724683914,
                 bin_level_threshold: float = 0.31841809881946337,
                 bin_level_boost: float = 3.337583322777729) -> np.ndarray:
    """
    Prioritizes bins based on a combination of factors, adaptively adjusting
    exploration and exploitation based on bin utilization levels. Adds a bin-level
    consideration to further refine bin selection.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.
        exploration_weight (float): Weight for exploration factor.
        almost_full_boost (float): Boost for almost full bins.
        small_remainder_penalty (float): Penalty for small remainders.
        near_perfect_fit_penalty (float): Penalty for near perfect fits.
        moderate_fit_bonus (float): Bonus for moderate fits.
        almost_full_threshold (float): Threshold for considering a bin almost full (fraction of bin size).
        small_remainder_threshold (float): Threshold for considering a remainder small (fraction of bin size).
        near_perfect_fit_threshold (float): Threshold for considering a fit near perfect (fraction of bin size).
        moderate_fit_threshold_low: Lower threshold for moderate fit (fraction of bin size).
        moderate_fit_threshold_high: Higher threshold for moderate fit (fraction of bin size).
        bin_level_threshold (float): Threshold to consider a bin at a certain level.
        bin_level_boost (float): Boost for bins that have passed the bin level.


    Returns:
        np.ndarray: An array containing the priority score for each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get the lowest priority
    priorities[remaining_capacity < 0] = -np.inf

    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Base Priority: Bin Utilization (Fill Ratio)
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins]

        # 2. Adaptive Exploration: Adjust exploration based on bin fill levels.
        #    Prioritize less-utilized bins when most bins are relatively empty.
        bin_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalized fill levels
        average_bin_level = np.mean(bin_levels)
        exploration_factor = (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins]))

        # Adjust exploration weight dynamically
        adaptive_exploration_weight = exploration_weight * (1 - average_bin_level)
        priorities[feasible_bins] += adaptive_exploration_weight * exploration_factor

        # 3. Fill-Optimization (Later Stage): Prioritize bins that are closer to being full.
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += almost_full_boost

        # 4. Fragmentation Penalty: Discourage creating small remaining fragments.
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= small_remainder_penalty

        # 5. Near-Perfect Fit Penalty: Mild penalty for extremely close fits.
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= near_perfect_fit_penalty

        # 6. Moderate-Fit Bonus: Bonus for reasonably well-fitting items.
        moderate_fit = feasible_bins & ~almost_full & ~small_remainder & ~near_perfect_fit
        moderate_fit = moderate_fit & (remaining_capacity >= moderate_fit_threshold_low * bins_remain_cap) & (remaining_capacity <= moderate_fit_threshold_high * bins_remain_cap)
        priorities[moderate_fit] += moderate_fit_bonus

        # 7. Bin Level consideration
        bin_level_reached = feasible_bins & (bin_levels >= bin_level_threshold)
        priorities[bin_level_reached] += bin_level_boost

    return priorities
