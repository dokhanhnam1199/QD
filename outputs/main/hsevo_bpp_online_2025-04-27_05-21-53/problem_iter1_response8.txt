```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Employs a heuristic that prioritizes bins with capacity slightly
       larger than the item, but penalizes bins with very large remaining
       capacity to avoid creating bins with a lot of wasted space early on.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give high priority to bins that can fit the item, but not with a huge gap.
    # Idea: fit items tightly to avoid fragmentation
    fit_mask = bins_remain_cap >= item

    # Calculate "tightness" score. Higher means closer to full after placing.
    tightness = (bins_remain_cap[fit_mask] - item) # smaller is better

    #Invert the 'tightness' score so that smaller diff yields larger priority
    #Apply a Gaussian weighting to bias towards tightness around a defined value.
    #The gaussian distribution weights are largest at 0 which represents perfect fit

    sigma = item / 4 #tune std dev of the distribution
    tightness_score = np.exp(-tightness**2 / (2 * sigma**2))

    priorities[fit_mask] = tightness_score

    # Penalize bins that have significantly more space than the item.
    # This encourages filling up bins instead of leaving lots of nearly-empty bins.
    waste_penalty = np.exp(-bins_remain_cap**2/(item * 10))

    priorities = priorities - waste_penalty # Subtract penalty for waste

    #Very low caps that also fit are not a good option, strongly penalize them.
    low_cap_mask = (bins_remain_cap < item*1.2) & (bins_remain_cap >= item) #Bins that fits but small remaining cap after placed
    penalize_low_cap = -1/(0.1 + (bins_remain_cap[low_cap_mask]-item)) #Heavily penalize with residual
    priorities[low_cap_mask] += penalize_low_cap


    #Ensure all priority scores are non-negative
    priorities = np.maximum(priorities, 0)
    return priorities
```
