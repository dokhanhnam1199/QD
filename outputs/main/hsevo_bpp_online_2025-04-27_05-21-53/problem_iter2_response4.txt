```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity utilization and relativistic near-overflow penalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf

    if np.any(feasible):
        remaining_after = bins_remain_cap[feasible] - item
        max_cap = np.max(bins_remain_cap)

        # Capacity utilization: prefer near-full
        capacity_utilization = np.exp(-5 * remaining_after / max_cap)
        priorities[feasible] = capacity_utilization

        # Relativistic near-overflow penalization
        almost_full = remaining_after < 0.1 * max_cap
        priorities[feasible][almost_full] -= 2*(0.1 * max_cap - remaining_after[almost_full]) / max_cap

    return priorities
```
