```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fullness, fragmentation, and adaptive exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    # Infeasible bins get lowest priority
    priorities[remaining_capacity < 0] = -np.inf
    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Base Priority: Bin Utilization (Fill Ratio)
        utilization = item / bins_remain_cap
        priorities[feasible_bins] += utilization[feasible_bins]

        # 2. Encourage Exploration (Adaptive): Prioritize less-utilized bins.
        average_fill = 1 - np.mean(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 0.0
        exploration_weight = 0.4 * (1 - average_fill)  # Reduce exploration as bins fill
        exploration_factor = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 0.0
        priorities[feasible_bins] += exploration_weight * exploration_factor

        # 3. Fill-Optimization: Prioritize bins that are closer to being full.
        almost_full_threshold = 0.07
        almost_full_boost = 2.5
        almost_full = feasible_bins & (remaining_capacity <= almost_full_threshold * bins_remain_cap)
        priorities[almost_full] += almost_full_boost

        # 4. Fragmentation Penalty: Discourage creating small remaining fragments.
        small_remainder_threshold = 0.02
        small_remainder_penalty = 1.1
        small_remainder = feasible_bins & (remaining_capacity > 0) & (remaining_capacity <= small_remainder_threshold * bins_remain_cap)
        priorities[small_remainder] -= small_remainder_penalty

        # 5. Near-Perfect Fit Penalty: Slightly discourage near perfect fits.
        near_perfect_fit_threshold = 0.04
        near_perfect_fit_penalty = 1.6
        near_perfect_fit = feasible_bins & (remaining_capacity > (1 - near_perfect_fit_threshold) * bins_remain_cap)
        priorities[near_perfect_fit] -= near_perfect_fit_penalty

        # Gaussian boost based on capacity difference
        capacity_difference = np.abs(bins_remain_cap - item)
        priority_boost = np.exp(-capacity_difference / np.mean(bins_remain_cap[feasible_bins])) if np.any(feasible_bins) else 0.0
        priorities[feasible_bins] += priority_boost * 1.5

        # Random component for tie-breaking
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1

    return priorities
```
