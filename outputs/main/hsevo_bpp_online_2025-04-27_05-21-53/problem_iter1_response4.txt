```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Version 2: Balancing space utilization and avoiding near-empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility check: Assign -inf priority to bins that are too small.
    priorities[bins_remain_cap < item] = -np.inf

    # 2. Calculate the remaining capacity after adding the item.
    remaining_cap_after_add = bins_remain_cap - item

    # 3. Encourage filling bins more completely (higher utilization). Prefer bins where the remaining space will be smaller.
    priorities[bins_remain_cap >= item] = bins_remain_cap[bins_remain_cap >= item] - remaining_cap_after_add[bins_remain_cap >= item]
   #4. Penalize bins that will be left with very little space
    small_space_penalty = -np.exp(-remaining_cap_after_add[bins_remain_cap >=item]) # Negative exponential makes the effect weaker as space grows

    priorities[bins_remain_cap >= item] += small_space_penalty

    #5. Smallest capacity has the highest chance if everything other is equal
    priorities[bins_remain_cap >= item] += bins_remain_cap[bins_remain_cap >= item] * 0.00001

    return priorities
```
