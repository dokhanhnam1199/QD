{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a \"Best Fit with Perfect Fit Bonus\" strategy for online Bin Packing.\n    It prioritizes bins based on the following hierarchy:\n    1. **Perfect Fit:** Bins where the item fits exactly, leaving zero remaining capacity. These are given\n       the highest possible priority to ensure they are chosen first.\n    2. **Best Fit (non-perfect):** Among bins where the item fits but does not result in a perfect fit,\n       priority is given to those that leave the smallest positive remaining capacity. This encourages\n       keeping larger contiguous spaces available in other bins.\n    3. **No Fit:** Bins where the item cannot be placed (remaining capacity would be negative) are given\n       the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    \n    # Use a small tolerance for floating-point comparisons to handle precision issues\n    # when checking for perfect fits or if an item \"fits\".\n    tolerance = 1e-9 \n    \n    # Calculate the potential remaining capacity for each bin if the item were placed there.\n    potential_remainders = bins_remain_cap - item\n    \n    # Initialize all priorities to negative infinity. This ensures bins where the item\n    # cannot fit are not considered.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    # Create a boolean mask for bins where the item can theoretically fit.\n    # We use -tolerance because due to floating point arithmetic, a value like -1e-10 might\n    # represent a perfect fit, or a negligible overflow. We consider it a fit if it's\n    # essentially non-negative.\n    can_fit_mask = potential_remainders >= -tolerance\n    \n    # For bins where the item can fit:\n    # Apply the Best Fit logic. Best Fit minimizes the remaining space.\n    # To represent this as a priority score where higher is better, we negate the remainder.\n    # So, a smaller positive remainder (e.g., 1.0) gets a priority of -1.0,\n    # while a larger remainder (e.g., 5.0) gets a priority of -5.0.\n    # Thus, the bin with the smallest positive remainder will have the highest (least negative) priority.\n    base_bf_priority = -potential_remainders[can_fit_mask]\n    \n    # Assign these Best Fit priorities to the corresponding bins.\n    priorities[can_fit_mask] = base_bf_priority\n    \n    # Now, handle the special case of a \"perfect fit\".\n    # A perfect fit occurs when the item size is extremely close to the bin's remaining capacity,\n    # resulting in a remainder very close to zero.\n    perfect_fit_mask = np.abs(potential_remainders) < tolerance\n    \n    # Combine this with the `can_fit_mask` to ensure we only apply the perfect fit bonus\n    # to bins that are actually suitable (i.e., not those where a negative remainder was just\n    # slightly less than zero due to tolerance).\n    perfect_fit_mask_and_can_fit = perfect_fit_mask & can_fit_mask\n    \n    # Assign an extremely high priority score to perfect fits. This ensures they are\n    # always chosen over any non-perfect Best Fit option.\n    # np.finfo(np.float64).max provides the maximum representable float value, guaranteeing\n    # it's higher than any score from -potential_remainders (which are typically 0 or negative for valid fits).\n    priorities[perfect_fit_mask_and_can_fit] = np.finfo(np.float64).max\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic implements a \"Best Fit\" strategy: it prioritizes bins\n    that will have the smallest remaining capacity after the item is placed,\n    among those where the item can actually fit. Bins where the item does\n    not fit are given the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a more desirable bin.\n    \"\"\"\n    # Initialize all priority scores to a very small negative number (-infinity).\n    # This ensures that bins where the item cannot fit will never be chosen\n    # unless no other bin is available (which typically implies opening a new bin\n    # in a real online BPP setup, outside the scope of this priority function).\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins have enough remaining capacity for the current item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For the bins where the item can fit, calculate the \"snugness\" score.\n    # The goal of Best Fit is to minimize the remaining capacity after placement\n    # (i.e., minimize `bins_remain_cap[i] - item`).\n    # To convert this minimization problem into a maximization priority score,\n    # we take the negative of this difference.\n    # A difference close to zero (e.g., item fills the bin perfectly) will result\n    # in a score close to zero, which is the highest possible score.\n    # Larger differences (more wasted space) will result in more negative scores.\n    if np.any(can_fit_mask):\n        remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n        priority_scores[can_fit_mask] = -remaining_after_fit\n\n    return priority_scores\n\n[Reflection]\nBeware of floating-point tolerance leading to invalid choices. Simpler, robust fit criteria often perform better than complex bonuses.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}