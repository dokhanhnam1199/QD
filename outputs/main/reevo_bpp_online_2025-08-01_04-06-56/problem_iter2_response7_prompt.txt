{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a \"Best Fit with Perfect Fit Bonus\" strategy for online Bin Packing.\n    It prioritizes bins based on the following hierarchy:\n    1. **Perfect Fit:** Bins where the item fits exactly, leaving zero remaining capacity. These are given\n       the highest possible priority to ensure they are chosen first.\n    2. **Best Fit (non-perfect):** Among bins where the item fits but does not result in a perfect fit,\n       priority is given to those that leave the smallest positive remaining capacity. This encourages\n       keeping larger contiguous spaces available in other bins.\n    3. **No Fit:** Bins where the item cannot be placed (remaining capacity would be negative) are given\n       the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    \n    # Use a small tolerance for floating-point comparisons to handle precision issues\n    # when checking for perfect fits or if an item \"fits\".\n    tolerance = 1e-9 \n    \n    # Calculate the potential remaining capacity for each bin if the item were placed there.\n    potential_remainders = bins_remain_cap - item\n    \n    # Initialize all priorities to negative infinity. This ensures bins where the item\n    # cannot fit are not considered.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    # Create a boolean mask for bins where the item can theoretically fit.\n    # We use -tolerance because due to floating point arithmetic, a value like -1e-10 might\n    # represent a perfect fit, or a negligible overflow. We consider it a fit if it's\n    # essentially non-negative.\n    can_fit_mask = potential_remainders >= -tolerance\n    \n    # For bins where the item can fit:\n    # Apply the Best Fit logic. Best Fit minimizes the remaining space.\n    # To represent this as a priority score where higher is better, we negate the remainder.\n    # So, a smaller positive remainder (e.g., 1.0) gets a priority of -1.0,\n    # while a larger remainder (e.g., 5.0) gets a priority of -5.0.\n    # Thus, the bin with the smallest positive remainder will have the highest (least negative) priority.\n    base_bf_priority = -potential_remainders[can_fit_mask]\n    \n    # Assign these Best Fit priorities to the corresponding bins.\n    priorities[can_fit_mask] = base_bf_priority\n    \n    # Now, handle the special case of a \"perfect fit\".\n    # A perfect fit occurs when the item size is extremely close to the bin's remaining capacity,\n    # resulting in a remainder very close to zero.\n    perfect_fit_mask = np.abs(potential_remainders) < tolerance\n    \n    # Combine this with the `can_fit_mask` to ensure we only apply the perfect fit bonus\n    # to bins that are actually suitable (i.e., not those where a negative remainder was just\n    # slightly less than zero due to tolerance).\n    perfect_fit_mask_and_can_fit = perfect_fit_mask & can_fit_mask\n    \n    # Assign an extremely high priority score to perfect fits. This ensures they are\n    # always chosen over any non-perfect Best Fit option.\n    # np.finfo(np.float64).max provides the maximum representable float value, guaranteeing\n    # it's higher than any score from -potential_remainders (which are typically 0 or negative for valid fits).\n    priorities[perfect_fit_mask_and_can_fit] = np.finfo(np.float64).max\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version implements a Best-Fit-like strategy, prioritizing bins that,\n    after accommodating the item, would have the least remaining capacity (i.e., are \"snugly fit\").\n    Bins where the item does not fit receive a very low priority to ensure they are never chosen\n    if there's any bin where the item fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the hypothetical remaining capacity if the item were placed in each bin.\n    # A smaller positive value here indicates a \"tighter\" fit (Best Fit).\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores with a very low value (-infinity) for all bins.\n    # This ensures bins where the item cannot fit will not be selected unless no other bin fits.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item actually fits.\n    # An item fits if the hypothetical_remaining capacity is non-negative.\n    fits_mask = hypothetical_remaining >= 0\n\n    # For bins where the item fits, assign a priority score.\n    # To implement Best Fit (minimize remaining capacity after placement),\n    # we take the negative of the hypothetical remaining capacity.\n    # This way, smaller positive remaining capacities result in larger (less negative) priority scores.\n    # For example:\n    # - If remaining = 0 (perfect fit), priority = 0 (highest possible for fitting bins).\n    # - If remaining = 5, priority = -5.\n    # - If remaining = 10, priority = -10.\n    # Maximizing this priority score will naturally pick the bin with the smallest remaining space.\n    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]\n\n    return priority_scores\n\n[Reflection]\nAvoid arbitrary, extreme bonuses; naturally integrate ideal cases into the primary heuristic's logic.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}