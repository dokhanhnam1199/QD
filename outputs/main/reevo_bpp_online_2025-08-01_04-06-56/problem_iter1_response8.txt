```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a Best Fit (BF) strategy.

    The Best Fit strategy aims to place the item into the bin that will leave the least
    remaining space after the item is placed. This heuristic generally leads to a lower
    number of bins used in the long run for Bin Packing Problems.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each existing bin.

    Return:
        Array of same size as bins_remain_cap with priority score for each bin.
        A higher score indicates a more desirable bin for the current item.
        Bins where the item does not fit will receive a score of negative infinity,
        ensuring they are not selected.
    """
    # Initialize all priority scores to negative infinity.
    # This ensures that bins where the item cannot fit will have the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins the current item can fit into.
    # A bin is suitable if its remaining capacity is greater than or equal to the item's size.
    can_fit_mask = item <= bins_remain_cap

    # For bins where the item can fit, calculate the priority score.
    # The Best Fit strategy seeks to minimize the remaining empty space in a bin after
    # placing the item. This is equivalent to maximizing the "fullness" of the bin,
    # or minimizing `(remaining_capacity - item_size)`.
    # To represent this as a priority score that we want to maximize, we can use:
    # `score = item - bins_remain_cap[i]`
    # A smaller `bins_remain_cap[i]` value (closer to `item`) will result in a score
    # closer to zero (i.e., less negative), which is considered a higher priority.
    # Example:
    # If item=0.5:
    #   Bin A (cap=1.0): score = 0.5 - 1.0 = -0.5
    #   Bin B (cap=0.7): score = 0.5 - 0.7 = -0.2 (higher priority than A)
    #   Bin C (cap=0.5): score = 0.5 - 0.5 = 0.0  (perfect fit, highest priority)
    # The maximum value among these (e.g., -0.2 or 0.0) corresponds to the best fit.
    priority_scores[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priority_scores
```
