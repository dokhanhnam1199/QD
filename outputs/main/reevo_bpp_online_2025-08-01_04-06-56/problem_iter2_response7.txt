```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements a Best-Fit-like strategy, prioritizing bins that,
    after accommodating the item, would have the least remaining capacity (i.e., are "snugly fit").
    Bins where the item does not fit receive a very low priority to ensure they are never chosen
    if there's any bin where the item fits.

    This design naturally integrates the "perfect fit" case (where remaining capacity is zero)
    into the primary heuristic. A perfect fit will result in a hypothetical remaining capacity
    of 0, leading to a priority score of 0, which is the highest possible score among bins
    where the item fits. This avoids the need for arbitrary, extreme bonuses
    for perfect fits, aligning with the principle of integrating ideal cases naturally.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity if the item were placed in each bin.
    # A smaller positive value here indicates a "tighter" fit (Best Fit).
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores with a very low value (-infinity) for all bins.
    # This ensures bins where the item cannot fit will not be selected unless no other bin fits.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits.
    # An item fits if the hypothetical_remaining capacity is non-negative.
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a priority score.
    # To implement Best Fit (minimize remaining capacity after placement),
    # we take the negative of the hypothetical remaining capacity.
    # This way, smaller positive remaining capacities result in larger (less negative) priority scores.
    # Example:
    # - If remaining = 0 (perfect fit), priority = 0 (highest possible for fitting bins).
    # - If remaining = 5, priority = -5.
    # - If remaining = 10, priority = -10.
    # Maximizing this priority score will naturally pick the bin with the smallest remaining space.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    return priority_scores
```
