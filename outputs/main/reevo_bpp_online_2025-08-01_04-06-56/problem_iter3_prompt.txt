{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nLeverage Best Fit's natural efficiency; prioritize simplicity and strict fit criteria. Avoid complex, arbitrary bonuses. Let core logic naturally handle ideal cases and edge cases for robust, continuous performance, preventing floating-point issues.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version implements a Best-Fit heuristic strategy. Bins that\n    can fit the item are prioritized based on how tightly the item fits,\n    leaving the smallest possible remaining capacity. Bins that cannot\n    fit the item are assigned a very low (negative infinity) priority.\n\n    The logic is:\n    1. For each bin, determine if the item can fit.\n    2. If the item can fit, calculate the remaining capacity if the item\n       were placed (`remaining = bin_capacity - item`).\n    3. The goal of Best-Fit is to minimize this `remaining` capacity.\n       To achieve this by maximizing a priority score, we use `priority = -remaining`.\n       This means a perfect fit (remaining = 0) gets a priority of 0,\n       a fit leaving 1 unit gets -1, etc. Higher priorities are better.\n    4. If the item cannot fit, the bin receives a very low priority (negative infinity).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities for all bins to a very low value (effectively -infinity).\n    # This ensures that bins where the item does not fit are never chosen\n    # unless no bin fits (in which case a new bin would typically be opened\n    # by the higher-level packing algorithm).\n    priorities = np.full_like(bins_remain_cap, np.finfo(np.float64).min)\n\n    # Create a boolean mask for bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins where the item can fit, calculate the potential remaining capacity\n    # if the item were placed.\n    potential_remaining_if_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priority scores for fitting bins.\n    # The Best-Fit strategy aims to minimize the remaining capacity.\n    # By taking the negative of the remaining capacity, we convert the\n    # minimization problem into a maximization problem (where a smaller positive\n    # remaining capacity yields a larger negative value, which is closer to 0,\n    # and thus a higher priority).\n    priorities[can_fit_mask] = -potential_remaining_if_fit\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}