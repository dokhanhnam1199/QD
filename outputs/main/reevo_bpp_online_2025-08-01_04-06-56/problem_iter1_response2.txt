```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements a "Best Fit with Perfect Fit Bonus" strategy for online Bin Packing.
    It prioritizes bins based on the following hierarchy:
    1. **Perfect Fit:** Bins where the item fits exactly, leaving zero remaining capacity. These are given
       the highest possible priority to ensure they are chosen first.
    2. **Best Fit (non-perfect):** Among bins where the item fits but does not result in a perfect fit,
       priority is given to those that leave the smallest positive remaining capacity. This encourages
       keeping larger contiguous spaces available in other bins.
    3. **No Fit:** Bins where the item cannot be placed (remaining capacity would be negative) are given
       the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Use a small tolerance for floating-point comparisons to handle precision issues
    # when checking for perfect fits or if an item "fits".
    tolerance = 1e-9 
    
    # Calculate the potential remaining capacity for each bin if the item were placed there.
    potential_remainders = bins_remain_cap - item
    
    # Initialize all priorities to negative infinity. This ensures bins where the item
    # cannot fit are not considered.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # Create a boolean mask for bins where the item can theoretically fit.
    # We use -tolerance because due to floating point arithmetic, a value like -1e-10 might
    # represent a perfect fit, or a negligible overflow. We consider it a fit if it's
    # essentially non-negative.
    can_fit_mask = potential_remainders >= -tolerance
    
    # For bins where the item can fit:
    # Apply the Best Fit logic. Best Fit minimizes the remaining space.
    # To represent this as a priority score where higher is better, we negate the remainder.
    # So, a smaller positive remainder (e.g., 1.0) gets a priority of -1.0,
    # while a larger remainder (e.g., 5.0) gets a priority of -5.0.
    # Thus, the bin with the smallest positive remainder will have the highest (least negative) priority.
    base_bf_priority = -potential_remainders[can_fit_mask]
    
    # Assign these Best Fit priorities to the corresponding bins.
    priorities[can_fit_mask] = base_bf_priority
    
    # Now, handle the special case of a "perfect fit".
    # A perfect fit occurs when the item size is extremely close to the bin's remaining capacity,
    # resulting in a remainder very close to zero.
    perfect_fit_mask = np.abs(potential_remainders) < tolerance
    
    # Combine this with the `can_fit_mask` to ensure we only apply the perfect fit bonus
    # to bins that are actually suitable (i.e., not those where a negative remainder was just
    # slightly less than zero due to tolerance).
    perfect_fit_mask_and_can_fit = perfect_fit_mask & can_fit_mask
    
    # Assign an extremely high priority score to perfect fits. This ensures they are
    # always chosen over any non-perfect Best Fit option.
    # np.finfo(np.float64).max provides the maximum representable float value, guaranteeing
    # it's higher than any score from -potential_remainders (which are typically 0 or negative for valid fits).
    priorities[perfect_fit_mask_and_can_fit] = np.finfo(np.float64).max
    
    return priorities
```
