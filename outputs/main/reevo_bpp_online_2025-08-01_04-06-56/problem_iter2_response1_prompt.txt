{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a \"Best Fit with Perfect Fit Bonus\" strategy for online Bin Packing.\n    It prioritizes bins based on the following hierarchy:\n    1. **Perfect Fit:** Bins where the item fits exactly, leaving zero remaining capacity. These are given\n       the highest possible priority to ensure they are chosen first.\n    2. **Best Fit (non-perfect):** Among bins where the item fits but does not result in a perfect fit,\n       priority is given to those that leave the smallest positive remaining capacity. This encourages\n       keeping larger contiguous spaces available in other bins.\n    3. **No Fit:** Bins where the item cannot be placed (remaining capacity would be negative) are given\n       the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    \n    # Use a small tolerance for floating-point comparisons to handle precision issues\n    # when checking for perfect fits or if an item \"fits\".\n    tolerance = 1e-9 \n    \n    # Calculate the potential remaining capacity for each bin if the item were placed there.\n    potential_remainders = bins_remain_cap - item\n    \n    # Initialize all priorities to negative infinity. This ensures bins where the item\n    # cannot fit are not considered.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    # Create a boolean mask for bins where the item can theoretically fit.\n    # We use -tolerance because due to floating point arithmetic, a value like -1e-10 might\n    # represent a perfect fit, or a negligible overflow. We consider it a fit if it's\n    # essentially non-negative.\n    can_fit_mask = potential_remainders >= -tolerance\n    \n    # For bins where the item can fit:\n    # Apply the Best Fit logic. Best Fit minimizes the remaining space.\n    # To represent this as a priority score where higher is better, we negate the remainder.\n    # So, a smaller positive remainder (e.g., 1.0) gets a priority of -1.0,\n    # while a larger remainder (e.g., 5.0) gets a priority of -5.0.\n    # Thus, the bin with the smallest positive remainder will have the highest (least negative) priority.\n    base_bf_priority = -potential_remainders[can_fit_mask]\n    \n    # Assign these Best Fit priorities to the corresponding bins.\n    priorities[can_fit_mask] = base_bf_priority\n    \n    # Now, handle the special case of a \"perfect fit\".\n    # A perfect fit occurs when the item size is extremely close to the bin's remaining capacity,\n    # resulting in a remainder very close to zero.\n    perfect_fit_mask = np.abs(potential_remainders) < tolerance\n    \n    # Combine this with the `can_fit_mask` to ensure we only apply the perfect fit bonus\n    # to bins that are actually suitable (i.e., not those where a negative remainder was just\n    # slightly less than zero due to tolerance).\n    perfect_fit_mask_and_can_fit = perfect_fit_mask & can_fit_mask\n    \n    # Assign an extremely high priority score to perfect fits. This ensures they are\n    # always chosen over any non-perfect Best Fit option.\n    # np.finfo(np.float64).max provides the maximum representable float value, guaranteeing\n    # it's higher than any score from -potential_remainders (which are typically 0 or negative for valid fits).\n    priorities[perfect_fit_mask_and_can_fit] = np.finfo(np.float64).max\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on a Best Fit (BF) strategy.\n\n    The Best Fit strategy aims to place the item into the bin that will leave the least\n    remaining space after the item is placed. This heuristic generally leads to a lower\n    number of bins used in the long run for Bin Packing Problems.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each existing bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score for each bin.\n        A higher score indicates a more desirable bin for the current item.\n        Bins where the item does not fit will receive a score of negative infinity,\n        ensuring they are not selected.\n    \"\"\"\n    # Initialize all priority scores to negative infinity.\n    # This ensures that bins where the item cannot fit will have the lowest possible priority.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins the current item can fit into.\n    # A bin is suitable if its remaining capacity is greater than or equal to the item's size.\n    can_fit_mask = item <= bins_remain_cap\n\n    # For bins where the item can fit, calculate the priority score.\n    # The Best Fit strategy seeks to minimize the remaining empty space in a bin after\n    # placing the item. This is equivalent to maximizing the \"fullness\" of the bin,\n    # or minimizing `(remaining_capacity - item_size)`.\n    # To represent this as a priority score that we want to maximize, we can use:\n    # `score = item - bins_remain_cap[i]`\n    # A smaller `bins_remain_cap[i]` value (closer to `item`) will result in a score\n    # closer to zero (i.e., less negative), which is considered a higher priority.\n    # Example:\n    # If item=0.5:\n    #   Bin A (cap=1.0): score = 0.5 - 1.0 = -0.5\n    #   Bin B (cap=0.7): score = 0.5 - 0.7 = -0.2 (higher priority than A)\n    #   Bin C (cap=0.5): score = 0.5 - 0.5 = 0.0  (perfect fit, highest priority)\n    # The maximum value among these (e.g., -0.2 or 0.0) corresponds to the best fit.\n    priority_scores[can_fit_mask] = item - bins_remain_cap[can_fit_mask]\n\n    return priority_scores\n\n[Reflection]\nSimplicity, where core heuristic naturally covers edge cases, often performs better. Avoid redundant, complex rules.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}