```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a robust "Best Fit" strategy for online Bin Packing.
    It prioritizes bins that will have the smallest *positive* remaining capacity
    after the item is placed. This encourages keeping larger contiguous spaces
    available in other bins. Bins where the item does not fit are assigned the
    lowest possible priority.

    This version focuses on simplicity and robustness:
    1. **Robust Fit Check**: Uses a straightforward comparison (`bins_remain_cap >= item`)
       to determine if an item fits, avoiding the complexities and potential pitfalls
       of floating-point tolerance in identifying "perfect fits" or general fit criteria.
    2. **Simple Prioritization**: Directly applies the Best Fit principle without
       adding complex "perfect fit bonuses" or other intricate scoring mechanisms,
       as simpler criteria often lead to more predictable and robust behavior.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Initialize all priority scores to a very small negative number (-infinity).
    # This ensures that bins where the item cannot fit are effectively disqualified
    # from selection, unless no other options are available (which typically means
    # a new bin would be opened in a full BPP algorithm, not handled by this function).
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    # This is a robust check: if the bin's capacity is less than the item size,
    # the item simply does not fit. No floating-point tolerance is needed here
    # beyond standard IEEE 754 precision for `item` and `bins_remain_cap`.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit:
    # Calculate the remaining capacity if the item were placed.
    # The Best Fit strategy aims to *minimize* this remaining capacity
    # (i.e., `bins_remain_cap[i] - item`).
    # To convert this minimization into a maximization priority score (where
    # a higher score is better), we take the negative of the remaining capacity.
    # Example:
    # - If item is 3 and bin has 3 (perfect fit), remainder = 0, score = 0.
    # - If item is 3 and bin has 4, remainder = 1, score = -1.
    # - If item is 3 and bin has 10, remainder = 7, score = -7.
    # A score of 0 is highest (most desirable), -1 is next, etc.
    if np.any(can_fit_mask):
        remaining_after_fit = bins_remain_cap[can_fit_mask] - item
        priority_scores[can_fit_mask] = -remaining_after_fit

    return priority_scores
```
