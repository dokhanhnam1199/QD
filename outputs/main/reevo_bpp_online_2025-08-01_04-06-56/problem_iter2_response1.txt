```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for each bin based on the Best Fit (BF) strategy,
    embodying simplicity and natural handling of edge cases.

    The Best Fit strategy aims to place an item into the bin that will leave the
    smallest amount of remaining empty space after the item is placed. This heuristic
    is generally effective in minimizing the total number of bins used for Bin Packing
    Problems.

    This implementation prioritizes bins as follows:
    1. **Non-fitting bins:** Bins where the item cannot be placed (remaining capacity
       is less than the item size) are assigned a score of negative infinity. This
       ensures they are never selected.
    2. **Fitting bins (Best Fit):** For bins where the item fits, the score is calculated
       such that bins leaving less remaining capacity receive a higher priority.
       The score is `item - bins_remain_cap`.
       - A smaller `bins_remain_cap` value (closer to `item`) results in a score
         closer to zero (less negative), indicating higher priority.
       - A **perfect fit** (where `bins_remain_cap` is exactly equal to `item`)
         naturally results in a score of `0.0`, which is the highest possible score
         from this calculation, effectively giving perfect fits the top priority
         without requiring special handling or bonus rules.

    This approach avoids complex conditional logic or floating-point tolerances
    for special cases, as the core Best Fit calculation inherently provides the
    desired prioritization for perfect fits and handles non-fits cleanly.

    Args:
        item: Size of the item to be placed.
        bins_remain_cap: NumPy array representing the current remaining capacity of each bin.

    Return:
        NumPy array of the same size as `bins_remain_cap`, containing the priority score
        for each bin. A higher score indicates a more desirable bin for the current item.
    """
    # Initialize all priority scores to negative infinity. This ensures that any bin
    # where the item cannot fit will have the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins have enough remaining capacity to accommodate the item.
    # This comparison is robust for typical floating-point scenarios.
    can_fit_mask = item <= bins_remain_cap

    # For the bins where the item can fit, calculate their priority score based on Best Fit.
    # We want to minimize the remaining space (`bins_remain_cap - item`).
    # To convert this minimization problem into a maximization problem (where higher score is better),
    # we can use the negative of the remaining space, or equivalently `item - bins_remain_cap`.
    # This naturally assigns higher scores to bins that result in less empty space.
    # Example: item=0.5
    # - Bin 1 (cap=1.0): score = 0.5 - 1.0 = -0.5 (leaves 0.5 space)
    # - Bin 2 (cap=0.7): score = 0.5 - 0.7 = -0.2 (leaves 0.2 space, better fit)
    # - Bin 3 (cap=0.5): score = 0.5 - 0.5 = 0.0  (perfect fit, leaves 0.0 space, best)
    # The maximum score (0.0) correctly indicates the optimal choice.
    priority_scores[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priority_scores
```
