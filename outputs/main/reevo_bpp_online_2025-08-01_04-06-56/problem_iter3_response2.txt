```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit heuristic strategy, consistent with the
    principles of simplicity, strict fit criteria, and avoiding arbitrary bonuses.
    Bins that can fit the item are prioritized based on how tightly the item fits,
    leaving the smallest possible remaining capacity. Bins that cannot fit the
    item are assigned a very low (negative infinity) priority.

    The core logic leverages Best Fit's natural efficiency:
    1. For each bin, determine if the item can fit.
    2. If the item can fit, calculate the remaining capacity if the item
       were placed (`potential_remaining = bin_capacity - item`).
    3. To minimize this `potential_remaining` by maximizing a priority score,
       we assign `priority = -potential_remaining`. This ensures that a perfect
       fit (potential_remaining = 0) receives the highest valid priority (0),
       and tighter fits (smaller positive potential_remaining) receive higher
       priorities (closer to 0). This strict fit criterion is simple and effective.
    4. If the item cannot fit, the bin receives a very low priority
       (negative infinity), effectively precluding it from selection.

    This approach naturally handles ideal cases (perfect fit) and edge cases
    (bins too small) robustly, ensuring continuous performance and avoiding
    floating-point issues from complex calculations or arbitrary bonuses.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities for all bins to a very low value (effectively -infinity).
    # This ensures that bins where the item does not fit are never chosen unless
    # no bin fits, aligning with the strict fit criteria.
    priorities = np.full_like(bins_remain_cap, np.finfo(np.float64).min)

    # Create a boolean mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the potential remaining capacity
    # if the item were placed. This is the core calculation for Best Fit.
    potential_remaining_if_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores for fitting bins. The Best-Fit strategy aims to
    # minimize the remaining capacity. By taking the negative of the remaining
    # capacity, we convert the minimization problem into a maximization problem.
    # This simple transformation effectively ranks bins from tightest fit (priority close to 0)
    # to loosest fit (priority further negative), leveraging Best Fit's natural efficiency.
    priorities[can_fit_mask] = -potential_remaining_if_fit

    return priorities
```
