```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit heuristic strategy, prioritizing
    simplicity and direct calculation to find the tightest fit.

    The logic is:
    1. For each bin, calculate the hypothetical remaining capacity if the item
       were placed (`potential_remaining = bin_capacity - item`). This value
       will be negative for bins where the item does not fit.
    2. The Best-Fit strategy aims to minimize this `potential_remaining`
       capacity among bins that can fit. To convert this into a maximization
       problem for priority, we use `priority = -potential_remaining`.
       A perfect fit (remaining = 0) gets a priority of 0, a fit leaving
       1 unit gets -1, etc. Higher priorities are better.
    3. For bins where the item genuinely cannot fit (i.e., `potential_remaining`
       is negative), assign a very low priority (negative infinity) to ensure
       they are never chosen over a valid bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for all bins if the item were placed.
    # This operation is vectorized and efficient. A negative result here indicates
    # that the item does not fit into that particular bin.
    potential_remaining = bins_remain_cap - item

    # Initialize priorities based on the Best-Fit strategy: minimize remaining capacity.
    # By taking the negative, we transform minimization into maximization.
    # A smaller positive `potential_remaining` yields a larger (closer to zero)
    # negative value, indicating a higher preference.
    priorities = -potential_remaining

    # Identify bins where the item truly does not fit (where remaining capacity would be negative).
    cannot_fit_mask = potential_remaining < 0

    # Assign a very low priority (negative infinity) to bins that cannot fit the item.
    # This strictly excludes them from selection unless no valid bin exists.
    priorities[cannot_fit_mask] = np.finfo(np.float64).min

    return priorities
```
