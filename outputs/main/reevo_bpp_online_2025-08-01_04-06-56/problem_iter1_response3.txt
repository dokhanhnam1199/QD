```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic.

    The Best Fit heuristic aims to place the item in the bin where it fits
    most snugly, i.e., leaving the smallest possible remaining capacity after
    placement. This often leads to better space utilization and fewer bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate more desirable bins. Bins where the item does
        not fit will have a very low (negative infinity) priority to ensure
        they are never selected.
    """
    # Calculate the remaining capacity in each bin if the current item were placed there.
    # This is a vectorized operation, applying to all bins simultaneously.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit the item must have a
    # very low priority (e.g., negative infinity) to ensure they are not chosen.
    # We use a float dtype to accommodate -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the indices of bins where the item can actually fit.
    # A bin fits if its potential remaining capacity is non-negative.
    can_fit_indices = potential_remaining_cap >= 0

    # For bins where the item fits, assign a priority score.
    # For Best Fit, we want to minimize `potential_remaining_cap`.
    # By taking the negative of `potential_remaining_cap`, a smaller positive
    # remaining capacity (which is desired for best fit) will result in a
    # larger (less negative, i.e., higher) priority score.
    priority_scores[can_fit_indices] = -potential_remaining_cap[can_fit_indices]

    return priority_scores
```
