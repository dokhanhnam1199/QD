```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a "Best Fit" strategy: it prioritizes bins
    that will have the smallest remaining capacity after the item is placed,
    among those where the item can actually fit. Bins where the item does
    not fit are given the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Initialize all priority scores to a very small negative number (-infinity).
    # This ensures that bins where the item cannot fit will never be chosen
    # unless no other bin is available (which typically implies opening a new bin
    # in a real online BPP setup, outside the scope of this priority function).
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins have enough remaining capacity for the current item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate the "snugness" score.
    # The goal of Best Fit is to minimize the remaining capacity after placement
    # (i.e., minimize `bins_remain_cap[i] - item`).
    # To convert this minimization problem into a maximization priority score,
    # we take the negative of this difference.
    # A difference close to zero (e.g., item fills the bin perfectly) will result
    # in a score close to zero, which is the highest possible score.
    # Larger differences (more wasted space) will result in more negative scores.
    if np.any(can_fit_mask):
        remaining_after_fit = bins_remain_cap[can_fit_mask] - item
        priority_scores[can_fit_mask] = -remaining_after_fit

    return priority_scores
```
