[
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version implements a Best-Fit heuristic strategy. Bins that\n    can fit the item are prioritized based on how tightly the item fits,\n    leaving the smallest possible remaining capacity. Bins that cannot\n    fit the item are assigned a very low (negative infinity) priority.\n\n    The logic is:\n    1. For each bin, determine if the item can fit.\n    2. If the item can fit, calculate the remaining capacity if the item\n       were placed (`remaining = bin_capacity - item`).\n    3. The goal of Best-Fit is to minimize this `remaining` capacity.\n       To achieve this by maximizing a priority score, we use `priority = -remaining`.\n       This means a perfect fit (remaining = 0) gets a priority of 0,\n       a fit leaving 1 unit gets -1, etc. Higher priorities are better.\n    4. If the item cannot fit, the bin receives a very low priority (negative infinity).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities for all bins to a very low value (effectively -infinity).\n    # This ensures that bins where the item does not fit are never chosen\n    # unless no bin fits (in which case a new bin would typically be opened\n    # by the higher-level packing algorithm).\n    priorities = np.full_like(bins_remain_cap, np.finfo(np.float64).min)\n\n    # Create a boolean mask for bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins where the item can fit, calculate the potential remaining capacity\n    # if the item were placed.\n    potential_remaining_if_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priority scores for fitting bins.\n    # The Best-Fit strategy aims to minimize the remaining capacity.\n    # By taking the negative of the remaining capacity, we convert the\n    # minimization problem into a maximization problem (where a smaller positive\n    # remaining capacity yields a larger negative value, which is closer to 0,\n    # and thus a higher priority).\n    priorities[can_fit_mask] = -potential_remaining_if_fit\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response1.txt_stdout.txt",
    "code_path": "problem_iter1_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version implements a Best-Fit-like strategy, prioritizing bins that,\n    after accommodating the item, would have the least remaining capacity (i.e., are \"snugly fit\").\n    Bins where the item does not fit receive a very low priority to ensure they are never chosen\n    if there's any bin where the item fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the hypothetical remaining capacity if the item were placed in each bin.\n    # A smaller positive value here indicates a \"tighter\" fit (Best Fit).\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores with a very low value (-infinity) for all bins.\n    # This ensures bins where the item cannot fit will not be selected unless no other bin fits.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item actually fits.\n    # An item fits if the hypothetical_remaining capacity is non-negative.\n    fits_mask = hypothetical_remaining >= 0\n\n    # For bins where the item fits, assign a priority score.\n    # To implement Best Fit (minimize remaining capacity after placement),\n    # we take the negative of the hypothetical remaining capacity.\n    # This way, smaller positive remaining capacities result in larger (less negative) priority scores.\n    # For example:\n    # - If remaining = 0 (perfect fit), priority = 0 (highest possible for fitting bins).\n    # - If remaining = 5, priority = -5.\n    # - If remaining = 10, priority = -10.\n    # Maximizing this priority score will naturally pick the bin with the smallest remaining space.\n    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]\n\n    return priority_scores",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response2.txt_stdout.txt",
    "code_path": "problem_iter1_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a \"Best Fit with Perfect Fit Bonus\" strategy for online Bin Packing.\n    It prioritizes bins based on the following hierarchy:\n    1. **Perfect Fit:** Bins where the item fits exactly, leaving zero remaining capacity. These are given\n       the highest possible priority to ensure they are chosen first.\n    2. **Best Fit (non-perfect):** Among bins where the item fits but does not result in a perfect fit,\n       priority is given to those that leave the smallest positive remaining capacity. This encourages\n       keeping larger contiguous spaces available in other bins.\n    3. **No Fit:** Bins where the item cannot be placed (remaining capacity would be negative) are given\n       the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    \n    # Use a small tolerance for floating-point comparisons to handle precision issues\n    # when checking for perfect fits or if an item \"fits\".\n    tolerance = 1e-9 \n    \n    # Calculate the potential remaining capacity for each bin if the item were placed there.\n    potential_remainders = bins_remain_cap - item\n    \n    # Initialize all priorities to negative infinity. This ensures bins where the item\n    # cannot fit are not considered.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    # Create a boolean mask for bins where the item can theoretically fit.\n    # We use -tolerance because due to floating point arithmetic, a value like -1e-10 might\n    # represent a perfect fit, or a negligible overflow. We consider it a fit if it's\n    # essentially non-negative.\n    can_fit_mask = potential_remainders >= -tolerance\n    \n    # For bins where the item can fit:\n    # Apply the Best Fit logic. Best Fit minimizes the remaining space.\n    # To represent this as a priority score where higher is better, we negate the remainder.\n    # So, a smaller positive remainder (e.g., 1.0) gets a priority of -1.0,\n    # while a larger remainder (e.g., 5.0) gets a priority of -5.0.\n    # Thus, the bin with the smallest positive remainder will have the highest (least negative) priority.\n    base_bf_priority = -potential_remainders[can_fit_mask]\n    \n    # Assign these Best Fit priorities to the corresponding bins.\n    priorities[can_fit_mask] = base_bf_priority\n    \n    # Now, handle the special case of a \"perfect fit\".\n    # A perfect fit occurs when the item size is extremely close to the bin's remaining capacity,\n    # resulting in a remainder very close to zero.\n    perfect_fit_mask = np.abs(potential_remainders) < tolerance\n    \n    # Combine this with the `can_fit_mask` to ensure we only apply the perfect fit bonus\n    # to bins that are actually suitable (i.e., not those where a negative remainder was just\n    # slightly less than zero due to tolerance).\n    perfect_fit_mask_and_can_fit = perfect_fit_mask & can_fit_mask\n    \n    # Assign an extremely high priority score to perfect fits. This ensures they are\n    # always chosen over any non-perfect Best Fit option.\n    # np.finfo(np.float64).max provides the maximum representable float value, guaranteeing\n    # it's higher than any score from -potential_remainders (which are typically 0 or negative for valid fits).\n    priorities[perfect_fit_mask_and_can_fit] = np.finfo(np.float64).max\n    \n    return priorities",
    "response_id": 2,
    "obj": 5.195452732349436,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response3.txt_stdout.txt",
    "code_path": "problem_iter1_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit heuristic.\n\n    The Best Fit heuristic aims to place the item in the bin where it fits\n    most snugly, i.e., leaving the smallest possible remaining capacity after\n    placement. This often leads to better space utilization and fewer bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate more desirable bins. Bins where the item does\n        not fit will have a very low (negative infinity) priority to ensure\n        they are never selected.\n    \"\"\"\n    # Calculate the remaining capacity in each bin if the current item were placed there.\n    # This is a vectorized operation, applying to all bins simultaneously.\n    potential_remaining_cap = bins_remain_cap - item\n\n    # Initialize priority scores. Bins that cannot fit the item must have a\n    # very low priority (e.g., negative infinity) to ensure they are not chosen.\n    # We use a float dtype to accommodate -np.inf.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify the indices of bins where the item can actually fit.\n    # A bin fits if its potential remaining capacity is non-negative.\n    can_fit_indices = potential_remaining_cap >= 0\n\n    # For bins where the item fits, assign a priority score.\n    # For Best Fit, we want to minimize `potential_remaining_cap`.\n    # By taking the negative of `potential_remaining_cap`, a smaller positive\n    # remaining capacity (which is desired for best fit) will result in a\n    # larger (less negative, i.e., higher) priority score.\n    priority_scores[can_fit_indices] = -potential_remaining_cap[can_fit_indices]\n\n    return priority_scores",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response4.txt_stdout.txt",
    "code_path": "problem_iter1_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit heuristic.\n\n    This heuristic attempts to place an item into the bin that, if the item\n    were placed in it, would leave the smallest remaining capacity. This is\n    done to keep bins as 'tight' as possible, potentially leaving larger\n    spaces in other bins for future, larger items.\n\n    Algorithm:\n    1. Initialize all bin priorities to a very low value (e.g., negative infinity).\n       This effectively disqualifies bins where the item cannot fit.\n    2. Identify all bins where the item can physically fit (remaining capacity >= item size).\n    3. For these fitting bins, calculate the hypothetical remaining space if the\n       item were placed: `remaining_space = bin_capacity - item_size`.\n    4. The priority for a fitting bin is defined as the *negative* of this\n       `remaining_space`. By maximizing this negative value, we effectively\n       minimize the actual `remaining_space`. A perfect fit (0 remaining space)\n       will yield a priority of 0, which is the highest possible priority for\n       any positive item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate a more preferred bin.\n    \"\"\"\n    # Initialize all priorities to negative infinity.\n    # This ensures that bins where the item does not fit will have the lowest\n    # possible priority and won't be selected.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask to identify bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining space if the item were placed in each fitting bin.\n    # Only perform calculation for bins where 'can_fit_mask' is True.\n    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priorities for the bins where the item fits.\n    # We want to minimize the remaining space, so we take the negative of it.\n    # A smaller positive remaining_space_after_fit will result in a\n    # larger (closer to zero or positive if item could be negative) priority score.\n    # A perfect fit (remaining_space_after_fit == 0) yields a priority of 0.\n    priorities[can_fit_mask] = -remaining_space_after_fit\n\n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response5.txt_stdout.txt",
    "code_path": "problem_iter1_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic implements a \"Best Fit\" strategy: it prioritizes bins\n    that will have the smallest remaining capacity after the item is placed,\n    among those where the item can actually fit. Bins where the item does\n    not fit are given the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a more desirable bin.\n    \"\"\"\n    # Initialize all priority scores to a very small negative number (-infinity).\n    # This ensures that bins where the item cannot fit will never be chosen\n    # unless no other bin is available (which typically implies opening a new bin\n    # in a real online BPP setup, outside the scope of this priority function).\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins have enough remaining capacity for the current item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For the bins where the item can fit, calculate the \"snugness\" score.\n    # The goal of Best Fit is to minimize the remaining capacity after placement\n    # (i.e., minimize `bins_remain_cap[i] - item`).\n    # To convert this minimization problem into a maximization priority score,\n    # we take the negative of this difference.\n    # A difference close to zero (e.g., item fills the bin perfectly) will result\n    # in a score close to zero, which is the highest possible score.\n    # Larger differences (more wasted space) will result in more negative scores.\n    if np.any(can_fit_mask):\n        remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n        priority_scores[can_fit_mask] = -remaining_after_fit\n\n    return priority_scores",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response6.txt_stdout.txt",
    "code_path": "problem_iter1_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic implements a Best Fit (BF) strategy: it prioritizes bins\n    that will have the smallest remaining capacity after the item is placed,\n    meaning the item fits most snugly. Bins where the item does not fit\n    are given a very low priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority.\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # Note: Some values in this array might be negative if the item does not fit.\n    remaining_after_placement = bins_remain_cap - item\n\n    # Create a boolean mask: True for bins where the item can fit (remaining_after_placement >= 0).\n    can_fit_mask = remaining_after_placement >= 0\n\n    # Initialize priority scores.\n    # For bins where the item fits, the score is the negative of the remaining capacity.\n    # This ensures that a smaller positive remaining capacity (tighter fit)\n    # results in a larger priority score (closer to zero).\n    # For bins where the item does not fit, assign a very low priority (-np.inf).\n    # This ensures these bins are never selected unless no other bins are available\n    # (in which case the system typically opens a new bin).\n    priority_scores = np.where(can_fit_mask, -remaining_after_placement, -np.inf)\n\n    return priority_scores",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response7.txt_stdout.txt",
    "code_path": "problem_iter1_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Implements a Best Fit (BF) inspired strategy for online Bin Packing.\n\n    This heuristic prioritizes placing the item into a bin that will leave\n    the least amount of remaining capacity after placement (i.e., the tightest fit).\n    The goal is to minimize internal fragmentation within bins, which often\n    leads to a more compact packing and a reduced total number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Returns:\n        Array of the same size as bins_remain_cap with priority score for each bin.\n        - Bins that cannot accommodate the item are assigned a very low (negative infinity) priority.\n        - For bins that can accommodate the item, the priority is derived from the\n          negative of the remaining capacity if the item were placed. This means\n          a perfect fit (0 remaining capacity) yields the highest score (0),\n          and smaller positive remaining capacities lead to higher (less negative) scores.\n    \"\"\"\n    # Calculate the hypothetical remaining capacity for each bin if the current item\n    # were placed into it. A negative value indicates the bin cannot fit the item.\n    potential_remaining_after_fit = bins_remain_cap - item\n\n    # Initialize all priorities to negative infinity. This ensures that any bin\n    # that cannot fit the item will have an extremely low priority and will only\n    # be considered if no other bin can fit the item (which should not happen\n    # in a well-defined online BPP system that can open new bins).\n    priorities = np.full_like(bins_remain_cap, np.NINF)\n\n    # Create a boolean mask to identify only those bins that can actually\n    # accommodate the current item (i.e., where potential_remaining_after_fit is non-negative).\n    can_fit_mask = potential_remaining_after_fit >= 0\n\n    # For the bins that can fit, calculate their priority score.\n    # The Best Fit strategy aims to minimize the remaining space. To translate this\n    # into a priority score (where higher is better), we use the negative of the\n    # potential remaining capacity.\n    # - If potential_remaining_after_fit is 0 (perfect fit), priority becomes 0 (highest possible).\n    # - If potential_remaining_after_fit is 0.1, priority becomes -0.1.\n    # - If potential_remaining_after_fit is 0.5, priority becomes -0.5.\n    # This correctly makes smaller positive remaining capacities correspond to higher priorities.\n    priorities[can_fit_mask] = -potential_remaining_after_fit[can_fit_mask]\n\n    return priorities",
    "response_id": 7,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 32, in priority_v2\n    # To represent this as a priority score that we want to maximize, we can use:\n  File \"/home/dokhanhnam1199/.local/lib/python3.10/site-packages/numpy/__init__.py\", line 400, in __getattr__\n    raise AttributeError(\nAttributeError: `np.NINF` was removed in the NumPy 2.0 release. Use `-np.inf` instead.\n6\n1\n"
  },
  {
    "stdout_filepath": "problem_iter1_response8.txt_stdout.txt",
    "code_path": "problem_iter1_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin based on a Best Fit (BF) strategy.\n\n    The Best Fit strategy aims to place the item into the bin that will leave the least\n    remaining space after the item is placed. This heuristic generally leads to a lower\n    number of bins used in the long run for Bin Packing Problems.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each existing bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score for each bin.\n        A higher score indicates a more desirable bin for the current item.\n        Bins where the item does not fit will receive a score of negative infinity,\n        ensuring they are not selected.\n    \"\"\"\n    # Initialize all priority scores to negative infinity.\n    # This ensures that bins where the item cannot fit will have the lowest possible priority.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins the current item can fit into.\n    # A bin is suitable if its remaining capacity is greater than or equal to the item's size.\n    can_fit_mask = item <= bins_remain_cap\n\n    # For bins where the item can fit, calculate the priority score.\n    # The Best Fit strategy seeks to minimize the remaining empty space in a bin after\n    # placing the item. This is equivalent to maximizing the \"fullness\" of the bin,\n    # or minimizing `(remaining_capacity - item_size)`.\n    # To represent this as a priority score that we want to maximize, we can use:\n    # `score = item - bins_remain_cap[i]`\n    # A smaller `bins_remain_cap[i]` value (closer to `item`) will result in a score\n    # closer to zero (i.e., less negative), which is considered a higher priority.\n    # Example:\n    # If item=0.5:\n    #   Bin A (cap=1.0): score = 0.5 - 1.0 = -0.5\n    #   Bin B (cap=0.7): score = 0.5 - 0.7 = -0.2 (higher priority than A)\n    #   Bin C (cap=0.5): score = 0.5 - 0.5 = 0.0  (perfect fit, highest priority)\n    # The maximum value among these (e.g., -0.2 or 0.0) corresponds to the best fit.\n    priority_scores[can_fit_mask] = item - bins_remain_cap[can_fit_mask]\n\n    return priority_scores",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response9.txt_stdout.txt",
    "code_path": "problem_iter1_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This function implements a \"Best Fit\" heuristic logic for online bin packing.\n    It assigns a higher priority to bins that, after accommodating the item,\n    would have the smallest remaining capacity. Bins where the item does\n    not fit are assigned a very low (negative infinity) priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest priority score is the \"best fit\".\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A negative value indicates that the item does not fit in that bin.\n    potential_remaining_capacity = bins_remain_cap - item\n\n    # Initialize all priorities to a very low value (negative infinity).\n    # This effectively \"disqualifies\" bins that cannot fit the item.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit.\n    # A bin fits if its potential remaining capacity is non-negative.\n    fits_mask = potential_remaining_capacity >= 0\n\n    # For bins where the item fits, set their priority.\n    # To implement \"Best Fit\" (minimize remaining space), we want to maximize\n    # a score where a smaller positive `potential_remaining_capacity` leads\n    # to a higher score. This is achieved by taking the negative of the\n    # potential remaining capacity. For example:\n    # - If remaining capacity is 1, priority is -1.\n    # - If remaining capacity is 5, priority is -5.\n    # Since -1 > -5, the bin leaving 1 unit free will have a higher priority.\n    priorities[fits_mask] = -potential_remaining_capacity[fits_mask]\n\n    return priorities",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]