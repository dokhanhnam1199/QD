```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version continues to implement a Best-Fit heuristic strategy,
    fully aligning with the principles outlined in the prior reflection:
    simplicity, strict fit criteria, avoiding arbitrary bonuses, and
    robust handling of ideal/edge cases with minimal floating-point concerns.

    Bins that can fit the item are prioritized based on how tightly the item fits,
    leaving the smallest possible remaining capacity. Bins that cannot fit the
    item are assigned a very low (negative infinity) priority to disqualify them.

    The logic is:
    1. For each bin, determine if the item can fit.
    2. If the item can fit, calculate the remaining capacity if the item
       were placed (`remaining = bin_capacity - item`).
    3. To achieve the Best-Fit goal of minimizing this `remaining` capacity
       by maximizing a priority score, we use `priority = -remaining`.
       This means a perfect fit (remaining = 0) gets the highest priority (0),
       a fit leaving 1 unit gets -1, etc. Higher priorities are better.
    4. If the item cannot fit, the bin receives a very low priority (negative infinity),
       effectively making it ineligible for selection by a max priority chooser.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities for all bins to a very low value (effectively -infinity).
    # This robustly ensures that bins where the item does not fit are never chosen
    # unless no bin fits (in which case a new bin would typically be opened
    # by the higher-level packing algorithm).
    priorities = np.full_like(bins_remain_cap, np.finfo(np.float64).min)

    # Create a boolean mask for bins where the item can fit, adhering to strict fit criteria.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the potential remaining capacity.
    # This is the core Best-Fit logic, directly leveraging its natural efficiency.
    potential_remaining_if_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores for fitting bins. By taking the negative of the
    # remaining capacity, we convert the minimization of remaining space into
    # a maximization of priority score. This simple, direct approach avoids
    # complex or arbitrary bonuses and naturally handles ideal (perfect fit)
    # and edge cases without introducing floating-point issues from complex math.
    priorities[can_fit_mask] = -potential_remaining_if_fit

    return priorities
```
