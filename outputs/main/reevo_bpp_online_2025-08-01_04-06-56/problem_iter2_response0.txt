```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic logic for online bin packing.
    Following the reflection, it avoids overly aggressive or explicit bonuses.
    Instead, it assigns a higher priority to bins that, after accommodating the item,
    would have the smallest remaining capacity. A perfect fit (zero remaining capacity)
    naturally receives the highest priority in this scheme. Bins where the item does
    not fit are assigned a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest priority score is the "best fit".
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates that the item does not fit in that bin.
    potential_remaining_capacity = bins_remain_cap - item

    # Initialize all priorities to a very low value (negative infinity).
    # This effectively "disqualifies" bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # A bin fits if its potential remaining capacity is non-negative.
    fits_mask = potential_remaining_capacity >= 0

    # For bins where the item fits, set their priority.
    # To implement "Best Fit" (minimize remaining space), we want to maximize
    # a score where a smaller positive `potential_remaining_capacity` leads
    # to a higher score. This is achieved by taking the negative of the
    # potential remaining capacity.
    #
    # Examples:
    # - If remaining capacity is 0 (perfect fit), priority is 0.
    # - If remaining capacity is 1, priority is -1.
    # - If remaining capacity is 5, priority is -5.
    #
    # Since 0 > -1 > -5, a perfect fit naturally receives the highest priority,
    # followed by the smallest positive remaining capacities.
    priorities[fits_mask] = -potential_remaining_capacity[fits_mask]

    return priorities
```
