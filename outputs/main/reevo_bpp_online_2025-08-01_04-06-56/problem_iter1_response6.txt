```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best Fit (BF) strategy: it prioritizes bins
    that will have the smallest remaining capacity after the item is placed,
    meaning the item fits most snugly. Bins where the item does not fit
    are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # Note: Some values in this array might be negative if the item does not fit.
    remaining_after_placement = bins_remain_cap - item

    # Create a boolean mask: True for bins where the item can fit (remaining_after_placement >= 0).
    can_fit_mask = remaining_after_placement >= 0

    # Initialize priority scores.
    # For bins where the item fits, the score is the negative of the remaining capacity.
    # This ensures that a smaller positive remaining capacity (tighter fit)
    # results in a larger priority score (closer to zero).
    # For bins where the item does not fit, assign a very low priority (-np.inf).
    # This ensures these bins are never selected unless no other bins are available
    # (in which case the system typically opens a new bin).
    priority_scores = np.where(can_fit_mask, -remaining_after_placement, -np.inf)

    return priority_scores
```
