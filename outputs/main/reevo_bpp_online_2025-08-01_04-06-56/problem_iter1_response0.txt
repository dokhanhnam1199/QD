```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit heuristic strategy. Bins that
    can fit the item are prioritized based on how tightly the item fits,
    leaving the smallest possible remaining capacity. Bins that cannot
    fit the item are assigned a very low (negative infinity) priority.

    The logic is:
    1. For each bin, determine if the item can fit.
    2. If the item can fit, calculate the remaining capacity if the item
       were placed (`remaining = bin_capacity - item`).
    3. The goal of Best-Fit is to minimize this `remaining` capacity.
       To achieve this by maximizing a priority score, we use `priority = -remaining`.
       This means a perfect fit (remaining = 0) gets a priority of 0,
       a fit leaving 1 unit gets -1, etc. Higher priorities are better.
    4. If the item cannot fit, the bin receives a very low priority (negative infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities for all bins to a very low value (effectively -infinity).
    # This ensures that bins where the item does not fit are never chosen
    # unless no bin fits (in which case a new bin would typically be opened
    # by the higher-level packing algorithm).
    priorities = np.full_like(bins_remain_cap, np.finfo(np.float64).min)

    # Create a boolean mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the potential remaining capacity
    # if the item were placed.
    potential_remaining_if_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores for fitting bins.
    # The Best-Fit strategy aims to minimize the remaining capacity.
    # By taking the negative of the remaining capacity, we convert the
    # minimization problem into a maximization problem (where a smaller positive
    # remaining capacity yields a larger negative value, which is closer to 0,
    # and thus a higher priority).
    priorities[can_fit_mask] = -potential_remaining_if_fit

    return priorities
```
