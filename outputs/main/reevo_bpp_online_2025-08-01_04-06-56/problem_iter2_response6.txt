```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a pure Best Fit heuristic without artificial over-prioritization.

    This heuristic attempts to place an item into the bin that, if the item
    were placed in it, would leave the smallest non-negative remaining capacity.
    This strategy aims to keep bins as 'tight' as possible, potentially preserving
    larger contiguous spaces in other bins for future, larger items.

    This version adheres to the principle that simplicity in the priority function
    often leads to more robust performance in online scenarios, avoiding
    complex special-casing or artificial boosting of specific outcomes (like perfect fits)
    beyond what the core Best Fit logic naturally provides. A perfect fit is
    naturally the 'best' best fit, as it results in the smallest possible remaining space (zero).

    Algorithm:
    1. Initialize all bin priorities to negative infinity. This ensures bins
       where the item cannot fit are never selected.
    2. For all bins where the item *can* fit (i.e., `bins_remain_cap >= item`):
        a. Calculate the hypothetical remaining space if the item were placed:
           `remaining_space = bin_capacity - item_size`.
        b. The priority for such a bin is the *negative* of this `remaining_space`.
           This transforms the minimization problem (minimize remaining space)
           into a maximization problem (maximize priority score).
           - A perfect fit (0 remaining space) will yield a priority of 0.
           - A near-perfect fit (small positive remaining space, e.g., 1.0)
             will yield a slightly negative priority (e.g., -1.0).
           - A loose fit (larger positive remaining space, e.g., 5.0)
             will yield a more negative priority (e.g., -5.0).
           Thus, bins with smaller remaining spaces (including perfect fits) naturally
           receive higher (less negative or zero) priority scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more preferred bin.
    """
    # Initialize all priorities to negative infinity. This ensures bins where the item
    # does not fit are effectively disqualified.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space for only those bins where the item can fit.
    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priorities. For Best Fit, we want to minimize the remaining space.
    # To represent this as a priority (where higher is better), we take the negative
    # of the remaining space. A smaller positive remaining space (or zero for perfect fit)
    # results in a higher (less negative or zero) priority score.
    priorities[can_fit_mask] = -remaining_space_after_fit

    return priorities
```
