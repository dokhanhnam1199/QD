```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit heuristic strategy, aiming for simplicity
    and direct calculation as per the reflection. Bins that can fit the item
    are prioritized based on how tightly the item fits, leaving the smallest
    possible remaining capacity. Bins that cannot fit the item are assigned
    a very low (negative infinity) priority.

    The logic is:
    1. For each bin, determine if the item can fit.
    2. If the item can fit, the Best-Fit strategy aims to minimize the remaining
       capacity (`bin_capacity - item`). To convert this into a maximization
       problem for priority, we calculate `item - bins_remain_cap`.
       A perfect fit (`item == bins_remain_cap`) yields a priority of 0.
       A looser fit (more remaining capacity) results in a more negative score,
       effectively prioritizing tighter fits which results in less wasted space.
    3. If the item cannot fit, the bin receives a very low priority (negative infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities for all bins to a very low value (effectively -infinity).
    # This ensures that bins where the item does not fit are never chosen
    # unless no bin fits (in which case a new bin would typically be opened
    # by the higher-level packing algorithm).
    priorities = np.full_like(bins_remain_cap, np.finfo(np.float64).min)

    # Create a boolean mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, assign priority scores.
    # The Best-Fit strategy seeks to minimize the remaining capacity after placement.
    # Maximizing `(item - bins_remain_cap)` achieves this:
    # - If item = bin_remain_cap (perfect fit), priority = 0.
    # - If item < bin_remain_cap, priority is negative, becoming more negative
    #   as `bins_remain_cap` increases (i.e., looser fit).
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priorities
```
