```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic.

    This heuristic attempts to place an item into the bin that, if the item
    were placed in it, would leave the smallest remaining capacity. This is
    done to keep bins as 'tight' as possible, potentially leaving larger
    spaces in other bins for future, larger items.

    Algorithm:
    1. Initialize all bin priorities to a very low value (e.g., negative infinity).
       This effectively disqualifies bins where the item cannot fit.
    2. Identify all bins where the item can physically fit (remaining capacity >= item size).
    3. For these fitting bins, calculate the hypothetical remaining space if the
       item were placed: `remaining_space = bin_capacity - item_size`.
    4. The priority for a fitting bin is defined as the *negative* of this
       `remaining_space`. By maximizing this negative value, we effectively
       minimize the actual `remaining_space`. A perfect fit (0 remaining space)
       will yield a priority of 0, which is the highest possible priority for
       any positive item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more preferred bin.
    """
    # Initialize all priorities to negative infinity.
    # This ensures that bins where the item does not fit will have the lowest
    # possible priority and won't be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space if the item were placed in each fitting bin.
    # Only perform calculation for bins where 'can_fit_mask' is True.
    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priorities for the bins where the item fits.
    # We want to minimize the remaining space, so we take the negative of it.
    # A smaller positive remaining_space_after_fit will result in a
    # larger (closer to zero or positive if item could be negative) priority score.
    # A perfect fit (remaining_space_after_fit == 0) yields a priority of 0.
    priorities[can_fit_mask] = -remaining_space_after_fit

    return priorities
```
