```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a Best Fit (BF) strategy, optimized based on
    the reflection points for simplicity and robustness against floating-point issues.

    1.  **Simpler Best Fit handles perfect fits naturally:**
        The core of this strategy is to calculate the remaining capacity if
        the item is placed in each bin and then prioritize bins that leave
        the smallest amount of space. This is achieved by negating the
        remaining capacity.
        -   A perfect fit (0 remaining capacity) will naturally result in
            a priority score of 0, which is the highest possible score for a
            valid placement.
        -   Bins with a small positive remaining capacity will yield a
            priority score close to 0 (e.g., -0.1 for 0.1 remaining),
            correctly ranking them below perfect fits but above looser fits.
        This eliminates the need for an explicit, arbitrarily large "perfect
        fit bonus" and simplifies the logic while preserving the desired behavior.

    2.  **Strict remaining capacity checks avoid invalid placements from
        floating-point inaccuracies:**
        Bins are considered suitable only if the remaining capacity after
        placing the item is strictly non-negative (`>= 0`). This prevents
        any scenario where an item might technically "overflow" a bin, even
        by a tiny amount due to floating-point precision issues (e.g.,
        if `bin_cap - item` results in `-1e-15`). Bins where the item
        does not fit according to this strict criterion are assigned the
        lowest possible priority (`-np.inf`).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # This can result in negative values for bins where the item does not fit.
    remaining_after_placement = bins_remain_cap - item

    # Create a boolean mask for bins where the item can strictly fit.
    # A bin fits if the remaining capacity is zero or positive.
    # This is the "strict remaining capacity check".
    can_fit_mask = remaining_after_placement >= 0

    # Initialize priority scores.
    # Use np.where to efficiently assign scores based on the `can_fit_mask`.
    # For bins that can fit: The priority is the negative of the remaining capacity.
    #   A smaller positive remainder (tighter fit) results in a larger (less negative) score.
    #   A perfect fit (0 remainder) results in a score of 0, which is the highest valid score.
    # For bins that cannot fit: Assign -np.inf to ensure they are never selected
    # unless no valid bins exist (in which case a new bin would typically be opened).
    priority_scores = np.where(can_fit_mask, -remaining_after_placement, -np.inf)

    return priority_scores
```
