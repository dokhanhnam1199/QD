```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit heuristic strategy, aiming for conciseness
    and direct expression of the logic, consistent with the prior reflection
    on simplicity and core logic.

    Bins that can fit the item are prioritized based on how tightly the item fits,
    leaving the smallest possible remaining capacity. Bins that cannot fit the item
    are assigned a very low (negative infinity) priority.

    The logic is:
    1. For each bin, determine if the item can fit (`bins_remain_cap >= item`).
    2. If the item can fit, calculate the negative of the remaining capacity
       (`-(bins_remain_cap - item)`). This converts the Best-Fit goal (minimize
       remaining capacity) into a maximization problem (maximize priority).
       A perfect fit (remaining = 0) gets a priority of 0, which is the highest
       possible score for a non-negative remaining capacity.
    3. If the item cannot fit, the bin receives a very low priority
       (negative infinity), ensuring it is never chosen unless no bin fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate potential remaining capacities for all bins. For bins that
    # cannot fit the item, this will be a negative value.
    potential_remaining = bins_remain_cap - item

    # Use np.where to assign priorities:
    # If the item fits (potential_remaining >= 0), the priority is the
    # negative of the remaining capacity (Best-Fit criterion).
    # If the item does not fit (potential_remaining < 0), assign a
    # very low priority (negative infinity).
    priorities = np.where(
        potential_remaining >= 0,
        -potential_remaining,
        np.finfo(np.float64).min
    )

    return priorities
```
