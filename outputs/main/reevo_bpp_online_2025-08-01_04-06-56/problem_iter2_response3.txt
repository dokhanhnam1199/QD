```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic.

    This version adheres to the "Best Fit" principle, which aims to place
    the item in the bin where it fits most snugly (i.e., leaves the smallest
    positive remaining capacity). This approach is generally robust and
    effective in practice for online bin packing, often leading to efficient
    space utilization and minimizing the number of bins used.

    The "strict fit criteria" implies that a bin is considered suitable only
    if the item can be placed without exceeding its capacity (remaining capacity
    must be non-negative). No special bonuses for perfect fits are applied,
    keeping the heuristic "simpler" as suggested.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate more desirable bins. Bins where the item does
        not fit will have a very low (negative infinity) priority to ensure
        they are never selected.
    """
    # Calculate the potential remaining capacity in each bin if the item were placed.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit are never chosen.
    # Use float dtype to accommodate -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins the item can actually fit into.
    # A bin fits if its potential remaining capacity is non-negative.
    can_fit_mask = potential_remaining_cap >= 0

    # For bins where the item fits, apply the Best Fit logic.
    # Best Fit aims to minimize the remaining capacity after placement.
    # To represent this as a priority score where higher is better, we negate
    # the potential remaining capacity. A smaller (closer to zero) positive
    # remainder will then result in a larger (less negative or positive)
    # priority score, making it more attractive for selection.
    priority_scores[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    return priority_scores
```
