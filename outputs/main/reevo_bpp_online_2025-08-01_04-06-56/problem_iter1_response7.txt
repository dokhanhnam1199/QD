```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Implements a Best Fit (BF) inspired strategy for online Bin Packing.

    This heuristic prioritizes placing the item into a bin that will leave
    the least amount of remaining capacity after placement (i.e., the tightest fit).
    The goal is to minimize internal fragmentation within bins, which often
    leads to a more compact packing and a reduced total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of the same size as bins_remain_cap with priority score for each bin.
        - Bins that cannot accommodate the item are assigned a very low (negative infinity) priority.
        - For bins that can accommodate the item, the priority is derived from the
          negative of the remaining capacity if the item were placed. This means
          a perfect fit (0 remaining capacity) yields the highest score (0),
          and smaller positive remaining capacities lead to higher (less negative) scores.
    """
    # Calculate the hypothetical remaining capacity for each bin if the current item
    # were placed into it. A negative value indicates the bin cannot fit the item.
    potential_remaining_after_fit = bins_remain_cap - item

    # Initialize all priorities to negative infinity. This ensures that any bin
    # that cannot fit the item will have an extremely low priority and will only
    # be considered if no other bin can fit the item (which should not happen
    # in a well-defined online BPP system that can open new bins).
    priorities = np.full_like(bins_remain_cap, np.NINF)

    # Create a boolean mask to identify only those bins that can actually
    # accommodate the current item (i.e., where potential_remaining_after_fit is non-negative).
    can_fit_mask = potential_remaining_after_fit >= 0

    # For the bins that can fit, calculate their priority score.
    # The Best Fit strategy aims to minimize the remaining space. To translate this
    # into a priority score (where higher is better), we use the negative of the
    # potential remaining capacity.
    # - If potential_remaining_after_fit is 0 (perfect fit), priority becomes 0 (highest possible).
    # - If potential_remaining_after_fit is 0.1, priority becomes -0.1.
    # - If potential_remaining_after_fit is 0.5, priority becomes -0.5.
    # This correctly makes smaller positive remaining capacities correspond to higher priorities.
    priorities[can_fit_mask] = -potential_remaining_after_fit[can_fit_mask]

    return priorities
```
