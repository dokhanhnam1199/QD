```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    In Random Fit, we randomly select a subset of available bins and then
    choose the best bin from that subset. For priority, we want to assign
    a higher priority to bins that are "good enough" and then randomly
    select from them.

    Here, a bin is considered "good enough" if it has enough remaining
    capacity for the current item. Among those good bins, we don't assign
    a specific priority based on how well they fit, as the selection
    from this subset is random. However, to facilitate a random choice
    from the *eligible* bins, we can assign a uniform high priority to
    all eligible bins and a low priority to ineligible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that have enough remaining capacity for the item
    eligible_bins_mask = bins_remain_cap >= item

    # Assign a high priority to eligible bins and a low priority (0) to ineligible bins.
    # This effectively creates a set of "candidates" that Random Fit would consider.
    # The actual random selection from these candidates would happen *after* this
    # priority function is used to filter or weight the bins.
    # A value of 1.0 for eligible bins and 0.0 for ineligible ones will ensure
    # that any random selection process would only pick from eligible bins if available.
    priorities[eligible_bins_mask] = 1.0

    return priorities
```
