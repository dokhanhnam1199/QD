```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    In the Worst Fit strategy, the item is placed in the bin that has the
    largest remaining capacity, provided it can fit. The priority is higher
    for bins with larger remaining capacities. If an item cannot fit into
    any bin, all priorities will be 0, indicating no suitable bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to zero. This will be the default if an item doesn't fit.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, assign priority based on remaining capacity.
    # Larger remaining capacity gets higher priority, reflecting the "Worst Fit" idea
    # of leaving more space in other bins for potentially larger future items.
    # We use the remaining capacity directly as the priority.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
