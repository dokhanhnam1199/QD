```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    The Random Fit strategy aims to find a suitable bin for the incoming item
    by randomly selecting from the bins that have enough remaining capacity.
    To implement this as a priority function, we'll assign a higher priority
    to bins that can fit the item, and a lower priority (or zero) to those that cannot.
    Among the bins that can fit the item, we'll introduce a slight random variation
    to simulate the "random" aspect of the strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Find bins that have enough capacity to fit the item
    can_fit_mask = bins_remain_cap >= item

    # Initialize priorities to zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # For bins that can fit the item, assign a priority.
    # We want to simulate a random selection among these bins.
    # A simple way to do this is to assign a random number to these bins
    # and then potentially scale it or add it to a base value if needed
    # for further refinement. For a pure "random fit" where any fitting bin
    # is equally likely, a uniform random number is sufficient.
    if np.any(can_fit_mask):
        # Generate random priorities for bins that can fit the item
        random_priorities = np.random.rand(np.sum(can_fit_mask))
        priorities[can_fit_mask] = random_priorities

    return priorities
```
