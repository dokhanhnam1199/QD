```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    The priority is higher for bins that can accommodate the item and leave
    the smallest remaining capacity. Bins that cannot accommodate the item
    receive a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Find bins that can accommodate the item
    can_accommodate_mask = bins_remain_cap >= item

    # Calculate remaining capacity for bins that can accommodate the item
    # We want to minimize remaining capacity, so we invert the remaining capacity.
    # A larger negative value indicates a smaller positive remaining capacity.
    remaining_capacity_after_fit = bins_remain_cap[can_accommodate_mask] - item

    # Assign priorities. We want to maximize priority.
    # A bin with less remaining capacity after fitting is preferred.
    # So, we can use the negative of the remaining capacity.
    # The bins that cannot accommodate the item will have a priority of 0.
    priorities[can_accommodate_mask] = -remaining_capacity_after_fit

    return priorities
```
