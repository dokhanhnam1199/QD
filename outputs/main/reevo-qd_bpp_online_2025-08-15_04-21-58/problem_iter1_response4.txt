```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First strategy.

    The Exact Fit First (EFF) strategy prioritizes bins that can exactly fit the item.
    Among bins that can exactly fit, it prefers bins with less remaining capacity (to
    minimize wasted space). For bins that cannot exactly fit, it assigns a lower priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can exactly fit the item
    exact_fit_bins_mask = bins_remain_cap == item

    # For bins that can exactly fit, assign a high priority based on their remaining capacity (smaller is better)
    # We invert the capacity to make higher values preferred (since we want less remaining space if it's an exact fit)
    # Add a small epsilon to avoid division by zero if item size is 0 (though unlikely in BPP)
    priorities[exact_fit_bins_mask] = 1.0 / (bins_remain_cap[exact_fit_bins_mask] + 1e-9)

    # For bins that cannot exactly fit but can accommodate the item, assign a lower priority.
    # The priority is based on how 'close' they are to an exact fit, i.e., minimizing remaining space.
    # We prioritize bins that leave less remaining capacity after placing the item.
    accommodating_bins_mask = bins_remain_cap > item
    # Calculate the 'waste' for accommodating bins
    waste = bins_remain_cap[accommodating_bins_mask] - item
    # Assign priority: higher priority for less waste.
    # We use a smaller base priority for these bins compared to exact fits.
    # Add a constant offset to differentiate from exact fit priorities and use inversion for preference.
    priorities[accommodating_bins_mask] = 0.5 / (waste + 1e-9)


    return priorities
```
