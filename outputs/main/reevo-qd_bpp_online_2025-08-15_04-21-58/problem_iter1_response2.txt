```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    Worst Fit aims to place the item into the bin with the largest remaining capacity,
    as long as the item fits. This heuristic tends to leave smaller remaining capacities
    in the bins, which can be beneficial for fitting larger items later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a preferred bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # In Worst Fit, we want to select the bin with the largest remaining capacity
    # that can still fit the item. A higher priority should be given to bins
    # with more remaining capacity.

    # We can achieve this by assigning a priority equal to the remaining capacity
    # for bins that can fit the item. For bins that cannot fit the item, their
    # priority remains 0 (or could be set to a very low negative number if
    # we want to explicitly exclude them, but zero works for np.argmax).
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            # Assign priority based on remaining capacity.
            # Larger remaining capacity means higher priority for Worst Fit.
            priorities[i] = bins_remain_cap[i]
        else:
            # Bin cannot accommodate the item, give it minimal priority.
            # Setting to 0 is sufficient since we are looking for the maximum.
            priorities[i] = 0.0

    return priorities
```
