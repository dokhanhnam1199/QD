```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    This heuristic prioritizes bins that can fit the item. Among the bins that can fit,
    it applies the epsilon-greedy strategy:
    - With probability epsilon, it chooses a bin randomly among those that can fit.
    - With probability 1-epsilon, it chooses the bin that results in the least remaining capacity
      (Best Fit strategy) among those that can fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    epsilon = 0.2  # Exploration probability
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can fit the item
    eligible_bins_indices = np.where(bins_remain_cap >= item)[0]

    if len(eligible_bins_indices) == 0:
        # No bin can fit the item, return all zeros (or handle as an error if needed)
        return priorities

    # Epsilon-Greedy decision
    if np.random.rand() < epsilon:
        # Explore: choose randomly among eligible bins
        chosen_index = np.random.choice(eligible_bins_indices)
        priorities[chosen_index] = 1.0  # Assign highest priority to the chosen bin
    else:
        # Exploit: choose the bin that fits best (minimum remaining capacity after placement)
        remaining_capacities_after_placement = bins_remain_cap[eligible_bins_indices] - item
        best_fit_index_in_eligible = np.argmin(remaining_capacities_after_placement)
        chosen_index = eligible_bins_indices[best_fit_index_in_eligible]
        priorities[chosen_index] = 1.0 # Assign highest priority to the chosen bin

    return priorities
```
