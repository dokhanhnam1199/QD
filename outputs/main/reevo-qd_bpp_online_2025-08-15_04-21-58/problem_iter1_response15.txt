```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance (Proximity Fit) strategy prioritizes bins that have
    a remaining capacity closest to the item's size. This aims to fill bins
    more completely, potentially reducing the number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the "distance" or difference between the item size and the remaining capacity of each bin.
    # We only consider bins where the item can actually fit (remaining capacity >= item size).
    # For bins where the item doesn't fit, the difference would be very large (effectively infinite).
    differences = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # The priority is inversely proportional to this difference.
    # A smaller difference means the bin is a "closer fit" and should have a higher priority.
    # We add a small epsilon to the denominator to avoid division by zero if an item perfectly fits a bin.
    epsilon = 1e-9
    priorities = 1 / (differences + epsilon)

    # For bins where the item doesn't fit (differences is np.inf), the priority will be 0.
    # This is handled implicitly by the division by infinity.

    return priorities
```
