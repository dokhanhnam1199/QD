```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic prioritizes bins that can fit the item and are relatively full.
    Specifically, it assigns a higher priority to bins where the remaining capacity
    is just enough to fit the item, discouraging the use of bins with much larger
    remaining capacity unless necessary.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit the item, assign priority based on how "tight" the fit is.
    # A smaller remaining capacity after placing the item suggests a better fit
    # (i.e., less wasted space). We want to maximize the fit, so we invert
    # the remaining capacity after placing the item.
    # To avoid division by zero or very small numbers if remaining capacity is 0,
    # we add a small epsilon.
    # We also want to make the priority score decrease as the remaining capacity increases,
    # meaning tighter fits are preferred.
    
    # Calculate remaining capacity if item is placed
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Assign higher priority to bins with less remaining capacity (tighter fit)
    # Use inverse of remaining_after_fit. Add a small epsilon to avoid division by zero.
    # A large positive number represents a high priority.
    epsilon = 1e-6
    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)

    # Optional: Add a small bonus to bins that are almost full (very small remaining capacity)
    # to encourage using them if possible, even if it's not the absolute tightest fit.
    # This can help in scenarios where a bin is *almost* full, but can still take the item.
    # We can do this by adding a value inversely proportional to the remaining capacity
    # before placing the item.
    almost_full_bonus = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)
    priorities[can_fit_mask] += almost_full_bonus * 0.1 # Small multiplier for bonus

    return priorities
```
