```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the current item into the bin
    that has the largest remaining capacity, but only if the item fits.
    This heuristic tries to "waste" the most space in a bin, leaving
    smaller capacities in other bins for potentially smaller items later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the item
        receive a priority of -1 (or a very low number) to exclude them.
    """
    # Initialize priorities to a very low value (or -1) for bins that cannot fit the item
    priorities = np.full_like(bins_remain_cap, -1.0)

    # Find indices of bins where the item can fit
    can_fit_indices = np.where(bins_remain_cap >= item)[0]

    # If the item can fit in any bin
    if len(can_fit_indices) > 0:
        # For bins where the item fits, the priority is the remaining capacity.
        # This is because Worst Fit wants to pick the bin with the LARGEST remaining capacity.
        priorities[can_fit_indices] = bins_remain_cap[can_fit_indices]

    return priorities
```
