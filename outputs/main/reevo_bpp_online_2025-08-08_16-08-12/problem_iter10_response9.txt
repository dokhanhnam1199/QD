```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. This aims for denser packing by favoring bins
    that are nearly full. It uses a transformation that emphasizes exact fits
    and penalizes larger remaining capacities more severely than a simple inverse.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        # Calculate the remaining capacity if the item is placed in a fitting bin
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Transform remaining capacity to priority.
        # We want smaller remaining_after_placement to have higher priority.
        # Using `1.0 / (1.0 + slack)` gives a score between 0 and 1, where 1 is for exact fit.
        # To more strongly emphasize exact fits and penalize larger slacks,
        # we can use a transformation like `exp(-alpha * slack)` or `1 / (1 + slack^beta)`.
        # Let's use a transformation that grows faster as slack decreases.
        # A hyperbolic tangent or a power function could also work.
        # For now, let's use a simple inverse with a power to make the preference for small slack stronger.
        # For example, `1.0 / (1.0 + slack**2)` would give higher scores for smaller slacks.
        # An alternative is `1.0 - (remaining_after_placement / max(bins_remain_cap))`.
        # Let's use `1.0 / (1.0 + remaining_after_placement)` as it's intuitive and bounded.
        # To make it more aggressive towards exact fits, we can scale the remaining capacity
        # before applying the inverse.

        # Example: Scale slack by a factor `k` before taking the inverse.
        # `k = 2.0` or higher would make exact fits much more preferred.
        k = 2.0  # Tunable parameter to control preference for exact fits
        priorities[can_fit_mask] = 1.0 / (1.0 + k * remaining_after_placement)

        # Alternative: Use an exponential decay, similar to softmax but without normalization.
        # `priorities[can_fit_mask] = np.exp(-k * remaining_after_placement)`
        # This can also work well and is often used. The `1/(1+x)` form is less prone to overflow
        # if `k` is very large. Let's stick with the inverse form for now.

    return priorities
```
