{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic prioritizes exact fits first. For bins that do not offer\n    an exact fit, it uses a scaled softmax on the inverse remaining capacity.\n    This encourages tighter packing by giving higher priority to bins that\n    will have less remaining space after the item is placed. The scaling factor\n    adapts the exploration based on the number of available bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity if the item is placed in a fitting bin\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Prioritize exact fits\n    exact_fit_mask = np.isclose(remaining_after_placement, 0.0)\n    priorities[can_fit_mask][exact_fit_mask] = 1.0\n\n    # For near fits, use scaled softmax on inverse remaining capacity\n    near_fit_mask = ~exact_fit_mask\n    if np.any(can_fit_mask[can_fit_mask][near_fit_mask]):\n        near_fit_remaining = remaining_after_placement[near_fit_mask]\n        \n        # Inverse remaining capacity, higher value for smaller remaining capacity\n        # Add a small epsilon to avoid division by zero if remaining capacity is exactly 0\n        inverse_remaining = 1.0 / (near_fit_remaining + 1e-9)\n\n        # Scale the scores to make the highest score more prominent, especially with fewer bins\n        # A simple scaling could be to multiply by the number of bins that can fit the item\n        # or a function of it to encourage exploration on more options when many are available.\n        # Here, we use a simple scaling based on the number of fitting bins to adjust exploration.\n        # A larger number of fitting bins might warrant a slightly wider spread in priorities.\n        # Alternatively, a fixed scaling factor can be used, but dynamic scaling can be more adaptive.\n        # Let's use a scaling factor that is inversely proportional to the number of fitting bins to keep priorities\n        # from becoming too extreme when many options exist.\n        num_fitting_bins = np.sum(can_fit_mask)\n        if num_fitting_bins > 0:\n            scaling_factor = 1.0  # Keep a baseline, can be tuned\n            # For more aggressive exploration, a factor like np.log(num_fitting_bins + 1)\n            # For more conservative, like 1/num_fitting_bins\n            \n            scaled_scores = inverse_remaining * scaling_factor\n            \n            # Apply softmax to get probabilities, which are used as priorities\n            # Softmax naturally handles the relative differences.\n            # We add a small constant to the logits to ensure that even if all inverse_remaining are very close,\n            # there's still some differentiation.\n            priorities[can_fit_mask][near_fit_mask] = softmax(scaled_scores)\n        else:\n             priorities[can_fit_mask][near_fit_mask] = 0.0 # Should not happen if can_fit_mask is true\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed. This aims for denser packing by favoring bins\n    that are nearly full. It uses a transformation that emphasizes exact fits\n    and penalizes larger remaining capacities more severely than a simple inverse.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if np.any(can_fit_mask):\n        # Calculate the remaining capacity if the item is placed in a fitting bin\n        remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n        # Transform remaining capacity to priority.\n        # We want smaller remaining_after_placement to have higher priority.\n        # Using `1.0 / (1.0 + slack)` gives a score between 0 and 1, where 1 is for exact fit.\n        # To more strongly emphasize exact fits and penalize larger slacks,\n        # we can use a transformation like `exp(-alpha * slack)` or `1 / (1 + slack^beta)`.\n        # Let's use a transformation that grows faster as slack decreases.\n        # A hyperbolic tangent or a power function could also work.\n        # For now, let's use a simple inverse with a power to make the preference for small slack stronger.\n        # For example, `1.0 / (1.0 + slack**2)` would give higher scores for smaller slacks.\n        # An alternative is `1.0 - (remaining_after_placement / max(bins_remain_cap))`.\n        # Let's use `1.0 / (1.0 + remaining_after_placement)` as it's intuitive and bounded.\n        # To make it more aggressive towards exact fits, we can scale the remaining capacity\n        # before applying the inverse.\n\n        # Example: Scale slack by a factor `k` before taking the inverse.\n        # `k = 2.0` or higher would make exact fits much more preferred.\n        k = 2.0  # Tunable parameter to control preference for exact fits\n        priorities[can_fit_mask] = 1.0 / (1.0 + k * remaining_after_placement)\n\n        # Alternative: Use an exponential decay, similar to softmax but without normalization.\n        # `priorities[can_fit_mask] = np.exp(-k * remaining_after_placement)`\n        # This can also work well and is often used. The `1/(1+x)` form is less prone to overflow\n        # if `k` is very large. Let's stick with the inverse form for now.\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, scale slack to emphasize tighter packing, and use bounded transformations.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}