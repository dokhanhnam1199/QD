{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a strategy that\n    balances fitting the item well (exploitation) with leaving space for future items\n    and potentially using less full bins (exploration).\n\n    This version aims to prioritize bins that leave a small, positive remainder,\n    which is often a good heuristic for BPP. It also incorporates an exploration\n    component by occasionally favoring bins that are not necessarily the \"best\" fit,\n    to avoid getting stuck in local optima.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.1  # Probability of exploration\n    num_bins = len(bins_remain_cap)\n\n    # Calculate potential remainders for bins where the item fits.\n    potential_remainders = bins_remain_cap - item\n\n    # Identify bins where the item can fit.\n    fitting_bins_mask = potential_remainders >= 0\n\n    # Calculate exploitation scores: prioritize bins with small positive remainders.\n    # A score of 1/(remainder + small_constant) means smaller remainders get higher scores.\n    # For bins that don't fit, assign a very low score (-infinity) to ensure they are not chosen.\n    exploitation_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # For bins that fit, calculate a score based on the remainder.\n    # We want to reward bins that leave a small, positive remainder.\n    # A simple heuristic is 1 / (remainder + epsilon) for small remainders.\n    # For exact fits (remainder = 0), this gives a high score.\n    # For very small remainders, it also gives high scores.\n    # As remainder increases, the score decreases.\n    # Adding a small constant `1e-9` to the denominator for numerical stability and to avoid division by zero.\n    exploitation_scores[fitting_bins_mask] = 1.0 / (potential_remainders[fitting_bins_mask] + 1e-9)\n\n    # Normalize exploitation scores to be between 0 and 1.\n    # This makes it easier to combine with exploration scores.\n    # If no bins fit, all scores remain -inf, and normalization will result in zeros.\n    max_exploitation_score = np.max(exploitation_scores[fitting_bins_mask]) if np.any(fitting_bins_mask) else 0\n    if max_exploitation_score > 0:\n        normalized_exploitation_scores = exploitation_scores / max_exploitation_score\n    else:\n        normalized_exploitation_scores = np.zeros_like(exploitation_scores) # If no bins fit, all normalized scores are 0\n\n    # Introduce exploration: with probability epsilon, pick a random bin among those that fit.\n    # With probability (1 - epsilon), pick the bin with the highest exploitation score.\n\n    # Generate random scores for exploration. We want to give a chance to bins that\n    # might not be the \"best\" according to the greedy criterion.\n    # We can generate random values and then pick among fitting bins.\n    exploration_scores = np.random.rand(num_bins)\n\n    # Combine exploitation and exploration using an epsilon-greedy approach.\n    # With probability epsilon, we use random exploration scores.\n    # With probability (1 - epsilon), we use normalized exploitation scores.\n\n    # First, create a mask for exploration choice.\n    explore_mask = np.random.rand(num_bins) < epsilon\n\n    # For bins chosen for exploration, use their random exploration score, but only if they fit.\n    # If a bin is chosen for exploration but doesn't fit, its priority should be very low.\n    # For bins chosen for exploitation, use their normalized exploitation score, but only if they fit.\n    # If a bin is chosen for exploitation but doesn't fit, its priority should be very low.\n    priorities = np.where(explore_mask & fitting_bins_mask, exploration_scores,\n                          np.where(~explore_mask & fitting_bins_mask, normalized_exploitation_scores, -np.inf))\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin, prioritizing\n    minimal slack after placement while also slightly penalizing bins that\n    would become exactly full to maintain flexibility.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed (minimal slack). This encourages denser packing.\n    Additionally, it slightly penalizes bins that would become completely full\n    to encourage leaving some space for potentially larger items that might\n    arrive later, promoting a balance between filling bins and maintaining flexibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bin can fit the item, return all zeros\n    if not np.any(can_fit_mask):\n        return priorities\n\n    # Calculate the remaining capacity if the item is placed in a fitting bin\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Assign higher priority to bins that will have less remaining capacity (minimal slack)\n    # We invert the remaining capacity so that smaller remaining capacity gets higher priority.\n    # Add a small epsilon to avoid division by zero and to ensure that bins with zero remaining\n    # capacity after placement are still prioritized highest among the minimal slack options.\n    priorities[can_fit_mask] = 1.0 / (remaining_after_placement + 1e-9)\n\n    # Introduce a slight penalty for bins that would become exactly full after placement.\n    # This encourages keeping some space for potentially larger future items.\n    # The penalty is a small constant subtracted from the priority.\n    # We apply this penalty only to the bins that are *exactly* filled.\n    fully_filled_mask = (remaining_after_placement == 0)\n    priorities[can_fit_mask][fully_filled_mask] -= 0.1\n\n    # Ensure all priorities are non-negative. If the penalty makes a priority negative,\n    # it should be capped at 0, as a negative priority doesn't make logical sense in this context.\n    priorities = np.clip(priorities, 0, None)\n\n    return priorities\n\n[Reflection]\nPrioritize minimal slack, penalize exact fills, balance greedy and exploratory.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}