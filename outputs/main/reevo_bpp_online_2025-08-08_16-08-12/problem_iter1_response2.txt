```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    In Worst Fit, we aim to place the item in the bin that has the most remaining capacity.
    This strategy is greedy and tries to leave larger spaces for potentially larger future items.
    The priority is higher for bins with more remaining capacity, provided the item fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # We want to prioritize bins where the item can actually fit.
    # For bins where the item fits, the priority is directly the remaining capacity.
    # This ensures that the bin with the *most* remaining capacity is chosen.
    # For bins where the item does not fit, the priority is 0, effectively excluding them.
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]
    return priorities
```
