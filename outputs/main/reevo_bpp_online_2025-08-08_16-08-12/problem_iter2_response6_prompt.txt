{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.\n\n    The priority is calculated as the inverse of the remaining capacity of the bin\n    after the item is placed in it. A higher priority means the bin is a closer fit\n    (i.e., has less remaining capacity after packing). Bins where the item cannot fit\n    are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Calculate the remaining capacity if the item is placed in the bin\n    potential_remaining_cap = bins_remain_cap - item\n    \n    # Identify bins where the item can fit\n    fit_mask = potential_remaining_cap >= 0\n    \n    # For bins where the item fits, calculate priority as 1 / (remaining_capacity + epsilon)\n    # Add a small epsilon to avoid division by zero if a bin becomes exactly full.\n    # The inverse distance (proximity fit) aims to leave as little space as possible.\n    epsilon = 1e-9  # Small value to prevent division by zero\n    priorities[fit_mask] = 1.0 / (potential_remaining_cap[fit_mask] + epsilon)\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.1  # Exploration probability\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros(num_bins)\n\n    # Greedy choice: Prioritize bins that can fit the item and have least remaining capacity (Best Fit)\n    # Calculate \"greediness\" for each bin\n    greedy_scores = np.zeros(num_bins)\n    # A bin can fit if its remaining capacity is greater than or equal to the item size\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Calculate the difference between bin capacity and item size. Smaller difference is better (less wasted space).\n    # Add a small epsilon to avoid division by zero if item is exactly the remaining capacity\n    difference = bins_remain_cap - item + 1e-9\n    \n    # Calculate a \"best fit\" score: smaller difference means higher score.\n    # We use the inverse of the difference. We also want to consider only bins that can fit.\n    # Initialize with a very low score for bins that cannot fit.\n    greedy_scores[can_fit_mask] = 1.0 / difference[can_fit_mask]\n    greedy_scores[~can_fit_mask] = -np.inf  # Ensure bins that don't fit get a very low priority\n\n    # Epsilon-Greedy strategy\n    # With probability epsilon, explore (choose a random bin that can fit)\n    # With probability 1-epsilon, exploit (choose the bin with the highest greedy score)\n    \n    indices_that_can_fit = np.where(can_fit_mask)[0]\n    \n    if len(indices_that_can_fit) > 0:\n        if np.random.rand() < epsilon:\n            # Explore: choose a random bin that can fit\n            random_bin_index = np.random.choice(indices_that_can_fit)\n            priorities[random_bin_index] = 1.0\n        else:\n            # Exploit: choose the bin with the highest greedy score\n            best_bin_index = np.argmax(greedy_scores)\n            priorities[best_bin_index] = 1.0\n    else:\n        # If no bin can fit the item, this strategy won't place it.\n        # In a real online scenario, a new bin would be opened.\n        # For this priority function, we return all zeros, indicating no suitable bin.\n        pass \n\n    return priorities\n\n[Reflection]\nBalance greedy \"best fit\" with exploration for robust performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}