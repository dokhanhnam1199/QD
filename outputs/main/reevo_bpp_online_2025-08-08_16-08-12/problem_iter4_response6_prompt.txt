{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin, favoring 'Best Fit'\n    while also considering exploration by slightly penalizing bins that are too full.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed (Best Fit principle). To encourage exploration and\n    prevent overly filling bins prematurely, it slightly penalizes bins where\n    the item would leave very little remaining space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities # No bin can fit the item\n\n    # Calculate remaining capacity if the item is placed in a fitting bin\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Prioritize bins that result in less remaining capacity (Best Fit)\n    # We invert the remaining capacity: smaller remaining capacity gets higher priority.\n    # Add a small epsilon to avoid division by zero if remaining capacity is exactly 0.\n    best_fit_score = 1.0 / (remaining_after_placement + 1e-9)\n\n    # Introduce a slight penalty for bins that become \"too full\" to encourage exploration\n    # A bin is considered \"too full\" if the remaining capacity is very small relative to the item size.\n    # We want to avoid cases where placing the item leaves almost no space,\n    # as this might prevent fitting larger subsequent items.\n    # The penalty is inversely related to the remaining capacity.\n    # If remaining_after_placement is small, the penalty is higher.\n    # We use a small divisor (e.g., 100) to scale this penalty, making it a slight adjustment.\n    exploration_penalty = 1.0 / (remaining_after_placement * 100.0 + 1e-9)\n\n    # Combine the scores: prioritize best fit, but slightly penalize extreme fits\n    # Subtracting the penalty means higher penalty leads to lower priority.\n    priorities[can_fit_mask] = best_fit_score - exploration_penalty\n\n    # Ensure priorities are non-negative, as negative priorities can be problematic\n    # depending on how the selection mechanism handles them. A simple clip is effective.\n    priorities = np.clip(priorities, 0, None)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Exact Fit First, then Best Fit.\n\n    This heuristic prioritizes bins that offer an exact fit for the item.\n    If no exact fit is available, it then prioritizes bins that can accommodate the item\n    with the smallest remaining capacity (Best Fit approach among the remaining options).\n    This aims to minimize wasted space and leave larger capacities available for subsequent items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Exact fits get the highest priority (e.g., 100). Bins that fit but not exactly\n        get a priority based on the \"tightness\" of the fit, inversely proportional to\n        the slack (remaining capacity - item size). Bins that cannot fit get 0 priority.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n    fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n    fitting_indices = np.where(can_fit_mask)[0]\n\n    if fitting_bins_capacities.size == 0:\n        return priorities  # No bin can fit the item\n\n    # Calculate slack for bins that can fit the item\n    slacks = fitting_bins_capacities - item\n\n    # Exact fit has the highest priority\n    exact_fit_mask = slacks == 0\n    exact_fit_indices = fitting_indices[exact_fit_mask]\n    priorities[exact_fit_indices] = 100\n\n    # For bins that are not an exact fit, assign priority based on the slack (Best Fit)\n    # Smaller slack (tighter fit) gets a higher priority.\n    non_exact_fit_mask = slacks > 0\n    non_exact_fit_indices = fitting_indices[non_exact_fit_mask]\n    non_exact_slacks = slacks[non_exact_fit_mask]\n\n    if non_exact_fit_indices.size > 0:\n        # Sort these bins by slack in ascending order.\n        # The bin with the smallest slack (closest to fitting perfectly) gets the highest priority\n        # among the non-exact fits.\n        sorted_slack_indices = np.argsort(non_exact_slacks)\n\n        # Assign priorities decreasingly.\n        # Max priority for non-exact fits will be 99 (if exact fits exist),\n        # down to a lower value.\n        # The number of non-exact fits determines the range of these priorities.\n        max_non_exact_priority = 99\n        for i, original_index_in_fitting in enumerate(non_exact_fit_indices[sorted_slack_indices]):\n            priorities[original_index_in_fitting] = max_non_exact_priority - i\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, then tight fits, while ensuring clear differentiation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}