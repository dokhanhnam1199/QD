```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an improved Best Fit strategy.

    This heuristic prioritizes bins that can fit the item. Among those, it
    favors bins that result in the smallest *non-negative* remaining capacity
    after placing the item (i.e., the "tightest" fit). If multiple bins offer
    the exact same minimal remaining capacity, it does not introduce a specific
    tie-breaking rule and relies on the order of evaluation or underlying
    numpy behavior.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher priority score indicates a better fit. Bins that cannot fit
        the item are given a very low priority.
    """
    # Initialize priorities to a very low value for bins that cannot fit the item.
    # Using -infinity ensures that any valid fit will have a higher priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the residual capacity.
    # Residual capacity = remaining_capacity - item_size.
    # We want to minimize this residual capacity.
    # To convert this minimization problem into a maximization problem for priority scores,
    # we can use the negative of the residual capacity.
    # A smaller (or less negative) value for `-residual` means a better fit.
    # For example:
    # If residual is 0 (perfect fit), priority is 0.
    # If residual is 1, priority is -1.
    # If residual is 5, priority is -5.
    # This naturally prioritizes exact fits (priority 0) over larger residuals.
    residual_capacities = bins_remain_cap[can_fit_mask] - item

    # Assign priorities to the suitable bins. The priority is the negative of the residual capacity.
    priorities[can_fit_mask] = -residual_capacities

    return priorities
```
