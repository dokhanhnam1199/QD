```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    The Almost Full Fit (AFF) strategy aims to prioritize bins that are "almost full"
    and can still accommodate the current item. This is a greedy approach that
    tries to fill bins efficiently before opening new ones.

    The priority is calculated as follows:
    1. For bins that can accommodate the item (remaining capacity >= item size):
       - The priority is higher for bins with *less* remaining capacity (i.e., closer to being full).
       - We assign a priority score based on how much capacity is *left* after placing the item.
         A smaller remaining capacity after placement means the bin was "more full" before.
       - The priority is `bin_remain_cap - item` for these bins.

    2. For bins that *cannot* accommodate the item:
       - They receive a priority of -1, effectively making them unselectable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher preference.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with -1 for unselectable bins

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate priority for bins that can fit the item
    # The priority is the remaining capacity *after* the item is placed.
    # We want to select bins that leave the *least* remaining capacity,
    # meaning they were almost full.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask] - item

    return priorities
```
