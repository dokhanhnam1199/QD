{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Worst Fit strategy.\n\n    The Worst Fit strategy aims to place the item in the bin that has the most remaining capacity.\n    This is generally a good heuristic for online bin packing as it tries to leave\n    smaller remaining capacities in other bins, which might be useful for packing\n    future smaller items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The priority is set to the remaining capacity of the bin if the item fits,\n        and 0 otherwise. This encourages packing into the fullest bins.\n    \"\"\"\n    # Initialize priorities to 0 for all bins\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins where the item can fit\n    # A bin can fit the item if its remaining capacity is greater than or equal to the item's size\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins where the item can fit, set the priority to the remaining capacity\n    # This implements the Worst Fit strategy: higher remaining capacity = higher priority\n    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Exact Fit First.\n\n    The Exact Fit First (EFF) strategy prioritizes bins that have just enough\n    remaining capacity to fit the current item. A perfect fit (remaining capacity == item size)\n    receives the highest priority. Among bins that are not perfect fits, we can\n    assign lower priorities, potentially based on how close their remaining capacity\n    is to the item size without exceeding it, or by favoring bins with less remaining\n    capacity to keep larger capacities open for potentially larger future items.\n\n    This implementation assigns a priority of 100 for an exact fit,\n    and a decreasing priority for bins that can fit the item but not perfectly,\n    proportional to how much \"slack\" they have (remaining capacity - item size).\n    Bins that cannot fit the item receive a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Find bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate priorities for bins that can fit the item\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    # Exact fit has the highest priority\n    exact_fit_mask = fitting_bins_remain_cap == item\n    priorities[can_fit_mask][exact_fit_mask] = 100\n\n    # For bins that are not an exact fit but can still fit the item,\n    # assign priority based on how \"tight\" the fit is.\n    # A smaller slack (remaining_capacity - item) gets a higher priority\n    # among the non-exact fits.\n    # We subtract the slack from a maximum possible priority (e.g., 99)\n    # to create a descending priority based on slack.\n    non_exact_fit_mask = fitting_bins_remain_cap != item\n    if np.any(non_exact_fit_mask):\n        non_fitting_bins_capacities = fitting_bins_remain_cap[non_exact_fit_mask]\n        slacks = non_fitting_bins_capacities - item\n        # Assign priorities inversely proportional to slack, from 99 down to 0.\n        # The smallest slack gets the highest priority (99), largest slack gets the lowest.\n        # To achieve this, we can map the slack values to a range.\n        # A simple way is to sort them and assign decreasing values.\n        # Or, more directly, use a formula: max_priority - proportional_slack_value.\n        # Let's use a simple inverse relation for demonstration.\n        # If there are N non-exact fitting bins, their priorities can be N-1, N-2, ..., 0.\n        # Or, let's map slack to a value between 0 and 99.\n        # Smallest slack (closest to item) gets priority closer to 99.\n        # Largest slack gets priority closer to 0.\n\n        # To assign priorities based on slack value, let's normalize the slacks\n        # and then create priorities.\n        # A more robust approach: assign a priority based on the rank of the slack.\n        sorted_indices = np.argsort(slacks)\n        for i, original_index_in_fitting in enumerate(np.where(can_fit_mask)[0][non_exact_fit_mask]):\n            # Assign priority from 99 down to 99 - (number of non-exact fits - 1)\n            priorities[original_index_in_fitting] = 99 - i\n\n\n    return priorities\n\n[Reflection]\nFavor exact fits, then minimize slack for better packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}