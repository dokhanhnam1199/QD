{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem, favoring exact fits\n    and using a softmax approach based on the inverse of remaining capacity\n    for other fitting bins to balance exploitation and exploration.\n\n    This heuristic assigns the highest priority to bins where the item fits exactly.\n    For bins that can fit the item but not exactly, it calculates a priority score\n    based on the inverse of the remaining capacity after placement. This score\n    is then passed through a softmax function with a temperature parameter,\n    allowing for exploration. Higher inverse remaining capacity (i.e., smaller\n    remaining capacity) leads to a higher score before softmax.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score of placing the item in the corresponding bin.\n        Bins that cannot fit the item will have a priority of -np.inf.\n    \"\"\"\n    temperature = 0.5  # Tunable parameter for exploration. Lower = more greedy.\n\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    remaining_after_placement = fitting_bins_remain_cap - item\n\n    # Assign a very high priority to exact fits\n    exact_fit_mask_subset = (remaining_after_placement == 0)\n    priorities[can_fit_mask][exact_fit_mask_subset] = 100.0\n\n    # For bins that fit but are not exact fits, calculate scores for softmax\n    non_exact_fit_indices_subset = np.where(~exact_fit_mask_subset)[0]\n\n    if non_exact_fit_indices_subset.size > 0:\n        non_exact_fitting_bins_remain_cap_subset = fitting_bins_remain_cap[~exact_fit_mask_subset]\n        non_exact_remaining_after_placement = non_exact_fitting_bins_remain_cap_subset - item\n\n        # Calculate scores for softmax: higher score for smaller remaining capacity (better fit)\n        # Use inverse of remaining capacity. Add epsilon to avoid division by zero.\n        fit_scores_for_softmax = 1.0 / (non_exact_remaining_after_placement + 1e-9)\n\n        # Apply softmax for exploration.\n        # Shift scores so the maximum is 0 for numerical stability with exp.\n        if fit_scores_for_softmax.size > 0:\n            shifted_fit_scores = fit_scores_for_softmax - np.max(fit_scores_for_softmax)\n            soft_priorities = np.exp(shifted_fit_scores / temperature)\n\n            # Scale these priorities to be less than the exact fit priority (100.0)\n            # and ensure they are positive. Max value of soft_priorities is 1.0.\n            scale_factor = 99.0\n            priorities[can_fit_mask][~exact_fit_mask_subset] = soft_priorities * scale_factor\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem using a refined strategy.\n    This heuristic prioritizes exact fits, then uses a temperature-controlled\n    softmax on the inverse of remaining capacity for near fits to encourage exploration\n    while favoring bins with less remaining space.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score for placing the item in the corresponding bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    temperature = 0.5  # Tunable parameter for exploration. Lower = more greedy.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n    fitting_bins_remain_cap = bins_remain_cap[fitting_bins_indices]\n    remaining_after_placement = fitting_bins_remain_cap - item\n\n    # Assign a very high priority for exact fits.\n    exact_fit_mask_subset = (remaining_after_placement == 0)\n    exact_fit_indices = fitting_bins_indices[exact_fit_mask_subset]\n    priorities[exact_fit_indices] = 100.0\n\n    # Handle near fits using a softmax on the inverse of remaining capacity.\n    # This favors bins with less remaining capacity among the near fits.\n    near_fit_mask_subset = ~exact_fit_mask_subset\n    near_fit_indices_subset = fitting_bins_indices[near_fit_mask_subset]\n\n    if np.any(near_fit_mask_subset):\n        near_fit_remaining = remaining_after_placement[near_fit_mask_subset]\n\n        # Calculate scores for near fits: higher score for smaller remaining capacity.\n        # Use inverse of remaining capacity to achieve this. Add epsilon for stability.\n        epsilon_small = 1e-6\n        near_fit_scores_for_softmax = 1.0 / (near_fit_remaining + epsilon_small)\n\n        # Apply softmax for exploration. Higher scores (smaller remaining capacity) get higher probabilities.\n        # Ensure numerical stability for exp by shifting scores.\n        if near_fit_scores_for_softmax.size > 0:\n            max_score = np.max(near_fit_scores_for_softmax)\n            shifted_scores = near_fit_scores_for_softmax - max_score\n            \n            # Avoid potential division by zero if all shifted_scores are -inf\n            if np.all(np.isneginf(shifted_scores)):\n                exp_scores = np.ones_like(shifted_scores)\n            else:\n                exp_scores = np.exp(shifted_scores / temperature)\n            \n            sum_exp_scores = np.sum(exp_scores)\n\n            if sum_exp_scores > 0:\n                softmax_probabilities = exp_scores / sum_exp_scores\n            else:\n                # Fallback to uniform if sum is zero (e.g., all exp_scores were 0)\n                softmax_probabilities = np.ones_like(exp_scores) / len(exp_scores)\n\n            # Scale these probabilities to a range that is lower than exact fits,\n            # but reflects the relative preference. A range like [50, 99.9] would be suitable.\n            # Higher softmax probability (from smaller remaining capacity) results in a higher score.\n            scaled_near_fit_priorities = 50.0 + softmax_probabilities * 49.9\n\n            priorities[near_fit_indices_subset] = scaled_near_fit_priorities\n\n    # Ensure any bin that can fit but wasn't assigned a priority (e.g., if near_fit_mask_subset was empty)\n    # gets a minimal positive priority. This scenario is less likely with the current logic\n    # but good for robustness.\n    default_low_priority = 1.0\n    unassigned_fitting_bins = np.where(can_fit_mask & (priorities == -np.inf))[0]\n    priorities[unassigned_fitting_bins] = default_low_priority\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, explore near fits with controlled scaling and stable softmax.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}