```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First (EFF) strategy prioritizes bins that have just enough
    remaining capacity to fit the current item. A perfect fit (remaining capacity == item size)
    receives the highest priority. Among bins that are not perfect fits, we can
    assign lower priorities, potentially based on how close their remaining capacity
    is to the item size without exceeding it, or by favoring bins with less remaining
    capacity to keep larger capacities open for potentially larger future items.

    This implementation assigns a priority of 100 for an exact fit,
    and a decreasing priority for bins that can fit the item but not perfectly,
    proportional to how much "slack" they have (remaining capacity - item size).
    Bins that cannot fit the item receive a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Find bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate priorities for bins that can fit the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Exact fit has the highest priority
    exact_fit_mask = fitting_bins_remain_cap == item
    priorities[can_fit_mask][exact_fit_mask] = 100

    # For bins that are not an exact fit but can still fit the item,
    # assign priority based on how "tight" the fit is.
    # A smaller slack (remaining_capacity - item) gets a higher priority
    # among the non-exact fits.
    # We subtract the slack from a maximum possible priority (e.g., 99)
    # to create a descending priority based on slack.
    non_exact_fit_mask = fitting_bins_remain_cap != item
    if np.any(non_exact_fit_mask):
        non_fitting_bins_capacities = fitting_bins_remain_cap[non_exact_fit_mask]
        slacks = non_fitting_bins_capacities - item
        # Assign priorities inversely proportional to slack, from 99 down to 0.
        # The smallest slack gets the highest priority (99), largest slack gets the lowest.
        # To achieve this, we can map the slack values to a range.
        # A simple way is to sort them and assign decreasing values.
        # Or, more directly, use a formula: max_priority - proportional_slack_value.
        # Let's use a simple inverse relation for demonstration.
        # If there are N non-exact fitting bins, their priorities can be N-1, N-2, ..., 0.
        # Or, let's map slack to a value between 0 and 99.
        # Smallest slack (closest to item) gets priority closer to 99.
        # Largest slack gets priority closer to 0.

        # To assign priorities based on slack value, let's normalize the slacks
        # and then create priorities.
        # A more robust approach: assign a priority based on the rank of the slack.
        sorted_indices = np.argsort(slacks)
        for i, original_index_in_fitting in enumerate(np.where(can_fit_mask)[0][non_exact_fit_mask]):
            # Assign priority from 99 down to 99 - (number of non-exact fits - 1)
            priorities[original_index_in_fitting] = 99 - i


    return priorities
```
