```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Random Fit strategy for online Bin Packing Problem.

    This priority function assigns a priority to each bin based on the following logic:
    1. If a bin has enough remaining capacity to hold the item, it's a candidate.
    2. Among the candidate bins, priority is assigned randomly. This introduces
       an element of exploration, as it doesn't deterministically pick the
       'best' fitting bin every time. This can sometimes lead to better
       overall packing by not always filling up certain bins too quickly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority of 0.
        Bins that can fit the item will have a randomly assigned priority.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit the item, assign a random priority
    # We use a positive random number to ensure these are prioritized over bins that don't fit.
    # A simple uniform distribution between 0 and 1 is sufficient for random selection.
    priorities[can_fit_mask] = np.random.rand(np.sum(can_fit_mask))
    
    return priorities
```
