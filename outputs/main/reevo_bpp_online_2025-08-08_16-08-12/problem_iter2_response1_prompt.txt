{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Worst Fit strategy.\n\n    The Worst Fit strategy aims to place the item in the bin that has the most remaining capacity.\n    This is generally a good heuristic for online bin packing as it tries to leave\n    smaller remaining capacities in other bins, which might be useful for packing\n    future smaller items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The priority is set to the remaining capacity of the bin if the item fits,\n        and 0 otherwise. This encourages packing into the fullest bins.\n    \"\"\"\n    # Initialize priorities to 0 for all bins\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins where the item can fit\n    # A bin can fit the item if its remaining capacity is greater than or equal to the item's size\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins where the item can fit, set the priority to the remaining capacity\n    # This implements the Worst Fit strategy: higher remaining capacity = higher priority\n    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Almost Full Fit strategy.\n\n    The \"Almost Full Fit\" strategy prioritizes bins that have a remaining capacity\n    just large enough to fit the current item. This aims to leave larger capacities\n    in other bins for potentially larger future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the \"tightness\" for bins that can accommodate the item\n    # Tightness is the difference between the bin's remaining capacity and the item's size.\n    # A smaller positive difference indicates a \"tighter\" fit.\n    # We want to prioritize bins where this difference is small and positive.\n    # We use a small epsilon to avoid division by zero and to handle cases where\n    # remaining capacity is exactly equal to the item size.\n    epsilon = 1e-9\n    tightness = bins_remain_cap - item\n\n    # Only consider bins that have enough capacity for the item\n    valid_bins_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate their priority.\n    # Higher priority is given to bins with smaller positive tightness.\n    # We invert the tightness and add epsilon to avoid division by zero for bins\n    # where remaining_capacity == item.\n    # A large value means the bin is a good fit (tight).\n    priorities[valid_bins_mask] = 1.0 / (tightness[valid_bins_mask] + epsilon)\n\n    # Optionally, you could add a small penalty to bins that are \"too large\"\n    # to fit the item, or further refine the priority based on other criteria.\n    # For this \"Almost Full Fit\", we focus solely on the tightness of bins that can fit.\n\n    # Ensure that bins that cannot fit the item have a priority of 0\n    priorities[~valid_bins_mask] = 0.0\n\n    return priorities\n\n[Reflection]\nPrioritize tighter fits to leave space for larger future items.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}