```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed (exact fits are preferred). This is a greedy approach
    aiming to fill bins as much as possible, encouraging denser packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value for bins that cannot fit the item.
    # Bins that can fit will have their priorities calculated.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that have enough capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate their priority.
    # The priority is the negative of the remaining capacity after placing the item.
    # This means bins with smaller remaining capacity (tighter fits) will have higher priorities.
    # We directly assign the negative remaining capacity as the priority score.
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_capacities_after_fit

    return priorities
```
