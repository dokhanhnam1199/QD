```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the current item into the bin that has the
    largest remaining capacity. This leaves smaller remaining capacities in other
    bins, potentially allowing them to be filled more efficiently by smaller items
    later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The score is the remaining capacity of the bin, such that bins with
        larger remaining capacity get higher priority.
    """
    # Initialize priorities to zero.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # For each bin, calculate its priority.
    # In Worst Fit, the priority is directly proportional to the remaining capacity.
    # We only consider bins that can actually fit the item.
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] = bins_remain_cap[i]
        else:
            # If a bin cannot fit the item, give it a very low priority (effectively zero).
            priorities[i] = -np.inf # Or a very small negative number to ensure it's not chosen.

    return priorities
```
