```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The priority is calculated as the inverse of the remaining capacity of the bin
    after the item is placed in it. A higher priority means the bin is a closer fit
    (i.e., has less remaining capacity after packing). Bins where the item cannot fit
    are given a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the remaining capacity if the item is placed in the bin
    potential_remaining_cap = bins_remain_cap - item
    
    # Identify bins where the item can fit
    fit_mask = potential_remaining_cap >= 0
    
    # For bins where the item fits, calculate priority as 1 / (remaining_capacity + epsilon)
    # Add a small epsilon to avoid division by zero if a bin becomes exactly full.
    # The inverse distance (proximity fit) aims to leave as little space as possible.
    epsilon = 1e-9  # Small value to prevent division by zero
    priorities[fit_mask] = 1.0 / (potential_remaining_cap[fit_mask] + epsilon)
    
    return priorities
```
