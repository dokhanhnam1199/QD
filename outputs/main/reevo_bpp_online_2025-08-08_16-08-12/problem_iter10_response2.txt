```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. This is a greedy approach aiming to fill bins
    as much as possible, encouraging denser packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to negative infinity for bins that cannot fit the item.
    # A higher score indicates higher priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that have enough capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate their priority.
    # The priority is defined as the negative of the remaining capacity after placing the item.
    # This ensures that bins with smaller remaining capacities (tighter fits)
    # will have higher priority scores (closer to zero or positive if the remaining is negative).
    # Using a negative value for remaining capacity directly translates to "less empty space",
    # which is the core idea of Best Fit.
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_capacities_after_fit

    return priorities
```
