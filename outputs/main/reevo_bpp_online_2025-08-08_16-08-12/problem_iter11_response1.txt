```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit strategy with a twist.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. This is a greedy approach aiming to fill bins
    as much as possible, encouraging denser packing. It uses a scaled softmax
    on the inverse remaining capacity to encourage tighter packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign higher priority to bins that will have less remaining capacity
    # We invert the remaining capacity so that smaller remaining capacity gets higher priority.
    # Adding a small epsilon to avoid division by zero if remaining capacity is exactly 0.
    inverse_remaining_capacity = 1.0 / (remaining_after_placement + 1e-9)

    # Scale the inverse remaining capacity to potentially encourage exploration
    # A simple scaling factor can be used, or it could be adapted based on
    # the distribution of remaining capacities. Here, we use a fixed scaling
    # for demonstration.
    scaling_factor = 1.0  # This could be tuned or made dynamic
    scaled_priorities = scaling_factor * inverse_remaining_capacity

    # Apply softmax to the scaled priorities. This can help in creating a
    # smoother distribution of priorities among fitting bins, potentially
    # leading to more exploration of near-perfect fits.
    # Add a small epsilon before exp to prevent numerical instability if all scaled_priorities are very large negative.
    # (Though in this case, they are positive).
    exp_priorities = np.exp(scaled_priorities)
    softmax_priorities = exp_priorities / np.sum(exp_priorities + 1e-9) # Add epsilon to sum to avoid division by zero if sum is zero

    priorities[can_fit_mask] = softmax_priorities

    return priorities
```
