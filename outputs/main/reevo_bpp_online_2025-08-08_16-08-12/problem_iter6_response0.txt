```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a best-fit approach with explicit prioritization of exact fits and exploration.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it first gives the highest priority to exact fits. For bins that are not
    exact fits but can accommodate the item, it assigns priority based on
    how much remaining capacity is left, favoring smaller remaining capacities.
    To encourage exploration, a soft constraint using a temperature parameter
    is applied to the non-exact fits, allowing bins with slightly more remaining
    capacity a chance to be selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities  # No bin can fit the item

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_placement = fitting_bins_remain_cap - item

    # Assign highest priority to exact fits.
    exact_fit_mask_subset = (remaining_after_placement == 0)
    priorities[can_fit_mask][exact_fit_mask_subset] = 100.0

    # For bins that fit but are not exact fits, assign priorities.
    near_fit_mask_subset = ~exact_fit_mask_subset
    if np.any(near_fit_mask_subset):
        near_fit_priorities_raw = remaining_after_placement[near_fit_mask_subset]
        
        # Apply a transformation to favor smaller remaining capacities (closer to zero).
        # Using negative of remaining capacity means smaller remaining capacity gets higher raw priority.
        # Add a small epsilon to avoid issues with zero remaining capacity if it wasn't caught as exact fit
        # (though the exact_fit_mask_subset should handle this).
        transformed_priorities = -near_fit_priorities_raw - 1e-9 

        # Apply softmax for exploration.
        # Higher temperature means more exploration.
        temperature = 1.0
        
        # Normalize for softmax to avoid overflow/underflow and ensure numerical stability
        # Subtracting max makes the largest value 0, exp(0) = 1.
        if np.any(transformed_priorities):
            normalized_transformed_priorities = transformed_priorities - np.max(transformed_priorities)
            soft_priorities = np.exp(normalized_transformed_priorities / temperature)
            
            # Scale soft_priorities to be less than the exact fit priority (100.0)
            # and positive. The maximum possible value for soft_priorities is 1 (before scaling).
            # We want these to be lower than 100, and positive.
            # A simple scaling factor can work, or we can ensure they are just below 100.
            # Let's scale them such that the best near-fit is slightly less than exact fit.
            # The current max value of soft_priorities is 1.0.
            # We can scale it by a factor less than 100, e.g., 99.
            scale_factor = 99.0
            soft_priorities_scaled = soft_priorities * scale_factor

            priorities[can_fit_mask][near_fit_mask_subset] = soft_priorities_scaled
        else:
            # If somehow no near fits had valid transformed priorities (highly unlikely with -inf initialization)
            pass # Keep them at -inf or handle as an error case if necessary.

    return priorities
```
