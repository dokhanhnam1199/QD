```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit Decreasing approach with a twist.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. This is a greedy approach aiming to fill bins
    as much as possible, encouraging denser packing. Additionally, it introduces
    a slight penalty for bins with very little remaining capacity, to encourage
    exploration and avoid prematurely closing bins that might fit larger items later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities  # No bin can fit the item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign higher priority to bins that will have less remaining capacity
    # This is equivalent to prioritizing bins where the item fills a larger
    # proportion of the remaining space.
    # We invert the remaining capacity so that smaller remaining capacity gets higher priority.
    # Add a small epsilon to avoid division by zero if remaining capacity is exactly 0.
    priorities[can_fit_mask] = 1.0 / (remaining_after_placement + 1e-9)

    # Introduce a slight penalty for bins that would have very little remaining capacity
    # after placement. This encourages using bins with slightly more slack,
    # potentially leaving them open for larger items later.
    # We define "very little remaining capacity" as being less than the item size itself.
    # This is a heuristic to avoid extreme fits where the bin is almost full.
    # The penalty is applied as a subtraction, reducing the priority score.
    penalty_mask = remaining_after_placement < item
    priorities[can_fit_mask][penalty_mask] -= 0.1  # Adjust penalty value as needed

    # Ensure priorities are not negative
    priorities = np.maximum(priorities, 0)

    return priorities
```
