```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance strategy prioritizes bins that are "closer" to fitting the item.
    A higher priority is assigned to bins with less remaining capacity that can still
    accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the "distance" to fitting the item.
    # This is the remaining capacity minus the item size.
    # A smaller positive distance means a better fit.
    distances = bins_remain_cap - item

    # Initialize priorities to a very low value (e.g., negative infinity)
    # for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # For bins that can fit the item (distances >= 0):
    # Calculate inverse distance as priority.
    # To avoid division by zero if a bin has exactly the remaining capacity,
    # we add a small epsilon.
    # The closer the remaining capacity is to the item size (smaller positive distance),
    # the higher the priority.
    fit_mask = distances >= 0
    priorities[fit_mask] = 1.0 / (distances[fit_mask] + 1e-9)

    return priorities
```
