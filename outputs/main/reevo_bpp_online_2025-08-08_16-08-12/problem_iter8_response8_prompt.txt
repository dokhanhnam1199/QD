{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem using a hybrid approach\n    that balances \"Best Fit\" (exploitation) with a small chance of \"First Fit\"\n    or random choice among fitting bins (exploration).\n\n    The \"Best Fit\" component prioritizes bins that leave the least remaining\n    capacity after the item is placed. This is achieved by assigning a priority\n    that is the negative of the remaining capacity after fitting the item.\n    A tighter fit (smaller remaining capacity) results in a higher (less negative)\n    priority.\n\n    The exploration component is introduced to prevent getting stuck in local\n    optima. With a small probability (epsilon), it favors bins that are not\n    necessarily the best fit, by assigning a random priority among those that\n    can fit the item. This allows for exploring different packing configurations.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    epsilon = 0.05  # Probability of exploration\n    num_bins = len(bins_remain_cap)\n\n    # Initialize priorities to negative infinity for all bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins that have enough capacity to fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity for bins that can fit the item\n    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # --- Exploitation Component (Best Fit) ---\n    # Assign priorities based on the tightness of the fit.\n    # The negative of the remaining capacity is used: smaller remaining capacity\n    # leads to a less negative (higher) priority.\n    exploitation_scores = np.full_like(bins_remain_cap, -np.inf)\n    exploitation_scores[can_fit_mask] = -remaining_capacities_after_fit\n\n    # --- Exploration Component ---\n    # Generate random scores for exploration among fitting bins.\n    # We want to give a chance to bins that might not be the \"best\" according to Best Fit.\n    # A simple approach is to assign a random value if exploration is chosen.\n    exploration_scores_random = np.random.rand(num_bins)\n\n    # Combine exploitation and exploration using an epsilon-greedy strategy.\n    # Generate a random choice for each bin: True for exploration, False for exploitation.\n    explore_choice_mask = np.random.rand(num_bins) < epsilon\n\n    # For bins where exploration is chosen AND they can fit the item, use the random score.\n    # For bins where exploitation is chosen AND they can fit the item, use the exploitation score.\n    # For bins that cannot fit, their priority remains -np.inf.\n    \n    # Create a mask for bins that are candidates for selection (can fit the item)\n    candidate_mask = can_fit_mask\n    \n    # Apply exploration choice: if exploration is chosen for a candidate bin, use its random score.\n    priorities[explore_choice_mask & candidate_mask] = exploration_scores_random[explore_choice_mask & candidate_mask]\n    \n    # Apply exploitation choice: if exploitation is chosen for a candidate bin, use its exploitation score.\n    # We only update if the bin was NOT chosen for exploration (or if exploration wasn't chosen for it).\n    # The condition `~explore_choice_mask` ensures we only apply exploitation if exploration wasn't picked.\n    priorities[~explore_choice_mask & candidate_mask] = exploitation_scores[~explore_choice_mask & candidate_mask]\n\n    # Ensure that bins that cannot fit remain at -np.inf\n    priorities[~can_fit_mask] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin, prioritizing\n    minimal slack after placement while also slightly penalizing bins that\n    would become exactly full. This version aims to balance the greedy approach\n    of minimizing slack with a touch of exploration by slightly boosting bins\n    that are not the absolute best fit but still good candidates.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed (minimal slack). This encourages denser packing.\n    A slight penalty is applied to bins that would become completely full,\n    encouraging leaving some space for potentially larger items. To introduce\n    a mild exploratory element, bins that result in a slightly larger, but still\n    good, remainder are given a small boost to avoid over-optimization on just\n    the smallest slack.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bin can fit the item, return all zeros\n    if not np.any(can_fit_mask):\n        return priorities\n\n    # Calculate the remaining capacity if the item is placed in a fitting bin\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Base priority: prioritize bins with minimal slack.\n    # Higher score for smaller remainders. Add epsilon for numerical stability.\n    base_priorities = 1.0 / (remaining_after_placement + 1e-9)\n\n    # Introduce a penalty for bins that would become exactly full.\n    # Subtract a small value to slightly reduce their priority.\n    penalty_for_full = 0.1\n    fully_filled_mask = (remaining_after_placement == 0)\n    priorities[can_fit_mask] = base_priorities\n    priorities[can_fit_mask][fully_filled_mask] -= penalty_for_full\n\n    # Add a small exploratory boost: slightly favor bins that have a small positive remainder,\n    # but not necessarily the absolute minimum. This can be achieved by adding a small\n    # positive value to the priority score for a range of remainders.\n    # For example, we can add a small constant to priorities where the remainder is small but not zero.\n    # We can define a threshold for \"small positive remainder\". Let's say up to 10% of bin capacity,\n    # but this is problem-dependent. For a general heuristic, let's add a small constant to\n    # all positive remainders (that are not exactly zero) as a slight encouragement.\n    # We can make this boost decay as the remainder increases.\n    # For simplicity here, let's add a constant boost to all non-exact fits.\n    # This is a very simple form of exploration.\n    exploratory_boost_value = 0.05\n    not_fully_filled_mask = ~fully_filled_mask\n    priorities[can_fit_mask][not_fully_filled_mask] += exploratory_boost_value\n\n    # Ensure all priorities are non-negative.\n    priorities = np.clip(priorities, 0, None)\n\n    return priorities\n\n[Reflection]\nPrioritize minimal slack, penalize exact fills, explore slightly larger remainders.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}