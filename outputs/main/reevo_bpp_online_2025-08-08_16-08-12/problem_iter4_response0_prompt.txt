{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin, favoring 'Best Fit'\n    while also considering exploration by slightly penalizing bins that are too full.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed (Best Fit principle). To encourage exploration and\n    prevent overly filling bins prematurely, it slightly penalizes bins where\n    the item would leave very little remaining space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities # No bin can fit the item\n\n    # Calculate remaining capacity if the item is placed in a fitting bin\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Prioritize bins that result in less remaining capacity (Best Fit)\n    # We invert the remaining capacity: smaller remaining capacity gets higher priority.\n    # Add a small epsilon to avoid division by zero if remaining capacity is exactly 0.\n    best_fit_score = 1.0 / (remaining_after_placement + 1e-9)\n\n    # Introduce a slight penalty for bins that become \"too full\" to encourage exploration\n    # A bin is considered \"too full\" if the remaining capacity is very small relative to the item size.\n    # We want to avoid cases where placing the item leaves almost no space,\n    # as this might prevent fitting larger subsequent items.\n    # The penalty is inversely related to the remaining capacity.\n    # If remaining_after_placement is small, the penalty is higher.\n    # We use a small divisor (e.g., 100) to scale this penalty, making it a slight adjustment.\n    exploration_penalty = 1.0 / (remaining_after_placement * 100.0 + 1e-9)\n\n    # Combine the scores: prioritize best fit, but slightly penalize extreme fits\n    # Subtracting the penalty means higher penalty leads to lower priority.\n    priorities[can_fit_mask] = best_fit_score - exploration_penalty\n\n    # Ensure priorities are non-negative, as negative priorities can be problematic\n    # depending on how the selection mechanism handles them. A simple clip is effective.\n    priorities = np.clip(priorities, 0, None)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Tight Fit strategy.\n\n    The \"Tight Fit\" strategy prioritizes bins that have a remaining capacity\n    that is just enough to fit the current item. This aims to leave larger capacities\n    in other bins for potentially larger future items. This is an refinement of\n    \"Almost Full Fit\" by directly penalizing bins with much larger remaining capacity\n    than needed.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher priority is given to bins with remaining capacity closer to the item size.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the difference between remaining capacity and item size for bins that can fit\n    # We want to prioritize bins where this difference is small and non-negative.\n    # A small difference means a \"tight\" fit.\n    diff = bins_remain_cap - item\n\n    # Mask for bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate priority.\n    # We want to give higher priority to smaller positive differences.\n    # A common way to achieve this is to use the inverse of the difference.\n    # To avoid division by zero when diff is 0 (perfect fit), we add a small epsilon.\n    # Bins with larger differences will have lower priority (1 / (large_diff + epsilon)).\n    epsilon = 1e-9\n    priorities[can_fit_mask] = 1.0 / (diff[can_fit_mask] + epsilon)\n\n    # Bins that cannot fit the item will have a priority of 0, as initialized.\n    return priorities\n\n[Reflection]\nPrioritize exact or near-exact fits to leave larger gaps for future items.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}