```python
import numpy as np
from scipy.special import softmax

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed (exploitation). It uses a softmax function to
    introduce a degree of exploration, where bins with good fits are more likely
    to be chosen but not guaranteed. The temperature parameter can be tuned to
    balance exploitation and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        # Calculate the remaining capacity if the item is placed in a fitting bin
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Assign higher priority to bins that will have less remaining capacity
        # This is equivalent to prioritizing bins where the item fills a larger
        # proportion of the remaining space.
        # We invert the remaining capacity so that smaller remaining capacity gets higher priority.
        # Adding a small epsilon to avoid division by zero.
        scores = 1.0 / (remaining_after_placement + 1e-9)

        # Apply softmax to introduce exploration.
        # A higher temperature means more exploration (probabilities are closer).
        # A lower temperature means more exploitation (probabilities are more skewed towards the best).
        # For this example, we'll use a fixed moderate temperature.
        temperature = 0.5
        probabilities = softmax(scores / temperature)

        priorities[can_fit_mask] = probabilities
    else:
        # If no bin can fit the item, all priorities remain 0.
        # In a real scenario, this might trigger opening a new bin,
        # but the priority function itself just reflects suitability for existing bins.
        pass

    return priorities
```
