```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. It uses a transformation that more aggressively
    prioritizes exact fits and penalizes larger remaining capacities compared to
    a simple inverse.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        # Calculate the remaining capacity if the item is placed in a fitting bin
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Prioritize exact fits strongly and penalize larger remaining capacities more.
        # Using `1.0 / (1.0 + remaining_after_placement**2)` amplifies the preference for
        # smaller remaining capacities. An exact fit (remaining_after_placement = 0)
        # will have a priority of 1.0. A slack of 0.1 will have a priority of
        # 1.0 / (1.0 + 0.01) = 0.99. A slack of 1.0 will have a priority of
        # 1.0 / (1.0 + 1.0) = 0.5. This is more aggressive than `1/(1+slack)`.
        # We can also use a tunable exponent `p` such that `1.0 / (1.0 + remaining_after_placement**p)`.
        # A larger `p` makes the preference for small slack even stronger.
        
        exponent = 2.0  # Tunable parameter to control the aggression towards exact fits
        priorities[can_fit_mask] = 1.0 / (1.0 + remaining_after_placement**exponent)
        
        # Ensure exact fits have the highest possible score if they exist,
        # to strictly enforce the "prioritize exact fits" rule if numerical
        # precision issues arise with the power function.
        exact_fit_mask_local = np.isclose(remaining_after_placement, 0.0)
        if np.any(exact_fit_mask_local):
            priorities[can_fit_mask][exact_fit_mask_local] = 1.0


    return priorities
```
