```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy with explicit prioritization of exact fits and temperature-controlled exploration.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it first gives the highest priority to exact fits. For bins that are not
    exact fits but can accommodate the item, it assigns priority based on
    how much remaining capacity is left, favoring smaller remaining capacities.
    To encourage exploration, a softmax function is applied to the non-exact fits
    with a temperature parameter. A smaller temperature leads to more exploitation (closer to greedy),
    while a larger temperature leads to more exploration (closer to uniform).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    temperature = 0.1  # Tunable parameter for exploration. Lower = more greedy.

    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities  # No bin can fit the item

    # Calculate remaining capacity if item is placed
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_placement = fitting_bins_remain_cap - item

    # Assign highest priority to exact fits
    exact_fit_mask_subset = (remaining_after_placement == 0)
    priorities[can_fit_mask][exact_fit_mask_subset] = 100.0

    # For bins that fit but are not exact fits, calculate scores for softmax
    non_exact_fit_indices_subset = np.where(~exact_fit_mask_subset)[0]

    if non_exact_fit_indices_subset.size > 0:
        non_exact_fitting_bins_remain_cap = fitting_bins_remain_cap[~exact_fit_mask_subset]
        non_exact_remaining_after_placement = non_exact_fitting_bins_remain_cap - item

        # We want to prioritize smaller remaining capacities.
        # Using the negative of remaining capacity means smaller remaining capacity
        # yields a larger (less negative) score, which is good for softmax.
        # Add epsilon to avoid division by zero in case of floating point inaccuracies
        # if remaining_after_placement is very close to zero but not exactly zero.
        # However, a simpler approach is to just use the negative remaining capacity.
        # Let's use negative remaining capacity as the score for softmax.
        # A smaller remaining_after_placement will result in a less negative score.
        fit_scores_for_softmax = -non_exact_remaining_after_placement

        # Apply softmax for exploration. Higher score (less remaining capacity) means higher priority.
        # To ensure numerical stability with exp, shift scores so the maximum is 0.
        if fit_scores_for_softmax.size > 0:
            shifted_fit_scores = fit_scores_for_softmax - np.max(fit_scores_for_softmax)
            # Handle potential NaNs if fit_scores were all Inf or -Inf (unlikely here)
            if np.any(np.isnan(shifted_fit_scores)):
                 shifted_fit_scores = np.nan_to_num(shifted_fit_scores, nan=-1e9)

            # Calculate the softmax values. The relative magnitude is what matters.
            # Higher value for smaller remaining_after_placement.
            soft_priorities = np.exp(shifted_fit_scores / temperature)

            # Scale these priorities to be less than the exact fit priority (100.0)
            # and ensure they are positive.
            # The maximum possible value of soft_priorities (before scaling) is 1.0.
            # We can scale them by a factor like 99.0 to ensure they are lower than exact fits.
            scale_factor = 99.0
            priorities[can_fit_mask][~exact_fit_mask_subset] = soft_priorities * scale_factor
        else:
            # If no non-exact fits (all were exact fits)
            pass

    return priorities
```
