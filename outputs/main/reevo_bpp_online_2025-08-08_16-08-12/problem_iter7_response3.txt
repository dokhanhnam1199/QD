```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy with an exploration component.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed (Best Fit). Additionally, it incorporates a
    temperature parameter for a softmax-like exploration, giving a chance
    to bins that are not the absolute tightest fit but still viable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        # Calculate the remaining capacity if the item is placed in a fitting bin
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Assign higher priority to bins that will have less remaining capacity
        # This is equivalent to prioritizing bins where the item fills a larger
        # proportion of the remaining space.
        # We invert the remaining capacity so that smaller remaining capacity gets higher priority.
        # Adding a small epsilon to avoid division by zero if remaining capacity is exactly 0.
        # Using a score that is inversely proportional to remaining capacity.
        scores = 1.0 / (remaining_after_placement + 1e-9)

        # Introduce a temperature parameter for exploration.
        # A higher temperature leads to more uniform probabilities (more exploration).
        # A lower temperature leads to more deterministic selection (more exploitation).
        temperature = 0.5  # Tunable parameter
        
        # Apply softmax to convert scores into probabilities/priorities
        # Ensure numerical stability for softmax
        exp_scores = np.exp(scores / temperature)
        probabilities = exp_scores / np.sum(exp_scores)

        priorities[can_fit_mask] = probabilities
    
    return priorities
```
