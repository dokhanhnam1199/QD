```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have the smallest remaining
    capacity after the item is placed. This is a greedy approach aiming to minimize
    slack, encouraging denser packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign higher priority to bins that will have less remaining capacity.
    # We invert the remaining capacity so that smaller remaining capacity gets higher priority.
    # Adding a small epsilon to avoid division by zero if remaining capacity is exactly 0.
    # This aims to find the "best fit".
    priorities[can_fit_mask] = 1.0 / (remaining_after_placement + 1e-9)

    return priorities
```
