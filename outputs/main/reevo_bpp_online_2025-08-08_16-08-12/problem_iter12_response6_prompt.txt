{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem, favoring exact fits\n    and using a softmax approach based on the inverse of remaining capacity\n    for other fitting bins to balance exploitation and exploration.\n\n    This heuristic assigns the highest priority to bins where the item fits exactly.\n    For bins that can fit the item but not exactly, it calculates a priority score\n    based on the inverse of the remaining capacity after placement. This score\n    is then passed through a softmax function with a temperature parameter,\n    allowing for exploration. Higher inverse remaining capacity (i.e., smaller\n    remaining capacity) leads to a higher score before softmax.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score of placing the item in the corresponding bin.\n        Bins that cannot fit the item will have a priority of -np.inf.\n    \"\"\"\n    temperature = 0.5  # Tunable parameter for exploration. Lower = more greedy.\n\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    remaining_after_placement = fitting_bins_remain_cap - item\n\n    # Assign a very high priority to exact fits\n    exact_fit_mask_subset = (remaining_after_placement == 0)\n    priorities[can_fit_mask][exact_fit_mask_subset] = 100.0\n\n    # For bins that fit but are not exact fits, calculate scores for softmax\n    non_exact_fit_indices_subset = np.where(~exact_fit_mask_subset)[0]\n\n    if non_exact_fit_indices_subset.size > 0:\n        non_exact_fitting_bins_remain_cap_subset = fitting_bins_remain_cap[~exact_fit_mask_subset]\n        non_exact_remaining_after_placement = non_exact_fitting_bins_remain_cap_subset - item\n\n        # Calculate scores for softmax: higher score for smaller remaining capacity (better fit)\n        # Use inverse of remaining capacity. Add epsilon to avoid division by zero.\n        fit_scores_for_softmax = 1.0 / (non_exact_remaining_after_placement + 1e-9)\n\n        # Apply softmax for exploration.\n        # Shift scores so the maximum is 0 for numerical stability with exp.\n        if fit_scores_for_softmax.size > 0:\n            shifted_fit_scores = fit_scores_for_softmax - np.max(fit_scores_for_softmax)\n            soft_priorities = np.exp(shifted_fit_scores / temperature)\n\n            # Scale these priorities to be less than the exact fit priority (100.0)\n            # and ensure they are positive. Max value of soft_priorities is 1.0.\n            scale_factor = 99.0\n            priorities[can_fit_mask][~exact_fit_mask_subset] = soft_priorities * scale_factor\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem.\n    This strategy prioritizes exact fits, then uses a temperature-controlled softmax\n    on the inverse remaining capacity for near fits, and assigns a low base priority\n    to bins that fit but are not near fits. Bins that cannot fit receive a very low priority.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    \n    # Identifiable priorities for different categories\n    EXACT_FIT_PRIORITY = 100.0\n    NEAR_FIT_BASE_SCORE = 50.0 # Base score for near fits before softmax scaling\n    NEAR_FIT_SCALE = 40.0     # Scaling factor for softmax probabilities\n    LOW_PRIORITY_FOR_FITTING_BIN = 1.0 # For bins that fit but are not 'near'\n\n    # Temperature for softmax to control exploration among near fits\n    # Higher temperature means more exploration (priorities are more uniform)\n    # Lower temperature means less exploration (priorities are more skewed towards best fits)\n    TEMPERATURE = 0.5 # Tunable parameter\n\n    # Identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    # --- Handle Exact Fits ---\n    exact_fit_mask = can_fit_mask & (bins_remain_cap == item)\n    priorities[exact_fit_mask] = EXACT_FIT_PRIORITY\n\n    # --- Handle Near Fits ---\n    # Bins that can fit, but are not exact fits.\n    near_fit_potential_mask = can_fit_mask & ~exact_fit_mask\n\n    if np.any(near_fit_potential_mask):\n        near_fit_indices = np.where(near_fit_potential_mask)[0]\n        remaining_capacities_for_near_fits = bins_remain_cap[near_fit_indices] - item\n\n        # To prioritize smaller remaining capacities, we can use their inverse.\n        # Add a small epsilon to avoid division by zero.\n        epsilon_small = 1e-6\n        # The score should be higher for smaller remaining_capacities_for_near_fits.\n        # Using 1 / (remaining + epsilon) achieves this.\n        # We also want to ensure these scores are distinctly lower than EXACT_FIT_PRIORITY.\n        # The scaling and softmax will handle this.\n        near_fit_scores = 1.0 / (remaining_capacities_for_near_fits + epsilon_small)\n\n        # Apply softmax to convert scores into probabilities for exploration.\n        # Higher scores (smaller remaining capacity) will get higher probabilities.\n        if len(near_fit_scores) > 0:\n            # Shift scores before exponentiation to prevent potential underflow/overflow\n            max_score = np.max(near_fit_scores)\n            shifted_scores = near_fit_scores - max_score\n            \n            exp_scores = np.exp(shifted_scores / TEMPERATURE)\n            sum_exp_scores = np.sum(exp_scores)\n\n            if sum_exp_scores > 0:\n                softmax_probabilities = exp_scores / sum_exp_scores\n            else:\n                # Fallback to uniform if all exponentiated scores are zero or NaN\n                softmax_probabilities = np.ones_like(near_fit_scores) / len(near_fit_scores)\n            \n            # Scale these probabilities to a range that is lower than exact fits\n            # but reflects the preference for smaller remaining capacity.\n            scaled_near_fit_priorities = NEAR_FIT_BASE_SCORE + softmax_probabilities * NEAR_FIT_SCALE\n            priorities[near_fit_indices] = scaled_near_fit_priorities\n\n    # --- Handle remaining fitting bins ---\n    # Any bin that can fit the item but was not assigned an exact or near-fit priority\n    # (e.g., if the 'near fit' criteria were too strict, or if there were no near fits processed)\n    # should get a low, positive priority to indicate they are usable.\n    # This mask identifies bins that can fit but currently have the default -np.inf priority.\n    unassigned_fitting_mask = can_fit_mask & (priorities == -np.inf)\n    priorities[unassigned_fitting_mask] = LOW_PRIORITY_FOR_FITTING_BIN\n    \n    return priorities\n\n[Reflection]\n**Heuristic Design Hints:**\n\n*   **Categorize fits:** Differentiate exact, near, and general fits.\n*   **Tune scores:** Adjust priorities between categories.\n*   **Softmax control:** Use temperature for exploration.\n*   **Avoid zero:** Use epsilon for division.\n*   **Meaningful defaults:** Assign low priorities for usable bins.\n*   **Numerical stability:** Shift scores before softmax.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}