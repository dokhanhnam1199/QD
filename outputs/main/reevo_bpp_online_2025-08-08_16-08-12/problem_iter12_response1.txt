```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins for the online Bin Packing Problem, favoring exact fits and minimal slack.

    This heuristic prioritizes bins that can fit the item. Among fitting bins,
    it assigns the highest priority to exact fits (zero remaining capacity after packing).
    For bins that don't offer an exact fit, it assigns priority based on the
    remaining capacity after packing, favoring bins with less remaining capacity.
    This strategy aims for a Best Fit approach without complex temperature scaling,
    focusing on minimizing waste.

    Args:
        item: The size of the item to be packed.
        bins_remain_cap: A numpy array containing the remaining capacity of each bin.

    Returns:
        A numpy array of the same size as bins_remain_cap, where each element
        represents the priority score for placing the item in the corresponding bin.
        Bins that cannot fit the item will have a priority of -infinity.
    """
    num_bins = len(bins_remain_cap)
    # Initialize priorities to a very low value for bins that cannot fit the item.
    priorities = np.full(num_bins, -np.inf, dtype=float)

    # Identify bins that have enough capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the initialized priorities.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity after placing the item for fitting bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priorities:
    # - Exact fits (remaining_capacity_after_fit == 0) get the highest possible priority
    #   within the group of fitting bins.
    # - For non-exact fits, priority is the negative of the remaining capacity.
    #   This naturally favors bins with smaller remaining capacity (tighter fits).
    #   Using negative remaining capacity makes smaller values (tighter fits) larger
    #   and thus higher priority.
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    # To ensure exact fits are prioritized above all others, we can assign them
    # a value slightly higher than any possible negative remaining capacity.
    # Since remaining_capacity_after_fit is non-negative, -remaining_capacity_after_fit is non-positive.
    # An exact fit results in a remaining capacity of 0, so its priority is 0.
    # Any other fit will result in a negative priority.
    # Thus, the current calculation naturally prioritizes exact fits (0) over others (<0).
    # No further adjustment is strictly needed for prioritizing exact fits,
    # as 0 is greater than any negative number.

    return priorities
```
