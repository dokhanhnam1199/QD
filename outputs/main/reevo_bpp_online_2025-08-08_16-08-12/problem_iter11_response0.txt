```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a scaled softmax on inverse remaining capacity.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. This is a greedy approach aiming to fill bins
    as much as possible, encouraging denser packing. A scaled softmax is used
    to provide a smoother distribution of priorities and encourage exploration
    among near-fitting bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Calculate inverse remaining capacity. Add a small epsilon to avoid division by zero.
    inverse_remaining_capacity = 1.0 / (remaining_after_placement + 1e-9)

    # Apply softmax with a scaling factor.
    # The scaling factor can be tuned. A higher scale emphasizes differences.
    # Here, we use a simple scaling related to the number of bins,
    # but a more adaptive or fixed scale could also be used.
    scale_factor = 1.0  # This can be adjusted.
    scaled_scores = scale_factor * inverse_remaining_capacity

    # Calculate softmax probabilities.
    # Add a small value to the scores before exp to avoid very small numbers
    # and potential underflow with exp.
    exp_scores = np.exp(scaled_scores - np.max(scaled_scores)) # For numerical stability
    softmax_priorities = exp_scores / np.sum(exp_scores)

    # Assign the calculated priorities to the bins that can fit the item.
    priorities[can_fit_mask] = softmax_priorities

    # To handle cases where no bins can fit, or to ensure a minimum priority,
    # you might add a small baseline priority or handle the 'no fit' scenario
    # by creating a new bin (which is outside the scope of this function).
    # For this function, if no bins fit, all priorities remain 0.

    return priorities
```
