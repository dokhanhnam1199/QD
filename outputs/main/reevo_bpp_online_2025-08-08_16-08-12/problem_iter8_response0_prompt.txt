{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem using a hybrid approach\n    that balances \"Best Fit\" (exploitation) with a small chance of \"First Fit\"\n    or random choice among fitting bins (exploration).\n\n    The \"Best Fit\" component prioritizes bins that leave the least remaining\n    capacity after the item is placed. This is achieved by assigning a priority\n    that is the negative of the remaining capacity after fitting the item.\n    A tighter fit (smaller remaining capacity) results in a higher (less negative)\n    priority.\n\n    The exploration component is introduced to prevent getting stuck in local\n    optima. With a small probability (epsilon), it favors bins that are not\n    necessarily the best fit, by assigning a random priority among those that\n    can fit the item. This allows for exploring different packing configurations.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    epsilon = 0.05  # Probability of exploration\n    num_bins = len(bins_remain_cap)\n\n    # Initialize priorities to negative infinity for all bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins that have enough capacity to fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity for bins that can fit the item\n    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # --- Exploitation Component (Best Fit) ---\n    # Assign priorities based on the tightness of the fit.\n    # The negative of the remaining capacity is used: smaller remaining capacity\n    # leads to a less negative (higher) priority.\n    exploitation_scores = np.full_like(bins_remain_cap, -np.inf)\n    exploitation_scores[can_fit_mask] = -remaining_capacities_after_fit\n\n    # --- Exploration Component ---\n    # Generate random scores for exploration among fitting bins.\n    # We want to give a chance to bins that might not be the \"best\" according to Best Fit.\n    # A simple approach is to assign a random value if exploration is chosen.\n    exploration_scores_random = np.random.rand(num_bins)\n\n    # Combine exploitation and exploration using an epsilon-greedy strategy.\n    # Generate a random choice for each bin: True for exploration, False for exploitation.\n    explore_choice_mask = np.random.rand(num_bins) < epsilon\n\n    # For bins where exploration is chosen AND they can fit the item, use the random score.\n    # For bins where exploitation is chosen AND they can fit the item, use the exploitation score.\n    # For bins that cannot fit, their priority remains -np.inf.\n    \n    # Create a mask for bins that are candidates for selection (can fit the item)\n    candidate_mask = can_fit_mask\n    \n    # Apply exploration choice: if exploration is chosen for a candidate bin, use its random score.\n    priorities[explore_choice_mask & candidate_mask] = exploration_scores_random[explore_choice_mask & candidate_mask]\n    \n    # Apply exploitation choice: if exploitation is chosen for a candidate bin, use its exploitation score.\n    # We only update if the bin was NOT chosen for exploration (or if exploration wasn't chosen for it).\n    # The condition `~explore_choice_mask` ensures we only apply exploitation if exploration wasn't picked.\n    priorities[~explore_choice_mask & candidate_mask] = exploitation_scores[~explore_choice_mask & candidate_mask]\n\n    # Ensure that bins that cannot fit remain at -np.inf\n    priorities[~can_fit_mask] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a strategy that prioritizes exact fits, then near fits, and incorporates exploration.\n\n    This strategy prioritizes exact fits (leaving zero remaining capacity).\n    Among bins that can accommodate the item but are not exact fits, it prioritizes\n    those that leave the least remaining capacity (best-fit approach).\n    To encourage exploration, a softmax function is applied to the priorities of\n    near-fitting bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    remaining_after_placement = fitting_bins_remain_cap - item\n\n    # Handle exact fits\n    exact_fit_mask_subset = (remaining_after_placement == 0)\n    exact_fit_indices = np.where(can_fit_mask)[0][exact_fit_mask_subset]\n    priorities[exact_fit_indices] = 100.0  # High priority for exact fits\n\n    # Handle near fits\n    near_fit_mask_subset = ~exact_fit_mask_subset\n    if np.any(near_fit_mask_subset):\n        near_fit_indices_subset = np.where(can_fit_mask)[0][near_fit_mask_subset]\n        near_fit_remaining = remaining_after_placement[near_fit_mask_subset]\n\n        # Base priority for near fits: prioritize smaller remaining capacity.\n        # Using negative remaining capacity to make smaller remaining capacity have higher score.\n        # Add a small epsilon to avoid issues with identical remaining capacities and for stability.\n        near_fit_base_priorities = -near_fit_remaining\n\n        # Apply softmax to the base priorities of near fits for exploration.\n        # Softmax converts scores into probabilities, giving a chance to bins with slightly more remaining space.\n        temperature = 1.0  # Tunable parameter for exploration\n        \n        # Shift priorities to avoid large negative exponents in exp\n        shifted_near_fit_priorities = near_fit_base_priorities - np.max(near_fit_base_priorities)\n        \n        # Calculate softmax probabilities\n        exp_priorities = np.exp(shifted_near_fit_priorities / temperature)\n        \n        # Normalize probabilities to sum to 1 across the near-fitting bins\n        sum_exp_priorities = np.sum(exp_priorities)\n        if sum_exp_priorities > 0:\n            softmax_probabilities = exp_priorities / sum_exp_priorities\n        else:\n            # If all exponents are effectively zero or negative infinity, assign uniform probability\n            softmax_probabilities = np.ones_like(exp_priorities) / len(exp_priorities)\n\n        # Assign these probabilities (scaled to still be lower than exact fits) to the priority array\n        # We can scale them down or add a constant to ensure they are less than the exact fit priority.\n        # For simplicity, let's scale them by a factor less than 1, but larger than the penalty for non-exact fits.\n        # The goal is that exact fits are still distinctly preferred, but exploration happens among near fits.\n        # We can map the probabilities to a range like [50, 99] for example.\n        scaled_near_fit_priorities = 50.0 + softmax_probabilities * 49.0 # Scale probabilities to a range below exact fits\n        \n        priorities[near_fit_indices_subset] = scaled_near_fit_priorities\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, explore near fits with a controlled mechanism.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}