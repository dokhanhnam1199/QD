```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact Fit First Strategy:
    # Prioritize bins that can fit the item perfectly.
    # If multiple bins fit perfectly, we can use a secondary criterion (e.g., smallest remaining capacity after fit)
    # to break ties, or simply pick the first one.
    # For this heuristic, we'll assign a very high priority (e.g., 1000) to bins that are an exact fit.
    # For bins that don't fit perfectly, we assign a lower priority (e.g., 0).

    priorities = np.zeros_like(bins_remain_cap)

    # Find bins that are an exact fit
    exact_fit_mask = (bins_remain_cap == item)

    # Assign high priority to exact fit bins
    priorities[exact_fit_mask] = 1000

    # Optional: If there are multiple exact fits, you might want to refine the priority.
    # For example, pick the one with the least remaining capacity among exact fits.
    # However, for a strict "Exact Fit First", any exact fit is highly preferred.
    # If no exact fit exists, the priorities remain 0, meaning no bin is particularly preferred by this rule.

    # For a more nuanced approach if no exact fit is found, one could then consider
    # bins that are "close fits" or have the smallest remaining capacity among
    # bins that CAN fit the item (bins_remain_cap >= item).
    # But the prompt specifically asks for "Exact Fit First".

    return priorities
```
