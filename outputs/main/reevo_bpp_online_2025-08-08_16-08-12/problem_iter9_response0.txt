```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a
    First Fit strategy with an emphasis on exact fits and minimal slack,
    and incorporates a softmax-like scaling for exploration.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that result in an exact fit (zero remaining capacity)
    and then to bins with minimal positive remaining capacity. A scaling factor (temperature)
    is applied to the inverse of the slack to control exploration. Bins that cannot fit
    the item are given a priority of zero.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    temperature = 1.0  # Tunable parameter for exploration

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the slack (remaining capacity after placement) for fitting bins
    slack = bins_remain_cap[can_fit_mask] - item

    # Assign priorities:
    # - Highest priority for exact fits (slack == 0)
    # - High priority for minimal positive slack, inversely proportional to slack
    #   scaled by temperature for exploration.
    # - Zero priority for bins that cannot fit the item.

    # Handle exact fits separately to give them maximum priority
    exact_fit_mask = slack == 0
    priorities[can_fit_mask][exact_fit_mask] = 1e6  # A very high value for exact fits

    # Calculate priorities for bins with positive slack
    positive_slack_mask = slack > 0
    positive_slack_values = slack[positive_slack_mask]

    # Inverse slack scaled by temperature. Higher priority for smaller slack.
    # Add epsilon to avoid division by zero if slack is very close to zero but not exactly zero.
    scaled_priorities = 1.0 / (positive_slack_values + 1e-9)
    priorities[can_fit_mask][positive_slack_mask] = np.exp(scaled_priorities / temperature)


    # Normalize priorities to be between 0 and 1 (optional, but good practice for some selection methods)
    # If no bins can fit the item, max_priority will be 0, so division by zero is avoided.
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority

    return priorities
```
