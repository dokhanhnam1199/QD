```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed. This aims for denser packing by favoring bins
    that are nearly full. It uses a transformation that strongly emphasizes exact fits
    and penalizes larger remaining capacities more severely than a simple inverse.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        # Calculate the remaining capacity if the item is placed in a fitting bin
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Transform remaining capacity to priority.
        # We want smaller remaining_after_placement to have higher priority.
        # Using `1.0 / (1.0 + slack)` gives a score between 0 and 1, where 1 is for exact fit.
        # To more strongly emphasize exact fits and penalize larger slacks,
        # we use `1.0 / (1.0 + k * slack)` where k is a parameter controlling the steepness
        # of the preference for smaller slacks. A higher k means a stronger preference for
        # exact or near-exact fits.
        k = 3.0  # Tunable parameter to control preference for exact fits. Increased from v1.
        priorities[can_fit_mask] = 1.0 / (1.0 + k * remaining_after_placement)

        # To further boost exact fits, we can add a small bonus for perfect matches.
        # This ensures that exact fits are always strictly preferred over any non-exact fit
        # if the transformation alone doesn't guarantee it due to floating point inaccuracies.
        exact_fit_bonus = 0.05 # A small bonus for exact fits
        exact_fit_mask_for_fitting_bins = np.isclose(remaining_after_placement, 0.0)
        priorities[can_fit_mask][exact_fit_mask_for_fitting_bins] += exact_fit_bonus


    return priorities
```
