{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins for the online Bin Packing Problem, favoring exact fits and minimal slack,\n    with temperature-controlled exploration.\n\n    This heuristic prioritizes bins that can fit the item. Among fitting bins,\n    it assigns the highest priority to exact fits (zero remaining capacity after packing).\n    For bins that don't offer an exact fit, it assigns priority based on the\n    inverse of the slack (remaining capacity after packing), scaled by a temperature\n    parameter. A higher temperature leads to smoother priority distributions,\n    increasing the chance of selecting bins that are not the absolute best fit.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array containing the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        represents the priority score for placing the item in the corresponding bin.\n        Bins that cannot fit the item will have a priority of 0.\n    \"\"\"\n    temperature = 1.0  # Tunable parameter for exploration\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros(num_bins, dtype=float)\n\n    # Identify bins that have enough capacity to fit the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit the item, return all zeros.\n    if not np.any(can_fit_mask):\n        return priorities\n\n    # Calculate the slack for bins that can fit the item.\n    # Slack is the remaining capacity after placing the item.\n    slack = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priorities:\n    # - Highest priority for exact fits (slack == 0)\n    # - For non-exact fits, priority is inversely proportional to slack, scaled by temperature.\n    #   Use exp(-slack / temperature) to give higher priority to smaller slack.\n\n    # Separate exact fits to give them maximum priority\n    exact_fit_indices_in_subset = np.where(slack == 0)[0]\n    priorities[can_fit_mask][exact_fit_indices_in_subset] = 1e6  # High priority for exact fits\n\n    # Calculate priorities for bins with positive slack\n    positive_slack_indices_in_subset = np.where(slack > 0)[0]\n    positive_slack_values = slack[positive_slack_indices_in_subset]\n\n    # Use exp(-slack / temperature) for exploration. Smaller slack gets higher priority.\n    # Adding a small epsilon to slack in the denominator of exp argument could be done,\n    # but using the slack value directly in the exponent is more standard for this type of scaling.\n    # `np.exp(-value / temperature)`: as `value` (slack) decreases, `np.exp` increases.\n    scaled_priorities = np.exp(-positive_slack_values / temperature)\n    \n    # Apply these scaled priorities to the corresponding bins\n    priorities[can_fit_mask][positive_slack_indices_in_subset] = scaled_priorities\n\n    # Normalize priorities to be between 0 and 1 (optional, but good practice)\n    # If only exact fits exist, max_priority would be 1e6. If only positive slack,\n    # max_priority would be from the exp calculation. If no bins fit, it's 0.\n    max_priority = np.max(priorities)\n    if max_priority > 0:\n        priorities /= max_priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit strategy.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed (exact fits are preferred). This is a greedy approach\n    aiming to fill bins as much as possible, encouraging denser packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very low value for bins that cannot fit the item.\n    # Bins that can fit will have their priorities calculated.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins that have enough capacity to fit the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate their priority.\n    # The priority is the negative of the remaining capacity after placing the item.\n    # This means bins with smaller remaining capacity (tighter fits) will have higher priorities.\n    # We directly assign the negative remaining capacity as the priority score.\n    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item\n    priorities[can_fit_mask] = -remaining_capacities_after_fit\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, minimize slack, and avoid unnecessary temperature scaling.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}