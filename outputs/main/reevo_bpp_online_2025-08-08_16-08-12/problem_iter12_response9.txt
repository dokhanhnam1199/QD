```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic prioritizes exact fits first, assigning them the highest priority.
    For bins that do not offer an exact fit but can accommodate the item,
    it prioritizes those that leave the least remaining capacity, encouraging tighter packing.
    Bins that cannot fit the item are assigned a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priorities: higher values mean higher priority
    # Exact fits (remaining capacity is 0) get the highest priority (e.g., 0.0)
    # Other fitting bins get priorities based on negative remaining capacity.
    # This ensures that smaller remaining capacities have higher (less negative) priorities.
    priorities[can_fit_mask] = -remaining_after_placement
    priorities[can_fit_mask][remaining_after_placement == 0] = 0.0

    return priorities
```
