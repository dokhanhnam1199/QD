```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit Decreasing-like strategy adapted for online setting.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed (tightest fit). To balance exploitation with some
    exploration, a softmax function is used to convert these fit scores into
    probabilities, controlled by a temperature parameter. This allows for
    slightly less optimal fits to still have a chance, which can be beneficial
    in the online setting to avoid premature blocking of good future fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    temperature = 0.5  # Tunable parameter for exploration/exploitation balance

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    # For bins that cannot fit, their "fit score" will be effectively negative infinity
    # by not being included in the softmax calculation.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # We want to prioritize bins with *less* remaining capacity after placement.
    # A good fit means remaining_after_placement is small.
    # To use with softmax, we can use the negative of the remaining capacity.
    # A tighter fit (smaller remaining_after_placement) results in a less negative score,
    # which will get a higher probability in softmax.
    fit_scores = -remaining_after_placement

    # Apply softmax to convert scores to probabilities
    # Add a small constant to avoid log(0) if all fit_scores are identical.
    # If all bins can fit, the relative differences matter.
    if fit_scores.size > 0:
        exp_scores = np.exp(fit_scores / temperature)
        probabilities = exp_scores / np.sum(exp_scores)
        priorities[can_fit_mask] = probabilities

    return priorities
```
