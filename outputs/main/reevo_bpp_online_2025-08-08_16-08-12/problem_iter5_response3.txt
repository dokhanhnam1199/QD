```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit approach
    with an exploration mechanism.

    This heuristic prioritizes bins that can fit the item. Among those that fit,
    it assigns a higher priority to bins that will have less remaining capacity
    after the item is placed (tight fits). It also introduces a soft
    exploration component using a softmax function, which allows for
    considering bins that are not the absolute tightest fit, with a
    temperature parameter controlling the degree of exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a fitting bin
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign higher priority to bins that will have less remaining capacity
    # This is equivalent to prioritizing bins where the item fills a larger
    # proportion of the remaining space.
    # We invert the remaining capacity so that smaller remaining capacity gets higher priority.
    # Add a small epsilon to avoid division by zero.
    tight_fit_scores = 1.0 / (remaining_after_placement + 1e-9)

    # Introduce a soft exploration component using softmax.
    # A higher temperature means more exploration (less difference between high and low priorities).
    # A lower temperature means less exploration (closer to pure greedy).
    # We can set a default temperature or make it a parameter if needed.
    temperature = 0.5  # Tunable parameter for exploration

    # Apply softmax to the scores of bins that can fit the item
    if np.any(can_fit_mask):
        exp_scores = np.exp(tight_fit_scores / temperature)
        softmax_scores = exp_scores / np.sum(exp_scores)
        priorities[can_fit_mask] = softmax_scores

    return priorities
```
