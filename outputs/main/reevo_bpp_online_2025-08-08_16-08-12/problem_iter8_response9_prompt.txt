{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority for each bin to pack an item.\n    Prioritizes exact fits, then near fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin. Bins that cannot fit the item\n        will have a very low priority.\n    \"\"\"\n    # Initialize priorities to a very low value.\n    priorities = np.full_like(bins_remain_cap, -float('inf'))\n\n    # Identify bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    # Calculate potential remaining capacities for bins that can fit the item.\n    potential_remainders = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priority:\n    # 1. Exact fits (remainder is 0) get the highest priority.\n    # 2. Near fits (smaller positive remainder) get higher priority than larger remainders.\n    # We can achieve this by assigning a high value for exact fits and then\n    # using the negative of the remainder for near fits, so smaller remainders\n    # (less negative values) get higher priority.\n\n    # For exact fits\n    exact_fit_indices = np.where(potential_remainders == 0)[0]\n    if len(exact_fit_indices) > 0:\n        priorities[can_fit_mask][exact_fit_indices] = 100.0  # High priority for exact fits\n\n    # For near fits\n    near_fit_indices = np.where(potential_remainders > 0)[0]\n    if len(near_fit_indices) > 0:\n        # Assign priorities based on the negative of the remainder.\n        # This means smaller remainders get higher (less negative) scores.\n        priorities[can_fit_mask][near_fit_indices] = -potential_remainders[near_fit_indices]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed (exploitation). It uses a softmax function to\n    introduce a degree of exploration, where bins with good fits are more likely\n    to be chosen but not guaranteed. The temperature parameter can be tuned to\n    balance exploitation and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if np.any(can_fit_mask):\n        # Calculate the remaining capacity if the item is placed in a fitting bin\n        remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n        # Assign higher priority to bins that will have less remaining capacity\n        # This is equivalent to prioritizing bins where the item fills a larger\n        # proportion of the remaining space.\n        # We invert the remaining capacity so that smaller remaining capacity gets higher priority.\n        # Adding a small epsilon to avoid division by zero.\n        scores = 1.0 / (remaining_after_placement + 1e-9)\n\n        # Apply softmax to introduce exploration.\n        # A higher temperature means more exploration (probabilities are closer).\n        # A lower temperature means more exploitation (probabilities are more skewed towards the best).\n        # For this example, we'll use a fixed moderate temperature.\n        temperature = 0.5\n        probabilities = softmax(scores / temperature)\n\n        priorities[can_fit_mask] = probabilities\n    else:\n        # If no bin can fit the item, all priorities remain 0.\n        # In a real scenario, this might trigger opening a new bin,\n        # but the priority function itself just reflects suitability for existing bins.\n        pass\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, then near fits. Explore with softmax for better results.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}