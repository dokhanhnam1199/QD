```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit Decreasing-like logic for online BPP.

    This heuristic aims to place the item into the bin where it fits best,
    prioritizing bins that will have minimal remaining capacity after placement.
    This is inspired by the First Fit Decreasing (FFD) strategy but adapted for
    the online scenario where we don't know all items in advance.

    The priority is calculated as:
    priority = 1 / (remaining_capacity - item_size + 1)
    where the addition of 1 in the denominator prevents division by zero
    and penalizes bins that are almost full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more preferred bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can actually accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate priority only for bins that can fit the item
    # The idea is to prioritize bins that leave the least remaining capacity
    # after placing the item. A smaller remaining capacity is better for packing.
    # By taking the inverse, we get higher scores for tighter fits.
    # Adding 1 to the denominator prevents division by zero for perfectly fitting bins.
    # A very small positive number epsilon could also be used instead of 1 for
    # extremely tight fits, but 1 is simpler and generally effective.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    # We want to maximize the tightness of the fit, so we invert the remaining capacity.
    # A larger value means a tighter fit (less remaining space).
    # Add a small epsilon to the denominator to avoid division by zero
    # and to ensure bins that perfectly fit get a very high, but finite, priority.
    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + 1e-9)

    # Bins that cannot fit the item will have a priority of 0, meaning they are not considered.
    return priorities
```
