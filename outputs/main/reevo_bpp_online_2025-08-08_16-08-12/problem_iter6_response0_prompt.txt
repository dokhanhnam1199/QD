{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using an improved strategy that prioritizes exact fits then near fits.\n\n    This strategy prioritizes bins that can fit the item, aiming to minimize the\n    remaining capacity (gap) after packing. Exact fits are given the highest priority.\n    Among bins that don't offer an exact fit but can accommodate the item,\n    it prioritizes those that leave the least remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very low value. Bins that cannot fit the item\n    # will retain this low priority.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    # Calculate the remaining capacity after placing the item in fitting bins.\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Assign high priority to exact fits.\n    exact_fit_mask_subset = (remaining_after_placement == 0)\n    priorities[can_fit_mask][exact_fit_mask_subset] = 100.0\n\n    # For bins that fit but are not exact fits, prioritize those with the least remaining capacity.\n    # This means we want to prioritize bins with smaller remaining_after_placement.\n    # We use the negative of remaining_after_placement as the score.\n    # Smaller remaining_after_placement values will result in less negative scores, hence higher priority.\n    near_fit_mask_subset = ~exact_fit_mask_subset\n    if np.any(near_fit_mask_subset):\n        priorities[can_fit_mask][near_fit_mask_subset] = -remaining_after_placement[near_fit_mask_subset]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a best-fit approach with a soft constraint for exploration.\n\n    This heuristic prioritizes bins that can fit the item. Among those that fit,\n    it assigns a higher priority to bins that will have less remaining capacity\n    after the item is placed. To encourage exploration of less-filled bins and\n    prevent premature convergence to suboptimal solutions, a softmax function\n    is applied to the calculated priorities. This allows bins with slightly\n    more remaining capacity to also have a non-negligible chance of being selected.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity if the item is placed in a fitting bin\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Assign higher priority to bins that will have less remaining capacity.\n    # We invert the remaining capacity so that smaller remaining capacity gets higher priority.\n    # Adding a small epsilon to avoid division by zero.\n    fit_priorities = 1.0 / (remaining_after_placement + 1e-9)\n\n    # Apply softmax to introduce exploration.\n    # A higher 'temperature' (e.g., 1.0) means more uniform probabilities (more exploration).\n    # A lower 'temperature' means probabilities are more skewed towards the best bins.\n    # We can also consider a temperature that adapts based on how many bins are available or\n    # the current state of the packing. For simplicity, we use a fixed temperature here.\n    temperature = 1.0\n    if np.any(fit_priorities):\n        # Normalize priorities to prevent very large or small numbers after exponentiation\n        normalized_fit_priorities = fit_priorities - np.max(fit_priorities)\n        probabilities = np.exp(normalized_fit_priorities / temperature)\n        # Ensure probabilities sum to 1 for bins that can fit the item\n        sum_probabilities = np.sum(probabilities)\n        if sum_probabilities > 0:\n            probabilities /= sum_probabilities\n        else:\n            # If all exponentiated values are zero (e.g., due to very small negative exponents),\n            # assign equal probability to fitting bins.\n            probabilities = np.ones_like(fit_priorities) / len(fit_priorities)\n    else:\n        probabilities = np.zeros_like(fit_priorities)\n\n\n    # Assign the calculated probabilities back to the original priority array\n    priorities[can_fit_mask] = probabilities\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, then near fits. Explore options with a temperature.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}