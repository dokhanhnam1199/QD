```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit preference with a logarithmic fullness bonus,
    additively weighted, prioritizing bins that are a tight fit and already full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit component: Inverse of remaining capacity after fitting. Prioritizes tight fits.
    # Add epsilon for numerical stability.
    best_fit_score = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fullness Bonus: Logarithmic scale of how full the bin is before fitting.
    # log1p(1/remaining_cap) is used to give higher bonus to fuller bins (smaller remaining_cap).
    fullness_bonus = np.log1p(1.0 / (fittable_bins_remain_cap + 1e-9))

    # Combine scores additively with weights for balance.
    # Weighting allows for tunable influence of each component.
    # Adding 1.0 to fullness_bonus to ensure it contributes positively.
    # Adjusted weights to balance Best Fit and Fullness.
    combined_scores = 0.7 * best_fit_score + 0.3 * (1.0 + fullness_bonus * 0.5)

    # Normalize priorities to a [0, 1] range.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score
    else:
        # Fallback: uniform small priority if all scores are negligible.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
