{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Calculates priority scores for bins using the Inverse Distance (Proximity Fit) strategy.\n    The closer a bin's remaining capacity is to the item size, the higher its priority.\n    Bins that can fit the item will have a non-zero priority, while those that cannot will have zero.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit_mask = bins_remain_cap >= item\n    \n    fitting_bins_cap = bins_remain_cap[can_fit_mask]\n    \n    if fitting_bins_cap.size > 0:\n        differences = fitting_bins_cap - item\n        # Add a small epsilon to avoid division by zero if an item perfectly fits a bin\n        priorities[can_fit_mask] = 1.0 / (differences + 1e-9)\n        \n        # Normalize priorities so that the best fit bin has a score of 1\n        max_priority = np.max(priorities[can_fit_mask])\n        if max_priority > 0:\n            priorities[can_fit_mask] /= max_priority\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a refined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Balance, Utility, Efficiency, Simplicity, Exploration Bias.\n*   **Advice:** Focus on simple, quantifiable metrics that capture both immediate fit and long-term potential. Introduce complexity *only* when data clearly indicates current strategies are insufficient.\n*   **Avoid:** Redundant implementations that offer marginal improvements. Over-reliance on arbitrary thresholds or overly complex weighting schemes without empirical justification.\n*   **Explanation:** Ineffective reflection often gets bogged down in minor implementation differences. Effective reflection questions *why* a strategy is chosen, assessing its core principle and its impact on the overall objective (better packing). Strive for elegant solutions, not just variations on a theme.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}