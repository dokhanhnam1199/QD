```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    First Fit strategy with a priority score that favors bins with minimal remaining capacity
    that can still accommodate the item. This encourages tighter packing and potentially
    leaving larger bins available for future larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # Assign priorities only to bins that can fit the item
    # The priority is inversely proportional to the remaining capacity.
    # A smaller remaining capacity (but still fitting) gets a higher priority.
    # Add a small epsilon to avoid division by zero if a bin has exactly item size remaining.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9)
    
    return priorities
```
