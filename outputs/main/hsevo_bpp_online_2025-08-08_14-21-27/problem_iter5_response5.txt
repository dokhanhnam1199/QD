```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit (proximity) with a bonus for bins that are already well-utilized,
    aiming for denser packing by prioritizing items that fit snugly into nearly full bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins_mask = bins_remain_cap >= item

    if not np.any(eligible_bins_mask):
        return priorities

    eligible_bins = bins_remain_cap[eligible_bins_mask]

    # Score 1: Best Fit - favors bins with minimal remaining capacity after packing.
    # Higher score for smaller remaining capacity (closer fit). Add epsilon to avoid division by zero.
    best_fit_scores = 1.0 / (eligible_bins - item + 1e-9)

    # Score 2: Fill Ratio - favors bins that are already more full.
    # This is the inverse of remaining capacity, normalized.
    # Max possible remaining capacity could be the bin capacity, but we use max eligible bin's remaining
    # capacity as a relative measure of "fullness" among fitting bins.
    max_eligible_cap = np.max(eligible_bins)
    fill_ratio_scores = eligible_bins / (max_eligible_cap + 1e-9)

    # Combine scores multiplicatively: prioritize bins that are both a good fit and already full.
    combined_scores = best_fit_scores * fill_ratio_scores

    # Assign combined scores to the priorities array
    priorities[eligible_bins_mask] = combined_scores

    # Normalize priorities to the range [0, 1]
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
