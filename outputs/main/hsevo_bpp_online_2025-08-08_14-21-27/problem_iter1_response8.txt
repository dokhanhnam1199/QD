```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    available_bins_mask = bins_remain_cap >= item
    available_bins = bins_remain_cap[available_bins_mask]
    if available_bins.size > 0:
        priorities[available_bins_mask] = (available_bins - item) / available_bins
    return priorities
```
