```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and a logarithmic fill ratio bonus multiplicatively.
    Prioritizes bins that are a tight fit and already quite full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Higher for bins with minimal remaining capacity after fitting.
    # Add epsilon for numerical stability and to avoid division by zero.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fullness Bonus: Logarithmic scale of how full the bin is *before* fitting.
    # Use log1p to handle remaining capacity of 0 gracefully.
    # This term is inversely related to remaining capacity.
    fullness_bonus = np.log1p(1.0 / (fittable_bins_remain_cap + 1e-9))

    # Combine scores multiplicatively: Emphasizes bins that are both a good fit and already full.
    combined_scores = best_fit_scores * (1.0 + fullness_bonus * 0.5) # Adjust multiplier for balance

    # Normalize priorities to a [0, 1] range for consistent comparison.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score
    else:
        # Fallback: if all combined scores are near zero, assign uniform small priority.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
