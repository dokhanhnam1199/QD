```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a multiplicative bonus for fuller bins,
    using a logarithmic scale to favor bins that are mostly full but can still fit the item.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Higher for bins with minimal remaining capacity after fitting.
    # Adding epsilon for numerical stability.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-6)

    # Fullness Bonus: A bonus reflecting how full the bin is *before* fitting the item.
    # We use a logarithmic scale for the remaining capacity to give diminishing returns
    # as bins get very full, but still reward those that are significantly filled.
    # The idea is to slightly favor bins that are already quite full (smaller remaining capacity)
    # to encourage consolidation. Adding 1 to avoid log(0).
    fullness_bonus = np.log1p(bins_remain_cap[fittable_bins_mask])

    # Combine scores multiplicatively: Prioritize bins that are both a good fit (low residual)
    # and are already quite full. The fullness bonus acts as a multiplier on the best-fit score.
    combined_scores = best_fit_scores * (1.0 + fullness_bonus * 0.2) # Add 1 to ensure positive multiplier

    # Normalize priorities to a [0, 1] range.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score
    else:
        # If all scores are near zero, assign a small uniform priority to fittable bins.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
