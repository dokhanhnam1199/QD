```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a balance of minimal wasted space and avoiding fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    valid_bins_mask = bins_remain_cap >= item
    
    if not np.any(valid_bins_mask):
        return priorities

    eligible_bins_capacities = bins_remain_cap[valid_bins_mask]
    
    # Heuristic: Favor bins that leave minimal remaining capacity (less waste)
    # but add a small penalty for bins that become too full, to avoid fragmentation.
    # The `1e
