```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a Fill Ratio that penalizes large remaining capacities.
    Prioritizes bins that snugly fit the item and are already substantially full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    eligible_bins_caps = bins_remain_cap[fittable_bins_mask]

    # Score 1: Best Fit (inverse of remaining capacity after packing)
    # Higher score for smaller remaining capacity. Adding epsilon for numerical stability.
    best_fit_scores = 1.0 / (eligible_bins_caps - item + 1e-9)

    # Score 2: Fill Ratio (inversely proportional to remaining capacity)
    # Prioritizes bins that are more full. This is a refinement to penalize bins
    # with a lot of leftover space more strongly than a simple ratio.
    fill_ratio_scores = 1.0 / (eligible_bins_caps + 1e-9)

    # Combine scores multiplicatively. This emphasizes bins that are good in both aspects.
    # The addition of 1.0 in the fill_ratio_scores is removed to directly use the inverse
    # of remaining capacity for a stronger penalty on larger remaining spaces.
    combined_scores = best_fit_scores * fill_ratio_scores

    # Assign combined scores to the priorities array for eligible bins.
    priorities[fittable_bins_mask] = combined_scores

    # Normalize priorities to the range [0, 1] for consistent comparison.
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
