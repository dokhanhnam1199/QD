```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and a normalized fullness score multiplicatively.
    Prioritizes bins that are a tight fit and also already quite full,
    with careful normalization to ensure score stability.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Inverse of remaining capacity after fitting. Smaller remaining capacity is better.
    # Add a small epsilon to prevent division by zero if remaining capacity is exactly item size.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fullness Score: Ratio of capacity already used relative to the maximum remaining capacity among fittable bins.
    # This provides a relative measure of how "full" a bin is compared to other potential candidates.
    max_initial_remain_cap = np.max(fittable_bins_remain_cap)
    if max_initial_remain_cap < 1e-9:
        # If all fittable bins have negligible remaining capacity, they are all equally "full" in a relative sense.
        fullness_scores = np.ones_like(fittable_bins_remain_cap)
    else:
        # Score is higher for bins with less initial remaining capacity (i.e., they are fuller).
        fullness_scores = 1.0 - (fittable_bins_remain_cap / max_initial_remain_cap)

    # Combine scores multiplicatively. This rewards bins that are both a good fit and already full.
    # Adding a small constant to fullness scores ensures that even bins that are not maximally full
    # still contribute a positive multiplicative factor, preventing the overall score from collapsing to zero.
    combined_scores = best_fit_scores * (fullness_scores + 0.1)

    # Normalize the combined scores for fittable bins to a [0, 1] range.
    # This ensures that the priority values are on a consistent scale, regardless of the absolute magnitudes of the scores.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score
    else:
        # If all combined scores are near zero (e.g., all fittable bins are very large and empty),
        # assign a small uniform priority to fittable bins to allow selection.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
