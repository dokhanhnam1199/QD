```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's preference for tight fits with a refined 'fill ratio' bonus,
    prioritizing bins that are both a good fit and already significantly utilized.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Higher for bins that leave less remaining capacity.
    # Add epsilon to avoid division by zero and prioritize tighter fits.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Refined Fill Ratio Bonus: Prioritizes bins that are more full.
    # This is calculated as 1 - (remaining_capacity / max_possible_capacity),
    # which directly indicates how much space is already occupied.
    # We consider the initial maximum remaining capacity to establish a baseline for "fullness".
    max_initial_remain_cap = np.max(bins_remain_cap)
    fill_ratio_bonus = 1.0 - (fittable_bins_remain_cap / (max_initial_remain_cap + 1e-9))

    # Combine: Use a multiplicative approach for Best Fit and Fill Ratio.
    # This aims to reward bins that are *both* a tight fit and already full.
    # A small constant is added to the fill ratio bonus to avoid zeroing out
    # the score if a bin is completely empty but a tight fit.
    combined_scores = best_fit_scores * (fill_ratio_bonus + 0.1)

    # Normalize priorities to a [0, 1] range.
    if np.max(combined_scores) > 1e-9:
        priorities[fittable_bins_mask] = np.clip(combined_scores / np.max(combined_scores), 0, 1)
    else:
        # If all scores are near zero, assign a small uniform priority to fittable bins.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
