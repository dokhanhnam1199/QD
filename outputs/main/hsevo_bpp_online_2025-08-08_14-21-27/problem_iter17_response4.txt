```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a normalized fill ratio, prioritizing bins
    that fit snugly and are already substantially full, using additive weighting for control.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    eligible_bins_mask = bins_remain_cap >= item

    if not np.any(eligible_bins_mask):
        return priorities

    eligible_bins_caps = bins_remain_cap[eligible_bins_mask]

    # Best Fit component: Prioritize bins with least remaining capacity after packing.
    # A smaller difference (eligible_bins_caps - item) yields a higher score.
    best_fit_scores = 1.0 / (eligible_bins_caps - item + 1e-9)

    # Fill Ratio component: Prioritize bins that are already more utilized relative to their total capacity.
    # Normalize the current remaining capacity by the maximum initial remaining capacity across all bins.
    # This score is higher for bins that are more full. Using log1p for smoother distribution.
    max_initial_remain_cap = np.max(bins_remain_cap) # Consider initial state for normalization
    if max_initial_remain_cap == 0: # Handle case where all bins might be full initially
        fill_ratio_scores = np.ones_like(eligible_bins_caps) # All eligible bins are equally "full"
    else:
        fill_ratio_scores = np.log1p(1.0 / (eligible_bins_caps / max_initial_remain_cap + 1e-9))

    # Combine scores additively with weights. This provides more granular control.
    # Weight for Best Fit: 0.7 (emphasizes immediate packing efficiency)
    # Weight for Fill Ratio: 0.3 (emphasizes future bin utilization)
    # The weights are chosen to balance immediate fit with long-term packing density.
    combined_scores = 0.7 * best_fit_scores + 0.3 * fill_ratio_scores

    priorities[eligible_bins_mask] = combined_scores

    # Normalize priorities to the range [0, 1].
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
