{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a 'fill ratio' bonus, prioritizing bins that are both a tight fit\n    and already well-utilized, aiming for efficient packing.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins_mask = bins_remain_cap >= item\n\n    if not np.any(eligible_bins_mask):\n        return priorities\n\n    eligible_bins_caps = bins_remain_cap[eligible_bins_mask]\n\n    # Best Fit Score: Inversely proportional to the remaining capacity after fitting the item.\n    # Adding a small epsilon to avoid division by zero.\n    best_fit_scores = 1.0 / (eligible_bins_caps - item + 1e-9)\n\n    # Fill Ratio Score: Proportional to how full the bin is *relative to its capacity after packing*.\n    # This emphasizes bins that will have less remaining space after the item is placed.\n    fill_ratio_scores = (bins_remain_cap[eligible_bins_mask] - item) / (bins_remain_cap[eligible_bins_mask] + 1e-9)\n\n\n    # Combined Score: Multiplicative combination.\n    # Prioritizes bins that are a good fit (high best_fit_scores) AND are already quite full (high fill_ratio_scores).\n    combined_scores = best_fit_scores * fill_ratio_scores\n\n    priorities[eligible_bins_mask] = combined_scores\n\n    # Normalize priorities to the range [0, 1] for consistent comparison across different item sizes and bin states.\n    max_priority = np.max(priorities)\n    if max_priority > 0:\n        priorities = priorities / max_priority\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}