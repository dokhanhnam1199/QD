```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and a normalized "fullness" score multiplicatively,
    prioritizing bins that are both a tight fit and already quite full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Inverse of remaining capacity after fitting. Smaller remaining capacity is better.
    # Adding a small epsilon to prevent division by zero.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fullness Score: Ratio of capacity already used. Higher is better.
    # Normalized by the maximum remaining capacity among fittable bins to gauge how "full" a bin is relative to others.
    # A bin with less initial remaining capacity is considered fuller.
    max_initial_remain_cap = np.max(fittable_bins_remain_cap)
    # Handle the case where max_initial_remain_cap is very small or zero to avoid division by zero.
    if max_initial_remain_cap < 1e-9:
        fullness_scores = np.ones_like(fittable_bins_remain_cap) # All bins are equally "full" if none have significant remaining capacity
    else:
        fullness_scores = 1.0 - (fittable_bins_remain_cap / max_initial_remain_cap)

    # Combine scores multiplicatively. This rewards bins that are both a good fit and already full.
    # Add a small constant to fullness scores to prevent the combined score from becoming zero easily
    # if Best Fit score is high but Fullness is low (or vice-versa).
    combined_scores = best_fit_scores * (fullness_scores + 0.1)

    # Normalize the combined scores to be between 0 and 1 for consistent priority representation.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score
    else:
        # If all combined scores are near zero (e.g., all bins are large and empty),
        # assign a uniform small priority to fittable bins.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
