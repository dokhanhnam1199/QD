import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0002485742198117543, fill_ratio_weight: float = 0.31431821805128957) -> np.ndarray:
    """
    Combines Best Fit with a "fill ratio" bonus. Prioritizes bins that fit the item snugly
    and are already relatively full, aiming for denser packing.

    Args:
        item: The size of the item to be packed.
        bins_remain_cap: A numpy array representing the remaining capacity of each bin.
        epsilon: A small value to prevent division by zero.
        fill_ratio_weight: A weight to adjust the influence of the fill ratio score.

    Returns:
        A numpy array representing the priority of each bin for packing the item.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins_mask = bins_remain_cap >= item

    if not np.any(eligible_bins_mask):
        return priorities

    eligible_bins_caps = bins_remain_cap[eligible_bins_mask]

    # Score 1: Best Fit - favors bins with minimal remaining capacity after packing.
    best_fit_scores = 1.0 / (eligible_bins_caps - item + epsilon)

    # Score 2: Fill Ratio - favors bins that are already more full.
    # Using the ratio of current capacity to maximum possible capacity for fitting bins.
    max_eligible_cap = np.max(eligible_bins_caps)
    fill_ratio_scores = eligible_bins_caps / (max_eligible_cap + epsilon)

    # Combine scores multiplicatively: prioritize bins that are both a good fit and already full.
    # The fill_ratio_weight is applied here to control the influence of fill_ratio_scores.
    combined_scores = best_fit_scores * (fill_ratio_scores ** fill_ratio_weight)

    # Assign combined scores to the priorities array
    priorities[eligible_bins_mask] = combined_scores

    # Normalize priorities to the range [0, 1] for consistent comparison.
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
