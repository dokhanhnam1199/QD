```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a modified Fill Ratio for denser packing.
    Prioritizes bins that fit the item snugly and are already substantially full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins_mask = bins_remain_cap >= item

    if not np.any(eligible_bins_mask):
        return priorities

    eligible_bins_caps = bins_remain_cap[eligible_bins_mask]

    # Score 1: Best Fit - inverse of remaining capacity after packing.
    # Higher score for smaller remaining capacity.
    best_fit_scores = 1.0 / (eligible_bins_caps - item + 1e-9)

    # Score 2: Fill Ratio - remaining capacity relative to the item size.
    # Prioritizes bins where the item occupies a larger fraction of the remaining space,
    # promoting tighter packing. Avoids penalizing bins with very large remaining capacity.
    fill_ratio_scores = item / (eligible_bins_caps + 1e-9)

    # Combine scores multiplicatively: accentuates bins that excel in both criteria.
    combined_scores = best_fit_scores * fill_ratio_scores

    # Assign combined scores to the priorities array for eligible bins.
    priorities[eligible_bins_mask] = combined_scores

    # Normalize priorities to the range [0, 1] for consistent comparison.
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
