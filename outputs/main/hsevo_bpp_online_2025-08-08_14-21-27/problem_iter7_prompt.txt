{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by a combination of Best Fit and encouraging bins with moderate remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities\n\n    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item\n    \n    # Best Fit component: favors bins that leave minimal remaining capacity.\n    best_fit_score = 1.0 / (potential_remaining_cap + 1e-9)\n    \n    # Utility component: favors bins that leave a moderate amount of capacity,\n    # balancing tight fits with potential for future items. We use a Gaussian-like\n    # approach centered on a moderate residual (e.g., half the item size)\n    # to provide a bonus to bins that aren't extremely tight or extremely loose.\n    # The 'center' is heuristic and could be tuned. Here, we use item/2 as a simple center.\n    moderate_capacity_center = item / 2.0\n    # Ensure we don't get negative exponents for negative remainders (already filtered by can_fit_mask)\n    utility_score = np.exp(-((potential_remaining_cap - moderate_capacity_center)**2) / (2 * (moderate_capacity_center**2)))\n\n    # Combine scores: Multiplies Best Fit with a utility bonus.\n    # This favors bins that are both a good fit and leave useful remaining capacity.\n    combined_score = best_fit_score * utility_score\n    \n    # Assign priorities to the valid bins\n    priorities[can_fit_mask] = combined_score\n\n    # Normalize priorities to prevent extreme values and ensure a relative ranking\n    if np.any(priorities):\n        max_priority = np.max(priorities)\n        if max_priority > 1e-9: # Avoid division by zero if all priorities are near zero\n            priorities[can_fit_mask] /= max_priority\n        else: # If all are near zero, assign a small uniform priority to all valid bins\n            priorities[can_fit_mask] = 1e-6\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}