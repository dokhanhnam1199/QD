```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a bonus for bins that are already quite full,
    prioritizing tight fits while encouraging fuller bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Score based on Best Fit: lower remaining capacity after placement is better.
    # Adding a small epsilon to avoid division by zero and make it slightly less sensitive to exact fits.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-6)

    # Bonus for already full bins: higher bonus for bins with less remaining capacity.
    # This encourages packing into bins that are already well-utilized.
    # We use the original remaining capacity here.
    fullness_bonus = 1.0 / (fittable_bins_remain_cap + 1e-6)

    # Combine Best Fit and Fullness Bonus: multiplicative approach to balance both.
    # This prioritizes bins that are both a good fit and already have high utilization.
    combined_scores = best_fit_scores * fullness_bonus

    # Normalize priorities to prevent extremely large values and ensure comparability.
    if np.max(combined_scores) > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / np.max(combined_scores)
    else:
        # If all combined scores are near zero (e.g., all bins have huge remaining capacity
        # or item is very small), just assign a uniform small priority to fittable bins.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
