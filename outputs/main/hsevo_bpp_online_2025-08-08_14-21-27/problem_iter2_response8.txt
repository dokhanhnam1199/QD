```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines the "Best Fit" greedy strategy with an exploration component.
    Prioritizes bins that best fit the item, with a small chance of exploring other options.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    # Calculate greedy scores: inverse of remaining capacity after placement (Best Fit)
    # Higher score for bins with less remaining capacity after placing the item
    greedy_scores = 1.0 / (bins_remain_cap[fittable_bins_mask] - item + 1e-9)

    # Introduce a small exploration factor: slightly boost all fittable bins
    # This encourages trying bins that might not be the absolute best fit but could lead to better overall packing later.
    exploration_boost = 0.05
    priorities[fittable_bins_mask] = greedy_scores + exploration_boost

    # Normalize priorities to ensure they are comparable and avoid extreme values
    if np.max(priorities) > 1e-9: # Avoid division by zero if all priorities are zero
        priorities /= np.max(priorities)

    return priorities
```
