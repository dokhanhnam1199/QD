```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    eligible_bins_mask = bins_remain_cap >= item
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    eligible_bins_remain_cap = bins_remain_cap[eligible_bins_mask]
    
    if eligible_bins_remain_cap.size > 0:
        
        utility = eligible_bins_remain_cap - item
        
        exp_utility = np.exp(utility)
        
        probabilities = exp_utility / np.sum(exp_utility)
        
        priorities[eligible_bins_mask] = probabilities
        
    return priorities
```
