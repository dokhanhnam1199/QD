```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a bonus for already full bins, using a logarithmic bonus
    to balance tight fits with encouraging fuller bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Higher for bins that leave less remaining capacity.
    # Adding a small epsilon to avoid division by zero.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-6)

    # Fullness Bonus: A bonus for bins that are already more full.
    # Using the inverse of remaining capacity on fittable bins.
    # Normalize by the maximum remaining capacity among fittable bins to get a relative measure.
    max_remaining_cap_fittable = np.max(fittable_bins_remain_cap)
    fullness_bonus = (max_remaining_cap_fittable - fittable_bins_remain_cap) / (max_remaining_cap_fittable + 1e-6)

    # Adaptive Bonus using logarithm of remaining capacity after fit.
    # This penalizes leaving excessively large gaps but gives smaller penalties for smaller gaps.
    # Adding 1 to prevent log(0) and ensure positive values.
    adaptive_bonus = np.log1p(fittable_bins_remain_cap - item)

    # Combine: Weighted sum of Best Fit and Fullness Bonus, with Adaptive Bonus as a modifier.
    # Weights are heuristic and can be tuned. Here, Best Fit is primary, Fullness adds context,
    # and the Adaptive Bonus influences the penalty for leftover space.
    # We invert the adaptive bonus as smaller leftover space (lower log) should be better.
    combined_scores = (best_fit_scores * 1.0) + (fullness_bonus * 0.5) - (adaptive_bonus * 0.2)

    # Normalize priorities to a [0, 1] range for better comparability and to avoid extreme values.
    if np.max(combined_scores) > 1e-9:
        priorities[fittable_bins_mask] = np.clip(combined_scores / np.max(combined_scores), 0, 1)
    else:
        # If all scores are near zero, assign a small uniform priority to fittable bins.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
