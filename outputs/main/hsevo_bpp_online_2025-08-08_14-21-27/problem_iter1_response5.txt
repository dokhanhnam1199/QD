```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priority scores for bins using the Inverse Distance (Proximity Fit) strategy.
    The closer a bin's remaining capacity is to the item size, the higher its priority.
    Bins that can fit the item will have a non-zero priority, while those that cannot will have zero.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    fitting_bins_cap = bins_remain_cap[can_fit_mask]
    
    if fitting_bins_cap.size > 0:
        differences = fitting_bins_cap - item
        # Add a small epsilon to avoid division by zero if an item perfectly fits a bin
        priorities[can_fit_mask] = 1.0 / (differences + 1e-9)
        
        # Normalize priorities so that the best fit bin has a score of 1
        max_priority = np.max(priorities[can_fit_mask])
        if max_priority > 0:
            priorities[can_fit_mask] /= max_priority

    return priorities
```
