```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit approach with a twist.

    The priority is higher for bins that can accommodate the item and for bins that will have
    minimal remaining capacity after the item is placed, thus trying to fill bins more effectively.
    A small penalty is applied if the item perfectly fits to encourage using bins that are
    not completely filled, which can be beneficial for subsequent items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            remaining_after_fit = bins_remain_cap[i] - item
            if remaining_after_fit == 0:
                priorities[i] = 1.0 / (remaining_after_fit + 1e-6) - 0.1
            else:
                priorities[i] = 1.0 / (remaining_after_fit + 1e-6)
    return priorities
```
