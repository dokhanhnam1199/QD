```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines a greedy approach with a small probability of random selection
    to balance exploration and exploitation for bin packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    eligible_bins_mask = bins_remain_cap >= item
    
    if not np.any(eligible_bins_mask):
        return priorities
        
    eligible_bins_remain_cap = bins_remain_cap[eligible_bins_mask]
    
    
    greedy_scores = 1.0 / (eligible_bins_remain_cap - item + 1e-9)
    
    
    epsilon = 0.05 # Small exploration rate
    num_eligible_bins = eligible_bins_mask.sum()
    
    
    exploration_indices = np.random.choice(
        np.arange(num_eligible_bins), 
        size=int(epsilon * num_eligible_bins), 
        replace=False
    )
    
    
    priorities[eligible_bins_mask][exploration_indices] = 1.0 
    
    
    exploitation_indices = np.setdiff1d(np.arange(num_eligible_bins), exploration_indices)
    priorities[eligible_bins_mask][exploitation_indices] = greedy_scores[exploitation_indices]
    
    
    if np.max(priorities) > 0:
        priorities = priorities / np.max(priorities)
        
    return priorities
```
