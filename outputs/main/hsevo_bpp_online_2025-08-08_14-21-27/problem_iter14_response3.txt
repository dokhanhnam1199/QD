```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's preference for tight fits with a multiplicative
    fullness bonus, prioritizing bins that are nearly full and can
    accommodate the item with minimal remaining space.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit component: Prioritize bins with smallest remaining capacity after fitting
    # Adding a small epsilon to avoid division by zero if remaining capacity is exactly item size
    best_fit_score = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fullness component: Prioritize bins that are already more full.
    # Assuming a normalized bin capacity of 1.0. If capacity varies, this needs adjustment.
    # Higher fullness means smaller remaining capacity, so we want to penalize larger remaining capacities.
    # A simple way is to use the inverse of remaining capacity, but to avoid zero for empty bins
    # and to make it more comparable to best_fit, let's use a score derived from 1 - (remaining_cap / capacity)
    # where capacity is assumed to be 1.0.
    fullness_score = 1.0 - fittable_bins_remain_cap # Higher score for smaller remaining capacity

    # Combine scores multiplicatively: Boosts bins that are both tight fits and more full.
    # A small constant is added to fullness_score to prevent it from being zero,
    # ensuring that even less full bins contribute to the multiplicative factor.
    combined_scores = best_fit_score * (fullness_score + 0.5) # Adding a small boost to less full bins

    priorities[fittable_bins_mask] = combined_scores

    # Normalize priorities for fittable bins to a [0, 1] range.
    max_priority = np.max(priorities[fittable_bins_mask])
    if max_priority > 0:
        priorities[fittable_bins_mask] /= max_priority

    return priorities
```
