```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Exploration rate
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    fittable_bins_mask = bins_remain_cap >= item

    # If no bins can fit, return all zeros
    if not np.any(fittable_bins_mask):
        return priorities

    # Greedy choice: Prioritize bins with the least remaining capacity after placing the item
    # This encourages filling bins more completely.
    greedy_scores = 1.0 / (bins_remain_cap[fittable_bins_mask] - item + 1e-9) # Add epsilon for division by zero

    # Epsilon-Greedy strategy:
    # With probability epsilon, choose a random fittable bin.
    # With probability 1-epsilon, choose the bin with the highest greedy score.

    num_fittable_bins = np.sum(fittable_bins_mask)
    random_indices = np.random.choice(num_fittable_bins, size=int(epsilon * num_fittable_bins), replace=True)
    random_fittable_bins_mask = np.zeros(num_fittable_bins, dtype=bool)
    random_fittable_bins_mask[random_indices] = True

    # Assign high priority to randomly chosen bins
    priorities[fittable_bins_mask][random_fittable_bins_mask] = 1.0

    # Assign greedy scores to the remaining fittable bins
    non_random_fittable_indices = np.where(~random_fittable_bins_mask)[0]
    priorities[fittable_bins_mask][non_random_fittable_indices] = greedy_scores[non_random_fittable_indices]

    # Normalize priorities to be between 0 and 1
    if np.max(priorities) > 0:
        priorities /= np.max(priorities)

    return priorities
```
