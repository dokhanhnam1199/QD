```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a normalized fill ratio, prioritizing bins
    that snugly fit the item and are already substantially full, adaptively.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    eligible_bins_caps = bins_remain_cap[fittable_bins_mask]

    # Score 1: Best Fit (inverse of remaining capacity after packing).
    # Smaller remaining capacity after packing yields a higher score.
    best_fit_scores = 1.0 / (eligible_bins_caps - item + 1e-9)

    # Score 2: Normalized Fill Ratio.
    # Aims to prioritize bins that are more full. We use a formula that is
    # sensitive to how much space is left relative to the total capacity,
    # but we normalize it against the maximum initial remaining capacity
    # to provide a more consistent fill measure across different scenarios.
    # Adding a small epsilon for stability and to avoid zero if all bins are empty.
    max_initial_remain_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap > 0) else 1.0
    fill_ratio_scores = 1.0 - (eligible_bins_caps / (max_initial_remain_cap + 1e-9))
    # Add a small constant to ensure even less full bins have a positive score,
    # preventing the multiplicative term from becoming zero too easily.
    fill_ratio_scores = fill_ratio_scores + 0.1

    # Combine scores multiplicatively.
    # This approach emphasizes bins that are good in both aspects: tight fit (best_fit_scores)
    # and already substantially full (fill_ratio_scores).
    combined_scores = best_fit_scores * fill_ratio_scores

    # Assign combined scores to the priorities array for eligible bins.
    priorities[fittable_bins_mask] = combined_scores

    # Normalize priorities to the range [0, 1] for consistent comparison.
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
