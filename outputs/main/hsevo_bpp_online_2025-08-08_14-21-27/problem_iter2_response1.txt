```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by favoring those with minimal remaining capacity after packing, while also considering the overall bin count.

    This heuristic aims to fill bins as much as possible (Best Fit like) while
    implicitly encouraging the use of fewer bins by giving a slight boost to bins
    that are already well-utilized.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins_mask = bins_remain_cap >= item

    if not np.any(valid_bins_mask):
        return priorities

    eligible_bins_remain_cap = bins_remain_cap[valid_bins_mask]
    
    # Score based on closeness to perfect fit (smaller difference is better)
    # Adding
