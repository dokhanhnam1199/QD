```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'Best Fit' with a bonus for bins that leave minimal residual capacity.
    Favors bins that are a tight fit and result in less wasted space.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fitting_bins_cap = bins_remain_cap[fittable_bins_mask]

    # Calculate "Best Fit" score: inverse of remaining capacity after placement.
    # Higher score for bins that leave less capacity after fitting the item.
    best_fit_scores = 1.0 / (fitting_bins_cap - item + 1e-9)

    # Calculate "Minimal Residual" bonus: This is related to the 'fullness' of the bin *after* packing.
    # We want bins that are almost full after packing.
    # A simple way is to take the fill ratio of the *remaining* capacity,
    # but we want to encourage *low* remaining capacity.
    # So, let's use the inverse of the remaining capacity, similar to best fit.
    # However, to make it distinct and penalize *very* large residuals more,
    # we can use a slightly different formulation.
    # Let's use the inverse of (1 + residual capacity). This gives a bonus to smaller residuals.
    # A residual of 0 gets a bonus of 1. A residual of 1 gets a bonus of 0.5.
    # A residual of 10 gets a bonus of ~0.09.
    minimal_residual_bonus = 1.0 / (1.0 + (fitting_bins_cap - item) + 1e-9)

    # Combine scores: Multiply best fit by the minimal residual bonus.
    # This prioritizes bins that are both a good fit AND leave little remainder.
    combined_scores = best_fit_scores * minimal_residual_bonus

    # Normalize combined scores to [0, 1]
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score

    return priorities
```
