```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and a Fullness bonus multiplicatively.
    Prioritizes bins that are a tight fit and are already more utilized.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Score 1: Best Fit - Higher score for smaller remaining capacity after packing.
    # This encourages minimizing immediate wasted space.
    best_fit_score = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Score 2: Fullness Bonus - Higher score for bins that are already more full.
    # This is calculated as the inverse of the remaining capacity among fittable bins.
    # Encourages consolidation into fewer bins.
    fullness_bonus = 1.0 / (fittable_bins_remain_cap + 1e-9)

    # Combine scores multiplicatively. This ensures that bins must perform well on both
    # metrics to achieve a high priority. A bin that is a perfect fit but very empty,
    # or a very full bin that is a poor fit, will receive a lower combined score.
    combined_scores = best_fit_score * fullness_bonus

    # Normalize priorities to a [0, 1] range for consistent behavior.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score
    else:
        # If all scores are effectively zero (e.g., very large items or very similar capacities),
        # assign a small uniform priority to fittable bins to ensure selection.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
