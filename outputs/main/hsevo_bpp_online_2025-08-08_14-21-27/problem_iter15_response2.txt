```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Score 1: Best Fit (Inverse of remaining capacity after placing the item)
    # This encourages placing the item in a bin where it leaves the least amount of empty space.
    # Adding epsilon to prevent division by zero.
    best_fit_score = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Score 2: Fullness Factor (Inverse of remaining capacity before placing the item)
    # This encourages using bins that are already relatively full, promoting tighter packing.
    # Adding epsilon to prevent division by zero.
    fullness_factor = 1.0 / (fittable_bins_remain_cap + 1e-9)

    # Score 3: Proportional Remaining Space (Penalizes bins that leave a large percentage of space unused)
    # This aims to prevent placing a small item into a very large bin if a tighter fit exists.
    # Adding epsilon to the denominator to avoid division by zero.
    proportional_remaining = (fittable_bins_remain_cap - item) / (bins_remain_cap.max() + 1e-9)

    # Combine scores multiplicatively for a more nuanced interaction.
    # Higher values indicate a better fit according to all criteria.
    # We use (1 - proportional_remaining) so that smaller proportional remaining space leads to a higher score.
    combined_scores = best_fit_score * fullness_factor * (1.0 - proportional_remaining)

    # Normalize scores to a [0, 1] range.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        normalized_scores = combined_scores / max_score
        priorities[fittable_bins_mask] = normalized_scores
    else:
        # If all combined scores are near zero, assign a uniform priority to fittable bins.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
