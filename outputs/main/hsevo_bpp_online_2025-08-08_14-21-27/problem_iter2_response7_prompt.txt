{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] = bins_remain_cap[valid_bins] - item\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (3rd) and (4th), all three implement a similar strategy: assigning priority inversely proportional to the remaining capacity after placing the item, using `1.0 / (bins_remain_cap[eligible_bins_mask] - item + 1e-9)`. The 1st and 4th are nearly identical in their implementation and docstrings, with the 4th having a slightl\n- \nHere's a redefined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Adaptive Prioritization, Dynamic Evaluation, Predictive Performance, Causal Analysis.\n*   **Advice:** Instead of solely relying on static or post-hoc comparisons, focus on *predicting* the future impact of heuristic choices. Experiment with actively *adapting* the heuristic's logic based on early performance signals during a run.\n*   **Avoid:** Repeating analyses of near-identical implementations. Over-reliance on single-metric comparisons without considering the underlying mechanisms.\n*   **Explanation:** Truly improving heuristics requires understanding *why* certain strategies work or fail, not just observing superficial similarities. Analyze the *causal relationship* between a heuristic's choice and the overall solution quality to drive innovation.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}