```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a Fill Ratio bonus, using a multiplicative approach.
    This prioritizes bins that fit tightly and are already relatively full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Inverse of remaining capacity after packing. Higher is better.
    best_fit_score = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fill Ratio Score: Inverse of the bin's total capacity (assuming total capacity is 1 for simplicity or can be passed).
    # Here we use the inverse of the *original* remaining capacity before fitting the item,
    # to represent how full the bin *was*. A higher fill ratio (lower remaining capacity) is better.
    # Add 1 to avoid division by zero if a bin was already full (though fittable_bins_mask should prevent this).
    fill_ratio_score = 1.0 / (fittable_bins_remain_cap + 1e-9)

    # Combine multiplicatively: Prioritize bins that are both a tight fit and were already full.
    # This balances immediate packing efficiency with the goal of consolidating items.
    combined_scores = best_fit_score * fill_ratio_score

    # Normalize to [0, 1]
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score

    return priorities
```
