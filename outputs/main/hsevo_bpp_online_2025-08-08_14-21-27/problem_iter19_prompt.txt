{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit's tightness with a normalized fill ratio, prioritizing bins\n    that snugly fit the item and are already substantially full, adaptively.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fittable_bins_mask = bins_remain_cap >= item\n\n    if not np.any(fittable_bins_mask):\n        return priorities\n\n    eligible_bins_caps = bins_remain_cap[fittable_bins_mask]\n\n    # Score 1: Best Fit (inverse of remaining capacity after packing).\n    # Smaller remaining capacity after packing yields a higher score.\n    best_fit_scores = 1.0 / (eligible_bins_caps - item + 1e-9)\n\n    # Score 2: Normalized Fill Ratio.\n    # Aims to prioritize bins that are more full. We use a formula that is\n    # sensitive to how much space is left relative to the total capacity,\n    # but we normalize it against the maximum initial remaining capacity\n    # to provide a more consistent fill measure across different scenarios.\n    # Adding a small epsilon for stability and to avoid zero if all bins are empty.\n    max_initial_remain_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap > 0) else 1.0\n    fill_ratio_scores = 1.0 - (eligible_bins_caps / (max_initial_remain_cap + 1e-9))\n    # Add a small constant to ensure even less full bins have a positive score,\n    # preventing the multiplicative term from becoming zero too easily.\n    fill_ratio_scores = fill_ratio_scores + 0.1\n\n    # Combine scores multiplicatively.\n    # This approach emphasizes bins that are good in both aspects: tight fit (best_fit_scores)\n    # and already substantially full (fill_ratio_scores).\n    combined_scores = best_fit_scores * fill_ratio_scores\n\n    # Assign combined scores to the priorities array for eligible bins.\n    priorities[fittable_bins_mask] = combined_scores\n\n    # Normalize priorities to the range [0, 1] for consistent comparison.\n    max_priority = np.max(priorities)\n    if max_priority > 0:\n        priorities = priorities / max_priority\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}