```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a normalized measure of bin fullness,
    using an additive approach for better control and interpretability.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Prioritize bins that leave minimal remaining capacity.
    # Using inverse of remaining space after fit, with epsilon for stability.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fullness Score: Prioritize bins that are already more full.
    # Normalized by the *initial* maximum remaining capacity to provide a stable baseline.
    # This measure is relative to the overall capacity landscape, not just fittable bins.
    # A higher score means the bin has less *initial* remaining capacity (i.e., is fuller).
    if bins_remain_cap.size > 0 and np.max(bins_remain_cap) > 1e-9:
        max_initial_remain_cap = np.max(bins_remain_cap)
        fullness_scores = (max_initial_remain_cap - fittable_bins_remain_cap) / (max_initial_remain_cap + 1e-9)
    else:
        # If no bins or all bins are empty, fullness doesn't differentiate much.
        fullness_scores = np.zeros_like(fittable_bins_remain_cap)

    # Combine Scores Additively:
    # Weight Best Fit more heavily, but give a significant boost for fuller bins.
    # This aims for a balance: prioritize tight fits but also leverage existing bin fullness.
    # Weights can be tuned for performance.
    combined_scores = (best_fit_scores * 1.0) + (fullness_scores * 0.75)

    # Normalize combined scores to [0, 1] for consistent priority assignment.
    if np.max(combined_scores) > 1e-9:
        priorities[fittable_bins_mask] = np.clip(combined_scores / np.max(combined_scores), 0, 1)
    else:
        # If all combined scores are effectively zero, assign a small uniform priority.
        priorities[fittable_bins_mask] = 0.1

    return priorities
```
