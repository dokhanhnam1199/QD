```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with an adaptive penalty for leftover space,
    prioritizing tight fits while discouraging large wasted capacities.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit: Higher score for bins with less remaining capacity after fitting.
    # Add a small epsilon to avoid division by zero and to ensure non-zero scores for perfect fits.
    best_fit_scores = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Adaptive Penalty: Penalize leaving large gaps using a logarithmic function.
    # Logarithm of (1 + remaining capacity after fit) smooths the penalty,
    # giving diminishing returns to larger remaining spaces.
    # We invert this to reward smaller leftover spaces.
    adaptive_penalty = np.log1p(fittable_bins_remain_cap - item + 1)

    # Combine: A weighted sum. Best Fit is the primary driver,
    # with the adaptive penalty acting as a penalty for suboptimal fits (large remaining capacity).
    # The weight for adaptive_penalty is negative to penalize.
    combined_scores = (best_fit_scores * 1.0) - (adaptive_penalty * 0.3)

    # Normalize scores to the [0, 1] range.
    # If all scores are very close to zero or negative, assign a small positive value
    # to ensure fittable bins have some priority.
    max_score = np.max(combined_scores)
    min_score = np.min(combined_scores)

    if max_score - min_score > 1e-9:
        priorities[fittable_bins_mask] = np.clip((combined_scores - min_score) / (max_score - min_score), 0, 1)
    else:
        # If all calculated scores are effectively the same (e.g., all perfect fits or all similarly poor fits)
        # assign a small uniform priority to fittable bins.
        priorities[fittable_bins_mask] = 0.5

    return priorities
```
