```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with a multiplicative Fill Ratio bonus,
    prioritizing bins that are both a good fit and already relatively full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fittable_bins_mask = bins_remain_cap >= item

    if not np.any(fittable_bins_mask):
        return priorities

    fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]

    # Best Fit Score: Inverse of the remaining capacity after packing. Higher is better.
    # Adding epsilon to avoid division by zero.
    best_fit_score = 1.0 / (fittable_bins_remain_cap - item + 1e-9)

    # Fill Ratio Score: Represents how full the bin *was* before this item.
    # A higher fill ratio (lower remaining capacity) is generally better for consolidation.
    # We use the inverse of the remaining capacity (plus epsilon) as a proxy.
    fill_ratio_score = 1.0 / (fittable_bins_remain_cap + 1e-9)

    # Combine multiplicatively: Prioritize bins that are both a tight fit (high best_fit_score)
    # and were already quite full (high fill_ratio_score).
    combined_scores = best_fit_score * fill_ratio_score

    # Normalize scores to the range [0, 1] for consistent priority assignment.
    max_score = np.max(combined_scores)
    if max_score > 1e-9:
        priorities[fittable_bins_mask] = combined_scores / max_score

    return priorities
```
