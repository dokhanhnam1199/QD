```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that directly uses the remaining capacity of the bins.
    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, prioritize those with the least remaining capacity
    priorities = np.where(valid_bins, bins_remain_cap, -np.inf)
    
    # Introduce controlled randomness, scaled appropriately for meaningful score differences
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(-1, 1, size=len(priorities))  # Scaled noise for exploration
    priorities += noise * valid_bins * 1e-6  # Only add noise to valid bins, with a small scale
    
    return priorities
```
