```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition, 
    and balances between exploitation and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    fit_score = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)
    
    # Normalize the fit scores to be between 0 and 1 for valid bins
    valid_bins = remaining_after_addition >= 0
    if np.any(valid_bins):
        max_fit_score = np.max(fit_score[valid_bins])
        min_fit_score = np.min(fit_score[valid_bins])
        fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)
    else:
        return fit_score  # Return -inf for all bins if none can hold the item
    
    # Add a small random noise to balance exploration and exploitation
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))
    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise
    
    # Calculate the final priority score as a weighted sum of "fit" score and random noise
    priorities = alpha * fit_score + (1 - alpha) * noise
    
    return priorities
```
