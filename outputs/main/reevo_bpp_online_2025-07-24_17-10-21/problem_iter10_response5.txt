```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition,
    and balances between exploitation and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)
    
    # Normalize the priority scores for valid bins using a more numerically stable method
    valid_bins = priorities != -np.inf
    if np.any(valid_bins):
        priorities[valid_bins] = 1 - (priorities[valid_bins] - np.min(priorities[valid_bins])) / (np.max(priorities[valid_bins]) - np.min(priorities[valid_bins]) + 1e-10)
        priorities[~valid_bins] = 0
    
    # Add a small random noise to the priority scores for exploration, scaled appropriately
    noise = np.random.uniform(0, 1e-5, size=len(priorities))  # Reduced noise scale for more exploitation
    noise[~valid_bins] = 0  
    
    # Combine the normalized priorities and noise, with alpha controlling the trade-off
    priorities = alpha * priorities + (1 - alpha) * noise
    
    return priorities
```
