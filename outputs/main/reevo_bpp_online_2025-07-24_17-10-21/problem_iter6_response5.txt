```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements an improved priority function that considers multiple factors:
    - The remaining capacity of the bins after adding the item.
    - The size of the item relative to the bin capacity.
    - Fills bins that are most full.
    - Normalizes the priority scores and adds a small random noise for exploration-exploitation balance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" and randomness.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    # and consider the relative size of the item to the bin capacity
    fit_score = np.where(valid_bins, 
                         (1 - remaining_after_addition / (bins_remain_cap + 1e-12)) * (item / (bins_remain_cap + 1e-12)), 
                         0)
    
    # Prioritize bins that are most full
    full_score = 1 - bins_remain_cap / np.max(bins_remain_cap + 1e-12)
    
    # Combine fit_score and full_score
    priorities = alpha * fit_score + (1 - alpha) * full_score
    
    # Normalize the priority scores to be within [0, 1]
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)
    priorities = (priorities - min_priority) / (max_priority - min_priority + 1e-12)
    
    # To balance exploration and exploitation, add a small random noise to the priority scores
    np.random.seed(0)  # For reproducibility
    priorities += np.random.uniform(0, 1e-6, size=len(priorities))
    
    # Ensure priorities are within [0, 1] after adding noise
    priorities = np.clip(priorities, 0, 1)
    
    return priorities
```
