```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers multiple factors and adds a small random noise for exploration-exploitation balance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and randomness.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-12), 0)
    
    # Normalize the "fit" scores to be within [0, 1]
    max_fit_score = np.max(fit_score)
    min_fit_score = np.min(fit_score)
    fit_score = (fit_score - min_fit_score) / (max_fit_score - min_fit_score + 1e-12)
    
    # To balance exploration and exploitation, add a small random noise to the "fit" scores
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))
    noise = (noise - np.min(noise)) / (np.max(noise) - np.min(noise) + 1e-12)  # Normalize noise
    
    # Calculate the final priority score as a weighted sum of "fit" score and random noise
    priorities = alpha * fit_score + (1 - alpha) * noise
    
    return priorities
```
