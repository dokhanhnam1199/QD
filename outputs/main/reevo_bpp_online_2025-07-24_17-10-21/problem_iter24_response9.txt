```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that prioritizes bins with just enough capacity to hold the item 
    and introduces tunable randomness relative to valid bin priorities for better exploration-exploitation balance.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the level of exploration. Defaults to 0.1.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)
    
    # Normalize priorities within valid bins
    priorities_valid = priorities[valid_bins]
    min_priority_valid = np.min(priorities_valid)
    max_priority_valid = np.max(priorities_valid)
    priority_range = max_priority_valid - min_priority_valid
    if priority_range > 0:
        priorities[valid_bins] = (priorities_valid - min_priority_valid) / priority_range
    else:
        priorities[valid_bins] = np.ones_like(priorities_valid)
    
    # Introduce controlled randomness scaled by valid bin indicator
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, alpha, size=len(priorities))  
    priorities += noise * valid_bins.astype(float)  # Only add noise to valid bins
    
    return priorities
```
