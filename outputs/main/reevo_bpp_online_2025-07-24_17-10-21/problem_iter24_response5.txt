```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled and normalized randomness for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the level of exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)
    
    # Normalize priorities to [0, 1] range for valid bins
    priorities_valid = priorities[valid_bins]
    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)
    if max_priority == min_priority:
        priorities[valid_bins] = 1.0
    else:
        priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority)
    
    # Introduce controlled and normalized randomness
    noise = np.random.uniform(0, 1, size=len(priorities))  
    noise = np.where(valid_bins, noise, 0)  # Zero noise for invalid bins
    
    # Combine priorities and noise
    priorities = (1 - alpha) * priorities + alpha * noise
    
    # Ensure that invalid bins have the lowest priority
    priorities = np.where(valid_bins, priorities, -np.inf)
    
    return priorities
```
