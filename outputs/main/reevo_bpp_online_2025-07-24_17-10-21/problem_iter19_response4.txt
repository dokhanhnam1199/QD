```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    post_addition_remain_cap = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = post_addition_remain_cap >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -post_addition_remain_cap, -np.inf)
    
    # Normalize priorities to [0, 1] range for valid bins
    priorities_valid = priorities[valid_bins]
    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)
    priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority + 1e-9)
    
    # Introduce controlled randomness relative to priority range
    np.random.seed(0)  # For reproducibility
    noise_scale = 0.1  # Scaled noise for exploration relative to priority range
    noise = np.random.uniform(0, noise_scale * (max_priority - min_priority), size=len(priorities))
    priorities += noise * valid_bins  # Only add noise to valid bins
    
    return priorities
```
