```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a simplified priority function that directly uses 
    the normalized remaining capacity as priority scores for valid bins and 
    adds a small random noise for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Weight for the normalized remaining capacity.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.where(valid_bins, bins_remain_cap, np.inf)
    min_cap = np.min(priorities[valid_bins]) if np.any(valid_bins) else np.inf
    max_cap = np.max(priorities[valid_bins]) if np.any(valid_bins) else 1
    priorities = np.where(valid_bins, (max_cap - priorities) / (max_cap - min_cap + 1e-9), -np.inf)
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    noise[~valid_bins] = 0  
    priorities = alpha * priorities + (1 - alpha) * noise
    return priorities
```
