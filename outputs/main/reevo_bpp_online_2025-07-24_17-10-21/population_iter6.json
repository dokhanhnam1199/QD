[
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, normalizes the priority scores, and adds a small random noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):\n        max_priority = np.max(priorities[valid_bins])\n        min_priority = np.min(priorities[valid_bins])\n        normalized_priorities = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10)\n        priorities[valid_bins] = normalized_priorities\n    \n    # To balance exploration and exploitation, add a small random noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1e-6, size=len(priorities))\n    priorities = alpha * priorities + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements an improved priority function that considers multiple factors:\n    - The remaining capacity of the bins after adding the item.\n    - The size of the item relative to the bin capacity.\n    - Normalizes the priority scores and adds a small random noise for exploration-exploitation balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    # and consider the relative size of the item to the bin capacity\n    priorities = np.where(valid_bins, \n                          (1 - remaining_after_addition / (bins_remain_cap + 1e-12)) * (item / (bins_remain_cap + 1e-12)), \n                          0)\n    \n    # Normalize the priority scores to be within [0, 1]\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    priorities = (priorities - min_priority) / (max_priority - min_priority + 1e-12)\n    \n    # To balance exploration and exploitation, add a small random noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, np.max(priorities) * 1e-3, size=len(priorities))\n    priorities += noise\n    \n    # Ensure priorities are within [0, 1] after adding noise\n    priorities = np.clip(priorities, 0, 1)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity and adding a small random noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the magnitude of random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Add a small random noise to break ties and allow for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities[valid_bins] += np.random.uniform(0, alpha, size=np.sum(valid_bins))\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item and balances between exploitation and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity after packing the item\n    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Normalize the fit scores to be between 0 and 1 for valid bins\n    max_fit_score = np.max(fit_score[valid_bins])\n    min_fit_score = np.min(fit_score[valid_bins])\n    fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)\n    \n    # Add a small random noise to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * fit_score + (1 - alpha) * noise\n    \n    # As a tie-breaker, favor bins with the least remaining capacity by subtracting a small value proportional to the remaining capacity\n    priorities[valid_bins] -= 1e-9 * (bins_remain_cap[valid_bins] / bins_remain_cap.max())\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.078579976067022,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with a tie-breaker for bins with the least remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity after packing the item\n    priorities = np.where(valid_bins, 1 / (1 + bins_remain_cap - item), -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response5.txt_stdout.txt",
    "code_path": "problem_iter6_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements an improved priority function that considers multiple factors:\n    - The remaining capacity of the bins after adding the item.\n    - The size of the item relative to the bin capacity.\n    - Fills bins that are most full.\n    - Normalizes the priority scores and adds a small random noise for exploration-exploitation balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    # and consider the relative size of the item to the bin capacity\n    fit_score = np.where(valid_bins, \n                         (1 - remaining_after_addition / (bins_remain_cap + 1e-12)) * (item / (bins_remain_cap + 1e-12)), \n                         0)\n    \n    # Prioritize bins that are most full\n    full_score = 1 - bins_remain_cap / np.max(bins_remain_cap + 1e-12)\n    \n    # Combine fit_score and full_score\n    priorities = alpha * fit_score + (1 - alpha) * full_score\n    \n    # Normalize the priority scores to be within [0, 1]\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    priorities = (priorities - min_priority) / (max_priority - min_priority + 1e-12)\n    \n    # To balance exploration and exploitation, add a small random noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    # Ensure priorities are within [0, 1] after adding noise\n    priorities = np.clip(priorities, 0, 1)\n    \n    return priorities",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response6.txt_stdout.txt",
    "code_path": "problem_iter6_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers multiple factors and adds a small random noise for exploration-exploitation balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-12), 0)\n    \n    # Normalize the \"fit\" scores to be within [0, 1]\n    max_fit_score = np.max(fit_score)\n    min_fit_score = np.min(fit_score)\n    fit_score = (fit_score - min_fit_score) / (max_fit_score - min_fit_score + 1e-12)\n    \n    # To balance exploration and exploitation, add a small random noise to the \"fit\" scores\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    noise = (noise - np.min(noise)) / (np.max(noise) - np.min(noise) + 1e-12)  # Normalize noise\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * fit_score + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 6,
    "obj": 4.078579976067022,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response7.txt_stdout.txt",
    "code_path": "problem_iter6_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity after adding the item\n    priorities = np.where(valid_bins, -(bins_remain_cap - item), -np.inf)\n    \n    # Normalize scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  \n    priorities[valid_bins] += np.random.uniform(0, 1e-6, size=np.sum(valid_bins))\n    \n    return priorities",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response8.txt_stdout.txt",
    "code_path": "problem_iter6_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" and \"least remaining capacity\".\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n\n    # For valid bins, prioritize those with the least remaining capacity after adding the item\n    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n\n    # Calculate the \"least remaining capacity\" score\n    remain_score = np.where(valid_bins, -bins_remain_cap + item, 0)\n\n    # Normalize scores to be between 0 and 1 for valid bins\n    max_fit_score = np.max(fit_score[valid_bins])\n    min_fit_score = np.min(fit_score[valid_bins])\n    fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)\n\n    max_remain_score = np.max(remain_score[valid_bins])\n    min_remain_score = np.min(remain_score[valid_bins])\n    remain_score[valid_bins] = (remain_score[valid_bins] - min_remain_score) / (max_remain_score - min_remain_score + 1e-9)\n\n    # Calculate the final priority score as a weighted sum of \"fit\" score and \"least remaining capacity\" score\n    priorities = alpha * fit_score + (1 - alpha) * remain_score\n\n    # To make the priority scores more distinguishable and allow for exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities[valid_bins] += np.random.uniform(0, 1e-6, size=np.sum(valid_bins))\n\n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response9.txt_stdout.txt",
    "code_path": "problem_iter6_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function prioritizes bins that can accommodate the item and have the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    return priorities",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 65.78648359156246,
    "token_count": 58.0,
    "exec_success": true
  }
]