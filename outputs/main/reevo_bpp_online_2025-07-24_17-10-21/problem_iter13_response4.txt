```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item and introduces controlled randomness.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, 1 - remaining_after_addition / (bins_remain_cap + 1e-9), 0)
    
    # Normalize the priority scores to be within [0, 1] range for valid bins
    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 1
    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0
    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)
    
    # Introduce controlled randomness by adding a scaled noise to the priority scores
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1e-2, size=len(priorities))  # Scaled noise
    priorities += noise
    
    # Ensure that bins that cannot hold the item still have the lowest priority
    priorities[~valid_bins] = -np.inf
    
    return priorities
```
