```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    enough_cap_mask = remain_cap_after_add >= 0
    
    # Assign high priority to bins with enough capacity and low priority to others
    priorities = np.where(enough_cap_mask, -remain_cap_after_add, -np.inf)
    
    # To differentiate bins with enough capacity, use the ratio of item size to bin capacity
    ratios = item / bins_remain_cap
    priorities_enough_cap = -ratios[enough_cap_mask]
    priorities[enough_cap_mask] = priorities_enough_cap
    
    # Normalize priorities to avoid overflow
    priorities = priorities - np.max(priorities)
    
    # Apply softmax to convert priorities into a probability distribution
    exp_priorities = np.exp(priorities)
    priorities = exp_priorities / np.sum(exp_priorities)
    
    return priorities
```
