```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements an improved priority function that considers the remaining capacity of the bins and introduces a tie-breaker.
    It prioritizes bins that can accommodate the item, have the least remaining capacity, and are less full initially.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can accommodate the item get priority based on their remaining capacity after addition and initial remaining capacity
    priorities = np.where(remaining_after_addition >= 0, 
                          -remaining_after_addition + 1e-6 * np.random.uniform(0, 1, size=len(remaining_after_addition)) + 1e-6 * bins_remain_cap, 
                          -np.inf)
    
    return priorities
```
