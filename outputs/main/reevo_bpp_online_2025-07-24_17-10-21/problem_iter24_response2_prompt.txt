{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with scaled exploration noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Scale priorities to avoid extreme values\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priority_range = max_priority - min_priority\n    \n    # Avoid division by zero\n    if priority_range == 0:\n        scaled_priorities = np.where(valid_bins, 1.0, -np.inf)\n    else:\n        scaled_priorities = np.where(valid_bins, (priorities - min_priority) / priority_range, -np.inf)\n    \n    # Introduce scaled randomness for exploration relative to priority range\n    noise = np.random.uniform(0, alpha, size=len(priorities))\n    priorities = scaled_priorities + noise\n    \n    # Ensure that invalid bins have the lowest priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements an improved priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The priorities and noise are normalized to a common range and the exploration is controlled by a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        exploration_param: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    min_priority = np.min(valid_priorities)\n    max_priority = np.max(valid_priorities)\n    priorities[valid_bins] = (valid_priorities - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable exploration parameter\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise in [0,1] range\n    \n    # Combine priorities and noise with exploration parameter\n    priorities = (1 - exploration_param) * priorities + exploration_param * noise\n    \n    # Ensure invalid bins have the lowest priority\n    priorities[~valid_bins] = 0\n    \n    return priorities\n\n[Reflection]\nNormalize priorities and noise to a common range and control exploration with a tunable parameter for better performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}