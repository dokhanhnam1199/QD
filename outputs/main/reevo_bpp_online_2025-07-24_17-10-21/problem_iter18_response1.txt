```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function focusing on meaningful score differences, 
    scaled noise, and prioritization based on post-addition remaining capacity for online Bin Packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)
    
    # Scale noise relative to the range of priorities for valid bins
    valid_priorities = priorities[valid_bins]
    if len(valid_priorities) > 0:
        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)
        noise_scale = (max_priority - min_priority) * 0.01  # 1% of the priority range
    else:
        noise_scale = 0
    
    # Introduce controlled randomness
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, noise_scale, size=len(priorities))
    priorities += noise * valid_bins  # Only add noise to valid bins
    
    return priorities
```
