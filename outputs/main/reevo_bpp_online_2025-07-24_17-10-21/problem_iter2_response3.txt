```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins = remaining_after_add >= 0
    
    # For bins with enough capacity, priority is a balance between minimizing remaining capacity and not being too full
    # For bins without enough capacity, priority is negatively large
    priorities = np.where(valid_bins, (bins_remain_cap - remaining_after_add) / bin_capacity - remaining_after_add / bin_capacity, -1e6)
    
    # Normalize priorities for valid bins to be within [0,1] range
    priorities_valid = priorities[valid_bins]
    min_priority = np.min(priorities_valid) if len(priorities_valid) > 0 else 0
    max_priority = np.max(priorities_valid) if len(priorities_valid) > 0 else 1
    
    if max_priority != min_priority:
        priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority)
    else:
        priorities[valid_bins] = 1
    
    return priorities
```
