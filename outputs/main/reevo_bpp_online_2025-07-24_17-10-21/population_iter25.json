[
  {
    "stdout_filepath": "problem_iter24_response0.txt_stdout.txt",
    "code_path": "problem_iter24_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The function normalizes priorities and noise to a common range, scales noise relative to priorities, and controls exploration-exploitation trade-off using a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Tunable parameter to control the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable parameter alpha\n    noise = np.random.uniform(0, 1, size=len(priorities))  \n    noise = np.where(valid_bins, noise, 0)  \n    \n    # Scale noise relative to priorities using alpha and ensure it's in the same range\n    priorities = priorities + alpha * (noise - priorities.mean()) / (noise.std() + 1e-9) * priorities.std()\n    priorities = np.clip(priorities, 0, 1)  # Ensure priorities stay within valid range\n    \n    # Ensure invalid bins have the lowest priority\n    priorities = np.where(valid_bins, priorities, 0)\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.078579976067022,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response1.txt_stdout.txt",
    "code_path": "problem_iter24_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least relative remaining capacity after addition\n    relative_remaining = np.where(valid_bins, remaining_after_addition / (bins_remain_cap + 1e-9), np.inf)\n    priorities = -relative_remaining\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    if len(valid_priorities) > 0:\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=len(priorities))\n    priorities = np.where(valid_bins, priorities + noise, -np.inf)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.008775428799367,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_param: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        exploration_param: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    if len(valid_priorities) > 0:\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        priority_range = max_priority - min_priority\n        if priority_range > 0:\n            priorities[valid_bins] = (valid_priorities - min_priority) / priority_range\n        else:\n            priorities[valid_bins] = 1.0\n    \n    # Introduce controlled randomness with tunable exploration parameter\n    noise = np.random.uniform(0, 1, size=len(priorities))\n    \n    # Combine priorities and noise with exploration parameter\n    priorities = np.where(valid_bins, (1 - exploration_param) * priorities + exploration_param * noise, -np.inf)\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.248105305145606,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The function normalizes priorities and noise to a common range, scales noise relative to priorities, and controls exploration-exploitation trade-off using a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Tunable parameter to control the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    priorities_valid = priorities[valid_bins]\n    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)\n    priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable parameter alpha\n    noise = np.random.uniform(0, 1, size=len(priorities))  \n    noise = np.where(valid_bins, noise, 0)  # Zero noise for invalid bins\n    \n    # Normalize noise to the same range as priorities for valid bins\n    noise_valid = noise[valid_bins]\n    min_noise, max_noise = np.min(noise_valid), np.max(noise_valid)\n    noise[valid_bins] = (noise_valid - min_noise) / (max_noise - min_noise + 1e-9)\n    \n    # Scale noise relative to priorities using alpha\n    priorities = (1 - alpha) * priorities + alpha * noise\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.2181890706023095,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response4.txt_stdout.txt",
    "code_path": "problem_iter24_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that prioritizes bins with just enough capacity to hold the item \n    and introduces tunable randomness relative to valid bin priorities for better exploration-exploitation balance.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration. Defaults to 0.1.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities of valid bins to [0, 1] range for better scaling of noise\n    priorities_valid = priorities[valid_bins]\n    min_priority_valid = np.min(priorities_valid)\n    max_priority_valid = np.max(priorities_valid)\n    priority_range = max_priority_valid - min_priority_valid\n    if priority_range > 0:\n        normalized_priorities_valid = (priorities_valid - min_priority_valid) / priority_range\n    else:\n        normalized_priorities_valid = np.ones_like(priorities_valid)\n    \n    # Introduce scaled randomness for exploration directly to valid bins\n    noise = np.random.uniform(0, alpha, size=np.sum(valid_bins))  \n    priorities[valid_bins] = normalized_priorities_valid + noise\n    \n    # Ensure that invalid bins have the lowest priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.208216992421225,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response5.txt_stdout.txt",
    "code_path": "problem_iter24_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled and normalized randomness for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    priorities_valid = priorities[valid_bins]\n    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)\n    if max_priority == min_priority:\n        priorities[valid_bins] = 1.0\n    else:\n        priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority)\n    \n    # Introduce controlled and normalized randomness\n    noise = np.random.uniform(0, 1, size=len(priorities))  \n    noise = np.where(valid_bins, noise, 0)  # Zero noise for invalid bins\n    \n    # Combine priorities and noise\n    priorities = (1 - alpha) * priorities + alpha * noise\n    \n    # Ensure that invalid bins have the lowest priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities",
    "response_id": 5,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\nTypeError: priority_v2() missing 1 required positional argument: 'alpha'\n16\n2\n122.9848878378053\n81.93539377112661\n188\n"
  },
  {
    "stdout_filepath": "problem_iter24_response6.txt_stdout.txt",
    "code_path": "problem_iter24_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that directly normalizes priorities and balances \n    exploration-exploitation trade-offs with a tunable parameter (`alpha`).\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Directly normalize priorities for valid bins\n    valid_priorities = priorities[valid_bins]\n    if len(valid_priorities) > 0:\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        if max_priority != min_priority:\n            priorities[valid_bins] = (valid_priorities - min_priority) / (max_priority - min_priority)\n        else:\n            priorities[valid_bins] = 1.0\n    \n    # Introduce controlled randomness and balance exploration-exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))\n    priorities = np.where(valid_bins, (1 - alpha) * priorities + alpha * noise, -np.inf)\n    \n    return priorities",
    "response_id": 6,
    "obj": 4.238133226964499,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response7.txt_stdout.txt",
    "code_path": "problem_iter24_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The function normalizes priorities and noise to a common range and controls exploration-exploitation trade-off using a tunable parameter.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Tunable parameter to control the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priority_range = max_priority - min_priority\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (priority_range + 1e-9)\n    \n    # Introduce controlled randomness with tunable parameter alpha\n    noise = np.random.uniform(0, 1, size=len(priorities))\n    noise = np.where(valid_bins, noise, 0)  # Only consider noise for valid bins\n    \n    # Control exploration-exploitation trade-off using alpha\n    priorities = (1 - alpha) * priorities + alpha * noise\n    \n    # Ensure invalid bins have lowest priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities",
    "response_id": 7,
    "obj": 4.307937774232155,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response8.txt_stdout.txt",
    "code_path": "problem_iter24_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Introduce controlled randomness directly to valid bins\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=len(priorities))  \n    priorities += noise * valid_bins  \n    \n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response9.txt_stdout.txt",
    "code_path": "problem_iter24_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that prioritizes bins with just enough capacity to hold the item \n    and introduces tunable randomness relative to valid bin priorities for better exploration-exploitation balance.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration. Defaults to 0.1.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities within valid bins\n    priorities_valid = priorities[valid_bins]\n    min_priority_valid = np.min(priorities_valid)\n    max_priority_valid = np.max(priorities_valid)\n    priority_range = max_priority_valid - min_priority_valid\n    if priority_range > 0:\n        priorities[valid_bins] = (priorities_valid - min_priority_valid) / priority_range\n    else:\n        priorities[valid_bins] = np.ones_like(priorities_valid)\n    \n    # Introduce controlled randomness scaled by valid bin indicator\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=len(priorities))  \n    priorities += noise * valid_bins.astype(float)  # Only add noise to valid bins\n    \n    return priorities",
    "response_id": 9,
    "obj": 4.2580773833266905,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 122.9848878378053,
    "mi": 81.93539377112661,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response0.txt_stdout.txt",
    "code_path": "problem_iter25_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness relative to priorities\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Noise in [0, 1] range\n    priorities = np.where(valid_bins, priorities + noise_scale * noise * priorities, -np.inf)\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 162.84823041805248,
    "mi": 73.23133034339111,
    "token_count": 186.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response1.txt_stdout.txt",
    "code_path": "problem_iter25_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise relative to priorities.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness relative to priorities\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Noise in [0, 1] range\n    priorities[valid_bins] += noise_scale * noise[valid_bins]  # Scale noise relative to priorities and add to valid bins\n    \n    # Ensure priorities are within [0, 1] after adding noise\n    priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.11846828879138,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 162.84823041805248,
    "mi": 73.23133034339111,
    "token_count": 186.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response2.txt_stdout.txt",
    "code_path": "problem_iter25_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Noise in [0, 1] range\n    priorities = np.where(valid_bins, priorities + noise_scale * noise, -np.inf)  # Scale noise and add to valid bins\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.008775428799367,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 162.84823041805248,
    "mi": 73.23133034339111,
    "token_count": 186.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response3.txt_stdout.txt",
    "code_path": "problem_iter25_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness relative to priorities\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Noise for exploration\n    priorities = np.where(valid_bins, priorities + noise_scale * noise * priorities, -np.inf)\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 162.84823041805248,
    "mi": 73.23133034339111,
    "token_count": 186.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response4.txt_stdout.txt",
    "code_path": "problem_iter25_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise in [0,1] range\n    noise = noise_scale * noise  # Scale noise relative to priorities\n    priorities = np.where(valid_bins, priorities + noise, -np.inf)  # Directly add scaled noise to valid bins\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.008775428799367,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 162.84823041805248,
    "mi": 73.23133034339111,
    "token_count": 186.0,
    "exec_success": true
  }
]