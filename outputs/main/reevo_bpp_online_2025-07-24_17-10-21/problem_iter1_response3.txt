```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_capacities >= 0, remaining_capacities, -1e9)
    
    # To avoid selecting the bin with the least remaining capacity when multiple bins have enough capacity,
    # we add a small random noise to the priorities
    priorities += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
