```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_after_addition >= 0, 
                          # For bins that can fit the item, prioritize those with the least remaining capacity
                          bins_remain_cap - remaining_after_addition, 
                          # For bins that cannot fit the item, assign a very low priority
                          -np.inf)
    
    # Normalize the priorities to ensure they are on the same scale
    max_priority = np.max(priorities)
    if max_priority == -np.inf:  # If all bins are too small, consider opening a new bin
        priorities = np.where(bins_remain_cap == bin_capacity, 1.0, -np.inf)
    
    return priorities
```
