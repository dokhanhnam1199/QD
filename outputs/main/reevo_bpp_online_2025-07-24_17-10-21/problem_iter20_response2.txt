```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function rewards bins that are closest to being full and can fit the item, 
    and adds controlled noise relative to the problem scale for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the scale of random noise relative to the item size.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # Reward bins that are closest to being full and can fit the item
    priorities = np.where(valid_bins, bins_remain_cap - item, -np.inf)
    
    # Introduce controlled randomness relative to the item size for exploration
    noise = np.random.uniform(-alpha * item, alpha * item, size=len(bins_remain_cap))
    noise[~valid_bins] = 0  # No noise for bins that cannot hold the item
    
    priorities += noise
    
    return priorities
```
