{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Normalize the score to be between 0 and 1 for valid bins.\n\n    Args:\n        score: Score to be normalized.\n        valid_bins: Boolean array indicating valid bins.\n\n    Return:\n        Normalized score.\n    \"\"\"\n    if np.any(valid_bins):\n        max_score = np.max(score[valid_bins])\n        min_score = np.min(score[valid_bins])\n        score[valid_bins] = (score[valid_bins] - min_score) / (max_score - min_score + 1e-9)\n    else:\n        score[:] = 0  # If no valid bins, set all scores to 0\n    return score\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function that prioritizes bins \n    that can accommodate the item with the least remaining capacity after addition, \n    and introduces a small amount of exploration noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate validity of bins\n    valid_bins = bins_remain_cap >= item\n    \n    # Prioritize bins that can accommodate the item with the least remaining capacity after addition\n    priorities = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    priorities = _normalize_score(priorities, valid_bins)\n    \n    # Introduce a small amount of exploration noise\n    noise = np.random.uniform(0, 1e-2, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    priorities += noise\n    \n    # Ensure bins that cannot hold the item have the lowest priority\n    priorities[~valid_bins] = -np.inf\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function focusing on fit and controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Introduce controlled randomness directly without normalization\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 0.1, size=len(priorities))  # Scaled noise for exploration\n    priorities += noise * valid_bins  # Only add noise to valid bins\n    \n    return priorities\n\n[Reflection]\nAvoid normalization when possible, and directly scale exploration noise to maintain priority order and reduce computational overhead.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}