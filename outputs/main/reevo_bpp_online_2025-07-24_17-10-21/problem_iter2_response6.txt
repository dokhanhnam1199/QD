```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.5, beta: float = 2.0) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: Parameter controlling the trade-off between remaining capacity and "fit".
        beta: Parameter controlling the non-linearity of the scoring function.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item
    
    # Initialize priorities with negative infinity for bins that cannot accommodate the item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Calculate the "fit" score for valid bins, balancing between remaining capacity and item size
    fit_score = np.exp(-((bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]) ** beta)
    
    # Calculate priorities for valid bins based on a combination of remaining capacity and "fit" score
    priorities[valid_bins] = alpha * (bins_remain_cap[valid_bins] - item) + (1 - alpha) * fit_score
    
    return priorities
```
