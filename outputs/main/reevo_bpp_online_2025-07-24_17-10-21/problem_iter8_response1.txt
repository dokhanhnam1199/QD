```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item and balances between exploitation and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, prioritize those with the least remaining capacity after packing the item
    fit_score = np.where(valid_bins, -bins_remain_cap, -np.inf)
    
    # Add a small random noise to balance exploration and exploitation
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise
    
    # Calculate the final priority score as a weighted sum of "fit" score and random noise
    priorities = alpha * fit_score + (1 - alpha) * noise
    
    return priorities
```
