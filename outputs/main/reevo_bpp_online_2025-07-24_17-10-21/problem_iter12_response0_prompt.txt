{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    breaks ties by favoring bins with the least remaining capacity, and adds a small random noise for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and \"least remaining capacity\" score.\n        beta: Parameter controlling the trade-off between exploitation and exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n\n    # For valid bins, prioritize those with the least remaining capacity after adding the item\n    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n\n    # Calculate the \"least remaining capacity\" score\n    remain_score = np.where(valid_bins, np.max(bins_remain_cap) - bins_remain_cap, 0)\n\n    # Normalize scores to be between 0 and 1 for valid bins\n    if np.any(valid_bins):\n        max_fit_score = np.max(fit_score[valid_bins])\n        min_fit_score = np.min(fit_score[valid_bins])\n        fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)\n\n        max_remain_score = np.max(remain_score[valid_bins])\n        min_remain_score = np.min(remain_score[valid_bins])\n        remain_score[valid_bins] = (remain_score[valid_bins] - min_remain_score) / (max_remain_score - min_remain_score + 1e-9)\n    else:\n        return fit_score  # Return -inf for all bins if none can hold the item\n\n    # Calculate the exploitation score as a weighted sum of \"fit\" score and \"least remaining capacity\" score\n    exploitation_score = alpha * fit_score + (1 - alpha) * remain_score\n\n    # Add a small random noise to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n\n    # Normalize the noise to be between 0 and 1 for valid bins\n    if np.any(valid_bins):\n        max_noise = np.max(noise[valid_bins])\n        min_noise = np.min(noise[valid_bins])\n        noise[valid_bins] = (noise[valid_bins] - min_noise) / (max_noise - min_noise + 1e-9)\n\n    # Calculate the final priority score as a weighted sum of exploitation score and random noise\n    priorities = (1 - beta) * exploitation_score + beta * noise\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function prioritizes bins that can accommodate the item with the least remaining capacity.\n    It balances between exploitation and exploration by combining a fit score with random noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Assign high priority to bins that can hold the item and have the least remaining capacity\n    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priorities for valid bins to be between 0 and 1\n    valid_bins = priorities != -np.inf\n    if np.any(valid_bins):\n        max_priority = np.max(priorities[valid_bins])\n        min_priority = np.min(priorities[valid_bins])\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10)\n    else:\n        return priorities  # If no bin can hold the item, return priorities as is\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  \n    noise = np.random.uniform(0, 1e-5, size=len(priorities))  # Reduced noise scale for more exploitation\n    noise[~valid_bins] = 0  \n    \n    # Combine the normalized priorities and noise\n    priorities = alpha * priorities + (1 - alpha) * noise\n    \n    return priorities\n\n[Reflection]\nSimplify the priority function, reduce unnecessary computations, and adjust noise scale to balance exploitation and exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}