```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that directly uses the normalized 
    remaining capacity as priority scores for valid bins and adds a small random 
    noise for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Weight for the normalized remaining capacity.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, directly use the normalized remaining capacity as priority scores
    priorities = np.where(valid_bins, 1 - bins_remain_cap / (bins_remain_cap.max() + 1e-9), -np.inf)
    
    # Add a small random noise for exploration
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise
    
    # Calculate the final priority score as a weighted sum of normalized remaining capacity and random noise
    priorities = alpha * priorities + (1 - alpha) * noise
    
    return priorities
```
