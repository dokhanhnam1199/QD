```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity for the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and randomness.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    
    # Prioritize bins with the least remaining capacity after addition
    priorities = -priorities
    
    # Add a small random noise for exploration-exploitation balance
    priorities += np.random.uniform(0, 1e-6, size=len(priorities))
    
    return priorities
```
