{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot accommodate the item\n    priorities = np.where(remaining_capacities >= 0, remaining_capacities, -1e9)\n    \n    # To avoid selecting the bin with the least remaining capacity when multiple bins have enough capacity,\n    # we add a small random noise to the priorities\n    priorities += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n    \n    # Mask for bins that have enough capacity for the item\n    valid_bins = remaining_after_add >= 0\n    \n    # For bins with enough capacity, priority is inversely proportional to the remaining capacity after adding the item\n    # For bins without enough capacity, priority is negatively large\n    priorities = np.where(valid_bins, -remaining_after_add, -1e6)\n    \n    # Normalize priorities for valid bins to be within a certain range to avoid extreme values\n    min_remaining = np.min(remaining_after_add[valid_bins]) if np.any(valid_bins) else 0\n    max_remaining = np.max(remaining_after_add[valid_bins]) if np.any(valid_bins) else 1\n    \n    if max_remaining != min_remaining:\n        priorities[valid_bins] = (priorities[valid_bins] - min_remaining) / (max_remaining - min_remaining)\n    else:\n        priorities[valid_bins] = 1\n    \n    return priorities\n\n[Reflection]\nNormalize priorities and use meaningful transformations to improve performance and avoid extreme values in online bin packing heuristics.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}