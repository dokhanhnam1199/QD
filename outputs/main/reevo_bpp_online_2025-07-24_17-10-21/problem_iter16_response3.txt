```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers both the fit of the item to the bin and introduces controlled randomness for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)
    
    # Introduce controlled randomness directly
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1, size=len(priorities))
    priorities = alpha * priorities + (1 - alpha) * noise * valid_bins
    
    return priorities
```
