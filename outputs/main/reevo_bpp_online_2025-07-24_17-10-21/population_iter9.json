[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity after packing the item\n    priorities = np.where(valid_bins, 1 / (bins_remain_cap - item + 1), -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * priorities + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item and balances between exploitation and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity after packing the item\n    fit_score = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * fit_score + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of randomness for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    \n    # To break ties and add some randomness for exploration, add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, alpha, size=len(priorities))\n    \n    # Convert to negative priorities so that the bin with the lowest remaining capacity after addition has the highest priority\n    priorities = -priorities\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition, \n    and balances between exploitation and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    fit_score = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    # Normalize the fit scores to be between 0 and 1 for valid bins\n    valid_bins = remaining_after_addition >= 0\n    if np.any(valid_bins):\n        max_fit_score = np.max(fit_score[valid_bins])\n        min_fit_score = np.min(fit_score[valid_bins])\n        fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)\n    else:\n        return fit_score  # Return -inf for all bins if none can hold the item\n    \n    # Add a small random noise to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * fit_score + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.238133226964499,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that directly uses the normalized \n    remaining capacity as priority scores for valid bins and adds a small random \n    noise for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Weight for the normalized remaining capacity.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, directly use the normalized remaining capacity as priority scores\n    priorities = np.where(valid_bins, 1 - bins_remain_cap / (bins_remain_cap.max() + 1e-9), -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    \n    # Calculate the final priority score as a weighted sum of normalized remaining capacity and random noise\n    priorities = alpha * priorities + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity for the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    \n    # Prioritize bins with the least remaining capacity after addition\n    priorities = -priorities\n    \n    # Add a small random noise for exploration-exploitation balance\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    priorities += alpha * np.random.uniform(-1, 1, size=len(priorities)) / len(priorities)\n    return priorities",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function that considers the remaining capacity of the bins.\n    It assigns higher priority to bins that have just enough capacity to hold the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the level of random noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(bins_remain_cap >= item, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, alpha, size=len(priorities))\n    \n    return priorities",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.5) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" and \"least remaining capacity\".\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n\n    # For valid bins, prioritize those with the least remaining capacity after adding the item\n    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n\n    # Calculate the \"least remaining capacity\" score\n    remain_score = np.where(valid_bins, bins_remain_cap.max() - bins_remain_cap, 0)\n\n    # Normalize scores to be between 0 and 1 for valid bins\n    max_fit_score = np.max(fit_score[valid_bins])\n    min_fit_score = np.min(fit_score[valid_bins])\n    fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)\n\n    max_remain_score = np.max(remain_score[valid_bins])\n    min_remain_score = np.min(remain_score[valid_bins])\n    remain_score[valid_bins] = (remain_score[valid_bins] - min_remain_score) / (max_remain_score - min_remain_score + 1e-9)\n\n    # Calculate the final priority score as a weighted sum of \"fit\" score and \"least remaining capacity\" score\n    priorities = alpha * fit_score + (1 - alpha) * remain_score\n\n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a simplified priority function that assigns higher priority to bins \n    that have just enough capacity to hold the item and balances between exploitation and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores for valid bins\n    valid_bins = priorities != -np.inf\n    if np.any(valid_bins):\n        max_priority = np.max(priorities[valid_bins])\n        min_priority = np.min(priorities[valid_bins])\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10)\n    \n    # Add a small random noise to the priority scores for exploration\n    np.random.seed(0)  \n    noise = np.random.uniform(0, 1e-3, size=len(priorities))\n    noise[~valid_bins] = 0  \n    \n    # Combine the normalized priorities and noise\n    priorities = alpha * priorities + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 199.1772208002305,
    "mi": 80.45838374461117,
    "token_count": 190.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response0.txt_stdout.txt",
    "code_path": "problem_iter9_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function focusing on remaining capacity.\n    It assigns higher priority to bins with the least remaining capacity that can still hold the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 70.39891774450827,
    "token_count": 89.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response1.txt_stdout.txt",
    "code_path": "problem_iter9_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function focusing on remaining capacity.\n    It assigns higher priority to bins that have the least remaining capacity but can still hold the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 70.39891774450827,
    "token_count": 89.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response2.txt_stdout.txt",
    "code_path": "problem_iter9_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function that focuses on the remaining capacity of the bins.\n    It assigns higher priority to bins that have the least remaining capacity after holding the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 70.39891774450827,
    "token_count": 89.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response3.txt_stdout.txt",
    "code_path": "problem_iter9_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function focusing on remaining capacity.\n    It assigns higher priority to bins with the least remaining capacity that can still hold the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 70.39891774450827,
    "token_count": 89.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response4.txt_stdout.txt",
    "code_path": "problem_iter9_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function simplifies the priority calculation by focusing on the remaining capacity.\n    It assigns higher priority to bins with the least remaining capacity that can still hold the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, -bins_remain_cap, -np.inf)\n    \n    # Add a small random noise for exploration\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 30.0,
    "mi": 70.39891774450827,
    "token_count": 89.0,
    "exec_success": true
  }
]