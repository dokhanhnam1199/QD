```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 1e-6) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item and have the least remaining capacity after addition.
    It introduces a minimal random noise for better exploration-exploitation balance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the level of random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Assign lowest priority to bins that cannot hold the item
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, np.inf)
    
    # Introduce a small random noise for exploration-exploitation balance
    noise = np.random.uniform(0, alpha, size=len(bins_remain_cap))
    noise[remaining_after_addition == np.inf] = 0  # Ensure bins that cannot hold the item have zero noise, but this line is redundant because remaining_after_addition will never be np.inf
    
    # Calculate the final priority score
    priorities = priorities + noise
    
    return priorities
```
