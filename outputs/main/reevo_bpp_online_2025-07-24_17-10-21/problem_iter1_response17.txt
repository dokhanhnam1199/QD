```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, we check if the item can fit into each bin
    mask = bins_remain_cap >= item
    
    # For bins that can fit the item, we prefer the bin with the least remaining capacity
    priorities = np.where(mask, bins_remain_cap.max() - bins_remain_cap, -np.inf)
    
    # To avoid division by zero, we add a small value to the denominator
    eps = 1e-8
    ratio_priorities = item / (bins_remain_cap + eps)
    
    # We combine the two priorities: the remaining capacity and the ratio of item size to remaining capacity
    priorities = np.where(mask, priorities + ratio_priorities, priorities)
    
    return priorities
```
