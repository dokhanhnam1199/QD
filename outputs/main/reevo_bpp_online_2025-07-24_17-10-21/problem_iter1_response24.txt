```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot accommodate the item should have the lowest priority
    priorities = np.where(remaining_after_addition >= 0, 
                           1 / (1 + np.abs(remaining_after_addition)), 
                           -np.inf)
    
    # To avoid division by zero and to make the priority of full bins the lowest
    priorities = np.where(bins_remain_cap == 0, -np.inf, priorities)
    
    return priorities
```
