```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # For bins that have enough capacity, prioritize those with less remaining capacity
    enough_capacity = bins_remain_cap >= item
    priorities_enough = -remaining_after_addition
    
    # For bins without enough capacity, assign a very low priority
    priorities_not_enough = np.full_like(bins_remain_cap, -1e9)
    priorities_not_enough[enough_capacity] = priorities_enough[enough_capacity]
    
    # Add a small random noise to break ties
    np.random.seed(0)  # For reproducibility
    priorities_not_enough += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priorities_not_enough
```
