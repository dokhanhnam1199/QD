{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item and normalizes the priority scores.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the \"fit\" score for each bin\n    fit_score = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-12), 0)\n    \n    # Add a small random noise to the \"fit\" score to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * fit_score + (1 - alpha) * noise\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Normalize scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # To make the priority scores more distinguishable and allow for exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities[valid_bins] += np.random.uniform(0, 1e-6, size=np.sum(valid_bins))\n    \n    # Favor bins with the least remaining capacity in case of a tie\n    tie_breaker = np.where(valid_bins, -bins_remain_cap, 0)\n    tie_breaker = (tie_breaker - np.min(tie_breaker)) / (np.max(tie_breaker) - np.min(tie_breaker) + 1e-9) * 1e-6\n    priorities += tie_breaker\n    \n    return priorities\n\n[Reflection]\nTo design better heuristics, incorporate problem-specific insights, such as favoring bins with the least remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}