```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a simplified priority function that considers the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        epsilon: A small value added for numerical stability.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Assign priority based on remaining capacity after addition, with a very low priority for bins that cannot hold the item
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -1e10)
    
    # Add a small random noise for exploration
    priorities += np.random.uniform(0, epsilon, size=len(priorities))
    
    return priorities
```
