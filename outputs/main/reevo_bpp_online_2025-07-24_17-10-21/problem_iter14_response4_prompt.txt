{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function decomposes the priority into multiple scores: fit score, remaining capacity score, \n    and random noise for exploration. It normalizes these scores and combines them using weighted sums.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and \"least remaining capacity\" score.\n        beta: Parameter controlling the trade-off between exploitation and exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate validity of bins\n    valid_bins = bins_remain_cap >= item\n\n    # Fit score: prioritize bins that can accommodate the item with the least remaining capacity after addition\n    fit_score = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    fit_score = _normalize_score(fit_score, valid_bins)\n\n    # Remaining capacity score: prioritize bins with the least remaining capacity among valid bins\n    remain_score = np.where(valid_bins, -bins_remain_cap, 0)\n    remain_score = _normalize_score(remain_score, valid_bins)\n\n    # Exploitation score: weighted sum of fit score and remaining capacity score\n    exploitation_score = alpha * fit_score + (1 - alpha) * remain_score\n\n    # Exploration noise: random noise for valid bins\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    noise = _normalize_score(noise, valid_bins)\n\n    # Final priority score: weighted sum of exploitation score and exploration noise\n    priorities = (1 - beta) * exploitation_score + beta * noise\n\n    return priorities\n\n\n    \"\"\"\n    Normalize the score to be between 0 and 1 for valid bins.\n\n    Args:\n        score: Score to be normalized.\n        valid_bins: Boolean array indicating valid bins.\n\n    Return:\n        Normalized score.\n    \"\"\"\n    if np.any(valid_bins):\n        max_score = np.max(score[valid_bins])\n        min_score = np.min(score[valid_bins])\n        score[valid_bins] = (score[valid_bins] - min_score) / (max_score - min_score + 1e-9)\n    else:\n        score[:] = 0  # If no valid bins, set all scores to 0\n    return score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item and introduces controlled randomness.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, 1 - remaining_after_addition / (bins_remain_cap + 1e-9), 0)\n    \n    # Normalize the priority scores to be within [0, 1] range for valid bins\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 1\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness by adding a scaled noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1e-2, size=len(priorities))  # Scaled noise\n    priorities += noise\n    \n    # Ensure that bins that cannot hold the item still have the lowest priority\n    priorities[~valid_bins] = -np.inf\n    \n    return priorities\n\n[Reflection]\nSimplify priority functions, reduce parameters, and scale exploration noise to improve online bin packing heuristics effectively.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}