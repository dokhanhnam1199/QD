```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.5) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item, 
    and breaks ties by favoring bins with the least remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" and "least remaining capacity".

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item

    # For valid bins, prioritize those with the least remaining capacity after adding the item
    fit_score = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)

    # Calculate the "least remaining capacity" score
    remain_score = np.where(valid_bins, bins_remain_cap.max() - bins_remain_cap, 0)

    # Normalize scores to be between 0 and 1 for valid bins
    max_fit_score = np.max(fit_score[valid_bins])
    min_fit_score = np.min(fit_score[valid_bins])
    fit_score[valid_bins] = (fit_score[valid_bins] - min_fit_score) / (max_fit_score - min_fit_score + 1e-9)

    max_remain_score = np.max(remain_score[valid_bins])
    min_remain_score = np.min(remain_score[valid_bins])
    remain_score[valid_bins] = (remain_score[valid_bins] - min_remain_score) / (max_remain_score - min_remain_score + 1e-9)

    # Calculate the final priority score as a weighted sum of "fit" score and "least remaining capacity" score
    priorities = alpha * fit_score + (1 - alpha) * remain_score

    return priorities
```
