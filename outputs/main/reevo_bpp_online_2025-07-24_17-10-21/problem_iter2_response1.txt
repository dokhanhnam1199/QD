```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The capacity of the bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item get a higher priority
    can_fit = remaining_after_addition >= 0
    
    # Priority is a combination of how well the item fits in the bin and whether it can fit
    priorities = np.where(can_fit, 
                          # Prioritize bins that are filled to a higher level after adding the item
                          (bins_remain_cap - remaining_after_addition) / bin_capacity + 
                          # Prioritize bins with less remaining capacity among those that can fit the item
                          (1 - remaining_after_addition / bins_remain_cap), 
                          -np.inf)
    
    # Normalize the priorities to avoid overflow and ensure that the highest priority is 0
    max_priority = np.max(priorities)
    if max_priority == -np.inf:  # No bin can fit the item
        priorities = np.zeros_like(priorities)
    else:
        priorities = priorities - max_priority
    
    return priorities
```
