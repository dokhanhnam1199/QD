```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements an improved priority function that considers both 
    the remaining capacity of the bins and the size of the item. It assigns 
    higher priority to bins that have just enough capacity to hold the item, 
    normalizes the priority scores, and adds a noise to balance exploration 
    and exploitation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, 
                          # Use a non-linear function to emphasize the difference between bins with small remaining capacity
                          np.exp(-remaining_after_addition / (bins_remain_cap + 1e-12)), 
                          0)
    
    # Normalize the priority scores to be within [0, 1]
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)
    priorities = (priorities - min_priority) / (max_priority - min_priority + 1e-12)
    
    # To balance exploration and exploitation, add a small random noise to the priority scores
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1e-6, size=len(priorities))
    priorities = priorities * 0.99 + noise * 0.01  # Weighted sum to control the noise level
    
    # Ensure the priorities are within [0, 1] after adding noise
    priorities = np.clip(priorities, 0, 1)
    
    return priorities
```
