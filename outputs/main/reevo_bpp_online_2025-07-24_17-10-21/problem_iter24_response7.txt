```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.
    The function normalizes priorities and noise to a common range and controls exploration-exploitation trade-off using a tunable parameter.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Tunable parameter to control the exploration-exploitation trade-off.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)
    
    # Normalize priorities to [0, 1] range
    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0
    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0
    priority_range = max_priority - min_priority
    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (priority_range + 1e-9)
    
    # Introduce controlled randomness with tunable parameter alpha
    noise = np.random.uniform(0, 1, size=len(priorities))
    noise = np.where(valid_bins, noise, 0)  # Only consider noise for valid bins
    
    # Control exploration-exploitation trade-off using alpha
    priorities = (1 - alpha) * priorities + alpha * noise
    
    # Ensure invalid bins have lowest priority
    priorities = np.where(valid_bins, priorities, -np.inf)
    
    return priorities
```
