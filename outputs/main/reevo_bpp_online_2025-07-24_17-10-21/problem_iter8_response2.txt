```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 1e-6) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that considers the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the level of randomness for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    
    # To break ties and add some randomness for exploration, add a small random noise
    np.random.seed(0)  # For reproducibility
    priorities += np.random.uniform(0, alpha, size=len(priorities))
    
    # Convert to negative priorities so that the bin with the lowest remaining capacity after addition has the highest priority
    priorities = -priorities
    
    return priorities
```
