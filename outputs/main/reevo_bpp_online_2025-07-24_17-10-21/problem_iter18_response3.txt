```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_max_cap: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements an improved priority function that considers both the remaining capacity of the bins and the size of the item.
    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.
    The priorities are normalized and scored relative to the best and worst possible bins.
    Furthermore, it adjusts the priorities based on the fullness of the bins to encourage packing items tightly.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_max_cap: Maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition, 
    # adjusted by how full the bin is before adding the item
    bin_fullness = 1 - (bins_remain_cap / bin_max_cap)  # Measure of how full the bin is
    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9) + bin_fullness, -np.inf)
    
    # Normalize priorities to [0, 1] range for valid bins using relative scoring
    min_priority = np.min(priorities[valid_bins])
    max_priority = np.max(priorities[valid_bins])
    priorities_valid = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)
    priorities[valid_bins] = priorities_valid
    
    # Apply a sigmoid transformation to enhance discriminability among valid bins
    priorities[valid_bins] = 1 / (1 + np.exp(-priorities[valid_bins] / (np.max(priorities[valid_bins]) + 1e-9)))
    priorities[valid_bins] = priorities[valid_bins] / (np.sum(priorities[valid_bins]) + 1e-9)
    
    # Introduce controlled randomness
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 0.01, size=len(priorities))  # Reduced noise for less exploration
    priorities += noise * valid_bins  # Only add noise to valid bins
    
    # Renormalize after adding noise
    priorities[valid_bins] = priorities[valid_bins] / (np.sum(priorities[valid_bins]) + 1e-9)
    
    return priorities
```
