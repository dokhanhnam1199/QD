```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements an improved priority function that considers both 
    the remaining capacity of the bins and the size of the item, with simplicity, 
    normalized priority scores, and added noise for exploration.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, prioritize those with the least remaining capacity
    priorities = np.where(valid_bins, 1 - (bins_remain_cap / (item + bins_remain_cap)), -np.inf)
    
    # Add a small random noise for exploration
    np.random.seed(0)  # For reproducibility
    priorities += np.random.uniform(0, 1e-6, size=len(priorities))
    
    return priorities
```
