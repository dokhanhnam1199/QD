{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition,\n    and balances between exploitation and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores for valid bins using a more numerically stable method\n    valid_bins = priorities != -np.inf\n    if np.any(valid_bins):\n        priorities[valid_bins] = 1 - (priorities[valid_bins] - np.min(priorities[valid_bins])) / (np.max(priorities[valid_bins]) - np.min(priorities[valid_bins]) + 1e-10)\n        priorities[~valid_bins] = 0\n    \n    # Add a small random noise to the priority scores for exploration, scaled appropriately\n    noise = np.random.uniform(0, 1e-5, size=len(priorities))  # Reduced noise scale for more exploitation\n    noise[~valid_bins] = 0  \n    \n    # Combine the normalized priorities and noise, with alpha controlling the trade-off\n    priorities = alpha * priorities + (1 - alpha) * noise\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function that directly uses \n    the normalized remaining capacity as priority scores for valid bins and \n    adds a small random noise for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Weight for the normalized remaining capacity.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    priorities = np.where(valid_bins, bins_remain_cap, np.inf)\n    min_cap = np.min(priorities[valid_bins]) if np.any(valid_bins) else np.inf\n    max_cap = np.max(priorities[valid_bins]) if np.any(valid_bins) else 1\n    priorities = np.where(valid_bins, (max_cap - priorities) / (max_cap - min_cap + 1e-9), -np.inf)\n    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  \n    priorities = alpha * priorities + (1 - alpha) * noise\n    return priorities\n\n[Reflection]\nSimplify priority functions, directly use meaningful values, and adjust noise scales for better exploitation-exploration trade-offs.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}