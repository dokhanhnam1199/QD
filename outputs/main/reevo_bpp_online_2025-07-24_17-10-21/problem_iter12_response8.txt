```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 1e-6) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition,
    and introduces a controlled randomness for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the scale of random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that can accommodate the item get priority based on how tightly they can fit the item
    priorities = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)
    
    # Introduce controlled randomness for exploration
    noise = np.random.uniform(0, alpha, size=len(bins_remain_cap))
    noise[bins_remain_cap < item] = 0  # No noise for bins that cannot hold the item
    
    priorities += noise
    
    return priorities
```
