```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function that assigns higher priority to bins 
    that have just enough capacity to hold the item, balancing between "fit" score and randomness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and randomness.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    remaining_after_addition = np.where(valid_bins, bins_remain_cap - item, np.inf)
    priorities = -remaining_after_addition
    
    # Add a small random noise to the priority scores for exploration
    np.random.seed(0)  
    noise = np.random.uniform(0, 1, size=len(priorities))
    noise[~valid_bins] = 0  
    
    # Combine the priorities and noise
    priorities = alpha * priorities + (1 - alpha) * noise
    
    # Ensure bins that cannot hold the item have the lowest priority
    priorities[~valid_bins] = -np.inf
    
    return priorities
```
