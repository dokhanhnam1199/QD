```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition,
    and balances between exploitation and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)
    
    # Normalize the priority scores for valid bins
    valid_bins = priorities != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priorities[valid_bins])
        min_priority = np.min(priorities[valid_bins])
        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10)
    
    # Scale the noise to be comparable with the normalized priorities
    np.random.seed(0)  
    noise = np.random.uniform(0, 1, size=len(priorities))
    noise[~valid_bins] = 0  
    
    # Adaptively adjust alpha based on the number of valid bins
    num_valid_bins = np.sum(valid_bins)
    adaptive_alpha = alpha if num_valid_bins > 10 else alpha * (num_valid_bins / 10)
    
    # Combine the normalized priorities and noise with adaptive alpha
    priorities = adaptive_alpha * priorities + (1 - adaptive_alpha) * noise
    
    return priorities
```
