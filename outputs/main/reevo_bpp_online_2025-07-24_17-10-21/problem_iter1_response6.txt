```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot accommodate the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item (First-Fit Decreasing inspiration)
    priorities = np.where(valid_bins, -np.abs(remaining_after_addition), -np.inf)
    
    # To avoid division by zero and to make the priority more nuanced, we use a combination of the remaining capacity and a "fullness" measure
    fullness_measure = bins_remain_cap / (bins_remain_cap.max() + 1e-6)  # Adding a small value to avoid division by zero
    
    # Give higher priority to bins that are more full but still can accommodate the item
    priorities = np.where(valid_bins, priorities + fullness_measure, priorities)
    
    return priorities
```
