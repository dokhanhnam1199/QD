{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function decomposes the priority into multiple scores: fit score, remaining capacity score, \n    and random noise for exploration. It normalizes these scores and combines them using weighted sums.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" score and \"least remaining capacity\" score.\n        beta: Parameter controlling the trade-off between exploitation and exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate validity of bins\n    valid_bins = bins_remain_cap >= item\n\n    # Fit score: prioritize bins that can accommodate the item with the least remaining capacity after addition\n    fit_score = np.where(valid_bins, bins_remain_cap - item, -np.inf)\n    fit_score = _normalize_score(fit_score, valid_bins)\n\n    # Remaining capacity score: prioritize bins with the least remaining capacity among valid bins\n    remain_score = np.where(valid_bins, -bins_remain_cap, 0)\n    remain_score = _normalize_score(remain_score, valid_bins)\n\n    # Exploitation score: weighted sum of fit score and remaining capacity score\n    exploitation_score = alpha * fit_score + (1 - alpha) * remain_score\n\n    # Exploration noise: random noise for valid bins\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # Ensure bins that cannot hold the item have zero noise\n    noise = _normalize_score(noise, valid_bins)\n\n    # Final priority score: weighted sum of exploitation score and exploration noise\n    priorities = (1 - beta) * exploitation_score + beta * noise\n\n    return priorities\n\n\n    \"\"\"\n    Normalize the score to be between 0 and 1 for valid bins.\n\n    Args:\n        score: Score to be normalized.\n        valid_bins: Boolean array indicating valid bins.\n\n    Return:\n        Normalized score.\n    \"\"\"\n    if np.any(valid_bins):\n        max_score = np.max(score[valid_bins])\n        min_score = np.min(score[valid_bins])\n        score[valid_bins] = (score[valid_bins] - min_score) / (max_score - min_score + 1e-9)\n    else:\n        score[:] = 0  # If no valid bins, set all scores to 0\n    return score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function prioritizes bins that can accommodate the item, have the least remaining capacity after addition,\n    and introduces a controlled randomness for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the scale of random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that can accommodate the item get priority based on how tightly they can fit the item\n    priorities = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Introduce controlled randomness for exploration\n    noise = np.random.uniform(0, alpha, size=len(bins_remain_cap))\n    noise[bins_remain_cap < item] = 0  # No noise for bins that cannot hold the item\n    \n    priorities += noise\n    \n    return priorities\n\n[Reflection]\nSimplify the scoring function and reduce parameters to improve heuristic design, focusing on key factors like fit and randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}