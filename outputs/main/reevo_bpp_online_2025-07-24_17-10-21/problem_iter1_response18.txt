```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_add = bins_remain_cap - item
    
    # For bins that have enough capacity, prioritize the ones with the least remaining capacity after adding the item
    enough_capacity = bins_remain_cap >= item
    priorities = np.where(enough_capacity, -remaining_cap_after_add, -np.inf)
    
    # Add a small random noise to break ties
    priorities += np.random.uniform(0, 1e-6, size=len(priorities))
    
    return priorities
```
