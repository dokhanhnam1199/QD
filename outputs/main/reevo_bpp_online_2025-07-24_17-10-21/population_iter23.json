[
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_param: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements an improved priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The priorities and noise are normalized to a common range and the exploration is controlled by a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        exploration_param: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    min_priority = np.min(valid_priorities)\n    max_priority = np.max(valid_priorities)\n    priorities[valid_bins] = (valid_priorities - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable exploration parameter\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise in [0,1] range\n    \n    # Combine priorities and noise with exploration parameter\n    priorities = (1 - exploration_param) * priorities + exploration_param * noise\n    \n    # Ensure invalid bins have the lowest priority\n    priorities[~valid_bins] = 0\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.078579976067022,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response1.txt_stdout.txt",
    "code_path": "problem_iter22_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with scaled exploration noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Scale priorities to avoid extreme values\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priority_range = max_priority - min_priority\n    \n    # Avoid division by zero\n    if priority_range == 0:\n        scaled_priorities = np.where(valid_bins, 1.0, -np.inf)\n    else:\n        scaled_priorities = np.where(valid_bins, (priorities - min_priority) / priority_range, -np.inf)\n    \n    # Introduce scaled randomness for exploration relative to priority range\n    noise = np.random.uniform(0, alpha, size=len(priorities))\n    priorities = scaled_priorities + noise\n    \n    # Ensure that invalid bins have the lowest priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.198244914240141,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response2.txt_stdout.txt",
    "code_path": "problem_iter22_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_param: float = 0.01) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        exploration_param: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priority_range = max_priority - min_priority\n    if priority_range > 0:\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / priority_range\n    else:\n        priorities[valid_bins] = 1.0  # When all valid bins have the same priority, set to max\n    \n    # Introduce controlled randomness relative to the priority range, ensuring it's smaller than the range\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(-exploration_param, exploration_param, size=len(priorities))  # Scaled noise for exploration\n    priorities = np.where(valid_bins, np.clip(priorities + noise, 0, 1), -np.inf)  # Only add noise to valid bins and clip to [0,1]\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response3.txt_stdout.txt",
    "code_path": "problem_iter22_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled and normalized randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    priorities_valid = priorities[valid_bins]\n    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)\n    priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled and normalized randomness\n    noise = np.random.uniform(0, 1, size=len(priorities))  \n    noise = np.where(valid_bins, noise, 0)  # Zero noise for invalid bins\n    \n    # Combine priorities and noise, then re-normalize\n    priorities = priorities + alpha * noise\n    priorities_valid = priorities[valid_bins]\n    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)\n    priorities[valid_bins] = (priorities_valid - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.188272836059035,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response4.txt_stdout.txt",
    "code_path": "problem_iter22_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce normalized randomness with the same scale as priorities\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  \n    priorities = (1 - alpha) * priorities + alpha * noise * valid_bins  \n    \n    # Ensure priorities are within [0, 1] after adding noise\n    priorities = np.clip(priorities, 0, 1)\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.078579976067022,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response5.txt_stdout.txt",
    "code_path": "problem_iter22_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    if len(valid_priorities) > 0:\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        priorities[valid_bins] = (valid_priorities - min_priority) / (max_priority - min_priority + 1e-9)\n    else:\n        priorities = np.zeros_like(priorities)\n    \n    # Introduce controlled and normalized randomness\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))\n    noise = np.where(valid_bins, noise, 0)  # Zero noise for invalid bins\n    \n    # Add noise to priorities\n    priorities = priorities * (1 - alpha) + noise * alpha\n    \n    # Re-normalize priorities to maintain the range [0, 1] after adding noise\n    valid_priorities = priorities[valid_bins]\n    if len(valid_priorities) > 0:\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        priorities[valid_bins] = (valid_priorities - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Ensure invalid bins have -inf priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities",
    "response_id": 5,
    "obj": 4.078579976067022,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response6.txt_stdout.txt",
    "code_path": "problem_iter22_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with a fixed scale\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=len(priorities))  \n    priorities += noise * valid_bins  \n    \n    return priorities",
    "response_id": 6,
    "obj": 4.008775428799367,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response7.txt_stdout.txt",
    "code_path": "problem_iter22_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function focusing on the remaining capacity after adding the item \n    and blends exploration and exploitation by mixing noise into priorities, \n    with a tunable parameter (`alpha`) to adjust the trade-off.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    if len(valid_priorities) > 0:\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled and normalized randomness\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))\n    \n    # Blend exploration and exploitation\n    priorities = np.where(valid_bins, (1 - alpha) * priorities + alpha * noise, -np.inf)\n    \n    return priorities",
    "response_id": 7,
    "obj": 4.238133226964499,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response8.txt_stdout.txt",
    "code_path": "problem_iter22_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that prioritizes bins with just enough capacity to hold the item \n    and introduces tunable randomness relative to valid bin priorities for better exploration-exploitation balance.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration. Defaults to 0.1.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize priorities of valid bins to [0, 1] range for better scaling of noise\n    priorities_valid = priorities[valid_bins]\n    min_priority_valid = np.min(priorities_valid)\n    max_priority_valid = np.max(priorities_valid)\n    priority_range = max_priority_valid - min_priority_valid\n    if priority_range > 0:\n        normalized_priorities_valid = (priorities_valid - min_priority_valid) / priority_range\n    else:\n        normalized_priorities_valid = np.ones_like(priorities_valid)\n    \n    # Introduce scaled randomness for exploration directly to valid bins\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=np.sum(valid_bins))  \n    priorities[valid_bins] += noise * normalized_priorities_valid\n    \n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response9.txt_stdout.txt",
    "code_path": "problem_iter22_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with scaled exploration noise.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the level of exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Scale priorities to a suitable range (between 0 and 1) to avoid extreme values\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priority_range = max_priority - min_priority\n    if priority_range == 0:\n        scaled_priorities = np.where(valid_bins, 1.0, 0.0)\n    else:\n        scaled_priorities = np.where(valid_bins, (priorities - min_priority) / priority_range, 0.0)\n    \n    # Introduce relative noise for better exploration\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=len(priorities))\n    priorities = scaled_priorities + noise\n    \n    # Ensure bins that cannot hold the item have the lowest priority\n    priorities = np.where(valid_bins, priorities, -np.inf)\n    \n    return priorities",
    "response_id": 9,
    "obj": 4.2580773833266905,
    "SLOC": 16.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 112.58797503894243,
    "mi": 81.9349833356364,
    "token_count": 225.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The function normalizes priorities and noise to a common range, scales noise relative to priorities, and controls exploration-exploitation trade-off using a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Tunable parameter to control the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable parameter alpha\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise in [0, 1] range\n    noise = noise * valid_bins  # Only add noise to valid bins\n    noise = (noise - np.min(noise[valid_bins])) / (np.max(noise[valid_bins]) - np.min(noise[valid_bins]) + 1e-9)  # Normalize noise\n    \n    # Scale noise relative to priorities using alpha\n    priorities = priorities * (1 - alpha) + alpha * noise\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.078579976067022,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 192.29419688230416,
    "mi": 70.29228190366636,
    "token_count": 175.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The function normalizes priorities and noise to a common range, scales noise relative to priorities, and controls exploration-exploitation trade-off using a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Tunable parameter to control the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable parameter alpha\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise in [0, 1] range\n    noise = noise * valid_bins  # Only add noise to valid bins\n    # Scale noise relative to priorities using alpha\n    priorities = (1 - alpha) * priorities + alpha * noise\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.078579976067022,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 192.29419688230416,
    "mi": 70.29228190366636,
    "token_count": 175.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The function normalizes priorities and noise to a common range, scales noise relative to priorities, and controls exploration-exploitation trade-off using a tunable parameter.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Tunable parameter to control the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness with tunable parameter alpha\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise in [0, 1] range\n    noise = noise * valid_bins  # Only add noise to valid bins\n    # Scale noise relative to priorities using alpha\n    priorities = (1 - alpha) * priorities + alpha * noise\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.078579976067022,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 192.29419688230416,
    "mi": 70.29228190366636,
    "token_count": 175.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_rate: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        exploration_rate: Controls the trade-off between exploration and exploitation.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness, scaled relative to priorities\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, exploration_rate, size=len(priorities))  # Scaled noise for exploration\n    priorities = priorities * (1 - exploration_rate) + noise * valid_bins  # Balance between priorities and noise\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.078579976067022,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 192.29419688230416,
    "mi": 70.29228190366636,
    "token_count": 175.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with controlled randomness for exploration.\n    The exploration-exploitation trade-off is controlled by the parameter alpha.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the exploration-exploitation trade-off.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition / (bins_remain_cap + 1e-9), -np.inf)\n    \n    # Normalize priorities to [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Introduce controlled randomness relative to priorities\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, alpha, size=len(priorities))  # Scaled noise for exploration relative to alpha\n    priorities = priorities * (1 - alpha) + noise * valid_bins  # Only add noise to valid bins and scale priorities\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.078579976067022,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 192.29419688230416,
    "mi": 70.29228190366636,
    "token_count": 175.0,
    "exec_success": true
  }
]