```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins_mask = remaining_after_addition >= 0
    
    # Initialize priorities with negative infinity for bins that cannot fit the item
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # For bins that can fit the item, prioritize based on how much capacity is left after addition
    # and penalize bins that are too empty (to avoid fragmentation)
    priorities[valid_bins_mask] = remaining_after_addition[valid_bins_mask] / bins_remain_cap[valid_bins_mask]
    
    # Further penalize bins that are almost empty to encourage packing items tightly
    too_empty_bins_mask = (bins_remain_cap > item) & (bins_remain_cap < 2*item)
    priorities[too_empty_bins_mask] -= 0.5
    
    return priorities
```
