```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Create a mask to identify bins that have enough capacity for the item
    valid_bins = remain_cap_after_add >= 0
    
    # For bins with enough capacity, priority is inversely proportional to the remaining capacity after adding the item
    # This encourages packing items tightly
    priorities_valid = 1 / (remain_cap_after_add[valid_bins] + 1e-6)
    
    # For bins without enough capacity, assign a very low priority
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = priorities_valid
    
    # Normalize the priorities to be between 0 and 1 for valid bins
    if np.any(valid_bins):
        priorities[valid_bins] = (priorities[valid_bins] - np.min(priorities[valid_bins])) / (np.max(priorities[valid_bins]) - np.min(priorities[valid_bins]) + 1e-6)
    
    return priorities
```
