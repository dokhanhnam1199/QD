```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The total capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item
    
    # Initialize priorities with negative infinity for bins that cannot accommodate the item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Calculate the "best fit" score, which is a combination of the remaining capacity after adding the item and the proportion of the bin that will be filled
    remaining_after_addition = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = -0.7 * (remaining_after_addition / bin_capacity) ** 2 - 0.3 * np.abs(remaining_after_addition / (bins_remain_cap[valid_bins] - item / 2))
    
    return priorities
```
