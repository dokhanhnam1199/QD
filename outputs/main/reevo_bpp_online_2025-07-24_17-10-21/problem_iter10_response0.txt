```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function prioritizes bins that can accommodate the item with the least remaining capacity.
    It balances between exploitation and exploration by combining a fit score with random noise.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the trade-off between "fit" score and randomness.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Assign high priority to bins that can hold the item and have the least remaining capacity
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)
    
    # Normalize the priorities for valid bins to be between 0 and 1
    valid_bins = priorities != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priorities[valid_bins])
        min_priority = np.min(priorities[valid_bins])
        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10)
    else:
        return priorities  # If no bin can hold the item, return priorities as is
    
    # Add a small random noise for exploration
    np.random.seed(0)  
    noise = np.random.uniform(0, 1e-5, size=len(priorities))  # Reduced noise scale for more exploitation
    noise[~valid_bins] = 0  
    
    # Combine the normalized priorities and noise
    priorities = alpha * priorities + (1 - alpha) * noise
    
    return priorities
```
