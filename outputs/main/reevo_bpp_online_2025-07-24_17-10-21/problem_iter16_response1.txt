```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function directly rewards bins that are most suitable for the item.
    It prioritizes bins that can accommodate the item and have the least remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Parameter controlling the scale of random noise.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Directly reward bins with the least remaining capacity that can fit the item
    priorities = np.where(bins_remain_cap >= item, -np.abs(bins_remain_cap - item), -np.inf)
    
    # Add a small random noise for exploration
    noise = np.random.uniform(-alpha, alpha, size=len(bins_remain_cap))
    noise[bins_remain_cap < item] = 0  # No noise for bins that cannot hold the item
    
    priorities += noise
    
    return priorities
```
