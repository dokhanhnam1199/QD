```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function directly uses the negative remaining capacity after addition as priority scores 
    for valid bins and adds a small random noise for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        alpha: Weight for the priority score.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    remaining_after_addition = bins_remain_cap - item
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)
    valid_bins = priorities != -np.inf
    
    # Directly use the calculated priorities for valid bins
    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0
    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0
    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)
    priorities[~valid_bins] = 0
    
    # Adjust the noise scale for a better trade-off
    noise = np.random.uniform(0, 1e-4, size=len(bins_remain_cap))
    noise[~valid_bins] = 0  
    
    # Combine the priorities and noise with a weighted sum
    priorities = alpha * priorities + (1 - alpha) * noise
    
    return priorities
```
