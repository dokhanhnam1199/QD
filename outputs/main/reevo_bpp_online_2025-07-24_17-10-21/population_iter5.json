[
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements an improved priority function that considers multiple factors:\n    - The remaining capacity of the bins after adding the item.\n    - The size of the item relative to the bin capacity.\n    - Normalizes the priority scores and adds a small random noise for exploration-exploitation balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    # and consider the relative size of the item to the bin capacity\n    priorities = np.where(valid_bins, \n                          (1 - remaining_after_addition / (bins_remain_cap + 1e-12)) * (item / (bins_remain_cap + 1e-12)), \n                          0)\n    \n    # Normalize the priority scores to be within [0, 1]\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    priorities = (priorities - min_priority) / (max_priority - min_priority + 1e-12)\n    \n    # To balance exploration and exploitation, add a small random noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    # Ensure priorities are within [0, 1] after adding noise\n    priorities = np.clip(priorities, 0, 1)\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response1.txt_stdout.txt",
    "code_path": "problem_iter4_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements an improved priority function that considers both \n    the remaining capacity of the bins and the size of the item. It assigns \n    higher priority to bins that have just enough capacity to hold the item, \n    normalizes the priority scores, and adds a noise to balance exploration \n    and exploitation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, \n                          # Use a non-linear function to emphasize the difference between bins with small remaining capacity\n                          np.exp(-remaining_after_addition / (bins_remain_cap + 1e-12)), \n                          0)\n    \n    # Normalize the priority scores to be within [0, 1]\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    priorities = (priorities - min_priority) / (max_priority - min_priority + 1e-12)\n    \n    # To balance exploration and exploitation, add a small random noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1e-6, size=len(priorities))\n    priorities = priorities * 0.99 + noise * 0.01  # Weighted sum to control the noise level\n    \n    # Ensure the priorities are within [0, 1] after adding noise\n    priorities = np.clip(priorities, 0, 1)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response2.txt_stdout.txt",
    "code_path": "problem_iter4_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers the remaining capacity of the bins after adding an item.\n    It prioritizes bins that can accommodate the item and have the least remaining capacity after addition.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Directly calculate priorities based on the remaining capacity after adding the item\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    \n    # Use negative priorities so that bins with less remaining capacity are prioritized\n    priorities = -priorities\n    \n    # Add a small random noise to break ties\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response3.txt_stdout.txt",
    "code_path": "problem_iter4_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a simplified priority function that considers the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, normalizes the priority scores, and adds a small random noise.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores for valid bins\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10) if max_priority != min_priority else 1\n    \n    # Add a small random noise to the priority scores to balance exploration and exploitation\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response4.txt_stdout.txt",
    "code_path": "problem_iter4_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, normalizes the priority scores, and adds a random noise for exploration.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores for valid bins using softmax normalization to emphasize the differences between scores\n    valid_priorities = priorities[valid_bins]\n    exp_priorities = np.exp(valid_priorities - np.max(valid_priorities))\n    priorities[valid_bins] = exp_priorities / (np.sum(exp_priorities) + 1e-10)\n    \n    # Add a small random noise to the priority scores to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1e-6, size=len(priorities))\n    noise *= valid_bins  # Only add noise to valid bins\n    priorities += noise\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response5.txt_stdout.txt",
    "code_path": "problem_iter4_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.5) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item and normalizes the priority scores.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Parameter controlling the trade-off between \"fit\" and randomness.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the \"fit\" score for each bin\n    fit_score = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-12), 0)\n    \n    # Add a small random noise to the \"fit\" score to balance exploration and exploitation\n    np.random.seed(0)  # For reproducibility\n    noise = np.random.uniform(0, 1, size=len(bins_remain_cap))\n    \n    # Calculate the final priority score as a weighted sum of \"fit\" score and random noise\n    priorities = alpha * fit_score + (1 - alpha) * noise\n    \n    return priorities",
    "response_id": 5,
    "obj": 4.417630634224167,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response6.txt_stdout.txt",
    "code_path": "problem_iter4_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, normalizes the priority scores, and adds a small random noise.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, prioritize those with the least remaining capacity after addition\n    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):\n        max_priority = np.max(priorities[valid_bins])\n        min_priority = np.min(priorities[valid_bins])\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-10)\n    \n    # To balance exploration and exploitation, add a small random noise to the priority scores\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    return priorities",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response7.txt_stdout.txt",
    "code_path": "problem_iter4_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function prioritizes bins that can accommodate the item and have the least remaining capacity after addition.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    priorities = np.where(bins_remain_cap >= item, - (bins_remain_cap - item), -np.inf)\n    \n    return priorities",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response8.txt_stdout.txt",
    "code_path": "problem_iter4_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Assign priority based on the remaining capacity after adding the item\n    # Higher priority is given to bins with less remaining capacity after addition\n    priorities = np.where(remaining_after_addition >= 0, \n                          -remaining_after_addition, \n                          -np.inf)\n    \n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response9.txt_stdout.txt",
    "code_path": "problem_iter4_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements an improved priority function that considers the remaining capacity of the bins and introduces a tie-breaker.\n    It prioritizes bins that can accommodate the item, have the least remaining capacity, and are less full initially.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that can accommodate the item get priority based on their remaining capacity after addition and initial remaining capacity\n    priorities = np.where(remaining_after_addition >= 0, \n                          -remaining_after_addition + 1e-6 * np.random.uniform(0, 1, size=len(remaining_after_addition)) + 1e-6 * bins_remain_cap, \n                          -np.inf)\n    \n    return priorities",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 88.0,
    "mi": 77.13341234122656,
    "token_count": 84.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item and have the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, 1 - bins_remain_cap / (item + bins_remain_cap), -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # To make the priority scores more distinguishable and allow for some exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    # For bins with the same priority score, favor the one with the least remaining capacity by adding a small tie-breaker\n    priorities += np.where(valid_bins, -bins_remain_cap / (np.max(bins_remain_cap) + 1e-9) * 1e-9, 0)\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 242.75561920895692,
    "mi": 77.14427660728944,
    "token_count": 204.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, with a tie-breaker for bins with the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # To make the priority scores more distinguishable and allow for exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    # As a tie-breaker, favor bins with the least remaining capacity by subtracting a small value proportional to the remaining capacity\n    priorities -= 1e-9 * bins_remain_cap\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 242.75561920895692,
    "mi": 77.14427660728944,
    "token_count": 204.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, 1 - (bins_remain_cap / (item + bins_remain_cap)), -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # To make the priority scores more distinguishable and allow for exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities[valid_bins] += np.random.uniform(0, 1e-6, size=np.sum(valid_bins))\n    \n    # Favor bins with the least remaining capacity when there's a tie\n    tie_breaker = np.where(valid_bins, -bins_remain_cap, 0)\n    tie_breaker = (tie_breaker - np.min(tie_breaker[valid_bins])) / (np.max(tie_breaker[valid_bins]) - np.min(tie_breaker[valid_bins]) + 1e-9) * 1e-6\n    priorities += tie_breaker\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 242.75561920895692,
    "mi": 77.14427660728944,
    "token_count": 204.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # To make the priority scores more distinguishable and allow for exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(0, 1e-6, size=len(priorities))\n    \n    # As a tie-breaker, favor bins with the least remaining capacity by subtracting a small value proportional to the remaining capacity\n    priorities[valid_bins] -= 1e-9 * (bins_remain_cap[valid_bins] / bins_remain_cap.max())\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 242.75561920895692,
    "mi": 77.14427660728944,
    "token_count": 204.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements a priority function that considers both the remaining capacity of the bins and the size of the item.\n    It assigns higher priority to bins that have just enough capacity to hold the item, \n    and breaks ties by favoring bins with the least remaining capacity.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins that cannot hold the item should have the lowest priority\n    valid_bins = bins_remain_cap >= item\n    \n    # For valid bins, prioritize those with the least remaining capacity\n    priorities = np.where(valid_bins, 1 - (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Normalize scores to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins])\n    min_priority = np.min(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # To make the priority scores more distinguishable and allow for exploration, we can add a small random noise\n    np.random.seed(0)  # For reproducibility\n    priorities[valid_bins] += np.random.uniform(0, 1e-6, size=np.sum(valid_bins))\n    \n    # Favor bins with the least remaining capacity in case of a tie\n    tie_breaker = np.where(valid_bins, -bins_remain_cap, 0)\n    tie_breaker = (tie_breaker - np.min(tie_breaker)) / (np.max(tie_breaker) - np.min(tie_breaker) + 1e-9) * 1e-6\n    priorities += tie_breaker\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 242.75561920895692,
    "mi": 77.14427660728944,
    "token_count": 204.0,
    "exec_success": true
  }
]