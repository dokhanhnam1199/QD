```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function implements a priority function focusing on the remaining capacity after adding the item and introduces controlled randomness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, use a combination of remaining capacity after addition and the bin utilization as priority
    remaining_after_addition = bins_remain_cap - item
    priorities = np.where(valid_bins, - remaining_after_addition / bin_capacity, -np.inf)
    
    # Introduce controlled randomness
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 0.01, size=len(priorities))  
    priorities += noise * valid_bins  # Only add noise to valid bins
    
    return priorities
```
