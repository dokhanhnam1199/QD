{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Normalize the score to be between 0 and 1 for valid bins.\n\n    Args:\n        score: Score to be normalized.\n        valid_bins: Boolean array indicating valid bins.\n\n    Return:\n        Normalized score.\n    \"\"\"\n    if np.any(valid_bins):\n        max_score = np.max(score[valid_bins])\n        min_score = np.min(score[valid_bins])\n        score[valid_bins] = (score[valid_bins] - min_score) / (max_score - min_score + 1e-9)\n    else:\n        score[:] = 0  # If no valid bins, set all scores to 0\n    return score\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function simplifies the priority calculation by directly using the remaining capacity after adding the item,\n    and introduces randomness for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the scale of random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate validity of bins\n    valid_bins = bins_remain_cap >= item\n\n    # Prioritize bins that can fit the item with the least remaining capacity\n    priorities = np.where(valid_bins, -(bins_remain_cap - item), -np.inf)\n    priorities = _normalize_score(priorities, valid_bins)\n\n    # Introduce randomness for exploration\n    noise = np.random.uniform(0, alpha, size=len(bins_remain_cap))\n    noise[~valid_bins] = 0  # No noise for bins that cannot hold the item\n    noise = _normalize_score(noise, valid_bins)\n\n    # Combine priority and noise\n    priorities = priorities + noise\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This function prioritizes bins that can accommodate the item and have the least remaining capacity after addition.\n    It introduces a small random noise for exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        alpha: Parameter controlling the scale of random noise.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate priority based on how tightly bins can fit the item\n    priorities = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Add a small random noise for exploration\n    noise = np.random.uniform(-alpha, alpha, size=len(bins_remain_cap))\n    noise[bins_remain_cap < item] = 0  # No noise for bins that cannot hold the item\n    \n    priorities += noise\n    \n    return priorities\n\n[Reflection]\nSimpler priority calculations and noise ranges can improve heuristics. Avoid unnecessary normalization unless it adds significant value.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}