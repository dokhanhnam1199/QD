```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a priority function that balances fit and exploration for online Bin Packing Problem.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item should have the lowest priority
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, prioritize those with the least remaining capacity after addition
    priorities = np.where(valid_bins, -remaining_after_addition / bins_remain_cap, -np.inf)
    
    # Introduce scaled randomness for exploration, relative to the bin capacity
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(0, 1, size=len(priorities))  # Uniform noise between 0 and 1
    priorities += 5e-3 * noise * valid_bins  # Scaled noise for valid bins
    
    return priorities
```
