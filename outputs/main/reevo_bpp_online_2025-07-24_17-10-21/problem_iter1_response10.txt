```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Give high priority to bins that will have the least remaining capacity after adding the item
    # This is to pack the bins as tightly as possible
    tightness = -np.abs(remaining_after_addition)
    
    # Also consider the bins that are almost full, give them higher priority
    # But penalize bins that can't fit the item
    valid_bins = np.where(bins_remain_cap >= item, 1, 0)
    priorities = tightness * valid_bins + np.where(bins_remain_cap >= item, 0, -1e6)
    
    return priorities
```
