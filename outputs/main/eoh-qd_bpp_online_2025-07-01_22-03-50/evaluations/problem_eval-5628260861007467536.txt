def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and how well the item fits, favoring bins that are neither too full nor almost empty after packing the item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio_after_packing = (cap - item) / 100 if (cap - item) >= 0 else 0  # Normalize remaining space after packing
            priority_score = (1 - fill_ratio_after_packing) * (item / 100)  # Prioritize bins with better fit. Normalize item.
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
