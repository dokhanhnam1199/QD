def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority scores for bins based on a combination of remaining capacity and wasted space if the item is placed in the bin, prioritizing bins with sufficient space and minimal wasted capacity.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      priority = cap + (1.0 / (wasted_space + 0.1))  # Prefer smaller waste, add remaining cap as baseline
      priorities.append(priority)
    else:
      priorities.append(-1) # Invalid bins

  return priority
