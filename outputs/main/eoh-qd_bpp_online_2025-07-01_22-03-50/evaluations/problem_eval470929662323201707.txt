def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on the remaining capacity after placing the item, favoring bins that result in a remaining capacity closest to a target value (e.g., half the bin size) and avoiding bins that would become too empty or too full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_cap = cap - item
            # Target remaining capacity (e.g., half the bin size)
            target_cap = 50  # Assuming bin size is 100
            priority_score = -abs(remaining_cap - target_cap)
            # Penalize bins that become too empty or too full
            if remaining_cap < 10:
                priority_score -= 20
            if remaining_cap > 90:
                priority_score -= 20
            priority.append(priority_score)
        else:
            priority.append(-float('inf'))
    return priority
