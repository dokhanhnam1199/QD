def priority_v2(item, bins_remain_cap):
    """
    {This algorithm calculates a priority score for each bin based on the remaining capacity of the bin and the item size, favoring bins that can accommodate the item with minimal wasted space while penalizing bins that are too small or would result in significant fragmentation.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(1 / (cap - item + 1e-9))  # Prioritize less wasted space
        else:
            priority.append(-1e9)  # Penalize bins that are too small
    return priority
