def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and how well the item fits, favoring bins that are neither too full nor too empty after packing the item.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Calculate a "fit" score (higher is better)
      fit_score = 1.0 - abs((cap - item) - (sum(bins_remain_cap) / len(bins_remain_cap) - item)) / (sum(bins_remain_cap) / len(bins_remain_cap)) 
      
      # Combine remaining capacity and fit score
      priority = fit_score * (item / cap) 
      priorities.append(priority)
    else:
      priorities.append(-1)  # Assign low priority to bins that can't fit the item
  return priority
