```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority score for each bin, considering fullness, remaining space, and penalizing almost-full bins."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (np.abs(remaining_space) + 0.000001))

    # Introduce penalty for almost-full bins to avoid fragmentation.
    almost_full_penalty = np.where(remaining_space < 0.1, -0.5, 0)
    priorities[valid_bins] += almost_full_penalty[valid_bins]

    return priorities
```
