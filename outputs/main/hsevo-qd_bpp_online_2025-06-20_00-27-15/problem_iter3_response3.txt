```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that are a good fit for the item,
    penalizing both nearly full and nearly empty bins after packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0

    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        
        # Calculate a "fit score" based on how well the item fits into the bin.
        # A good fit is when the remaining space is neither too small nor too large.
        # We can use a Gaussian-like function centered around an ideal remaining space.
        # Let's define the ideal remaining space as a fraction of the bin capacity.
        ideal_remaining_space_fraction = 0.2  # e.g., aim for 20% remaining space
        ideal_remaining_space = bins_remain_cap[valid_bins] * ideal_remaining_space_fraction
        
        # Use a Gaussian-like function to score the fit
        fit_score = np.exp(-((remaining_space - ideal_remaining_space) ** 2) / (2 * (bins_remain_cap[valid_bins] * 0.1) ** 2))  # Adjust the std dev as needed
        
        # Combine the fit score with the item size ratio.

        priorities[valid_bins] = fit_score + (item / bins_remain_cap[valid_bins])

    return priorities
```
