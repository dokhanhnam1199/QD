import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, invalid_priority: float = -23.178377700735552, epsilon: float = 2.4644461046181965e-05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        invalid_priority: Priority for bins that cannot accommodate the item.
        epsilon: Small value to avoid division by zero.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.
    priorities = np.full_like(bins_remain_cap, invalid_priority)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Scoring valid bins
    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + epsilon))

    return priorities
