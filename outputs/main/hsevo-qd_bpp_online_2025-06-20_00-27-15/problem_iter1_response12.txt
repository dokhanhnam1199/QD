```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item perfectly (or close to perfectly).
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 1000  # High priority boost

    # Prioritize bins where the item fills a large portion of the remaining space but leaves some space.
    fill_ratio = item / bins_remain_cap
    suitable_bins = (fill_ratio > 0.7) & (fill_ratio <= 1.0) #fill_ratio<1 ensures it fits. can increase if perfect fit boost removed.

    priorities[suitable_bins] += 500 * (1 - np.abs(fill_ratio[suitable_bins] - 0.85)) # Gaussian shaped preference for bins close to 85% full with added item

    # Small penalty to bins where item doesn't fit
    does_not_fit = item > bins_remain_cap
    priorities[does_not_fit] -= 1000 # Prevents using this bin

    # If no 'perfect fit' or high ratio bins exist, then still try some bins. Add small priorities based on remaining capacity and item size
    fit_bins = (item <= bins_remain_cap)
    priorities[fit_bins] += 10 * bins_remain_cap[fit_bins] / item

    return priorities
```
