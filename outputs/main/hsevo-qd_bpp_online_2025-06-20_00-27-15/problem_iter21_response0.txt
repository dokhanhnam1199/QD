```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Remaining space penalty: Use a different formula.  Higher penalty for very small remaining space
    remaining_space_penalty = np.exp(-remaining_space * 10)  # Exponential decay

    # Capacity utilization
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Introduce a bin selection pressure based on the item size relative to bin size.
    # If the item is relatively large compared to the bin, penalize bins with small remaining capacity, otherwise boost them.
    item_bin_ratio = item / bins_remain_cap[valid_bins]
    item_size_pressure = np.where(item_bin_ratio > 0.5, remaining_space_penalty * 0.5, 0.1)

    #Adaptive weight based on number of valid bins
    n_valid = np.sum(valid_bins)
    adaptive_weight = 1 / (n_valid + 1) # weight decreases as the number of valid bins increases.

    # Combine the factors to create the priority score.  Apply adaptive weight
    priorities[valid_bins] = adaptive_weight*(fill_ratio + remaining_space_penalty + capacity_utilization + item_size_pressure)

    return priorities
```
