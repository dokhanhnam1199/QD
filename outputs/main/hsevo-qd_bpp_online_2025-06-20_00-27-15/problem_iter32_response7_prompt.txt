{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item.\n    new_capacities = bins_remain_cap - item\n\n    # Identify bins that can accommodate the item.\n    valid_bins = new_capacities >= 0\n\n    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.\n\n    # For valid bins, calculate a score based on remaining capacity after packing.\n    remaining_space = bins_remain_cap[valid_bins] - item\n    \n    # Scoring valid bins\n    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + 0.000001))\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                remaining_space_epsilon: float = 0.0006728382817477606, large_space_balance: float = 0.7053061731887349,\n                small_space_balance: float = 0.2355939418926551, large_space_threshold_ratio: float = 0.013944748221418113) -> np.ndarray:\n    \"\"\"Prioritizes bins using fill ratio, remaining space penalty, and space balance.\"\"\"\n    new_capacities = bins_remain_cap - item\n    valid_bins = new_capacities >= 0\n    priorities = np.full_like(bins_remain_cap, invalid_priority)\n\n    if not np.any(valid_bins):\n        return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (17th), we see that the top heuristic incorporates a much broader set of factors, including fill ratio, remaining space penalty, capacity utilization, space balance, bin diversity, a fill target, an almost-full penalty, and a median proximity bonus. In contrast, the 17th heuristic only considers remaining space and fill ratio.\n(2nd) vs (16th) are identical.\nComparing (3rd) vs (15th), we see the 3rd heuristic considers space balance, adaptive weight based on item size and bin diversity. The 15th heuristic is a stripped down version of the concept, only focusing on basic fill ratio and remaining space.\nComparing (4th) vs (14th), we see the 4th heuristic uses adaptive weights based on item size. 14th heuristic provides parameters such as invalid_priority and epsilon.\nComparing (5th) vs (13th), we see that the 13th heuristic introduces adaptive parameter adjustments based on item size and also include empty bin penalty.\nComparing (6th) vs (12th) are identical.\nComparing (7th) vs (11th) are identical.\nComparing (8th) vs (10th) are similar but 10th has more verbose comments.\nComparing (9th) vs (20th), we see that the 9th heuristic is simpler, the 20th uses more parameters.\nComparing (18th) vs (19th) are similar but 18th includes some code, while 19th is just the docstring.\nOverall: The better heuristics introduce more factors and adaptive weights. They often consider balancing fill levels across bins, penalizing nearly full bins, and promoting diversity in bin capacities. They also often include more configuration parameters.\n- \nOkay, let's redefine \"Current Self-Reflection\" for designing better heuristics, focusing on actionable insights and avoiding the pitfalls of ineffective reflections.\n\nHere's a breakdown:\n\n*   **Keywords:** Multifactorial, Adaptive, Tunable, Validation.\n*   **Advice:** Design heuristics that combine multiple relevant factors, implement adaptive parameters and weights informed by input characteristics, and prioritize rigorous testing and validation of each factor.\n*   **Avoid:** Over-reliance on single metrics, hardcoded parameters, and complexity without demonstrated benefit.\n*   **Explanation:** Go beyond single-factor approaches. Create a system with parameters that change based on data to keep it flexible. Test and prove each factor's impact. Simple is okay, but it has to work well.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}