```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First priority: Bins that can actually fit the item
    can_fit = bins_remain_cap >= item
    
    #If no bin can fit, return a negative priority to allow selection
    if not np.any(can_fit):
        priorities = bins_remain_cap - item
        return priorities

    # Prioritize bins that can fit the item, otherwise priority zero
    priorities[can_fit] = 1

    #Adjust priority based on remaining space after adding the item
    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = 0 #ensure no negative values affect prioritization of fitting bins

    #Heuristic: prefer to use the bin where remaining space is not too large, but also avoid small remaining space which may make next placement difficult
    #Add small item_fraction*remaining space with a penalty factor that decreases rapidly as remaining space gets closer to zero.
    item_fraction = 0.5 #Tuneable parameter
    penalty_factor = np.exp(-10 * remaining_space[can_fit]/ bins_remain_cap[can_fit])
    priorities[can_fit] = 1 + item_fraction * remaining_space[can_fit] * penalty_factor

    return priorities
```
