```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the celestial dance, we favor bins where the item's size is a
    significant, yet not overwhelming, fraction of the remaining capacity.
    This encourages filling bins effectively without leaving excessive space.
    Like a planet finding its place in orbit, the item seeks the most suitable bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Ratio of item size to remaining capacity.
            ratio = item / cap

            # A Gaussian-like weighting centered around a desirable ratio (e.g., 0.7).
            # This rewards bins where the item fills a good portion of the remaining space.
            # Experiment with different center and scaling parameters.
            priorities[i] = np.exp(-((ratio - 0.7) ** 2) / (2 * 0.2 ** 2))

            # Also add a component that favors bins that are closer to being full.
            # This biases towards utilizing bins more fully as a secondary effect.
            # Ensure the value is within reasonable range by clipping. Prevents overflows and odd behaviour.
            priorities[i] += np.clip(1-(cap-item), 0.0, 1.0) # Avoid exceeding bin capacity by only considering valid fits
            # Add a tiny random term to break ties for equal fits and ensure exploration.
            priorities[i] += np.random.rand()*0.001

        else:
            priorities[i] = -np.inf  # Bin is not suitable, assign negative infinity priority.

    return priorities
```
