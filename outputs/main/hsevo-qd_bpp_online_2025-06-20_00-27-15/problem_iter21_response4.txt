```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces a more adaptive and nuanced priority scheme.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # If no bin can fit, return the initialized priorities.
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0  # Give valid bins a base priority.

    # Remaining space after packing the item in valid bins.
    remaining_space = bins_remain_cap[valid_bins] - item

    # 1. Fill Ratio: Item size relative to bin capacity.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining Space Penalty:  Prefer bins with less remaining space, but with a capped influence.
    remaining_space_penalty = np.clip(1 / (remaining_space + 0.000001), 0, 10)  # Clip to avoid excessive influence.

    # 3. Capacity Utilization:  The proportion of the bin that will be used.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Adaptability based on item size: Adjust scoring based on item size relative to bin capacity.
    #   - If item is large relative to bin, prioritize bins with slightly more remaining space.
    #   - If item is small, strongly prioritize bins that will be filled almost completely.
    item_size_ratio = item / bins_remain_cap[valid_bins]
    if np.any(item_size_ratio > 0.7):
        # Large item: slight preference for a bit more space.
        adaptability_factor = np.clip(remaining_space * 2, 0, 1)  # Scale remaining space
    else:
        # Smaller item: Penalize excessive remaining space.
        adaptability_factor = np.clip(1 - (remaining_space / bins_remain_cap[valid_bins]),0,1)

    # 5. Balance between filling and leaving some space. More refined than v1
    space_balance = np.where(remaining_space > item / 2, 0.3, 0.7)

    # Combine the factors, weighting them dynamically.
    priorities[valid_bins] = (
        0.4 * fill_ratio +
        0.3 * remaining_space_penalty +
        0.15 * capacity_utilization +
        0.05 * adaptability_factor +
        0.1 * space_balance
    )

    return priorities
```
