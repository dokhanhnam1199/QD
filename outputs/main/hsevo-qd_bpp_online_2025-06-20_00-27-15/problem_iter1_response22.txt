```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: First-Fit Decreasing variant (emphasizing fullness)
    # A bin is more preferred if it can accommodate the item and
    # leaves the least wasted space. Penalize bins that are too full or not full enough.
    
    potential_remaining = bins_remain_cap - item
    
    # Handle cases where the item doesn't fit
    priority = np.where(potential_remaining >= 0, 0.0, -np.inf) #Cannot fit = extremely low priority.

    # Prefer bins where item fits best (small remaining capacity)
    priority = np.where(potential_remaining >= 0, 1.0 / (0.0001 + potential_remaining), priority)  # Avoid division by zero, favor small remaining

    #Heuristic 2: Introduce some randomness for exploration, akin to simulated annealing.
    priority += np.random.normal(0, 0.01, size=bins_remain_cap.shape) # Add noise to the scores

    return priority
```
