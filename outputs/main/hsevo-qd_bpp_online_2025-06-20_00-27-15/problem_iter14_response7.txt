```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space penalty,
    capacity utilization, space balance, and item size weighting.
    """
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item/2, 0.5, 0.1)

    item_size_ratio = item / np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 0.0  # Handle empty bins case
    density_weight = 1.0 + item_size_ratio * 0.5
    tight_fit_weight = 1.0 - item_size_ratio * 0.3
    empty_penalty_weight = 0.5 + item_size_ratio * 0.2

    empty_penalty = (remaining_space / np.max(bins_remain_cap)) if bins_remain_cap.size > 0 else 0.0

    priorities[valid_bins] = (
        density_weight * fill_ratio +
        tight_fit_weight * remaining_space_penalty +
        capacity_utilization +
        space_balance -
        empty_penalty_weight * empty_penalty
    )

    return priorities
```
