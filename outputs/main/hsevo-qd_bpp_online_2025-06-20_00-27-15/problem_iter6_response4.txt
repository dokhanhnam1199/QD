```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Adaptive parameters for weightings. These could be tuned based on problem instances.
    weight_capacity_ratio = 0.6
    weight_remaining_space = 0.4
    
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Scoring valid bins
    capacity_ratio_score = item / bins_remain_cap[valid_bins]
    remaining_space_score = 1 / (remaining_space + 0.000001)

    # Combine scores with adaptive weights
    priorities[valid_bins] = (weight_capacity_ratio * capacity_ratio_score) + (weight_remaining_space * remaining_space_score)

    # Add a small bonus for bins that are almost full after packing
    almost_full_threshold = 0.1  # Define how close to full is considered "almost full"
    almost_full_bins = remaining_space < almost_full_threshold
    priorities[valid_bins][almost_full_bins] += 0.1  # Increase priority for almost full bins

    return priorities
```
