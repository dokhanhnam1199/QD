import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                  nearly_full_threshold_multiplier: float = 1.1205388789972848,
                  nearly_full_penalty_value: float = 0.4520962571503448,
                  fill_ratio_weight: float = 0.2138011185798051,
                  remaining_space_penalty_weight: float = 0.15874261764379988,
                  capacity_utilization_weight: float = 0.2467368137008531,
                  best_fit_score_weight: float = 0.539411329713405,
                  remaining_space_epsilon: float = 8.798887216745915e-06,
                  best_fit_exponent_multiplier: float = 9.40783568587316) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        nearly_full_threshold_multiplier: threshold multiplier for nearly full penalty.
        nearly_full_penalty_value: penalty value if bin is nearly full.
        fill_ratio_weight: Weight for fill ratio.
        remaining_space_penalty_weight: Weight for remaining space penalty.
        capacity_utilization_weight: Weight for capacity utilization.
        best_fit_score_weight: Weight for best fit score.
        remaining_space_epsilon: Epsilon to avoid division by zero in remaining space penalty.
        best_fit_exponent_multiplier: Multiplier in exponent for best fit score.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + remaining_space_epsilon)

    # 3. Capacity utilization: Higher remaining capcity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Introduce a "best fit" component: prioritize bins where the remaining space is small but non-zero.
    best_fit_score = np.exp(-best_fit_exponent_multiplier * remaining_space / bins_remain_cap[valid_bins])  # Exponential decay

    # 5. Introduce a penalty for bins that are already nearly full
    nearly_full_penalty = np.where(bins_remain_cap[valid_bins] < nearly_full_threshold_multiplier * item, nearly_full_penalty_value, 0.0)

    # Combine the factors to create the priority score, adjusting weights.
    priorities[valid_bins] = (
        fill_ratio_weight * fill_ratio +
        remaining_space_penalty_weight * remaining_space_penalty +
        capacity_utilization_weight * capacity_utilization +
        best_fit_score_weight * best_fit_score -
        nearly_full_penalty  # Subtract the penalty
    )

    return priorities
