```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, invalid_priority=-np.inf, epsilon=1e-6) -> np.ndarray:
    """Prioritizes bins considering item size and remaining capacity."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, invalid_priority)
    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item

    # Combine fullness and best-fit aspects, adjusting for item size
    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (np.abs(remaining_space) + epsilon))

    # Introduce a bonus for relatively empty bins, scaled by item size.  This makes the bonus less aggressive for larger items
    empty_bin_bonus = (1 / (bins_remain_cap + epsilon)) * 0.1 * (1 - item) #Scale down bonus based on item size. If item is close to bin size, then empty bin bonus has very little effect
    empty_bin_bonus = np.clip(empty_bin_bonus, 0, 0.1) #making sure it does not have minus value and greater than 0.1
    priorities = priorities + empty_bin_bonus

    return priorities
```
