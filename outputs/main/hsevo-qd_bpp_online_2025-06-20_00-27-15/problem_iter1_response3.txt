```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considers remaining capacity and tries to balance bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give very low priority (practically impossible) to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # For bins that CAN fit the item, calculate priority based on several factors:
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):  # Only calculate if there are eligible bins

        # 1. Fill ratio: Higher fill ratio after adding the item is better (but avoid overfilling).
        fill_ratios_after = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += fill_ratios_after #Heuristic: balance bin usage

        # 2. Remaining capacity penalty:  Prefer bins where the item utilizes the capacity well.

        waste = bins_remain_cap[eligible_bins] - item

        # Apply a penalty relative to the remaining bin capacity after packing
        priorities[eligible_bins] -= 0.5 * waste / np.max(bins_remain_cap)

        # 3. Avoid leaving very small remaining space
        priorities[eligible_bins][waste < 0.1*np.max(bins_remain_cap)] += 0.2  # avoid very tiny remainder, might waste future fits.

        # 4. Prioritize almost full bins (after packing), but don't overpack.
        remaining_after_packing = bins_remain_cap[eligible_bins] - item
        almost_full_bonus = (np.max(bins_remain_cap) - remaining_after_packing) / np.max(bins_remain_cap)
        priorities[eligible_bins] += np.clip(almost_full_bonus, 0, 0.8) #Add bonus only for bins almost full

    return priorities
```
