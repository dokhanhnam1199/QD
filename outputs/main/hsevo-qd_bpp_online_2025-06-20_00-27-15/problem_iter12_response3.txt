```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space. A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero. A small value to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + 1e-6)

    # 3. Capacity utilization: Higher remaining capacity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Introduce a penalty for bins that are almost full (e.g., remaining space is less than a small threshold) to avoid fragmentation.
    almost_full_penalty = np.where(remaining_space < 0.1 * np.mean(bins_remain_cap), -0.2, 0)

    # 5. Bonus for bins that are relatively empty to encourage filling them up.
    relatively_empty_bonus = np.where(bins_remain_cap[valid_bins] > 0.7 * np.max(bins_remain_cap), 0.1, 0)

    # Combine the factors to create the priority score.  Adjust weights based on experimentation.

    priorities[valid_bins] = 0.4 * fill_ratio + 0.3 * remaining_space_penalty + 0.2 * capacity_utilization + 0.1 * (almost_full_penalty + relatively_empty_bonus)

    return priorities
```
