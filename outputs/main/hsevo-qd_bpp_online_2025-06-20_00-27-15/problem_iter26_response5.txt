```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space, and capacity utilization."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    best_fit_score = np.exp(-10 * remaining_space / bins_remain_cap[valid_bins])
    nearly_full_penalty = np.where(bins_remain_cap[valid_bins] < 2 * item, 0.2, 0.0)

    priorities[valid_bins] = (
        0.3 * fill_ratio +
        0.2 * remaining_space_penalty +
        0.3 * capacity_utilization +
        0.2 * best_fit_score -
        nearly_full_penalty
    )
    return priorities
```
