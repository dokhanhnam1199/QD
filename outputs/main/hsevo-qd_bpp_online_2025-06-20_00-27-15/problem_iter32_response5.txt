```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Bin packing priority considering fill ratio, remaining space, and diversity."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    
    # Combine factors, inspired by top heuristic, with elements of simpler ones.
    priorities[valid_bins] = fill_ratio + (1 / (remaining_space + 0.000001))

    # Add diversity - penalize bins close to mean capacity
    capacity_std = np.std(bins_remain_cap)
    if capacity_std > 0:
      capacity_diversity_score = 1 - (np.abs(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap)) / capacity_std)
      capacity_diversity_penalty = np.clip(capacity_diversity_score, 0, 1)
      priorities[valid_bins] += 0.1 * capacity_diversity_penalty
    
    return priorities
```
