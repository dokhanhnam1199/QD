```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing inspired: Prefer bins with tighter fit. A small amount is added to ensure bins that can fit have a positive priority.
            priorities[i] = (cap - item) / cap + 0.00001  # Favor bins with less remaining space after fitting
            priorities[i] = 1 - priorities[i]  # Convert to priority; smaller remaining space = higher priority
        else:
            priorities[i] = -1  # Cannot fit, extremely low priority

    priorities = np.clip(priorities, a_min=-1, a_max=1)
    return priorities
```
