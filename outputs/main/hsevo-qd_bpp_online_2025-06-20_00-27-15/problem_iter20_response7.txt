```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority to bins based on fill ratio, space penalty, etc.
    Combines best aspects of v0 and v1, with adaptive weights.
    """
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    # Adaptive space balance: Adjust based on item size relative to bin size
    space_balance = np.where(remaining_space > item/2, 0.3, 0.1)

    item_size_weight = item

    #Prioritize nearly full bins
    nearly_full_bonus = np.where(bins_remain_cap[valid_bins] < 1.2 * item, 0.1, 0.0)


    priorities[valid_bins] = (
        0.3 * fill_ratio +
        0.2 * remaining_space_penalty +
        0.3 * capacity_utilization +
        space_balance +
        0.1 * item_size_weight +
        nearly_full_bonus
    )

    return priorities
```
