```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.5, beta: float = 0.5) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: Weighting factor for item utilization (0 to 1).
        beta: Weighting factor for remaining space (0 to 1).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Normalize remaining space
    normalized_remaining_space = remaining_space / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0


    # Scoring valid bins
    item_utilization = item / bins_remain_cap[valid_bins]
    space_efficiency = 1 - normalized_remaining_space
    
    priorities[valid_bins] = alpha * item_utilization + beta * space_efficiency
    
    # Add a small bonus for bins that are nearly full to avoid fragmentation
    nearly_full_bonus = np.where(remaining_space <= 0.1 * np.max(bins_remain_cap), 0.1, 0)
    priorities[valid_bins] += nearly_full_bonus

    return priorities
```
