{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item.\n    new_capacities = bins_remain_cap - item\n\n    # Identify bins that can accommodate the item.\n    valid_bins = new_capacities >= 0\n\n    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.\n\n    # For valid bins, calculate a score based on remaining capacity after packing.\n    remaining_space = bins_remain_cap[valid_bins] - item\n    \n    # Scoring valid bins\n    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + 0.000001))\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I understand the goal. We need to redefine \"Current self-reflection\" to be *effective* for designing heuristics, focusing on actionable advice while explicitly avoiding the pitfalls of the \"Ineffective self-reflection\" examples. These examples suffer from being too specific (bin packing only) and too vague (documentation, fine-tuning parameters without concrete guidance).\n\nHere's a redefinition:\n\n*   **Keywords:** Generalizability, Actionable, Problem-Specific, Evaluation.\n*   **Advice:** Design heuristics using problem-specific knowledge and measurable objectives. Prioritize adaptability to diverse problem instances. Clearly define success metrics *before* implementation.\n*   **Avoid:** Overly narrow examples. Vague advice on parameters without guidance. Focusing on trivial concerns (division by zero).\n*   **Explanation:** Heuristics should leverage deep understanding of the problem. Instead of generic statements, focus on testable hypotheses based on that understanding. Emphasize *evaluating* the heuristic's performance against clearly defined goals, which will guide further refinements and parameter adjustments.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}