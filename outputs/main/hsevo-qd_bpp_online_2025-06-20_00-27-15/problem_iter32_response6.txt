```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space, and capacity utilization."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 1e-6)

    # Adaptive weighting based on item size.
    item_size_weight = 0.5 + 0.5 * (item / np.max(bins_remain_cap)) # Scale between 0.5 and 1
    priorities[valid_bins] = item_size_weight * (fill_ratio + remaining_space_penalty + capacity_utilization)

    return priorities
```
