```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority for each bin considering fill ratio, remaining space, and adaptive item size weighting."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities
    
    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Adaptive weighting based on item size relative to average remaining capacity
    avg_remaining_capacity = np.mean(bins_remain_cap)
    item_size_weight = item / (avg_remaining_capacity + 0.000001)

    # Combine fill ratio and remaining space, weighting the fill ratio
    priorities[valid_bins] = (fill_ratio * (1 - item_size_weight*0.1)) + (1 / (remaining_space + 0.000001))
    return priorities
```
