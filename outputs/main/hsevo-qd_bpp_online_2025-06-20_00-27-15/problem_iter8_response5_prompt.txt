{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. How full the bin would become (packing density).\n    2. A \"tight fit\" bonus, preferring bins where the remaining space is small but non-zero.\n    3. A penalty for bins that would become too empty.\n    4. Adaptive parameter adjustments based on item size relative to bin size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item.\n    new_capacities = bins_remain_cap - item\n\n    # Identify bins that can accommodate the item.\n    valid_bins = new_capacities >= 0\n\n    # Initialize priorities with a very low value for invalid bins.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.\n\n    # Only calculate scores for valid bins\n    valid_capacities = bins_remain_cap[valid_bins]\n    valid_new_capacities = new_capacities[valid_bins]\n\n    # Calculate packing density (higher is better)\n    packing_density = item / valid_capacities\n\n    # Tight fit bonus (remaining space is small, higher is better)\n    # Avoid division by zero by adding a small constant\n    tight_fit_bonus = 1 / (valid_new_capacities + 0.000001)\n\n    # Penalty for bins that become too empty (lower is better)\n    empty_penalty = (valid_new_capacities / np.max(bins_remain_cap))  # Normalize to bin size\n\n    # Adaptive parameter adjustments based on item size\n    item_size_ratio = item / np.max(bins_remain_cap) # Normalize item size\n\n    # Adjust weights based on item size ratio\n    density_weight = 1.0 + item_size_ratio * 0.5  # Increase importance for larger items\n    tight_fit_weight = 1.0 - item_size_ratio * 0.3  # Decrease importance for larger items, prioritize utilization\n    empty_penalty_weight = 0.5 + item_size_ratio * 0.2 # Increase importance for larger items\n    \n    # Combine factors with weights\n    priorities[valid_bins] = (\n        density_weight * packing_density +\n        tight_fit_weight * tight_fit_bonus -\n        empty_penalty_weight * empty_penalty\n    )\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item.\n    new_capacities = bins_remain_cap - item\n\n    # Identify bins that can accommodate the item.\n    valid_bins = new_capacities >= 0\n\n    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.\n\n    # For valid bins, calculate a score based on remaining capacity after packing.\n    remaining_space = bins_remain_cap[valid_bins] - item\n    \n    # Scoring valid bins\n    # Prioritize bins with remaining capacity close to item size (Best Fit)\n    # and also factor in fullness (item/bin_capacity). Add a small constant for stability.\n    \n    priorities[valid_bins] = (1 / (np.abs(remaining_space) + 0.000001)) + (item / bins_remain_cap[valid_bins])\n\n    # Add a bonus for bins that are relatively empty, encouraging better space utilization\n    # The emptier the bin, the higher the bonus.  This helps avoid creating too many almost-empty bins.\n    empty_bin_bonus = (1 / (bins_remain_cap + 0.000001)) * 0.1  # Scale down the bonus\n\n    priorities = priorities + empty_bin_bonus # Add the bonus to all bins, but invalid bins remain with -inf\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic explicitly handles invalid bins by assigning them a very low priority (-np.inf) and calculates a priority score based on both the packing density and a \"tight fit\" bonus, while the worst only calculates priorities based on the log of the ratio of item size to remaining capacity. (2nd best) vs (second worst) are identical, using constants invalid_priority and epsilon. Comparing (1st) vs (2nd), we see the best uses inline constants while second uses arguments. (3rd) vs (4th) are identical to 2nd and 1st respectively. Comparing (second worst) vs (worst) show the same algorithm. Overall: The better heuristics prioritize a combination of factors, including packing density, tight fit, and handling of invalid bins, while the worse heuristics focus solely on the ratio of item size to remaining capacity. The top heuristics are concise, while others include unnecessary imports. Heuristics that adapt to item size perform better.\n- \nOkay, I understand the goal. We need to redefine \"Current self-reflection\" to be *effective* for designing heuristics, focusing on actionable advice while explicitly avoiding the pitfalls of the \"Ineffective self-reflection\" examples. These examples suffer from being too specific (bin packing only) and too vague (documentation, fine-tuning parameters without concrete guidance).\n\nHere's a redefinition:\n\n*   **Keywords:** Generalizability, Actionable, Problem-Specific, Evaluation.\n*   **Advice:** Design heuristics using problem-specific knowledge and measurable objectives. Prioritize adaptability to diverse problem instances. Clearly define success metrics *before* implementation.\n*   **Avoid:** Overly narrow examples. Vague advice on parameters without guidance. Focusing on trivial concerns (division by zero).\n*   **Explanation:** Heuristics should leverage deep understanding of the problem. Instead of generic statements, focus on testable hypotheses based on that understanding. Emphasize *evaluating* the heuristic's performance against clearly defined goals, which will guide further refinements and parameter adjustments.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}