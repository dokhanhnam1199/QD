```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors with dynamic weights.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # 3. Capacity utilization: Higher remaining capcity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Introduce a small bin preference, but only if enough space remains
    small_bin_preference = np.where(bins_remain_cap[valid_bins] < 0.6, 0.2, 0)

    # 5. Introduce penalty for bins that are almost full to prevent tiny items being left out at the end, this encourages filling bins more evenly
    almost_full_penalty = np.where(remaining_space < 0.1, -0.3, 0)

    # Adaptive Weighting (crucial for improvement).  Adjust weights based on item size
    # Empirically, fill_ratio becomes less important for very small items.
    if item < 0.2:
        fill_ratio_weight = 0.3
        remaining_space_penalty_weight = 0.4
        capacity_utilization_weight = 0.3
    elif item > 0.8:
        fill_ratio_weight = 0.5
        remaining_space_penalty_weight = 0.3
        capacity_utilization_weight = 0.2
    else:
        fill_ratio_weight = 0.4
        remaining_space_penalty_weight = 0.3
        capacity_utilization_weight = 0.3

    # Combine the factors to create the priority score with adaptive weights.
    priorities[valid_bins] = (fill_ratio_weight * fill_ratio +
                               remaining_space_penalty_weight * remaining_space_penalty +
                               capacity_utilization_weight * capacity_utilization +
                               small_bin_preference + almost_full_penalty
                               )
    return priorities
```
