```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Reward bins that can fit the item perfectly, or almost perfectly
        diff = bins_remain_cap - item
        priorities[valid_bins] = np.exp(-np.abs(diff[valid_bins]))

        # Slightly prefer bins with less remaining capacity *after* placement to avoid leaving huge gaps.
        post_fill_remain = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += (1 - (post_fill_remain / bins_remain_cap[valid_bins]).clip(0, 1)) * 0.5 # Scale to avoid overpowering original reward. clip for safe operation
    else:
        #If there are no valid bins, find the bin with smallest remaining capacity
        priorities[:] = -bins_remain_cap # Prefer bins with smallest remaining space for the new item. This will minimize wastage if a new bin needs to be open.
    return priorities
```
