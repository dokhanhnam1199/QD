```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # 3. Capacity utilization: Higher remaining capacity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Introduce a bin-selection pressure that prefers bins close to full but not completely full.
    # This is a modification of the space_balance idea, implemented using a Gaussian-like function.
    # The ideal remaining space is a fraction of the bin capacity (e.g., 10%).
    ideal_remaining_space = 0.1 * bins_remain_cap[valid_bins]
    space_pressure = np.exp(-((remaining_space - ideal_remaining_space) ** 2) / (2 * (0.2 * bins_remain_cap[valid_bins]) ** 2))

    # 5. Item size penalty: Penalize bins if the item is too small relative to the bin's remaining capacity.
    # This encourages the algorithm to fill up larger bins with larger items first.
    item_size_penalty = np.clip(item / bins_remain_cap[valid_bins], 0, 1) # Scale the penalty to [0, 1]

    # Combine the factors to create the priority score. Experiment with different weights.
    priorities[valid_bins] = (
        1.0 * fill_ratio +
        0.5 * remaining_space_penalty +
        0.7 * capacity_utilization +
        0.8 * space_pressure +
        0.3 * item_size_penalty # Add item_size_penalty
    )
    #priorities[valid_bins] = fill_ratio + remaining_space_penalty

    return priorities
```
