```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]
    
    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # 3. Capacity utilization: Higher remaining capcity utilization.

    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    #4. Try to balance between full fill and not full fill by giving higher score if remainin space > item/2, else lower.
    space_balance = np.where(remaining_space > item/2, 0.5, 0.1)

    #5. Item size relative to average remaining capacity of valid bins.
    avg_remaining_capacity = np.mean(bins_remain_cap[valid_bins])
    item_vs_avg = item / (avg_remaining_capacity + 0.000001)

    #6. Penalize bins that, after adding the item, would have remaining capacity less than the smallest item seen so far (if known/trackable).  This encourages more balanced bin usage
    # For this simulation just consider smallest_item_size = 0, since we don't track it

    #7. Give preference to bins where item fits best, but avoid completely full bins.
    fit_quality = np.exp(-remaining_space)
    # Combine the factors to create the priority score.

    # Weighting based on experimentation.
    w_fill_ratio = 0.2
    w_remaining_space_penalty = 0.3
    w_capacity_utilization = 0.2
    w_space_balance = 0.1
    w_item_vs_avg = 0.1
    w_fit_quality = 0.1

    priorities[valid_bins] = (w_fill_ratio * fill_ratio +
                               w_remaining_space_penalty * remaining_space_penalty +
                               w_capacity_utilization * capacity_utilization +
                               w_space_balance * space_balance +
                               w_item_vs_avg * item_vs_avg +
                               w_fit_quality * fit_quality)
    #priorities[valid_bins] = fill_ratio + remaining_space_penalty

    return priorities
```
