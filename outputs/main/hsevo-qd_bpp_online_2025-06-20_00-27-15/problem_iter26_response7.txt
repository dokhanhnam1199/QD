```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins combining fill ratio, space penalty, and item size,
    with adaptive weighting based on remaining space.
    """
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item/2, 0.3, 0.1)
    item_size_weight = item

    # Adaptive weighting based on remaining space
    adaptive_weight = np.clip(1 - (remaining_space / bins_remain_cap[valid_bins]), 0.1, 0.9) #Scale from 0.1 to 0.9

    priorities[valid_bins] = (fill_ratio * adaptive_weight +
                                remaining_space_penalty * (1- adaptive_weight) +
                                capacity_utilization * adaptive_weight +
                                space_balance  + item_size_weight)
    return priorities
```
