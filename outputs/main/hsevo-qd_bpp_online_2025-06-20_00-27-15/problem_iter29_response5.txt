```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    priorities[valid_bins] = fill_ratio + remaining_space_penalty

    # Add a bonus for bins that are nearly full after packing the item
    almost_full_threshold = 0.95
    almost_full_bonus = 1.0

    filled_percentage = 1 - (remaining_space / bins_remain_cap[valid_bins])
    priorities[valid_bins] += np.where(filled_percentage > almost_full_threshold, almost_full_bonus, 0)

    return priorities
```
