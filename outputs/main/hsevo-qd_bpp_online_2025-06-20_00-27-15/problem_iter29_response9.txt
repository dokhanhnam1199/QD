```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fill ratio, remaining space, and item size."""

    valid_bins = bins_remain_cap - item >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Adaptive weight based on item size relative to bin sizes
    item_size_ratio = item / np.mean(bins_remain_cap)
    adaptive_weight = 1.0
    if item_size_ratio > 0.7:
        adaptive_weight = 1.2
    elif item_size_ratio < 0.3:
        adaptive_weight = 0.8

    # Introduce small constant to prevent division by zero in the reciprocal
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Space balance: higher score if remaining space > item/2
    space_balance = np.where(remaining_space > item / 2, 0.5, 0.1)
    
    priorities[valid_bins] = adaptive_weight * fill_ratio + remaining_space_penalty + capacity_utilization + space_balance
    

    return priorities
```
