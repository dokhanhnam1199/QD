```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item
    
    #1. Fill ratio
    fill_ratio = item / bins_remain_cap[valid_bins]
    
    #2. Remaining space penalty
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    
    #3. Capacity utilization
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    #4. Space balance: Aim for bins to have similar fill levels
    space_balance = np.where(remaining_space > item/2, 0.5, 0.1)
    
    #5. Adaptive weight based on item size -  Larger items need more careful placement
    item_size_ratio = item / np.mean(bins_remain_cap)
    adaptive_weight = 1.0
    if item_size_ratio > 0.7:
        adaptive_weight = 1.2  # Penalize very full bins more strongly
    elif item_size_ratio < 0.3:
        adaptive_weight = 0.8 # Be less picky when items are small
        
    #6. Bin Diversity Penalty: Penalize bins with very similar remaining capacities to encourage variance
    capacity_std = np.std(bins_remain_cap)
    if capacity_std > 0:
        capacity_diversity_score = 1 - (np.abs(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap)) / capacity_std)
        capacity_diversity_penalty = np.clip(capacity_diversity_score, 0, 1)
    else:
        capacity_diversity_penalty = 0 # if all capacities same, no diversity penalty
    
    #7. Introduce a bin-level fill target to encourage balanced filling.  Target 75% fill.
    bin_fill_target = 0.75
    fill_from_empty_penalty = np.where(bins_remain_cap[valid_bins] == bins_remain_cap.max(), 0.2, 0) #prefer filling empty bins initially
    
    fill_target_diff = np.abs(1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap.max() - bin_fill_target)
    fill_target_penalty = 1 / (fill_target_diff + 0.00001)
    
    #8. Introduce Penalty for bins almost full. Encourages use of emptier bins, creates space for future large objects.
    almost_full_threshold = 0.9
    almost_full_penalty = np.where((bins_remain_cap[valid_bins] - item) / bins_remain_cap.max() < (1-almost_full_threshold), -0.3, 0)
    
    #9. Sort remaining capacities and add a bonus to bins close to the median
    sorted_caps = np.sort(bins_remain_cap)
    median_cap = np.median(bins_remain_cap)
    median_proximity_bonus = np.exp(-np.abs(bins_remain_cap[valid_bins] - median_cap) / (0.1 * bins_remain_cap.max())) * 0.1 # gaussian bonus near median

    #10. Item Fragmentation penalty
    # Calculate the potential fragmentation this item will introduce
    # If the remaining capacity after placing the item is less than some fraction of the bin capacity, penalize it
    fragmentation_threshold = 0.2
    bin_capacity = bins_remain_cap.max()
    fragmentation_penalty = np.where(remaining_space / bin_capacity < fragmentation_threshold, -0.1, 0)

    #11. Adaptive Fill Target. Adjust fill target based on overall fill level of all bins
    # If bins are generally empty, aim for higher fill. If mostly full, be more conservative.
    average_fill = 1 - np.mean(bins_remain_cap) / bin_capacity
    adaptive_fill_target = bin_fill_target + 0.1 * (0.5 - average_fill) # Targets move towards 0.5

    #Recalculate fill target penalty with adaptive fill target
    fill_target_diff = np.abs(1 - (bins_remain_cap[valid_bins] - item) / bin_capacity - adaptive_fill_target)
    fill_target_penalty = 1 / (fill_target_diff + 0.00001)

    # Combine the factors to create the priority score.  Experiment with weights.
    priorities[valid_bins] = adaptive_weight * fill_ratio + remaining_space_penalty + capacity_utilization + space_balance + 0.1 * capacity_diversity_penalty + fill_from_empty_penalty + 0.05 * fill_target_penalty + almost_full_penalty + median_proximity_bonus + fragmentation_penalty
    return priorities
```
