```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Scoring valid bins
    # Prioritize bins with remaining capacity close to item size (Best Fit)
    # and also factor in fullness (item/bin_capacity). Add a small constant for stability.
    
    priorities[valid_bins] = (1 / (np.abs(remaining_space) + 0.000001)) + (item / bins_remain_cap[valid_bins])

    # Add a bonus for bins that are relatively empty, encouraging better space utilization
    # The emptier the bin, the higher the bonus.  This helps avoid creating too many almost-empty bins.
    empty_bin_bonus = (1 / (bins_remain_cap + 0.000001)) * 0.1  # Scale down the bonus

    priorities = priorities + empty_bin_bonus # Add the bonus to all bins, but invalid bins remain with -inf
    
    return priorities
```
