```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by black hole physics: the closer the item 'mass' is to the bin 'mass', the higher the 'gravitational pull' or priority.
    Also incorporates a 'resistance' factor if the bin is nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Avoid division by zero and potential infinities in the calculations
    bins_remain_cap = np.clip(bins_remain_cap, 1e-6, None)  # Ensure no remaining capacity is exactly zero
    item = max(item, 1e-6) #ensure no item size is exactly zero

    # Gravitational-like attraction: Inverse square of difference between item and remaining capacity.
    # Smaller difference = higher priority. Adding a small constant to prevent explosion.
    attraction = 1.0 / (1.0 + (item - bins_remain_cap)**2)

    # Resistance factor: Penalize bins that are nearly full after adding the item
    # Bins with remain_cap close to item size get penalized to prefer completely empty ones
    resistance = np.exp(-(bins_remain_cap - item))

    # Combine attraction and resistance to produce a priority score
    priorities = attraction * resistance # Element-wise multiplication

    return priorities
```
