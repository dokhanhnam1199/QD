```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities considering fill ratio, remaining space, capacity utilization, and item size."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Item size weighting
    item_size_weight = min(1.0, item / np.mean(bins_remain_cap)) if np.mean(bins_remain_cap) > 0 else 1.0
    fill_ratio_weighted = fill_ratio * item_size_weight

    # Adaptive space balance. Adjust balance based on item size.
    space_balance = np.where(remaining_space > item / 2, 0.5 * item_size_weight, 0.1 * item_size_weight)

    priorities[valid_bins] = fill_ratio_weighted + remaining_space_penalty + capacity_utilization + space_balance
    return priorities
```
