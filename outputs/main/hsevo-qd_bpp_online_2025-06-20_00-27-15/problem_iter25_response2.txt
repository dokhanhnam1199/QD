import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                nearly_full_threshold: float = 1.7323919429762338,
                nearly_full_penalty_value: float = 0.17952494991634282,
                fill_ratio_weight: float = 0.13416198750807606,
                remaining_space_penalty_weight: float = 0.9306042199367774,
                capacity_utilization_weight: float = 0.8568517708218352,
                best_fit_score_weight: float = 0.06805956295043147,
                remaining_space_epsilon: float = 3.269351501584095e-05,
                best_fit_exponent: float = 7.316822505064302) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + remaining_space_epsilon)

    # 3. Capacity utilization: Higher remaining capcity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Introduce a "best fit" component: prioritize bins where the remaining space is small but non-zero.
    best_fit_score = np.exp(-best_fit_exponent * remaining_space / bins_remain_cap[valid_bins])  # Exponential decay

    # 5. Introduce a penalty for bins that are already nearly full
    nearly_full_penalty = np.where(bins_remain_cap[valid_bins] < nearly_full_threshold * item, nearly_full_penalty_value, 0.0)

    # Combine the factors to create the priority score, adjusting weights.
    priorities[valid_bins] = (
        fill_ratio_weight * fill_ratio +
        remaining_space_penalty_weight * remaining_space_penalty +
        capacity_utilization_weight * capacity_utilization +
        best_fit_score_weight * best_fit_score -
        nearly_full_penalty  # Subtract the penalty
    )

    return priorities
