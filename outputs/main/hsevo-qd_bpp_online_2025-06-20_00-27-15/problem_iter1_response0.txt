```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Best Fit: Prioritize bins where the remaining capacity after placing the item is small.
    remaining_capacity_after_fit = bins_remain_cap - item
    
    # 3. Reward utilization: Prefer bins which have already been used (aren't full)
    already_used = bins_remain_cap < 1 # Assumes bin size is 1
    
    priorities[feasible_bins] = 1 / (remaining_capacity_after_fit[feasible_bins] + 1e-9) # add a small constant to avoid division by zero
    
    # Increase priority of already used bins
    priorities[already_used & feasible_bins] *= 2 # Make already used feasible bins more attractive.

    return priorities
```
