```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space, and item-size weighting."""

    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify valid bins (those that can accommodate the item).
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # If no valid bins exist, return the initial priorities.
    if not np.any(valid_bins):
        return priorities

    # Set initial priority of 0 for valid bins.
    priorities[valid_bins] = 0

    # Calculate remaining space in valid bins after packing the item.
    remaining_space = bins_remain_cap[valid_bins] - item

    # Calculate fill ratio for valid bins (item size / bin capacity).
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Introduce item size weighting. Larger items get more weight.
    item_weighting = item

    # Remaining space penalty: higher penalty if less space remains.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # Capacity utilization score:  Higher the utilization, better the score.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Combine factors to compute the priority score, scale each value with item_weighting.
    priorities[valid_bins] = item_weighting * (fill_ratio + remaining_space_penalty + capacity_utilization)

    return priorities
```
