```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space, and bin diversity."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    # Adaptive weight based on item size
    item_size_ratio = item / np.mean(bins_remain_cap)
    adaptive_weight = 1.0
    if item_size_ratio > 0.7:
        adaptive_weight = 1.2
    elif item_size_ratio < 0.3:
        adaptive_weight = 0.8

    # Bin Diversity Penalty: Penalize bins with very similar remaining capacities.
    capacity_std = np.std(bins_remain_cap)
    if capacity_std > 0:
        capacity_diversity_score = 1 - (np.abs(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap)) / capacity_std)
        capacity_diversity_penalty = np.clip(capacity_diversity_score, 0, 1)
    else:
        capacity_diversity_penalty = 0
        
    best_fit_score = np.exp(-10 * remaining_space / bins_remain_cap[valid_bins])
    nearly_full_penalty = np.where(bins_remain_cap[valid_bins] < 2 * item, 0.2, 0.0)

    priorities[valid_bins] = adaptive_weight * fill_ratio + 0.2*remaining_space_penalty + capacity_utilization + 0.1 * capacity_diversity_penalty + 0.2*best_fit_score - nearly_full_penalty
    return priorities
```
