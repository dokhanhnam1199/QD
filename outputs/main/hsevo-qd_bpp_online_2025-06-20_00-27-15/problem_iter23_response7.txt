```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, remaining space penalty, and adaptive item size weight."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Adaptive item size weight: Item is "large" relative to bin if > 50% cap
    item_size_weight = np.where(item / bins_remain_cap[valid_bins] > 0.5, 1.2, 0.8)

    space_balance = np.where(remaining_space > item/2, 0.5, 0.1)

    priorities[valid_bins] = fill_ratio * item_size_weight + remaining_space_penalty + capacity_utilization + space_balance

    return priorities
```
