```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the force of attraction between radioactive elements; favouring 'near fits', while discouraging large empty spaces.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if item <= capacity:
            # Calculate wasted space if item is placed in this bin
            wasted_space = capacity - item
            
            # Apply a sigmoid-like function to prioritize bins with smaller wasted space.
            # This encourages filling bins nearly to capacity, mimicking atomic packing.
            priorities[i] = 1 / (1 + np.exp(5 * wasted_space/np.max(bins_remain_cap)))  # Normalized and scaled wasted space.
            
            # Add a small bonus for bins that are at least half-full *after* adding the item.
            # Further encouraging utilization of bins.
            if item >= capacity/2 :
                 priorities[i] += 0.2 # Add this only if item would occupy half of capacity
            # Avoid assigning high priority to bins that perfectly fit unless no other choice
            # by shrinking priority for a perfect fit:
            if wasted_space < 0.001:  # Arbitrary tolerance for "perfect fit"
               priorities[i] -= 0.1 # only shrink when it is actually near to zero.


        else:
            # If the item doesn't fit, assign a very low priority.
            priorities[i] = -1e9

    return priorities
```
