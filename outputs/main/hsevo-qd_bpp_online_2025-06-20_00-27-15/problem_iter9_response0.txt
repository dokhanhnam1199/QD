```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Scoring valid bins: combination of fill ratio, remaining space, and a penalty for large remaining spaces
    # The fill ratio encourages filling bins as much as possible.
    # The inverse of remaining space encourages using bins with less remaining space.
    # The exponential penalty discourages leaving large gaps in bins (to avoid later items not fitting).
    
    fill_ratio = item / bins_remain_cap[valid_bins]
    space_penalty = np.exp(-5 * remaining_space / bins_remain_cap[valid_bins])  # Exponential penalty

    priorities[valid_bins] = fill_ratio + (1 / (remaining_space + 0.000001)) + space_penalty

    return priorities
```
