```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, remaining space penalty, and capacity utilization with adaptive weights."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    valid_capacities = bins_remain_cap[valid_bins]
    remaining_space = valid_capacities - item

    fill_ratio = item / valid_capacities
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (valid_capacities - remaining_space) / valid_capacities

    item_size_ratio = item / np.mean(bins_remain_cap)
    adaptive_weight = 1.0
    if item_size_ratio > 0.7:
        adaptive_weight = 1.2
    elif item_size_ratio < 0.3:
        adaptive_weight = 0.8

    priorities[valid_bins] = adaptive_weight * fill_ratio + remaining_space_penalty + capacity_utilization

    return priorities
```
