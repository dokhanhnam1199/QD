```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fill ratio, remaining space, and item size adaptively."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Adaptive space balance based on item size
    space_balance_threshold = 0.5 # Set as constant
    space_balance_high = 0.4
    space_balance_low = 0.1
    space_balance = np.where(remaining_space > space_balance_threshold * item, space_balance_high, space_balance_low)

    # Adaptive weight for fill ratio based on item size. Larger item favors better fill.
    item_size_weight = min(1.0, item)  # Normalize item size to [0, 1]
    fill_ratio_weight = 0.5 + 0.5 * item_size_weight # Range [0.5, 1.0]

    priorities[valid_bins] = fill_ratio_weight * fill_ratio + remaining_space_penalty + capacity_utilization + space_balance
    return priorities
```
