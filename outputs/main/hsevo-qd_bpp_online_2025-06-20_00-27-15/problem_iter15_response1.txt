```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes a more balanced bin utilization and avoids
    fragmentation by considering both fill ratio and remaining space,
    dynamically adjusting weights based on item size and bin capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Fill Ratio: Higher is better, but avoid over-filling.
    fill_ratio = item / bins_remain_cap[valid_bins]
    
    # Remaining Space Penalty: Smaller is better, but not too small.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # Capacity Utilization: How much of the bin's capacity is used.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Dynamic Weighting: Adjust weights based on item size and bin capacities.
    # If item is large, prioritize bins with larger remaining capacity.
    # If item is small, prioritize bins that are already somewhat full.
    item_size_factor = item  # Scale with item size.

    # Adjust penalty strength based on remaining space relative to item size.
    space_relative_penalty = np.where(remaining_space > item / 2, 0.2, 0.8)  # Penalize too much or too little space

    # Final priority score with dynamically adjusted weights.
    priorities[valid_bins] = (
        fill_ratio * (1 + item_size_factor) +  # Boost fill ratio if item is large
        remaining_space_penalty * space_relative_penalty +
        capacity_utilization
    )
    
    return priorities
```
