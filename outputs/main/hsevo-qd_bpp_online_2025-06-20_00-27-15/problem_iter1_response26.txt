```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Takes into account remaining capacity and penalty for wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: higher for bins with less *wasted* space after packing.
            # Emphasize bins that are filled up more completely.
            wasted_space = cap - item
            priorities[i] = (1 / (wasted_space + 1e-9))  # Avoid division by zero

            # Add a small bonus if the item fits *perfectly* or nearly perfectly
            if wasted_space < 0.1: #arbitrary small number to tune, 0.1 to start. Avoids perfect fit condition, better for robustness.
                priorities[i] += 10  # Tune this bonus.

            #Penalty for higher empty space, discourages packing if many better choices
            priorities[i] -= (cap-item) / np.sum(bins_remain_cap[bins_remain_cap>=item]+1e-9)

        else:
            priorities[i] = -np.inf  # Not feasible, should be avoided.

    return priorities
```
