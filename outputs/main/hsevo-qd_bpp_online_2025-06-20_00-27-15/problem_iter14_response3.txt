```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space, item size."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item/2, 0.3, 0.1)
    item_size_weight = item
    
    # Adaptive weighting based on item size ratio
    item_size_ratio = item / np.max(bins_remain_cap)
    fill_ratio_weight = 1.0 + item_size_ratio * 0.5
    remaining_space_penalty_weight = 1.0 - item_size_ratio * 0.3
    capacity_utilization_weight = 0.7 + item_size_ratio * 0.2

    priorities[valid_bins] = (fill_ratio_weight * fill_ratio +
                               remaining_space_penalty_weight * remaining_space_penalty +
                               capacity_utilization_weight * capacity_utilization +
                               space_balance + item_size_weight)

    return priorities
```
