```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, remaining space, and capacity utilization for priority.
    Dynamically weights remaining space based on item size.
    """

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    # Dynamic weight for remaining space. Larger items get a higher penalty
    space_weight = np.clip(item / np.mean(bins_remain_cap[valid_bins]), 0.1, 1.0)
    remaining_space_penalty = space_weight / (remaining_space + 1e-6)

    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization
    return priorities
```
