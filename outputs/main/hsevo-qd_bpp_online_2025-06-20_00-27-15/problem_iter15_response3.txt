```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]
    
    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # 3. Capacity utilization: Higher remaining capacity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    #4. Try to balance between full fill and not full fill by giving higher score if remaining space > item/2, else lower.
    space_balance = np.where(remaining_space > item/2, 0.3, 0.1) # Tweak space_balance values

    #5. Item Size Consideration: If item is large, prioritize bins with more space.  If item is small prioritize bins with less space.

    item_size_factor = np.where(item > np.mean(bins_remain_cap), remaining_space, 1/(remaining_space + 0.000001))

    #6. Avoid bins that are almost full (reduces fragmentation).
    almost_full_penalty = np.where(remaining_space < 0.1 * bins_remain_cap[valid_bins], -0.2, 0)
    

    # Combine the factors to create the priority score.  Adjust weights empirically.
    priorities[valid_bins] = (0.4 * fill_ratio +
                               0.3 * remaining_space_penalty +
                               0.15 * capacity_utilization +
                               0.05 * space_balance +
                               0.1 * item_size_factor +
                               almost_full_penalty)

    return priorities
```
