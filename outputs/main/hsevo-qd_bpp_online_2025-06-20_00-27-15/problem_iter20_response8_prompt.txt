{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item.\n    new_capacities = bins_remain_cap - item\n\n    # Identify bins that can accommodate the item.\n    valid_bins = new_capacities >= 0\n\n    # Initialize priorities with a very low value for invalid bins.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Prioritize bins that can fit the item\n    if not np.any(valid_bins):\n        return priorities\n\n    priorities[valid_bins] = 0\n\n    # Calculate remaining space after packing for valid bins\n    remaining_space = bins_remain_cap[valid_bins] - item\n\n    # Scoring valid bins: Introduce a combination of factors.\n    # 1. Fill ratio: How much of the bin's capacity is used by the item.\n    fill_ratio = item / bins_remain_cap[valid_bins]\n    \n    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.\n    remaining_space_penalty = 1 / (remaining_space + 0.000001)\n\n    # 3. Capacity utilization: Higher remaining capcity utilization.\n\n    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]\n    \n    #4. Try to balance between full fill and not full fill by giving higher score if remainin space > item/2, else lower.\n    space_balance = np.where(remaining_space > item/2, 0.3, 0.1) #Reduced weighting\n\n    #5. Introduce item size weighting. Larger items should be packed first.\n    item_size_weight = item\n\n    # Combine the factors to create the priority score.\n    # Reduced the weightage to space_balance\n    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization + space_balance + item_size_weight\n    #priorities[valid_bins] = fill_ratio + remaining_space_penalty\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. How full the bin would become (packing density).\n    2. A \"tight fit\" bonus, preferring bins where the remaining space is small but non-zero.\n    3. A penalty for bins that would become too empty.\n    4. Adaptive parameter adjustments based on item size relative to bin size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item.\n    new_capacities = bins_remain_cap - item\n\n    # Identify bins that can accommodate the item.\n    valid_bins = new_capacities >= 0\n\n    # Initialize priorities with a very low value for invalid bins.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.\n\n    # Only calculate scores for valid bins\n    valid_capacities = bins_remain_cap[valid_bins]\n    valid_new_capacities = new_capacities[valid_bins]\n\n    # Calculate packing density (higher is better)\n    packing_density = item / valid_capacities\n\n    # Tight fit bonus (remaining space is small, higher is better)\n    # Avoid division by zero by adding a small constant\n    tight_fit_bonus = 1 / (valid_new_capacities + 0.000001)\n\n    # Penalty for bins that become too empty (lower is better)\n    empty_penalty = (valid_new_capacities / np.max(bins_remain_cap))  # Normalize to bin size\n\n    # Adaptive parameter adjustments based on item size\n    item_size_ratio = item / np.max(bins_remain_cap) # Normalize item size\n\n    # Adjust weights based on item size ratio\n    density_weight = 1.0 + item_size_ratio * 0.5  # Increase importance for larger items\n    tight_fit_weight = 1.0 - item_size_ratio * 0.3  # Decrease importance for larger items, prioritize utilization\n    empty_penalty_weight = 0.5 + item_size_ratio * 0.2 # Increase importance for larger items\n    \n    # Combine factors with weights\n    priorities[valid_bins] = (\n        density_weight * packing_density +\n        tight_fit_weight * tight_fit_bonus -\n        empty_penalty_weight * empty_penalty\n    )\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st uses a combination of fill ratio, remaining space penalty, capacity utilization, space balance and item size weighting, while the 20th directly calculates the negative log of the ratio of item size to remaining capacity. 1st prioritizes more factors contributing to overall packing efficiency.\n\nComparing (2nd) vs (19th), we see the 2nd uses combination of fill ratio, remaining space penalty, capacity utilization and space balance, while the 19th directly calculates the negative log of the ratio of item size to remaining capacity. 2nd prioritizes more factors contributing to overall packing efficiency.\n\nComparing (3rd) vs (18th), we see the 3rd uses a combination of fill ratio, remaining space penalty, capacity utilization and space balance, while the 18th directly calculates the negative log of the ratio of item size to remaining capacity. 3rd prioritizes more factors contributing to overall packing efficiency.\n\nComparing (1st) vs (2nd), we see the 1st introduces item size weighting, while the 2nd does not. Both consider fill ratio, remaining space penalty, capacity utilization, and space balance. The 1st one slightly reduces the weighting of `space_balance` which may lead to a more balanced result when item size is considered.\n\nComparing (3rd) vs (4th), they are identical. This suggests that their relative ranking is arbitrary, or there were no effective change.\n\nComparing (second worst) vs (worst), they are identical. This suggests that their relative ranking is arbitrary, or there were no effective change.\n\nComparing (10th) vs (11th), 10th takes `invalid_priority` and `epsilon` as parameters to allow more flexible tuning and avoids hardcoding, the 11th one has hardcoded values.\n\nComparing (13th) vs (14th), they are identical. This suggests that their relative ranking is arbitrary, or there were no effective change.\n\nComparing (15th) vs (16th), they are identical. This suggests that their relative ranking is arbitrary, or there were no effective change.\n\nComparing (17th) vs (16th), they are identical. This suggests that their relative ranking is arbitrary, or there were no effective change.\n\nOverall: The better heuristics consider more factors (fill ratio, remaining space, capacity utilization, space balance, item size) in a combined manner, often with tunable parameters. Simpler heuristics that rely on a single metric like log ratio tend to perform worse. Introducing adaptive weighting based on item size relative to bin size appears to improve performance. Penalizing almost full bins and empty bins improves performance too.\n- \nOkay, let's refine \"Current Self-Reflection\" for designing better heuristics, focusing on avoiding the pitfalls demonstrated in the \"Ineffective Self-Reflection\" examples.  The goal is to provide actionable advice applicable beyond specific problems like bin packing.\n\nHere's a redefined approach:\n\n*   **Keywords:** Multifaceted, Adaptability, Validation, Parsimony.\n\n*   **Advice:** Design heuristics considering multiple, relevant factors *and their interactions.* Implement *adaptive mechanisms* based on input features. Rigorously *validate* each component's contribution.\n\n*   **Avoid:** Oversimplification, premature complexity, problem-specific examples (e.g., bin packing), generic statements (e.g., \"clear documentation\"), focusing solely on fullness/emptiness.\n\n*   **Explanation:** Effective heuristics balance multiple criteria. Adaptability allows optimization across diverse inputs. Validation ensures each component contributes. Parsimony prevents overfitting and maintains efficiency. Focus on *general principles* applicable across various heuristic design problems, rather than specific examples.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}