```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Remaining space penalty:
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # Capacity utilization:
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Introduce a dynamic weight for remaining space based on item size
    space_weight = np.clip(item / np.mean(bins_remain_cap), 0.1, 0.9)

    # Adjusted remaining space penalty: Give higher score if remaining space is small relative to the item size
    adjusted_remaining_space_penalty = np.where(remaining_space < space_weight * item, 1 / (remaining_space + 0.000001), 0) # Only apply penalty if remaining space is small

    # Combined priority score with adaptive weights
    priorities[valid_bins] = (0.4 * fill_ratio + 0.3 * adjusted_remaining_space_penalty + 0.3 * capacity_utilization)

    return priorities
```
