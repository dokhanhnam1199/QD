```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Heuristics: Mimicking simulated annealing (but simpler and tailored).
    Prioritize bins that have enough space, but also with a bit of randomness
    to occasionally escape local optima. Avoid bins that are too full (too little remaining).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, filter out bins that don't have enough space
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):  # if no bin can hold the item, prioritize the fullest
       return bins_remain_cap / np.sum(bins_remain_cap)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # For valid bins: calculate a score.  Higher is better
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Prioritize based on how much space is *left* *after* adding the item
    # We want to avoid leaving too much unused space, but also avoid bins where we nearly overfill.
    
    space_efficiency = 1.0 / (remaining_space + 0.0001)  # Avoid division by zero, penalize large remainders
    
    # Introduce some randomness, less when near full. More empty, more exploration.
    temperature = np.mean(bins_remain_cap[valid_bins])
    randomness = np.random.rand(len(remaining_space)) * temperature / (remaining_space + 1) 

    priorities[valid_bins] = space_efficiency + randomness
    return priorities
```
