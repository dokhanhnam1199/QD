```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit the item, assign a low priority to all bins. In a real online setting, a new bin would need to be created. For now, we assign zero so the caller can handle it appropriately
        return priorities

    # 2. Remaining Capacity Utilization:  Prioritize bins that can accommodate the item
    #    but leave minimal remaining space (to reduce fragmentation).

    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Exclude infeasible bins when finding the minimum
    min_remaining = np.min(remaining_after_fit)
    
    # Give higher priority to bins closest to leaving the least space. Use an exponential decay to make the penalty larger the more space is left unused
    priorities[feasible_bins] = np.exp(- (remaining_after_fit[feasible_bins] - min_remaining))
    
    #3. Full Bins: Small bonus to bins which are 'almost full' after packing to encourage usage
    almost_full = (bins_remain_cap > item) & ((bins_remain_cap - item) < 0.1) # threshold can be experimented with
    priorities[almost_full] += 0.5 #small bonus

    return priorities
```
