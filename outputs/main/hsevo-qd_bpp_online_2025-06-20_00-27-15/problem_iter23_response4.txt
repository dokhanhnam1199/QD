```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space penalty, capacity utilization, and space balance."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item/2, 0.5, 0.1)

    # Adaptive fill ratio weight based on item size relative to average bin capacity
    avg_bin_cap = np.mean(bins_remain_cap)
    fill_ratio_weight = min(1.0, item / avg_bin_cap)  # Scales down weight if item is large

    priorities[valid_bins] = fill_ratio_weight * fill_ratio + remaining_space_penalty + capacity_utilization + space_balance
    return priorities
```
