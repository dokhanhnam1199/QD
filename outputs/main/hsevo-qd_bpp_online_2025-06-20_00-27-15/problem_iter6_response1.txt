```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates multiple factors and adaptive scaling to improve
    performance in online bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # Filter out bins with not enough cap
    valid_bins_indices = np.where(valid_bins)[0]

    if len(valid_bins_indices) == 0:
        return priorities

    # --- Scoring for valid bins ---

    # 1. Capacity utilization score (higher is better - aim for full bins)
    capacity_utilization = item / bins_remain_cap[valid_bins]

    # 2. Remaining space score (lower is better, but avoid being too greedy; penalize near-empty bins)
    remaining_space = bins_remain_cap[valid_bins] - item
    remaining_space_score = 1 / (remaining_space + 0.000001)

    # 3. Balance score (penalizes bins that are already very full or very empty) - helps with load balancing
    bin_fullness = 1 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) # scale to [0,1]
    balance_score = np.abs(bin_fullness - 0.5) # closer to 0 is better, closer to 0.5 is worst.
    balance_score = 1-balance_score
    
    # Adaptive scaling factors - these could be tuned based on instance characteristics
    alpha = 0.5
    beta = 0.3
    gamma = 0.2
    

    # Combine the scores with adaptive weights
    priorities[valid_bins] = (alpha * capacity_utilization) + (beta * remaining_space_score) + (gamma*balance_score)

    return priorities
```
