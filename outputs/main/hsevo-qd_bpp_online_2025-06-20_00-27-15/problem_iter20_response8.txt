```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, remaining space, and adaptive item size weighting."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    valid_caps = bins_remain_cap[valid_bins]
    remaining_space = valid_caps - item
    
    fill_ratio = item / valid_caps
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    item_size_ratio = item / np.max(bins_remain_cap)
    
    fill_ratio_weight = 1.0 + item_size_ratio * 0.5
    remaining_space_penalty_weight = 1.0 - item_size_ratio * 0.3

    priorities[valid_bins] = (fill_ratio_weight * fill_ratio + remaining_space_penalty_weight * remaining_space_penalty)
    return priorities
```
