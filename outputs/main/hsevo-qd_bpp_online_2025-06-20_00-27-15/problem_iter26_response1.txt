```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space, and bin fullness."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (np.abs(remaining_space) + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Combine factors with weights, emphasizing fill ratio and penalizing small remaining space.
    priorities[valid_bins] = fill_ratio + 0.5 * remaining_space_penalty + 0.25 * capacity_utilization #adjust the weights here

    #bonus for filling empty bins
    empty_bin_bonus = (1 / (bins_remain_cap + 0.000001)) * 0.1
    priorities = priorities + empty_bin_bonus
    
    return priorities
```
