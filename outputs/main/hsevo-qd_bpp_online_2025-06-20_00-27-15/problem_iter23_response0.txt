```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, remaining space, and adaptive item-size weighting."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    #Adaptive item size weighting to avoid over-filling bins with small items
    item_size_weight = np.clip(item / np.mean(bins_remain_cap), 0.1, 1.0)
    priorities[valid_bins] = fill_ratio * item_size_weight + remaining_space_penalty
    #priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + 0.000001))
    return priorities
```
