```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority score of adding item to each bin.
    Combines fill ratio, remaining space, capacity utilization, item size.
    """
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    item_size_weight = item

    # Adaptive Space balance based on item size
    if item > 0.5:  #If item occupies more than half of the bin capacity
        space_balance = np.where(remaining_space > item / 4, 0.3, 0.1)  #Tighten space balance, since a smaller item size is favoured
    else:
        space_balance = np.where(remaining_space > item / 2, 0.3, 0.1)  #Original weighting

    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization + space_balance + item_size_weight
    return priorities
```
