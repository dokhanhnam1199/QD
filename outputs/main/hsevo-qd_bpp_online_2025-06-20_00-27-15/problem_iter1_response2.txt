```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities to a very low value (representing unfavorable bins).
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Find bins that have enough capacity to fit the item.
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):  # Check if there are any valid bins before proceeding
        # Calculate the "fit ratio" - how well the item fits into the available space.
        fit_ratio = item / bins_remain_cap

        # Apply a sigmoidal function to emphasize bins with tighter fits, preventing excessive waste while still fitting.
        priorities[valid_bins] = 1 / (1 + np.exp(-10 * (fit_ratio[valid_bins] - 0.9))) # Favor utilization ratios near 0.9

        # Give a slight boost to bins that are nearly full after adding the item to favor closing out bins
        remaining_after_add = bins_remain_cap[valid_bins] - item
        nearly_full_bonus = np.exp(-10 * remaining_after_add)
        priorities[valid_bins] += nearly_full_bonus
    else:
        #if item doesn't fit into any existing bins penalize bins with less available space less harshly as to encourage new bin usage.
        priorities = -bins_remain_cap
    
    return priorities
```
