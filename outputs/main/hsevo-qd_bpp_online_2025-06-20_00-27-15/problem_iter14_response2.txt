```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities combining fill ratio, remaining space, and capacity utilization."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Item size weighting: Adjust fill ratio based on item size relative to bin capacity
    item_size_weight = min(1.0, item / np.mean(bins_remain_cap))  # Normalize item size
    weighted_fill_ratio = fill_ratio * (0.5 + 0.5 * item_size_weight) # adjust by item size

    priorities[valid_bins] = weighted_fill_ratio + 0.7*remaining_space_penalty + 0.3*capacity_utilization
    return priorities
```
