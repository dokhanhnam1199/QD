```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness, remaining space (best fit), and encourages empty bins."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0

    remaining_space = bins_remain_cap[valid_bins] - item
    
    priorities[valid_bins] = (1 / (np.abs(remaining_space) + 0.000001)) + (item / bins_remain_cap[valid_bins])

    empty_bin_bonus = (1 / (bins_remain_cap + 0.000001)) * 0.1

    priorities = priorities + empty_bin_bonus
    
    return priorities
```
