```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space.  A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # 3. Capacity utilization: Higher remaining capcity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Item size relative to bin capacity: prioritize bins where the item is a significant portion of the bin's capacity
    item_bin_ratio = item / bins_remain_cap[valid_bins]

    # 5. Balance between small and large remaining space
    space_balance = np.exp(-np.abs(remaining_space - item/2))

    # Adaptive Weighting: Dynamically adjust the weights based on remaining capacities
    # If bins are mostly full, emphasize remaining space penalty.
    # If bins are mostly empty, emphasize fill ratio.
    avg_remaining_capacity = np.mean(bins_remain_cap)
    if avg_remaining_capacity < 0.3:  # Adjust threshold as needed
        weight_fill_ratio = 0.2
        weight_remaining_space = 0.6
        weight_capacity_utilization = 0.1
        weight_item_bin_ratio = 0.1
        weight_space_balance = 0

    elif avg_remaining_capacity > 0.7:  # Adjust threshold as needed
        weight_fill_ratio = 0.6
        weight_remaining_space = 0.1
        weight_capacity_utilization = 0.1
        weight_item_bin_ratio = 0.1
        weight_space_balance = 0.1
    else:
        weight_fill_ratio = 0.35
        weight_remaining_space = 0.35
        weight_capacity_utilization = 0.1
        weight_item_bin_ratio = 0.1
        weight_space_balance = 0.1

    # Combine the factors to create the priority score with adaptive weights.
    priorities[valid_bins] = (
        weight_fill_ratio * fill_ratio +
        weight_remaining_space * remaining_space_penalty +
        weight_capacity_utilization * capacity_utilization +
        weight_item_bin_ratio * item_bin_ratio +
        weight_space_balance * space_balance
    )

    return priorities
```
