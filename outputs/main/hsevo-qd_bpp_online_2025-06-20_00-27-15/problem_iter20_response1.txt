```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space, and item size."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    item_size_weight = item

    #Adaptive weighting of fill ratio based on item size relative to bin capacity
    adaptive_fill_ratio = np.where(item / bins_remain_cap[valid_bins] > 0.5, fill_ratio * 1.2, fill_ratio * 0.8) #Reduced weighting

    priorities[valid_bins] = adaptive_fill_ratio + remaining_space_penalty + item_size_weight
    return priorities
```
