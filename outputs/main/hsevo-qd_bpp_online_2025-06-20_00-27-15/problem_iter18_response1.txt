```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    # 1. Fill ratio: How much of the bin's capacity is used by the item.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # 2. Remaining space penalty: Prefer bins that leave less unused space. A smaller remaining_space results in a higher score. Use reciprocal to avoid division by zero.
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # 3. Capacity utilization: Higher remaining capacity utilization.
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # 4. Introduce a dynamic weight for fill ratio based on item size. Larger items should prioritize fill ratio more.
    fill_ratio_weight = min(1.0, item)  # Weight increases with item size, capped at 1.0

    # 5. Introduce a penalty for bins that would be left nearly empty after packing. Avoids fragmenting bins.
    near_empty_penalty = np.where(remaining_space > 0.8 * bins_remain_cap[valid_bins], -0.2, 0.0)  # Penalize if remaining space > 80%

    # Combine the factors to create the priority score.  Adjust weights as needed.
    priorities[valid_bins] = (fill_ratio_weight * fill_ratio +
                              0.5 * remaining_space_penalty +  # Reduce weight of remaining space
                              0.7 * capacity_utilization + #Keep utilization high
                              near_empty_penalty) #apply penalty

    return priorities
```
