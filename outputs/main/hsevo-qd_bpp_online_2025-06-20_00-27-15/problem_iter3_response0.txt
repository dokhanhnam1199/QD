```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value (e.g., -np.inf) for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Scoring valid bins
    
    # 1. Fill-Rate Score: Prioritize bins that are already relatively full.
    fill_rate_score = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    
    # 2. Space-Efficiency Score: Penalize bins with a lot of wasted space.  Higher is better
    space_efficiency_score = 1 / (remaining_space + 0.000001)
    
    # 3. Balance Score: Try to balance between filling bins and preventing fragmentation.
    balance_score = (1 - (remaining_space / np.max(bins_remain_cap))) 
    

    # Combine the scores using a weighted sum. Experiment with weights.
    priorities[valid_bins] = (0.5 * fill_rate_score) + (0.3 * space_efficiency_score) + (0.2 * balance_score)

    return priorities
```
