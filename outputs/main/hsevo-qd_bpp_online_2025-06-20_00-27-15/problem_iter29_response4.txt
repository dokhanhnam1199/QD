```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, remaining space, diversity, and target fill."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    valid_caps = bins_remain_cap[valid_bins]

    fill_ratio = item / valid_caps
    remaining_space = bins_remain_cap[valid_bins] - item
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    capacity_std = np.std(bins_remain_cap)
    if capacity_std > 0:
        capacity_diversity_score = 1 - (np.abs(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap)) / capacity_std)
        capacity_diversity_penalty = np.clip(capacity_diversity_score, 0, 1)
    else:
        capacity_diversity_penalty = 0

    bin_fill_target = 0.75
    fill_target_diff = np.abs(1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap.max() - bin_fill_target)
    fill_target_penalty = 1 / (fill_target_diff + 0.00001)
        
    almost_full_threshold = 0.9
    almost_full_penalty = np.where((bins_remain_cap[valid_bins] - item) / bins_remain_cap.max() < (1-almost_full_threshold), -0.3, 0)

    priorities[valid_bins] = fill_ratio + remaining_space_penalty + 0.1 * capacity_diversity_penalty + 0.05 * fill_target_penalty + almost_full_penalty

    return priorities
```
