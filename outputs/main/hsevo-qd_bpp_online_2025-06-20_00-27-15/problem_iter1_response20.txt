```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can't fit the item get a very low priority.
    priorities[bins_remain_cap < item] = -np.inf
    
    # Rule 2: Prefer bins where the item fits best (smallest wasted space).
    # Penalize bins with large wasted space using an exponential function.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ensure bins that can't fit get a very low priority, even with potential numerical errors.
    priorities[bins_remain_cap >= item] = -np.exp(waste[bins_remain_cap >= item])
    
    # Rule 3: Add a small bonus to bins that are relatively full to avoid creating mostly empty bins.
    priorities += 0.1 * (1 - bins_remain_cap / bins_remain_cap.max())  # Assuming bins_remain_cap.max() > 0
    
    # Rule 4: If item size is small, give higher preference to bins with higher remaining cap
    if item < 0.2: # hyper parameter, can be tuned.
        priorities[bins_remain_cap >= item] += bins_remain_cap[bins_remain_cap >= item] * 0.05
        

    return priorities
```
