import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, invalid_priority: float = -8.584235136909644,
                remaining_space_epsilon: float = 0.0006728382817477606, large_space_balance: float = 0.7053061731887349,
                small_space_balance: float = 0.2355939418926551, large_space_threshold_ratio: float = 0.013944748221418113) -> np.ndarray:
    """Prioritizes bins using fill ratio, remaining space penalty, and space balance."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, invalid_priority)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + remaining_space_epsilon)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item * large_space_threshold_ratio, large_space_balance, small_space_balance)

    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization + space_balance
    return priorities
