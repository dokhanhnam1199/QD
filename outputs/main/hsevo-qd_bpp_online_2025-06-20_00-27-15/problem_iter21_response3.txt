```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins that can fit the item
    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0

    # Calculate remaining space after packing for valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins: Introduce a combination of factors.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Remaining space penalty with a decaying exponential
    remaining_space_penalty = np.exp(-5 * remaining_space / bins_remain_cap[valid_bins])

    # Capacity utilization
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Adaptive Space Balance
    # If item is large, prioritize bins that have space only slightly bigger
    space_balance = np.where(item > 0.5 * np.max(bins_remain_cap), np.exp(-5*np.abs(remaining_space - 0.1 * bins_remain_cap[valid_bins])),0.1)

    # Combine the factors to create the priority score with weighted adjustments.

    priorities[valid_bins] = 0.4 * fill_ratio + 0.3 * remaining_space_penalty + 0.2 * capacity_utilization + 0.1 * space_balance
    

    return priorities
```
