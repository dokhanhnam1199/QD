```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering packing density, tight fit, and item size ratio."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0

    if not np.any(valid_bins):
        return priorities

    item_size_ratio = item / np.max(bins_remain_cap)
    
    valid_capacities = bins_remain_cap[valid_bins]
    valid_new_capacities = new_capacities[valid_bins]

    packing_density = item / valid_capacities
    tight_fit_bonus = 1 / (valid_new_capacities + 0.000001)

    density_weight = 1.0 + item_size_ratio * 0.5
    tight_fit_weight = 1.0 - item_size_ratio * 0.3
    
    priorities[valid_bins] = (density_weight * packing_density +
                               tight_fit_weight * tight_fit_bonus)

    # Bonus for relatively empty bins
    empty_bin_bonus = (1 / (bins_remain_cap + 0.000001)) * 0.1
    priorities += empty_bin_bonus
    priorities[~valid_bins] = -np.inf
    
    return priorities
```
