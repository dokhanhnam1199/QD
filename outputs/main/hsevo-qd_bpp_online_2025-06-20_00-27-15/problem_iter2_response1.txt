```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates priority score for each bin."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Combine ratio of item size to capacity and inverse of remaining space
    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + 0.000001))

    # Add a slight bonus to bins that are already relatively full.
    initial_fullness = (bins_remain_cap - new_capacities) / bins_remain_cap
    priorities[valid_bins] += initial_fullness[valid_bins] * 0.1
    
    return priorities
```
