import numpy as np

def priority_v2(item: float, 
                bins_remain_cap: np.ndarray,
                epsilon: float = 5.462542593662423e-05,
                space_balance_threshold: float = 0.2670746103083079,
                space_balance_large: float = 0.4832578052111133,
                space_balance_small: float = 0.07841122296195198) -> np.ndarray:
    """Combines fill ratio, remaining space penalty, and item size."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + epsilon)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item * space_balance_threshold, space_balance_large, space_balance_small)
    item_size_weight = item
    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization + space_balance + item_size_weight
    return priorities
