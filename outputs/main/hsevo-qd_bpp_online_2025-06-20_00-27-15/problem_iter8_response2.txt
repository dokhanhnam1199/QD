```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tight fit, fullness, and avoids creating almost-empty bins."""
    invalid_priority = -np.inf
    epsilon = 1e-6
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, invalid_priority)
    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = (1 / (np.abs(remaining_space) + epsilon)) + (item / bins_remain_cap[valid_bins])
    empty_bin_bonus = (1 / (bins_remain_cap + epsilon)) * 0.1
    priorities = priorities + empty_bin_bonus
    return priorities
```
