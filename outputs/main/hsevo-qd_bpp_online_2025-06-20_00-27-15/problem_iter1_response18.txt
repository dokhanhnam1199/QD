```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize priorities to -inf for bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate remaining capacity after placing the item in each viable bin
    remaining_capacity = bins_remain_cap - item
    
    # Normalize the remaining capacity to a range between 0 and 1
    normalized_remaining = remaining_capacity / np.max(bins_remain_cap)

    # Assign priority score
    priorities[bins_remain_cap >= item] = (1 - normalized_remaining[bins_remain_cap >= item]) # Fill it with the fullest
    # Penalize smaller remaining capacities to avoid fragmentation, but favor bins that barely fit.
    
    return priorities
```
