```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and space utilization with adaptive item-size influence."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    # Adaptive weight for item size: Larger items get more influence
    item_weight = min(1.0, item)  # Normalize item size to [0, 1]

    # Best-fit component (remaining space close to zero is preferred)
    best_fit_score = item_weight / (np.abs(remaining_space) + 0.000001)

    # Combine scores, weighting by item size
    priorities[valid_bins] = (
        fill_ratio +
        item_weight * remaining_space_penalty +
        capacity_utilization +
        best_fit_score
    )
    return priorities
```
