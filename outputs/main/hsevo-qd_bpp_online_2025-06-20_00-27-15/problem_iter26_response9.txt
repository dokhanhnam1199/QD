```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space, and item size."""

    # Bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    # Initialize priorities
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0.0

    if not np.any(valid_bins):
        return priorities

    # Calculate remaining space after packing
    remaining_space = bins_remain_cap[valid_bins] - item

    # Fill ratio
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Remaining space penalty
    remaining_space_penalty = 1 / (remaining_space + 1e-6)

    # Capacity utilization
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Item size weighting
    item_size_weight = item #+ np.mean(bins_remain_cap)

    # Combine factors
    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization + item_size_weight

    return priorities
```
