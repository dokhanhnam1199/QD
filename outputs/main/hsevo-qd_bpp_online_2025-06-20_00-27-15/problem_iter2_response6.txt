```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority to bins based on item size and remaining capacity."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + 0.000001))
    
    # Introduce a penalty for bins that become too empty. Try to keep bins relatively full
    # after packing the current item.
    empty_threshold = 0.2  # Threshold for considering a bin "too empty" (e.g., 20% of capacity)
    too_empty = remaining_space > bins_remain_cap[valid_bins] * empty_threshold
    priorities[valid_bins][too_empty] -= 0.1 # Reduce priority for bins getting too empty

    return priorities
```
