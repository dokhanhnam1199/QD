```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins based on fullness, remaining space, & item size."""
    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 1e-6)
    item_size_weight = item  #Weighting by item size
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Introduce a larger penalty if remaining space is too small compared to item size
    small_space_penalty = np.where(remaining_space < item * 0.1, -0.1, 0) #Modified parameter from item/2 -> item*0.1

    priorities[valid_bins] = fill_ratio + remaining_space_penalty + item_size_weight + capacity_utilization + small_space_penalty
    return priorities
```
