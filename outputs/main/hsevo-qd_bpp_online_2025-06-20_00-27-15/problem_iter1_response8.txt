```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value.  This will ensure that
    # bins that cannot hold the item are not considered.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Calculate remaining capacity after placing the item in each bin
    remaining_capacities = bins_remain_cap - item

    # Bins that can accommodate the item will have remaining capacity >= 0
    eligible_bins = remaining_capacities >= 0

    if np.any(eligible_bins):  # Only calculate priority if any bins are suitable

        # Calculate wasted space for eligible bins
        wasted_space = remaining_capacities[eligible_bins]

        # Prioritize bins with the least wasted space. Add a small constant to prevent division by zero.
        # Inverse relationship between waste and priority.
        priorities[eligible_bins] = 1.0 / (wasted_space + 1e-9)

        # Boost priority for bins that fit the item almost perfectly to further improve bin utilization
        near_full_threshold = 0.1  # Bins with < 10% wasted space
        near_full_bins = wasted_space / bins_remain_cap[eligible_bins] < near_full_threshold
        priorities[eligible_bins][near_full_bins] *= 2  # Double the priority, could be tuned

    return priorities
```
