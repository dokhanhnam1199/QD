```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item.
    new_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = new_capacities >= 0

    # Initialize priorities with a very low value for invalid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins] = 0  # Reset valid bins to 0 for further scoring.

    # For valid bins, calculate a score based on remaining capacity after packing.
    remaining_space = bins_remain_cap[valid_bins] - item

    # Scoring valid bins, emphasizing near-full bins and penalizing excessive space
    priorities[valid_bins] = (item / bins_remain_cap[valid_bins]) + (1 / (remaining_space + 0.000001)) - (remaining_space / np.sum(bins_remain_cap))

    # Add a bonus for bins that are already close to being full (encourages filling)
    almost_full = (bins_remain_cap[valid_bins] > 0.75)  # Adjust threshold as needed.
    priorities[valid_bins][almost_full] += 0.5

    # Add a small random component to break ties and explore different packings
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01

    return priorities
```
