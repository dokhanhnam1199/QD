```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins for item placement, balancing fill ratio and remaining space."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    priorities[valid_bins] = 0
    remaining_space = bins_remain_cap[valid_bins] - item
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space_penalty = 1 / (remaining_space + 0.000001)
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
    space_balance = np.where(remaining_space > item/2, 0.3, 0.1)
    avg_remaining_capacity = np.mean(bins_remain_cap)
    item_size_vs_avg_capacity = item / (avg_remaining_capacity + 0.000001)
    empty_bin_penalty = np.where(bins_remain_cap[valid_bins] > 2*item, -0.1, 0)

    priorities[valid_bins] = fill_ratio + remaining_space_penalty + capacity_utilization + space_balance + empty_bin_penalty - item_size_vs_avg_capacity * 0.05
    return priorities
```
