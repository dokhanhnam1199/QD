```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by combining packing density, tight fit, and capacity utilization."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    valid_capacities = bins_remain_cap[valid_bins]
    valid_new_capacities = new_capacities[valid_bins]

    packing_density = item / valid_capacities
    tight_fit_bonus = 1 / (valid_new_capacities + 0.000001)
    capacity_utilization = (valid_capacities - valid_new_capacities) / valid_capacities

    item_size_ratio = item / np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 0

    density_weight = 1.0 + item_size_ratio * 0.5
    tight_fit_weight = 1.0 - item_size_ratio * 0.3
    utilization_weight = 0.8 + item_size_ratio * 0.2

    priorities[valid_bins] = (
        density_weight * packing_density +
        tight_fit_weight * tight_fit_bonus +
        utilization_weight * capacity_utilization
    )
    
    return priorities
```
