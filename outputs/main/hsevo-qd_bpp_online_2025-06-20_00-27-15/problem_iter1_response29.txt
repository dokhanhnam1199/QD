```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: assign -inf priority to bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # For feasible bins:
    feasible_bins = ~infeasible_bins
    
    if np.any(feasible_bins): # Check if any bins are feasible
        remaining_space = bins_remain_cap[feasible_bins] - item
        
        # 1. First-Fit-Decreasing heuristic-inspired component:
        #    Prefer bins that leave less wasted space (minimize remaining space).
        #    This can prevent creating a lot of bins with small items.
        priority_ffd = -remaining_space # Lower remaining_space => higher priority
    
        # 2. Balance heuristic-inspired component:
        #     Prefer bins with capacity slightly above the item size, but penalized by how close they are to full already
        #     This will avoid putting large objects in empty bins and balancing how the objects are distributed
        # remaining_space_normalized = remaining_space/bins_remain_cap[feasible_bins]
        #priority_balance =  remaining_space_normalized
    
    
        # 3. Near-Full-but-not-too-much Component (NF):
        #    Penalize bins that are *too* close to being full, as this might prevent future flexibility.
        #    Adjust the threshold (e.g., 0.9) based on desired behavior. This reduces number of opened bins.
        fullness = 1 - remaining_space / bins_remain_cap[feasible_bins]
        near_full_penalty = np.where(fullness > 0.95, -10, 0) # very close to full. Avoid!
        
        priority_ffd = priority_ffd + near_full_penalty
        #priorities[feasible_bins] = priority_ffd # just FFD for starters
        
        # Combining components (adjust weights as needed):
        priorities[feasible_bins] = priority_ffd # + 0.5 * priority_balance

    return priorities
```
