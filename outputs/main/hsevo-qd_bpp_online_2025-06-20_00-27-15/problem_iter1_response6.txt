```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero and ensure all bins are considered.
    priorities = np.zeros_like(bins_remain_cap, dtype=float) + 1e-9

    # Identify bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    # Calculate priorities for feasible bins based on remaining capacity after packing.
    remaining_capacity = bins_remain_cap[feasible_bins] - item
    
    #Heuristic 1: Try to fill bins as completely as possible.
    #Higher remaining capacity means lower priority, encourage filling up small spaces.
    priorities[feasible_bins] = 1.0 / (remaining_capacity + 1e-9) # Inverse of remaining capacity

    #Heuristic 2: Penalize bins which has remaining space just negligibly larger than item size.
    close_fit = (bins_remain_cap[feasible_bins] - item) < 0.1
    priorities[feasible_bins][close_fit] *= 10 # Higher priority for a close fit

    #Heuristic 3: Prioritize Almost full bins
    almost_full = bins_remain_cap > item # Ensure bin is feasible first
    almost_full_indices = np.where(almost_full)[0]

    for i in almost_full_indices:
        if (bins_remain_cap[i] / (bins_remain_cap[i] + item)) > 0.8:
            priorities[i] += 5 # Added bonus for bins that will be full
            
    return priorities
```
