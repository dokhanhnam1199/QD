```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space, and item size."""

    new_capacities = bins_remain_cap - item
    valid_bins = new_capacities >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf)

    if not np.any(valid_bins):
        return priorities

    # Calculate fill ratio and remaining space for valid bins.
    fill_ratio = item / bins_remain_cap[valid_bins]
    remaining_space = bins_remain_cap[valid_bins] - item

    # Remaining space penalty: avoid nearly full bins, but encourage some space usage
    remaining_space_penalty = 1 / (remaining_space + 0.000001)

    # Capacity utilization: encourage bins to be well-utilized
    capacity_utilization = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]

    # Best Fit Score: Prioritize bins with tighter fits
    best_fit_score = np.exp(-np.abs(remaining_space)) # Higher score for smaller remaining space

    # Adaptive weight based on item size relative to bin sizes
    item_size_ratio = item / np.mean(bins_remain_cap)
    adaptive_weight = 1.0
    if item_size_ratio > 0.7:
        adaptive_weight = 1.2  # Increase fill_ratio weight for large items
    elif item_size_ratio < 0.3:
        adaptive_weight = 0.8  # Decrease fill_ratio weight for smaller items

    # Combine factors to create priority score.
    priorities[valid_bins] = (adaptive_weight * fill_ratio +
                               remaining_space_penalty +
                               capacity_utilization +
                               best_fit_score)

    return priorities
```
