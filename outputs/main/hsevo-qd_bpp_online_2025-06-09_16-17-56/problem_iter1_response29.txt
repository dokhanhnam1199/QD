```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Encourage filling bins as much as possible
    fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    fill_ratio = np.clip(fill_ratio, 0, 1)  # Ensure the value is within [0, 1]

    # Higher capacity bins might be better for fragmentation
    capacity_score = bins_remain_cap / np.max(bins_remain_cap)

    # Very simple check to not put item in bins it won't fit in.
    valid_bins = bins_remain_cap >= item

    priorities = valid_bins * (0.7 * fill_ratio + 0.3 * capacity_score) # weighting factor
    
    # Give a boost to bins that are almost full but can still accomodate
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < 1.2 * item)  # A heuristic; can be tuned
    priorities += almost_full * 0.5 # significant weight to this aspect

    return priorities
```
