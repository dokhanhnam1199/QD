```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD-inspired, almost-full, balanced bin, and small item heuristics, with enhancements."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: FFD - minimize wasted space (refined)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
            # Give a slightly higher priority to bins that fit the item exactly.
            if wasted_space < 1e-6:  # Using a small tolerance for floating-point comparison
                priorities[i] += 0.2  # Small bonus for perfect fit
        else:
            priorities[i] = -1e9

    # Heuristic 2: Fill almost full bins (adaptive threshold)
    almost_full_threshold = 0.9 + (0.05 if item > max_cap * 0.5 else 0) #Adaptive threshold
    if max_cap > 0: # prevent division by zero
        is_almost_full = bins_remain_cap / max_cap < (1 - almost_full_threshold)
    else:
        is_almost_full = np.zeros_like(bins_remain_cap, dtype=bool)
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += 0.6 #Slightly higher priority than before

    # Heuristic 3: Balanced bins (dynamic range)
    balance_threshold_low = 0.3
    balance_threshold_high = 0.6
    if max_cap > 0: # prevent division by zero
        bin_fill_levels = (max_cap - bins_remain_cap) / max_cap
    else:
        bin_fill_levels = np.zeros_like(bins_remain_cap, dtype=float)

    # Adjust the "balanced" range based on the item size. Large items favor fuller bins
    if item > max_cap * 0.7:
      balance_threshold_low = 0.6 # Widen the balance range for large items
    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)
    for i, is_bal in enumerate(is_balanced):
        if is_bal and bins_remain_cap[i] >= item:
            priorities[i] += 0.3

    # Heuristic 4: Small item prefers small remainder (scaled bonus)
    small_item_threshold_fraction = 0.2
    small_item_threshold = small_item_threshold_fraction * max_cap
    if item < small_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            remainder = cap - item
            if 0 < remainder < small_item_threshold:
                # Scale the bonus based on how small the remainder is
                bonus = 0.4 * (1 - (remainder / small_item_threshold))
                priorities[i] += bonus

    # Heuristic 5: Penalize nearly full bins that can't fit
    nearly_full_threshold = 0.1 * max_cap #Bins that have very small remaining capacity
    for i, cap in enumerate(bins_remain_cap):
        if cap < item and cap > 0 and cap <= nearly_full_threshold:
            priorities[i] -= 0.7  # Large penalty to deter

    # Heuristic 6: Favor bins closer to the average fill level
    avg_fill = np.mean((max_cap - bins_remain_cap) / max_cap) if max_cap > 0 else 0.0
    for i, cap in enumerate(bins_remain_cap):
        fill_level = (max_cap - cap) / max_cap if max_cap > 0 else 0.0
        diff_from_avg = abs(fill_level - avg_fill)
        # Give a slight bonus to bins closer to the average fill level
        priorities[i] += 0.1 * (1 - diff_from_avg)

    # Heuristic 7: Random factor for tie-breaking (reduced magnitude)
    priorities += np.random.rand(len(bins_remain_cap)) * 0.005

    return priorities
```
