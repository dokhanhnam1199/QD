```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. Remaining capacity: Bins with capacity close to the item size get higher priority (First-Fit Decreasing inspired).
    2. Waste: Penalizes bins that would have a lot of wasted space.
    3. Number of Items in the bin: Encourage to fill bins.
    4. Try to have balanced occupancy

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    available_bins = bins_remain_cap >= item

    if not np.any(available_bins):
        return priorities # All bins are full

    # Calculate scores for available bins
    for i in np.where(available_bins)[0]:
        remaining_capacity = bins_remain_cap[i]

        # Score based on how close the item fits
        fit_score = np.exp(-np.abs(remaining_capacity - item))

        # Penalty for wasted space
        waste_penalty = np.exp(-remaining_capacity)

        # Encourage to fill a bin with fewer item
        # Assume a "number of item factor" based on remaining capacity
        # A smaller remaining capacity means it has been filled up a bit.
        item_number_factor = 1/(remaining_capacity+0.1)

        priorities[i] = fit_score * (1 - waste_penalty) * item_number_factor #Combine these scores
    return priorities
```
