```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item

    # If no bin can accommodate the item, assign a very low priority to all bins.
    if not np.any(valid_bins):
      return priorities - 1e9  # A large negative value for all bins.

    # Calculate the wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item

    # Calculate the fill ratio (item size relative to remaining capacity) for valid bins.
    fill_ratio = item / bins_remain_cap

    # Prioritize bins with minimal wasted space (best fit) and a good fill ratio.  Adjust coefficients as needed.
    priorities[valid_bins] = 1.0 / (wasted_space[valid_bins] + 1e-6) + fill_ratio[valid_bins]

    #Add small term based on utilization
    utilization = 1.0 - (bins_remain_cap/np.sum(bins_remain_cap))
    priorities[valid_bins] += 0.1*utilization[valid_bins]
    return priorities
```
