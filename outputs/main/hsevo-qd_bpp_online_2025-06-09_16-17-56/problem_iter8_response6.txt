```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space, almost full status, and small item handling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    almost_full_threshold = 0.8
    almost_full_boost = 0.7
    small_item_threshold = 0.1
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
            if cap / np.max(bins_remain_cap) < (1 - almost_full_threshold):
                priorities[i] += almost_full_boost
            if item < small_item_threshold:
                priorities[i] += 0.3  # Preferentially pack small items
        else:
            priorities[i] = -1e9
            
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
