```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, almost-full, balanced bin, and small item heuristics."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: FFD - minimize wasted space
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
        else:
            priorities[i] = -1e9

    # Heuristic 2: Almost full boost
    almost_full_threshold = 0.1
    is_almost_full = bins_remain_cap / max_cap < (1 - almost_full_threshold)
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += 0.5

    # Heuristic 3: Balanced bin boost
    balance_threshold_low = 0.3
    balance_threshold_high = 0.7
    bin_fill_levels = (max_cap - bins_remain_cap) / max_cap
    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)
    for i, is_bal in enumerate(is_balanced):
        if is_bal and bins_remain_cap[i] >= item:
            priorities[i] += 0.3

    # Heuristic 4: Small item in small remainder bin
    small_item_threshold_fraction = 0.2
    small_item_threshold = small_item_threshold_fraction * max_cap
    if item < small_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            remainder = cap - item
            if 0 < remainder < small_item_threshold:
                priorities[i] += 0.4

    # Random factor
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
