```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a combination of heuristics inspired by physics and a touch of cognitive bias:

    1.  **Gravitational Attraction:** Bins with remaining capacity closer to the item size have a stronger "gravitational pull,"
        represented by a higher priority. This encourages filling bins more completely. However, avoids excessive fragmentation by also adding a negative term based on wasted space.

    2.  **Avoid Black Holes (Overfilling):** Heavily penalizes attempting to put an item into a bin with insufficient remaining capacity.

    3. **Symmetry Breaking (Preference for near empty bin)** When options are close, gives slight favor to using a bin closer to empty to improve long-term packing efficiently

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Gravitational Attraction & Overfill Penalty
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Strong penalty to invalidate bin

        else:
            # Favor fitting well but consider wasted space.
            priorities[i] = np.exp(-np.abs(cap - item) / item) - 0.1 * (cap-item) / np.max(bins_remain_cap)  # Gravitational attraction based on the exponent

    # Adding symmetry breaking by checking if some priorities are really close
    max_priority = np.max(priorities[np.isfinite(priorities)]) #Ignore -inf cases
    if np.sum(np.abs(priorities - max_priority) < 0.01) > 1:
        #If there are more than one option with similar maximum priority, slightly favor near-empty bins
        priorities = priorities + bins_remain_cap / np.max(bins_remain_cap) * 0.001 #Adds a tiny favoring on having higher remain capacity

    return priorities
```
