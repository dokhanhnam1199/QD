```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Give high priority to bins where the item fits (new_remain_cap >= 0)
    # and penalize bins where it doesn't fit
    
    fit_mask = new_remain_cap >= 0
    
    if np.any(fit_mask):  # If at least one bin can accommodate the item
        
        #Prioritize bins that have a remaining capacity close to the item size. 
        #This helps avoid creating very empty bins
        priorities[fit_mask] = 1.0 / (np.abs(new_remain_cap[fit_mask]))

        # Scale priorities such that smallest waste has biggest value

        # Normalize priorities between 0 and 1
        min_priority = np.min(priorities[fit_mask])
        max_priority = np.max(priorities[fit_mask])
        
        if max_priority - min_priority > 0: # To avoid division by zero
           priorities[fit_mask] = (priorities[fit_mask] - min_priority) / (max_priority - min_priority)

        #Further reward bins where new_remain_cap close to 0
        priorities[fit_mask] = 1 / (0.0001 + np.abs(new_remain_cap[fit_mask])) #prevent division by zero
        
        #Re-normalize
        min_priority = np.min(priorities[fit_mask])
        max_priority = np.max(priorities[fit_mask])

        if max_priority - min_priority > 0: # To avoid division by zero
           priorities[fit_mask] = (priorities[fit_mask] - min_priority) / (max_priority - min_priority)
        
    else:
        # If the item doesn't fit in any bin, give a very low priority to all bins
        # This situation should ideally never happen with a properly sized bin.
        priorities[:] = -1e9 
    
    return priorities
```
