{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                almost_full_threshold: float = 0.7488142904689485,\n                almost_full_boost: float = 0.4527937918553696,\n                random_factor: float = 0.01738454357571017,\n                not_fit_penalty: float = -3068827354.3539667) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        almost_full_threshold: Tuneable parameter: what fraction of full is \"almost full\"?\n        almost_full_boost: Boost priority for filling up almost full bins\n        random_factor: magnitude of random number to add in priorities\n        not_fit_penalty: penalty when item doesn't fit\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = not_fit_penalty  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += almost_full_boost  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * random_factor\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                almost_full_threshold: float = 0.7488142904689485,\n                almost_full_boost: float = 0.4527937918553696,\n                random_factor: float = 0.01738454357571017,\n                not_fit_penalty: float = -3068827354.3539667) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        almost_full_threshold: Tuneable parameter: what fraction of full is \"almost full\"?\n        almost_full_boost: Boost priority for filling up almost full bins\n        random_factor: magnitude of random number to add in priorities\n        not_fit_penalty: penalty when item doesn't fit\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = not_fit_penalty  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += almost_full_boost  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * random_factor\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                almost_full_threshold: float = 0.7488142904689485,\n                almost_full_boost: float = 0.4527937918553696,\n                random_factor: float = 0.01738454357571017,\n                not_fit_penalty: float = -3068827354.3539667) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        almost_full_threshold: Tuneable parameter: what fraction of full is \"almost full\"?\n        almost_full_boost: Boost priority for filling up almost full bins\n        random_factor: magnitude of random number to add in priorities\n        not_fit_penalty: penalty when item doesn't fit\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = not_fit_penalty  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += almost_full_boost  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * random_factor\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization and capacity ratio for bin priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            wasted_space = cap - item\n            priorities[i] = (1.0 / (1.0 + wasted_space)) + (item / cap)\n        else:\n            priorities[i] = -1e9\n\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}