```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Reward bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Base priority for fitting
    
    # Prioritize bins with smaller remaining capacity *after* placing the item, to try to fill bins completely. Only consider bins that fit.
    remaining_after_placement = bins_remain_cap[can_fit] - item
    
    # Avoid zero divisions if no bin can fit (this shouldn't normally happen if all bin sizes are same.)
    if np.any(can_fit):
        priorities[can_fit] += np.max(bins_remain_cap) / (remaining_after_placement + 0.00001) # Adding a tiny value to avoid division by zero.

    # Slightly favor bins which were previously empty
    # Priorities += (bins_remain_cap == np.max(bins_remain_cap)) * 0.1

    return priorities
```
