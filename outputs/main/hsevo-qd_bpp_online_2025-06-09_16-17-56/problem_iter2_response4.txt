```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space, almost full bin filling, and ratio-based prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
        else:
            priorities[i] = -1e9

    almost_full_threshold = 0.9
    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)

    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += 0.5

    # Combine with ratio-based approach
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios)
    priorities += -0.1 * log_ratios # Scale down to prevent dominance

    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
