```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines FFD, almost full bin filling, small remainder preference,
    bin utilization, and adaptive penalties.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    not_fit_penalty = -1e9
    almost_full_threshold = 0.9
    almost_full_boost = 0.5
    small_item_threshold = 0.1 * np.max(bins_remain_cap)
    random_factor = 0.001 # Reduced random factor
    bin_size = np.max(bins_remain_cap) # Implicit bin size, assume all bins have same capacity

    # Heuristic 1: First Fit Decreasing with Wasted Space Prioritization
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
        else:
            priorities[i] = not_fit_penalty

    # Heuristic 2: Almost Full Bin Filling
    is_almost_full = bins_remain_cap / bin_size > almost_full_threshold # Changed condition
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += almost_full_boost

    # Heuristic 3: Small Item Remainder Preference
    if item < small_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            remainder = cap - item
            if 0 < remainder < small_item_threshold:
                priorities[i] += 0.3

    # Heuristic 4: Bin Utilization Preference (Fill Bins More Completely)
    bin_utilization = (bin_size - bins_remain_cap) / bin_size  # Calculate utilization
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] += 0.2 * bin_utilization[i]  # Reward higher utilization

    # Heuristic 5: Item Size Consideration.  Preferentially select bins that result in higher fill rate based on item size
    for i in range(len(bins_remain_cap)):
      if bins_remain_cap[i] >= item:
          new_utilization = (bin_size - (bins_remain_cap[i] - item)) / bin_size
          priorities[i] += 0.4 * new_utilization

    # Add small random factor for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * random_factor

    return priorities
```
