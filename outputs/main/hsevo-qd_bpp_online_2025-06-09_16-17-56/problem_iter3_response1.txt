```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.
    # Bins that cannot fit the item get a very low priority.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the wasted space. Aim to minimize wasted space
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit.

    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.
    # This helps consolidate existing items and prevents creation of many small empty bins.

    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is "almost full"?
    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)

    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += 0.5  # Boost priority for filling up almost full bins

    # Heuristic 3: Introduce a "balance" heuristic. Prefer bins that are neither too full nor too empty.
    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.

    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of "balanced" fill level
    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of "balanced" fill level

    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level

    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)

    for i, is_bal in enumerate(is_balanced):
        if is_bal and bins_remain_cap[i] >= item:
            priorities[i] += 0.25  # Give a moderate boost to balanced bins

    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.
    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define "small" relative to bin size
    if item < small_item_threshold:
      for i, cap in enumerate(bins_remain_cap):
        remainder = cap - item
        if 0 < remainder < small_item_threshold: #If remainder is small and positive
          priorities[i] += 0.3

    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
