```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space minimization with a fitting score."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space) # FFD-inspired
        else:
            priorities[i] = -1e9 

    # Fitting score: Penalize low remaining capacity after the item is placed
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            remaining_after_fit = bins_remain_cap[i] - item
            # Normalize remaining capacity. Higher = better.
            normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)
            priorities[i] += normalized_remaining * 0.5

    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
