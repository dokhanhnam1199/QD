```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space, fill level, and item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = (1.0 / (1.0 + wasted_space)) + (item / cap)


            #Small items prefer near exact fit
            small_item_threshold = 0.1 * np.max(bins_remain_cap)
            if item < small_item_threshold:
              if wasted_space < small_item_threshold and wasted_space > 0:
                priorities[i]+= 0.5

        else:
            priorities[i] = -1e9 #Big penalty

    priorities += np.random.rand(len(bins_remain_cap)) * 0.01 #Break ties
    return priorities
```
