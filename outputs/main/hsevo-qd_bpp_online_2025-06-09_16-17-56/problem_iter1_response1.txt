```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics inspired by physics and optimization:
    1.  Modified First Fit Decreasing (MFFD): Favors bins where the item fits best (smallest remaining space after fitting).
    2.  Gravitational Analogy: Treats bin filling as a potential energy minimization.
    3.  Bin Diversity: Attempts to distribute items across bins to avoid early saturation of a few bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins where the item fits
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities # No bin can fit the item

    # 1. Modified First Fit Decreasing (MFFD)
    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = np.inf  # Penalize infeasible bins heavily

    # Give higher priority to bins that minimize remaining space (without being wasteful)
    mffd_priority = -remaining_space
    mffd_priority[~feasible_bins] = -np.inf  # Ensure infeasible bins have lowest priority
    priorities += mffd_priority

    # 2. Gravitational Analogy: Potential Energy Minimization
    # Lower the 'center of mass' of the bin occupancies
    bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap)  # Normalize remaining capacity
    potential_energy_priority = bin_utilization  #Higher utilization increases PE
    potential_energy_priority[~feasible_bins] = -np.inf
    priorities -= potential_energy_priority

    #3. Bin Diversity: Encourage spreading the items
    # Give higher priority to bins that are less full (more remaining capacity),
    # but still feasible. Avoid concentrating items into a small subset of bins
    diversity_priority = bins_remain_cap
    diversity_priority[~feasible_bins] = -np.inf
    priorities += 0.5 * diversity_priority  # Weigh the diversity factor

    # Handle edge case if all bins are same (avoid zero division):
    if np.all(bins_remain_cap == bins_remain_cap[0]):
        priorities = np.ones_like(bins_remain_cap)

    return priorities
```
