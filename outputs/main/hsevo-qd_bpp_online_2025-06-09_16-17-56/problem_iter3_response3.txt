```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.
    # Bins that cannot fit the item get a very low priority.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            #Calculate the wasted space. Aim to minimize wasted space
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit.

    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.
    # This helps consolidate existing items and prevents creation of many small empty bins.

    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is "almost full"?
    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)

    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
                priorities[i] += 0.5  # Boost priority for filling up almost full bins

    # Heuristic 3: Introduce a 'best fit' component, favoring bins where the remaining capacity
    # after adding the item is closest to a certain fraction of the total bin capacity.
    # This encourages more efficient packing.
    bin_capacity = np.max(bins_remain_cap) # Assuming all bins have the same capacity.
    target_fraction = 0.25 # Aim for leaving around 25% of bin capacity unused, tune this.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            priority_boost = np.exp(-abs(remaining_after_fit - target_fraction * bin_capacity)/(bin_capacity*0.2)) # Gaussian-like preference
            priorities[i] += priority_boost * 0.3

    # Heuristic 4: Add a small random factor to break ties and encourage exploration of different bin assignments.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
