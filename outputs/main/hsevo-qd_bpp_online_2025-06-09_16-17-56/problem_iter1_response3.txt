```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired: Give high priority to bins that can accommodate the item
    # without much wasted space.  Prioritize bins with smallest remaining capacity that can still fit item.
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        #priorities[can_fit] = 1 / (bins_remain_cap[can_fit] - item + 1e-6) # Avoid division by zero
        #priorities[can_fit] = -np.abs(bins_remain_cap[can_fit] - item) # Minimize wasted space, prioritize tighter fits. Consider absolute difference
        priorities[can_fit] = bins_remain_cap[can_fit] - item  # Difference should still work as we are maximizing (negating wasted space)
        #priorities[can_fit] = 1.0/(bins_remain_cap[can_fit] - item + 0.0000001)

    # Penalize bins that cannot fit the item (ensure these are *least* preferred)
    priorities[~can_fit] = -np.inf # Greatly discourage overflowing bins
    #Consider the following to discourage it but make the method work even when all bins have smaller capacities (it will find the best from these poor options)
    #priorities[~can_fit] = -np.abs(bins_remain_cap[~can_fit] - item) # How short are the overflowing bins. This forces the least worst (close to fitting bin to be picked in the worst case scenarios)
    return priorities
```
