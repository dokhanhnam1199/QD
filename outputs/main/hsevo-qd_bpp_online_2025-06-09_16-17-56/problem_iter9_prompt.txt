{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines FFD-inspired, almost-full, balanced bin, and small item heuristics.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Heuristic 1: FFD - minimize wasted space\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)\n        else:\n            priorities[i] = -1e9\n\n    # Heuristic 2: Fill almost full bins\n    almost_full_threshold = 0.9\n    if max_cap > 0: # prevent division by zero\n        is_almost_full = bins_remain_cap / max_cap < (1 - almost_full_threshold)\n    else:\n        is_almost_full = np.zeros_like(bins_remain_cap, dtype=bool)\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5\n\n    # Heuristic 3: Balanced bins\n    balance_threshold_low = 0.3\n    balance_threshold_high = 0.6\n    if max_cap > 0: # prevent division by zero\n        bin_fill_levels = (max_cap - bins_remain_cap) / max_cap\n    else:\n        bin_fill_levels = np.zeros_like(bins_remain_cap, dtype=float)\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.3\n\n    # Heuristic 4: Small item prefers small remainder\n    small_item_threshold_fraction = 0.2\n    small_item_threshold = small_item_threshold_fraction * max_cap\n    if item < small_item_threshold:\n        for i, cap in enumerate(bins_remain_cap):\n            remainder = cap - item\n            if 0 < remainder < small_item_threshold:\n                priorities[i] += 0.4\n\n    # Heuristic 5: Random factor for tie-breaking\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I understand. Let's redefine \"Current Self-Reflection\" to be more effective in designing better heuristics, steering clear of the pitfalls in \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Deliberate Design, Adaptive Strategy, Edge-Case Focus, Performance Feedback.\n*   **Advice:** Focus on the *intentional* design of heuristics, emphasizing adaptability and precise handling of edge cases, incorporating a feedback loop based on performance metrics.\n*   **Avoid:** Overly complex methods without clear benefit, generic \"consider multiple factors,\" and simply stating \"balancing exploration/exploitation\" without specific implementation details.\n*   **Explanation:** Instead of vague suggestions, emphasize creating a planful approach, tailoring heuristics to specific problem features, and continuously refining the approach based on observed performance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}