{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines FFD, almost full bin filling, and a small remainder preference.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    not_fit_penalty = -1e9\n    almost_full_threshold = 0.9\n    almost_full_boost = 0.5\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)\n    random_factor = 0.01\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)\n        else:\n            priorities[i] = not_fit_penalty\n\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += almost_full_boost\n\n    if item < small_item_threshold:\n        for i, cap in enumerate(bins_remain_cap):\n            remainder = cap - item\n            if 0 < remainder < small_item_threshold:\n                priorities[i] += 0.3\n\n    priorities += np.random.rand(len(bins_remain_cap)) * random_factor\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a redefined \"Current Self-Reflection\" focused on actionable insights for designing better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Rigorous Analysis, Adaptive Strategy, Edge Case Mastery, Penalties/Constraints.\n\n*   **Advice:** Instead of just *considering* factors, *quantify* their impact through rigorous analysis. Dynamically adjust tunable parameters based on real-time performance feedback (adaptive strategy). Prioritize robust edge case handling, not just consideration.\n\n*   **Avoid:** Overly complex solutions *without* demonstrable benefit. General statements about \"balancing\" without specifics.\n\n*   **Explanation:** Move beyond vague advice. Emphasize measurable impact and data-driven adaptation, not just generic statements about complexity or balance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}