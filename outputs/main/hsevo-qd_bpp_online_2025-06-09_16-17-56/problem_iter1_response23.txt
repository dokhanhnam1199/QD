```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize a small constant to avoid division by zero or log of zero
    epsilon = 1e-9

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First, consider bins that can actually fit the item.
            # Prioritize bins that have a tighter fit, but not too tight
            # Give very small items that fill space well (filling ratio > 0.5).
            filling_ratio = item / (cap + epsilon)  # How well the item fills the remaining capacity
            if filling_ratio > 0.99:
                priorities[i] = 1000  #Almost full get really high priority
            elif filling_ratio > 0.5:
                priorities[i] = 100 + 1/(1-filling_ratio) # Favor those that fill at least half
            else:

                priorities[i] = 1 / (cap - item + epsilon) #Prioritize the nearly full space
        else:
            # If the bin cannot fit the item, assign a very low priority.
            priorities[i] = -1000  # Very low priority for bins that can't fit

    return priorities
```
