```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers:
    1.  How much space is wasted if we place the item in the bin (smaller waste is better)
    2.  How close the item size is to filling the bin completely (closer is better)
    3.  A small random component to introduce exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    waste = bins_remain_cap - item
    waste = np.where(waste >= 0, waste, np.inf)  # Invalid bins get infinite waste
    waste_priority = -waste  # Smaller waste -> higher priority

    fill_ratio = item / bins_remain_cap
    fill_ratio = np.where(bins_remain_cap >= item, fill_ratio, 0)  # Invalid bins get zero fill ratio
    fill_priority = fill_ratio  # Closer to 1 (complete fill) -> higher priority

    # Add a small random component for exploration
    random_priority = np.random.rand(len(bins_remain_cap)) * 0.01

    # Combine priorities. Waste is most important, then fill ratio, then random exploration
    priorities = waste_priority + fill_priority + random_priority

    return priorities
```
