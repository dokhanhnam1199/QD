```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1:  Encourage filling bins that are almost full after packing
    # and discourage wasting large amounts of space
    fill_levels = (bins_remain_cap - item) / bins_remain_cap
    priorities += np.where(bins_remain_cap >= item, np.clip(fill_levels, 0, 1), -np.inf)

    # Heuristic 2:  Use a sigmoid function to bias towards bins that are just big enough
    # but penalize bins that are too small or too large.
    diff = bins_remain_cap - item
    sigmoid = 1 / (1 + np.exp(-diff * 5)) # Steep sigmoid near zero diff
    priorities += np.where(bins_remain_cap >= item, sigmoid, -np.inf) # Only consider bins that can hold item

    # Heuristic 3: Slightly prefer bins with smaller remaining capacity to fully utilize them
    priorities -= bins_remain_cap * 0.01

    # Heuristic 4: A very small bonus for nearly perfect fits
    nearly_perfect_fit = np.isclose(bins_remain_cap, item, rtol=0, atol=0.01)
    priorities += np.where(nearly_perfect_fit, 1, 0) #add a bonus

    return priorities
```
