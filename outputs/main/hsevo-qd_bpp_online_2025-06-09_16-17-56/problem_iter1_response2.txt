```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of remaining capacity and wasted space considerations,
    inspired by physical principles of minimizing potential energy and maximizing packing density.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero.  Bins with zero capacity effectively become infinitely low priority.
    bins_remain_cap = np.clip(bins_remain_cap, 1e-9, None)

    # Calculate wasted space if the item is added to the bin.
    wasted_space = bins_remain_cap - item
    wasted_space = np.clip(wasted_space, 0, None)  # Ensure wasted space is non-negative

    # A bin is only eligible if it can fit the item.
    eligible = (bins_remain_cap >= item)

    # Calculate a density factor - the proportion of the bin that would be filled.
    density = item / bins_remain_cap

    # Combine factors to create a priority score. A higher score means a better fit.

    # I favour bins where the wasted space is small (high density of packing) and also
    # prioritise those where adding the item leads to almost filling the bin

    priorities = np.where(eligible, density * np.exp(-wasted_space), -np.inf) # very important to reject invalid bins


    return priorities
```
