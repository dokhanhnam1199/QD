```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Takes into account wasted space and encourages filling bins efficiently.
    Uses a combination of metrics to provide a balanced approach.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage filling bins closer to full capacity
            fill_ratio = item / cap  # ratio of item size to bin capacity. Higher is better (closer to full)
            remaining_space = cap - item

            #Discourage large wasted space:
            waste_penalty = np.exp(remaining_space) if remaining_space > 0 else 1 #Exponential penalty for large remaining space
            # Bonus for filling bins well, considering the item size relative to remaining capacity
            efficiency_bonus = 1.0 / (remaining_space + 1e-9)  #Avoid div by zero
            #Combine metrics:
            priorities[i] = fill_ratio * efficiency_bonus / waste_penalty


        else:
            priorities[i] = -np.inf  # Impossible to fit

    return priorities
```
