{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic uses a multi-faceted approach, combining wasted space minimization, filling almost-full bins, and a small amount of randomization, while the last only calculates the negative log of the ratio of item size to remaining bin capacity. The better heuristic considers several factors, while the worse relies on only one.\nComparing (1st) vs (2nd), there is no difference.\nComparing (10th) vs (11th), the former uses a complex heuristics that takes into account wasted space, almost full thresholds, and a small random factor, while the latter simply uses the negative log of the ratio of item size to remaining capacity. The first one is much more sophisticated, while the second one only looks at the ratios.\nOverall: The better heuristics are complex, incorporating multiple factors, including wasted space, fragmentation avoidance, and randomization. The worse heuristics rely on a single ratio calculation. Better heuristics seem to balance exploration (randomization) and exploitation (filling nearly full bins and minimizing wasted space) more effectively. The \"almost_full_threshold\" parameter in the better heuristics enables tuning for different scenarios.\n- \nOkay, I understand. Let's redefine \"Current Self-Reflection\" for designing better heuristics, focusing on actionable advice and avoiding common pitfalls.\n\nHere's a redefined \"Current Self-Reflection\":\n\n*   **Keywords:** Rigorous Evaluation, Adaptive Learning, Problem Structure, Computational Cost.\n*   **Advice:** Prioritize empirical testing across diverse instances. Design heuristics that learn and adapt from previous performance. Leverage understanding of the problem's underlying structure.\n*   **Avoid:** Over-reliance on complexity without demonstrable benefit. Neglecting computational cost analysis.\n*   **Explanation:** Focus on evidence-based improvements. Adapt heuristics based on performance feedback. Complex solutions can be inefficient if not well-suited to the problem structure and constraints.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}