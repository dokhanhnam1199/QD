import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                almost_full_threshold: float = 0.8899820807139037,
                almost_full_boost: float = 0.6544367891640285,
                random_factor: float = 0.009722669064960558,
                not_fit_penalty: float = -7284615382.749279) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        almost_full_threshold: Tuneable parameter: what fraction of full is "almost full"?
        almost_full_boost: Boost priority for filling up almost full bins
        random_factor: magnitude of random number to add in priorities
        not_fit_penalty: penalty when item doesn't fit

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.
    # Bins that cannot fit the item get a very low priority.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            #Calculate the wasted space. Aim to minimize wasted space
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space
        else:
            priorities[i] = not_fit_penalty  # Very low priority if item doesn't fit.

    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.
    # This helps consolidate existing items and prevents creation of many small empty bins.

    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)

    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
                priorities[i] += almost_full_boost  # Boost priority for filling up almost full bins

    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.
    priorities += np.random.rand(len(bins_remain_cap)) * random_factor
    return priorities
