{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}