```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot accommodate the item get a very low priority
    infeasible_mask = bins_remain_cap < item
    priorities = np.zeros_like(bins_remain_cap)
    priorities[infeasible_mask] = -np.inf  # Extreme negative priority

    # For feasible bins:
    feasible_mask = ~infeasible_mask
    feasible_capacities = bins_remain_cap[feasible_mask]

    if np.any(feasible_mask):
        # 1. Prefer bins that would become nearly full. 
        #    A higher 'fullness_score' means we are approaching bin capacity
        fullness_score = np.exp(-np.abs(feasible_capacities - item) / np.mean(feasible_capacities))


        # 2. Penalize bins that are too empty to discourage fragmentation.
        #   Higher emptiness_penalty indicates that this bin is not preferred
        emptiness_penalty = np.where(feasible_capacities > item, np.exp(-item/feasible_capacities),0)


        # 3. Give preference to larger remaining capacity (First Fit principle)
        capacity_boost = feasible_capacities / np.max(bins_remain_cap)

        # Combine factors with tunable weights. Experimentation is encouraged.
        priority_scores = 0.6*fullness_score -0.2*emptiness_penalty+ 0.2*capacity_boost

        priorities[feasible_mask] = priority_scores # assign the score to the feasible locations
        
    return priorities
```
