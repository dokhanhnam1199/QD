```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space, almost full, small item preference,
    and balanced bin filling with adaptive parameters.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    not_fit_penalty = -1e9
    # Adaptive almost full threshold based on item size
    almost_full_threshold = 0.8 + 0.2 * (item / np.max(bins_remain_cap))
    almost_full_boost = 0.5
    small_item_threshold = 0.1 * np.max(bins_remain_cap)
    balance_threshold = 0.5 * np.max(bins_remain_cap)
    balance_boost = 0.2
    random_factor = 0.01

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
        else:
            priorities[i] = not_fit_penalty

    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += almost_full_boost

    if item < small_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            remainder = cap - item
            if 0 < remainder < small_item_threshold:
                priorities[i] += 0.3

    # Balanced bin filling heuristic
    for i, cap in enumerate(bins_remain_cap):
        if balance_threshold <= cap <= balance_threshold + small_item_threshold and cap >= item:
            priorities[i] += balance_boost

    priorities += np.random.rand(len(bins_remain_cap)) * random_factor
    return priorities
```
