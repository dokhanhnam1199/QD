```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, almost full bin filling, small remainder preference, and larger item avoidance with adaptive parameters and a smarter penalty system."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    not_fit_penalty = -1e9  # Significant penalty for bins that can't fit the item
    almost_full_threshold = 0.95  # Increased threshold to prioritize filling almost full bins
    almost_full_boost = 1.0  # Increased boost for almost full bins
    small_item_threshold = 0.1 * np.max(bins_remain_cap)
    small_item_boost = 0.5  # increased boost for small item
    large_item_threshold = 0.75 * np.max(bins_remain_cap)  # Threshold for considering an item "large"
    large_item_penalty = -0.2  # Reduced penalty for placing larger items into bins with sufficient space
    random_factor = 0.005 # Reduced random factor

    # First-Fit Decreasing (FFD) component with capacity-aware prioritization
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space
        else:
            priorities[i] = not_fit_penalty # Strong penalty for not fitting

    # Almost-Full Bin Filling
    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) > almost_full_threshold
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += almost_full_boost  # Substantially boost almost full bins

    # Small Item Preference: reward the bins with smallest remainders
    if item < small_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            remainder = cap - item
            if 0 < remainder < small_item_threshold:
                priorities[i] += small_item_boost  # Boost bins with small remainders

    # Larger item handling: discourage putting large items in bins where they barely fit.
    if item > large_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            if item <= cap < (item + small_item_threshold):
                priorities[i] += large_item_penalty  # Slightly penalize bins where large items barely fit

    priorities += np.random.rand(len(bins_remain_cap)) * random_factor # Small random factor

    return priorities
```
