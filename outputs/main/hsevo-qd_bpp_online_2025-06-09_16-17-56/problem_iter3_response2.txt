```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.
    # Bins that cannot fit the item get a very low priority.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the wasted space. Aim to minimize wasted space
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit.

    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.
    # This helps consolidate existing items and prevents creation of many small empty bins.
    # Dynamically adjust almost_full_threshold
    bin_size = np.max(bins_remain_cap)
    almost_full_threshold = 0.7 + 0.2 * (item / bin_size) #Adjust between 0.7 and 0.9 according to item size
    is_almost_full = bins_remain_cap / bin_size < (1 - almost_full_threshold)

    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += 0.6  # Boost priority for filling up almost full bins, slightly more than before

    # Heuristic 3: Introduce "best fit" component that encourages selecting bin close to the item's size, but not smaller
    # Avoids too small remaining capacities for bigger items later.
    potential_best_fit = np.copy(bins_remain_cap)
    potential_best_fit[bins_remain_cap < item] = np.inf #Ignore bins that are too small
    best_fit_idx = np.argmin(potential_best_fit)

    if bins_remain_cap[best_fit_idx] >= item:
        wasted_space = bins_remain_cap[best_fit_idx] - item
        priorities[best_fit_idx] += 0.4 / (1 + wasted_space)


    # Heuristic 4: Add a small random factor to break ties and encourage exploration of different bin assignments.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
