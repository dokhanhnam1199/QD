```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits, favoring those with tighter fits
    but avoiding near-empty bins after placement. It also incorporates a small random
    factor to break ties and potentially explore the solution space more broadly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins where the item fits
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        # If item doesn't fit in any bin, return zero priorities.
        return priorities

    # Calculate remaining capacity *after* placement. If item doesn't fit in, will become negative
    post_placement_capacities = bins_remain_cap - item

    # Calculate the ratio of item size to remaining capacity *after* placement
    fill_ratios = item / (bins_remain_cap - item + 1e-9)  # added small value to avoid division by zero

    # Set priorities for valid bins.
    priorities[valid_bins] = fill_ratios[valid_bins]

    # Adjust priority based on the post_placement capacity (favour tighter fits): avoid leaving near-empty bins
    priorities[valid_bins] = priorities[valid_bins] - 0.1 * (post_placement_capacities[valid_bins] / np.max(bins_remain_cap))

    #Add a bit of randomeness to break ties.
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01


    return priorities
```
