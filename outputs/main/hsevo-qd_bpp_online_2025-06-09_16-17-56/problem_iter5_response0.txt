```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                almost_full_threshold: float = 0.75,
                almost_full_boost: float = 0.5,
                random_factor: float = 0.02,
                not_fit_penalty: float = -1e9,
                small_item_threshold: float = 0.1,
                small_item_bonus: float = 0.2) -> np.ndarray:
    """Combines FFD-inspired scoring with almost-full bin boosting and a random factor."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)

            # Small item bonus: Preferentially fill bins if item is small.
            if item < small_item_threshold:
                priorities[i] += small_item_bonus
        else:
            priorities[i] = not_fit_penalty

    #Boost almost full bins
    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += almost_full_boost

    priorities += np.random.rand(len(bins_remain_cap)) * random_factor
    return priorities
```
