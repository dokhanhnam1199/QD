```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are a good fit for the item,
    avoiding both overly small and overly large remaining capacities.
    It also penalizes bins that would become almost full,
    but provides a bonus for bins that can accommodate the item
    with a bit of space left.  A small random component is added to break ties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity < item:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
        else:
            # Fit ratio: How much of the bin will be filled
            fit_ratio = item / remaining_capacity

            # Prioritize bins that aren't too small and aren't nearly full
            # We want fit_ratio to be close to optimal_ratio
            optimal_ratio = 0.8  # Example: Prefer filling the bin to 80%
            priority = -abs(fit_ratio - optimal_ratio)

            # Slightly penalize bins that become nearly full
            if remaining_capacity - item < 0.1:
                priority -= 0.2  # A small penalty

            # Reward bins with some space left after adding the item
            if remaining_capacity - item > 0.2:
                priority += 0.1  # A small bonus

            priorities[i] = priority

    # Add a small random component to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
