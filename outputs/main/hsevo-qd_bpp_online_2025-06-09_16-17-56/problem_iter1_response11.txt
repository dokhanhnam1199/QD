```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-9
    available_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(available_bins):
        # Calculate the wasted space if the item is added to each bin
        wasted_space = bins_remain_cap - item
        wasted_space[wasted_space < 0] = np.inf  # Penalize infeasible bins

        # Prioritize bins with less wasted space
        priorities = -wasted_space

        # Introduce a penalty for bins that are nearly full
        capacity_ratios = item / (bins_remain_cap + epsilon)
        priorities += (capacity_ratios > 0.8) * 10  # Higher priority if close to full, tunable parameter

        # Even higher priority for perfect fit (or very close)
        perfect_fit = np.abs(wasted_space) < epsilon * 100
        priorities[perfect_fit] += 1000 # Enormous priority if perfect fit

    else:
        priorities[:] = -np.inf

    return priorities
```
