{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            #Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n                priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First Fit Decreasing (FFD) inspired - prefer bins with enough space, penalized by wasted space.\n    # Bins that cannot fit the item get a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate the wasted space. Aim to minimize wasted space\n            wasted_space = cap - item\n            priorities[i] = 1.0 / (1.0 + wasted_space)  # Higher priority for less wasted space\n        else:\n            priorities[i] = -1e9  # Very low priority if item doesn't fit.\n\n    # Heuristic 2: Address potential fragmentation by occasionally filling bins that are almost full.\n    # This helps consolidate existing items and prevents creation of many small empty bins.\n\n    almost_full_threshold = 0.9  # Tuneable parameter: what fraction of full is \"almost full\"?\n    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)\n\n    for i, is_full in enumerate(is_almost_full):\n        if is_full and bins_remain_cap[i] >= item:\n            priorities[i] += 0.5  # Boost priority for filling up almost full bins\n\n    # Heuristic 3: Introduce a \"balance\" heuristic. Prefer bins that are neither too full nor too empty.\n    # This can prevent creating very small residual bins while also avoiding excessive wasted space early on.\n\n    balance_threshold_low = 0.2  # Tuneable parameter: lower bound of \"balanced\" fill level\n    balance_threshold_high = 0.8  # Tuneable parameter: upper bound of \"balanced\" fill level\n\n    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) #Calculate current fill level\n\n    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)\n\n    for i, is_bal in enumerate(is_balanced):\n        if is_bal and bins_remain_cap[i] >= item:\n            priorities[i] += 0.25  # Give a moderate boost to balanced bins\n\n    # Heuristic 4: Small items should prefer bins that would leave a small, but non-zero, remainder.\n    small_item_threshold = 0.1 * np.max(bins_remain_cap)  # Define \"small\" relative to bin size\n    if item < small_item_threshold:\n      for i, cap in enumerate(bins_remain_cap):\n        remainder = cap - item\n        if 0 < remainder < small_item_threshold: #If remainder is small and positive\n          priorities[i] += 0.3\n\n    # Heuristic 5: Add a small random factor to break ties and encourage exploration of different bin assignments.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the first heuristic incorporates several tunable parameters (almost_full_threshold, almost_full_boost, random_factor, not_fit_penalty), while the last one uses a simple logarithmic ratio. Also, the first one utilizes several heuristics to improve performance while the last one only uses one. (2nd) vs (19th) follows a similar pattern. (3rd) vs (18th), and (4th) vs (17th) also show that the better heuristics include more parameters. Comparing (1st) vs (2nd), we see that the first one uses tunable parameters instead of hardcoded values. Also, the first one has a not_fit_penalty that is much larger than the one in the second one. (10th) vs (11th) shows that the better heuristic has more sophisticated consideration about small items. Comparing (second worst) vs (worst), we see that the second worst is much better as it implements a penalty when items don't fit. Overall: Better heuristics consider more factors, use tunable parameters, and handle edge cases more effectively.\n- \nOkay, here's a redefined \"Current Self-Reflection\" focused on actionable insights for designing better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Rigorous Analysis, Adaptive Strategy, Edge Case Mastery, Penalties/Constraints.\n\n*   **Advice:** Instead of just *considering* factors, *quantify* their impact through rigorous analysis. Dynamically adjust tunable parameters based on real-time performance feedback (adaptive strategy). Prioritize robust edge case handling, not just consideration.\n\n*   **Avoid:** Overly complex solutions *without* demonstrable benefit. General statements about \"balancing\" without specifics.\n\n*   **Explanation:** Move beyond vague advice. Emphasize measurable impact and data-driven adaptation, not just generic statements about complexity or balance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}