```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                almost_full_threshold: float = 0.75,
                almost_full_boost: float = 0.45,
                random_factor: float = 0.01,
                not_fit_penalty: float = -1e9,
                balance_threshold_low: float = 0.2,
                balance_threshold_high: float = 0.8,
                small_item_threshold_ratio: float = 0.1,
                small_item_boost: float = 0.3) -> np.ndarray:
    """Combines best aspects of v0 and v1 with refined small item handling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing (FFD) inspired
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            priorities[i] = 1.0 / (1.0 + wasted_space)
        else:
            priorities[i] = not_fit_penalty

    # Almost full boost
    is_almost_full = bins_remain_cap / np.max(bins_remain_cap) < (1 - almost_full_threshold)
    for i, is_full in enumerate(is_almost_full):
        if is_full and bins_remain_cap[i] >= item:
            priorities[i] += almost_full_boost

    # Balance heuristic
    bin_fill_levels = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    is_balanced = (bin_fill_levels >= balance_threshold_low) & (bin_fill_levels <= balance_threshold_high)
    for i, is_bal in enumerate(is_balanced):
        if is_bal and bins_remain_cap[i] >= item:
            priorities[i] += 0.25

    # Small item handling - adaptive threshold and boost
    small_item_threshold = small_item_threshold_ratio * np.max(bins_remain_cap)
    if item < small_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            remainder = cap - item
            if 0 < remainder < small_item_threshold:
                priorities[i] += small_item_boost

    # Random factor for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * random_factor

    return priorities
```
