```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """ε‑greedy inverse‑slack with squared‑slack penalty, combined via softmax."""
    epsilon = 0.2
    beta = 0.01
    weight_inv = 0.5
    weight_sq = 0.3
    weight_lin = 0.2
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftover = bins_remain_cap[feasible] - item
    inv_score = 1.0 / (leftover + 1.0)
    sq_penalty = -beta * leftover**2
    lin_score = -leftover
    deterministic = weight_inv * inv_score + weight_sq * sq_penalty + weight_lin * lin_score
    random_part = np.random.rand(feasible.sum())
    combined = (1 - epsilon) * 1) * deterministic + epsilon * random_part
    max_score = np.max(combined)
    exp_scores = np.exp(combined - max_score)
    probabilities = np.zeros_like(bins_remain_cap, dtype=float)
    probabilities[feasible] = exp_scores / exp_scores.sum()
    return probabilities
```
