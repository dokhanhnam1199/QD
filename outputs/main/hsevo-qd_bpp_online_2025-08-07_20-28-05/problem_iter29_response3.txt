```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.2,
    utilization_weight: float = 0.2,
    rng: np.random.Generator = None,
) -> np.ndarray:
    """Score bins via inverse slack, epsilonâ€‘greedy randomness, and utilization weight."""
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.shape[0]
    if n == 0:
        return np.array([], dtype=float)
    feasible = caps >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    leftovers = caps[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0)
    rng: np.random.Generator = np.random.default_rng() if rng is None else rng
    random_part = epsilon * rng.random(size=deterministic.shape)
    base_score = (1 - epsilon) * deterministic + random_part
    capacity = caps.max() if caps.size else 0.0
    if capacity > 0:
        used_ratio = (capacity - caps) / capacity
    else:
        used_ratio = np.zeros_like(caps)
    base_score += utilization_weight * used_ratio[feasible]
    scores[feasible] = base_score
    return scores
```
