```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Computes priority by softmax of inverse slack, then mixes with uniform random to encourage exploration."""
    feasible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if not feasible.any():
        return priorities
    slack = bins_remain_cap[feasible] - item
    det_scores = 1.0 / (slack + 1e-9)
    temp = 1.0
    exp_vals = np.exp(det_scores / temp - np.max(det_scores / temp))
    softmax = exp_vals / exp_vals.sum()
    epsilon = 0.2
    random_part = np.random.rand(feasible.sum())
    mixed = (1 - epsilon) * softmax + epsilon * random_part
    priorities[feasible] = mixed / mixed.sum()
    return priorities
```
