```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                beta: float = 0.01, epsilon: float = 1e-9,
                noise_eps: float = 1e-9) -> np.ndarray:
    """Inverse‑slack score with quadratic penalty and deterministic tie‑breaker."""
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not feasible.any():
        return scores
    slack = bins_remain_cap[feasible] - item
    raw = 1.0 / (slack + epsilon) - beta * slack**2
    tie_noise = (np.arange(len(bins_remain_cap)) * 0.6180339887498949) % 1 * noise_eps
    scores[feasible] = raw + tie_noise[feasible]
    return scores
```
