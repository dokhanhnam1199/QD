```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Deterministic priority: for large items (>0.5), favor bins with most space; for others, use inverse slack to favor tight fits."""
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    if item > 0.5:
        scores[feasible] = bins_remain_cap[feasible]
    else:
        slack = bins_remain_cap[feasible] - item
        epsilon = 1e-12
        scores[feasible] = 1.0 / (slack + epsilon)
    return scores
```
