```python
import numpy as np

# Global per‑bin statistics for lightweight online learning.
_selection_counts = None
_total_rewards = None
_total_calls = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid scoring: inverse slack, penalty, ε‑noise, avg reward, UCB, softmax."""
    global _selection_counts, _total_rewards, _total_calls
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.shape[0]
    if n == 0:
        return np.array([], dtype=float)
    if _selection_counts is None or _selection_counts.shape[0] != n:
        _selection_counts = np.zeros(n, dtype=float)
        _total_rewards = np.zeros(n, dtype=float)
        _total_calls = 0
    feasible = caps >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = caps[feasible] - item
    inv_slack = 1.0 / (slack + 1.0)
    beta = 0.1
    penalty = -beta * (slack ** 2)
    deterministic = inv_slack + penalty
    avg_reward = np.zeros_like(deterministic)
    mask = _selection_counts[feasible] > 0
    avg_reward[mask] = _total_rewards[feasible][mask] / _selection_counts[feasible][mask]
    reward_weight = 0.2
    total_calls = _total_calls + 1e-6
    ucb = np.sqrt(2 * np.log(total_calls) / (_selection_counts[feasible] + 1e-6))
    ucb_weight = 0.05
    combined = deterministic + reward_weight * avg_reward + ucb_weight * ucb
    epsilon = 0.05
    noise = epsilon * np.random.rand(combined.shape[0])
    raw = combined + noise
    temperature = 0.5
    exp_vals = np.exp(raw / temperature)
    total_exp = exp_vals.sum()
    if total_exp > 0:
        scores[feasible] = exp_vals / total_exp
    best_idx = int(np.argmax(scores))
    if feasible[best_idx]:
        chosen_slack = caps[best_idx] - item
        reward = -chosen_slack
        _selection_counts[best_idx] += 1
        _total_rewards[best_idx] += reward
        _total_calls += 1
    return scores
```
