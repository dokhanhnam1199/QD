```python
import numpy as np

# Combines multiple slack components with epsilon‑greedy exploration and softmax scaling.
def priority_v2(item: float, bins_remain_cap: np.ndarray,
                epsilon: float = 0.1, w_inv: float = 0.5,
                w_lin: float = 0.3, w_sq: float = 0.2,
                temperature: float = 1.0) -> np.ndarray:
    """
    Epsilon‑greedy softmax priority blending inverse slack, linear slack penalty,
    and squared slack penalty for balanced tight fits and exploration.
    """
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if np.any(feasible):
        slack = bins_remain_cap[feasible] - item
        base = w_inv * (1.0 / (slack + 1.0)) - w_lin * slack - w_sq * slack**2
        scores[feasible] = base
    if epsilon > 0:
        scores += epsilon * np.random.rand(bins_remain_cap.size)
    finite_mask = np.isfinite(scores)
    if not np.any(finite_mask):
        return scores
    exp_scores = np.exp((scores[finite_mask] / temperature) -
                        np.max(scores[finite_mask] / temperature))
    probs = np.zeros_like(scores)
    probs[finite_mask] = exp_scores / exp_scores.sum()
    return probs
```
