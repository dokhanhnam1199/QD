```python
import numpy as np

# Hyperparameters
_EPSILON = 0.2
_BETA = 0.01
_GAMMA = 0.5
_DELTA = 0.1
_UCB_WEIGHT = 0.05

# State
_bin_capacity = None
_avg_slack = None
_slack_counts = None
_total_calls = 0

# Hybrid inverse‑slack + UCB with ε‑greedy exploration.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic using inverse slack, UCB bonus, and ε‑greedy noise to rank bins."""
    global _bin_capacity, _avg_slack, _slack_counts, _total_calls
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.size
    if n == 0:
        return np.array([], dtype=float)
    if _bin_capacity is None:
        _bin_capacity = caps.max() if caps.size > 0 else 1.0
    else:
        if caps.max() > _bin_capacity:
            _bin_capacity = caps.max()
    if _avg_slack is None or _avg_slack.shape[0] != n:
        _avg_slack = np.zeros(n, dtype=float)
        _slack_counts = np.zeros(n, dtype=int)
    _total_calls += 1

    feasible = caps >= item
    if not np.any(feasible):
        return np.full_like(caps, -np.inf)
    slack = caps[feasible] - item
    inv_slack = 1.0 / (slack + 1e-9)
    fill = 1.0 - slack / _bin_capacity
    avg_slack = _avg_slack[feasible]
    counts = _slack_counts[feasible]
    ucb_bonus = np.sqrt(2 * np.log(_total_calls) / (counts + 1e-9))
    deterministic = inv_slack - _BETA * slack**2 + _GAMMA * fill - _DELTA * avg_slack + _UCB_WEIGHT * ucb_bonus
    random_part = np.random.rand(slack.size)
    scores = (1 - _EPSILON) * deterministic + _EPSILON * random_part
    priorities = np.full_like(caps, -np.inf, dtype=float)
    priorities[feasible] = scores
    idx = np.where(feasible)[0]
    _avg_slack[idx] = (_avg_slack[idx] * _slack_counts[idx] + slack) / (_slack_counts[idx] + 1)
    _slack_counts[idx] += 1
    return priorities
```
