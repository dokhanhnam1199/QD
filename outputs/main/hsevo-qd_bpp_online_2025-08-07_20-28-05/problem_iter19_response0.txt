import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.42170243612012437,
    w_inv: float = 0.9276819728230241,
    w_lin: float = 0.4987693895463331,
    w_sq: float = 0.9940586418535134,
    temperature: float = 9.059601233208662,
    slack_offset: float = 6.293000040250786,
) -> np.ndarray:
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)

    slack = bins_remain_cap[feasible] - item
    core = w_inv / (slack + slack_offset) - w_lin * slack - w_sq * slack**2

    rand = np.random.rand(feasible.sum())
    scores_feasible = (1 - epsilon) * core + epsilon * rand

    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = scores_feasible

    max_score = np.max(scores_feasible)
    exp_scores = np.exp((scores_feasible - max_score) / temperature)
    probs_feasible = exp_scores / exp_scores.sum()

    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = probs_feasible
    return probs
