```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse slack scoring with diversity bonus and ε‑greedy exploration.
    """
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    n = bins_remain_cap.size
    if n == 0:
        return np.array([], dtype=float)
    epsilon = 0.1
    offset = 1e-6
    slack = bins_remain_cap - item
    feasible = slack >= 0
    det = np.zeros(n, dtype=float)
    det[feasible] = 1.0 / (slack[feasible] + offset)
    mean_slack = np.mean(slack[feasible]) if feasible.any() else 0.0
    diversity = np.zeros(n, dtype=float)
    diversity[feasible] = (mean_slack - slack[feasible])
    diversity_weight = 0.2
    combined = det + diversity_weight * diversity
    combined[~feasible] = -np.inf
    random_term = np.random.rand(n)
    scores = (1 - epsilon) * combined + epsilon * random_term
    return scores
```
