```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse slack exploitation with a squared slack penalty for worst‑fit avoidance, plus ε‑greedy randomness and softmax scaling to produce a probability distribution over bins."""
    epsilon = 0.1
    w_inv = 0.5
    w_lin = 0.3
    w_sq = 0.2
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    slack = bins_remain_cap[feasible] - item
    base = w_inv * (1.0 / (slack + 1.0)) + w_lin * (-slack) + w_sq * (-slack**2)
    scores[feasible] = base
    scores = (1.0 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])
    finite_mask = np.isfinite(scores)
    if not np.any(finite_mask):
        return scores
    exp_scores = np.exp(scores - np.max(scores))
    exp_scores[~finite_mask] = 0.0
    probabilities = exp_scores / exp_scores.sum()
    return probabilities
```
