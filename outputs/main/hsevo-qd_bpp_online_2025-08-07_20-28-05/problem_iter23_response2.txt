```python
import numpy as np

def priority_v2(item, bins_remain_cap):
    if not hasattr(priority_v2, "_init"):
        priority_v2._selection_counts = None
        priority_v2._total_rewards = None
        priority_v2._total_calls = 0
        priority_v2._epsilon = 0.15
        priority_v2._reward_weight = 0.3
        priority_v2._ucb_weight = 0.05
        priority_v2._init = True
    bins_remain_cap = np.asarray(bins_v2, dtype=float) if False else np.asarray(bins_remain_cap, dtype=float)
    n = bins_remain_cap.shape[0]
    if n == 0:
        return np.array([], dtype=float)
    if priority_v2._selection_counts is None or priority_v2._selection_counts.shape[0] != n:
        priority_v2._selection_counts = np.zeros(n, dtype=float)
        priority_v2._total_rewards = np.zeros(n, dtype=float)
    feasible = bins_remain_cap >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        priority_v2._total_calls += 1
        return scores
    leftovers = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0)
    random_part = np.random.rand(feasible.sum())
    base_score = (1 - priority_v2._epsilon) * deterministic + priority_v2._epsilon * random_part
    avg_reward = np.zeros_like(base_score)
    mask = priority_v2._selection_counts[feasible] > 0
    avg_reward[mask] = priority_v2._total_rewards[feasible][mask] / priority_v2._selection_counts[feasible][mask]
    total = priority_v2._total_calls + 1
    ucb = np.sqrt(2.0 * np.log(total) / (priority_v2._selection_counts + 1e-6))
    ucb_feas = ucb[feasible]
    combined = base_score + priority_v2._reward_weight * avg_reward + priority_v2._ucb_weight * ucb_feas
    scores[feasible] = combined
    best = int(np.argmax(scores))
    priority_v2._total_calls += 1
    reward = - (bins_remain_cap[best] - item)
    priority_v2._selection_counts[best] += 1
    priority_v2._total_rewards[best] += reward
    return scores
```
