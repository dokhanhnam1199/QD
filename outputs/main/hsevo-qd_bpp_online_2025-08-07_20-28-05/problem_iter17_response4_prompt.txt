{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                epsilon: float = 0.3272578070972282,\n                offset: float = 3.6930496425184325,\n                score_scale: float = 1.8547777441606528) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins given an item size.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to place.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of bins.\n    epsilon : float, optional\n        Weight for the random exploration term (default 0.2).\n    offset : float, optional\n        Small constant added to leftover capacity to avoid division by zero\n        (default 1.0).\n    score_scale : float, optional\n        Scaling factor for the deterministic part of the score\n        (default 1.0).\n\n    Returns\n    -------\n    np.ndarray\n        Score for each bin; -inf for infeasible bins.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    leftovers = bins_remain_cap[feasible] - item\n    scores[feasible] = score_scale / (leftovers + offset)\n    scores = (1 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Combine inverse\u2011slack and linear\u2011slack with \u03b5\u2011greedy randomness.\n    \"\"\"\n    \u03b5\u2011greedy scoring: weighted sum of inverse slack and negative slack, with random tie\u2011breaker.\n    \"\"\"\n    epsilon = 0.15          # exploration factor\n    w_inv = 0.6             # weight for reciprocal slack\n    w_lin = 0.4             # weight for linear slack penalty\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    slack = bins_remain_cap[feasible] - item\n    base = w_inv * (1.0 / (slack + 1.0)) + w_lin * (-slack)\n    scores[feasible] = base\n    scores = (1 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])\n    # softmax scaling for probability\u2011like priorities\n    finite_mask = np.isfinite(scores)\n    if not np.any(finite_mask):\n        return scores\n    max_score = np.max(scores[finite_mask])\n    exp_scores = np.exp(scores - max_score)\n    exp_scores[~finite_mask] = 0.0\n    probabilities = exp_scores / exp_scores.sum()\n    return probabilities\n\n### Analyze & experience\n- - **(Best)\u202fHeuristic\u202f1 vs (Worst)\u202fHeuristic\u202f20** \u2013\u202fHeuristic\u202f1 is a *stateless* inverse\u2011slack score with a tiny \u03b5\u2011random perturbation. It is O(n) with virtually no bookkeeping. Heuristic\u202f20 augments the same core with **global counters**, **UCB\u2011style exploration**, a **median\u2011based diversity term**, and **reward updates** after every placement. This yields a far richer model but introduces heavy state, many hyper\u2011parameters (c, \u03b5, weights), and non\u2011trivial update cost. In practice the extra complexity can cause high variance and over\u2011fitting on short streams, while the simple heuristic remains robust and fast.\n\n- **(2nd\u202fBest)\u202fHeuristic\u202f2 vs (2nd\u202fWorst)\u202fHeuristic\u202f19** \u2013\u202fHeuristic\u202f2 is identical to the best one (pure inverse\u2011slack\u202f+\u202f\u03b5\u2011noise). Heuristic\u202f19 only defines a signature and docstring; the body stops after allocating a zero\u2011filled array and never computes a meaningful score. Consequently it cannot guide any placement, making it dramatically weaker.\n\n- **1st vs 2nd** \u2013\u202fBoth are byte\u2011for\u2011byte copies; the ranking difference likely reflects stochastic performance variations rather than code differences.\n\n- **3rd vs 4th** \u2013\u202fHeuristic\u202f3 mirrors the baseline (no state). Heuristic\u202f4 adds **online averaging of rewards** per bin and a **reward weight** (0.3). This gives the algorithm a learning signal that can improve fit over long horizons, but it also requires correct initialization, handling of sparse updates, and careful tuning of the reward weight to avoid destabilising the deterministic slack term.\n\n- **(Second\u202fWorst)\u202fHeuristic\u202f19 vs (Worst)\u202fHeuristic\u202f20** \u2013\u202fHeuristic\u202f19 is essentially a stub (returns zeros), while Heuristic\u202f20 implements a full **UCB\u2011plus\u2011diversity** scheme. Despite being more sophisticated, Heuristic\u202f20 still ranks lower than many intermediate designs because its added machinery can outweigh benefits on typical benchmark streams, especially when the exploration bonus dominates the core inverse\u2011slack signal.\n\n- **Overall patterns** \u2013\u202fThe top\u2011ranked heuristics are *minimalistic*: a deterministic inverse\u2011slack component (or slack\u2011based linear penalty) combined with a modest \u03b5\u2011random term. Mid\u2011ranked methods introduce **softmax probabilities**, **linear\u2011plus\u2011quadratic slack penalties**, or **multi\u2011rule weighted sums** (e.g., Heuristic\u202f10), offering more flexibility but demanding extra parameters. The lowest\u2011ranked approaches either lack a functional core (Heuristic\u202f18,\u202f19) or overload the decision with many learned components (Heuristics\u202f17,\u202f20) that are hard to tune and may degrade performance without ample data.\n- \n- **Keywords:** feasibility filter, surrogate cost model, normalized profit\u2011to\u2011resource ratio, offline calibration  \n- **Advice:** Apply a two\u2011stage pipeline: prune infeasible options with deterministic rules, then rank the remainder by a single normalized efficiency metric derived from an offline\u2011trained surrogate; retrain the surrogate periodically without runtime state.  \n- **Avoid:** Random exploration terms, online state accumulation, multi\u2011parameter softmax scaling, heavy hyper\u2011parameter tuning, duplicated code, ad\u2011hoc reward averaging.  \n- **Explanation:** This yields a fast, transparent heuristic; feasibility is guaranteed, ranking is data\u2011grounded, and offline learning limits runtime overhead while preserving interpretability.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}