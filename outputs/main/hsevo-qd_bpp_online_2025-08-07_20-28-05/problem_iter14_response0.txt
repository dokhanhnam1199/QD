```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                offset: float = 1e-6,
                temperature: float = 1.0,
                weight: float = 0.3) -> np.ndarray:
    """
    Combine inverse slack and temperatureâ€‘scaled exponential to favor tight fits.
    """
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    inv_score = 1.0 / (slack + offset)
    exp_score = np.exp(-slack / temperature)
    scores[feasible] = (1 - weight) * inv_score + weight * exp_score
    return scores
```
