```python
# Inverse slack priority with epsilonâ€‘greedy exploration and infeasibility guard.
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse slack priority with epsilon-greedy exploration and infeasibility guard.
    """
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    core = 1.0 / (leftovers + 1e-9)
    eps = 0.1
    scores = (1 - eps) * core + eps * np.random.rand(core.size)
    full_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    full_scores[feasible] = scores
    return full_scores
```
