import numpy as np

def priority_v2(item, bins_remain_cap):
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    inv = 1.0 / (slack + 1.0)
    neg = -slack
    inv_norm = (inv - inv.min()) / (inv.max() - inv.min() + 1e-9)
    neg_norm = (neg - neg.min()) / (neg.max() - neg.min() + 1e-9)
    combined = 0.7 * inv_norm + 0.3 * neg_norm
    random_part = np.random.rand(feasible.sum())
    combined = 0.8 * combined + 0.2 * random_part
    scores[feasible] = combined
    max_score = np.max(scores[feasible])
    exp_scores = np.exp(scores - max_score)
    probabilities = exp_scores / exp_scores.sum()
    return probabilities
