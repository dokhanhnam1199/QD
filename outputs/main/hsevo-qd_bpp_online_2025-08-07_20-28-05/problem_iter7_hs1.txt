import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                temperature: float = 0.22792798031475317,
                total_threshold: float = 0.7518899527010219) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        temperature: Temperature controlling the softness of the exponential weighting.
        total_threshold: Minimum sum of exponential values required to assign nonâ€‘zero priorities.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    feasible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    exp_vals = np.exp(-slacknowledge := slack / temperature)  # Using temperature as a weight
    total = exp_vals.sum()
    if total > total_threshold:
        priorities[feasible] = exp_vals / total
    return priorities
