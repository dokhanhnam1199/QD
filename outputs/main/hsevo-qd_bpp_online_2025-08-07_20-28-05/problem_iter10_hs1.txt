import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    slack_offset: float = 2.70677636001002,
    beta: float = 0.6018243303258581,
    epsilon: float = 0.3547713815481884,
    temperature: float = 4.440339871902321,
) -> np.ndarray:
    """Score bins by inverse slack, squared‑slack penalty, ε‑greedy noise, and softmax."""
    feasible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    inv_slack = 1.0 / (slack + slack_offset)
    penalty = -beta * (slack ** 2)
    deterministic = inv_slack + penalty
    random_noise = epsilon * np.random.rand(deterministic.shape[0])
    raw = deterministic + random_noise
    exp_vals = np.exp(raw / temperature)
    total = exp_vals.sum()
    if total > 0:
        priorities[feasible] = exp_vals / total
    return priorities
