```python
import numpy as np

# Priority: inverse slack deterministic core, ε‑greedy exploration, softmax normalization.
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.2,
                offset: float = 1.0,
                scale: float = 1. # scaling deterministic term
                temperature: float = 1.0) -> np.ndarray:
    """Compute priority scores using inverse slack, ε‑greedy exploration, and softmax."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    deterministic = scale / (leftovers + offset)
    random_part = np.random.rand(feasible.sum())
    combined = (1 - epsilon) * deterministic + epsilon * random_part
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = combined
    max_score = np.max(scores[feasible])
    exp_scores = np.exp((scores - max_score) / temperature)
    probabilities = exp_scores / exp_scores.sum()
    return probabilities
```
