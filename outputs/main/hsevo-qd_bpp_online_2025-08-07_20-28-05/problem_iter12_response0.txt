```python
import numpy as np

def _extract_features(item: float, bins_remain_cap: np.ndarray, capacity: float):
    slack = bins_remain_cap - item
    slack_norm = slack / capacity
    used_ratio = (capacity - bins_remain_cap) / capacity
    return slack_norm, used_ratio

def _combine_features(slack_norm: np.ndarray, used_ratio: np.ndarray):
    return used_ratio - slack_norm

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    capacity = np.max(bins_remain_cap) if bins_remain_cap.size else 0.0
    feasible = bins_remain_cap >= item
    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    if capacity > 0 and np.any(feasible):
        slack_norm, used_ratio = _extract_features(item, bins_remain_cap, capacity)
        combined = _combine_features(slack_norm, used_ratio)
        scores[feasible] = combined[feasible]
    return scores
```
