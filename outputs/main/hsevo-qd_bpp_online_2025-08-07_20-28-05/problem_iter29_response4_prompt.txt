{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Inverse\u2011slack scoring with epsilon exploration and per\u2011bin learning.\"\"\"\n    global _selection_counts, _total_rewards, _total_calls\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.array([], dtype=float)\n    if '_selection_counts' not in globals() or _selection_counts.shape[0] != n:\n        _selection_counts = np.zeros(n, dtype=int)\n        _total_rewards = np.zeros(n, dtype=float)\n        _total_calls = 0\n    feasible = caps >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = caps - item\n    det = 1.0 / (slack + 1.0)\n    avg_reward = np.zeros(n, dtype=float)\n    mask = _selection_counts > 0\n    avg_reward[mask] = _total_rewards[mask] / _selection_counts[mask]\n    reward_weight = 0.1\n    if _total_calls > 0:\n        ucb = np.zeros(n, dtype=float)\n        ucb[mask] = np.sqrt(2 * np.log(_total_calls) / _selection_counts[mask])\n        ucb_weight = 0.3\n    else:\n        ucb = np.zeros(n, dtype=float)\n        ucb_weight = 0.0\n    median_slack = np.median(slack[feasible]) if np.any(feasible) else 0.0\n    diversity = np.zeros(n, dtype=float)\n    diversity[feasible] = median_slack - slack[feasible]\n    diversity_weight = 0.1\n    combined = det + reward_weight * avg_reward + ucb_weight * ucb + diversity_weight * diversity\n    epsilon = 0.15\n    rand = np.random.rand(n)\n    scores[feasible] = (1 - epsilon) * combined[feasible] + epsilon * rand[feasible]\n    best = int(np.argmax(scores))\n    if feasible[best]:\n        reward = -(caps[best] - item)\n        _selection_counts[best] += 1\n        _total_rewards[best] += reward\n    _total_calls += 1\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_epsilon = 0.2\n_beta = 0.01\n_gamma = 0.5\n_delta = 0.1\n_bin_capacity = None\n_avg_slack = None\n_slack_counts = None\n\n    \"\"\"Score bins using inverse slack, fill bias, avg slack, and \u03b5\u2011exploration.\"\"\"\n    global _bin_capacity, _avg_slack, _slack_counts\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.shape[0]\n    if n == 0:\n        return np.array([], dtype=float)\n    if _bin_capacity is None:\n        _bin_capacity = caps.max() if caps.size > 0 else 1.0\n    elif caps.max() > _bin_capacity:\n        _bin_capacity = caps.max()\n    if _avg_slack is None or _avg_slack.shape[0] != n:\n        _avg_slack = np.zeros(n, dtype=float)\n        _slack_counts = np.zeros(n, dtype=int)\n    feasible = caps >= item\n    if not feasible.any():\n        return np.full_like(caps, -np.inf)\n    slack = caps[feasible] - item\n    inv_slack = 1.0 / (slack + 1e-9)\n    fill = 1.0 - slack / _bin_capacity\n    avg_slack = _avg_slack[feasible]\n    deterministic = inv_slack - _beta * slack**2 + _gamma * fill - _delta * avg_slack\n    random_part = np.random.rand(slack.size)\n    scores = (1 - _epsilon) * deterministic + _epsilon * random_part\n    priorities = np.full_like(caps, -np.inf)\n    priorities[feasible] = scores\n    idx = np.where(feasible)[0]\n    _avg_slack[idx] = (_avg_slack[idx] * _slack_counts[idx] + slack) / (_slack_counts[idx] + 1)\n    _slack_counts[idx] += 1\n    return priorities\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best (Heuristic\u202f1) is a compact, vectorized implementation that cleanly separates the inverse\u2011slack deterministic term and the \u03b5\u2011greedy random term, with no hidden state or side\u2011effects; the worst (Heuristic\u202f20) mixes many ad\u2011hoc bonuses (median diversity, UCB, diversity weight), contains inconsistent naming (`_pv2_counts` vs `bins_remain_cap`), and uses a clunky `best_idx` fallback, making it hard to read, maintain, and debug.  \n\n(second best) vs (second worst), we see that Heuristic\u202f2 includes a clear docstring, explicit handling of empty inputs, consistent shape checks, and a modest learning component (average reward); Heuristic\u202f19 is essentially a stub with no docstring, no scoring beyond \u2212\u221e, and no useful logic, offering no guidance to a caller.  \n\nComparing (1st) vs (2nd), we see that Heuristic\u202f1 favors simplicity and deterministic behavior, while Heuristic\u202f2 adds stateful online learning (selection counts, total rewards) and a reward\u2011weight term. The added complexity can improve adaptivity but also introduces mutable globals and extra bookkeeping, which may affect reproducibility.  \n\n(3rd) vs (4th), we see that Heuristic\u202f3 returns a proper probability distribution via softmax, enabling stochastic selection, but lacks a docstring; Heuristic\u202f4 provides a full docstring with parameter explanations and allows configurable offset and scaling, yet still returns raw scores rather than probabilities, limiting its direct use for sampling.  \n\n(second worst) vs (worst), we see that Heuristic\u202f19 offers only a minimal placeholder with no scoring logic, while Heuristic\u202f20 attempts a richer model (median\u2011based diversity, UCB, epsilon random) but suffers from duplicated code, unclear variable intent, and a fragile best\u2011index default, making it less reliable than the trivial stub.  \n\nOverall, the top heuristics prioritize clear vectorized math, minimal side\u2011effects, and concise documentation; lower\u2011ranked versions either add unnecessary complexity, lack proper comments/docstrings, or contain bugs that outweigh any theoretical benefit.\n- \n- **Keywords:** modularity, type\u2011safety, offline analysis, domain\u2011specific metrics, vectorization, reproducibility.  \n- **Advice:** decompose the heuristic into steps (feasibility test, cost estimate, selection); compute scores from metrics such as space utilization, geometry fit, and load balance; use immutable data structures and type hints; rely on vectorized NumPy ops and memoize sub\u2011computations; document each step with unit tests.  \n- **Avoid:** ad\u2011hoc metric blends, hidden mutable state, unnecessary hyper\u2011parameters, duplicated logic, non\u2011deterministic randomness.  \n- **Explanation:** A clear, modular pipeline with immutable, typed data and analytically derived scores stays fast, testable, and easy to maintain while leveraging rich problem\u2011specific information.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}