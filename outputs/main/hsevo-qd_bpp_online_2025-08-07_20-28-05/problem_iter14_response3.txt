```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                epsilon: float = 0.1,
                temperature: float = 1.0,
                total_threshold: float = 1e-6) -> np.ndarray:
    """Inversion slack + temperature softmax with epsilonâ€‘exploration; if softmax sum below threshold, all infeasible."""
    slack = bins_remain_cap - item
    feasible = slack >= 0
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if np.any(feasible):
        base = 1.0 / (slack[feasible] + 1.0)
        exp_vals = np.exp(base / temperature)
        sum_exp = exp_vals.sum()
        if sum_exp >= total_threshold:
            softmax = exp_vals / sum_exp
            scores[feasible] = softmax
        else:
            scores[feasible] = -np.inf
    scores = (1 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])
    return scores
```
