```python
import numpy as np

# Global state for the heuristic
_pv2_selection_counts = None
_pv2_total_rewards = None
_pv2_total_calls = None

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines epsilon‑greedy inverse slack scoring with UCB exploration and median‑based diversity to balance fit and exploration in online BPP."""
    global _pv2_selection_counts, _pv2_total_rewards, _pv2_total_calls
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    if _pv2_selection_counts is None or _pv2_selection_counts.shape[0] != n:
        _pv2_selection_counts = np.zeros(n, dtype=float)
        _pv2_total_rewards = np.zeros(n, dtype=float)
        _pv2_total_calls = 0
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full(n, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    det_score = 1.0 / (leftovers + 1.0)
    epsilon = 0.2
    rand_part = np.random.rand(leftovers.size)
    base_score = (1 - epsilon) * det_score + epsilon * rand_part
    selection_counts_feasible = _pv2_selection_counts[feasible]
    avg_reward_feasible = np.where(selection_counts_feasible > 0,
                                   _pv2_total_rewards[feasible] / selection_counts_feasible,
                                   0.0)
    c = 0.5
    exploration_bonus_feasible = c * np.sqrt(np.log(_pv2_total_calls + 1) / (selection_counts_feasible + 1))
    ucb_score = avg_reward_feasible + exploration_bonus_feasible
    median_leftover = np.median(leftovers) if leftovers.size > 0 else 0.0
    diversity_score = 1.0 / (np.abs(leftovers - median_leftover) + 1.0)
    ucb_weight = 0.3
    diversity_weight = 0.2
    combined_score_feasible = base_score + ucb_weight * ucb_score + diversity_weight * diversity_score
    scores = np.full(n, -np.inf, dtype=float)
    scores[feasible] = combined_score_feasible
    best = np.argmax(scores)
    chosen_leftover = bins_remain_cap[best] - item
    reward = -chosen_leftover
    _pv2_selection_counts[best] += 1
    _pv2_total_rewards[best] += reward
    _pv2_total_calls += 1
    return scores
```
