import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.28346241062869737, beta: float = 0.0777640800258535, eps_small: float = 2.679152817852087e-07) -> np.ndarray:
    """
    Combine inverse slack and negative squared slack with epsilon‑greedy randomness for balanced tight‑fit and exploration.
    """
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftover = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftover + eps_small) - beta * (leftover ** 2)
    random_part = np.random.rand(feasible.sum())
    scores = (1 - epsilon) * deterministic + epsilon * random_part
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[feasible] = scores
    return priorities
