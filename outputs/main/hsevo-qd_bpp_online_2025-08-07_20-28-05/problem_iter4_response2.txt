import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.3272578070972282,
                offset: float = 3.6930496425184325,
                score_scale: float = 1.8547777441606528) -> np.ndarray:
    """
    Compute priority scores for bins given an item size.

    Parameters
    ----------
    item : float
        Size of the item to place.
    bins_remain_cap : np.ndarray
        Remaining capacities of bins.
    epsilon : float, optional
        Weight for the random exploration term (default 0.2).
    offset : float, optional
        Small constant added to leftover capacity to avoid division by zero
        (default 1.0).
    score_scale : float, optional
        Scaling factor for the deterministic part of the score
        (default 1.0).

    Returns
    -------
    np.ndarray
        Score for each bin; -inf for infeasible bins.
    """
    feasible = bins_remain_cap >= item
    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    scores[feasible] = score_scale / (leftovers + offset)
    scores = (1 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])
    return scores
