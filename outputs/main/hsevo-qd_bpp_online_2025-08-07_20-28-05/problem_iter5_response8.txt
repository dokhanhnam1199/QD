```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """ε‑greedy inverse‑slack with squared‑slack penalty and softmax."""
    epsilon = 0.2
    beta = 0.1
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0)
    penalty = beta * leftovers**2
    deterministic_score = deterministic - penalty
    random_part = np.random.rand(leftovers.shape[0])
    combined = (1 - epsilon) * deterministic_score + epsilon * random_part
    max_combined = combined.max()
    exp_vals = np.exp(combined - max_combined)
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = exp_vals / exp_vals.sum()
    return probs
```
