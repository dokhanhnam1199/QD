```python
import numpy as np

_pv2_counts = None
_pv2_rewards = None
_pv2_total_calls = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function combining inverse slack, ε‑greedy, per‑bin reward, and lightweight UCB."""
    global _pv2_counts, _pv2_rewards, _pv2_total_calls
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    if _pv2_counts is None or _pv2_counts.shape[0] != n:
        _pv2_counts = np.zeros(n, dtype=float)
        _pv2_rewards = np.zeros(n, dtype=float)
    feasible = bins_remain_cap >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    leftovers = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0)
    epsilon = 0.15
    random_part = np.random.rand(feasible.sum())
    base_score = (1 - epsilon) * deterministic + epsilon * random_part
    counts_f = _pv2_counts[feasible]
    rewards_f = _pv2_rewards[feasible]
    avg_reward = np.where(counts_f > 0, rewards_f / counts_f, 0.0)
    reward_weight = 0.1
    exploration_bonus = np.sqrt(np.log(_pv2_total_calls + 1) / (counts_f + 1))
    exploration_weight = 0.15
    combined_score = base_score + reward_weight * avg_reward + exploration_weight * exploration_bonus
    scores[feasible] = combined_score
    best_idx = int(np.argmax(scores))
    _pv2_total_calls += 1
    reward = -(bins_remain_cap[best_idx] - item)
    _pv2_counts[best_idx] += 1
    _pv2_rewards[best_idx] += reward
    return scores
```
