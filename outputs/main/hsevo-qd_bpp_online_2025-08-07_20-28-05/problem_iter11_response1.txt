```python
import numpy as np

# Deterministic scoring for online bin packing
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic scoring combining inverse slack, linear slack penalty,
    and a diversity term to balance fit and uniform bin usage.
    """
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    # Component weights
    w_inv, w_lin, w_div = 0.6, 0.3, 0.1
    base = w_inv * (1.0 / (slack + 1.0)) + w_lin * (-slack)
    median_slack = np.median(slack)
    diversity = w_div * (1.0 / (np.abs(slack - median_slack) + 1.0))
    scores[feasible] = base + diversity
    return scores
```
