```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse slack with squared slack penalty and epsilon exploration.
    """
    eps = 0.1
    penalty_weight = 0.01
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    base = 1.0 / (leftovers + 1.0)
    penalty = penalty_weight * leftovers**2
    scores[feasible] = base - penalty
    scores += eps * np.random.rand(bins_remain_cap.size)
    return scores
```
