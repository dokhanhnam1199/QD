```python
import numpy as np

_selection_counts = None
_total_rewards = None

def priority_v2(item, bins_remain_cap, epsilon=0.1, w_inv=0.35, w_best=0.30, w_first=0.10, w_bal=0.10, w_reward=0.15):
    """Combine inverse slack, best‑fit, first‑fit, balance, and avg reward with ε‑exploration for online BPP."""
    global _selection_counts, _total_rewards
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.shape[0]
    if n == 0:
        return np.array([], dtype=float)
    if _selection_counts? _selection_counts is None or _selection_counts.shape[0] != n:
        _selection_counts = np.zeros(n, dtype=float)
        _total_rewards = np.zeros(n, dtype=float)
    feasible = caps >= item
    if not np.any(feasible):
        return np.full(n, -np.inf, dtype=float)
    slack = caps - item
    slack_feas = slack[feasible]
    inv_slack = 1.0 / (slack_feas + 1.0)
    best_fit = -slack_feas
    idx = np.arange(n)[feasible]
    first_fit = -idx.astype(float)
    target = caps.mean()
    fill_bal = -np.abs(slack_feas - target)
    avg_reward = np.zeros_like(slack_feas)
    mask = _selection_counts[feasible] > 0
    avg_reward[mask] = _total_rewards[feasible][mask] / _selection_counts[feasible][mask]
    combined = (w_inv * inv_slack + w_best * best_fit + w_first * first_fit + w_bal * fill_bal + w_reward * avg_reward)
    random_part = np.random.rand(slack_feas.shape[0])
    scores_feas = (1 - epsilon) * combined + epsilon * random_part
    scores = np.full(n, -np.inf, dtype=float)
    scores[feasible] = scores_feas
    best = int(np.argmax(scores))
    reward = - (caps[best] - item)
    _selection_counts[best] += 1
    _total_rewards[best] += reward
    return scores
```
