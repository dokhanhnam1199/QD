```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse slack and negative squared slack with epsilon‑greedy randomness for balanced tight‑fit and exploration."""
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftover = bins_remain_cap[feasible] - item
    epsilon = 0.2
    beta = 0.01
    deterministic = 1.0 / (leftover + 1e-9) - beta * (leftover ** 2)
    random_part = np.random.rand(feasible.sum())
    scores = (1 - epsilon) * deterministic + epsilon * random_part
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[feasible] = scores
    return priorities
```
