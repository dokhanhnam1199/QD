```python
import numpy as np

_global_bin_counts = None
_global_total_calls = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse‑slack priority with reward weighting, ε‑exploration, UCB bonus, and softmax."""
    global _global_bin_counts, _global_total_calls
    epsilon = 0.1
    reward_weight = 0.2
    ucb_weight = 0.1
    temperature = 1.0
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    n_bins = len(bins_remain_cap)
    if _global_bin_counts is None:
        _global_bin_counts = np.zeros(n_bins, dtype=int)
    elif _global_bin_counts.size < n_bins:
        _global_bin_counts = np.pad(_global_bin_counts, (0, n_bins - _global_bin_counts.size), 'constant')
    leftovers = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0)
    max_cap = bins_remain_cap.max()
    reward = 1.0 - leftovers / max_cap
    reward = np.clip(reward, 0.0, 1.0)
    weighted = deterministic * (1.0 + reward_weight * reward)
    if _global_bin_counts.size > 0:
        ucb = np.sqrt(np.log(_global_total_calls + 1) / (_global_bin_counts + 1))
        weighted += ucb_weight * ucb[feasible]
    random_part = np.random.rand(n_bins)
    combined = (1.0 - epsilon) * weighted + epsilon * random_part[feasible]
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = combined
    max_score = np.max(scores[feasible])
    exp_scores = np.exp((scores - max_score) / temperature)
    probabilities = exp_scores / exp_scores.sum()
    _global_total_calls += 1
    return probabilities

def update_bin_counts(selected_bin: int) -> None:
    """Increment usage count for the selected bin."""
    global _global_bin_counts
    n_bins = selected_bin + 1
    if _global_bin_counts is None:
        _global_bin_counts = np.zeros(n_bins, dtype=int)
    elif _global_bin_counts.size < n_bins:
        _global_bin_counts = np.pad(_global_bin_counts, (0, n_bins - _global_bin_counts.size), 'constant')
    _global_bin_counts[selected_bin] += 1
```
