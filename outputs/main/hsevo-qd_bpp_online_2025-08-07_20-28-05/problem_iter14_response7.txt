```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse slack, linear/quadratic penalties, and ε‑greedy randomness."""
    # Combine inverse slack, linear/quadratic penalties, and ε‑greedy exploration.
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    slack = bins_remain_cap[feasible] - item
    w_inv = 0.6
    w_lin = 0.3
    w_sq = 0.1
    beta = 0.02
    deterministic = w_inv / (slack + 1.0) - w_lin * slack - (w_sq + beta) * slack**2
    epsilon = 0.12
    random_part = np.random.rand(feasible.sum())
    scores = (1 - epsilon) * deterministic + epsilon * random_part
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[feasible] = scores
    return priorities
```
