```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                epsilon: float = 0.05,
                offset: float = 1e-6,
                score_scale: float = 1.0,
                penalty_coeff: float = 0.1) -> np.ndarray:
    """Deterministic inverse‑slack core with squared‑slack penalty and epsilon‑greedy exploration."""
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if np.any(feasible):
        slack = bins_remain_cap[feasible] - item
        scores[feasible] = score_scale / (slack + offset) - penalty_coeff * slack**2
        scores[feasible] = (1 - epsilon) * scores[feasible] + epsilon * np.random.rand(feasible.sum())
    return scores
```
