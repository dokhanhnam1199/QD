```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.2, beta: float = 0.1, offset: float = 1e-6, temperature: float = 1.0) -> np.ndarray:
    """ε‑greedy inverse slack with squared‑slack penalty, softmaxed probabilities."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    inv_slack = 1.0 / (leftovers + offset)
    penalty = -beta * leftovers**2
    deterministic = inv_slack + penalty
    random_term = np.random.rand(feasible.sum())
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = (1 - epsilon) * deterministic + epsilon * random_term
    max_score = np.max(scores[feasible])
    exp_scores = np.exp((scores[feasible] - max_score) / temperature)
    probabilities = np.zeros_like(bins_remain_cap, dtype=float)
    probabilities[feasible] = exp_scores / np.sum(exp_scores)
    return probabilities
```
