```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function combining inverse slack, reward weighting and epsilonâ€‘greedy exploration for online bin packing.
    """
    if bins_remain_cap.size == 0:
        return np.array([], dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    slack = bins_remain_cap - item
    deterministic = 1.0 / (slack + 1.0)
    max_cap = bins_remain_cap.max()
    reward = 1.0 - slack / max_cap
    reward = np.clip(reward, 0.0, 1.0)
    weighted = deterministic * (1.0 + reward)
    epsilon = 0.2
    random_part = np.random.rand(bins_remain_cap.size)
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = (1.0 - epsilon) * weighted[feasible] + epsilon * random_part[feasible]
    return scores
```
