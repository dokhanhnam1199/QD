```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority combines inverse slack, slack penalty, exponential weighting, normalized and ε‑greedy mixing."""
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftover = bins_remain_cap[feasible] - item
    eps = 1e-9
    beta = 0.01
    temperature = 1.0
    alpha = 0.6
    epsilon = 0.15
    det_score = 1.0 / (leftover + eps) - beta * (leftover ** 2)
    exp_score = np.exp(-leftover / temperature)
    combined = alpha * det_score + (1 - alpha) * exp_score
    norm = combined / combined.sum()
    rand = np.random.rand(len(norm))
    final = (1 - epsilon) * norm + epsilon * rand
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[feasible] = final
    return priorities
```
