{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines inverse slack, UCB, reward learning, and diversity for adaptive bin selection.\n    \"\"\"\n    import numpy as np\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.array([], dtype=float)\n    if not hasattr(priority_v2, \"_selection_counts\") or priority_v2._bins_len != n:\n        priority_v2._selection_counts = np.zeros(n, dtype=int)\n        priority_v2._total_rewards = np.zeros(n, dtype=float)\n        priority_v2._bins_len = n\n    epsilon = 0.05\n    offset = 1e-6\n    score_scale = 1.0\n    reward_weight = 0.1\n    ucb_weight = 1.0\n    diversity_weight = 0.1\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    det = np.zeros(n, dtype=float)\n    det[feasible] = 1.0 / (slack[feasible] + offset)\n    avg_reward = np.zeros(n, dtype=float)\n    nonzero = priority_v2._selection_counts > 0\n    avg_reward[nonzero] = priority_v2._total_rewards[nonzero] / priority_v2._selection_counts[nonzero]\n    total_counts = np.sum(priority_v2._selection_counts)\n    if total_counts == 0:\n        base = 1.0\n    else:\n        base = np.sqrt(2 * np.log(total_counts + 1))\n    ucb = np.zeros(n, dtype=float)\n    ucb[nonzero] = np.sqrt(2 * np.log(total_counts + 1) / priority_v2._selection_counts[nonzero])\n    ucb[~nonzero] = base\n    if feasible.any():\n        median_slack = np.median(slack[feasible])\n    else:\n        median_slack = 0.0\n    diversity = np.zeros(n, dtype=float)\n    diversity[feasible] = median_slack - slack[feasible]\n    combined = score_scale * det + reward_weight * avg_reward + ucb_weight * ucb + diversity_weight * diversity\n    combined[~feasible] = -np.inf\n    random_term = np.random.rand(n)\n    scores = (1 - epsilon) * combined + epsilon * random_term\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                epsilon: float = 0.2,\n                temperature: float = 1.0,\n                total_threshold: float = 0.0) -> np.ndarray:\n    \"\"\"Inverse slack scored, temperature\u2011scaled softmax, then blended with \u03b5\u2011noise for tie\u2011breaking.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    leftovers = bins_remain_cap[feasible] - item\n    base = 1.0 / (leftovers + 1.0)\n    exp_input = base / temperature\n    exp_input = np.clip(exp_input, a_min=None, a_max=50.0)\n    exp_scores = np.exp(exp_input)\n    total = exp_scores.sum()\n    if total >= total_threshold:\n        scores[feasible] = exp_scores / total\n    else:\n        scores[feasible] = 0.0\n    rand = np.random.rand(bins_remain_cap.shape[0])\n    rand[~feasible] = 0.0\n    return (1.0 - epsilon) * scores + epsilon * rand\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that Heuristics\u202f1\ufe0f\u20e3 (global\u202f_selection_counts/_total_rewards, \u03b5\u2011greedy inverse\u2011slack, reward weighting) adapts via per\u2011bin learning, while Heuristics\u202f20\ufe0f\u20e3 only applies inverse slack with softmax and \u03b5\u2011noise, lacking any feedback loop.  \n(second best) vs (second worst), Heuristics\u202f2\ufe0f\u20e3 (simple avg\u2011reward update, deterministic\u2011plus\u2011random score) beats Heuristics\u202f19\ufe0f\u20e3 (class with UCB, diversity term, temperature decay, many hyper\u2011parameters) \u2013 the leaner reward estimator is more stable than a heavily tuned UCB scheme.  \nComparing (1st) vs (2nd), the code is virtually identical (same global state, same scoring); the ranking difference likely stems from marginal documentation or initialization nuances rather than algorithmic change.  \n(3rd) vs (4th), Heuristics\u202f3\ufe0f\u20e3 returns softmax probabilities from inverse\u2011slack\u202f+\u202f\u03b5\u2011noise, whereas Heuristics\u202f4\ufe0f\u20e3 adds per\u2011bin avg\u2011reward and a UCB bonus. The extra UCB term can cause over\u2011exploration and noisy updates, making the simpler softmax version superior.  \n(second worst) vs (worst), Heuristics\u202f19\ufe0f\u20e3 (UCB, diversity, temperature decay, learning updates) outperforms Heuristics\u202f20\ufe0f\u20e3 (static inverse\u2011slack softmax) by retaining a modest adaptive component.  \nOverall: lightweight adaptive heuristics that blend deterministic fit with modest \u03b5\u2011exploration and a single reward statistic consistently beat overly complex designs with multiple bonuses, aggressive UCB terms, or excessive randomness.\n- \n- **Keywords**: inverse\u2011slack, \u03b5\u2011greedy, stateless; **Advice**: use inverse\u2011slack as core score with \u03b5\u2011randomness; **Avoid**: UCB or heavy tuning before data; **Explanation**: ensures fast, predictable decisions.  \n- **Keywords**: reward\u2011averaging, batch; **Advice**: accumulate rewards over a window then update average; **Avoid**: per\u2011step volatile updates; **Explanation**: lowers variance with minimal overhead.  \n- **Keywords**: softmax, probability; **Advice**: apply softmax only when downstream needs probabilities; **Avoid**: unconditional scaling that hides raw scores; **Explanation**: retains interpretability and proper distribution.  \n- **Keywords**: documentation, modular code; **Advice**: expose all hyper\u2011parameters and keep functions pure; **Avoid**: hidden state, duplicated logic, unused imports; **Explanation**: boosts maintainability and safe extension.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}