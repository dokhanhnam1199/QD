```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse slack scoring with a squared slack penalty and epsilon-greedy exploration."""
    eps = 0.2
    feasible = bins_remain_cap >= item
    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    slack = bins_remain_cap[feasible] - item
    inv_slack = 1.0 / (slack + 1.0)
    penalty = - (slack ** 2)
    scores[feasible] = 0.7 * inv_slack + 0.3 * penalty
    scores = (1 - eps) * scores + eps * np.random.rand(len(scores))
    return scores
```
