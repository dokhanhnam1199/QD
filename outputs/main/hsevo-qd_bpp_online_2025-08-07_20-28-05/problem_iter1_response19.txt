```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    feasible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    temperature = 1.0
    exp_vals = np.exp(-slack / temperature)
    total = exp_vals.sum()
    if total > 0:
        priorities[feasible] = exp_vals / total
    return priorities
```
