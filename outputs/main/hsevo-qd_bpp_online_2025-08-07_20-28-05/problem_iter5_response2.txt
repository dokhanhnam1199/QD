```python
import numpy as np

# priority_v2: epsilon‑greedy inverse‑slack with squared‑slack penalty and softmax.
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.2,
                offset: float = 1e-3,
                score_scale: float = 1.0,
                beta: float = 0.01,
                temperature: float = 1.0)  # default temperature for softmax
                ) -> np.ndarray:
    """Combine inverse slack, squared slack penalty, epsilon‑exploration, softmax."""
    slack = bins_remain_cap - item
    feasible = slack >= 0
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not feasible.any():
        return scores
    inv = 1.0 / (slack[feasible] + offset)
    penalty = beta * slack[feasible] ** 2
    deterministic = score_scale * (inv - penalty)
    random_part = np.random.rand(feasible.sum())
    raw = (1 - epsilon) * deterministic + epsilon * random_part
    temp = max(temperature, 1e-9)
    scaled = (raw - raw.max()) / temp
    exp_raw = np.exp(scaled)
    probs = exp_raw / exp_raw.sum()
    scores[feasible] = probs
    return scores
```
