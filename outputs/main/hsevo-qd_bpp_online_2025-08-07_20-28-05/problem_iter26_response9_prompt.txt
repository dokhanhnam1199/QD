{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_selection_counts = None\n_total_rewards = None\n_total_calls = 0\n\n    \"\"\"Inverse slack + epsilon random + avg reward for online bin packing.\"\"\"\n    global _selection_counts, _total_rewards, _total_calls\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.shape[0]\n    if n == 0:\n        return np.array([], dtype=float)\n    if _selection_counts is None or _selection_counts.shape[0] != n:\n        _selection_counts = np.zeros(n, dtype=float)\n        _total_rewards = np.zeros(n, dtype=float)\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    leftovers = bins_remain_cap[feasible] - item\n    deterministic = 1.0 / (leftovers + 1.0)\n    epsilon = 0.2\n    random_part = np.random.rand(feasible.sum())\n    base_score = (1 - epsilon) * deterministic + epsilon * random_part\n    avg_reward = np.zeros_like(base_score)\n    mask = _selection_counts[feasible] > 0\n    avg_reward[mask] = _total_rewards[feasible][mask] / _selection_counts[feasible][mask]\n    reward_weight = 0.3\n    combined = base_score + reward_weight * avg_reward\n    scores[feasible] = combined\n    best = int(np.argmax(scores))\n    _total_calls += 1\n    reward = - (bins_remain_cap[best] - item)\n    _selection_counts[best] += 1\n    _total_rewards[best] += reward\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_pv2_counts = None\n_pv2_rewards = None\n_pv2_total_calls = 0\n\n    global _pv2_counts, _pv2_rewards, _pv2_total_calls\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    if _pv2_counts is None or _pv2_counts.shape[0] != n:\n        _pv2_counts = np.zeros(n, dtype=float)\n        _pv2_rewards = np.zeros(n, dtype=float)\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    leftovers = bins_remain_cap[feasible] - item\n    epsilon = 0.2\n    inv_slack = 1.0 / (leftovers + 1.0)\n    rand_part = np.random.rand(leftovers.shape[0])\n    base_score = (1 - epsilon) * inv_slack + epsilon * rand_part\n    median_leftover = np.median(leftovers) if leftovers.size > 0 else 0.0\n    diversity = 1.0 / (np.abs(leftovers - median_leftover) + 1.0)\n    diversity_weight = 0.1\n    counts_feasible = _pv2_counts[feasible]\n    rewards_feasible = _pv2_rewards[feasible]\n    avg_reward = np.where(counts_feasible > 0, rewards_feasible / counts_feasible, 0.0)\n    c = 0.5\n    exploration_bonus = c * np.sqrt(np.log(_pv2_total_calls + 1) / (counts_feasible + 1))\n    ucb_score = avg_reward + exploration_bonus\n    ucb_weight = 0.3\n    final_score = base_score + ucb_weight * ucb_score + diversity_weight * diversity\n    scores[feasible] = final_score\n    best_idx = int(0) if n == 0 else int(np.argmax(scores))\n    if scores[best_idx] != -np.inf:\n        chosen_leftover = bins_remain_cap[best_idx] - item\n        reward = -chosen_leftover\n        _pv2_counts[best_idx] += 1\n        _pv2_rewards[best_idx] += reward\n        _pv2_total_calls += 1\n    return scores\n\n### Analyze & experience\n- - **(1st) vs (20th):** The top heuristic keeps per\u2011bin selection counts and cumulative rewards, adds a modest \u03b5\u2011greedy term, and updates only after a feasible best\u2011bin is chosen. The worst version merely computes 1/(slack+1), applies a temperature\u2011scaled softmax and \u03b5\u2011noise, with no state or learning.  \n- **(2nd) vs (19th):** The second\u2011best also tracks counts/rewards and a total\u2011call counter, but uses a larger reward weight (0.3) and updates unconditionally after argmax. The second\u2011worst is identical to the 18th/20th design: static inverse\u2011slack scoring, softmax, \u03b5\u2011noise, no learning.  \n- **(1st) vs (2nd):** Both share the deterministic inverse\u2011slack\u202f+\u202f\u03b5\u2011random core and per\u2011bin reward averaging. Differences: the 2nd uses a higher reward weight (0.3) and records total calls (unused), while the 1st applies a lower reward weight (0.1) and safeguards updates by confirming the selected bin is feasible.  \n- **(3rd) vs (4th):** The 3rd adds a UCB exploration bonus, explicit total\u2011call tracking, and a smaller \u03b5 (0.15), blending deterministic, reward, and UCB terms. The 4th drops learning entirely, weighting deterministic slack by a static reward factor based on max capacity, then returns softmax probabilities.  \n- **(19th) vs (20th):** These two are identical duplicates of the simple softmax\u202f+\u202f\u03b5\u2011noise scheme; no distinction in behavior or performance.  \n- **Overall:** The highest\u2011ranked heuristics combine a lightweight online learning loop (counts, avg reward) with inverse\u2011slack scoring and modest \u03b5\u2011exploration, occasionally enriched by UCB. Lower\u2011ranked versions either discard learning, over\u2011engineer without clear benefit, or duplicate earlier ideas, leading to stagnation.\n- \n- **Keywords:** Inverse\u2011slack, \u03b5\u2011greedy, lightweight UCB, feasibility flag, softmax normalization, minimal per\u2011bin state.  \n- **Advice:** Start with deterministic inverse\u2011slack\u202f+\u202f\u03b5\u2011greedy, add lightweight UCB only when enough data, keep per\u2011bin stats minimal, update only after successful placements, and expose a single scoring function.  \n- **Avoid:** Over\u2011engineering mix of metrics, heavy state, duplicate code, excessive randomness, hidden logic, extra hyper\u2011parameters, waste\u2011promoting reward structures.  \n- **Explanation:** This keeps exploration\u2011exploitation balance, low runtime, reproducible outcomes, and a maintainable, extensible codebase.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}