import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.15, w_inv: float = 0.6, w_lin: float = 0.4) -> np.ndarray:
    """
    ε‑greedy scoring: weighted sum of inverse slack and negative slack, with random tie‑breaker.
    """
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    slack = bins_remain_cap[feasible] - item
    base = w_inv * (1.0 / (slack + 1.0)) + w_lin * (-slack)
    scores[feasible] = base
    scores = (1 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])
    finite_mask = np.isfinite(scores)
    if not np.any(finite_mask):
        return scores
    max_score = np.max(scores[finite_mask])
    exp_scores = np.exp(scores - max_score)
    exp_scores[~finite_mask] = 0.0
    probabilities = exp_scores / exp_scores.sum()
    return probabilities
