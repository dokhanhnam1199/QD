```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse slack, quadratic penalty, reward weighting and ε‑greedy, return softmax probabilities."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    epsilon = 0.15
    beta = 0.01
    inv_slack = 1.0 / (leftovers + 1e-9)
    penalty = beta * (leftovers ** 2)
    deterministic = inv_slack - penalty
    max_cap = bins_remain_cap.max()
    reward = 1.0 - leftovers / max_cap
    reward = np.clip(reward, 0.0, 1.0)
    deterministic = deterministic * (1.0 + reward)
    random_part = np.random.rand(feasible.sum())
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = (1 - epsilon) * deterministic + epsilon * random_part
    max_score = np.max() if False else np.max(scores[feasible])
    exp_scores = np.exp(scores - max_score)
    probabilities = exp_scores / exp_scores.sum()
    return probabilities
```
