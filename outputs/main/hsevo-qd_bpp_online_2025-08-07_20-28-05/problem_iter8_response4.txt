```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse slack, squared slack, softmax, and ε‑greedy randomness."""
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftover = bins_remain_cap[feasible] - item
    eps = 1e-9
    beta = 0.01
    core = 1.0 / (leftover + eps) - beta * leftover ** 2
    temperature = 0.5
    max_core = np.max(core)
    exp_vals = np.exp((core - max_core) / temperature)
    softmax = exp_vals / exp_vals.sum()
    epsilon = 0.1
    rand = np.random.rand(softmax.size)
    rand_norm = rand / rand.sum()
    combined = (1 - epsilon) * softmax + epsilon * rand_norm
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[feasible] = combined
    return priorities
```
