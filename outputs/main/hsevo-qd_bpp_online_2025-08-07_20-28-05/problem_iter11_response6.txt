```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse slack and medianâ€‘slack diversity for deterministic selection."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    slack = bins_remain_cap[feasible] - item
    w_inv, w_lin, w_sq = 0.5, 0.3, 0.2
    core = w_inv / (slack + 1.0) - w_lin * slack - w_sq * slack**2
    median_slack = np.median(slack)
    diversity = 1.0 / (np.abs(slack - median_slack) + 1.0)
    w_core, w_div = 0.7, 0.3
    combined_feas = w_core * core + w_div * diversity
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = combined_feas
    return scores
```
