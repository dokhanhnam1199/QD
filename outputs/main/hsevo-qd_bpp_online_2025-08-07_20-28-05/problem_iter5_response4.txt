```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse slack, slack penalty, and ε‑greedy randomness for online BPP."""
    slack = bins_remain_cap - item
    feasible = slack >= 0
    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    if not feasible.any():
        return scores
    inv = 1.0 / (slack[feasible] + 1.0)
    neg = -slack[feasible]
    beta = 0.5
    alpha = 0.7
    deterministic = alpha * inv + (1 - alpha) * neg - beta * slack[feasible] ** 2
    epsilon = 0.1
    random_term = np.random.rand(np.count_nonzero(feasible))
    combined = (1 - epsilon) * deterministic + epsilon * random_term
    scores[feasible] = combined
    return scores
```
