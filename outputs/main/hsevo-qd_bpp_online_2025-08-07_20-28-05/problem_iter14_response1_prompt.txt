{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                epsilon: float = 0.3272578070972282,\n                offset: float = 3.6930496425184325,\n                score_scale: float = 1.8547777441606528) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins given an item size.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to place.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of bins.\n    epsilon : float, optional\n        Weight for the random exploration term (default 0.2).\n    offset : float, optional\n        Small constant added to leftover capacity to avoid division by zero\n        (default 1.0).\n    score_scale : float, optional\n        Scaling factor for the deterministic part of the score\n        (default 1.0).\n\n    Returns\n    -------\n    np.ndarray\n        Score for each bin; -inf for infeasible bins.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    leftovers = bins_remain_cap[feasible] - item\n    scores[feasible] = score_scale / (leftovers + offset)\n    scores = (1 - epsilon) * scores + epsilon * np.random.rand(bins_remain_cap.shape[0])\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                beta: float = 0.01, temperature: float = 1.0,\n                total_threshold: float = 1e-6) -> np.ndarray:\n    \"\"\"Score bins by inverse slack minus slack\u00b2, softened with temperature.\"\"\"\n    feasible = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not feasible.any():\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    eps = 1e-9\n    raw = 1.0 / (slack + eps) - beta * slack**2\n    exp_scores = np.exp(raw / temperature)\n    if exp_scores.sum() < total_threshold:\n        return priorities\n    priorities[feasible] = exp_scores\n    return priorities\n\n### Analyze & experience\n- - **(Best) vs (Worst):** Heuristic\u202f1st is a concise \u03b5\u2011greedy inverse\u2011slack scorer with explicit infeasibility handling (\u2011inf). Heuristic\u202f20th wraps a full class using UCB, median\u2011based diversity, temperature decay, and extensive state. While more adaptive, it introduces substantial overhead and complexity, risking stale statistics and harder debugging.  \n- **(Second best) vs (Second worst):** Heuristic\u202f2nd duplicates the 1st implementation\u2014still robust despite lacking a docstring. Heuristic\u202f19th is a stub that returns a zero array for feasible bins, providing no meaningful priority.  \n- **(1st) vs (2nd):** The source code is identical; the ranking likely reflects external factors (e.g., runtime, hidden bug fixes) not evident here.  \n- **(3rd) vs (4th):** Both add global counters, reward tracking, and a 0.3\u2011weighted average\u2011reward term to the base score, enabling lightweight online learning. Their duplication suggests ranking differences stem from subtle initialization or performance nuances.  \n- **(Second worst) vs (Worst):** Heuristic\u202f19th (stub) offers no discrimination between bins, while Heuristic\u202f20th (complex adaptive) at least attempts to learn; the stub is thus worse.  \n- **Overall:** Top heuristics prioritize simplicity, clear \u03b5\u2011greedy inverse\u2011slack scoring, and minimal state. Mid\u2011ranked methods enrich this with linear/squared slack penalties, softmax scaling, or modest reward tracking, achieving a better balance of fit and exploration. The lowest ranks either provide no guidance (stubs) or incur excessive overhead without clear benefit.\n- \n- Keywords: size class grouping, descending order, first\u2011fit, single\u2011pass swap, rule\u2011based.  \n- Advice: Split items into large, medium, small buckets; pack each bucket by first\u2011fit in descending size; then run one pass swapping a small item from an emptier bin with a larger item from a fuller bin if it reduces the max empty space.  \n- Avoid: Random exploration, multi\u2011metric scoring, online learning, extra hyper\u2011parameters, placeholder or duplicated code, and any heavy state tracking.  \n- Explanation: This simple, rule\u2011based approach uses only item size, runs in linear time, and improves bin utilization without complex scores or hidden randomness.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}