```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse slack and fill ratio for deterministic tightâ€‘fit, no randomness."""
    feasible = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not feasible.any():
        return priorities
    leftover = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftover + 1e-9) - 0.01 * leftover**2
    max_remain = bins_remain_cap.max()
    fill_bonus = (max_remain - leftover) / (max_remain + 1e-9)
    score = 0.7 * deterministic + 0.3 * fill_bonus
    priorities[feasible] = score
    return priorities
```
