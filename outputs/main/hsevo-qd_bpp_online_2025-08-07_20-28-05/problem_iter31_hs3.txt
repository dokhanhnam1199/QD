import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.23820186271613297,
    w_inv: float = 0.7894617983221156,
    w_lin: float = 0.7000636936321794,
    w_sq: float = 0.8563275471552474,
    temperature: float = 5.099860518124947,
    slack_offset: float = 0.19562725169984796,
) -> np.ndarray:
    """
    Compute a probability distribution over bins for placing an item.

    Parameters
    ----------
    item : float
        Size of the item to be placed.
    bins_remain_cap : np.ndarray
        Remaining capacities of the bins.
    epsilon : float, optional
        Exploration weight for mixing random scores (default 0.15).
    w_inv : float, optional
        Weight for the inverse slack term (default 0.5).
    w_lin : float, optional
        Weight for the linear slack penalty (default 0.3).
    w_sq : float, optional
        Weight for the quadratic slack penalty (default 0.2).
    temperature : float, optional
        Temperature for the softmax conversion (default 1.0).
    slack_offset : float, optional
        Constant added to slack to avoid division by zero (default 1.0).

    Returns
    -------
    np.ndarray
        Probability distribution over bins; infeasible bins have probability 0.
    """
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)

    slack = bins_remain_cap[feasible] - item
    core = w_inv / (slack + slack_offset) - w_lin * slack - w_sq * slack**2

    rand = np.random.rand(feasible.sum())
    scores_feasible = (1 - epsilon) * core + epsilon * rand

    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = scores_feasible

    max_score = np.max(scores_feasible)
    exp_scores = np.exp((scores_feasible - max_score) / temperature)
    probs_feasible = exp_scores / exp_scores.sum()

    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = probs_feasible

    return probs
