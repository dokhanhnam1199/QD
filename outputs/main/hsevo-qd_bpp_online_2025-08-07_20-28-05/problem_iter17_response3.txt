```python
import numpy as np

# Priority: inverse slack + quadratic waste penalty + ε‑noise, normalized via softmax
def priority_v2(item: float, bins_remain_cap: np.ndarray,
                epsilon: float = 0.1, beta: float = 0.01) -> np.ndarray:
    """Inverse‑slack with quadratic penalty and tiny ε‑noise, softmax‑scaled."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0) - beta * leftovers**2
    random_part = np.random.rand(feasible.sum())
    combined = (1.0 - epsilon) * deterministic + epsilon * random_part
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    # Softmax over feasible bins for probability‑like priorities
    max_score = np.max(combined)
    exp_scores = np.exp(combined - max_score)
    probs = exp_scores / exp_scores.sum()
    scores[feasible] = probs
    return scores
```
