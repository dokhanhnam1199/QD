```python
import numpy as np

_selection_counts = None
_total_rewards = None

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function for online BPP. Combines inverse slack, epsilon exploration, and empirical reward. Scores are higher for better bins."""
    global _selection_counts, _total_rewards
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    n = bins_remain_cap.size
    if n == 0:
        return np.array([], dtype=float)
    if _selection_counts is None or _selection_counts.shape[0] != n:
        _selection_counts = np.zeros(n, dtype=float)
        _total_rewards = np.zeros(n, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full(n, -np.inf, dtype=float)
    leftovers = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (leftovers + 1.0)
    epsilon = 0.1
    random_part = np.random.rand(feasible.sum())
    base_score = deterministic + epsilon * random_part
    avg_reward = np.zeros_like(base_score)
    mask = _selection_counts[feasible] > 0
    avg_reward[mask] = _total_rewards[feasible][mask] / _selection_counts[feasible][mask]
    reward_weight = 0.2
    combined = base_score + reward_weight * avg_reward
    exp_combined = np.exp(combined - combined.max())
    probabilities = exp_combined / exp_combined.sum()
    scores = np.full(n, -np.inf, dtype=float)
    scores[feasible] = probabilities
    best = np.argmax(scores)
    _selection_counts[best] += 1
    leftover = bins_remain_cap[best] - item
    reward = -leftover
    _total_rewards[best] += reward
    return scores
```
