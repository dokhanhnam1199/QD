```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.2,
                offset: float = 1.0,
                score_scale: float = 1.0,
                w_lin: float = 0.3,
                w_sq: float = 0.2) -> np.ndarray:
    """Combines inverse slack, linear, and quadratic penalties with epsilonâ€‘greedy randomness for online bin packing."""
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    core = score_scale / (slack + offset) - w_lin * slack - w_sq * slack ** 2
    rand = np.random.rand(feasible.sum())
    scores[feasible] = (1 - epsilon) * core + epsilon * rand
    return scores
```
