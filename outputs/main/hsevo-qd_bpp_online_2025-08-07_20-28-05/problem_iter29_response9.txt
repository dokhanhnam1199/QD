```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse slack, slack-squared penalty, epsilon noise, and softmax. Returns probability distribution over feasible bins.
    """
    if bins_remain_cap.size == 0:
        return np.array([], dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, 0.0, dtype=float)
    slack = bins_remain_cap[feasible] - item
    deterministic = 1.0 / (slack + 1.0)
    beta = 0.05
    penalty = -beta * slack**2
    eps = 0.2
    noise = np.random.rand(feasible.sum())
    combined = deterministic + penalty + eps * noise
    max_score = combined.max()
    exp_vals = np.exp(combined - max_score)
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = exp_vals / exp_vals.sum()
    return probs
```
