```python
import numpy as np

class PriorityV2:
    def __init__(self):
        self.total_calls = 0
        self.selection_counts = None
        self.total_rewards = None
        self.temperature = 1.0
        self.decay = 0.995

    def priority(self, item, bins_remain_cap):
        n = bins_remain_cap.shape[0]
        if self.selection_counts is None or self.selection_counts.shape[0] != n:
            self.selection_counts = np.zeros(n, dtype=float)
            self.total_rewards = np.zeros(n, dtype=float)
        feasible = bins_remain_cap >= item
        leftovers = np.where(feasible, bins_remain_cap - item, np.inf)
        base_score = np.where(feasible, 1.0 / (leftovers + 1.0), 0.0)
        median_leftover = np.median(leftovers[feasible]) if np.any(feasible) else 0.0
        diversity = np.where(feasible, 1.0 / (np.abs(leftovers - median_leftover) + 1.0), 0.0)
        avg_reward = np.where(self.selection_counts > 0, self.total_rewards / self.selection_counts, 0.0)
        c = 1.0
        ucb = avg_reward + c * np.sqrt(np.log(self.total_calls + 1) / (self.selection_counts + 1))
        combined_feas = 0.5 * base_score + 0.3 * diversity + 0.2 * ucb
        combined = np.full(n, -np.inf, dtype=float)
        combined[feasible] = combined_feas[feasible]
        noise = np.random.rand(n)
        combined[feasible] = (1 - self.temperature) * combined[feasible] + self.temperature * noise[feasible]
        self.total_calls += 1
        self.temperature *= self.decay
        if np.any(feasible):
            chosen = np.argmax(combined)
            reward = - (bins_remain_cap[chosen] - item)
            self.selection_counts[chosen] += 1
            self.total_rewards[chosen] += reward
        return combined

_priority_v2_instance = PriorityV2()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    return _priority_v2_instance.priority(item, bins_remain_cap)
```
