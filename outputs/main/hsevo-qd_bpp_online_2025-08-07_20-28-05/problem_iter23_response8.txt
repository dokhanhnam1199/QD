```python
import numpy as np

# Adaptive inverse‑slack priority with average reward and epsilon exploration
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse slack, average reward and epsilon noise; updates per‑bin reward after selection."""
    n = bins_remain_cap.shape[0]
    if not hasattr(priority_v2, "selection_counts") or priority_v2.selection_counts.shape[0] != n:
        priority_v2.selection_counts = np.zeros(n, dtype=float)
        priority_v2.total_rewards = np.zeros(n, dtype=float)
    feasible = bins_remain_cap >= item
    slack = bins_remain_cap - item
    base = np.where(feasible, -slack, -np.inf)
    avg_reward = np.where(priority_v2.selection_counts > 0,
                          priority_v2.total_rewards / priority_v2.selection_counts,
                          0.0)
    alpha = 0.3
    epsilon = 0.1
    score = np.where(feasible, base + alpha * avg_reward, -np.inf)
    noise = np.random.rand(n)
    score = np.where(feasible, score + epsilon * noise, -np.inf)
    if np.any(feasible):
        chosen = np.argmax(score)
        reward = -slack[chosen]
        priority_v2.selection_counts[chosen] += 1
        priority_v2.total_rewards[chosen] += reward
    return score
```
