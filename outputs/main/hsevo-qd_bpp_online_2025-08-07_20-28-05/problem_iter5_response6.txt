```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, beta: float = 0.5, temperature: float = 1.0) -> np.ndarray:
    """
    Combine inverse-slack, exponential slack penalty, ε‑greedy randomness and softmax.
    Returns a probability distribution over feasible bins.
    """
    feasible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    inv = 1.0 / (slack + 1.0)
    exp_pen = np.exp(-beta * slack**2)
    deterministic = 0.7 * inv + 0.3 * exp_pen
    random_part = np.random.rand(slack.shape[0])
    combined = (1 - epsilon) * deterministic + epsilon * random_part
    scaled = combined / temperature
    max_val = np.max(scaled)
    exp_vals = np.exp(scaled - max_val)
    probs = exp_vals / exp_vals.sum()
    priorities[feasible] = probs
    return priorities
```
