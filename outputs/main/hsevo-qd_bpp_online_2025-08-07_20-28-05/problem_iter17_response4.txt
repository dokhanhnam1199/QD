```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score feasible bins by weighted inverse slack minus slack penalty,
    with a small ε‑random term for tie‑breaking."""
    epsilon = 0.05
    offset = 1e-6
    w_inv = 0.7
    w_lin = 0.3
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    slack = bins_remain_cap[feasible] - item
    base = w_inv / (slack + offset) - w_lin * slack
    scores[feasible] = (1 - epsilon) * base + epsilon * np.random.rand(slack.shape[0])
    return scores
```
