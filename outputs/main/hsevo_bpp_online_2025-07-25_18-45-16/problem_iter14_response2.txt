```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and normalized waste, balancing fit availability and waste minimization."""
    # Calculate remaining capacity after adding the item
    potential_remain_cap = bins_remain_cap - item
    
    # Calculate waste as the difference between current capacity and capacity after adding the item
    waste = bins_remain_cap - potential_remain_cap
    
    # Normalize waste scores to ensure consistency across different bin capacities
    max_bin_cap = np.max(bins_remain_cap)
    normalized_waste = waste / (max_bin_cap + 1e-6)
    
    # Calculate priority using a combination of normalized waste and remaining capacity
    priority_scores = 0.5 * (1 - normalized_waste) + 0.5 * (bins_remain_cap / max_bin_cap)
    
    # Set priority to zero for bins where the item cannot be added due to insufficient capacity
    priority_scores[potential_remain_cap < 0] = 0
    
    return priority_scores
```
