```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic prioritizes bins based on normalized waste minimization while
    also considering fit availability. The goal is to minimize the waste in each bin
    while ensuring the item can fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability first
    fit_availability = (bins_remain_cap >= item).astype(float)

    # Calculate waste after adding the item to each bin
    waste = bins_remain_cap - item

    # Avoid negative waste (though logically waste should not be negative if fit availability is checked)
    waste[waste < 0] = 0

    # Normalize waste by dividing by the bin capacity
    bin_capacities = np.full_like(bins_remain_cap, np.max(bins_remain_cap) + 1e-6)  # Add small epsilon to avoid division by zero
    normalized_waste = waste / bin_capacities

    # Priority score: fit availability is more important, but normalized waste also matters
    # We give a higher weight to fit availability to ensure the item can fit before minimizing waste
    priority_score = fit_availability * (1 - normalized_waste)

    return priority_score
```
