[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization with normalized fit availability to prioritize bins.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    normalized_scores = priority_scores / np.max(priority_scores, initial=1)\n    return can_fit * (-normalized_scores)  # Prioritize fitting bins with least normalized waste",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins with least waste and considers normalized remaining capacity for better decision.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap)\n    priority_scores = np.where(waste >= 0, waste + norm_cap, -np.inf)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste and high remaining capacity",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on minimizing waste and balancing remaining capacity.\n    Directly targets bins with least remaining capacity after adding the item.\n    Uses normalized scores to ensure consistent prioritization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Minimize waste and balance by normalizing space left\n    priority = can_fit * (-space_left / np.max(bins_remain_cap))\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for efficient bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = (bins_remain_cap - item) / bins_remain_cap\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and normalized capacity to prioritize bins effectively.\"\"\"\n    waste = bins_remain_cap - item\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap, initial=1)  # Avoid division by zero\n    priority_scores = np.where(waste >= 0, waste + norm_cap, -np.inf)\n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization with fit availability for efficient bin packing.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, np.inf)  # Prioritize fitting bins with least waste\n    return can_fit * (-priority_scores)  # Maximize negative waste for top priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin by combining fit availability and minimized waste.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Calculate remaining capacity after placing the item\n    remaining_after_item = bins_remain_cap - item\n    # Space efficiency after placing the item (normalized)\n    space_efficiency = 1 - (remaining_after_item / bins_remain_cap)\n    # Prioritize bins that fit the item with minimal waste\n    priority_score = can_fit * (1 - remaining_after_item / np.max(bins_remain_cap + 1e-6))\n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization with normalized capacity to prioritize bins effectively.\"\"\"\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste / (bins_remain_cap + 1e-6), -np.inf)\n    return -priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization with bin balance to prioritize bins effectively.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    balance_factor = 1 - (waste / bins_remain_cap.mean())\n    priority_scores = can_fit * (waste + balance_factor)\n    return priority_scores",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for efficient bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = (bins_remain_cap - item) / bins_remain_cap\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response0.txt_stdout.txt",
    "code_path": "problem_iter9_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have enough space\n    for the item and are closer to being full. It uses a simple normalization to ensure\n    that the priority score is consistent and focused on waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough space for the item\n    can_fit = bins_remain_cap >= item\n    # Calculate the waste if the item is added to the bin\n    waste = bins_remain_cap - item\n    # Normalize the waste by the bin capacity\n    normalized_waste = waste / bins_remain_cap\n    # Priority score: prioritize bins that can fit the item and have minimal waste\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response1.txt_stdout.txt",
    "code_path": "problem_iter9_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have enough space\n    for the item and are closer to being full. It uses a simple normalization to ensure\n    that the priority score is consistent and focused on waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough space for the item\n    can_fit = bins_remain_cap >= item\n    # Calculate the waste if the item is added to the bin\n    waste = bins_remain_cap - item\n    # Normalize the waste by the bin capacity\n    normalized_waste = waste / bins_remain_cap\n    # Priority score: prioritize bins that can fit the item and have minimal waste\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response2.txt_stdout.txt",
    "code_path": "problem_iter9_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have enough space\n    for the item and are closer to being full. It uses a simple normalization to ensure\n    that the priority score is consistent and focused on waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough space for the item\n    can_fit = bins_remain_cap >= item\n    # Calculate the waste if the item is added to the bin\n    waste = bins_remain_cap - item\n    # Normalize the waste by the bin capacity\n    normalized_waste = waste / bins_remain_cap\n    # Priority score: prioritize bins that can fit the item and have minimal waste\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response3.txt_stdout.txt",
    "code_path": "problem_iter9_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have enough space\n    for the item and are closer to being full. It uses a simple normalization to ensure\n    that the priority score is consistent and focused on waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough space for the item\n    can_fit = bins_remain_cap >= item\n    # Calculate the waste if the item is added to the bin\n    waste = bins_remain_cap - item\n    # Normalize the waste by the bin capacity\n    normalized_waste = waste / bins_remain_cap\n    # Priority score: prioritize bins that can fit the item and have minimal waste\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response4.txt_stdout.txt",
    "code_path": "problem_iter9_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have enough space\n    for the item and are closer to being full. It uses a simple normalization to ensure\n    that the priority score is consistent and focused on waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough space for the item\n    can_fit = bins_remain_cap >= item\n    # Calculate the waste if the item is added to the bin\n    waste = bins_remain_cap - item\n    # Normalize the waste by the bin capacity\n    normalized_waste = waste / bins_remain_cap\n    # Priority score: prioritize bins that can fit the item and have minimal waste\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response0.txt_stdout.txt",
    "code_path": "problem_iter10_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    threshold: float = 0.04732390447842405, \n    waste_penalty: float = 581900.0772769923) -> np.ndarray:\n    \"\"\"Combines waste minimization with normalized fit availability to prioritize bins.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= threshold, waste, waste_penalty)\n    normalized_scores = priority_scores / np.max(priority_scores, initial=1)\n    return can_fit * (-normalized_scores)  # Prioritize fitting bins with least normalized waste",
    "response_id": 0,
    "tryHS": true,
    "obj": 5.195452732349436,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]