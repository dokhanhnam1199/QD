{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n### Analyze & experience\n- Comparing (best) Heuristics 1st vs (worst) Heuristics 20th, we see that the best heuristics focuses on minimizing waste directly by prioritizing bins that result in the least waste after adding an item, which fills bins more efficiently. The worst heuristic combines proximity to item size and remaining capacity, which does not directly address minimizing waste. (Second best) Heuristics 2nd combines waste reduction and availability balance, providing a balanced approach compared to the sole waste minimization of the first. Comparing (1st) vs (2nd), we see that the first is more straightforward and directly efficient in waste reduction, while the second incorporates a more nuanced balance. (3rd) vs (4th) are exactly the same as the first, indicating redundancy. (Second worst) Heuristics 19th vs (worst) Heuristics 20th both prioritize reducing waste but in different ways; the second worst normalizes priority based on bin initial fullness, adding complexity without a significant improvement in efficacy. Overall: The best heuristics minimize waste directly, while the worst prioritizes secondary factors like relative capacity or closeness to item size, which do not directly lead to maximizing efficiency or minimizing waste.\n- \n- **Keywords:** Waste minimization, efficiency, clarity, focus\n- **Advice:** Focus on straightforward heuristics that directly address underutilized bin space without introducing redundancy or complexity.\n- **Avoid:** Balancing wasted space with initial bin availability, overly complex capacity optimizations that do not\u5e26\u6765 measurable performance gains.\n- **Explanation:** By concentrating on simple yet effective heuristics, we can enhance bin packing efficiency without the overhead of unnecessary complexity. This approach ensures that our focus remains on the primary goal of minimizing waste while maintaining or improving operational performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}