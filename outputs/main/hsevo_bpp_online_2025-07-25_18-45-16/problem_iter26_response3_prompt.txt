{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority score for bins focusing on fit availability and normalized waste minimization.\n\n    Args:\n        item: Size of item to be added to a bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = fit_availability * (1 - (bins_remain_cap - item) / max_cap)\n    \n    # Combine fit availability and normalized waste\n    priority_score = normalized_cap * normalized_waste\n    \n    return priority_score\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (Heuristic 1st) provides a balance between fit availability and weighted normalized waste minimization, efficiently utilizing weights to compute priorities. The worst heuristic (Heuristic 20th) recursively uses the same logic with repeated weighting criteria, lacking variation and failing to show improvements over simpler heuristics. (Second best) vs (second worst) shows a shift from dynamic balancing with contextual considerations to static prioritization based on remaining capacity inversely, lacking adaptability. Comparing (1st) vs (2nd), we see the best handles normalized waste and fit availability more smoothly, whereas the second prioritizes bins by filling the tightest bins first, introducing instability. (3rd) vs (4th) reveals that the third approach combines direct fit checks and waste minimization with balanced weighting, while the fourth focuses solely on closing bins prematurely, missing opportunities for better layout. Comparing (second worst) vs (worst), we see repeated mechanisms without learning or adaptability, making both less dynamic in handling various bin sizes and item distributions. Overall:\n- \n- **Keywords:** Normalization, Fit Availability, Direct Waste Minimization, Robust Edge Handling, Parameter Tuning\n\n- **Advice:**\n  - Prioritize normalized waste minimization with clear logic for decision-making.\n  - Explicitly check fit availability and balance it with waste criteria.\n  - Fine-tune parameters for effective heuristic performance.\n  - Implement robust checks to handle edge cases, including negative waste scenarios.\n\n- **Avoid:**\n  - Complex inverted capacity approaches and unnecessary adjustments (e.g., sinusoidal).\n  - Repetitive or redundant logic.\n  - Division by zero in normalization techniques.\n  - Adding complexity without clear benefits to efficiency or effectiveness.\n\n- **Explanation:** This approach ensures that the heuristics are straightforward, efficient, and focused on the primary goal of minimizing waste while effectively utilizing bin capacity. By normalizing waste and explicitly checking fit availability, the heuristics can make informed decisions, leading to better overall performance in bin packing problems without unnecessary complications.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}