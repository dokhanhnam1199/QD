```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on normalized waste minimization and fit availability.
    It seeks to minimize the waste in bins where the item can fit, promoting better packing efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability: 1 if item can fit, 0 otherwise
    fit_availability = (bins_remain_cap >= item).astype(float)
    
    # Waste minimization: calculate the waste if the item is added
    # Waste is defined as the remaining capacity after adding the item
    waste = bins_remain_cap - item * fit_availability
    
    # Normalize waste within the range of possible wastes (i.e., 0 to max(waste))
    # Add a small epsilon to avoid division by zero
    max_waste = np.max(waste) + 1e-6
    normalized_waste = waste / max_waste
    
    # Priority score is fit_availability times the negative of normalized waste
    # Minimizing waste is prioritized only when fit is available
    priority_score = fit_availability * (1 - normalized_waste)
    
    return priority_score
```
