```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on normalized waste minimization and fit availability.
    It attempts to minimize the waste in bins and prioritize bins that can fit the item
    while maintaining robustness against edge cases.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability
    fit_availability = (bins_remain_cap >= item).astype(float)

    # Calculate normalized waste
    current_waste = bins_remain_cap - item
    max_capacity = np.max(bins_remain_cap)
    min_capacity = np.min(bins_remain_cap)
    # Avoid division by zero by using a small epsilon
    epsilon = 1e-6
    normalized_waste = 1 - ((current_waste - min_capacity) / (max_capacity - min_capacity + epsilon))
    
    # Priority is higher if the item fits and the waste is minimized
    priority_scores = fit_availability * normalized_waste

    return priority_scores
```
