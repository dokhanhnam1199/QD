```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic emphasizes normalization, waste minimization, and simplicity.
    It calculates priority based on the normalized remaining capacity after adding the item,
    aiming to minimize waste and fill bins efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item
    potential_remain_cap = bins_remain_cap - item
    
    # Calculate waste as the difference between current capacity and capacity after adding the item
    waste = bins_remain_cap - potential_remain_cap
    
    # Normalize waste scores to ensure consistency across different bin capacities
    max_bin_cap = np.max(bins_remain_cap)
    normalized_waste = waste / max_bin_cap
    
    # Prioritize bins that minimize waste when the item is added
    priority_scores = 1 - normalized_waste  # Lower waste means higher priority
    
    # Set priority to zero for bins where the item cannot be added due to insufficient capacity
    priority_scores[potential_remain_cap < 0] = 0
    
    return priority_scores
```
