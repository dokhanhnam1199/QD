```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing waste while ensuring fit availability.
    It normalizes the waste and balances it with fit availability to make informed decisions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste if the item is added to each bin
    waste = bins_remain_cap - item

    # Check fit availability: if item cannot fit in a bin, set fit_availability to 0, else 1
    fit_availability = (waste >= 0).astype(float)

    # Normalize the waste: avoid division by zero by adding a small epsilon
    normalized_waste = waste / (bins_remain_cap + 1e-6)

    # Define a parameter to balance fit availability and waste minimization
    alpha = 0.5  # Tuned parameter; can be adjusted based on performance

    # Priority score calculation: combine fit availability and normalized waste minimization
    priority_scores = alpha * fit_availability + (1 - alpha) * (1 - normalized_waste)

    # Set priority to -inf for impossible fits to avoid selection
    priority_scores[waste < 0] = -np.inf

    return priority_scores
```
