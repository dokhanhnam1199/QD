{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    threshold: float = 6469660.073025327) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, threshold)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering both waste minimization and remaining capacity balance.\"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Normalize by remaining capacity to balance with space availability\n    normalized_priority = priority_scores / (bins_remain_cap + 1e-6)  # Add small epsilon to avoid division by zero\n    \n    # Lower normalized waste means higher priority, so invert the scores\n    return -normalized_priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering both waste minimization and balance of remaining capacity.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Minimize waste and balance by combining space left and relative remaining capacity\n    priority = can_fit * (1 - (space_left / bins_remain_cap) - np.std(bins_remain_cap) / bins_remain_cap)\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering both waste minimization and balance of remaining capacity.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Minimize waste and balance by combining space left and relative remaining capacity\n    priority = can_fit * (1 - (space_left / bins_remain_cap) - np.std(bins_remain_cap) / bins_remain_cap)\n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by focusing on minimizing waste while balancing initial bin availability.\"\"\"\n    fit_threshold = 0.04627908669393754\n    weight = 0.8534472775839081\n    can_fit = bins_remain_cap >= (item + fit_threshold)\n    space_left = bins_remain_cap - item\n    priority = can_fit * weight * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    priority -= np.min(priority)  # Normalize to account for initial fullness\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction, prioritizing bins that fit item with minimal waste.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Space efficiency after placing the item\n    space_efficiency = 1 - ((bins_remain_cap - item) / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by focusing on minimizing waste while balancing initial bin availability.\"\"\"\n    fit_threshold = 0.04627908669393754\n    weight = 0.8534472775839081\n    can_fit = bins_remain_cap >= (item + fit_threshold)\n    space_left = bins_remain_cap - item\n    priority = can_fit * weight * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    priority -= np.min(priority)  # Normalize to account for initial fullness\n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction, prioritizing bins that fit item with minimal waste.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Space efficiency after placing the item\n    space_efficiency = 1 - ((bins_remain_cap - item) / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction, prioritizing bins that fit item with minimal waste.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Space efficiency after placing the item\n    space_efficiency = 1 - ((bins_remain_cap - item) / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score combining waste minimization and relative space availability.\"\"\"\n    # Calculate waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    # Calculate normalized remaining capacity\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap)\n    # Prioritize bins with least waste, penalize full bins with -np.inf\n    priority_scores = np.where(waste >= 0, waste + norm_cap, -np.inf)\n    return priority_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score combining waste minimization and relative space availability.\"\"\"\n    # Calculate waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    # Calculate normalized remaining capacity\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap)\n    # Prioritize bins with least waste, penalize full bins with -np.inf\n    priority_scores = np.where(waste >= 0, waste + norm_cap, -np.inf)\n    return priority_scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score combining waste minimization and relative space availability.\"\"\"\n    # Calculate waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    # Calculate normalized remaining capacity\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap)\n    # Prioritize bins with least waste, penalize full bins with -np.inf\n    priority_scores = np.where(waste >= 0, waste + norm_cap, -np.inf)\n    return priority_scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}