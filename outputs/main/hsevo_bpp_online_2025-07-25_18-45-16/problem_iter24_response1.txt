```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements a heuristic based on normalized remaining capacity and
    direct fit criteria. It aims to balance filling the bins efficiently while minimizing waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate direct fit availability (1 if item fits, 0 otherwise)
    fit_availability = (bins_remain_cap >= item).astype(float)

    # Calculate normalized remaining capacity
    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap)

    # Calculate waste after placing the item (only if it fits)
    waste_after_fit = np.where(fit_availability == 1, bins_remain_cap - item, 1.0)

    # Calculate normalized waste
    normalized_waste = waste_after_fit / np.max(bins_remain_cap)

    # Weighting criteria: direct fit availability is heavily weighted, normalized capacity is medium, normalized waste islightly
    priority_score = 2.0 * fit_availability + 1.0 * normalized_capacity - 0.5 * normalized_waste

    return priority_score
```
