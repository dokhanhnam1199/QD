[
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for adding an item to each bin.\n    Combines normalized waste minimization and fit availability.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized waste minimization and fit availability to prioritize bins effectively.\"\"\"\n    remain_cap_after_item = bins_remain_cap - item\n    waste = np.maximum(remain_cap_after_item, 0)\n    max_waste = np.max(waste)\n    normalized_waste = waste / max_waste if max_waste > 0 else np.zeros_like(waste)\n    priority_score = (1 - normalized_waste) + (remain_cap_after_item / np.max(bins_remain_cap, initial=1))\n    priority_score[remain_cap_after_item < 0] = 0.0\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for bins focusing on fit availability and normalized waste minimization.\n\n    Args:\n        item: Size of item to be added to a bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = fit_availability * (1 - (bins_remain_cap - item) / max_cap)\n    \n    # Combine fit availability and normalized waste\n    priority_score = normalized_cap * normalized_waste\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 77.6924611088951,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by normalizing waste and ensuring fit availability, balancing both criteria effectively.\"\"\"\n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Calculate priority scores based on fit availability and normalized waste\n    priority_scores = 1 / (norm_waste + 1e-6) * (bins_remain_cap >= item)\n    \n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response5.txt_stdout.txt",
    "code_path": "problem_iter23_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 14.489429597128037,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response6.txt_stdout.txt",
    "code_path": "problem_iter23_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by normalizing remaining capacity and minimizing waste while ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Normalize waste for prioritization\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, norm_remain_cap - normalized_waste)\n    \n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response7.txt_stdout.txt",
    "code_path": "problem_iter23_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 14.489429597128037,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response8.txt_stdout.txt",
    "code_path": "problem_iter23_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response9.txt_stdout.txt",
    "code_path": "problem_iter23_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 14.489429597128037,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]