```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized waste minimization and fit availability to prioritize bins effectively."""
    remain_cap_after_item = bins_remain_cap - item
    waste = np.maximum(remain_cap_after_item, 0)
    max_waste = np.max(waste)
    normalized_waste = waste / max_waste if max_waste > 0 else np.zeros_like(waste)
    priority_score = (1 - normalized_waste) + (remain_cap_after_item / np.max(bins_remain_cap, initial=1))
    priority_score[remain_cap_after_item < 0] = 0.0
    return priority_score
```
