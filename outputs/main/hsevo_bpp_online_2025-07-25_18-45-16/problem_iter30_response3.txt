```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing direct waste by normalizing the remaining
    capacities and checking fit availability. It avoids complex inverted capacity
    approaches and unnecessary complexity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        return np.zeros_like(bins_remain_cap)
    normalized_cap = bins_remain_cap / max_cap

    # Check if item can fit in the bin
    can_fit = (bins_remain_cap >= item).astype(float)

    # Calculate direct waste if item is added
    direct_waste = can_fit * (bins_remain_cap - item)

    # Normalize direct waste
    max_waste = np.max(direct_waste) if np.any(can_fit) else 0
    if max_waste == 0:
        max_waste = 1  # Avoid division by zero for bins where item cannot fit

    normalized_waste = direct_waste / max_waste

    # Priority score is based on normalized capacity if it fits, otherwise 0
    priority_scores = can_fit * (1 - normalized_waste)

    return priority_scores
```
