```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This design implements a heuristic based on normalized waste minimization and fit availability.
    It prioritizes bins where the item can fit and minimizes the resulting waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability
    fit_availability = bins_remain_cap >= item

    # Calculate waste
    waste = bins_remain_cap - item

    # Normalize waste, set waste to a large number for bins where the item does not fit
    normalized_waste = np.where(fit_availability, waste / np.max(bins_remain_cap), np.inf)

    # Priority score: lower normalized waste is better
    priority_score = 1.0 / (normalized_waste + 1e-6)

    return priority_score
```
