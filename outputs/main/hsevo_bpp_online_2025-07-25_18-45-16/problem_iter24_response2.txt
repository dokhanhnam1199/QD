```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic aims to balance fit availability and direct waste minimization.
    It incorporates normalized waste measurement and clear fit checks with weighted criteria.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in each bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Calculate normalized waste if item is placed in each bin
    new_waste = bins_remain_cap - item
    max_waste = np.max(bins_remain_cap)
    normalized_waste = 1.0 - (new_waste / (max_waste + 1e-6))
    
    # Criteria weighting: 0.7 for availability, 0.3 for waste minimization
    priority_scores = 0.7 * can_fit + 0.3 * normalized_waste
    
    return priority_scores
```
