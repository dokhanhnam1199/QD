```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic aims to minimize waste and maximize fit availability by considering
    the waste created if the item is added to each bin. It normalizes the scores to ensure
    robust and consistent prioritization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste if the item is added to each bin
    waste = bins_remain_cap - item
    # Ensure we don't consider negative waste (item too large for bin)
    waste[waste < 0] = np.inf
    # Normalize the waste scores to prioritize bins with lower waste
    normalized_waste = waste / np.max(waste)
    # Priority is inversely proportional to normalized waste
    priority_scores = 1 / (normalized_waste + 1e-6)
    return priority_scores
```
