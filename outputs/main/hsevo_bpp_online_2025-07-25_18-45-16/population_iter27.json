[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a combination of fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0\n    weight_waste = 1.5\n    priority = can_fit * (1 - weight_waste * waste)\n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score combining fit availability and normalized waste minimization.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    normalized_waste = np.where(fit_availability, item / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score combining fit availability and normalized waste minimization.\"\"\"\n    # Check if the item can fit in each bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Normalize waste to the range [0, 1]\n    max_waste = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_waste + 1e-6)\n    \n    # Calculate priority scores by balancing fit availability and normalized waste minimization\n    priority_scores = can_fit * (1 - normalized_waste)\n    \n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin combining fit availability and normalized waste minimization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = (bins_remain_cap - item) / max_cap\n    \n    # Combine fit availability with normalized capacity and waste\n    priority_score = fit_availability * (normalized_cap * (1 - normalized_waste))\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 77.6924611088951,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins by balancing fit availability and normalized waste minimization.\"\"\"\n    direct_fit = (bins_remain_cap >= item).astype(float)\n    waste_after_item = bins_remain_cap - item\n    normalized_waste = 1 - (waste_after_item / np.max(bins_remain_cap, initial=1))\n    normalized_waste = np.clip(normalized_waste, 0, 1)\n    priority_score = 0.7 * direct_fit + 0.3 * normalized_waste\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score combining fit availability and normalized waste minimization.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    normalized_waste = np.where(fit_availability, (bins_remain_cap - item) / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by balancing normalized waste and fit availability, enhancing decision-making for Online BPP.\"\"\"\n    # Ensure no negative waste values and set to inf for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate priority scores combining normalized waste and fit availability\n    priority_scores = fit_availability / (norm_waste + 1e-6)\n    \n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by balancing normalized waste and fit availability, enhancing decision-making for Online BPP.\"\"\"\n    # Ensure no negative waste values and set to inf for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate priority scores combining normalized waste and fit availability\n    priority_scores = fit_availability / (norm_waste + 1e-6)\n    \n    return priority_scores",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a balanced approach of fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    priority = can_fit * (norm_remain_cap - 0.75 * waste)  # Weighted balance between fit and waste minimization\n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response0.txt_stdout.txt",
    "code_path": "problem_iter27_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste while ensuring fit availability.\n    It normalizes the waste and balances it with fit availability to make informed decisions.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste = bins_remain_cap - item\n\n    # Check fit availability: if item cannot fit in a bin, set fit_availability to 0, else 1\n    fit_availability = (waste >= 0).astype(float)\n\n    # Normalize the waste: avoid division by zero by adding a small epsilon\n    normalized_waste = waste / (bins_remain_cap + 1e-6)\n\n    # Define a parameter to balance fit availability and waste minimization\n    alpha = 0.5  # Tuned parameter; can be adjusted based on performance\n\n    # Priority score calculation: combine fit availability and normalized waste minimization\n    priority_scores = alpha * fit_availability + (1 - alpha) * (1 - normalized_waste)\n\n    # Set priority to -inf for impossible fits to avoid selection\n    priority_scores[waste < 0] = -np.inf\n\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response1.txt_stdout.txt",
    "code_path": "problem_iter27_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste while ensuring fit availability.\n    It normalizes the waste and balances it with fit availability to make informed decisions.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero and handle edge cases\n    bins_remain_cap = np.clip(bins_remain_cap, a_min=0, a_max=None)\n    \n    # Calculate waste for each bin if the item is added\n    waste = bins_remain_cap - item\n    \n    # Set negative waste to a high value to avoid adding items that exceed bin capacity\n    waste[waste < 0] = np.inf\n    \n    # Normalize the waste to ensure balanced decision-making\n    max_waste = np.max(waste)\n    min_waste = np.min(waste[waste != np.inf])\n    \n    if max_waste == min_waste:\n        # Avoid normalization when all values are the same\n        normalized_waste = waste\n    else:\n        normalized_waste = (waste - min_waste) / (max_waste - min_waste)\n    \n    # Prioritize bins with lower normalized waste and fit availability\n    priority_scores = 1 / (normalized_waste + 1e-6)\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response2.txt_stdout.txt",
    "code_path": "problem_iter27_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on normalized waste minimization and fit availability.\n    It prioritizes bins where the item can fit and minimizes the resulting waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability\n    fit_availability = bins_remain_cap >= item\n\n    # Calculate waste\n    waste = bins_remain_cap - item\n\n    # Normalize waste, set waste to a large number for bins where the item does not fit\n    normalized_waste = np.where(fit_availability, waste / np.max(bins_remain_cap), np.inf)\n\n    # Priority score: lower normalized waste is better\n    priority_score = 1.0 / (normalized_waste + 1e-6)\n\n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response3.txt_stdout.txt",
    "code_path": "problem_iter27_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste while ensuring fit availability.\n    It normalizes the waste and balances it with fit availability to make informed decisions.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste = bins_remain_cap - item\n\n    # Check fit availability: if item cannot fit, set priority to a low value\n    fit_availability = (waste >= 0).astype(float) * 1000  # High multiplier for available fits\n\n    # Normalize the waste to ensure it's within a reasonable range\n    max_waste = np.max(waste) if np.max(waste) != 0 else 1\n    normalized_waste = -waste / max_waste  # Minimizing waste is maximizing negative waste\n\n    # Combine fit availability and waste minimization\n    priority_scores = fit_availability + normalized_waste\n\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response4.txt_stdout.txt",
    "code_path": "problem_iter27_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic prioritizes bins based on normalized waste minimization while\n    also considering fit availability. The goal is to minimize the waste in each bin\n    while ensuring the item can fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate waste after adding the item to each bin\n    waste = bins_remain_cap - item\n\n    # Avoid negative waste (though logically waste should not be negative if fit availability is checked)\n    waste[waste < 0] = 0\n\n    # Normalize waste by dividing by the bin capacity\n    bin_capacities = np.full_like(bins_remain_cap, np.max(bins_remain_cap) + 1e-6)  # Add small epsilon to avoid division by zero\n    normalized_waste = waste / bin_capacities\n\n    # Priority score: fit availability is more important, but normalized waste also matters\n    # We give a higher weight to fit availability to ensure the item can fit before minimizing waste\n    priority_score = fit_availability * (1 - normalized_waste)\n\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]