```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by combining fit availability and normalized waste minimization."""
    # Calculate remaining capacity after adding the item
    potential_remain_cap = bins_remain_cap - item
    
    # Calculate waste as the difference between current capacity and capacity after adding the item
    waste = bins_remain_cap - potential_remain_cap
    
    # Normalize waste scores
    max_bin_cap = np.max(bins_remain_cap)
    normalized_waste = waste / (max_bin_cap + 1e-6)
    
    # Calculate priority score based on fit availability and normalized waste
    can_fit = (bins_remain_cap >= item).astype(float)
    priority_score = can_fit * (1.0 - normalized_waste)
    
    # Ensure items are not placed into bins they cannot fit into
    priority_score[potential_remain_cap < 0] = 0.0
    
    return priority_score
```
