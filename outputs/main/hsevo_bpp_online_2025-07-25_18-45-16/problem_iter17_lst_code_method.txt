{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have the best fit available for the item.\n    It uses a normalized score based on the difference between the item size and the remaining capacity,\n    ensuring that bins which can fit the item with the least leftover space are prioritized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Priority is the inverse of normalized waste: lower waste means higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have the best fit available for the item.\n    It uses a normalized score based on the difference between the item size and the remaining capacity,\n    ensuring that bins which can fit the item with the least leftover space are prioritized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Priority is the inverse of normalized waste: lower waste means higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    safe_max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n    space_left = bins_remain_cap - item\n    priority = can_fit * (-space_left / safe_max_cap)\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have the best fit available for the item.\n    It uses a normalized score based on the difference between the item size and the remaining capacity,\n    ensuring that bins which can fit the item with the least leftover space are prioritized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Priority is the inverse of normalized waste: lower waste means higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have the best fit available for the item.\n    It uses a normalized score based on the difference between the item size and the remaining capacity,\n    ensuring that bins which can fit the item with the least leftover space are prioritized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Priority is the inverse of normalized waste: lower waste means higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    safe_max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n    space_left = bins_remain_cap - item\n    priority = can_fit * (-space_left / safe_max_cap)\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for adding an item to each bin based on normalized remaining capacity.\"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Calculate waste (unused capacity) after adding the item, only for bins that can fit the item\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize the waste scores to ensure consistency\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        return np.zeros_like(bins_remain_cap)\n    normalized_waste = waste / max_waste\n    \n    # Assign priority inversely proportional to normalized waste\n    priority_score = 1 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[remain_cap_after_item < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste by prioritizing bins that have the best fit available for the item.\n    It uses a normalized score based on the difference between the item size and the remaining capacity,\n    ensuring that bins which can fit the item with the least leftover space are prioritized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Priority is the inverse of normalized waste: lower waste means higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and minimized normalized waste for optimal bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fit availability and normalized waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on fit availability and normalized waste\n    can_fit = (bins_remain_cap >= item).astype(float)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fit availability and normalized waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on fit availability and normalized waste\n    can_fit = (bins_remain_cap >= item).astype(float)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fit availability and normalized waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on fit availability and normalized waste\n    can_fit = (bins_remain_cap >= item).astype(float)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fit availability and normalized waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on fit availability and normalized waste\n    can_fit = (bins_remain_cap >= item).astype(float)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, balancing fit availability and waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority using a combination of normalized waste and remaining capacity\n    priority_scores = 0.5 * (1 - normalized_waste) + 0.5 * (bins_remain_cap / max_bin_cap)\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, balancing fit availability and waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority using a combination of normalized waste and remaining capacity\n    priority_scores = 0.5 * (1 - normalized_waste) + 0.5 * (bins_remain_cap / max_bin_cap)\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, balancing fit availability and waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority using a combination of normalized waste and remaining capacity\n    priority_scores = 0.5 * (1 - normalized_waste) + 0.5 * (bins_remain_cap / max_bin_cap)\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, balancing fit availability and waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority using a combination of normalized waste and remaining capacity\n    priority_scores = 0.5 * (1 - normalized_waste) + 0.5 * (bins_remain_cap / max_bin_cap)\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, balancing fit availability and waste minimization.\"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority using a combination of normalized waste and remaining capacity\n    priority_scores = 0.5 * (1 - normalized_waste) + 0.5 * (bins_remain_cap / max_bin_cap)\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by maximizing normalized remaining capacity after placing the item.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    bins_new_cap = bins_remain_cap - item\n    normalized_new_cap = bins_new_cap / (bins_remain_cap + 1e-9)  # Avoid division by zero\n    priority_scores = can_fit * normalized_new_cap  # Maximize normalized new capacity for top priority\n    return priority_scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}