{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on normalized waste minimization and fit availability.\n    It is designed to be simple, efficient, and robust.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate waste after adding the item\n    waste_after_adding = (bins_remain_cap - item) / item\n    waste_after_adding[bins_remain_cap < item] = np.inf  # Penalize infeasible bins\n    \n    # Calculate normalized waste\n    normalized_waste = 1 / (waste_after_adding + 1)\n    \n    # Combine fit availability and normalized waste to get the final priority score\n    priority_score = fit_availability * normalized_waste\n    \n    return priority_score\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Calculate priority scores for bins by minimizing normalized waste and ensuring fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap - waste\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing **Heuristics 1st** vs **Heuristics 20th**: The 1st heuristic efficiently combines fit availability and normalized waste minimization, prioritizing bins that can hold the item with minimal leftover space. The 20th heuristic Normalizes remaining capacities and calculates waste in a similar manner but lacks the emphasis on ensuring fit availability and uses a more complicated approach that does not effectively penalize infeasible bins.\nComparing **Heuristics 2nd** vs **Heuristics 19th**: The 2nd heuristic calculates priority by balancing normalized waste and remaining capacity, with clear handling of infeasible bins. The 19th heuristic performs similarly to the 20th but does not balance different criteria as effectively as the 2nd.\nComparing **Heuristics 3rd** vs **Heuristics 18th**: The 3rd heuristic includes fit availability and minimizes normalized waste with tunable parameters, enhancing adaptability. The 18th heuristic is identical to the 20th in its implementation.\nComparing **Heuristics 4th** vs **Heuristics 17th**: The 4th heuristic normalizes remaining capacities and waste, counts fit availability, and ensures no division by zero. The 17th heuristic is a repeat of the 20th, lacking the more nuanced prioritization of the 4th.\nComparing **Heuristics 5th** vs **Heuristics 16th**: The 5th heuristic minimizes normalized waste while ensuring only fit bins are considered. The 16th heuristic is identical to the 20th, which does not adequately penalize infeasible bins.\nComparing **Heuristics 6th** vs **Heuristics 15th**: Both heuristics aim to fill tighter bins first similar to a sinusoidal first-fit heuristic. The sinusoidal function in Heuristic 6th adds variability and is not as direct as the straightforward penalization in Heuristic 15th.\nComparing **Heuristics 7th** vs **Heuristics 14th**: Heuristic 7th enhances prioritization by minimizing normalized waste and considering fit availability effectively. Heuristic 14th, like others, repeats the same normalized waste calculation approach, lacking additional context checks.\nComparing **Heuristics 8th** vs **Heuristics 13th**: These are identical to Heuristic 6th and the repeated Heuristic 20th respectively, with 8th showing slightly different goals compared to the repetitive normalized calculations in 13th.\nOverall: Top heuristics emphasize fit availability and use normalized waste effectively to prioritize bins. Lower-ranked heuristics often repeat similar normalized waste calculations without adequately considering bin fit availability, leading to less effective prioritization.\n- \n- **Keywords**: Normalization, Fit Availability, Criteria Weighting, Direct Waste Minimization\n- **Advice**: Integrate normalized waste measurement and direct fit checks. Use weighted criteria that balance availability and minimization objectives.\n- **Avoid**: Repetitive approaches, complex inversion logic, sinusoidal adjustments, unnecessary complexity\n- **Explanation**: By focusing on normalization and clear fit checks, you ensure that the heuristic directly targets the problem's objectives without adding unnecessary complexity. Balanced criteria weighting and minimizing waste directly enhance decision-making and heuristic performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}