```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on normalized waste minimization and fit availability.
    It assesses the remaining capacity in relation to the item size and ensures
    robust handling of edge cases.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability: if item does not fit in a bin, set its priority to 0
    fit_available = bins_remain_cap >= item
    
    # Calculate normalized waste: (remaining capacity - item size) / remaining capacity
    # For bins where the item does not fit, set the normalized waste to 0 to avoid division by zero
    normalized_waste = np.where(fit_available, (bins_remain_cap - item) / bins_remain_cap, 0)
    
    # Calculate priority: prioritize bins with higher fit availability and lower normalized waste
    # Bins with higher normalized waste (closer to being full once the item is added) get higher priority
    priority_scores = fit_available * (1 - normalized_waste)
    
    return priority_scores
```
