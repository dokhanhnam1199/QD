```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic integrates normalized waste measurement and direct fit checks.
    It uses weighted criteria to balance availability and minimization objectives.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check for direct fit availability
    direct_fit = (bins_remain_cap >= item).astype(float)
    
    # Calculate normalized waste after placing the item
    waste_after_item = bins_remain_cap - item
    max_capacity = np.max(bins_remain_cap)
    normalized_waste = 1 - (waste_after_item / max_capacity)
    
    # Avoid negative waste (normalize properly)
    normalized_waste = np.clip(normalized_waste, 0, 1)
    
    # Define weights for different criteria
    weight_direct_fit = 0.7
    weight_waste_minimization = 0.3
    
    # Calculate priority score
    priority_score = (weight_direct_fit * direct_fit) + (weight_waste_minimization * normalized_waste)
    
    return priority_score
```
