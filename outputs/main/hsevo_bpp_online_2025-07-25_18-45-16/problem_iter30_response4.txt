```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing direct waste by normalizing the remaining
    capacities and checking fit availability. It avoids complex inverted capacity
    approaches and unnecessary complexity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        # Handle edge case where all bins are full
        return np.zeros_like(bins_remain_cap)
    
    normalized_cap = bins_remain_cap / max_cap

    # Check fit availability
    can_fit = (bins_remain_cap >= item).astype(float)

    # Priority score: prioritize bins that can fit the item with less waste
    priority_score = can_fit * (1 - (bins_remain_cap - item) / max_cap)

    return priority_score
```
