```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing the waste after placing the item in a bin.
    It calculates the waste as the remaining capacity after placing the item and 
    prioritizes bins that result in the least waste. This approach helps in filling 
    bins more efficiently and avoids overly compacting bins prematurely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste after adding the item to each bin
    waste = bins_remain_cap - item
    
    # Prioritize bins with least waste, where waste is non-negative
    # Use a large number for waste that is negative (i.e., item doesn't fit)
    priority_scores = np.where(waste >= 0, waste, 1e6)
    
    # Lower waste means higher priority, so invert the scores
    return -priority_scores
```
