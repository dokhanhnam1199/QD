```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and normalized waste, ensuring fit availability."""
    # Calculate remaining capacity after adding the item
    remain_cap_after_item = bins_remain_cap - item
    
    # Calculate waste as unused capacity after adding the item
    waste = np.maximum(remain_cap_after_item, 0)
    
    # Normalize the waste scores to ensure consistency
    max_waste = np.max(waste)
    if max_waste == 0:
        normalized_waste = np.zeros_like(waste)
    else:
        normalized_waste = waste / max_waste
    
    # Assign priority considering both normalized waste and remaining capacity
    priority_score = 0.5 * (1 - normalized_waste) + 0.5 * (remain_cap_after_item / np.max(bins_remain_cap))
    
    # Ensure items are not placed into bins they cannot fit into
    priority_score[remain_cap_after_item < 0] = 0.0
    
    return priority_score
```
