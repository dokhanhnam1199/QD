{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords:** Normalization, Fit Availability, Edge Case Handling, Direct Waste Minimization\n- **Advice:**  \n  - Prioritize direct waste minimization using normalized metrics.\n  - Ensure robust edge case handling and flexible dynamic weighting.\n  - Incorporate explicit fit checks and parameter fine-tuning.\n  - Design for clarity and simplicity, avoiding unnecessary complexity.\n- **Avoid:**  \n  - Complex inverted capacity approaches.\n  - Sinusoidal adjustments and repetitive logic.\n  - Over-reliance on initial bin availability without considering capacity needs.\n- **Explanation:**  \n  By focusing on normalization and direct waste minimization, heuristics become more effective and efficient. Incorporating fit checks and parameter fine-tuning enhances decision-making, while robust edge case handling ensures reliability. Avoiding unnecessary complexity makes heuristics easier to understand and maintain, directly contributing to better performance in optimization problems.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}