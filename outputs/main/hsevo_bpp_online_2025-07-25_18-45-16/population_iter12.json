[
  {
    "stdout_filepath": "problem_iter11_response0.txt_stdout.txt",
    "code_path": "problem_iter11_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-6)\n    priority_scores = can_fit * normalized_waste\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response1.txt_stdout.txt",
    "code_path": "problem_iter11_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = np.where(can_fit, bins_remain_cap - item, np.inf)\n    normalized_waste = waste / bins_remain_cap\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response2.txt_stdout.txt",
    "code_path": "problem_iter11_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by ensuring fit availability and minimizing normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response3.txt_stdout.txt",
    "code_path": "problem_iter11_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = np.where(can_fit, bins_remain_cap - item, 0)\n    normalized_waste = np.where(can_fit, waste / bins_remain_cap, 0)\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response4.txt_stdout.txt",
    "code_path": "problem_iter11_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization with robust normalization to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    norm_waste = waste / np.where(bins_remain_cap == 0, 1, bins_remain_cap)\n    priority_score = can_fit * (1 - norm_waste)\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response5.txt_stdout.txt",
    "code_path": "problem_iter11_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on minimizing waste and balancing capacity using normalized scores.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    safe_max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n    space_left = bins_remain_cap - item\n    # Minimize waste and balance by normalizing space left\n    priority = can_fit * (-space_left / safe_max_cap)\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response6.txt_stdout.txt",
    "code_path": "problem_iter11_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by normalizing waste and ensuring fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-9)  # Avoid division by zero\n    priority_scores = can_fit * -normalized_waste  # Maximize negative normalized waste for top priority\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response7.txt_stdout.txt",
    "code_path": "problem_iter11_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by minimizing waste and ensuring fit availability without division by zero.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item can fit in the bin\n    waste = bins_remain_cap - item  # Calculate waste if item is placed\n    priority_scores = np.where(waste >= 0, waste, np.inf)  # Prioritize bins with least waste\n    return can_fit * (-priority_scores)  # Maximize negative waste for top priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response8.txt_stdout.txt",
    "code_path": "problem_iter11_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins with least waste, normalized capacity, and balanced fit.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap, initial=1)  # Avoid division by zero\n    balance_factor = 1 - (waste / np.mean(bins_remain_cap, initial=1))  # Avoid division by zero\n    priority_scores = can_fit * (waste + norm_cap + balance_factor)\n    return priority_scores",
    "response_id": 8,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 8, in priority_v2\n    priority_score = can_fit * (1 - normalized_waste)\nTypeError: mean() got an unexpected keyword argument 'initial'\n6\n1\n"
  },
  {
    "stdout_filepath": "problem_iter11_response9.txt_stdout.txt",
    "code_path": "problem_iter11_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing fit availability and normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = np.where(can_fit, bins_remain_cap - item, np.inf)\n    normalized_waste = waste / np.where(bins_remain_cap > 0, bins_remain_cap, np.inf)\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response0.txt_stdout.txt",
    "code_path": "problem_iter12_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / max_bin_cap\n    \n    # Prioritize bins that minimize waste when the item is added\n    priority_scores = 1 - normalized_waste  # Lower waste means higher priority\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response1.txt_stdout.txt",
    "code_path": "problem_iter12_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Define waste as the difference between the bin size and the potential remaining capacity\n    # Assuming bin size is the maximum capacity initially available\n    bin_size = np.max(bins_remain_cap + item)\n    waste = bin_size - potential_remain_cap\n    \n    # Normalize waste to ensure all values are between 0 and 1\n    normalized_waste = waste / bin_size\n    \n    # Calculate priority score as the inverse of normalized waste\n    # Lower waste leads to higher priority\n    priority_scores = 1.0 - normalized_waste\n    \n    # Ensure bins with negative remaining capacity (where item can't fit) get the lowest priority\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response2.txt_stdout.txt",
    "code_path": "problem_iter12_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes waste minimization by prioritizing bins that have the least\n    remaining capacity after adding the item, while ensuring robust normalization and clear definitions.\n    The priority score is based on the remaining capacity after adding the item, normalized to ensure\n    consistency and prevent bias.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item to each bin\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Define waste as the unused capacity in the bin after adding the item\n    # Bins with negative or zero remaining capacity after item addition are not considered\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize the waste to ensure all values are on the same scale\n    # If all bins are full or the item does not fit in any bin, return an array of zeros\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        return np.zeros_like(bins_remain_cap)\n    \n    normalized_waste = waste / max_waste\n    \n    # Priority is inversely proportional to the normalized waste\n    # Bins with less waste have higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response3.txt_stdout.txt",
    "code_path": "problem_iter12_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on normalized waste, lower waste means higher priority\n    priority_score = 1.0 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response4.txt_stdout.txt",
    "code_path": "problem_iter12_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on normalized remaining capacity\n    and waste minimization. It prioritizes bins where the item fits well,\n    minimizing future waste and ensuring a balanced use of bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure item fits in the bin\n    feasible_bins = bins_remain_cap >= item\n    \n    # Calculate normalized remaining capacity\n    max_capacity = np.max(bins_remain_cap)\n    min_capacity = np.min(bins_remain_cap)\n    normalized_capacity = (bins_remain_cap - min_capacity) / (max_capacity - min_capacity + 1e-6)\n    \n    # Calculate potential waste if item is placed in the bin\n    waste_if_placed = bins_remain_cap - item\n    \n    # Normalize waste\n    max_waste = np.max(waste_if_placed)\n    min_waste = np.min(waste_if_placed)\n    normalized_waste = (waste_if_placed - min_waste) / (max_waste - min_waste + 1e-6)\n    \n    # Priority is the combination of high normalized capacity and low normalized waste\n    priority_score = feasible_bins * (normalized_capacity - normalized_waste)\n    \n    # Return priority score, ensuring non-feasible bins have zero priority\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]