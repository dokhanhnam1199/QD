```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins combining fit availability, normalized capacity, and balanced waste minimization.
    """
    # Check fit availability first
    fit_availability = (bins_remain_cap >= item).astype(float)
    
    # Calculate normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    if max_cap == min_cap:
        normalized_cap = np.ones_like(bins_remain_cap)
    else:
        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)
    
    # Calculate normalized waste
    normalized_waste = (bins_remain_cap - item) / max_cap
    normalized_waste[~fit_availability.astype(bool)] = 0  # Ensure bins that cannot fit have zero waste
    
    # Combine fit availability with normalized capacity and balanced waste
    priority_score = fit_availability * (normalized_cap - 0.5 * normalized_waste)
    
    return priority_score
```
