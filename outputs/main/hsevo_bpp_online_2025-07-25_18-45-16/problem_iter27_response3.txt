```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing waste while ensuring fit availability.
    It normalizes the waste and balances it with fit availability to make informed decisions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste if the item is added to each bin
    waste = bins_remain_cap - item

    # Check fit availability: if item cannot fit, set priority to a low value
    fit_availability = (waste >= 0).astype(float) * 1000  # High multiplier for available fits

    # Normalize the waste to ensure it's within a reasonable range
    max_waste = np.max(waste) if np.max(waste) != 0 else 1
    normalized_waste = -waste / max_waste  # Minimizing waste is maximizing negative waste

    # Combine fit availability and waste minimization
    priority_scores = fit_availability + normalized_waste

    return priority_scores
```
