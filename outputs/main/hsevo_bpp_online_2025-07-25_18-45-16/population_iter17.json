[
  {
    "stdout_filepath": "problem_iter17_response0.txt_stdout.txt",
    "code_path": "problem_iter17_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin using normalized waste and fit availability.\"\"\"\n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Set waste to infinity for bins that cannot fit the item\n    \n    # Normalize waste scores\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Calculate priority based on remaining capacity and normalized waste\n    priority_scores = (1 - normalized_waste) * (bins_remain_cap / np.max(bins_remain_cap + 1e-6))\n    \n    # Set priority to zero for bins where the item cannot be added\n    priority_scores[waste == np.inf] = 0\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 12.963701635420822,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response1.txt_stdout.txt",
    "code_path": "problem_iter17_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for effective bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response2.txt_stdout.txt",
    "code_path": "problem_iter17_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    max_bin_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n    normalized_waste = space_left / max_bin_cap\n    priority = can_fit * (1 - normalized_waste)\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response3.txt_stdout.txt",
    "code_path": "problem_iter17_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for effective bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    priority_score[potential_remain_cap < 0] = 0.0\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response4.txt_stdout.txt",
    "code_path": "problem_iter17_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bins by normalizing waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response5.txt_stdout.txt",
    "code_path": "problem_iter17_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by considering fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    safe_max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n    space_left = bins_remain_cap - item\n    normalized_space_left = space_left / safe_max_cap\n    priority = can_fit * (1 - normalized_space_left)\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response6.txt_stdout.txt",
    "code_path": "problem_iter17_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, ensuring fit availability.\"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Calculate waste as unused capacity after adding the item\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize the waste scores to ensure consistency\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        normalized_waste = np.zeros_like(waste)\n    else:\n        normalized_waste = waste / max_waste\n    \n    # Assign priority considering both normalized waste and remaining capacity\n    priority_score = 0.5 * (1 - normalized_waste) + 0.5 * (remain_cap_after_item / np.max(bins_remain_cap))\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[remain_cap_after_item < 0] = 0.0\n    \n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response7.txt_stdout.txt",
    "code_path": "problem_iter17_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bins by normalizing waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response8.txt_stdout.txt",
    "code_path": "problem_iter17_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by maximizing fit availability and minimizing normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    priority_score[potential_remain_cap < 0] = 0.0\n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response9.txt_stdout.txt",
    "code_path": "problem_iter17_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by availability and normalized waste minimization for optimal bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]