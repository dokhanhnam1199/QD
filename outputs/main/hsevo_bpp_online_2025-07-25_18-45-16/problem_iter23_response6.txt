```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority scores by normalizing remaining capacity and minimizing waste while ensuring fit availability."""
    
    # Calculate waste if the item is placed in each bin
    waste = bins_remain_cap - item
    
    # Set waste to a large positive value for bins that cannot fit the item
    waste[waste < 0] = np.inf
    
    # Normalize remaining capacities
    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)
    
    # Normalize waste for prioritization
    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)
    
    # Ensure bins that cannot fit the item have zero priority
    priority_score = np.where(waste == np.inf, 0, norm_remain_cap - normalized_waste)
    
    return priority_score
```
