```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic aims to balance fit availability and direct waste minimization.
    It incorporates normalized waste measurement and clear fit checks with weighted criteria.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in each bin
    fit_availability = (bins_remain_cap >= item).astype(float)
    
    # Calculate normalized waste (how much space will be wasted if item is placed in bin)
    waste = bins_remain_cap - item
    normalized_waste = waste / (bins_remain_cap + 1e-6)  # Prevent division by zero
    
    # Define weights for fit availability and waste minimization
    weight_fit_availability = 0.8
    weight_waste_minimization = 0.2
    
    # Calculate the priority score based on weighted criteria
    priority_scores = (weight_fit_availability * fit_availability) + (weight_waste_minimization * (1 - normalized_waste))
    
    # Apply a penalty for bins that cannot fit the item
    priority_scores[bins_remain_cap < item] = -1
    
    return priority_scores
```
