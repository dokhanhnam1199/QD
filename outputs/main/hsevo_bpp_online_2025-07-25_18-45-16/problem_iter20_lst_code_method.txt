{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    min_max_bin_cap: float = 1.5353042666483478,\n    fit_threshold: float = -0.11934595675780646,\n    weight_normalized_waste: float = 1.5470946865621147) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item + fit_threshold\n    space_left = bins_remain_cap - item\n    max_bin_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > min_max_bin_cap else min_max_bin_cap\n    normalized_waste = space_left / max_bin_cap\n    priority = can_fit * (1 - weight_normalized_waste * normalized_waste)\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by availability and normalized waste minimization for optimal bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste and maximize fit availability by considering\n    the waste created if the item is added to each bin. It normalizes the scores to ensure\n    robust and consistent prioritization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste = bins_remain_cap - item\n    # Ensure we don't consider negative waste (item too large for bin)\n    waste[waste < 0] = np.inf\n    # Normalize the waste scores to prioritize bins with lower waste\n    normalized_waste = waste / np.max(waste)\n    # Priority is inversely proportional to normalized waste\n    priority_scores = 1 / (normalized_waste + 1e-6)\n    return priority_scores\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bins by normalizing waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bins by normalizing waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste and maximize fit availability by considering\n    the waste created if the item is added to each bin. It normalizes the scores to ensure\n    robust and consistent prioritization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste = bins_remain_cap - item\n    # Ensure we don't consider negative waste (item too large for bin)\n    waste[waste < 0] = np.inf\n    # Normalize the waste scores to prioritize bins with lower waste\n    normalized_waste = waste / np.max(waste)\n    # Priority is inversely proportional to normalized waste\n    priority_scores = 1 / (normalized_waste + 1e-6)\n    return priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, ensuring fit availability.\"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Calculate waste as unused capacity after adding the item\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize the waste scores to ensure consistency\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        normalized_waste = np.zeros_like(waste)\n    else:\n        normalized_waste = waste / max_waste\n    \n    # Assign priority considering both normalized waste and remaining capacity\n    priority_score = 0.5 * (1 - normalized_waste) + 0.5 * (remain_cap_after_item / np.max(bins_remain_cap))\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[remain_cap_after_item < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bins by normalizing waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste and maximize fit availability by considering\n    the waste created if the item is added to each bin. It normalizes the scores to\n    ensure a consistent and robust prioritization system.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste = np.abs(bins_remain_cap - item)\n\n    # Normalize the waste scores to create a clear prioritization system\n    # Lower waste gets higher priority\n    normalized_waste = (np.max(waste) + 1e-6) - waste\n\n    # Ensure that bins with less than the item size have zero priority\n    normalized_waste[bins_remain_cap < item] = 0\n\n    return normalized_waste\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for effective bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    return priority_score\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for effective bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    return priority_score\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for effective bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    priority_score[potential_remain_cap < 0] = 0.0\n    return priority_score\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit availability and normalized waste minimization for effective bin selection.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    priority_score[potential_remain_cap < 0] = 0.0\n    return priority_score\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by maximizing fit availability and minimizing normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    potential_remain_cap = bins_remain_cap - item\n    waste = bins_remain_cap - potential_remain_cap\n    normalized_waste = waste / (np.max(bins_remain_cap) + 1e-6)\n    priority_score = can_fit * (1.0 - normalized_waste)\n    priority_score[potential_remain_cap < 0] = 0.0\n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste and maximize fit availability by considering\n    the normalization of remaining capacity and direct waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)\n    \n    # Calculate the waste if the item is added to each bin\n    waste = norm_remain_cap - item / np.max(bins_remain_cap)\n    \n    # Ensure no negative waste values\n    waste = np.clip(waste, 0, 1)\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap - waste\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste and maximize fit availability by considering\n    the normalization of remaining capacity and direct waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)\n    \n    # Calculate the waste if the item is added to each bin\n    waste = norm_remain_cap - item / np.max(bins_remain_cap)\n    \n    # Ensure no negative waste values\n    waste = np.clip(waste, 0, 1)\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap - waste\n    \n    return priority_scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to minimize waste and maximize fit availability by considering\n    the normalization of remaining capacity and direct waste reduction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    norm_remain_cap = bins_remain_cap / np.max(bins_remain_cap)\n    \n    # Calculate the waste if the item is added to each bin\n    waste = norm_remain_cap - item / np.max(bins_remain_cap)\n    \n    # Ensure no negative waste values\n    waste = np.clip(waste, 0, 1)\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap - waste\n    \n    return priority_scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin using normalized waste and fit availability.\"\"\"\n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Set waste to infinity for bins that cannot fit the item\n    \n    # Normalize waste scores\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Calculate priority based on remaining capacity and normalized waste\n    priority_scores = (1 - normalized_waste) * (bins_remain_cap / np.max(bins_remain_cap + 1e-6))\n    \n    # Set priority to zero for bins where the item cannot be added\n    priority_scores[waste == np.inf] = 0\n    \n    return priority_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin using normalized waste and fit availability.\"\"\"\n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Set waste to infinity for bins that cannot fit the item\n    \n    # Normalize waste scores\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Calculate priority based on remaining capacity and normalized waste\n    priority_scores = (1 - normalized_waste) * (bins_remain_cap / np.max(bins_remain_cap + 1e-6))\n    \n    # Set priority to zero for bins where the item cannot be added\n    priority_scores[waste == np.inf] = 0\n    \n    return priority_scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin using normalized waste and fit availability.\"\"\"\n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Set waste to infinity for bins that cannot fit the item\n    \n    # Normalize waste scores\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Calculate priority based on remaining capacity and normalized waste\n    priority_scores = (1 - normalized_waste) * (bins_remain_cap / np.max(bins_remain_cap + 1e-6))\n    \n    # Set priority to zero for bins where the item cannot be added\n    priority_scores[waste == np.inf] = 0\n    \n    return priority_scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}