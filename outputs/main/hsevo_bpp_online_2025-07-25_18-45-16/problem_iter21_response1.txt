```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on normalized waste minimization and fit availability.
    It is designed to be simple, efficient, and robust.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability first
    fit_availability = (bins_remain_cap >= item).astype(float)
    
    # Calculate normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    if max_cap == min_cap:
        normalized_cap = np.ones_like(bins_remain_cap)
    else:
        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)
    
    # Calculate waste after adding the item
    waste_after_adding = (bins_remain_cap - item) / item
    waste_after_adding[bins_remain_cap < item] = np.inf  # Penalize infeasible bins
    
    # Calculate normalized waste
    normalized_waste = 1 / (waste_after_adding + 1)
    
    # Combine fit availability and normalized waste to get the final priority score
    priority_score = fit_availability * normalized_waste
    
    return priority_score
```
