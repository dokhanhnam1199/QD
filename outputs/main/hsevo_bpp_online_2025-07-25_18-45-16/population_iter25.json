[
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for adding an item to each bin.\n    Combines normalized waste minimization and fit availability.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    return priority_scores",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized waste minimization and fit availability to prioritize bins effectively.\"\"\"\n    remain_cap_after_item = bins_remain_cap - item\n    waste = np.maximum(remain_cap_after_item, 0)\n    max_waste = np.max(waste)\n    normalized_waste = waste / max_waste if max_waste > 0 else np.zeros_like(waste)\n    priority_score = (1 - normalized_waste) + (remain_cap_after_item / np.max(bins_remain_cap, initial=1))\n    priority_score[remain_cap_after_item < 0] = 0.0\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for bins focusing on fit availability and normalized waste minimization.\n\n    Args:\n        item: Size of item to be added to a bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = fit_availability * (1 - (bins_remain_cap - item) / max_cap)\n    \n    # Combine fit availability and normalized waste\n    priority_score = normalized_cap * normalized_waste\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 77.6924611088951,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by normalizing waste and ensuring fit availability, balancing both criteria effectively.\"\"\"\n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Calculate priority scores based on fit availability and normalized waste\n    priority_scores = 1 / (norm_waste + 1e-6) * (bins_remain_cap >= item)\n    \n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response5.txt_stdout.txt",
    "code_path": "problem_iter23_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 14.489429597128037,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response6.txt_stdout.txt",
    "code_path": "problem_iter23_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by normalizing remaining capacity and minimizing waste while ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Normalize waste for prioritization\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, norm_remain_cap - normalized_waste)\n    \n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response7.txt_stdout.txt",
    "code_path": "problem_iter23_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 14.489429597128037,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response8.txt_stdout.txt",
    "code_path": "problem_iter23_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response9.txt_stdout.txt",
    "code_path": "problem_iter23_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 14.489429597128037,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response0.txt_stdout.txt",
    "code_path": "problem_iter24_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to balance the fit availability and direct waste minimization.\n    Fit availability considers the remaining capacity and if the item can fit.\n    Direct waste minimization focuses on minimizing the leftover space after adding the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the item can fit in each bin\n    can_fit = (bins_remain_cap >= item).astype(int)\n\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n\n    # Normalize waste to the range [0, 1]\n    max_waste = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_waste + 1e-6)\n\n    # Define criteria weights\n    fit_weight = 2.0  # Stronger preference for bins that can fit the item\n    waste_weight = -1.0  # Penalize higher waste\n\n    # Calculate priority scores\n    priority_scores = fit_weight * can_fit + waste_weight * normalized_waste\n\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response1.txt_stdout.txt",
    "code_path": "problem_iter24_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a heuristic based on normalized remaining capacity and\n    direct fit criteria. It aims to balance filling the bins efficiently while minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate normalized remaining capacity\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap)\n\n    # Calculate waste after placing the item (only if it fits)\n    waste_after_fit = np.where(fit_availability == 1, bins_remain_cap - item, 1.0)\n\n    # Calculate normalized waste\n    normalized_waste = waste_after_fit / np.max(bins_remain_cap)\n\n    # Weighting criteria: direct fit availability is heavily weighted, normalized capacity is medium, normalized waste islightly\n    priority_score = 2.0 * fit_availability + 1.0 * normalized_capacity - 0.5 * normalized_waste\n\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to balance fit availability and direct waste minimization.\n    It incorporates normalized waste measurement and clear fit checks with weighted criteria.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the item can fit in each bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized waste if item is placed in each bin\n    new_waste = bins_remain_cap - item\n    max_waste = np.max(bins_remain_cap)\n    normalized_waste = 1.0 - (new_waste / (max_waste + 1e-6))\n    \n    # Criteria weighting: 0.7 for availability, 0.3 for waste minimization\n    priority_scores = 0.7 * can_fit + 0.3 * normalized_waste\n    \n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to balance fit availability and direct waste minimization.\n    It incorporates normalized waste measurement and clear fit checks with weighted criteria.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the item can fit in each bin\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized waste (how much space will be wasted if item is placed in bin)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-6)  # Prevent division by zero\n    \n    # Define weights for fit availability and waste minimization\n    weight_fit_availability = 0.8\n    weight_waste_minimization = 0.2\n    \n    # Calculate the priority score based on weighted criteria\n    priority_scores = (weight_fit_availability * fit_availability) + (weight_waste_minimization * (1 - normalized_waste))\n    \n    # Apply a penalty for bins that cannot fit the item\n    priority_scores[bins_remain_cap < item] = -1\n    \n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response4.txt_stdout.txt",
    "code_path": "problem_iter24_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic integrates normalized waste measurement and direct fit checks.\n    It uses weighted criteria to balance availability and minimization objectives.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check for direct fit availability\n    direct_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized waste after placing the item\n    waste_after_item = bins_remain_cap - item\n    max_capacity = np.max(bins_remain_cap)\n    normalized_waste = 1 - (waste_after_item / max_capacity)\n    \n    # Avoid negative waste (normalize properly)\n    normalized_waste = np.clip(normalized_waste, 0, 1)\n    \n    # Define weights for different criteria\n    weight_direct_fit = 0.7\n    weight_waste_minimization = 0.3\n    \n    # Calculate priority score\n    priority_score = (weight_direct_fit * direct_fit) + (weight_waste_minimization * normalized_waste)\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response0.txt_stdout.txt",
    "code_path": "problem_iter25_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    small_value: float = 0.0008907983028548912) -> np.ndarray:\n    \"\"\"\n    Returns priority score for adding an item to each bin.\n    Combines normalized waste minimization and fit availability.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + small_value), -np.inf)\n    return priority_scores",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]