[
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores for bins by minimizing normalized waste and ensuring fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap - waste\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.696848823294789,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response1.txt_stdout.txt",
    "code_path": "problem_iter20_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    max_bin_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 1.5353042666483478 else 1.5353042666483478\n    normalized_waste = space_left / max_bin_cap\n    priority = can_fit * (1 - 1.5470946865621147 * normalized_waste)\n    return priority",
    "response_id": 1,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response2.txt_stdout.txt",
    "code_path": "problem_iter20_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fit availability and normalized waste minimization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    bins_remain_cap = np.where(bins_remain_cap < item, 0, bins_remain_cap)\n    normalized_waste = (bins_remain_cap - item) / bins_remain_cap\n    normalized_waste = np.where(bins_remain_cap == 0, 0, normalized_waste)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response3.txt_stdout.txt",
    "code_path": "problem_iter20_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores for bins by minimizing normalized waste and checking fit availability.\"\"\"\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    norm_waste = waste / np.max(waste)\n    priority_scores = 1 / (norm_waste + 1e-6)\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response4.txt_stdout.txt",
    "code_path": "problem_iter20_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized waste minimization and fit availability for robust online BPP bin selection.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    fit_available = (bins_remain_cap >= item).astype(float)\n    \n    # Combine normalized waste minimization with fit availability\n    priority_score = fit_available * (1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response5.txt_stdout.txt",
    "code_path": "problem_iter20_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score by minimizing normalized waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste for prioritization\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response6.txt_stdout.txt",
    "code_path": "problem_iter20_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bin selection by combining fit availability and normalized waste minimization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    normalized_waste = waste / np.max(waste + 1e-6)\n    priority_scores = can_fit * (1.0 / (normalized_waste + 1e-6))\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response7.txt_stdout.txt",
    "code_path": "problem_iter20_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, ensuring fit availability and robust handling.\"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Set negative capacities to zero for waste calculation\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize waste scores\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        normalized_waste = np.zeros_like(waste)\n    else:\n        normalized_waste = waste / max_waste\n    \n    # Calculate priority score with balanced weight on normalized waste and remaining capacity\n    priority_score = 0.5 * (1 - normalized_waste) + 0.5 * (remain_cap_after_item / np.max(bins_remain_cap, initial=1))\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[remain_cap_after_item < 0] = 0.0\n    \n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response8.txt_stdout.txt",
    "code_path": "problem_iter20_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority score by normalizing waste and ensuring fit availability for online BPP.\"\"\"\n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to infinity for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste between 0 and 1\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Prioritize bins that can fit the item with least leftover space\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response9.txt_stdout.txt",
    "code_path": "problem_iter20_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for adding item to each bin by balancing waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item)\n    waste = np.abs(bins_remain_cap - item)\n    normalized_waste = (np.max(waste) + 1e-6) - waste\n    priority_score = can_fit * normalized_waste\n    priority_score[bins_remain_cap < item] = 0\n    return priority_score",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response0.txt_stdout.txt",
    "code_path": "problem_iter21_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on normalized waste minimization and fit availability.\n    It assesses the remaining capacity in relation to the item size and ensures\n    robust handling of edge cases.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability: if item does not fit in a bin, set its priority to 0\n    fit_available = bins_remain_cap >= item\n    \n    # Calculate normalized waste: (remaining capacity - item size) / remaining capacity\n    # For bins where the item does not fit, set the normalized waste to 0 to avoid division by zero\n    normalized_waste = np.where(fit_available, (bins_remain_cap - item) / bins_remain_cap, 0)\n    \n    # Calculate priority: prioritize bins with higher fit availability and lower normalized waste\n    # Bins with higher normalized waste (closer to being full once the item is added) get higher priority\n    priority_scores = fit_available * (1 - normalized_waste)\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response1.txt_stdout.txt",
    "code_path": "problem_iter21_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on normalized waste minimization and fit availability.\n    It is designed to be simple, efficient, and robust.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate waste after adding the item\n    waste_after_adding = (bins_remain_cap - item) / item\n    waste_after_adding[bins_remain_cap < item] = np.inf  # Penalize infeasible bins\n    \n    # Calculate normalized waste\n    normalized_waste = 1 / (waste_after_adding + 1)\n    \n    # Combine fit availability and normalized waste to get the final priority score\n    priority_score = fit_availability * normalized_waste\n    \n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response2.txt_stdout.txt",
    "code_path": "problem_iter21_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on normalized waste minimization and fit availability.\n    It maximizes the utilization of space by choosing bins that can fit the item\n    with minimal leftover space, while ensuring the bin can actually hold the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability: bin must have enough capacity to fit the item\n    fit_availability = bins_remain_cap >= item\n    \n    # Calculate waste if the item is placed in the bin\n    waste = bins_remain_cap - item\n    \n    # Avoid division by zero and ensure the waste is non-negative\n    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)\n    \n    # Prioritize bins with the lowest normalized waste\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    \n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response3.txt_stdout.txt",
    "code_path": "problem_iter21_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on normalized waste minimization and fit availability.\n    It seeks to minimize the waste in bins where the item can fit, promoting better packing efficiency.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability: 1 if item can fit, 0 otherwise\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Waste minimization: calculate the waste if the item is added\n    # Waste is defined as the remaining capacity after adding the item\n    waste = bins_remain_cap - item * fit_availability\n    \n    # Normalize waste within the range of possible wastes (i.e., 0 to max(waste))\n    # Add a small epsilon to avoid division by zero\n    max_waste = np.max(waste) + 1e-6\n    normalized_waste = waste / max_waste\n    \n    # Priority score is fit_availability times the negative of normalized waste\n    # Minimizing waste is prioritized only when fit is available\n    priority_score = fit_availability * (1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response4.txt_stdout.txt",
    "code_path": "problem_iter21_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on normalized waste minimization and fit availability.\n    It attempts to minimize the waste in bins and prioritize bins that can fit the item\n    while maintaining robustness against edge cases.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check fit availability\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate normalized waste\n    current_waste = bins_remain_cap - item\n    max_capacity = np.max(bins_remain_cap)\n    min_capacity = np.min(bins_remain_cap)\n    # Avoid division by zero by using a small epsilon\n    epsilon = 1e-6\n    normalized_waste = 1 - ((current_waste - min_capacity) / (max_capacity - min_capacity + epsilon))\n    \n    # Priority is higher if the item fits and the waste is minimized\n    priority_scores = fit_availability * normalized_waste\n\n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    threshold: float = 1.5139548703134516, \n    weight: float = 1.5562183029491476) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    max_bin_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > threshold else threshold\n    normalized_waste = space_left / max_bin_cap\n    priority = can_fit * (1 - weight * normalized_waste)\n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  }
]