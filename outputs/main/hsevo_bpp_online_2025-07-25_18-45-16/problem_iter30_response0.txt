```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing direct waste by normalizing the remaining
    capacities and ensuring that the item fits within the bin. It also incorporates
    a dynamic weighting factor to handle edge cases and fine-tune fit availability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit into any bin
    fit_availability = (bins_remain_cap >= item).astype(float)

    # Normalize the remaining capacities
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        # Edge case handling: if all bins are full, return low priority
        return np.zeros_like(bins_remain_cap)
    
    normalized_capacities = bins_remain_cap / max_cap

    # Calculate the waste if the item is added to each bin
    potential_waste = bins_remain_cap - item

    # Exponentially penalize larger waste
    waste_penalty = np.exp(-0.5 * (potential_waste / max_cap) ** 2)

    # Combine fit availability with waste penalty to get priority scores
    priority_scores = fit_availability * waste_penalty * normalized_capacities

    return priority_scores
```
