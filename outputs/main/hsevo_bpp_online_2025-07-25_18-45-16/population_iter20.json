[
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores for bins by minimizing normalized waste and ensuring fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap - waste\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.696848823294789,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response1.txt_stdout.txt",
    "code_path": "problem_iter20_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    max_bin_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 1.5353042666483478 else 1.5353042666483478\n    normalized_waste = space_left / max_bin_cap\n    priority = can_fit * (1 - 1.5470946865621147 * normalized_waste)\n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response2.txt_stdout.txt",
    "code_path": "problem_iter20_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fit availability and normalized waste minimization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    bins_remain_cap = np.where(bins_remain_cap < item, 0, bins_remain_cap)\n    normalized_waste = (bins_remain_cap - item) / bins_remain_cap\n    normalized_waste = np.where(bins_remain_cap == 0, 0, normalized_waste)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response3.txt_stdout.txt",
    "code_path": "problem_iter20_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores for bins by minimizing normalized waste and checking fit availability.\"\"\"\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    norm_waste = waste / np.max(waste)\n    priority_scores = 1 / (norm_waste + 1e-6)\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response4.txt_stdout.txt",
    "code_path": "problem_iter20_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized waste minimization and fit availability for robust online BPP bin selection.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste to prioritize bins with the least leftover space\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    fit_available = (bins_remain_cap >= item).astype(float)\n    \n    # Combine normalized waste minimization with fit availability\n    priority_score = fit_available * (1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response5.txt_stdout.txt",
    "code_path": "problem_iter20_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score by minimizing normalized waste and ensuring fit availability.\"\"\"\n    \n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to a large positive value for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste for prioritization\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Ensure bins that cannot fit the item have zero priority\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response6.txt_stdout.txt",
    "code_path": "problem_iter20_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for bin selection by combining fit availability and normalized waste minimization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    normalized_waste = waste / np.max(waste + 1e-6)\n    priority_scores = can_fit * (1.0 / (normalized_waste + 1e-6))\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response7.txt_stdout.txt",
    "code_path": "problem_iter20_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity and normalized waste, ensuring fit availability and robust handling.\"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Set negative capacities to zero for waste calculation\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize waste scores\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        normalized_waste = np.zeros_like(waste)\n    else:\n        normalized_waste = waste / max_waste\n    \n    # Calculate priority score with balanced weight on normalized waste and remaining capacity\n    priority_score = 0.5 * (1 - normalized_waste) + 0.5 * (remain_cap_after_item / np.max(bins_remain_cap, initial=1))\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[remain_cap_after_item < 0] = 0.0\n    \n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response8.txt_stdout.txt",
    "code_path": "problem_iter20_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority score by normalizing waste and ensuring fit availability for online BPP.\"\"\"\n    # Calculate waste if the item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Set waste to infinity for bins that cannot fit the item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste between 0 and 1\n    normalized_waste = (waste - np.min(waste)) / (np.max(waste) - np.min(waste) + 1e-6)\n    \n    # Prioritize bins that can fit the item with least leftover space\n    priority_score = np.where(waste == np.inf, 0, 1 - normalized_waste)\n    \n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response9.txt_stdout.txt",
    "code_path": "problem_iter20_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority score for adding item to each bin by balancing waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item)\n    waste = np.abs(bins_remain_cap - item)\n    normalized_waste = (np.max(waste) + 1e-6) - waste\n    priority_score = can_fit * normalized_waste\n    priority_score[bins_remain_cap < item] = 0\n    return priority_score",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]