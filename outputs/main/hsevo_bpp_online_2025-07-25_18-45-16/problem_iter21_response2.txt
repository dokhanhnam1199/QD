```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on normalized waste minimization and fit availability.
    It maximizes the utilization of space by choosing bins that can fit the item
    with minimal leftover space, while ensuring the bin can actually hold the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check fit availability: bin must have enough capacity to fit the item
    fit_availability = bins_remain_cap >= item
    
    # Calculate waste if the item is placed in the bin
    waste = bins_remain_cap - item
    
    # Avoid division by zero and ensure the waste is non-negative
    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)
    
    # Prioritize bins with the lowest normalized waste
    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)
    
    return priority_scores
```
