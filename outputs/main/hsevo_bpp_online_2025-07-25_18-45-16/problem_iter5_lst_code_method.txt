{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste reduction and availability balance to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Focus on minimizing leftover space\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 10th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    fit_threshold: float = 0.04627908669393754, \n    weight: float = 0.8534472775839081) -> np.ndarray:\n    \"\"\"Combines waste reduction and availability balance to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= (item + fit_threshold)\n    space_left = bins_remain_cap - item\n    priority = can_fit * weight * (1 - (space_left / bins_remain_cap))  # Focus on minimizing leftover space\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    fit_threshold: float = 0.04627908669393754, \n    weight: float = 0.8534472775839081) -> np.ndarray:\n    \"\"\"Combines waste reduction and availability balance to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= (item + fit_threshold)\n    space_left = bins_remain_cap - item\n    priority = can_fit * weight * (1 - (space_left / bins_remain_cap))  # Focus on minimizing leftover space\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and remaining capacity to minimize waste.\"\"\"\n    close_bins = np.clip(bins_remain_cap - item, 0, item)  # Prioritize bins that can fit the item well\n    balanced_fill = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)  # Prioritize bins that are not too full\n    priority_score = close_bins + balanced_fill  # Combine both strategies\n    return priority_score\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}