{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for adding an item to each bin.\n    Combines normalized waste minimization and fit availability.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    return priority_scores\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic aims to balance the fit availability and direct waste minimization.\n    Fit availability considers the remaining capacity and if the item can fit.\n    Direct waste minimization focuses on minimizing the leftover space after adding the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the item can fit in each bin\n    can_fit = (bins_remain_cap >= item).astype(int)\n\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n\n    # Normalize waste to the range [0, 1]\n    max_waste = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_waste + 1e-6)\n\n    # Define criteria weights\n    fit_weight = 2.0  # Stronger preference for bins that can fit the item\n    waste_weight = -1.0  # Penalize higher waste\n\n    # Calculate priority scores\n    priority_scores = fit_weight * can_fit + waste_weight * normalized_waste\n\n    return priority_scores\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic integrates normalized waste measurement and direct fit checks.\n    It uses weighted criteria to balance availability and minimization objectives.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check for direct fit availability\n    direct_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized waste after placing the item\n    waste_after_item = bins_remain_cap - item\n    max_capacity = np.max(bins_remain_cap)\n    normalized_waste = 1 - (waste_after_item / max_capacity)\n    \n    # Avoid negative waste (normalize properly)\n    normalized_waste = np.clip(normalized_waste, 0, 1)\n    \n    # Define weights for different criteria\n    weight_direct_fit = 0.7\n    weight_waste_minimization = 0.3\n    \n    # Calculate priority score\n    priority_score = (weight_direct_fit * direct_fit) + (weight_waste_minimization * normalized_waste)\n    \n    return priority_score\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for adding an item to each bin.\n    Combines normalized waste minimization and fit availability.\n    \"\"\"\n    fit_availability = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    normalized_waste = np.where(fit_availability, waste / bins_remain_cap, np.inf)\n    priority_scores = np.where(fit_availability, 1 / (normalized_waste + 1e-6), -np.inf)\n    return priority_scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by normalizing waste and ensuring fit availability, balancing both criteria effectively.\"\"\"\n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Calculate priority scores based on fit availability and normalized waste\n    priority_scores = 1 / (norm_waste + 1e-6) * (bins_remain_cap >= item)\n    \n    return priority_scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate priority scores by normalizing waste and ensuring fit availability, balancing both criteria effectively.\"\"\"\n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Calculate priority scores based on fit availability and normalized waste\n    priority_scores = 1 / (norm_waste + 1e-6) * (bins_remain_cap >= item)\n    \n    return priority_scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and weighted normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0  # Ensure bins that cannot fit the item have zero priority\n    weight = 1.5562183029491476\n    priority = can_fit * (1 - weight * waste)\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority by balancing remaining capacity and normalized waste, prioritizing fit availability.\"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate waste if the item is added to each bin\n    waste = norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Ensure no negative waste values and set to zero for bins that cannot fit the item\n    waste = np.clip(waste, 0, 1)\n    waste[bins_remain_cap < item] = 0  # Set priority to zero for bins that cannot fit the item\n    \n    # Priority is higher for bins with less waste and more available capacity\n    priority_scores = norm_remain_cap * (1 - waste)\n    \n    return priority_scores\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for bins focusing on fit availability and normalized waste minimization.\n\n    Args:\n        item: Size of item to be added to a bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = fit_availability * (1 - (bins_remain_cap - item) / max_cap)\n    \n    # Combine fit availability and normalized waste\n    priority_score = normalized_cap * normalized_waste\n    \n    return priority_score\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for bins focusing on fit availability and normalized waste minimization.\n\n    Args:\n        item: Size of item to be added to a bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = fit_availability * (1 - (bins_remain_cap - item) / max_cap)\n    \n    # Combine fit availability and normalized waste\n    priority_score = normalized_cap * normalized_waste\n    \n    return priority_score\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a heuristic based on normalized remaining capacity and\n    direct fit criteria. It aims to balance filling the bins efficiently while minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate normalized remaining capacity\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap)\n\n    # Calculate waste after placing the item (only if it fits)\n    waste_after_fit = np.where(fit_availability == 1, bins_remain_cap - item, 1.0)\n\n    # Calculate normalized waste\n    normalized_waste = waste_after_fit / np.max(bins_remain_cap)\n\n    # Weighting criteria: direct fit availability is heavily weighted, normalized capacity is medium, normalized waste islightly\n    priority_score = 2.0 * fit_availability + 1.0 * normalized_capacity - 0.5 * normalized_waste\n\n    return priority_score\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a heuristic based on normalized remaining capacity and\n    direct fit criteria. It aims to balance filling the bins efficiently while minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate normalized remaining capacity\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap)\n\n    # Calculate waste after placing the item (only if it fits)\n    waste_after_fit = np.where(fit_availability == 1, bins_remain_cap - item, 1.0)\n\n    # Calculate normalized waste\n    normalized_waste = waste_after_fit / np.max(bins_remain_cap)\n\n    # Weighting criteria: direct fit availability is heavily weighted, normalized capacity is medium, normalized waste islightly\n    priority_score = 2.0 * fit_availability + 1.0 * normalized_capacity - 0.5 * normalized_waste\n\n    return priority_score\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a heuristic based on normalized remaining capacity and\n    direct fit criteria. It aims to balance filling the bins efficiently while minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate normalized remaining capacity\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap)\n\n    # Calculate waste after placing the item (only if it fits)\n    waste_after_fit = np.where(fit_availability == 1, bins_remain_cap - item, 1.0)\n\n    # Calculate normalized waste\n    normalized_waste = waste_after_fit / np.max(bins_remain_cap)\n\n    # Weighting criteria: direct fit availability is heavily weighted, normalized capacity is medium, normalized waste islightly\n    priority_score = 2.0 * fit_availability + 1.0 * normalized_capacity - 0.5 * normalized_waste\n\n    return priority_score\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements a heuristic based on normalized remaining capacity and\n    direct fit criteria. It aims to balance filling the bins efficiently while minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate direct fit availability (1 if item fits, 0 otherwise)\n    fit_availability = (bins_remain_cap >= item).astype(float)\n\n    # Calculate normalized remaining capacity\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap)\n\n    # Calculate waste after placing the item (only if it fits)\n    waste_after_fit = np.where(fit_availability == 1, bins_remain_cap - item, 1.0)\n\n    # Calculate normalized waste\n    normalized_waste = waste_after_fit / np.max(bins_remain_cap)\n\n    # Weighting criteria: direct fit availability is heavily weighted, normalized capacity is medium, normalized waste islightly\n    priority_score = 2.0 * fit_availability + 1.0 * normalized_capacity - 0.5 * normalized_waste\n\n    return priority_score\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}