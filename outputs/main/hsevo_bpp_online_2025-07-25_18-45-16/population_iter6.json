[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering both waste minimization and balance of remaining capacity.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Minimize waste and balance by combining space left and relative remaining capacity\n    priority = can_fit * (1 - (space_left / bins_remain_cap) - np.std(bins_remain_cap) / bins_remain_cap)\n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.497407259672929,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering both waste minimization and remaining capacity balance.\"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Normalize by remaining capacity to balance with space availability\n    normalized_priority = priority_scores / (bins_remain_cap + 1e-6)  # Add small epsilon to avoid division by zero\n    \n    # Lower normalized waste means higher priority, so invert the scores\n    return -normalized_priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction, prioritizing bins that fit item with minimal waste.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Space efficiency after placing the item\n    space_efficiency = 1 - ((bins_remain_cap - item) / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by focusing on minimizing waste while balancing initial bin availability.\"\"\"\n    fit_threshold = 0.04627908669393754\n    weight = 0.8534472775839081\n    can_fit = bins_remain_cap >= (item + fit_threshold)\n    space_left = bins_remain_cap - item\n    priority = can_fit * weight * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    priority -= np.min(priority)  # Normalize to account for initial fullness\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score combining waste minimization and relative space availability.\"\"\"\n    # Calculate waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    # Calculate normalized remaining capacity\n    norm_cap = bins_remain_cap / np.max(bins_remain_cap)\n    # Prioritize bins with least waste, penalize full bins with -np.inf\n    priority_scores = np.where(waste >= 0, waste + norm_cap, -np.inf)\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances waste minimization and remaining capacity to efficiently pack bins.\"\"\"\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)  # Penalize bins that can't fit the item\n    capacity_balance = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)  # Prioritize less full bins\n    return -priority_scores * capacity_balance  # Combine both strategies",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin combining waste minimization and fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    return can_fit * (-priority_scores)  # Prioritize fitting bins with least waste",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing waste by prioritizing bins that \n    can accommodate the item with the least remaining capacity afterward.\n    It directly addresses underutilized bin space efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority is based on the remaining capacity after adding the item\n    # Lower remaining capacity is better, hence we use a negative sign\n    return -(bins_remain_cap - item)",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]