```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic aims to minimize waste and maximize fit availability by considering
    the reduction in remaining capacity after placing the item in each bin. It normalizes
    the scores to ensure a consistent prioritization mechanism.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    new_remain_cap = bins_remain_cap - item
    
    # Create a mask to ensure we only consider bins that can fit the item
    valid_bins_mask = (new_remain_cap >= 0)
    
    # Initialize priority scores with a very low value for invalid bins
    priority_scores = np.where(valid_bins_mask, 1, -np.inf)
    
    # For valid bins, prioritize those that have the least remaining capacity after insertion
    # This directly minimizes waste and aims to fill bins as closely as possible
    normalization_factor = np.max(new_remain_cap[new_remain_cap >= 0]) + 1e-6
    priority_scores[valid_bins_mask] = 1 - (new_remain_cap[valid_bins_mask] / normalization_factor)
    
    return priority_scores
```
