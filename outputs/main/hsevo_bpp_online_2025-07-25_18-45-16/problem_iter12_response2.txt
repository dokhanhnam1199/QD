```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic emphasizes waste minimization by prioritizing bins that have the least
    remaining capacity after adding the item, while ensuring robust normalization and clear definitions.
    The priority score is based on the remaining capacity after adding the item, normalized to ensure
    consistency and prevent bias.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item to each bin
    remain_cap_after_item = bins_remain_cap - item
    
    # Define waste as the unused capacity in the bin after adding the item
    # Bins with negative or zero remaining capacity after item addition are not considered
    waste = np.maximum(remain_cap_after_item, 0)
    
    # Normalize the waste to ensure all values are on the same scale
    # If all bins are full or the item does not fit in any bin, return an array of zeros
    max_waste = np.max(waste)
    if max_waste == 0:
        return np.zeros_like(bins_remain_cap)
    
    normalized_waste = waste / max_waste
    
    # Priority is inversely proportional to the normalized waste
    # Bins with less waste have higher priority
    priority_score = 1 - normalized_waste
    
    return priority_score
```
