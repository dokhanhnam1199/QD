```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic aims to balance the fit availability and direct waste minimization.
    Fit availability considers the remaining capacity and if the item can fit.
    Direct waste minimization focuses on minimizing the leftover space after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in each bin
    can_fit = (bins_remain_cap >= item).astype(int)

    # Calculate the waste after adding the item to each bin
    waste = bins_remain_cap - item

    # Normalize waste to the range [0, 1]
    max_waste = np.max(bins_remain_cap)
    normalized_waste = waste / (max_waste + 1e-6)

    # Define criteria weights
    fit_weight = 2.0  # Stronger preference for bins that can fit the item
    waste_weight = -1.0  # Penalize higher waste

    # Calculate priority scores
    priority_scores = fit_weight * can_fit + waste_weight * normalized_waste

    return priority_scores
```
