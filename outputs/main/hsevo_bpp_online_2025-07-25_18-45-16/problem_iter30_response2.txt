```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing direct waste by normalizing the remaining
    capacities and checking fit availability. It avoids complex inverted capacity
    approaches and unnecessary complexity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        return np.zeros_like(bins_remain_cap)  # All bins are full, no priority

    normalized_cap = bins_remain_cap / max_cap

    # Calculate direct waste if item is added
    direct_waste = np.abs(normalized_cap - (item / max_cap))

    # Assign very low priority to bins that cannot fit the item
    fit_mask = bins_remain_cap >= item
    direct_waste[~fit_mask] = np.inf  # Make non-fitting bins have infinite waste

    # Priority inverse to waste (lower waste is higher priority)
    priority_scores = 1.0 / (direct_waste + 1e-6)

    return priority_scores
```
