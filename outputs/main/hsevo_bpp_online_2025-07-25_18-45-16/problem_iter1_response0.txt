```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used considering future placements. It calculates the reduction in
    potential waste (as given by the difference between the remaining capacity and
    the item size) and penalizes bins that have less room than the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate waste reduction if item is added to each bin
    waste_reduction = bins_remain_cap - item
    
    # Items that cannot fit in the bin get a very low priority
    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)
    
    # Encourage using less full bins slightly by adding some epsilon based on current capacity
    epsilon = 0.01
    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon
    priority_score_with_encouragement = priority_score + encouragement
    
    return priority_score_with_encouragement
```
