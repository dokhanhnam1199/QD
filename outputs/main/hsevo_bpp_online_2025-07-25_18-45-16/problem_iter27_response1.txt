```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing waste while ensuring fit availability.
    It normalizes the waste and balances it with fit availability to make informed decisions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero and handle edge cases
    bins_remain_cap = np.clip(bins_remain_cap, a_min=0, a_max=None)
    
    # Calculate waste for each bin if the item is added
    waste = bins_remain_cap - item
    
    # Set negative waste to a high value to avoid adding items that exceed bin capacity
    waste[waste < 0] = np.inf
    
    # Normalize the waste to ensure balanced decision-making
    max_waste = np.max(waste)
    min_waste = np.min(waste[waste != np.inf])
    
    if max_waste == min_waste:
        # Avoid normalization when all values are the same
        normalized_waste = waste
    else:
        normalized_waste = (waste - min_waste) / (max_waste - min_waste)
    
    # Prioritize bins with lower normalized waste and fit availability
    priority_scores = 1 / (normalized_waste + 1e-6)
    
    return priority_scores
```
