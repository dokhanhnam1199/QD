```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic focuses on minimizing direct waste by normalizing the remaining
    capacities and checking fit availability. It handles edge cases by ensuring
    no division by zero and uses a dynamic weighting mechanism to balance between
    filling bins tightly and avoiding overfitting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    if max_cap == min_cap:
        # Avoid division by zero if all bins have the same remaining capacity
        normalized_cap = np.ones_like(bins_remain_cap)
    else:
        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)
    
    # Check fit availability (1 if item can fit, 0 otherwise)
    fit_availability = (bins_remain_cap - item) >= 0
    
    # Direct waste minimization score
    waste_minimization_score = 1 - (bins_remain_cap - item) / bins_remain_cap
    
    # Combine fit availability with direct waste minimization
    priority_score = fit_availability * waste_minimization_score * normalized_cap
    
    return priority_score
```
