[
  {
    "stdout_filepath": "problem_iter29_response0.txt_stdout.txt",
    "code_path": "problem_iter29_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculate priority scores by normalizing waste and considering fit availability for Online BPP.\n    \"\"\"\n    # Calculate waste and set to inf for bins that cannot fit the item\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / np.max(waste + 1e-6)\n    \n    # Fit availability: 1 if item fits, 0 otherwise\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Priority score combining fit availability and normalized waste\n    priority_scores = fit_availability / (norm_waste + 1e-6)\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response1.txt_stdout.txt",
    "code_path": "problem_iter29_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins combining fit availability, normalized capacity, and balanced waste minimization.\n    \"\"\"\n    # Check fit availability first\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    if max_cap == min_cap:\n        normalized_cap = np.ones_like(bins_remain_cap)\n    else:\n        normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n    \n    # Calculate normalized waste\n    normalized_waste = (bins_remain_cap - item) / max_cap\n    normalized_waste[~fit_availability.astype(bool)] = 0  # Ensure bins that cannot fit have zero waste\n    \n    # Combine fit availability with normalized capacity and balanced waste\n    priority_score = fit_availability * (normalized_cap - 0.5 * normalized_waste)\n    \n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response2.txt_stdout.txt",
    "code_path": "problem_iter29_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    max_cap = np.max(bins_remain_cap)\n    epsilon = 1e-6  # Avoid division by zero\n    waste = (bins_remain_cap - item) / (max_cap + epsilon)\n    waste[~can_fit] = 0\n    priority = can_fit * (1 - waste)\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response3.txt_stdout.txt",
    "code_path": "problem_iter29_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritize bins by combining fit availability and normalized waste minimization.\n    \"\"\"\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    waste_after_item = np.clip(bins_remain_cap - item, 0, None)\n    normalized_waste = 1 - (waste_after_item / np.max(bins_remain_cap, initial=1))\n    priority_score = fit_availability * (0.7 + 0.3 * normalized_waste)\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response4.txt_stdout.txt",
    "code_path": "problem_iter29_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score combining normalized waste minimization and fit availability.\n    \"\"\"\n    # Ensure no division by zero and handle edge cases\n    bins_remain_cap = np.clip(bins_remain_cap, a_min=0, a_max=None)\n    \n    # Calculate waste for each bin if the item is added\n    waste = bins_remain_cap - item\n    \n    # Set negative waste to a high value to avoid adding items that exceed bin capacity\n    waste[waste < 0] = np.inf\n    \n    # Normalize the waste to ensure balanced decision-making\n    max_waste = np.max(waste)\n    min_waste = np.min(waste[waste != np.inf])\n    \n    if max_waste == min_waste:\n        # Avoid normalization when all values are the same\n        normalized_waste = waste\n    else:\n        normalized_waste = (waste - min_waste) / (max_waste - min_waste)\n    \n    # Combine normalized waste with fit availability to form priority scores\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    priority_scores = fit_availability / (normalized_waste + 1e-6)\n    \n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response5.txt_stdout.txt",
    "code_path": "problem_iter29_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculate priority scores by normalizing waste and balancing fit availability for Online BPP.\n    \"\"\"\n    # Calculate waste and set non-fitting bins' waste to infinity\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    \n    # Normalize waste\n    norm_waste = waste / (np.max(waste) + 1e-6)\n    \n    # Fit availability: 1 if item fits, 0 otherwise\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    \n    # Priority score combines fit availability and normalized waste\n    priority_scores = fit_availability / (norm_waste + 1e-6)\n    \n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response6.txt_stdout.txt",
    "code_path": "problem_iter29_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    max_cap = np.max(bins_remain_cap)\n    epsilon = 1e-6  # Avoid division by zero\n    waste = (bins_remain_cap - item) / (max_cap + epsilon)\n    waste[~can_fit] = 0\n    priority = can_fit * (1 - waste)\n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response7.txt_stdout.txt",
    "code_path": "problem_iter29_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score combining normalized waste minimization and fit availability.\n    \"\"\"\n    fit_availability = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    max_waste = np.max(waste) if np.max(waste) > 0 else 1\n    normalized_waste = -waste / max_waste\n    priority_scores = fit_availability * (normalized_waste + 1)  # Balance fit availability with waste minimization\n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response8.txt_stdout.txt",
    "code_path": "problem_iter29_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on fit availability and normalized waste minimization.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    normalized_waste = np.where(can_fit, (bins_remain_cap - item) / np.max(bins_remain_cap + 1e-6), 0)\n    priority = can_fit * (1 - 1.5 * normalized_waste)\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response9.txt_stdout.txt",
    "code_path": "problem_iter29_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using fit availability and normalized waste minimization with dynamic weighting.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    waste = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    waste[~can_fit] = 0\n    priority = can_fit * (1 - 1.5 * waste)\n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]