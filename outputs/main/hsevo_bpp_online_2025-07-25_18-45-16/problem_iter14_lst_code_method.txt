{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing fit availability and normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = np.where(can_fit, bins_remain_cap - item, np.inf)\n    normalized_waste = waste / np.where(bins_remain_cap > 0, bins_remain_cap, np.inf)\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on minimizing waste and balancing capacity using normalized scores.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    safe_max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n    space_left = bins_remain_cap - item\n    # Minimize waste and balance by normalizing space left\n    priority = can_fit * (-space_left / safe_max_cap)\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by normalizing waste and ensuring fit availability.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-9)  # Avoid division by zero\n    priority_scores = can_fit * -normalized_waste  # Maximize negative normalized waste for top priority\n    return priority_scores\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    waste_threshold: float = 0.7982471562575986, \n    normalization_weight: float = 0.8870359316469899) -> np.ndarray:\n    \"\"\"Combines waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = np.where(can_fit, bins_remain_cap - item + waste_threshold, np.inf)\n    normalized_waste = waste / (bins_remain_cap + normalization_weight)\n    priority_score = can_fit * (1 - normalized_waste)\n    return priority_score\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by ensuring fit availability and minimizing normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by ensuring fit availability and minimizing normalized waste.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    normalized_waste = np.where(bins_remain_cap > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority_scores = can_fit * (1 - normalized_waste)\n    return priority_scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes waste minimization by prioritizing bins that have the least\n    remaining capacity after adding the item, while ensuring robust normalization and clear definitions.\n    The priority score is based on the remaining capacity after adding the item, normalized to ensure\n    consistency and prevent bias.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item to each bin\n    remain_cap_after_item = bins_remain_cap - item\n    \n    # Define waste as the unused capacity in the bin after adding the item\n    # Bins with negative or zero remaining capacity after item addition are not considered\n    waste = np.maximum(remain_cap_after_item, 0)\n    \n    # Normalize the waste to ensure all values are on the same scale\n    # If all bins are full or the item does not fit in any bin, return an array of zeros\n    max_waste = np.max(waste)\n    if max_waste == 0:\n        return np.zeros_like(bins_remain_cap)\n    \n    normalized_waste = waste / max_waste\n    \n    # Priority is inversely proportional to the normalized waste\n    # Bins with less waste have higher priority\n    priority_score = 1 - normalized_waste\n    \n    return priority_score\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on normalized waste, lower waste means higher priority\n    priority_score = 1.0 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / max_bin_cap\n    \n    # Prioritize bins that minimize waste when the item is added\n    priority_scores = 1 - normalized_waste  # Lower waste means higher priority\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / max_bin_cap\n    \n    # Prioritize bins that minimize waste when the item is added\n    priority_scores = 1 - normalized_waste  # Lower waste means higher priority\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on normalized waste, lower waste means higher priority\n    priority_score = 1.0 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on normalized waste, lower waste means higher priority\n    priority_score = 1.0 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on normalized waste, lower waste means higher priority\n    priority_score = 1.0 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / max_bin_cap\n    \n    # Prioritize bins that minimize waste when the item is added\n    priority_scores = 1 - normalized_waste  # Lower waste means higher priority\n    \n    # Set priority to zero for bins where the item cannot be added due to insufficient capacity\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Calculate waste as the difference between current capacity and capacity after adding the item\n    waste = bins_remain_cap - potential_remain_cap\n    \n    # Normalize waste scores to ensure consistency across different bin capacities\n    max_bin_cap = np.max(bins_remain_cap)\n    normalized_waste = waste / (max_bin_cap + 1e-6)\n    \n    # Calculate priority score based on normalized waste, lower waste means higher priority\n    priority_score = 1.0 - normalized_waste\n    \n    # Ensure items are not placed into bins they cannot fit into\n    priority_score[potential_remain_cap < 0] = 0.0\n    \n    return priority_score\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-6)\n    priority_scores = can_fit * normalized_waste\n    return priority_scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-6)\n    priority_scores = can_fit * normalized_waste\n    return priority_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing waste minimization and fit availability with robust normalization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    waste = bins_remain_cap - item\n    normalized_waste = waste / (bins_remain_cap + 1e-6)\n    priority_scores = can_fit * normalized_waste\n    return priority_scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic emphasizes normalization, waste minimization, and simplicity.\n    It calculates priority based on the normalized remaining capacity after adding the item,\n    aiming to minimize waste and fill bins efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Define waste as the difference between the bin size and the potential remaining capacity\n    # Assuming bin size is the maximum capacity initially available\n    bin_size = np.max(bins_remain_cap + item)\n    waste = bin_size - potential_remain_cap\n    \n    # Normalize waste to ensure all values are between 0 and 1\n    normalized_waste = waste / bin_size\n    \n    # Calculate priority score as the inverse of normalized waste\n    # Lower waste leads to higher priority\n    priority_scores = 1.0 - normalized_waste\n    \n    # Ensure bins with negative remaining capacity (where item can't fit) get the lowest priority\n    priority_scores[potential_remain_cap < 0] = 0\n    \n    return priority_scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}