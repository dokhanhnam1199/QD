```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score combining normalized waste minimization and fit availability.
    """
    # Ensure no division by zero and handle edge cases
    bins_remain_cap = np.clip(bins_remain_cap, a_min=0, a_max=None)
    
    # Calculate waste for each bin if the item is added
    waste = bins_remain_cap - item
    
    # Set negative waste to a high value to avoid adding items that exceed bin capacity
    waste[waste < 0] = np.inf
    
    # Normalize the waste to ensure balanced decision-making
    max_waste = np.max(waste)
    min_waste = np.min(waste[waste != np.inf])
    
    if max_waste == min_waste:
        # Avoid normalization when all values are the same
        normalized_waste = waste
    else:
        normalized_waste = (waste - min_waste) / (max_waste - min_waste)
    
    # Combine normalized waste with fit availability to form priority scores
    fit_availability = (bins_remain_cap >= item).astype(float)
    priority_scores = fit_availability / (normalized_waste + 1e-6)
    
    return priority_scores
```
