```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by considering both waste minimization and remaining capacity balance."""
    # Calculate the waste after adding the item to each bin
    waste = bins_remain_cap - item
    
    # Prioritize bins with least waste, where waste is non-negative
    # Use a large number for waste that is negative (i.e., item doesn't fit)
    priority_scores = np.where(waste >= 0, waste, 1e6)
    
    # Normalize by remaining capacity to balance with space availability
    normalized_priority = priority_scores / (bins_remain_cap + 1e-6)  # Add small epsilon to avoid division by zero
    
    # Lower normalized waste means higher priority, so invert the scores
    return -normalized_priority
```
