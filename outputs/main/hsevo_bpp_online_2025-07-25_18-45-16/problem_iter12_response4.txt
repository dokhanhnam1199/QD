```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This design implements a heuristic based on normalized remaining capacity
    and waste minimization. It prioritizes bins where the item fits well,
    minimizing future waste and ensuring a balanced use of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure item fits in the bin
    feasible_bins = bins_remain_cap >= item
    
    # Calculate normalized remaining capacity
    max_capacity = np.max(bins_remain_cap)
    min_capacity = np.min(bins_remain_cap)
    normalized_capacity = (bins_remain_cap - min_capacity) / (max_capacity - min_capacity + 1e-6)
    
    # Calculate potential waste if item is placed in the bin
    waste_if_placed = bins_remain_cap - item
    
    # Normalize waste
    max_waste = np.max(waste_if_placed)
    min_waste = np.min(waste_if_placed)
    normalized_waste = (waste_if_placed - min_waste) / (max_waste - min_waste + 1e-6)
    
    # Priority is the combination of high normalized capacity and low normalized waste
    priority_score = feasible_bins * (normalized_capacity - normalized_waste)
    
    # Return priority score, ensuring non-feasible bins have zero priority
    return priority_score
```
