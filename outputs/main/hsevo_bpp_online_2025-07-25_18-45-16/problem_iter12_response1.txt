```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic emphasizes normalization, waste minimization, and simplicity.
    It calculates priority based on the normalized remaining capacity after adding the item,
    aiming to minimize waste and fill bins efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item
    potential_remain_cap = bins_remain_cap - item
    
    # Define waste as the difference between the bin size and the potential remaining capacity
    # Assuming bin size is the maximum capacity initially available
    bin_size = np.max(bins_remain_cap + item)
    waste = bin_size - potential_remain_cap
    
    # Normalize waste to ensure all values are between 0 and 1
    normalized_waste = waste / bin_size
    
    # Calculate priority score as the inverse of normalized waste
    # Lower waste leads to higher priority
    priority_scores = 1.0 - normalized_waste
    
    # Ensure bins with negative remaining capacity (where item can't fit) get the lowest priority
    priority_scores[potential_remain_cap < 0] = 0
    
    return priority_scores
```
