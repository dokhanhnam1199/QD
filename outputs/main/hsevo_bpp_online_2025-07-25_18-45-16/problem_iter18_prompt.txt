{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Normalization, Waste Minimization, Fit Availability, Robust Logic\n- **Advice**: \n  - Focus on designing heuristics that directly minimize waste and maximize fit availability.\n  - Use normalization to create a clear and consistent scoring system for fit and waste.\n  - Simplify logic to ensure heuristics are robust and avoid unnecessary complexity.\n- **Avoid**: \n  - Complex sinusoidal adjustments and inverted capacity approaches.\n  - Unnecessary logic or processes that do not contribute to efficiency or effectiveness.\n- **Explanation**: \n  - Simplifying heuristics and focusing on clear, direct strategies ensures they are more effective and easier to implement. Normalization provides a consistent framework, preventing issues like division by zero and ensuring robust prioritization. By avoiding complex adjustments and unnecessary additions, you maintain a focus on the primary objectives, leading to better optimization outcomes.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}