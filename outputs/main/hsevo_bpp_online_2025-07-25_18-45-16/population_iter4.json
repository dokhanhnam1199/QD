[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste reduction and availability balance to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Focus on minimizing leftover space\n    return priority",
    "response_id": 3,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and space reduction to prioritize bins effectively.\"\"\"\n    # Ensure the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    # Proximity to item size\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    # Reduce penalty for leftover space\n    space_left = bins_remain_cap - item\n    space_efficiency = 1 - (space_left / bins_remain_cap)\n    # Combine priorities\n    priority_score = can_fit * (close_bins + space_efficiency)\n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and remaining capacity to minimize waste.\"\"\"\n    close_bins = np.clip(bins_remain_cap - item, 0, item)  # Prioritize bins that can fit the item well\n    balanced_fill = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)  # Prioritize bins that are not too full\n    priority_score = close_bins + balanced_fill  # Combine both strategies\n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste reduction and availability balance to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Focus on minimizing leftover space\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines proximity to item size and relative space left for prioritizing bins.\"\"\"\n    # Check if the item can fit in the bins\n    ifbinsfit = bins_remain_cap >= item\n    # Priority for bins that fit the item, considering remaining space and initial capacity\n    priority = np.where(ifbinsfit, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    # Normalize priority to account for initial fullness of bins\n    priority -= np.min(priority)\n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response1.txt_stdout.txt",
    "code_path": "problem_iter3_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response3.txt_stdout.txt",
    "code_path": "problem_iter3_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response4.txt_stdout.txt",
    "code_path": "problem_iter3_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic focuses on minimizing the waste after placing the item in a bin.\n    It calculates the waste as the remaining capacity after placing the item and \n    prioritizes bins that result in the least waste. This approach helps in filling \n    bins more efficiently and avoids overly compacting bins prematurely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Prioritize bins with least waste, where waste is non-negative\n    # Use a large number for waste that is negative (i.e., item doesn't fit)\n    priority_scores = np.where(waste >= 0, waste, 1e6)\n    \n    # Lower waste means higher priority, so invert the scores\n    return -priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    fit_threshold: float = 0.04627908669393754, \n    weight: float = 0.8534472775839081) -> np.ndarray:\n    \"\"\"Combines waste reduction and availability balance to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= (item + fit_threshold)\n    space_left = bins_remain_cap - item\n    priority = can_fit * weight * (1 - (space_left / bins_remain_cap))  # Focus on minimizing leftover space\n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 5.195452732349436,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]