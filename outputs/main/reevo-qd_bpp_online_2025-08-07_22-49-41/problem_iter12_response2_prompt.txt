{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of remaining capacities of currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores, higher values indicate higher preference.\n        Feasible bins have priority >= 0; infeasible bins receive -np.inf.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    slack = bins_remain_cap - item\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)\n\n    feasible = slack >= 0\n    if not np.any(feasible):\n        return priorities\n\n    # Exact fit bins: slack effectively zero\n    exact_mask = feasible & np.isclose(slack, 0.0, atol=1e-12)\n    priorities[exact_mask] = np.inf\n\n    # Non-exact feasible bins: inverse slack to favor tighter fits\n    non_exact_mask = feasible & ~exact_mask\n    if np.any(non_exact_mask):\n        eps = 1e-12\n        priorities[non_exact_mask] = 1.0 / (slack[non_exact_mask] + eps)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e6,\n    tolerance: float = 1e-12,\n    random_state: int | np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    This implementation builds on the best\u2011fit idea by:\n\n    * rewarding **exact fits** with a huge constant `exact_bonus`;\n    * scoring feasible, non\u2011exact bins by a logistic transform of the *tightness*\n      of the fit, where tightness is 1\u2011slack/max(remaining_capacity);\n    * using the *median* tightness of the current feasible set as the logistic\n      midpoint, making the scoring adaptive to the current state of the bins;\n    * applying a tiny deterministic jitter based on bin index to guarantee\n      deterministic tie\u2011breaking;\n    * optionally performing a decaying \u03b5\u2011greedy exploration step, where \u03b5\n      decays as ``\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)``;\n    * ensuring infeasible bins receive ``-np.inf`` so they can never be\n      selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5 (\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)). Default ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default ``10.0``.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee selection. Default ``1e6``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons. Default ``1e-12``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration). Default ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins have ``-np.inf``.\n    \"\"\"\n    # Ensure a float64 numpy array\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask \u2013 bin must have enough free space.\n    feasible = caps >= (item - tolerance)\n\n    # All bins start with a low priority\n    priorities = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    if not feasible.any():\n        return priorities  # nothing can accommodate the item\n\n    # Slack after placing the item\n    slack = caps - item\n\n    # Detect exact\u2011fit bins\n    exact_fit = np.abs(slack) <= tolerance\n    priorities[exact_fit] = exact_bonus\n\n    # Non\u2011exact, feasible bins\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Normalise slack by the largest remaining capacity among feasible bins\n        max_cap = caps[feasible].max()\n        max_cap = max(max_cap, 1e-12)  # avoid division by zero\n        norm_slack = slack[non_exact] / max_cap  # \u2208 [0, 1]\n        fit_score = 1.0 - norm_slack  # tighter fit \u2192 larger score\n\n        # Adaptive logistic: median of current fit scores defines the midpoint\n        median_fit = np.median(fit_score)\n        logistic_arg = alpha * (fit_score - median_fit)\n        # Clip to avoid overflow in exp\n        logistic_arg = np.clip(logistic_arg, -50, 50)\n        logistic_score = 1.0 / (1.0 + np.exp(-logistic_arg))\n\n        # Deterministic tiny jitter (based on bin index) to break ties\n        idx_non_exact = np.where(non_exact)[0]\n        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))\n\n        priorities[non_exact] = logistic_score + jitter\n\n    # \u03b5\u2011greedy exploration with decaying \u03b5\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # RNG\n    rng = random_state if isinstance(random_state, np.random.Generator) else np.random.default_rng(random_state)\n\n    if rng.random() < epsilon:\n        # Random scores for non\u2011exact feasible bins\n        rand_vals = rng.random(non_exact.sum())\n        priorities[non_exact] = rand_vals\n        # Preserve exact\u2011fit bonus\n        priorities[exact_fit] = exact_bonus\n\n    return priorities\n\n[Reflection]\nAdaptive logistic scoring with median midpoint, exact\u2011fit bonus, decaying \u03b5\u2011greedy, deterministic jitter for ties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}