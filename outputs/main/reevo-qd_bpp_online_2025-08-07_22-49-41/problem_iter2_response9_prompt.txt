{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function that uses an \u03b5\u2011greedy strategy for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        The size of the item that is about to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    priorities : np.ndarray\n        Array of the same shape as `bins_remain_cap`.  The bin with the\n        highest value will be selected by the caller.\n    \"\"\"\n    # Encourage explorations with a small fixed \u03b5.\n    epsilon = 0.15   # ~15% chance to explore a random bin\n\n    # Ensure we have a float array for consistent behaviour\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Start with very low priority for all bins; infeasible bins stay low\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Find indices of bins that can accommodate the item\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return priorities  # No bin can take the item; all are -inf\n\n    if np.random.rand() < epsilon:\n        # Exploration: assign random priorities to every feasible bin\n        # (uniform in [0, 1)) so the selection is effectively random\n        random_scores = np.random.rand(np.count_nonzero(fit_mask))\n        priorities[fit_mask] = random_scores\n    else:\n        # Greedy: best\u2011fit \u2013 choose the bin that leaves the smallest\n        # remaining capacity after placing the item\n        slack = bins_remain_cap[fit_mask] - item   # remaining capacity left after fit\n        # Smaller slack => higher priority (closer to being full)\n        # We use -slack to turn minimization of slack into maximization\n        priorities[fit_mask] = -slack\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority with Inverse Distance (Proximity Fit) strategy.\n\n    Bins that will have the smallest remaining capacity *after* the item is placed\n    receive the highest priority.  Inverse distance (1/(1+slack)) is used to\n    accentuate bins whose slack is close to zero.  Bins that cannot accommodate\n    the item are given a negative priority of -inf, ensuring they are never\n    selected.\n\n    Args:\n        item: Size of the item to be added.\n        bins_remain_cap: 1\u2011D array of remaining capacities of existing bins.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap`, containing\n        the priority score for each bin.\n    \"\"\"\n    # Slack: remaining capacity after adding the item\n    slack = bins_remain_cap - item\n    # Boolean mask of bins that can accommodate the item\n    mask = slack >= 0\n\n    # If no bin can fit, return -inf for all bins\n    if not np.any(mask):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Priority: larger when slack is smaller\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Avoid division by zero by adding 1\n    priorities[mask] = 1.0 / (1.0 + slack[mask])\n\n    # For bins that cannot accommodate the item, set a large negative value\n    priorities[~mask] = -np.inf\n    return priorities\n\n[Reflection]\nBlend best\u2011fit with exploration; normalise inverse slack; penalise infeasible bins; add smoothing; adapt \u03b5 over time.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}