```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing based on remaining slack.

    The priority is monotonic decreasing with the slack (remaining capacity after
    placing the item). Bins that would be more tightly packed (i.e., smaller
    slack) receive higher scores. Infeasible bins receive ``-inf`` to guarantee
    they are never selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of existing bins.

    Returns:
        A NumPy array of the same shape as ``bins_remain_cap`` containing priority
        scores for each bin.
    """
    # Ensure a NumPy array of floats
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Slack after placing the item
    slack = caps - item

    # Tolerance for floating‑point round‑off
    tolerance = 1e-12

    # Feasible bins: slack >= -tolerance (treat tiny negatives as zero)
    feasible = slack >= -tolerance

    # Initialise all priorities to -inf (infeasible)
    priorities = np.full_like(caps, -np.inf, dtype=float)

    if not np.any(feasible):
        # No bin can accommodate the item
        return priorities

    # Clip slack for feasible bins to avoid negative values due to tolerance
    slack_feasible = np.maximum(slack[feasible], 0.0)

    # Monotonic slack‑based priority: larger (less negative) for smaller slack.
    # Using the negative slack yields a higher score for tighter fits.
    priorities[feasible] = -slack_feasible

    return priorities
```
