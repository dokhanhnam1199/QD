{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    tolerance: float = 1e-12,\n    alpha: float = 12.0,\n    mid_point: float = 0.5,\n    epsilon: float = 0.1,\n    exact_bonus: float = 1e6,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    For each currently open bin this function returns a scalar score.\n    The bin with the highest score should be selected for the incoming *item*.\n    Scores are computed as follows:\n\n    1. **Feasibility** \u2013 only bins with enough remaining capacity are considered.\n    2. **Exact\u2011fit bonus** \u2013 bins where the item exactly matches the remaining\n       capacity receive a large constant ``exact_bonus``.\n    3. **Fit\u2011tightness** \u2013 for the remaining feasible bins a logistic\n       transformation of the normalized slack (how empty the bin would be)\n       is used; tighter fits obtain higher scores.\n    4. **Exploration** \u2013 with probability ``epsilon`` the scores of feasible\n       non\u2011exact bins are replaced by random values (\u03b5\u2011greedy exploration).\n    5. **Tie\u2011breaking jitter** \u2013 a tiny random jitter is added to break ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like\n        Remaining capacities of all open bins.\n    tolerance : float, default 1e-12\n        Numerical tolerance for feasibility and exact\u2011fit checks.\n    alpha : float, default 12.0\n        Steepness of the logistic curve; larger values make the score more\n        sensitive to the fit quality.\n    mid_point : float, default 0.5\n        Mid\u2011point of the logistic curve; a fit score equal to this value yields\n        a logistic output of 0.5.\n    epsilon : float, default 0.1\n        Exploration probability (\u03b5\u2011greedy). When ``rng.random() < epsilon`` the\n        scores of feasible non\u2011exact bins are replaced by uniform random numbers.\n    exact_bonus : float, default 1e6\n        Large constant added to exact\u2011fit bins to guarantee they dominate.\n    random_state : int or np.random.Generator, optional\n        Seed or random generator for reproducibility.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 0) Normalise input and initialise RNG\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    # ------------------------------------------------------------------\n    # 1) Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities to -inf (infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # Early exit if nothing fits\n    if not feasible.any():\n        return priority\n\n    # ------------------------------------------------------------------\n    # 2) Slack after placing the item (only meaningful for feasible bins)\n    # ------------------------------------------------------------------\n    slack = caps - item  # may be negative for infeasible bins; we ignore those later\n\n    # ------------------------------------------------------------------\n    # 3) Exact\u2011fit detection\n    # ------------------------------------------------------------------\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # ------------------------------------------------------------------\n    # 4) Logistic scoring for feasible, non\u2011exact bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Normalise slack by the bin's own capacity to obtain a value in [0, 1]\n        # (0 = perfect fit, 1 = completely empty bin)\n        cap_non_exact = caps[non_exact]\n        # Protect against division by zero (should not happen for feasible bins)\n        cap_non_exact = np.maximum(cap_non_exact, tolerance)\n\n        slack_non_exact = slack[non_exact]\n        norm_slack = slack_non_exact / cap_non_exact  # \u2208 [0, 1]\n\n        # Fit quality: higher when the slack is small\n        fit_score = 1.0 - norm_slack  # \u2208 [0, 1]; 1 = perfect fit\n\n        # Logistic transformation\n        # sigmoid(z) = 1 / (1 + exp(-z)), where z = alpha * (fit_score - mid_point)\n        sigmoid_arg = alpha * (fit_score - mid_point)\n        # Clip to avoid overflow in exp\n        sigmoid_arg = np.clip(sigmoid_arg, -700, 700)\n        logistic_score = 1.0 / (1.0 + np.exp(-sigmoid_arg))\n\n        # Tiny random jitter for deterministic tie\u2011breaking\n        jitter = rng.uniform(0.0, 1e-9, size=logistic_score.shape)\n\n        priority[non_exact] = logistic_score + jitter\n\n    # ------------------------------------------------------------------\n    # 5) \u03b5\u2011greedy exploration (replace scores of feasible non\u2011exact bins)\n    # ------------------------------------------------------------------\n    if rng.random() < epsilon and non_exact.any():\n        # Draw uniform random scores in [0, 1) for each feasible non\u2011exact bin\n        rand_scores = rng.random(non_exact.sum())\n        priority[non_exact] = rand_scores\n        # Preserve the exact\u2011fit bonus (ensures exact fits still dominate)\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Reflection]\nNormalize slack; logistic scoring; \u03b5\u2011greedy exploration; tiny jitter; avoid hard thresholds; exact bonus dominates; reproducible RNG.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}