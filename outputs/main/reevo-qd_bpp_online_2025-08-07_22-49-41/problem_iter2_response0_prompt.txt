{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function that uses an \u03b5\u2011greedy strategy for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        The size of the item that is about to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    priorities : np.ndarray\n        Array of the same shape as `bins_remain_cap`.  The bin with the\n        highest value will be selected by the caller.\n    \"\"\"\n    # Encourage explorations with a small fixed \u03b5.\n    epsilon = 0.15   # ~15% chance to explore a random bin\n\n    # Ensure we have a float array for consistent behaviour\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Start with very low priority for all bins; infeasible bins stay low\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Find indices of bins that can accommodate the item\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return priorities  # No bin can take the item; all are -inf\n\n    if np.random.rand() < epsilon:\n        # Exploration: assign random priorities to every feasible bin\n        # (uniform in [0, 1)) so the selection is effectively random\n        random_scores = np.random.rand(np.count_nonzero(fit_mask))\n        priorities[fit_mask] = random_scores\n    else:\n        # Greedy: best\u2011fit \u2013 choose the bin that leaves the smallest\n        # remaining capacity after placing the item\n        slack = bins_remain_cap[fit_mask] - item   # remaining capacity left after fit\n        # Smaller slack => higher priority (closer to being full)\n        # We use -slack to turn minimization of slack into maximization\n        priorities[fit_mask] = -slack\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Return a priority score for each bin using an \u03b5\u2011greedy strategy.\n    The algorithm mixes a greedy best\u2011fit rule with random exploration.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to pack.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the existing bins.\n\n    Returns\n    -------\n    np.ndarray\n        An array of the same shape as `bins_remain_cap` containing the\n        priority of each bin.  The bin with the highest value will be chosen.\n    \"\"\"\n    n_bins = bins_remain_cap.size\n\n    # Base priority vector: assign -\u221e to all bins initially.\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        # No bins available \u2013 the calling procedure should handle this\n        # by opening a new bin.  Returning an empty array keeps the API\n        # consistent with the input shape.\n        return priorities\n\n    # Determine which bins can accommodate the item\n    can_fit = bins_remain_cap >= item\n\n    # If no bin can fit the item, no viable actions.  Priorities stay -\u221e.\n    if not can_fit.any():\n        return priorities\n\n    # ----------------- Greedy component: Best\u2011fit heuristic -------------\n    # For feasible bins compute a score proportional to how full the bin\n    # would become after placing the item (smallest leftover \u2192 highest priority).\n    leftover = bins_remain_cap - item            # Remaining capacity after insertion\n    greedy_scores = -leftover                    # We invert so that smaller leftover => higher value\n    greedy_scores[~can_fit] = -np.inf            # Exclude infeasible bins\n\n    # ----------------- Random component: Exploration --------------------\n    # Probability of exploring a random feasible bin\n    # Decaying epsilon: encourages exploration early and exploitation later.\n    epsilon = max(0.01, min(0.3, 0.2 / np.sqrt(n_bins)))\n\n    if np.random.rand() < epsilon:\n        # Exploration: pick a random feasible bin and give it a very high priority.\n        random_idx = np.random.choice(np.where(can_fit)[0])\n        # Assign a large positive value that guarantees selection.\n        priorities = np.full(n_bins, -np.inf, dtype=float)\n        priorities[random_idx] = 1.0\n    else:\n        # Exploitation: use the best\u2011fit scores\n        priorities = greedy_scores\n\n    return priorities\n\n[Reflection]\nUse decaying \u03b5, weight bins by negative slack, pick one random bin with high priority, prune infeasible bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}