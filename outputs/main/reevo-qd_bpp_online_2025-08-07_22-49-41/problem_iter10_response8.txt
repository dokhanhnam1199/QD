```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    step: int = 0,
    epsilon0: float = 0.20,
    decay_rate: float = 0.01,
    alpha: float = 10.0,
    exact_bonus: float = 1e6,
    tolerance: float = 1e-12,
    random_state: int | np.random.Generator | None = None,
) -> np.ndarray:
    """
    Priority function for the online Bin Packing Problem (BPP).

    This implementation builds on the best‑fit idea by:

    * rewarding **exact fits** with a huge constant `exact_bonus`;
    * scoring feasible, non‑exact bins by a logistic transform of the *tightness*
      of the fit, where tightness is 1‑slack/max(remaining_capacity);
    * using the *median* tightness of the current feasible set as the logistic
      midpoint, making the scoring adaptive to the current state of the bins;
    * applying a tiny deterministic jitter based on bin index to guarantee
      deterministic tie‑breaking;
    * optionally performing a decaying ε‑greedy exploration step, where ε
      decays as ``ε = ε₀ / (1 + decay_rate * step)``;
    * ensuring infeasible bins receive ``-np.inf`` so they can never be
      selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of the currently open bins.
    step : int, optional
        Number of items processed so far (used for ε decay). Default ``0``.
    epsilon0 : float, optional
        Initial exploration probability. Default ``0.20``.
    decay_rate : float, optional
        Decay factor for ε (ε = ε₀ / (1 + decay_rate * step)). Default ``0.01``.
    alpha : float, optional
        Steepness of the logistic curve. Default ``10.0``.
    exact_bonus : float, optional
        Bonus added to exact‑fit bins to guarantee selection. Default ``1e6``.
    tolerance : float, optional
        Numerical tolerance for floating‑point comparisons. Default ``1e-12``.
    random_state : int | np.random.Generator | None, optional
        Seed or generator for random numbers (used for exploration). Default ``None``.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; infeasible bins have ``-np.inf``.
    """
    # Ensure a float64 numpy array
    caps = np.asarray(bins_remain_cap, dtype=np.float64)

    # Feasibility mask – bin must have enough free space.
    feasible = caps >= (item - tolerance)

    # All bins start with a low priority
    priorities = np.full_like(caps, -np.inf, dtype=np.float64)

    if not feasible.any():
        return priorities  # nothing can accommodate the item

    # Slack after placing the item
    slack = caps - item

    # Detect exact‑fit bins
    exact_fit = np.abs(slack) <= tolerance
    priorities[exact_fit] = exact_bonus

    # Non‑exact, feasible bins
    non_exact = feasible & ~exact_fit
    if non_exact.any():
        # Normalise slack by the largest remaining capacity among feasible bins
        max_cap = caps[feasible].max()
        max_cap = max(max_cap, 1e-12)  # avoid division by zero
        norm_slack = slack[non_exact] / max_cap  # ∈ [0, 1]
        fit_score = 1.0 - norm_slack  # tighter fit → larger score

        # Adaptive logistic: median of current fit scores defines the midpoint
        median_fit = np.median(fit_score)
        logistic_arg = alpha * (fit_score - median_fit)
        # Clip to avoid overflow in exp
        logistic_arg = np.clip(logistic_arg, -50, 50)
        logistic_score = 1.0 / (1.0 + np.exp(-logistic_arg))

        # Deterministic tiny jitter (based on bin index) to break ties
        idx_non_exact = np.where(non_exact)[0]
        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))

        priorities[non_exact] = logistic_score + jitter

    # ε‑greedy exploration with decaying ε
    epsilon = epsilon0 / (1.0 + decay_rate * step)

    # RNG
    rng = random_state if isinstance(random_state, np.random.Generator) else np.random.default_rng(random_state)

    if rng.random() < epsilon:
        # Random scores for non‑exact feasible bins
        rand_vals = rng.random(non_exact.sum())
        priorities[non_exact] = rand_vals
        # Preserve exact‑fit bonus
        priorities[exact_fit] = exact_bonus

    return priorities
```
