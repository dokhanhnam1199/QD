{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Decaying epsilon\u2011greedy priority for the online Bin Packing Problem.\n\n    The function prefers bins that will be tightly filled after placing the\n    item (i.e., minimal residual capacity).  A small amount of random\n    exploration is mixed in, with an exploration probability (epsilon) that\n    decays as more items are processed.  Tie\u2011breaking jitter and a tiny bonus\n    for exact fits are added to improve numerical stability without using\n    large artificial bonuses.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as ``bins_remain_cap`` containing a priority\n        score for each bin.  Higher scores indicate more preferable bins.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ----- 0. Constants ---------------------------------------------------------\n    TOL = 1e-12                 # tolerance for floating\u2011point comparisons\n    JITTER_SCALE = 1e-9         # magnitude of tie\u2011breaking jitter\n    EXACT_FIT_BONUS = 1e-6      # tiny bonus for (near) exact fits\n\n    # ----- 1. Decaying epsilon --------------------------------------------------\n    # Initialise static attributes on first call.\n    if not hasattr(priority_v2, \"_call_counter\"):\n        priority_v2._call_counter = 0\n    if not hasattr(priority_v2, \"_start_epsilon\"):\n        priority_v2._start_epsilon = 0.3\n    if not hasattr(priority_v2, \"_min_epsilon\"):\n        priority_v2._min_epsilon = 0.01\n\n    priority_v2._call_counter += 1\n    epsilon = max(priority_v2._min_epsilon,\n                  priority_v2._start_epsilon / np.sqrt(priority_v2._call_counter))\n\n    # ----- 2. Feasibility mask --------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    feasible = caps + TOL >= item          # allow a tiny tolerance\n\n    # If no bin can accommodate the item, return -inf for all bins.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # ----- 3. Exploitation: best\u2011fit score --------------------------------------\n    residual = caps - item                 # capacity that would remain\n    # Higher score for smaller residual => negative residual.\n    exploit_score = np.full_like(caps, -np.inf, dtype=float)\n    exploit_score[feasible] = -residual[feasible]\n\n    # Tiny jitter to break exact ties.\n    jitter = np.random.rand(caps.shape[0]) * JITTER_SCALE\n    exploit_score[feasible] += jitter[feasible]\n\n    # Small bonus for (near) exact fits.\n    exact_fit = np.isclose(residual, 0.0, atol=TOL)\n    exploit_score[feasible & exact_fit] += EXACT_FIT_BONUS\n\n    # ----- 4. Exploration: random noise -----------------------------------------\n    exploration_noise = np.random.rand(caps.shape[0])\n\n    # ----- 5. Combine exploitation and exploration -------------------------------\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n    priorities[feasible] = ((1.0 - epsilon) * exploit_score[feasible] +\n                           epsilon * exploration_noise[feasible])\n\n    return priorities\n\n[Reflection]\nUse decaying epsilon, add jitter, reward near\u2011exact fits, blend exploitation/exploration, avoid huge constants.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}