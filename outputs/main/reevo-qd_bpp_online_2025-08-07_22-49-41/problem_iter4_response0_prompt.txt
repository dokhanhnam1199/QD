{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Epsilon\u2011greedy priority for the online Bin Packing Problem.\n\n    The function favours the *best\u2011fit* bin (the one that leaves the smallest\n    residual capacity after the item is placed) while occasionally exploring\n    other feasible bins.  The exploration probability (epsilon) decays with\n    the number of decisions made, making the algorithm increasingly greedy.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as ``bins_remain_cap`` with a priority score for\n        each bin.  The bin with the highest score should be selected.\n    \"\"\"\n    # ----- 1. Manage a decaying epsilon -----------------------------------------\n    # Attach a call counter to the function object for epsilon decay.\n    if not hasattr(priority_v2, \"_call_counter\"):\n        priority_v2._call_counter = 0\n    priority_v2._call_counter += 1\n\n    # Start with epsilon = 0.3 and shrink roughly as 1/sqrt(t)\n    epsilon = max(0.01, 0.3 / np.sqrt(priority_v2._call_counter))\n\n    # ----- 2. Identify feasible bins --------------------------------------------\n    feasible = bins_remain_cap >= item                     # bool mask\n    if not np.any(feasible):\n        # Nothing fits; caller may decide to open a new bin.\n        return np.zeros_like(bins_remain_cap, dtype=float)\n\n    # ----- 3. Exploitation: Best\u2011Fit score ---------------------------------------\n    # Residual capacity that would remain after packing the item.\n    residual = bins_remain_cap - item                       # shape == bins_remain_cap\n    # Higher score for tighter fit (i.e., smaller residual). Use negative residual.\n    exploit_score = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    exploit_score[feasible] = -residual[feasible]\n\n    # ----- 4. Exploration: Random noise -----------------------------------------\n    # Uniform random noise in [0,1) for each bin.\n    exploration_noise = np.random.rand(bins_remain_cap.shape[0])\n\n    # ----- 5. Combine exploitation and exploration -------------------------------\n    # Weighted sum: (1\u2011\u03b5) * exploit + \u03b5 * exploration\n    priorities = (1.0 - epsilon) * exploit_score + epsilon * exploration_noise\n\n    # Infeasible bins must stay below any feasible candidate.\n    priorities[~feasible] = -np.inf\n\n    return priorities\n\n[Reflection]\nUse decaying epsilon, rank by residual capacity, add tiny jitter, avoid large bonuses, ensure stable floating\u2011point comparisons.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}