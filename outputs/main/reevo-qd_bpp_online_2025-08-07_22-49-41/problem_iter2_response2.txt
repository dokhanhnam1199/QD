```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for the online Bin Packing Problem.

    For each bin the priority is the negative leftover capacity after placing
    the item (so a tighter fit yields a larger priority). Bins that cannot
    accommodate the item receive a large negative penalty to exclude them.
    A tiny epsilon proportional to the current remaining capacity is added to
    break ties in favour of bins that are already more filled.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the existing bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``).
    """
    # Ensure a float array for numeric operations.
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Residual capacity after hypothetically placing the item.
    residual = caps - item

    # Feasibility mask: True where the item fits.
    feasible = residual >= 0

    # Initialise all priorities with a large negative penalty.
    penalty = -np.inf
    priorities = np.full_like(caps, penalty, dtype=float)

    # Best‑fit core: larger priority for smaller residual (tighter fit).
    priorities[feasible] = -residual[feasible]

    # Tiny epsilon to break ties: prefer bins that are already more filled
    # (i.e., have smaller remaining capacity).
    epsilon = 1e-9
    priorities[feasible] += epsilon * caps[feasible]

    return priorities
```
