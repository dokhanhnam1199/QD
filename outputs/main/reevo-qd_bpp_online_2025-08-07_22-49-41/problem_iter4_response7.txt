```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Array of remaining capacities of currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores, higher values indicate higher preference.
        Feasible bins have priority >= 0; infeasible bins receive -np.inf.
    """
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    slack = bins_remain_cap - item
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)

    feasible = slack >= 0
    if not np.any(feasible):
        return priorities

    # Exact fit bins: slack effectively zero
    exact_mask = feasible & np.isclose(slack, 0.0, atol=1e-12)
    priorities[exact_mask] = np.inf

    # Non-exact feasible bins: inverse slack to favor tighter fits
    non_exact_mask = feasible & ~exact_mask
    if np.any(non_exact_mask):
        eps = 1e-12
        priorities[non_exact_mask] = 1.0 / (slack[non_exact_mask] + eps)

    return priorities
```
