{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                *,\n                tolerance: float = 1e-12,\n                epsilon: float = 0.0,\n                exact_bonus: float = 1e6) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in an online Bin Packing\n    Problem (BPP). The bin with the highest score will be chosen for the\n    incoming *item*.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of all currently open bins.\n    tolerance : float, optional\n        Tolerance for floating\u2011point comparisons.\n    epsilon : float, optional\n        Exploration probability.  With probability ``epsilon`` the scores\n        of non\u2011exact feasible bins are replaced by random values to\n        encourage exploration.\n    exact_bonus : float, optional\n        Large constant added to exact\u2011fit bins to guarantee their\n        selection.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores, one per bin.  Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask: bin must have enough free space.\n    feasible = caps >= item - tolerance\n\n    # Initialize all priorities to -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # No feasible bin -> return all -inf\n    if not feasible.any():\n        return priority\n\n    # Slack after placing the item (only meaningful for feasible bins)\n    slack = caps - item\n\n    # Exact\u2011fit detection\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # Non\u2011exact feasible bins\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Compute median slack of non\u2011exact feasible bins to set steepness\n        median_slack = np.median(slack[non_exact])\n        # Avoid division by zero; use a default steepness if median slack is tiny\n        eps_for_alpha = 1e-12\n        alpha = 1.0 / (median_slack + eps_for_alpha) if median_slack > eps_for_alpha else 10.0\n\n        # Compute logistic score: 1/(1+exp(alpha * slack / capacity))\n        # Use current remaining capacity as the \u201ccapacity\u201d for scaling\n        cap_non_exact = caps[non_exact]\n        slack_non_exact = slack[non_exact]\n        # Avoid overflow in exp by clipping\n        exp_argument = alpha * slack_non_exact / cap_non_exact\n        exp_argument = np.clip(exp_argument, -700, 700)\n        logistic_score = 1.0 / (1.0 + np.exp(exp_argument))\n\n        # Deterministic jitter for tie\u2011break: proportional to bin index\n        indices_non_exact = np.nonzero(non_exact)[0]\n        jitter = 1e-9 * indices_non_exact.astype(np.float64) / np.max(caps) if np.max(caps) > 0 else 1e-9 * indices_non_exact.astype(np.float64)\n        priority[non_exact] = logistic_score + jitter\n\n    # \u03b5\u2011greedy exploration (optional)\n    if epsilon > 0.0 and np.random.rand() < epsilon:\n        # Random scores for all feasible non\u2011exact bins\n        feasible_idx = np.nonzero(feasible)[0]\n        rand_vals = np.random.rand(feasible_idx.size)\n        priority[feasible_idx] = rand_vals\n        # Reinstate exact\u2011fit bonus\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e9,\n    tolerance: float = 1e-12,\n    jitter_scale: float = 1e-9,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    This version implements an adaptive scoring scheme:\n      * Exact\u2011fit bins receive a large bonus.\n      * Non\u2011exact feasible bins are scored by a logistic transform of the\n        normalised slack, whose midpoint adapts to the median fit quality.\n      * Deterministic jitter based on bin index breaks ties.\n      * An \u03b5\u2011greedy exploration strategy with a decaying \u03b5 is applied.\n      * Infeasible bins are penalised with -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like\n        Remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5 (\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)). Default ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default ``10.0``.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee selection. Default ``1e9``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons. Default ``1e-12``.\n    jitter_scale : float, optional\n        Scale of deterministic jitter for tie\u2011breaking. Default ``1e-9``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration). Default ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins have ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Normalise input\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # ------------------------------------------------------------------\n    # Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priority vector with -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # If no bin can accommodate the item, return the -inf vector immediately\n    if not feasible.any():\n        return priority\n\n    # ------------------------------------------------------------------\n    # Slack after placing the item (only meaningful for feasible bins)\n    # ------------------------------------------------------------------\n    slack = caps - item\n\n    # ------------------------------------------------------------------\n    # Exact\u2011fit detection\n    # ------------------------------------------------------------------\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # ------------------------------------------------------------------\n    # Adaptive logistic scoring for non\u2011exact feasible bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Estimate a characteristic capacity: the maximum remaining capacity among feasible bins\n        capacity_est = caps[feasible].max()\n        # Guard against pathological zero capacity\n        capacity_est = max(capacity_est, 1e-12)\n\n        # Normalised slack in [0, 1] (0 = perfect fit, 1 = completely empty bin)\n        norm_slack = slack[non_exact] / capacity_est\n        norm_slack = np.clip(norm_slack, 0.0, 1.0)\n\n        # Fit score: larger values mean tighter fit\n        fit_score = 1.0 - norm_slack\n\n        # Adaptive midpoint: median of the fit scores for the current feasible set\n        median_fit = np.median(fit_score)\n\n        # Logistic transform (clamp argument to avoid overflow)\n        arg = alpha * (fit_score - median_fit)\n        arg = np.clip(arg, -50.0, 50.0)  # exp overflow protection\n        logistic_score = 1.0 / (1.0 + np.exp(-arg))\n\n        # Deterministic tiny jitter based on bin index to break ties\n        idx_non_exact = np.where(non_exact)[0]\n        jitter = jitter_scale * (idx_non_exact.astype(np.float64) / (len(caps) + 1.0))\n\n        priority[non_exact] = logistic_score + jitter\n\n    # ------------------------------------------------------------------\n    # \u03b5\u2011greedy exploration with decaying \u03b5\n    # ------------------------------------------------------------------\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # Initialise RNG\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    if rng.random() < epsilon:\n        # Random scores for all feasible bins (uniform in [0, 1])\n        rand_vals = rng.random(feasible.sum())\n        priority[feasible] = rand_vals\n        # Preserve the exact\u2011fit bonus (so exact fits remain dominant)\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Reflection]\nAdapt logistic midpoint via median, decay epsilon, normalize slack by max capacity, add deterministic jitter, prioritize exact fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}