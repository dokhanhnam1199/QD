{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    tolerance: float = 1e-12,\n    epsilon: float = 0.0,\n    exact_bonus: float = 1e6,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in an online Bin Packing Problem (BPP).\n    The bin with the highest score will be chosen for the incoming *item*.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of all currently open bins.\n    tolerance : float, optional\n        Tolerance for floating\u2011point comparisons.\n    epsilon : float, optional\n        Exploration probability. With probability ``epsilon`` the scores of\n        non\u2011exact feasible bins are replaced by random values to encourage\n        exploration.\n    exact_bonus : float, optional\n        Large constant added to exact\u2011fit bins to guarantee their selection.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores, one per bin. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask: bin must have enough free space.\n    feasible = caps >= item - tolerance\n\n    # Initialize all priorities to -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # No feasible bin -> return all -inf\n    if not feasible.any():\n        return priority\n\n    # Slack after placing the item (only meaningful for feasible bins)\n    slack = caps - item\n\n    # Exact\u2011fit detection\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # Non\u2011exact feasible bins\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Compute median slack of non\u2011exact feasible bins to set steepness\n        median_slack = np.median(slack[non_exact])\n        eps_for_alpha = 1e-12\n        alpha = 1.0 / (median_slack + eps_for_alpha) if median_slack > eps_for_alpha else 10.0\n\n        # Logistic score: 1/(1+exp(alpha * slack / cap))\n        cap_non_exact = caps[non_exact]\n        slack_non_exact = slack[non_exact]\n        exp_argument = alpha * slack_non_exact / cap_non_exact\n        exp_argument = np.clip(exp_argument, -700, 700)\n        logistic_score = 1.0 / (1.0 + np.exp(exp_argument))\n        # Scale to [0,1] range\n        logistic_score *= 2.0\n\n        # Deterministic jitter for tie\u2011break: proportional to bin index\n        indices_non_exact = np.nonzero(non_exact)[0]\n        jitter = 1e-9 * indices_non_exact.astype(np.float64) / (np.max(caps) if np.max(caps) > 0 else 1.0)\n        priority[non_exact] = logistic_score + jitter\n\n    # \u03b5\u2011greedy exploration (optional)\n    if epsilon > 0.0 and np.random.rand() < epsilon:\n        # Random scores for all feasible non\u2011exact bins\n        feasible_idx = np.nonzero(feasible)[0]\n        rand_vals = np.random.rand(feasible_idx.size)\n        priority[feasible_idx] = rand_vals\n        # Reinstate exact\u2011fit bonus\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Reflection]\nScore smoothly using slack\u2011based function, adapt scaling to median slack, limit randomness, deterministic tie\u2011breaks, respect tolerance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}