{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute smooth bin priorities for online Bin Packing using a sigmoid\n    fit\u2011score.  Bins that leave very little slack after inserting the\n    item receive the highest scores.  The steepness of the sigmoid is\n    adapted online based on the typical relative slack of the feasible\n    bins, giving more emphasis to tight fits when bins are relatively\n    full.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; the bin with the largest score is chosen.\n        Bins that cannot accommodate the item receive ``-np.inf``.\n    \"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Identify bins that can fit the item\n    fits = bins >= item\n\n    if not np.any(fits):\n        # No feasible bin\n        return np.full(bins.shape, -np.inf)\n\n    # Slack left after placing the item\n    slack = bins - item\n\n    # Relative slack (0 for perfect fit, \u22641 otherwise)\n    rel_slack = np.zeros_like(bins)\n    rel_slack[fits] = slack[fits] / bins[fits]\n\n    # Adapt the steepness parameter (alpha) based on typical slack\n    median_rel = np.median(rel_slack[fits])\n    # Base steepness: 5.0; scale so alpha \u2208 [5, 10] depending on median_rel.\n    alpha = 5.0 * (2.0 - median_rel)\n\n    # Sigmoid fit\u2011score: 0.5 when rel_slack==0, decreasing as slack grows\n    scores = np.full(bins.shape, -np.inf)\n    scores[fits] = 1.0 / (1.0 + np.exp(alpha * rel_slack[fits]))\n    # Scale to [0, 1] so perfect fit yields 1.0\n    scores[fits] *= 2.0\n    np.clip(scores, 0.0, 1.0, out=scores)\n\n    return scores\n\n[Reflection]\nAdaptive steepness from median slack. Contextual bandit exploration. Normalize slack by bin capacity. Decaying epsilon greedy.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}