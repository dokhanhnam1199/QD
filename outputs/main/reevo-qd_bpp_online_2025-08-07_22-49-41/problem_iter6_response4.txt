```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for the online Bin Packing Problem.

    For each bin we compute the leftover capacity if the incoming item were placed
    there.  Higher priority is given to bins with the smallest leftover (i.e. the
    tightest fit).  Infeasible bins receive a large negative penalty.  A tiny epsilon
    term breaks ties in favour of bins that are already more filled.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of the remaining capacity of each existing bin.

    Returns:
        A 1‑D NumPy array of priority scores (same shape as `bins_remain_cap`).
        The bin with the highest score should be selected for the item.
    """
    # Ensure we are working with a float array.
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Tolerance for floating‑point comparisons.
    tol = 1e-12

    # Residual capacity after hypothetically placing the item.
    residual = caps - item

    # Feasibility mask: True where the item fits (allowing a tiny tolerance).
    feasible = residual >= -tol

    # Large negative penalty for infeasible bins (use -inf for clarity).
    penalty = -np.inf
    priorities = np.full_like(caps, penalty, dtype=float)

    # If no bin can accommodate the item, return the penalised array.
    if not np.any(feasible):
        return priorities

    # Core best‑fit: larger priority for smaller residual (tighter fit).
    # Since residual ≥ 0 for feasible bins, -residual yields higher values
    # for smaller leftovers.
    base_priority = -residual[feasible]

    # Tie‑breaker: prefer bins that are already more filled.
    # We add a tiny epsilon proportional to the distance from the most empty bin.
    epsilon = 1e-6
    max_cap = caps.max() if caps.size > 0 else 0.0
    tie_breaker = epsilon * (max_cap - caps[feasible])

    # Combine core priority and tie‑breaker.
    priorities[feasible] = base_priority + tie_breaker

    return priorities
```
