```python
import numpy as np
from typing import Union, Optional, Tuple

def priority_v2(
    item: float,
    bins_remain_cap: Union[np.ndarray, Tuple[float, ...], list],
    *,
    step: int = 0,
    epsilon0: float = 0.20,
    decay_rate: float = 0.01,
    alpha: float = 10.0,
    exact_bonus: float = 1e9,
    tolerance: float = 1e-12,
    jitter_scale: float = 1e-9,
    random_state: Optional[Union[int, np.random.Generator]] = None,
) -> np.ndarray:
    """
    Adaptive priority scoring for the online Bin Packing Problem (BPP).

    The scoring combines several heuristics:
      * Feasibility mask – only bins with enough remaining capacity are considered.
      * Exact‑fit bonus – bins that fit the item perfectly receive a huge boost.
      * Logistic slack scaling – non‑exact feasible bins are scored by a logistic
        transform of their normalised slack, with the logistic midpoint adapting
        to the median fit quality of the current feasible set.
      * Deterministic jitter – tiny bin‑index‑based jitter breaks ties deterministically.
      * ε‑greedy exploration – with a decaying ε, occasionally random scores are used
        to encourage exploration.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : array‑like
        Remaining capacities of currently open bins.
    step : int, default 0
        Number of items processed so far (used for ε decay).
    epsilon0 : float, default 0.20
        Initial exploration probability.
    decay_rate : float, default 0.01
        Decay factor for ε (ε = ε₀ / (1 + decay_rate * step)).
    alpha : float, default 10.0
        Steepness of the logistic curve.
    exact_bonus : float, default 1e9
        Bonus added to exact‑fit bins to guarantee selection.
    tolerance : float, default 1e-12
        Numerical tolerance for floating‑point comparisons.
    jitter_scale : float, default 1e-9
        Scale of deterministic jitter for tie‑breaking.
    random_state : int | np.random.Generator | None, optional
        Seed or generator for random numbers (used for exploration).

    Returns
    -------
    np.ndarray
        Priority scores for each bin; infeasible bins have ``-np.inf``.
    """
    # ------------------------------------------------------------------
    # Normalise input
    # ------------------------------------------------------------------
    caps = np.asarray(bins_remain_cap, dtype=np.float64)

    # Handle empty bin list gracefully
    if caps.size == 0:
        return np.empty_like(caps, dtype=np.float64)

    # ------------------------------------------------------------------
    # Feasibility mask – a bin must have enough free space.
    # ------------------------------------------------------------------
    feasible = caps >= (item - tolerance)

    # Initialise priority vector with -inf (infeasible bins stay -inf)
    priority = np.full_like(caps, -np.inf, dtype=np.float64)

    # If no bin can accommodate the item, return the -inf vector immediately
    if not feasible.any():
        return priority

    # ------------------------------------------------------------------
    # Slack after placing the item (only meaningful for feasible bins)
    # ------------------------------------------------------------------
    slack = caps - item

    # ------------------------------------------------------------------
    # Exact‑fit detection
    # ------------------------------------------------------------------
    exact_fit = np.abs(slack) <= tolerance
    priority[exact_fit] = exact_bonus

    # ------------------------------------------------------------------
    # Logistic scoring for non‑exact feasible bins
    # ------------------------------------------------------------------
    non_exact = feasible & ~exact_fit
    if non_exact.any():
        # Characteristic capacity: max remaining capacity among feasible bins
        capacity_est = caps[feasible].max()
        # Guard against pathological zero capacity (should not happen for feasible)
        capacity_est = max(capacity_est, 1e-12)

        # Normalised slack in [0, 1] (0 = perfect fit, 1 = completely empty bin)
        norm_slack = slack[non_exact] / capacity_est
        norm_slack = np.clip(norm_slack, 0.0, 1.0)

        # Fit score: higher means tighter fit
        fit_score = 1.0 - norm_slack

        # Adaptive median midpoint for logistic transform
        median_fit = np.median(fit_score)

        # Logistic transform (clamped to avoid overflow)
        arg = alpha * (fit_score - median_fit)
        arg = np.clip(arg, -50.0, 50.0)  # exp overflow protection
        logistic_score = 1.0 / (1.0 + np.exp(-arg))

        # Deterministic jitter based on bin index to break ties
        idx_non_exact = np.where(non_exact)[0]
        jitter = jitter_scale * (idx_non_exact.astype(np.float64) / (caps.size + 1.0))

        priority[non_exact] = logistic_score + jitter

    # ------------------------------------------------------------------
    # ε‑greedy exploration with decaying ε
    # ------------------------------------------------------------------
    epsilon = epsilon0 / (1.0 + decay_rate * step)

    # Initialise RNG
    if isinstance(random_state, np.random.Generator):
        rng = random_state
    else:
        rng = np.random.default_rng(random_state)

    if rng.random() < epsilon:
        # Random scores for all feasible bins (uniform in [0, 1])
        rand_vals = rng.random(feasible.sum())
        priority[feasible] = rand_vals
        # Preserve exact‑fit bonus (exact fits dominate even during exploration)
        priority[exact_fit] = exact_bonus

    return priority
```
