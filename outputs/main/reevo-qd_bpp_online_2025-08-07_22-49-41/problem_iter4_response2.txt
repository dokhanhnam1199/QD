```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic inverse‑slack priority function for online Bin Packing.

    Parameters
    ----------
    item : float
        Size of the item to place.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of existing bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin. Bins that cannot accommodate the item
        receive -inf. Feasible bins receive a score that is higher for bins
        with smaller remaining slack. A tiny deterministic jitter is added
        to break ties.
    """
    # Compute slack after placing the item
    slack = bins_remain_cap - item
    # Mask for bins that can accommodate the item
    fit_mask = slack >= 0
    # Initialize all priorities to -inf
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if np.any(fit_mask):
        # Deterministic jitter to break ties (tiny compared to the main score)
        # Use the flattened index to ensure consistency across shapes
        idx = np.arange(np.prod(bins_remain_cap.shape)).reshape(bins_remain_cap.shape)
        jitter = 1e-12 * (idx + 1)
        # Inverse‑slack priority: larger when slack is smaller
        priorities[fit_mask] = 1.0 / (1.0 + slack[fit_mask]) + jitter[fit_mask]

    return priorities
```
