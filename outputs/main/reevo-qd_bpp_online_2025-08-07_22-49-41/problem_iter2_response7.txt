```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing that:
    - Prioritizes exact fits first.
    - For remaining bins, prefers the smallest slack (closest to full).
    - Randomly explores other bins with probability epsilon.
    - Uses a tolerance to detect exact fits and to avoid floating‑point ties.
    """
    eps = 0.15          # exploration probability
    exact_bonus = 1e6   # high value to guarantee exact fit preference
    tolerance = 1e-12   # tolerance for floating‑point comparison

    caps = np.asarray(bins_remain_cap, dtype=float)
    leftover = caps - item
    priorities = np.full_like(caps, -np.inf, dtype=float)

    feasible = leftover >= -tolerance
    if not np.any(feasible):
        return priorities

    # Exploration: assign random priorities to feasible bins
    if np.random.rand() < eps:
        rand_scores = np.random.rand(np.count_nonzero(feasible))
        priorities[feasible] = rand_scores
        return priorities

    # Indices of feasible bins
    idx = np.where(feasible)[0]
    slack = leftover[feasible]

    # Exact fit bins
    exact_mask = np.isclose(slack, 0.0, atol=tolerance)
    if np.any(exact_mask):
        priorities[idx[exact_mask]] = exact_bonus

    # Non‑exact feasible bins: prioritize smallest slack
    non_exact_mask = ~exact_mask
    if np.any(non_exact_mask):
        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))
        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter

    return priorities
```
