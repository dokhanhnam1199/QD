{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online bin packing setting.\n\n    The heuristic prefers bins that will be nearly full after placing the item.\n    It uses an exponential decay of the normalized slack (deterministic score),\n    adds a tiny random jitter for deterministic tie\u2011breaking, and incorporates a\n    very small epsilon\u2011greedy random component for exploration.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Higher scores indicate higher preference.\n        Infeasible bins (remaining capacity < item) receive -np.inf.\n    \"\"\"\n    # Guard against empty input\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=float)\n\n    # Estimate uniform bin capacity as the maximum remaining capacity observed.\n    # Works when at least one bin is empty; otherwise approximates the capacity\n    # of the least\u2011filled bin.\n    capacity = np.max(bins_remain_cap)\n    if capacity <= 0:\n        # No capacity to place any item.\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Tolerance for floating\u2011point comparisons\n    tol = 1e-12\n\n    # Feasibility mask: bins that can accommodate the item\n    can_fit = bins_remain_cap >= item - tol\n\n    # Initialise all priorities to -inf (infeasible)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(can_fit):\n        # No feasible bin found\n        return priorities\n\n    # Slack after placing the item for feasible bins\n    slack = bins_remain_cap[can_fit] - item\n\n    # Normalized slack in [0, 1]\n    slack_norm = slack / capacity\n\n    # Adaptive steepness: larger items use a steeper decay\n    base_alpha = 10.0\n    alpha = base_alpha * (item / capacity + 0.1)  # ensure >0\n\n    # Deterministic score: exponential decay of slack.\n    # Exact fits (slack \u2264 tol) get the maximal score of 1.0.\n    exact_fit = slack <= tol\n    deterministic_score = np.where(\n        exact_fit,\n        1.0,\n        np.exp(-alpha * slack_norm)\n    )\n\n    # \u03b5\u2011greedy exploration (tiny random perturbation)\n    eps_greedy = 1e-6\n    random_score = np.random.rand(deterministic_score.shape[0])\n    combined_score = (1.0 - eps_greedy) * deterministic_score + eps_greedy * random_score\n\n    # Tiny jitter for deterministic tie\u2011breaking\n    eps_jitter = 1e-9\n    jitter = np.random.uniform(-eps_jitter, eps_jitter, size=combined_score.shape)\n    combined_score += jitter\n\n    # Assign computed scores to feasible bins\n    priorities[can_fit] = combined_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e9,\n    tolerance: float = 1e-12,\n    jitter_scale: float = 1e-9,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    This version implements an adaptive scoring scheme:\n      * Exact\u2011fit bins receive a large bonus.\n      * Non\u2011exact feasible bins are scored by a logistic transform of the\n        normalised slack, whose midpoint adapts to the median fit quality.\n      * Deterministic jitter based on bin index breaks ties.\n      * An \u03b5\u2011greedy exploration strategy with a decaying \u03b5 is applied.\n      * Infeasible bins are penalised with -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like\n        Remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5 (\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)). Default ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default ``10.0``.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee selection. Default ``1e9``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons. Default ``1e-12``.\n    jitter_scale : float, optional\n        Scale of deterministic jitter for tie\u2011breaking. Default ``1e-9``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration). Default ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins have ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Normalise input\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # ------------------------------------------------------------------\n    # Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priority vector with -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # If no bin can accommodate the item, return the -inf vector immediately\n    if not feasible.any():\n        return priority\n\n    # ------------------------------------------------------------------\n    # Slack after placing the item (only meaningful for feasible bins)\n    # ------------------------------------------------------------------\n    slack = caps - item\n\n    # ------------------------------------------------------------------\n    # Exact\u2011fit detection\n    # ------------------------------------------------------------------\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # ------------------------------------------------------------------\n    # Adaptive logistic scoring for non\u2011exact feasible bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Estimate a characteristic capacity: the maximum remaining capacity among feasible bins\n        capacity_est = caps[feasible].max()\n        # Guard against pathological zero capacity\n        capacity_est = max(capacity_est, 1e-12)\n\n        # Normalised slack in [0, 1] (0 = perfect fit, 1 = completely empty bin)\n        norm_slack = slack[non_exact] / capacity_est\n        norm_slack = np.clip(norm_slack, 0.0, 1.0)\n\n        # Fit score: larger values mean tighter fit\n        fit_score = 1.0 - norm_slack\n\n        # Adaptive midpoint: median of the fit scores for the current feasible set\n        median_fit = np.median(fit_score)\n\n        # Logistic transform (clamp argument to avoid overflow)\n        arg = alpha * (fit_score - median_fit)\n        arg = np.clip(arg, -50.0, 50.0)  # exp overflow protection\n        logistic_score = 1.0 / (1.0 + np.exp(-arg))\n\n        # Deterministic tiny jitter based on bin index to break ties\n        idx_non_exact = np.where(non_exact)[0]\n        jitter = jitter_scale * (idx_non_exact.astype(np.float64) / (len(caps) + 1.0))\n\n        priority[non_exact] = logistic_score + jitter\n\n    # ------------------------------------------------------------------\n    # \u03b5\u2011greedy exploration with decaying \u03b5\n    # ------------------------------------------------------------------\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # Initialise RNG\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    if rng.random() < epsilon:\n        # Random scores for all feasible bins (uniform in [0, 1])\n        rand_vals = rng.random(feasible.sum())\n        priority[feasible] = rand_vals\n        # Preserve the exact\u2011fit bonus (so exact fits remain dominant)\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Reflection]\nUse adaptive logistic scoring, median-based midpoint, decaying epsilon, exact\u2011fit bonus, deterministic jitter, robust capacity estimate.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}