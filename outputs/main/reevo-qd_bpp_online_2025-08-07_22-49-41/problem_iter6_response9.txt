```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic priority for online bin packing.

    Bins that will have the smallest remaining capacity after placing the item
    receive the highest priority, computed as 1/(1 + slack). Infeasible bins are
    assigned -inf to guarantee they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1â€‘D array of remaining capacities of currently open bins.

    Returns
    -------
    np.ndarray
        # Array of priority scores; the bin with the maximal value should be chosen.
    """
    # Convert to NumPy array of floats for consistent arithmetic
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Slack after hypothetically placing the item
    slack = bins_remain_cap - item

    # Feasibility mask: bins that can accommodate the item
    feasible = slack >= 0

    # Initialise priorities with -inf for infeasible bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Deterministic proximity score: larger when slack is smaller
    priorities[feasible] = 1.0 / (1.0 + slack[feasible])

    return priorities
```
