{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    tolerance: float = 1e-12,\n    alpha: float = 12.0,\n    mid_point: float = 0.5,\n    epsilon: float = 0.1,\n    exact_bonus: float = 1e6,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    For each currently open bin this function returns a scalar score.\n    The bin with the highest score should be selected for the incoming *item*.\n    Scores are computed as follows:\n\n    1. **Feasibility** \u2013 only bins with enough remaining capacity are considered.\n    2. **Exact\u2011fit bonus** \u2013 bins where the item exactly matches the remaining\n       capacity receive a large constant ``exact_bonus``.\n    3. **Fit\u2011tightness** \u2013 for the remaining feasible bins a logistic\n       transformation of the normalized slack (how empty the bin would be)\n       is used; tighter fits obtain higher scores.\n    4. **Exploration** \u2013 with probability ``epsilon`` the scores of feasible\n       non\u2011exact bins are replaced by random values (\u03b5\u2011greedy exploration).\n    5. **Tie\u2011breaking jitter** \u2013 a tiny random jitter is added to break ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like\n        Remaining capacities of all open bins.\n    tolerance : float, default 1e-12\n        Numerical tolerance for feasibility and exact\u2011fit checks.\n    alpha : float, default 12.0\n        Steepness of the logistic curve; larger values make the score more\n        sensitive to the fit quality.\n    mid_point : float, default 0.5\n        Mid\u2011point of the logistic curve; a fit score equal to this value yields\n        a logistic output of 0.5.\n    epsilon : float, default 0.1\n        Exploration probability (\u03b5\u2011greedy). When ``rng.random() < epsilon`` the\n        scores of feasible non\u2011exact bins are replaced by uniform random numbers.\n    exact_bonus : float, default 1e6\n        Large constant added to exact\u2011fit bins to guarantee they dominate.\n    random_state : int or np.random.Generator, optional\n        Seed or random generator for reproducibility.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 0) Normalise input and initialise RNG\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    # ------------------------------------------------------------------\n    # 1) Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities to -inf (infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # Early exit if nothing fits\n    if not feasible.any():\n        return priority\n\n    # ------------------------------------------------------------------\n    # 2) Slack after placing the item (only meaningful for feasible bins)\n    # ------------------------------------------------------------------\n    slack = caps - item  # may be negative for infeasible bins; we ignore those later\n\n    # ------------------------------------------------------------------\n    # 3) Exact\u2011fit detection\n    # ------------------------------------------------------------------\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # ------------------------------------------------------------------\n    # 4) Logistic scoring for feasible, non\u2011exact bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Normalise slack by the bin's own capacity to obtain a value in [0, 1]\n        # (0 = perfect fit, 1 = completely empty bin)\n        cap_non_exact = caps[non_exact]\n        # Protect against division by zero (should not happen for feasible bins)\n        cap_non_exact = np.maximum(cap_non_exact, tolerance)\n\n        slack_non_exact = slack[non_exact]\n        norm_slack = slack_non_exact / cap_non_exact  # \u2208 [0, 1]\n\n        # Fit quality: higher when the slack is small\n        fit_score = 1.0 - norm_slack  # \u2208 [0, 1]; 1 = perfect fit\n\n        # Logistic transformation\n        # sigmoid(z) = 1 / (1 + exp(-z)), where z = alpha * (fit_score - mid_point)\n        sigmoid_arg = alpha * (fit_score - mid_point)\n        # Clip to avoid overflow in exp\n        sigmoid_arg = np.clip(sigmoid_arg, -700, 700)\n        logistic_score = 1.0 / (1.0 + np.exp(-sigmoid_arg))\n\n        # Tiny random jitter for deterministic tie\u2011breaking\n        jitter = rng.uniform(0.0, 1e-9, size=logistic_score.shape)\n\n        priority[non_exact] = logistic_score + jitter\n\n    # ------------------------------------------------------------------\n    # 5) \u03b5\u2011greedy exploration (replace scores of feasible non\u2011exact bins)\n    # ------------------------------------------------------------------\n    if rng.random() < epsilon and non_exact.any():\n        # Draw uniform random scores in [0, 1) for each feasible non\u2011exact bin\n        rand_scores = rng.random(non_exact.sum())\n        priority[non_exact] = rand_scores\n        # Preserve the exact\u2011fit bonus (ensures exact fits still dominate)\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e6,\n    tolerance: float = 1e-12,\n    random_state: int | np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    This implementation builds on the best\u2011fit idea by:\n\n    * rewarding **exact fits** with a huge constant `exact_bonus`;\n    * scoring feasible, non\u2011exact bins by a logistic transform of the *tightness*\n      of the fit, where tightness is 1\u2011slack/max(remaining_capacity);\n    * using the *median* tightness of the current feasible set as the logistic\n      midpoint, making the scoring adaptive to the current state of the bins;\n    * applying a tiny deterministic jitter based on bin index to guarantee\n      deterministic tie\u2011breaking;\n    * optionally performing a decaying \u03b5\u2011greedy exploration step, where \u03b5\n      decays as ``\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)``;\n    * ensuring infeasible bins receive ``-np.inf`` so they can never be\n      selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5 (\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)). Default ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default ``10.0``.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee selection. Default ``1e6``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons. Default ``1e-12``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration). Default ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins have ``-np.inf``.\n    \"\"\"\n    # Ensure a float64 numpy array\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask \u2013 bin must have enough free space.\n    feasible = caps >= (item - tolerance)\n\n    # All bins start with a low priority\n    priorities = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    if not feasible.any():\n        return priorities  # nothing can accommodate the item\n\n    # Slack after placing the item\n    slack = caps - item\n\n    # Detect exact\u2011fit bins\n    exact_fit = np.abs(slack) <= tolerance\n    priorities[exact_fit] = exact_bonus\n\n    # Non\u2011exact, feasible bins\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Normalise slack by the largest remaining capacity among feasible bins\n        max_cap = caps[feasible].max()\n        max_cap = max(max_cap, 1e-12)  # avoid division by zero\n        norm_slack = slack[non_exact] / max_cap  # \u2208 [0, 1]\n        fit_score = 1.0 - norm_slack  # tighter fit \u2192 larger score\n\n        # Adaptive logistic: median of current fit scores defines the midpoint\n        median_fit = np.median(fit_score)\n        logistic_arg = alpha * (fit_score - median_fit)\n        # Clip to avoid overflow in exp\n        logistic_arg = np.clip(logistic_arg, -50, 50)\n        logistic_score = 1.0 / (1.0 + np.exp(-logistic_arg))\n\n        # Deterministic tiny jitter (based on bin index) to break ties\n        idx_non_exact = np.where(non_exact)[0]\n        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))\n\n        priorities[non_exact] = logistic_score + jitter\n\n    # \u03b5\u2011greedy exploration with decaying \u03b5\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # RNG\n    rng = random_state if isinstance(random_state, np.random.Generator) else np.random.default_rng(random_state)\n\n    if rng.random() < epsilon:\n        # Random scores for non\u2011exact feasible bins\n        rand_vals = rng.random(non_exact.sum())\n        priorities[non_exact] = rand_vals\n        # Preserve exact\u2011fit bonus\n        priorities[exact_fit] = exact_bonus\n\n    return priorities\n\n[Reflection]\nNormalize slack by max feasible capacity, adaptive median midpoint, deterministic tie jitter, decaying \u03b5, exact\u2011fit bonus.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}