{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e6,\n    tolerance: float = 1e-12,\n    random_state: int | np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    This implementation builds on the best\u2011fit idea by:\n\n    * rewarding **exact fits** with a huge constant `exact_bonus`;\n    * scoring feasible, non\u2011exact bins by a logistic transform of the *tightness*\n      of the fit, where tightness is 1\u2011slack/max(remaining_capacity);\n    * using the *median* tightness of the current feasible set as the logistic\n      midpoint, making the scoring adaptive to the current state of the bins;\n    * applying a tiny deterministic jitter based on bin index to guarantee\n      deterministic tie\u2011breaking;\n    * optionally performing a decaying \u03b5\u2011greedy exploration step, where \u03b5\n      decays as ``\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)``;\n    * ensuring infeasible bins receive ``-np.inf`` so they can never be\n      selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5 (\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)). Default ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default ``10.0``.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee selection. Default ``1e6``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons. Default ``1e-12``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration). Default ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins have ``-np.inf``.\n    \"\"\"\n    # Ensure a float64 numpy array\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask \u2013 bin must have enough free space.\n    feasible = caps >= (item - tolerance)\n\n    # All bins start with a low priority\n    priorities = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    if not feasible.any():\n        return priorities  # nothing can accommodate the item\n\n    # Slack after placing the item\n    slack = caps - item\n\n    # Detect exact\u2011fit bins\n    exact_fit = np.abs(slack) <= tolerance\n    priorities[exact_fit] = exact_bonus\n\n    # Non\u2011exact, feasible bins\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Normalise slack by the largest remaining capacity among feasible bins\n        max_cap = caps[feasible].max()\n        max_cap = max(max_cap, 1e-12)  # avoid division by zero\n        norm_slack = slack[non_exact] / max_cap  # \u2208 [0, 1]\n        fit_score = 1.0 - norm_slack  # tighter fit \u2192 larger score\n\n        # Adaptive logistic: median of current fit scores defines the midpoint\n        median_fit = np.median(fit_score)\n        logistic_arg = alpha * (fit_score - median_fit)\n        # Clip to avoid overflow in exp\n        logistic_arg = np.clip(logistic_arg, -50, 50)\n        logistic_score = 1.0 / (1.0 + np.exp(-logistic_arg))\n\n        # Deterministic tiny jitter (based on bin index) to break ties\n        idx_non_exact = np.where(non_exact)[0]\n        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))\n\n        priorities[non_exact] = logistic_score + jitter\n\n    # \u03b5\u2011greedy exploration with decaying \u03b5\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # RNG\n    rng = random_state if isinstance(random_state, np.random.Generator) else np.random.default_rng(random_state)\n\n    if rng.random() < epsilon:\n        # Random scores for non\u2011exact feasible bins\n        rand_vals = rng.random(non_exact.sum())\n        priorities[non_exact] = rand_vals\n        # Preserve exact\u2011fit bonus\n        priorities[exact_fit] = exact_bonus\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e6,\n    tolerance: float = 1e-12,\n    random_state: Union[int, np.random.Generator, None] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    The returned priority array can be used to select the bin with the highest\n    score for the incoming ``item``.  The scoring combines several heuristics:\n\n    * **Exact\u2011fit reward** \u2013 bins that would be perfectly filled receive a large\n      constant ``exact_bonus``.\n    * **Fit tightness** \u2013 for non\u2011exact feasible bins, slack is normalised by the\n      maximum remaining capacity among all feasible bins and transformed with a\n      logistic function.  The logistic midpoint adapts to the median fit score\n      of the current feasible set.\n    * **Deterministic jitter** \u2013 a tiny index\u2011based term breaks ties in a\n      reproducible way.\n    * **\u03b5\u2011greedy exploration** \u2013 with a decaying probability\n      ``\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)`` the scores of non\u2011exact feasible bins\n      are replaced by random values, encouraging exploration early on.\n    * **Infeasible bins** \u2013 receive ``-np.inf`` and can never be selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default is ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default is ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5. Default is ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default is ``10.0``.\n    # higher values make the logistic sharper.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee their selection.\n        Default is ``1e6``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons.\n        Default is ``1e-12``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration).\n        Default is ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins have ``-np.inf``.\n    \"\"\"\n    # --------------------------------------------------------------------- #\n    # 1. Prepare data ------------------------------------------------------ #\n    # --------------------------------------------------------------------- #\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask: bin must have enough space for the item (allowing tolerance)\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities to -inf (infeasible)\n    priorities = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # Early exit if no bin can accommodate the item\n    if not feasible.any():\n        return priorities\n\n    # --------------------------------------------------------------------- #\n    # 2. Compute slack and identify exact fits ---------------------------- #\n    # --------------------------------------------------------------------- #\n    slack = caps - item\n\n    # Exact fit detection (|slack| <= tolerance)\n    exact_fit = np.abs(slack) <= tolerance\n    priorities[exact_fit] = exact_bonus\n\n    # Non\u2011exact feasible bins\n    non_exact = feasible & ~exact_fit\n\n    # --------------------------------------------------------------------- #\n    # 3. Score non\u2011exact feasible bins ------------------------------------- #\n    # --------------------------------------------------------------------- #\n    if non_exact.any():\n        # Normalise slack by the largest remaining capacity among feasible bins\n        max_cap = caps[feasible].max()\n        max_cap = max(max_cap, tolerance)  # avoid division by zero\n\n        norm_slack = slack[non_exact] / max_cap           # in [0, 1] roughly\n        fit_score = 1.0 - norm_slack                       # tighter fit \u2192 larger\n\n        # Adaptive logistic transform: median fit_score is the midpoint\n        median_fit = np.median(fit_score)\n        logistic_arg = alpha * (fit_score - median_fit)\n\n        # Clip to avoid overflow in exp()\n        logistic_arg = np.clip(logistic_arg, -np.inf, np.inf)\n        logistic_arg = np.clip(logistic_arg, -50, 50)      # safe range for exp\n\n        logistic_score = 1.0 / (1.0 + np.exp(-logistic_arg))\n\n        # Deterministic jitter to break ties (tiny, index\u2011based)\n        idx_non_exact = np.nonzero(non_exact)[0]\n        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))\n\n        priorities[non_exact] = logistic_score + jitter\n\n    # --------------------------------------------------------------------- #\n    # 4. \u03b5\u2011greedy exploration ------------------------------------------------ #\n    # --------------------------------------------------------------------- #\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # Resolve RNG (allow seed, Generator, or default)\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    if rng.random() < epsilon and non_exact.any():\n        # Replace non\u2011exact feasible scores with uniform random values\n        random_scores = rng.random(non_exact.sum())\n        priorities[non_exact] = random_scores\n        # Preserve exact\u2011fit bonuses (they should dominate)\n        priorities[np.isinf(priorities)] = -np.inf  # sanity (should already hold)\n\n    return priorities\n\n[Reflection]\nNormalize slack, use median\u2011centered logistic, add tiny deterministic jitter, clip exp for overflow, decay \u03b5\u2011greedy, keep infeasible bins at\u202f\u2011\u221e.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}