{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin according to the Best\u2011Fit strategy.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores; higher scores correspond to better bins.\n    \"\"\"\n    # Initialise with -\u221e for bins that cannot accommodate the item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Determine which bins are actually usable\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        # Slack left after placing the item\n        slack = bins_remain_cap[can_fit] - item\n        # Best-fit => least slack => highest (least negative) priority\n        # Add a tiny deterministic jitter to break ties deterministically.\n        jitter = np.linspace(0, 1e-8, np.count_nonzero(can_fit))\n        priorities[can_fit] = -slack + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    step: int = 0,\n    epsilon0: float = 0.20,\n    decay_rate: float = 0.01,\n    alpha: float = 10.0,\n    exact_bonus: float = 1e6,\n    tolerance: float = 1e-12,\n    random_state: int | np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    This version (v2) incorporates the ideas from the reflection:\n\n    * Exact\u2011fit bins receive a huge boost (`exact_bonus`).\n    * All other feasible bins are ranked by a logistic transform of the\n      normalized slack, where the midpoint of the logistic curve adapts to the\n      median fit quality of the current feasible bins.\n    * A deterministic tiny jitter (based on bin index) breaks ties.\n    * An \u03b5\u2011greedy exploration strategy with a *decaying* \u03b5 is applied.\n    * Infeasible bins are penalised with `-np.inf`.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently open bins.\n    step : int, optional\n        Number of items processed so far (used for \u03b5 decay). Default ``0``.\n    epsilon0 : float, optional\n        Initial exploration probability. Default ``0.20``.\n    decay_rate : float, optional\n        Decay factor for \u03b5 (\u03b5 = \u03b5\u2080 / (1 + decay_rate * step)). Default ``0.01``.\n    alpha : float, optional\n        Steepness of the logistic curve. Default ``10.0``.\n    exact_bonus : float, optional\n        Bonus added to exact\u2011fit bins to guarantee selection. Default ``1e6``.\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons. Default ``1e-12``.\n    random_state : int | np.random.Generator | None, optional\n        Seed or generator for random numbers (used for exploration). Default ``None``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins have ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Normalise inputs\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # ------------------------------------------------------------------\n    # Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities to -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # If no bin can accommodate the item, return the -inf vector\n    if not feasible.any():\n        return priority\n\n    # ------------------------------------------------------------------\n    # Slack after placing the item (only meaningful for feasible bins)\n    # ------------------------------------------------------------------\n    slack = caps - item\n\n    # ------------------------------------------------------------------\n    # Exact\u2011fit detection\n    # ------------------------------------------------------------------\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # ------------------------------------------------------------------\n    # Logistic scoring for non\u2011exact feasible bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Estimate the (common) bin capacity as the maximum remaining capacity among feasible bins\n        capacity_est = caps[feasible].max()\n        capacity_est = max(capacity_est, 1e-12)  # protect against division by zero\n\n        # Normalised slack \u2208 [0,1] (0 = perfect fit, 1 = completely empty bin)\n        norm_slack = slack[non_exact] / capacity_est\n        fit_score = 1.0 - norm_slack  # larger \u2192 tighter fit\n\n        # Adaptive midpoint: median of the fit scores for the current feasible set\n        median_fit = np.median(fit_score)\n\n        # Logistic transform: tighter fits get scores closer to 1\n        sigmoid_arg = alpha * (fit_score - median_fit)\n        logistic_score = 1.0 / (1.0 + np.exp(-sigmoid_arg))\n\n        # Deterministic tiny jitter based on bin index to break exact ties\n        idx_non_exact = np.where(non_exact)[0]\n        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))\n\n        priority[non_exact] = logistic_score + jitter\n\n    # ------------------------------------------------------------------\n    # \u03b5\u2011greedy exploration with decaying \u03b5\n    # ------------------------------------------------------------------\n    epsilon = epsilon0 / (1.0 + decay_rate * step)\n\n    # Initialise RNG\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    if rng.random() < epsilon:\n        # Random scores for all feasible, non\u2011exact bins (uniform in [0,1])\n        rand_vals = rng.random(non_exact.sum())\n        priority[non_exact] = rand_vals\n\n        # Preserve exact\u2011fit bonus (they must stay on top)\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Reflection]\nReward exact fits, use adaptive logistic scores, add decaying epsilon\u2011greedy exploration, include deterministic jitter, normalize slack.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}