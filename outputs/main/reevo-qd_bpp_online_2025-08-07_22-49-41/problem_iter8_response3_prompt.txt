{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute adaptive priority scores for online Bin Packing.\n\n    The function:\n      * Prefers tight fits via a sigmoid score on relative slack.\n      * Adapts the sigmoid steepness based on the median relative slack.\n      * Applies a decaying epsilon\u2011greedy exploration that is modulated by\n        the context (median slack) to balance exploration/exploitation.\n      * Returns -np.inf for bins that cannot accommodate the item.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be packed.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; the bin with the largest score is\n        selected.  Unfit bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure the array is float64 for consistency\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasible bins\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.full(bins.shape, -np.inf, dtype=np.float64)\n\n    # Slack and relative slack\n    slack = bins - item\n    rel_slack = np.zeros_like(bins)\n    rel_slack[feasible] = slack[feasible] / bins[feasible]  # normalize by capacity\n\n    # Adaptive steepness from median relative slack (range [5, 10])\n    median_rel = np.median(rel_slack[feasible])\n    alpha = 5.0 * (2.0 - median_rel)\n\n    # Sigmoid fit\u2011score: 1 for perfect fit, decreasing with slack\n    scores = np.full(bins.shape, -np.inf, dtype=np.float64)\n    sigmoid = 1.0 / (1.0 + np.exp(alpha * rel_slack[feasible]))\n    scores[feasible] = 2.0 * sigmoid  # scale to [0,1], perfect fit -> 1\n    np.clip(scores[feasible], 0.0, 1.0, out=scores[feasible])\n\n    # ------------------------------------\n    # Exploration: decaying epsilon\u2011greedy\n    # ------------------------------------\n    if not hasattr(priority_v2, \"_iter\"):\n        priority_v2._iter = 0\n    priority_v2._iter += 1\n    iteration = priority_v2._iter\n\n    # Base epsilon depends on the context (median slack)\n    min_eps, max_eps = 0.01, 0.20\n    base_eps = min_eps + (max_eps - min_eps) * median_rel\n\n    # Exponential decay over time (tau controls speed)\n    decay_tau = 1000.0\n    decay_factor = math.exp(-iteration / decay_tau)\n    epsilon = base_eps * decay_factor\n\n    if np.random.rand() < epsilon:\n        # Random priorities for feasible bins\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        scores[feasible] = rand_scores\n    else:\n        # Small jitter to break ties without changing ordering much\n        jitter = np.random.uniform(0, 1e-6, size=np.count_nonzero(feasible))\n        scores[feasible] += jitter\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin according to the Best\u2011Fit strategy.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores; higher scores correspond to better bins.\n    \"\"\"\n    # Initialise with -\u221e for bins that cannot accommodate the item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Determine which bins are actually usable\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        # Slack left after placing the item\n        slack = bins_remain_cap[can_fit] - item\n        # Best-fit => least slack => highest (least negative) priority\n        # Add a tiny deterministic jitter to break ties deterministically.\n        jitter = np.linspace(0, 1e-8, np.count_nonzero(can_fit))\n        priorities[can_fit] = -slack + jitter\n\n    return priorities\n\n[Reflection]\nPrefer simple slack\u2011based scores, deterministic tie\u2011breaking jitter, linear weighting; discard sigmoids and random exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}