{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                *,\n                tolerance: float = 1e-12,\n                epsilon: float = 0.0,\n                exact_bonus: float = 1e6) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in an online Bin Packing\n    Problem (BPP). The bin with the highest score will be chosen for the\n    incoming *item*.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of all currently open bins.\n    tolerance : float, optional\n        Tolerance for floating\u2011point comparisons.\n    epsilon : float, optional\n        Exploration probability.  With probability ``epsilon`` the scores\n        of non\u2011exact feasible bins are replaced by random values to\n        encourage exploration.\n    exact_bonus : float, optional\n        Large constant added to exact\u2011fit bins to guarantee their\n        selection.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores, one per bin.  Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask: bin must have enough free space.\n    feasible = caps >= item - tolerance\n\n    # Initialize all priorities to -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # No feasible bin -> return all -inf\n    if not feasible.any():\n        return priority\n\n    # Slack after placing the item (only meaningful for feasible bins)\n    slack = caps - item\n\n    # Exact\u2011fit detection\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # Non\u2011exact feasible bins\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Compute median slack of non\u2011exact feasible bins to set steepness\n        median_slack = np.median(slack[non_exact])\n        # Avoid division by zero; use a default steepness if median slack is tiny\n        eps_for_alpha = 1e-12\n        alpha = 1.0 / (median_slack + eps_for_alpha) if median_slack > eps_for_alpha else 10.0\n\n        # Compute logistic score: 1/(1+exp(alpha * slack / capacity))\n        # Use current remaining capacity as the \u201ccapacity\u201d for scaling\n        cap_non_exact = caps[non_exact]\n        slack_non_exact = slack[non_exact]\n        # Avoid overflow in exp by clipping\n        exp_argument = alpha * slack_non_exact / cap_non_exact\n        exp_argument = np.clip(exp_argument, -700, 700)\n        logistic_score = 1.0 / (1.0 + np.exp(exp_argument))\n\n        # Deterministic jitter for tie\u2011break: proportional to bin index\n        indices_non_exact = np.nonzero(non_exact)[0]\n        jitter = 1e-9 * indices_non_exact.astype(np.float64) / np.max(caps) if np.max(caps) > 0 else 1e-9 * indices_non_exact.astype(np.float64)\n        priority[non_exact] = logistic_score + jitter\n\n    # \u03b5\u2011greedy exploration (optional)\n    if epsilon > 0.0 and np.random.rand() < epsilon:\n        # Random scores for all feasible non\u2011exact bins\n        feasible_idx = np.nonzero(feasible)[0]\n        rand_vals = np.random.rand(feasible_idx.size)\n        priority[feasible_idx] = rand_vals\n        # Reinstate exact\u2011fit bonus\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    alpha: float = 12.0,\n    mid_point: float = 0.5,\n    epsilon: float = 0.15,\n    exact_bonus: float = 1e6,\n    tolerance: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    The function returns a score for each currently open bin. The bin with the\n    highest score should be selected for the incoming *item*.  Scores are\n    computed as follows:\n\n    1. **Feasibility** \u2013 only bins with enough remaining capacity are considered.\n    2. **Exact fit** \u2013 bins where the item exactly matches the remaining capacity\n       receive a very large bonus (`exact_bonus`) to guarantee selection.\n    3. **Smooth logistic fit** \u2013 for the remaining feasible bins a logistic\n       (sigmoid) transform of the normalized slack is used; tighter fits get\n       higher scores.\n    4. **Exploration** \u2013 with probability ``epsilon`` the scores of feasible\n       bins (except exact\u2011fit bins) are replaced by random values, encouraging\n       exploration of alternative placements.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the open bins.\n    alpha : float, optional\n        Steepness of the logistic curve (default 12.0).\n    mid_point : float, optional\n        Centre of the logistic curve; a fit_score equal to this value yields\n        a priority of 0.5 (default 0.5).\n    epsilon : float, optional\n        Exploration probability; when ``np.random.rand() < epsilon`` random\n        scores are used for feasible bins (default 0.15).\n    exact_bonus : float, optional\n        Large constant added to exact\u2011fit bins to ensure they dominate (default 1e6).\n    tolerance : float, optional\n        Numerical tolerance for floating\u2011point comparisons (default 1e-12 * 1e-12).\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores, one per bin. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 0) Normalise input\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # ------------------------------------------------------------------\n    # 1) Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities to -inf (ensures infeasible bins are never chosen)\n    priority = np.full_like(caps, -np.inf, dtype=np.float64)\n\n    # No feasible bin -> return all -inf\n    if not feasible.any():\n        return priority\n\n    # ------------------------------------------------------------------\n    # 2) Slack after placing the item (only meaningful for feasible bins)\n    # ------------------------------------------------------------------\n    slack = caps - item\n\n    # ------------------------------------------------------------------\n    # 3) Exact\u2011fit detection\n    # ------------------------------------------------------------------\n    exact_fit = np.abs(slack) <= tolerance\n    priority[exact_fit] = exact_bonus\n\n    # ------------------------------------------------------------------\n    # 4) Logistic scoring for non\u2011exact feasible bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if non_exact.any():\n        # Estimate the (common) bin capacity.\n        # Using the current maximum remaining capacity is a safe upper bound.\n        capacity_est = caps.max()\n        capacity_est = max(capacity_est, 1e-12)  # protect against division by zero\n\n        # Normalise slack to [0, 1] (0 = perfect fit, 1 = completely empty bin)\n        norm_slack = slack[non_exact] / capacity_est\n        fit_score = 1.0 - norm_slack  # larger => tighter fit\n\n        # Logistic transform\n        sigmoid_arg = alpha * (fit_score - mid_point)\n        logistic_score = 1.0 / (1.0 + np.exp(-sigmoid_arg))\n\n        # Add a tiny jitter to break ties when scores are identical\n        jitter = 1e-9 * np.random.rand(logistic_score.size)\n        priority[non_exact] = logistic_score + jitter\n\n    # ------------------------------------------------------------------\n    # 5) \u03b5\u2011greedy exploration (random scores for feasible non\u2011exact bins)\n    # ------------------------------------------------------------------\n    if np.random.rand() < epsilon:\n        # Random scores in [0, *] for all feasible bins (excluding exact fits)\n        rand_vals = np.random.rand(feasible.sum())\n        feasible_idx = np.where(feasible)[0]\n\n        # Overwrite non\u2011exact feasible bins with random values\n        non_exact_idx = np.where(non_exact)[0]\n        # Map random values to feasible indices; preserve order\n        # The first len(feasible_idx) entries of rand_vals correspond to feasible bins\n        # in the order given by feasible_idx.\n        # Since exact\u2011fit bins also appear in feasible_idx, we replace all feasible,\n        # then re\u2011apply the exact bonus.\n        priority[feasible_idx] = rand_vals\n\n        # Reinstate the exact\u2011fit bonus (ensures they remain top priority)\n        priority[exact_fit] = exact_bonus\n\n    return priority\n\n[Reflection]\nNormalize slack by bin capacity, tune logistic alpha, add epsilon\u2011greedy exploration, give exact\u2011fit bonus, and jitter for ties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}