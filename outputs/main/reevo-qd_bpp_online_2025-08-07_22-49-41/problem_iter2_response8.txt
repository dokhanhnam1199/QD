```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority function for online bin packing.

    For each bin the function returns a priority score; the bin with the highest
    score will be selected for the incoming ``item``. Bins that cannot accommodate
    the item receive a priority of ``-np.inf``. Among feasible bins the
    best‑fit heuristic is used (minimum remaining slack after placement). A
    tiny deterministic jitter based on the bin index breaks ties in a stable
    way.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the current bins.

    Returns
    -------
    np.ndarray
        Array of priority scores, same shape as ``bins_remain_cap``.
    """
    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()

    # Initialise priorities with -inf for infeasible bins
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # Identify bins that can accommodate the item
    feasible_mask = caps >= item
    if not np.any(feasible_mask):
        # No feasible bin – return all -inf
        return priorities

    # Slack remaining after placing the item in each feasible bin
    slack = caps[feasible_mask] - item  # non‑negative values

    # Deterministic jitter: a tiny value proportional to the original bin index
    # ensures stable tie‑breaking without affecting the ordering of distinct slacks.
    feasible_indices = np.nonzero(feasible_mask)[0].astype(float)
    jitter = feasible_indices * 1e-12  # magnitude far smaller than any realistic slack

    # Best‑fit: higher priority for smaller slack (i.e., tighter fit)
    priorities[feasible_mask] = -slack + jitter

    return priorities
```
