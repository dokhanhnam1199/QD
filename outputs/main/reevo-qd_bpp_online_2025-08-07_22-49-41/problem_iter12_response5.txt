```python
import numpy as np
from typing import Union, List, Tuple, Optional


def priority_v2(
    item: float,
    bins_remain_cap: Union[np.ndarray, List[float], Tuple[float),],
    *,
    step: int = 0,
    epsilon0: float = 0.20,
    decay_rate: float = 0.01,
    alpha: float = 10.0,
    exact_bonus: float = 1e9,
    tolerance: float = 1e-12,
    jitter_scale: float = 1e-9,
    random_state: Optional[Union[int, np.random.Generator]] = None,
) -> np.ndarray:
    """
    Priority function for the online Bin Packing Problem (BPP).

    For a given incoming item and the remaining capacities of the currently
    open bins, this function returns a score for each bin.  The bin with the
    highest score should be selected for the item.

    The scoring scheme combines:
      * a large bonus for exact‑fit bins,
      * an adaptive logistic transform of the normalised slack for non‑exact
        feasible bins,
      * a deterministic jitter to break ties,
      * an ε‑greedy exploration strategy whose ε decays with the number of
        processed items.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : array‑like
        Remaining capacities of the open bins.
    step : int, optional
        Number of items processed so far; used for decaying ε.  Default ``0``.
    epsilon0 : float, optional
        Initial exploration probability.  Default ``0.20``.
    decay_rate : float, optional
        Decay factor for ε (ε = ε₀ / (1 + decay_rate·step)).  Default ``0.01``.
    alpha : float, optional
        Steepness of the logistic curve.  Default ``10.0``.
    exact_bonus : float, optional
        Bonus added to exact‑fit bins to guarantee selection.  Default ``1e9``.
    tolerance : float, optional
        Numerical tolerance for feasibility and exact‑fit detection.
        Default ``1e-12``.
    jitter_scale : float, optional
        Scale of deterministic jitter for tie‑breaking.  Default ``1e-9``.
    random_state : int | np.random.Generator | None, optional
        Seed or generator for random numbers (used for exploration).
        Default ``None``.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; infeasible bins receive ``-np.inf``.
    """
    # Convert input to a NumPy array (float64)
    caps = np.asarray(bins_remain_cap, dtype=np.float64)

    # --------------------------------------------------------------
    # Feasibility mask – a bin must have enough free space.
    # --------------------------------------------------------------
    feasible = caps >= (item - tolerance)

    # Initialise priority vector with -inf (infeasible bins are never chosen)
    priority = np.full_like(caps, -np.inf, dtype=np.float64)

    # If no bin can accommodate the item, return early
    if not feasible.any():
        return priority

    # --------------------------------------------------------------
    # Slack after placing the item (only meaningful for feasible bins)
    # --------------------------------------------------------------
    slack = caps - item

    # --------------------------------------------------------------
    # Exact‑fit detection
    # --------------------------------------------------------------
    exact_fit = np.abs(slack) <= tolerance
    priority[exact_fit] = exact_bonus

    # --------------------------------------------------------------
    # Adaptive logistic scoring for non‑exact feasible bins
    # --------------------------------------------------------------
    non_exact = feasible & ~exact_fit
    if non_exact.any():
        # Characteristic capacity: maximum remaining capacity among feasible bins
        capacity_est = caps[feasible].max()
        capacity_est = max(capacity_est,  # avoid division by zero
                           1e-12)

        # Normalised slack in [0, 1] (0 = perfect fit, 1 = completely empty bin)
        norm_slack = slack[non_exact] / capacity_est
        norm_slack = np.clip(norm_slack, 0.0, 1.0)

        # Fit score: larger values indicate a tighter fit
        fit_score = 1.0 - norm_slack

        # Adaptive midpoint: median of the fit scores for the current feasible set
        median_fit = np.median(fit_score) if fit_score.size > 0 else 0.5

        # Logistic transform (clip argument to avoid overflow)
        arg = alpha * (fit_score - median_fit)
        arg = np.clip(arg, -50.0, 50.0)  # safe range for exp
        logistic_score = 1.0 / (1.0 + np.exp(-arg))

        # Deterministic jitter based on bin index to break ties
        idx_non_exact = np.where(non_exact)[0]
        jitter = jitter_scale * (idx_non_exact.astype(np.float64) /
                                 (len(caps) + 1.astype(np.float64)))

        priority[non_exact] = logistic_score + jitter

    # --------------------------------------------------------------
    # ε‑greedy exploration with decaying ε
    # --------------------------------------------------------------
    epsilon = epsilon0 / (1.0 + decay_rate * step)
    epsilon = min(max(epsilon, 0.0), 1.0)  # clamp to [0, 1]

    # Initialise random number generator
    if isinstance(random_state, np.random.Generator):
        rng = random_state
    else:
        rng = np.random.default_rng(random_state)

    if epsilon > 0.0 and rng.random() < epsilon:
        # Random scores for all feasible bins (uniform in [0, 1])
        rand_vals = rng.random(feasible.sum())
        priority[feasible] = rand_vals
        # Preserve the exact‑fit bonus (exact fits remain dominant)
        priority[exact_fit] = exact_bonus

    return priority
```
