```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Random Fit priority: for each bin, return a random priority if the bin can fit the
    item, otherwise return negative infinity so it is never selected. The bin with the
    maximum random priority among the feasible ones is chosen, effectively sampling
    uniformly from all available bins.
    """
    # Allocate priorities array; start with -inf so infeasible bins are never chosen.
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)

    # Determine feasible bins
    feasible_mask = bins_remain_cap >= item

    # Assign a random number to each feasible bin to encode uniform randomness.
    priorities[feasible_mask] = np.random.rand(np.count_nonzero(feasible_mask))
    return priorities
```
