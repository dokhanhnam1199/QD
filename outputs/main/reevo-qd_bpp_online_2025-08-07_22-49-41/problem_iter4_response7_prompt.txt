{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    Strategy\n    --------\n    1. **Exact fits** (remaining capacity == item) receive the highest possible\n       priority (`np.inf`), guaranteeing they are chosen first.\n    2. **Near fits** are scored by the inverse of the slack (remaining capacity\n       after placing the item).  Smaller slack \u21d2 larger base priority.\n    3. **Adaptive random exploration**: a small jitter proportional to an\n       exploration rate is added to the base priority of near\u2011fit bins.\n       The exploration rate grows when many bins can accommodate the item,\n       encouraging diversification when the choice is ambiguous.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as `bins_remain_cap` containing priority scores.\n        The bin with the highest score (e.g., via ``np.argmax``) should be selected.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure numpy array with float dtype for consistent calculations\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Initialise all priorities as infeasible\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)\n\n    # Compute slack (remaining capacity after hypothetically placing the item)\n    slack = bins_remain_cap - item\n\n    # Feasible bins: slack >= 0\n    feasible_mask = slack >= 0\n    if not np.any(feasible_mask):\n        # No bin can accommodate the item\n        return priorities\n\n    # Exact\u2011fit bins: slack \u2248 0\n    exact_mask = feasible_mask & np.isclose(slack, 0.0, atol=1e-12)\n    priorities[exact_mask] = np.inf\n\n    # Non\u2011exact feasible bins\n    non_exact_mask = feasible_mask & ~exact_mask\n    if np.any(non_exact_mask):\n        # Base priority = 1 / (slack + \u03b5) \u2013 larger for tighter fits\n        eps = 1e-12\n        base_priority = 1.0 / (slack[non_exact_mask] + eps)\n\n        # Adaptive exploration factor:\n        #   More feasible bins \u21d2 higher exploration chance.\n        n_feasible = np.count_nonzero(feasible_mask)\n        n_total = bins_remain_cap.size\n        # Scale between 0.05 and 0.30\n        exploration_rate = 0.05 + 0.25 * (n_feasible - 1) / max(1, n_total - 1)\n        exploration_rate = min(exploration_rate, 0.30)\n\n        # Random jitter in [-1, 1] scaled by exploration_rate and base priority\n        jitter = (np.random.rand(base_priority.size) - 0.5) * 2.0\n        jitter_scaled = jitter * exploration_rate * base_priority\n\n        # Final priority with jitter added\n        final_priority = base_priority + jitter_scaled\n        priorities[non_exact_mask] = final_priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Return priority scores for each bin according to Exact Fit First.\n\n    - Bins that can hold the item exactly (remaining capacity == item) get the highest priority.\n    - Bins that can hold the item with leftover get a priority inversely proportional to the leftover,\n      favouring tighter fits.\n    - Bins that cannot accommodate the item receive a very low priority (negative infinity).\n\n    The bin with the highest priority (e.g., via np.argmax) will be chosen.\n    \"\"\"\n    # Compute slack: remaining capacity after hypothetically placing the item\n    slack = bins_remain_cap - item\n\n    # Initialise all priorities as -inf (i.e., infeasible)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)\n\n    # Mask of bins that can actually accommodate the item (slack >= 0)\n    feasible_mask = slack >= 0\n\n    # If no bin can hold the item, return the all -inf array\n    if not np.any(feasible_mask):\n        return priorities\n\n    # Exact fit bins (slack effectively zero) receive infinite priority\n    exact_mask = feasible_mask & np.isclose(slack, 0.0)\n    priorities[exact_mask] = np.inf\n\n    # For other feasible bins, use inverse slack to favour tighter fits\n    non_exact_mask = feasible_mask & (~exact_mask)\n    epsilon = 1e-12  # safeguard against division by zero (exact fits already handled)\n    priorities[non_exact_mask] = 1.0 / (slack[non_exact_mask] + epsilon)\n\n    return priorities\n\n[Reflection]\nExact fit first, inverse slack for near fits, deterministic, no random jitter, small epsilon.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}