```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function implementing the Almost Full Fit heuristic.

    Parameters
    ----------
    item : float
        Size of the item to pack.
    bins_remain_cap : np.ndarray
        Remaining capacities of all open bins.

    Returns
    -------
    np.ndarray
        Priority values for each bin.  Higher priority means the bin is
        chosen first.  For bins that cannot accommodate the item the
        priority is set to -np.inf.

    Notes
    -----
    In the almost full fit strategy we prefer bins that will be
    almost filled after adding the item.  For a bin that can fit the
    item, the "after packing remaining capacity" is computed as
    `bins_remain_cap - item`.  The smaller this residual is, the higher
    the priority.  The implementation translates this to a score of
    `-(bins_remain_cap - item)`, so that a residual of 0 (perfect fit)
    gives a score of 0, a residual of 0.2 gives -0.2, etc.  The
    largest score is selected.
    """
    # Safe boolean mask for feasible bins
    can_fit = bins_remain_cap >= item
    # Compute negative remaining after packing for applicable bins
    # Unused bins get negative infinity to discourage selection.
    priorities = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    return priorities
```
