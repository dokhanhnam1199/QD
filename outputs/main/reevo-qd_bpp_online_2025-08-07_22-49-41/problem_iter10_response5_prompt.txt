{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online bin packing setting.\n\n    This heuristic prioritises bins that will be nearly full after placing the\n    item.  The score is an exponential decay of the normalised slack\n    (`slack / capacity`).  Exact fits receive the maximum score of 1.0.\n    A tiny \u03b5\u2011greedy exploration and a minuscule jitter are added for\n    deterministic tie\u2011breaking.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  Higher scores indicate higher preference.\n        Bins that cannot accommodate the item receive `-np.inf`.\n    \"\"\"\n    # Guard against empty input\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=float)\n\n    # Convert to float numpy array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Determine bin capacity as the maximum remaining capacity observed\n    capacity = np.max(bins_remain_cap)\n    if capacity <= 0:\n        # No capacity left to place any item\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Small tolerance for floating\u2011point comparisons\n    tol = 1e-12\n\n    # Feasibility mask: bins that can accommodate the item\n    can_fit = bins_remain_cap + tol >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(can_fit):\n        return priorities\n\n    # Slack after placing the item for feasible bins\n    slack = bins_remain_cap[can_fit] - item\n    # Normalised slack in [0, 1]\n    slack_norm = slack / capacity\n\n    # Adaptive steepness: larger items \u2192 steeper decay\n    base_alpha = 10.0\n    alpha = base_alpha * (item / capacity + 0.1)  # ensure >0\n\n    # Deterministic score: exponential decay of slack\n    exact_fit = slack <= tol\n    deterministic_score = np.where(\n        exact_fit,\n        1.0,\n        np.exp(-alpha * slack_norm)\n    )\n\n    # \u03b5\u2011greedy exploration (tiny random perturbation)\n    eps_greedy = 1e-6\n    random_score = np.random.rand(deterministic_score.size)\n    combined_score = (1.0 - eps_greedy) * deterministic_score + eps_greedy * random_score\n\n    # Tiny jitter for deterministic tie\u2011breaking\n    eps_jitter = 1e-9\n    jitter = np.random.uniform(-eps_jitter, eps_jitter, size=combined_score.shape)\n    combined_score += jitter\n\n    # Assign scores to feasible bins\n    priorities[can_fit] = combined_score\n\n    return priorities\n\n[Reflection]\nNormalize slack, use exponential decay, adapt steepness by item size, add epsilon\u2011greedy, jitter for tie\u2011breaks.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}