{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon0: float = 0.20,\n    decay: float = 0.001,\n    smoothing: float = 1e-6,\n) -> np.ndarray:\n    \"\"\"\n    Adaptive epsilon\u2011greedy priority for the online Bin Packing Problem.\n\n    Bins that would leave the smallest remaining capacity after the item is\n    placed receive higher priority (inverse slack).  To avoid premature\n    convergence, an exploration component is blended in with a decaying\n    epsilon.  Infeasible bins are penalised with ``-inf`` so they are never\n    selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    epsilon0 : float, optional\n        Initial exploration probability (default 0.20).\n    decay : float, optional\n        Decay rate of epsilon per call (default 0.001). Larger values reduce\n        exploration faster.\n    smoothing : float, optional\n        Small constant added to the slack term to avoid division by zero\n        and to smooth the inverse\u2011slack calculation.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as ``bins_remain_cap`` containing the priority\n        score for each bin.  Bins that cannot accommodate ``item`` receive\n        ``-inf``.\n    \"\"\"\n    # Convert input to a NumPy float array for consistent operations\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Slack after placing the item\n    slack = bins_remain_cap - item\n    feasible_mask = slack >= 0\n\n    # No feasible bin \u2192 return all -inf\n    if not np.any(feasible_mask):\n        return priorities\n\n    # ------------------------------------------------------------------\n    # Adaptive epsilon: decays over the number of calls to this\n    # function.  The counter is stored as a function attribute.\n    # ------------------------------------------------------------------\n    if not hasattr(priority_v2, \"_call_counter\"):\n        priority_v2._call_counter = 0\n    step = priority_v2._call_counter\n    priority_v2._call_counter += 1\n\n    epsilon = epsilon0 / (1.0 + decay * step)\n    # Keep epsilon within [0, epsilon0] bounds\n    epsilon = max(0.0, min(epsilon0, epsilon))\n\n    # ------------------------------------------------------------------\n    # Compute the exploitation component: inverse slack, normalised.\n    # ------------------------------------------------------------------\n    inv_slack = 1.0 / (1.0 + slack[feasible_mask] + smoothing)  # >0\n    inv_slack_norm = inv_slack / inv_slack.sum()\n\n    # ------------------------------------------------------------------\n    # Compute the exploration component: random scores, normalised.\n    # ------------------------------------------------------------------\n    rand_scores = np.random.rand(np.count_nonzero(feasible_mask))\n    rand_norm = rand_scores / rand_scores.sum()\n\n    # ------------------------------------------------------------------\n    # Blend exploitation and exploration.\n    # ------------------------------------------------------------------\n    combined = (1.0 - epsilon) * inv_slack_norm + epsilon * rand_norm\n\n    # Assign combined priorities to feasible bins\n    priorities[feasible_mask] = combined\n\n    return priorities\n\n[Reflection]\nUse adaptive epsilon decay, normalize inverse slack, add smoothing, randomize, and balance exploitation/exploration for robust priority.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}