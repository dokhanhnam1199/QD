```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    step: int = 0,
    epsilon0: float = 0.20,
    decay_rate: float = 0.01,
    alpha: float = 10.0,
    exact_bonus: float = 1e6,
    tolerance: float = 1e-12,
    random_state: int | np.random.Generator | None = None,
) -> np.ndarray:
    """
    Priority function for online Bin Packing Problem with adaptive median scaling,
    huge exact‑fit bonus, logistic transform, decaying ε‑greedy exploration,
    and deterministic jitter for tie‑breaking.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of the currently open bins.
    step : int, optional
        Number of items processed so far. Default 0.
    epsilon0 : float, optional
        Initial exploration probability. Default 0.20.
    decay_rate : float, optional
        Decay factor for ε (ε = ε₀ / (1 + decay_rate * step)). Default 0.01.
    alpha : float, optional
        Steepness of the logistic curve. Default 10.0.
    exact_bonus : float, optional
        Bonus added to exact‑fit bins to guarantee selection. Default 1e6.
    tolerance : float, optional
        Numerical tolerance for floating‑point comparisons. Default 1e-12.
    random_state : int | np.random.Generator | None, optional
        Seed or generator for random numbers (used for exploration). Default None.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; infeasible bins have -np.inf.
    """
    caps = np.asarray(bins_remain_cap, dtype=np.float64)

    # Feasibility mask
    feasible = caps >= (item - tolerance)

    # Initialise priorities to -inf
    priorities = np.full_like(caps, -np.inf, dtype=np.float64)

    # If no bin can accommodate the item, return -inf array
    if not feasible.any():
        return priorities

    # Slack after placing the item
    slack = caps - item

    # Exact fit detection
    exact_fit = np.abs(slack) <= tolerance
    priorities[exact_fit] = exact_bonus

    # Non‑exact feasible bins
    non_exact = feasible & ~exact_fit

    if non_exact.any():
        # Normalise slack by max remaining capacity among feasible bins
        max_cap = caps[feasible].max()
        max_cap = max(max_cap, tolerance)  # avoid division by zero

        norm_slack = slack[non_exact] / max_cap  # in [0, 1]
        fit_score = 1.0 - norm_slack  # tighter fit -> larger score

        # Adaptive logistic: median fit score defines midpoint
        median_fit = np.median(fit_score)
        logistic_arg = alpha * (fit_score - median_fit)

        # Prevent overflow
        logistic_arg = np.clip(logistic_arg, -50, 50)
        logistic_score = 1.0 / (1.0 + np.exp(-logistic_arg))

        # Deterministic jitter based on bin index for tie‑breaking
        idx_non_exact = np.where(non_exact)[0]
        jitter = 1e-12 * (idx_non_exact / (len(caps) + 1.0))

        priorities[non_exact] = logistic_score + jitter

    # Decaying epsilon‑greedy exploration
    epsilon = epsilon0 / (1.0 + decay_rate * step)

    # Random number generator
    rng = (
        random_state
        if isinstance(random_state, np.random.Generator)
        else np.random.default_rng(random_state)
    )

    if rng.random() < epsilon:
        # Assign random priorities to all feasible bins
        random_vals = rng.random(feasible.sum())
        priorities[feasible] = random_vals
        # Preserve exact‑fit bonus
        priorities[exact_fit] = exact_bonus

    return priorities
```
