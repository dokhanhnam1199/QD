```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for the online Bin Packing Problem.

    For each bin we compute a priority score; the bin with the highest score
    is selected for the incoming item.

    - Infeasible bins receive a large negative penalty (``-np.inf``) so they are never chosen.
    - Feasible bins are scored by the negative residual capacity after placing
      the item (smaller residual → higher priority).
    - A tiny epsilon term proportional to the current remaining capacity breaks
      ties in favour of bins that are already more filled.
    - Exact fits (residual within a tolerance of zero) obtain a large constant
      ``exact_bonus`` to guarantee they outrank any other feasible bin.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        1‑D array of priority scores, same shape as ``bins_remain_cap``.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)

    # tolerance for floating‑point comparisons
    tolerance = 1e-12

    # residual capacity if the item were placed in each bin
    residual = caps - item

    # feasibility mask (allow a small negative tolerance)
    feasible = residual >= -tolerance

    # initialize priorities with a heavy penalty for infeasible bins
    priorities = np.full_like(caps, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # core best‑fit: higher priority for smaller residual (tighter fit)
    core_priority = -residual[feasible]

    # tie‑breaker: prefer bins that are already more filled (smaller remaining capacity)
    epsilon = 1e-6
    core_priority -= epsilon * caps[feasible]

    priorities[feasible] = core_priority

    # exact‑fit detection: residual close to zero within tolerance
    exact_mask = feasible & np.isclose(residual, 0.0, atol=tolerance)

    if np.any(exact_mask):
        exact_bonus = 1e9
        priorities[exact_mask] = exact_bonus - epsilon * caps[exact_mask]

    return priorities
```
