```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a priority score for each bin in an online Bin Packing problem.

    The priority is higher for bins that would leave less remaining capacity
    after placing the incoming item, with a slight bias toward bins that are
    already more full (smaller remaining capacity).  Bins that cannot accommodate
    the item receive a large negative penalty, effectively excluding them from
    consideration.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        Array of priority scores with the same shape as `bins_remain_cap`.
        The bin with the highest value is the most suitable choice.
    """
    # Ensure we work with a float array for precision.
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Residual capacity after hypothetically placing the item.
    residual = caps - item

    # Feasibility mask: True where the item fits.
    feasible = residual >= 0

    # Large negative constant to disqualify infeasible bins.
    penalty = -np.inf
    priorities = np.full_like(caps, penalty, dtype=float)

    if np.any(feasible):
        # Best‑Fit core: higher score for smaller residual.
        priorities[feasible] = -residual[feasible]
        # Tie‑breaker: prefer bins that are already more filled (smaller caps).
        epsilon = 1e-6
        priorities[feasible] -= epsilon * caps[feasible]

    return priorities
```
