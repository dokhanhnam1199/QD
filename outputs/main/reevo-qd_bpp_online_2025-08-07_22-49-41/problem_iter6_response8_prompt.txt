{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    Strategy\n    --------\n    1. **Exact fits** (remaining capacity == item) receive the highest possible\n       priority (`np.inf`), guaranteeing they are chosen first.\n    2. **Near fits** are scored by the inverse of the slack (remaining capacity\n       after placing the item).  Smaller slack \u21d2 larger base priority.\n    3. **Adaptive random exploration**: a small jitter proportional to an\n       exploration rate is added to the base priority of near\u2011fit bins.\n       The exploration rate grows when many bins can accommodate the item,\n       encouraging diversification when the choice is ambiguous.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as `bins_remain_cap` containing priority scores.\n        The bin with the highest score (e.g., via ``np.argmax``) should be selected.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure numpy array with float dtype for consistent calculations\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Initialise all priorities as infeasible\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)\n\n    # Compute slack (remaining capacity after hypothetically placing the item)\n    slack = bins_remain_cap - item\n\n    # Feasible bins: slack >= 0\n    feasible_mask = slack >= 0\n    if not np.any(feasible_mask):\n        # No bin can accommodate the item\n        return priorities\n\n    # Exact\u2011fit bins: slack \u2248 0\n    exact_mask = feasible_mask & np.isclose(slack, 0.0, atol=1e-12)\n    priorities[exact_mask] = np.inf\n\n    # Non\u2011exact feasible bins\n    non_exact_mask = feasible_mask & ~exact_mask\n    if np.any(non_exact_mask):\n        # Base priority = 1 / (slack + \u03b5) \u2013 larger for tighter fits\n        eps = 1e-12\n        base_priority = 1.0 / (slack[non_exact_mask] + eps)\n\n        # Adaptive exploration factor:\n        #   More feasible bins \u21d2 higher exploration chance.\n        n_feasible = np.count_nonzero(feasible_mask)\n        n_total = bins_remain_cap.size\n        # Scale between 0.05 and 0.30\n        exploration_rate = 0.05 + 0.25 * (n_feasible - 1) / max(1, n_total - 1)\n        exploration_rate = min(exploration_rate, 0.30)\n\n        # Random jitter in [-1, 1] scaled by exploration_rate and base priority\n        jitter = (np.random.rand(base_priority.size) - 0.5) * 2.0\n        jitter_scaled = jitter * exploration_rate * base_priority\n\n        # Final priority with jitter added\n        final_priority = base_priority + jitter_scaled\n        priorities[non_exact_mask] = final_priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute smooth bin priorities for online Bin Packing using a sigmoid\n    fit\u2011score.  Bins that leave very little slack after inserting the\n    item receive the highest scores.  The steepness of the sigmoid is\n    adapted online based on the typical relative slack of the feasible\n    bins, giving more emphasis to tight fits when bins are relatively\n    full.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; the bin with the largest score is chosen.\n        Bins that cannot accommodate the item receive ``-np.inf``.\n    \"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Identify bins that can fit the item\n    fits = bins >= item\n\n    if not np.any(fits):\n        # No feasible bin\n        return np.full(bins.shape, -np.inf)\n\n    # Slack left after placing the item\n    slack = bins - item\n\n    # Relative slack (0 for perfect fit, \u22641 otherwise)\n    rel_slack = np.zeros_like(bins)\n    rel_slack[fits] = slack[fits] / bins[fits]\n\n    # Adapt the steepness parameter (alpha) based on typical slack\n    median_rel = np.median(rel_slack[fits])\n    # Base steepness: 5.0; scale so alpha \u2208 [5, 10] depending on median_rel.\n    alpha = 5.0 * (2.0 - median_rel)\n\n    # Sigmoid fit\u2011score: 0.5 when rel_slack==0, decreasing as slack grows\n    scores = np.full(bins.shape, -np.inf)\n    scores[fits] = 1.0 / (1.0 + np.exp(alpha * rel_slack[fits]))\n    # Scale to [0, 1] so perfect fit yields 1.0\n    scores[fits] *= 2.0\n    np.clip(scores, 0.0, 1.0, out=scores)\n\n    return scores\n\n[Reflection]\nPrefer smooth adaptive sigmoid of relative slack; adjust steepness via median slack; avoid random jitter.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}