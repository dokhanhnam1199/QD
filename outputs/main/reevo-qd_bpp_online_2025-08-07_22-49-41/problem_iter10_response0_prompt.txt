{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Best\u2011Fit priority for the online Bin Packing Problem.\n\n    For each bin we compute the leftover capacity after (hypothetically) placing the item.\n    - If the item fits, the priority is the negative leftover (larger \u21d2 smaller leftover).\n    - If it does not fit, the bin receives a large negative penalty to exclude it.\n    An epsilon term based on the current fill level breaks ties in favour of the more\n    already\u2011filled bin, which is a common heuristic refinement.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of the remaining capacity of each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores (same shape as `bins_remain_cap`).\n    \"\"\"\n    # Ensure we work with a float array for precision.\n    caps = bins_remain_cap.astype(float)\n\n    # Remaining capacity if we were to put the item into each bin.\n    residual = caps - item\n\n    # Feasibility mask: True where the item fits.\n    feasible = residual >= 0\n\n    # Large negative constant to disqualify infeasible bins.\n    penalty = -1e9\n    priorities = np.full_like(caps, penalty, dtype=float)\n\n    # Best\u2011Fit core: higher score for smaller residual (i.e., tighter fit).\n    # Using negative residual makes the smallest residual the largest priority.\n    priorities[feasible] = -residual[feasible]\n\n    # Tie\u2011breaker: prefer bins that are already more filled (i.e., have smaller original cap).\n    # Adding a tiny epsilon proportional to the current remaining capacity flips ties.\n    epsilon = 1e-6\n    priorities[feasible] += epsilon * caps[feasible]\n\n    return priorities\n\n[Reflection]\nPrefer deterministic best\u2011fit; avoid random exploration; use tiny epsilon tie\u2011breakers; heavily penalize infeasible bins; prioritize exact fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}