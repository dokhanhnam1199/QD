{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Sigmoid Fit Score priority for online Bin Packing.\n\n    For each currently open bin we compute a smooth priority that favours\n    *tight* fits (i.e., small remaining slack after placing the item).  The\n    raw slack is transformed by a logistic (sigmoid) function, producing a\n    value in ``[0, 1]`` \u2013 higher values indicate a more attractive bin.\n    Bins that cannot accommodate the item receive a priority of ``0``.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores, one per bin. The bin with the highest score should be\n        selected for the item.\n    \"\"\"\n    # Convert to a NumPy array for vectorised work.\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # ------------------------------------------------------------------\n    # 1) Feasibility mask \u2013 a bin must have enough free space.\n    # ------------------------------------------------------------------\n    feasible = caps >= item\n\n    #  (Will be overwritten with actual priorities later.)\n    priority = np.zeros_like(caps, dtype=np.float64)\n\n    if not feasible.any():\n        # No bin can accept the item \u2013 return all zeros.\n        return priority\n\n    # ------------------------------------------------------------------\n    # 2) Compute slack (remaining capacity after placing the item) for\n    #    feasible bins only.\n    # ------------------------------------------------------------------\n    slack = np.empty_like(caps)\n    slack[:] = np.nan\n    slack[feasible] = caps[feasible] - item\n\n    # ------------------------------------------------------------------\n    # 3) Estimate the (fixed) bin capacity.\n    #    All bins share the same total capacity C; the current maximum\n    #    remaining capacity is a safe estimator for C.\n    # ------------------------------------------------------------------\n    capacity_est = caps.max() if caps.size > 0 else 1.0\n    capacity_est = max(capacity_est, 1e-12)      # protect against division by zero\n\n    # ------------------------------------------------------------------\n    # 4) Normalise the slack to [0, 1] (0 = perfect fit, 1 = empty bin).\n    # ------------------------------------------------------------------\n    norm_slack = slack / capacity_est\n\n    # ------------------------------------------------------------------\n    # 5) Compute a \u201cfit score\u201d that is large when slack is small.\n    #    fit_score = 1 - norm_slack \u2208 [0, 1]  (1 = perfect fit).\n    # ------------------------------------------------------------------\n    fit_score = 1.0 - norm_slack\n\n    # ------------------------------------------------------------------\n    # 6) Apply a sigmoid to the fit score.\n    #\n    #    priority = 1 / (1 + exp(-\u03b1\u00b7(fit_score - mid_point)))\n    #\n    #    * \u03b1  \u2013 steepness (larger \u21d2 sharper distinction between tight\n    #            and loose fits).\n    #    * mid_point \u2013 sigmoid centre (fit_score at which priority = 0.5).\n    # ------------------------------------------------------------------\n    alpha = 12.0        # controls how aggressively we prefer tight fits\n    mid_point = 0.5    # centre of the logistic curve\n\n    sigmoid_arg = alpha * (fit_score - mid_point)\n    priority[feasible] = 1.0 / (1.0 + np.exp(-sigmoid_arg))\n\n    # ------------------------------------------------------------------\n    # 7) Infeasible bins keep priority 0 (already set at initialisation).\n    # ------------------------------------------------------------------\n    return priority\n\n[Reflection]\nNormalize slack, use logistic scoring, tune alpha, estimate capacity, add exploration, set infeasible bins to zero.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}