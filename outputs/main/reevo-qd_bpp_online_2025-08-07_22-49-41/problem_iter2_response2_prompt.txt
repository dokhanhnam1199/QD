{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function that uses an \u03b5\u2011greedy strategy for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        The size of the item that is about to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    priorities : np.ndarray\n        Array of the same shape as `bins_remain_cap`.  The bin with the\n        highest value will be selected by the caller.\n    \"\"\"\n    # Encourage explorations with a small fixed \u03b5.\n    epsilon = 0.15   # ~15% chance to explore a random bin\n\n    # Ensure we have a float array for consistent behaviour\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Start with very low priority for all bins; infeasible bins stay low\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Find indices of bins that can accommodate the item\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return priorities  # No bin can take the item; all are -inf\n\n    if np.random.rand() < epsilon:\n        # Exploration: assign random priorities to every feasible bin\n        # (uniform in [0, 1)) so the selection is effectively random\n        random_scores = np.random.rand(np.count_nonzero(fit_mask))\n        priorities[fit_mask] = random_scores\n    else:\n        # Greedy: best\u2011fit \u2013 choose the bin that leaves the smallest\n        # remaining capacity after placing the item\n        slack = bins_remain_cap[fit_mask] - item   # remaining capacity left after fit\n        # Smaller slack => higher priority (closer to being full)\n        # We use -slack to turn minimization of slack into maximization\n        priorities[fit_mask] = -slack\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Best\u2011Fit priority for the online Bin Packing Problem.\n\n    For each bin we compute the leftover capacity after (hypothetically) placing the item.\n    - If the item fits, the priority is the negative leftover (larger \u21d2 smaller leftover).\n    - If it does not fit, the bin receives a large negative penalty to exclude it.\n    An epsilon term based on the current fill level breaks ties in favour of the more\n    already\u2011filled bin, which is a common heuristic refinement.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of the remaining capacity of each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores (same shape as `bins_remain_cap`).\n    \"\"\"\n    # Ensure we work with a float array for precision.\n    caps = bins_remain_cap.astype(float)\n\n    # Remaining capacity if we were to put the item into each bin.\n    residual = caps - item\n\n    # Feasibility mask: True where the item fits.\n    feasible = residual >= 0\n\n    # Large negative constant to disqualify infeasible bins.\n    penalty = -1e9\n    priorities = np.full_like(caps, penalty, dtype=float)\n\n    # Best\u2011Fit core: higher score for smaller residual (i.e., tighter fit).\n    # Using negative residual makes the smallest residual the largest priority.\n    priorities[feasible] = -residual[feasible]\n\n    # Tie\u2011breaker: prefer bins that are already more filled (i.e., have smaller original cap).\n    # Adding a tiny epsilon proportional to the current remaining capacity flips ties.\n    epsilon = 1e-6\n    priorities[feasible] += epsilon * caps[feasible]\n\n    return priorities\n\n[Reflection]\nFavor deterministic best\u2011fit, heavily penalize infeasible bins, add tiny epsilon for tie\u2011breaking, avoid randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}