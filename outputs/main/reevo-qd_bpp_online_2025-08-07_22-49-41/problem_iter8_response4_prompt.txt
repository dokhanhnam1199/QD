{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Deterministic priority function for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; higher values indicate a more attractive bin.\n        Bins that cannot accommodate the item receive a score of 0.\n    \"\"\"\n    # Ensure we work with a NumPy array of float values\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Initialize all priorities to zero (for infeasible bins)\n    priorities = np.zeros_like(caps, dtype=np.float64)\n\n    # Feasibility mask: bin can accommodate the item\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities  # No bin can take the item\n\n    # Slack remaining after placing the item\n    slack = caps[feasible] - item\n\n    # Normalise slack by the maximum slack among feasible bins\n    max_slack = np.max(slack) if slack.size > 0 else 0.0\n    if max_slack > 0.0:\n        fit_score = 1.0 - slack / max_slack  # 0 <= fit_score <= 1\n    else:\n        # All feasible bins are perfectly tight\n        fit_score = np.ones_like(slack)\n\n    # Logistic transform to sharpen preference for tight fits\n    alpha = 12.0          # steepness of the sigmoid\n    mid_point = 0.5       # centre of the sigmoid\n    sigmoid_arg = alpha * (fit_score - mid_point)\n    priorities[feasible] = 1.0 / (1.0 + np.exp(-sigmoid_arg))\n\n    return priorities\n\n[Reflection]\nNormalize slack, apply steep sigmoid, prioritize exact fits, keep deterministic scores, eliminate random exploration, handle ties consistently.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}