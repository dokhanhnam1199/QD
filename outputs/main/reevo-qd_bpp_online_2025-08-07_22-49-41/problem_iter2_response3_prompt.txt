{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function that uses an \u03b5\u2011greedy strategy for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        The size of the item that is about to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    priorities : np.ndarray\n        Array of the same shape as `bins_remain_cap`.  The bin with the\n        highest value will be selected by the caller.\n    \"\"\"\n    # Encourage explorations with a small fixed \u03b5.\n    epsilon = 0.15   # ~15% chance to explore a random bin\n\n    # Ensure we have a float array for consistent behaviour\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Start with very low priority for all bins; infeasible bins stay low\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Find indices of bins that can accommodate the item\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return priorities  # No bin can take the item; all are -inf\n\n    if np.random.rand() < epsilon:\n        # Exploration: assign random priorities to every feasible bin\n        # (uniform in [0, 1)) so the selection is effectively random\n        random_scores = np.random.rand(np.count_nonzero(fit_mask))\n        priorities[fit_mask] = random_scores\n    else:\n        # Greedy: best\u2011fit \u2013 choose the bin that leaves the smallest\n        # remaining capacity after placing the item\n        slack = bins_remain_cap[fit_mask] - item   # remaining capacity left after fit\n        # Smaller slack => higher priority (closer to being full)\n        # We use -slack to turn minimization of slack into maximization\n        priorities[fit_mask] = -slack\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Compute bin priorities using a Sigmoid Fit Score strategy.\n\n    The priority is based on the residual space after inserting the item\n    into a bin.  Bins that leave almost no slack (i.e., perfect fit)\n    obtain the highest score.  The decay of the score is governed by a\n    sigmoid (logistic) function over the relative residual\n    `r = (remaining - item) / remaining`.\n\n    Bins that cannot accommodate the item receive a very low priority\n    (``-np.inf``) so that they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be inserted.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the candidate bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores in the range [0, 1], with 1 corresponding to a perfect fit.\n    \"\"\"\n    # Ensure we work on a NumPy array of floats\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Bin can hold the item?\n    fits = bins >= item\n\n    # Residual space if item fits\n    residual = bins - item\n\n    # Relative residual: 0 when perfect fit, increasing with slack\n    rel_residual = np.zeros_like(bins)\n    with np.errstate(divide='ignore', invalid='ignore'):\n        rel_residual = np.where(\n            fits & (bins > 0),\n            residual / bins,\n            0.0\n        )\n\n    # Sigmoid decay parameter \u2013 steeper values emphasize tight fits.\n    alpha = 10.0\n    scores = np.where(\n        fits,\n        1.0 / (1.0 + np.exp(alpha * rel_residual)),\n        -np.inf   # unfit bins get minimal score\n    )\n\n    # Scale to [0, 1] so perfect fit yields 1.0\n    scores *= 2.0\n    np.clip(scores, 0.0, 1.0, out=scores)\n\n    return scores\n\n[Reflection]\nUse smooth, monotonic fit scores (sigmoid), reward tight fits, drop fixed \u03b5 randomness, adapt steepness parameter online.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}