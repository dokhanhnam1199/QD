{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function that uses an \u03b5\u2011greedy strategy for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        The size of the item that is about to be inserted.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    priorities : np.ndarray\n        Array of the same shape as `bins_remain_cap`.  The bin with the\n        highest value will be selected by the caller.\n    \"\"\"\n    # Encourage explorations with a small fixed \u03b5.\n    epsilon = 0.15   # ~15% chance to explore a random bin\n\n    # Ensure we have a float array for consistent behaviour\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Start with very low priority for all bins; infeasible bins stay low\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Find indices of bins that can accommodate the item\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return priorities  # No bin can take the item; all are -inf\n\n    if np.random.rand() < epsilon:\n        # Exploration: assign random priorities to every feasible bin\n        # (uniform in [0, 1)) so the selection is effectively random\n        random_scores = np.random.rand(np.count_nonzero(fit_mask))\n        priorities[fit_mask] = random_scores\n    else:\n        # Greedy: best\u2011fit \u2013 choose the bin that leaves the smallest\n        # remaining capacity after placing the item\n        slack = bins_remain_cap[fit_mask] - item   # remaining capacity left after fit\n        # Smaller slack => higher priority (closer to being full)\n        # We use -slack to turn minimization of slack into maximization\n        priorities[fit_mask] = -slack\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Exact\u2011Fit\u2011First priority for the online Bin Packing Problem.\n\n    A bin that can accommodate the item *exactly* receives the highest score.\n    Among the feasible bins, those that leave the smallest leftover capacity are\n    preferred.  Bins that cannot hold the item are assigned a very low priority.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities of the current bins.\n\n    Returns:\n        A NumPy array of the same shape as ``bins_remain_cap`` containing the\n        priority score for each bin.  The bin with the highest score will be\n        selected for placement.\n    \"\"\"\n    # Ensure floating\u2011point arithmetic.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining capacity after hypothetically placing the item.\n    # Positive => feasible; negative => infeasible.\n    leftover = caps - item\n\n    # Initialise all priorities to a very low value (infeasible).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Mask of feasible bins.\n    feasible = leftover >= 0\n\n    # Exact fits (leftover == 0) should outrank any other feasible bin.\n    # Use -leftover as the base priority: exact fits get 0, others get a negative value.\n    # Since we pick the highest priority, 0 > any negative, achieving Exact\u2011Fit\u2011First.\n    priorities[feasible] = -leftover[feasible]\n\n    # Optional tweak: if you prefer a strictly larger value for exact fits\n    # (e.g., to avoid ties caused by floating\u2011point noise), you can add a tiny\n    # epsilon or set them to a large constant:\n    # exact_fit = np.isclose(leftover, 0, atol=1e-12)\n    # priorities[exact_fit] = np.inf\n\n    return priorities\n\n[Reflection]\nFavor exact fits, then minimal slack; add random exploration and FP tolerance to prevent tie\u2011issues.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}