```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing that implements an
    *Exact‑Fit First* strategy with deterministic best‑fit ordering.

    Parameters
    ----------
    item : float
        Size of the item to be inserted.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        Array of priority scores (same shape as bins_remain_cap).
        - Bins that can accommodate the item exactly receive ``np.inf``.
        - For other feasible bins the score is inversely proportional
          to the remaining slack (``1/(slack + eps)``), so bins that
          leave less unused capacity get higher priority.
        - Infeasible bins are assigned ``-np.inf``.
    Notes
    -----
    The caller may use ``np.argmax`` on the returned array to obtain
    the index of the bin with the highest priority. When several bins
    share the same priority value, ``np.argmax`` returns the first
    index, providing a consistent tie‑breaking rule.
    """
    # Ensure a float array for consistent arithmetic
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)

    # Compute slack after hypothetically placing the item
    slack = bins_remain_cap - item

    # Initialise all priorities with -inf (infeasible)
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Feasibility mask: slack >= 0
    feasible_mask = slack >= 0

    if not np.any(feasible_mask):
        # No bin can accommodate the item
        return priorities

    # Exact fit: slack effectively zero (use tolerance for floating error)
    exact_mask = feasible_mask & np.isclose(slack, 0.0, atol=1e-9)

    # Assign infinite priority to exact fits
    priorities[exact_mask] = np.inf

    # Non‑exact but feasible bins: priority = 1/(slack + eps)
    non_exact_mask = feasible_mask & ~exact_mask
    eps = 1e-12  # safeguard for very small positive slack values
    priorities[non_exact_mask] = 1.0 / (slack[non_exact_mask] + eps)

    return priorities
```
