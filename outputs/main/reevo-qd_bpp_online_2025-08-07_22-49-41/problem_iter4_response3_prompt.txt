{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritizes exact fits first.\n    - For remaining bins, prefers the smallest slack (closest to full).\n    - Randomly explores other bins with probability epsilon.\n    - Uses a tolerance to detect exact fits and to avoid floating\u2011point ties.\n    \"\"\"\n    eps = 0.15          # exploration probability\n    exact_bonus = 1e6   # high value to guarantee exact fit preference\n    tolerance = 1e-12   # tolerance for floating\u2011point comparison\n\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    leftover = caps - item\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    feasible = leftover >= -tolerance\n    if not np.any(feasible):\n        return priorities\n\n    # Exploration: assign random priorities to feasible bins\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] = rand_scores\n        return priorities\n\n    # Indices of feasible bins\n    idx = np.where(feasible)[0]\n    slack = leftover[feasible]\n\n    # Exact fit bins\n    exact_mask = np.isclose(slack, 0.0, atol=tolerance)\n    if np.any(exact_mask):\n        priorities[idx[exact_mask]] = exact_bonus\n\n    # Non\u2011exact feasible bins: prioritize smallest slack\n    non_exact_mask = ~exact_mask\n    if np.any(non_exact_mask):\n        jitter = 1e-12 * np.random.rand(np.count_nonzero(non_exact_mask))\n        priorities[idx[non_exact_mask]] = -slack[non_exact_mask] + jitter\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Compute bin priorities using a Sigmoid Fit Score strategy.\n\n    The priority is based on the residual space after inserting the item\n    into a bin.  Bins that leave almost no slack (i.e., perfect fit)\n    obtain the highest score.  The decay of the score is governed by a\n    sigmoid (logistic) function over the relative residual\n    `r = (remaining - item) / remaining`.\n\n    Bins that cannot accommodate the item receive a very low priority\n    (``-np.inf``) so that they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be inserted.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the candidate bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores in the range [0, 1], with 1 corresponding to a perfect fit.\n    \"\"\"\n    # Ensure we work on a NumPy array of floats\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Bin can hold the item?\n    fits = bins >= item\n\n    # Residual space if item fits\n    residual = bins - item\n\n    # Relative residual: 0 when perfect fit, increasing with slack\n    rel_residual = np.zeros_like(bins)\n    with np.errstate(divide='ignore', invalid='ignore'):\n        rel_residual = np.where(\n            fits & (bins > 0),\n            residual / bins,\n            0.0\n        )\n\n    # Sigmoid decay parameter \u2013 steeper values emphasize tight fits.\n    alpha = 10.0\n    scores = np.where(\n        fits,\n        1.0 / (1.0 + np.exp(alpha * rel_residual)),\n        -np.inf   # unfit bins get minimal score\n    )\n\n    # Scale to [0, 1] so perfect fit yields 1.0\n    scores *= 2.0\n    np.clip(scores, 0.0, 1.0, out=scores)\n\n    return scores\n\n[Reflection]\nAdd adaptive epsilon, sigmoid slack weighting, item\u2011size penalty, exact\u2011fit bonus, and bin density consideration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}