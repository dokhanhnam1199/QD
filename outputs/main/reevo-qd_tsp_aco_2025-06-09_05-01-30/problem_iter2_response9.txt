```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic function for TSP using nearest neighbors, centrality,
    sparsification, and normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Nearest Neighbors: Prioritize edges to closer neighbors.
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    # 2. Node Centrality:  Nodes with lower average distance to all other nodes
    #    are considered more "central" and connections to them are favored.
    avg_distances = np.mean(distance_matrix, axis=1)  # Average distance from each node to all others
    centrality_scores = 1 / avg_distances  # Higher score for more central nodes
    # Normalize centrality scores to [0, 1] to prevent domination of other factors
    centrality_scores = (centrality_scores - np.min(centrality_scores)) / (np.max(centrality_scores) - np.min(centrality_scores))

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Inverse distance
                heuristic_factor_1 = 1 / distance if distance > 0 else 0

                # Nearest neighbor rank.
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = 1 / nn_rank

                #Centrality of nodes i and j
                heuristic_factor_3 = centrality_scores[i] * centrality_scores[j]


                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # 3. Sparsification: Keep only a limited number of edges per node.
    k = int(np.sqrt(n))  # Keep sqrt(n) nearest edges to each node
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]  # Indices of the highest values in descending order
        keep_indices = indices[:k]

        mask = np.ones(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # 4. Normalization: Normalize heuristic values to [0, 1].
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
