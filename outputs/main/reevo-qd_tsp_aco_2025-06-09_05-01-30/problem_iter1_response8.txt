```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and sparsification to indicate the likelihood of including each edge in the optimal solution.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as the distance matrix, where each element
                      indicates the desirability of including the corresponding edge in the solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the mean distance from each node to all other nodes
    node_means = np.mean(distance_matrix, axis=1)

    # Calculate the inverse distance, ensuring no division by zero
    inverse_distance = np.where(distance_matrix > 0, 1 / distance_matrix, 0)

    # Incorporate node-specific 'gravity' (lower mean distance implies higher gravity)
    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] > 0:
                heuristic_matrix[i, j] = inverse_distance[i, j] * (node_means[i] + node_means[j])
            else:
                heuristic_matrix[i, j] = 0  # Or a small value to avoid division by zero later

    # Normalize the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    # Sparsify the matrix: keep only edges with heuristics above a certain threshold
    #  based on the node mean heuristic
    threshold_multiplier = 0.4  # Adjust this parameter as needed for sparsity
    for i in range(n):
        threshold = threshold_multiplier * np.mean(heuristic_matrix[i, :])
        for j in range(n):
            if heuristic_matrix[i, j] < threshold:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
