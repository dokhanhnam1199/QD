```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, handling of edge cases, and robust normalization.
    This version incorporates a global distance context and handles zero heuristic values more gracefully.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    # Global distance context: average distance across the entire matrix.
    global_avg_distance = np.mean(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance, scaled by global average
                heuristic_factor_1 = (global_avg_distance / distance) if distance > 0 else 0

                # Heuristic factor 2: Exponential decay based on nearest neighbor rank
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1 if j in nearest_neighbors[i] else n
                heuristic_factor_2 = np.exp(-nn_rank / np.sqrt(n))  # Tunable decay rate.  Higher value -> slower decay, adapt to N

                # Heuristic factor 3: Combined average distance for both nodes, relative to the global average
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                heuristic_factor_3 = (2 * global_avg_distance) / (avg_dist_i + avg_dist_j) if (avg_dist_i + avg_dist_j) > 0 else 0

                # Combine factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Adaptive Sparsification: Keep top K edges based on a fraction of N, ensuring at least 1
    k = max(1, int(np.sqrt(n))) # Ensure at least one edge is kept.
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]  # Indices of the highest values in descending order
        keep_indices = indices[:k]       # Indices to retain

        mask = np.ones(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # Robust Normalization with small default value for exploration.
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.full_like(heuristic_matrix, 1e-6) # Set all to a small constant for exploration

    return heuristic_matrix
```
