```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, handling of edge cases, and robust normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Avoid division by zero, small offset

                # Heuristic factor 2:  Is j among i's nearest neighbors? Prioritize connections to nearer neighbours.
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1 if j in nearest_neighbors[i] else n
                heuristic_factor_2 = 1 / (nn_rank**2)  # Sharper decay than 1/rank

                # Heuristic factor 3: Adaptive sparsification based on local distances.
                # If the distance to j is significantly larger than the average distance to i's nearest neighbors,
                # penalize this edge.
                k_nearest = min(5, n - 1) # consider top 5 nearest neighbours only.
                nearest_distances = distance_matrix[i, nearest_neighbors[i, 1:k_nearest+1]] #exclude self
                avg_nearest_dist = np.mean(nearest_distances) if len(nearest_distances)>0 else distance #handle isolated cases
                heuristic_factor_3 = np.exp(-max(0, (distance - avg_nearest_dist) / (avg_nearest_dist + 1e-9))) # Avoid division by zero

                # Combine the factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Sparsify the matrix: keep only top K edges for each node based on adaptive threshold
    # Adaptive thresholding based on row-wise mean
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_heuristic = np.mean(row)
        threshold = 0.1 * mean_heuristic  # Keep values above a fraction of the mean

        heuristic_matrix[i, row < threshold] = 0  # Set values below threshold to zero


    # Normalize the heuristic values row-wise, considering local node proximity
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i, :])
        if row_sum > 0:
            heuristic_matrix[i, :] = heuristic_matrix[i, :] / row_sum
        else:
            # If all heuristic values are zero for a row, distribute uniformly to allow exploration
            heuristic_matrix[i, :] = np.ones(n) / n

    return heuristic_matrix
```
