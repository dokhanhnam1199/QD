```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).
    This version combines several factors to estimate the promise of each edge:
    - Inverse distance: Shorter distances are more promising.
    - Node degree desirability: Nodes with fewer nearby neighbors are more encouraged to connect to their few neighbors
    - Sparsification: Setting unpromising edges to zero to encourage more directed search
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9  # small constant to avoid division by zero

    # Inverse distance: fundamental heuristic
    inverse_distance = 1 / (distance_matrix + epsilon)

    # Node degree desirability: prioritize connections for nodes with few close neighbors
    degree_desirability = np.zeros((n, n))
    for i in range(n):
        # Find distances to other nodes
        distances = distance_matrix[i, :]
        
        # Find indices of the k nearest neighbors (excluding itself). k scales with n
        k = min(int(np.sqrt(n)), n - 1) #Adjustable sqrt scaling
        nearest_neighbor_indices = np.argsort(distances)[1:k+1] # Exclude itself at index 0

        # Encourage connections to the nearest neighbors
        for j in nearest_neighbor_indices:
            degree_desirability[i, j] = 1

    # Combine the heuristics
    heuristic_matrix = inverse_distance * (1 + degree_desirability)

    # Sparsification: zero out unpromising edges
    threshold = np.mean(heuristic_matrix) * 0.2 #Adjustable threshold scaling
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
