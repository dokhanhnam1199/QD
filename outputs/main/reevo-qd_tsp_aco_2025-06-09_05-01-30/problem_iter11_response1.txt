```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, handling of edge cases, and robust normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Avoid division by zero; add small constant

                # Heuristic factor 2:  Is j among i's nearest neighbors? Prioritize connections to nearer neighbours.
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1 if j in nearest_neighbors[i] else n # Rank from 1 to N-1, or N if not found
                heuristic_factor_2 = 1 / (nn_rank**2)  # Sharper decay: Inverse square of rank

                # Heuristic factor 3: Average distance heuristic with added consideration for zero distances
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                heuristic_factor_3 = 1 / (avg_dist_i + avg_dist_j + 1e-9) if (avg_dist_i + avg_dist_j) > 0 else 0

                # Combine the factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Adaptive Sparsification based on heuristic values (dynamic threshold)
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1 # Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0  # Sparsify below threshold
    
    # Normalize the heuristic values locally for each node
    for i in range(n):
        row = heuristic_matrix[i, :]
        row_sum = np.sum(row)
        if row_sum > 0:
            heuristic_matrix[i, :] = row / row_sum  # Normalize row
        else:
             heuristic_matrix[i, :] = np.ones_like(row) / (n-1) #Assign uniform probability to each edge for the node

    return heuristic_matrix
```
