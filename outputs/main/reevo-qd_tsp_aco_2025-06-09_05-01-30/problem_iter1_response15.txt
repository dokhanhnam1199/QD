```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                      Same shape as distance_matrix.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter distances are generally more promising
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Nearest neighbor heuristic:  Edges connecting to nodes with fewer close neighbors might be good.

    nearest_neighbors = np.zeros(n)
    for i in range(n):
        sorted_distances = np.sort(distance_matrix[i, :])
        nearest_neighbors[i] = np.mean(sorted_distances[1:6]) # Average distance to 5 nearest neighbors

    node_prominence = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            node_prominence[i,j] = (nearest_neighbors[i] + nearest_neighbors[j])
            
    # 3. Combining Factors and Sparsifying
    heuristic_matrix = inverse_distance / (node_prominence + 1e-9)
    
    # Normalize, make symmetric and sparsify
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    max_val = np.max(heuristic_matrix)

    # Keep only top K promising edges for each node based on heuristic value
    for i in range(n):
      row = heuristic_matrix[i, :]
      indices = np.argsort(row)[::-1]
      k = min(5, n - 1)
      top_k_indices = indices[:k]
      mask = np.ones(n, dtype=bool)
      mask[top_k_indices] = False
      heuristic_matrix[i, mask] = 0
    

    return heuristic_matrix
```
