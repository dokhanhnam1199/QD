```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix: A numpy array representing the distance matrix between cities.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        heuristic values for each edge. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (basic heuristic)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Nearest neighbor heuristic: reward edges connecting to nodes with few close neighbors.
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Top 3 nearest neighbors

    neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                if j in nearest_neighbors[i, :]:
                    neighbor_bonus[i, j] = 0.5  # Small bonus for being a near neighbor

    # 3. Avoid long edges: severely penalize the longest edges to sparsify the graph
    threshold = np.percentile(distance_matrix[distance_matrix > 0], 75) #75th percentile for sparsification
    long_edge_penalty = np.where(distance_matrix > threshold, -1, 0)

    # 4. Combining the factors: balance exploration and exploitation.
    heuristic_matrix = inverse_distance + neighbor_bonus + long_edge_penalty

    # Ensure no self-loops are favored, and avoid NaNs that might arise in calculations
    np.fill_diagonal(heuristic_matrix, -np.inf)
    heuristic_matrix[np.isnan(heuristic_matrix)] = -np.inf
    
    #Sparsify matrix by setting negative/small heuristics to 0.
    heuristic_matrix[heuristic_matrix < 0] = 0
    return heuristic_matrix
```
