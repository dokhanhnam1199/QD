```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP, combining nearest neighbors, node proximity,
    sparsification, and normalization for informed edge selection.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Nearest Neighbors: Find the nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Inverse Distance: Favor shorter edges
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Adding a small constant to prevent division by zero

                # Nearest Neighbor Rank: Prioritize connections to closer neighbors
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = np.exp(-nn_rank / 1.5)  # Tunable decay factor

                # Node Proximity: Consider average distance to other nodes. Nodes that are generally closer
                # to other nodes should be connected earlier. This uses harmonic mean to address outlier distances.
                # Harmonic mean is more robust to large values
                avg_dist_i = n / np.sum(1 / (distance_matrix[i, :] + 1e-9))  # Harmonic mean for node i
                avg_dist_j = n / np.sum(1 / (distance_matrix[j, :] + 1e-9))  # Harmonic mean for node j
                heuristic_factor_3 = 1 / (avg_dist_i + avg_dist_j + 1e-9) # Inverse of sum of harmonic means

                # Combine factors, scaling each appropriately
                heuristic_matrix[i, j] = (heuristic_factor_1 * 0.4 +
                                           heuristic_factor_2 * 0.4 +
                                           heuristic_factor_3 * 0.2) # Weights adjusted

    # Sparsification: Keep only the top K edges for each node
    k = max(2, int(np.sqrt(n)))  # Ensure k is at least 2, then sqrt(n)
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]
        keep_indices = indices[:k]

        mask = np.zeros(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # Normalization: Scale heuristic values to [0, 1]
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9 #Small non-zero value for exploration.

    return heuristic_matrix
```
