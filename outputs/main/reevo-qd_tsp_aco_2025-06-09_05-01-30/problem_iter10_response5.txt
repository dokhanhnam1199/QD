```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.
    This version prioritizes edges to closer neighbors and incorporates a normalized approach.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node (excluding itself)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:]

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance, with emphasis on shorter distances
                heuristic_factor_1 = (1 / (distance + 1e-9)) ** 2  # Adding a small value to avoid division by zero, squaring to prioritize close nodes

                # Heuristic factor 2: Rank of j as a neighbor of i
                nn_rank = np.where(nearest_neighbors[i] == j)[0]
                if len(nn_rank) > 0:
                    heuristic_factor_2 = 1 / (nn_rank[0] + 1)  # Rank starts from 0, so add 1
                else:
                    heuristic_factor_2 = 0  # If not a neighbor (shouldn't happen), give a low score

                # Combine the factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2

    # Sparsify the matrix: Keep only k nearest neighbors for each node
    k = min(int(np.sqrt(n)), n - 1) # Keep sqrt(n) or n-1 if sqrt(n) > n-1

    for i in range(n):
        neighbors = np.argsort(distance_matrix[i, :])[1:]  # Exclude itself
        cutoff_distance = distance_matrix[i, neighbors[k-1]] if k > 0 else 0 #Find the distance to kth nearest neighbor

        for j in range(n):
            if i != j and distance_matrix[i,j] > cutoff_distance:
                heuristic_matrix[i, j] = 0

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        # If all heuristic values are zero, set them to a small uniform value
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9

    return heuristic_matrix
```
