```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, node proximity, and normalization.
    Robustly handles edge cases and ensures a minimum level of exploration.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node. Precompute this once for efficiency
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance. Account for zero distance
                heuristic_factor_1 = 1.0 / (distance + 1e-9)  # Add a small constant to avoid division by zero

                # Heuristic factor 2: Nearest neighbor ranking. More robust ranking mechanism
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = 1.0 / (nn_rank**1.5) #Use 1.5 as exponent to control decay

                # Heuristic factor 3: Node proximity - How close are node i and j to all other nodes?
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                heuristic_factor_3 = 1.0 / (avg_dist_i + avg_dist_j + 1e-9)

                # Combine the factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Sparsify the matrix: keep only top K edges for each node to reduce search space.
    k = min(int(np.sqrt(n)) + 1, n - 1)  # Ensure k is within valid range [1, n-1]
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]  # Indices of the highest values in descending order
        keep_indices = indices[:k]

        mask = np.zeros(n, dtype=bool)  #Invert the mask
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # Normalize the heuristic values to [0, 1]. Handles cases where all values are zero.
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        # If all heuristic values are zero (highly unlikely, but possible), assign a small uniform probability for exploration
        heuristic_matrix = np.full_like(heuristic_matrix, 1e-9) # Use full_like rather than ones_like. More explicit and correct

    # Add a small constant to all entries to ensure there is always some probability of selecting any edge
    heuristic_matrix += 1e-10  # Add a small value to allow for some exploration, to overcome premature convergence.

    return heuristic_matrix
```
