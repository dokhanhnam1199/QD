```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function calculates a heuristic matrix based on the distance matrix,
    prioritizing shorter edges and penalizing edges connected to nodes with
    already many short edges. It sparsifies the matrix by setting elements
    below a certain threshold to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                     between cities. distance_matrix[i, j] is the
                                     distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                  element indicates how promising it is to include the
                  corresponding edge in a solution. Higher values indicate
                  more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate the inverse of the distance matrix (higher value for shorter distances)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Calculate the sum of inverse distances for each node
    node_strengths = np.sum(inverse_distance, axis=1, keepdims=True)

    # Normalize the inverse distances by node strengths
    # This penalizes edges connected to nodes with already many short edges
    normalized_inverse_distance = inverse_distance / (node_strengths + node_strengths.T)


    # Combine the inverse distance and normalized inverse distance
    heuristic_matrix = inverse_distance + normalized_inverse_distance

    # Scale to [0, 1]
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix))
    
    # Sparsify the heuristic matrix by setting values below a threshold to zero
    threshold = np.mean(heuristic_matrix) * 0.25  # Dynamic threshold based on the mean

    heuristic_matrix[heuristic_matrix < threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0) # Remove self-loops


    return heuristic_matrix
```
