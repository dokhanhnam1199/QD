```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, average distance weighting,
    adaptive sparsification based on local node density, and robust normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Precompute nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    # Precompute average distances for each node
    avg_distances = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Avoid division by zero and add small value for stability

                # Heuristic factor 2: Nearest neighbor ranking
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = np.exp(-nn_rank / 1.5) # Tune sharpness of decay

                # Heuristic factor 3: Average distance weighting
                heuristic_factor_3 = 1 / (avg_distances[i] + avg_distances[j] + 1e-9)  #Avoid division by zero

                # Combine factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Adaptive Sparsification based on node density
    for i in range(n):
        # Estimate local node density based on average distance to neighbors.
        # Nodes in sparser regions get to keep more edges
        density_factor = avg_distances[i] / np.max(avg_distances)
        k = max(1, int(n * (0.6 + 0.4 * (1 - density_factor)))) # Ensure k >= 1 and tune aggressiveness

        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]
        keep_indices = indices[:k]

        mask = np.zeros(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # Robust Normalization
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix[:] = 1e-9 #Ensure all values are the same in pathological cases
        #heuristic_matrix = np.full_like(heuristic_matrix, 1e-9) #even safer in edge cases

    return heuristic_matrix
```
