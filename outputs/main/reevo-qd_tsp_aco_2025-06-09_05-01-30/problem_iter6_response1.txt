```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using inverse distance and nearest neighbor considerations.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / distance if distance > 0 else 0

                # Heuristic factor 2: Nearest neighbor rank
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = np.exp(-nn_rank / 1.5)  #Sharper decay

                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2

    # Sparsify the matrix: keep only top K edges for each node
    k = int(np.sqrt(n))
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]
        keep_indices = indices[:k]

        mask = np.ones(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # Normalize heuristic values
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9

    return heuristic_matrix
```
