```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration and normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Avoid division by zero and add small constant

                # Heuristic factor 2: Is j among i's nearest neighbors? Prioritize connections to nearer neighbours.
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = np.exp(-nn_rank/3)  # Adjusted decay rate

                # Heuristic factor 3: Node proximity (average distance to other nodes)
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                heuristic_factor_3 = 1 / (avg_dist_i + avg_dist_j + 1e-9)

                # Heuristic factor 4: Combination of reciprocal rank (normalized)
                reciprocal_rank = 1 / nn_rank
                normalized_rank = reciprocal_rank / np.sum(1 / np.arange(1, n))
                heuristic_factor_4 = normalized_rank #Explicitly incorporate the normalized rank

                # Combine the factors, assigning different weights to each
                heuristic_matrix[i, j] = (0.4 * heuristic_factor_1 +
                                          0.3 * heuristic_factor_2 +
                                          0.2 * heuristic_factor_3 +
                                          0.1 * heuristic_factor_4) # tune the weights

    # Sparsify the matrix: keep only top K edges for each node
    k = min(int(np.sqrt(n) * 2), n-1) # Keep more edges if n is small
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]
        keep_indices = indices[:k]

        mask = np.zeros(n, dtype=bool)  # Initialize a mask of all zeros
        mask[keep_indices] = True        # Mark the top k indices as True
        heuristic_matrix[i, ~mask] = 0    # Apply mask to set the rest to 0


    # Normalize the heuristic values for better sampling behavior. Robustly handle the case where all values are zero
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9

    return heuristic_matrix
```
