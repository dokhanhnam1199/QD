```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on distance,
    node degree, and connectivity. A stochastic element is added.
    Sparsifies the matrix by setting low-probability edges to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
                                       represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                     indicates how promising it is to include the corresponding edge
                     in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate node degree desirability (inverse of total distance from the node)
    node_degree_desirability = np.zeros(n)
    for i in range(n):
        node_degree_desirability[i] = 1 / np.sum(distance_matrix[i, :])

    # Combine distance and node degree desirability
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i][j] = (
                    (1 / distance_matrix[i][j])
                    * (node_degree_desirability[i] + node_degree_desirability[j])
                )

    # Add a small stochastic element (exploration)
    random_matrix = np.random.rand(n, n) * 0.1  # Scale down the randomness
    heuristics_matrix += random_matrix

    # Normalize the matrix (optional, but often helps)
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix /= max_val

    # Sparsify the matrix: set low-probability edges to zero.
    threshold = np.mean(heuristics_matrix) * 0.2 # dynamically chosen threshold.
    heuristics_matrix[heuristics_matrix < threshold] = 0


    return heuristics_matrix
```
