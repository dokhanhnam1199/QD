```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on distance, node degree,
    and a stochastic sampling approach.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                        between cities. distance_matrix[i][j] is the distance
                                        between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing
                      the heuristic values (probabilities) for each edge. Higher values
                      indicate a more promising edge to include in the TSP tour.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Normalize inverse distance
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance))

    # Node degree heuristic (favor edges connected to nodes with low degree in the current solution)
    # Initialize degree_preference matrix (all ones)
    degree_preference = np.ones((n, n))
    
    # Combined heuristic
    heuristic_matrix = inverse_distance * degree_preference

    # Sparsify the matrix: Zero out edges with low heuristic values
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  #Dynamic threshold.
    heuristic_matrix[heuristic_matrix < threshold] = 0

    #Make Diagonals zeros, because they are self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
