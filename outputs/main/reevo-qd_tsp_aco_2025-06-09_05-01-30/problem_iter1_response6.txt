```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix.

    Returns:
        A numpy ndarray of the same shape as the input, representing the
        prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance (proximity)
    proximity = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Calculate the average distance to each node
    avg_distances = np.mean(distance_matrix, axis=0)

    # Calculate a measure of how "central" each node is
    centrality = 1 / (avg_distances + 1e-9)

    # Combine proximity and centrality to create the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = proximity[i, j] * (centrality[i] + centrality[j])
            else:
                heuristic_matrix[i, j] = 0

    # Sparsify the matrix by setting values below a certain threshold to zero
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2  # Dynamic threshold based on the mean of non-zero elements
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize the heuristic matrix to be between 0 and 1 (optional)
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
