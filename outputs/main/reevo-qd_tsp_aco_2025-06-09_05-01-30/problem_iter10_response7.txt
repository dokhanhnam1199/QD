```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration and normalization. Adaptive sparsification is used.
    This version includes a more robust handling of zero distances and a refined adaptive sparsification strategy.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Avoid division by zero, add a small constant

                # Heuristic factor 2: Is j among i's nearest neighbors? Prioritize nearer neighbours. Sharper decay.
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1  # Rank from 1 to N-1
                heuristic_factor_2 = np.exp(-nn_rank / 2)  # Sharper decay than 1/rank

                # Heuristic factor 3: Consider the "average distance" of the nodes involved
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                heuristic_factor_3 = 1 / (avg_dist_i + avg_dist_j + 1e-9)  # Avoid division by zero

                # Combine the factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Sparsify the matrix: keep only top K edges for each node
    # Adaptive sparsification: k depends on the variability of distances from node i
    for i in range(n):
        std_dist_i = np.std(distance_matrix[i, :])  # standard deviation of distances from node i
        # Base k on standard deviation.  If distances are similar, explore less. If they vary more, explore more
        k = max(1, int(n * (std_dist_i / np.mean(distance_matrix)))) # Ensure k >= 1

        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]  # Indices of the highest values in descending order
        keep_indices = indices[:k]  # Indices to retain

        mask = np.ones(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0  # Set other entries to zero

    # Normalize the heuristic values for better sampling behavior
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        # If all heuristic values are zero, set them to a small uniform value to allow for some exploration
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9

    return heuristic_matrix
```
