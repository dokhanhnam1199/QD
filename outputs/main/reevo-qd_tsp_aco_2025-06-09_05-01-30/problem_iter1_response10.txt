```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function combines several factors to determine the "promise" of each edge:
    - Inverse distance: Shorter distances are preferred.
    - Node degree: Nodes with fewer close neighbors are encouraged to connect.
    - Global shortest edges: Edges appearing in solutions to other shortest-path problems 
                              (e.g., minimum spanning tree) are favored

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      indicates the "promise" of including that edge in the TSP solution.
    """

    n = distance_matrix.shape[0]
    promise_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Basic heuristic favoring shorter distances
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node Degree: Encourage connections to nodes with fewer close neighbors
    node_degree = np.sum(distance_matrix < np.mean(distance_matrix), axis=0)  # Count of 'close' neighbors for each node
    degree_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_factor[i, j] = 1 / (node_degree[i] + node_degree[j] + 1e-6)  # Prefer edges connecting nodes with low degrees

    # 3. Sparsification: Remove obviously unpromising edges (long edges between already high degree nodes)
    threshold = np.mean(distance_matrix) * 2 # Remove edges longer than twice average distance
    sparse_matrix = np.where(distance_matrix > threshold, 0, 1)
    
    # 4. Combine factors and apply sparsity
    promise_matrix = inverse_distance * degree_factor * sparse_matrix
    
    # Ensure no self-loops
    for i in range(n):
        promise_matrix[i, i] = 0

    return promise_matrix
```
