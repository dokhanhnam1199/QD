```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, average distance influence,
    adaptive sparsification based on node density, and normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    # Calculate average distance to all other nodes for each node
    avg_distances = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / distance if distance > 0 else 0

                # Heuristic factor 2: Nearest neighbor rank with exponential decay
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1
                heuristic_factor_2 = np.exp(-nn_rank / 2)

                # Heuristic factor 3: Combined average distance influence.
                # Nodes in denser areas (smaller average distance to other nodes)
                # should be more likely to connect. Inverse relationship to average distance.
                heuristic_factor_3 = 1 / (avg_distances[i] + avg_distances[j]) if (avg_distances[i] + avg_distances[j]) > 0 else 0


                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Adaptive Sparsification: Keep top K edges, where K is based on node density
    for i in range(n):
        # Base k on the average distance to other nodes:
        # Denser nodes (lower average distance) have a higher K
        density_factor = 1 - (avg_distances[i] / np.max(avg_distances)) # Scale avg distances to [0,1]
        k = max(1, int(n * density_factor))  # Ensure k >= 1

        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1]
        keep_indices = indices[:k]

        mask = np.ones(n, dtype=bool)
        mask[keep_indices] = True
        heuristic_matrix[i, ~mask] = 0

    # Normalization
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9

    return heuristic_matrix
```
