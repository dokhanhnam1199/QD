```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration and normalization. Aims for improved
    performance and robustness.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance (with handling for zero distances)
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Add a small constant to avoid division by zero and near-infinite values.

                # Heuristic factor 2: Prioritize nearer neighbors with sharper decay, but also consider rank
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1 # Rank from 1 to N-1
                heuristic_factor_2 = np.exp(-nn_rank/2) + (1 / nn_rank) # Combine exponential decay and rank-based prioritization

                # Heuristic factor 3: Average distance consideration, avoid 0 by adding small constant
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                heuristic_factor_3 = 1 / (avg_dist_i + avg_dist_j + 1e-9)

                # Combine factors, with potentially different weights based on experiments
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Sparsify the matrix based on a threshold, not just top-k.  Adaptive threshold based on distances
    # Only edges significantly below average distance are considered promising
    avg_distance = np.mean(distance_matrix)
    threshold = avg_distance * 0.75  # Parameter to tune
    heuristic_matrix[distance_matrix > threshold] = 0

    # Normalize heuristic values robustly
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 1e-9

    return heuristic_matrix
```
