```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).
    This function calculates prior indicators of how promising it is to
    include each edge in a solution, based on the distance matrix.

    This version incorporates multiple factors and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): A square matrix where the element at [i, j]
            represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as the input, where each element
            represents the prior indicator of including the corresponding edge
            in the TSP solution. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance (initial desirability)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Normalize inverse distances
    normalized_distances = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9)


    # Calculate node degree desirability: preferring nodes with low degree so far (initially, all equal)
    node_degree = np.ones(n)  # Initial degree: all nodes have 'degree' 1 before any edge is selected. We need to pretend some edges were already selected.  This assumes no prior knowledge on what is better, which is adequate.
    degree_factor = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                 degree_factor[i, j] = 1.0 / (node_degree[i] * node_degree[j])

    # Combine factors (Distance, and Degree)
    heuristics = normalized_distances * degree_factor

    # Sparsify the matrix (set low-promise edges to zero)
    threshold = np.quantile(heuristics[heuristics > 0], 0.2) # keep 80% edges with best heuristics values. We want to sample from it.

    heuristics[heuristics < threshold] = 0

    return heuristics
```
