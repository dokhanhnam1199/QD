```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate a basic inverse distance heuristic
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Calculate a nearest neighbor heuristic
    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbor_indices = np.argsort(distances)[1:4]  # Exclude the city itself, consider top 3 nearest neighbors
        nearest_neighbors[i, nearest_neighbor_indices] = 1.0  # Mark edges to nearest neighbors as promising

    # Combine the heuristics (weighted sum)
    heuristic_matrix = 0.7 * inverse_distance + 0.3 * nearest_neighbors
    # Ensure the diagonal is zeroed in case nearest neighbor adds values there
    for i in range(n):
        heuristic_matrix[i, i] = 0
    #Sparsify: remove connections whose heuristic values is less than certain threshold
    threshold = np.mean(heuristic_matrix) * 0.2 #adaptive threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
