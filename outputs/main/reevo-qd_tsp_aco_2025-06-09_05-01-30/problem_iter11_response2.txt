```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification,
    with improved nearest neighbor consideration, handling of edge cases, and robust normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values (prior indicators) for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic factor 1: Inverse distance
                heuristic_factor_1 = 1 / (distance + 1e-9)  # Avoid division by zero, ensure non-zero value

                # Heuristic factor 2:  Is j among i's nearest neighbors? Prioritize connections to nearer neighbours.
                nn_rank = np.where(nearest_neighbors[i] == j)[0][0] + 1 if j in nearest_neighbors[i] else n
                heuristic_factor_2 = 1 / (nn_rank**2)   #Sharper decay, handle isolated nodes implicitly

                # Heuristic factor 3: Distance-based prioritization
                # Emphasize shorter paths
                heuristic_factor_3 = np.exp(-distance / (np.mean(distance_matrix[i,:]) + 1e-9)) if np.mean(distance_matrix[i,:]) > 0 else 0
                
                # Combine the factors
                heuristic_matrix[i, j] = heuristic_factor_1 * heuristic_factor_2 * heuristic_factor_3

    # Adaptive Sparsification: keep only edges with heuristic values above a threshold
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.5  # Dynamic threshold

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Robust normalization.  Use a small value to avoid zero heuristics
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic
    else:
        heuristic_matrix = np.full_like(heuristic_matrix, 1e-9)

    return heuristic_matrix
```
