```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, node degree, and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance as a base heuristic
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Node degree component: Encourage edges connected to nodes with fewer connections (smaller sum of inverse distances to others)
    node_degree = np.sum(heuristic_matrix, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (node_degree[i] + node_degree[j])  # Normalize to avoid over-emphasizing very low degree nodes

    # Sparsification: Keep only the top k nearest neighbors for each node
    k = max(2, int(np.sqrt(n)))  # Adaptive k based on problem size (at least 2)

    for i in range(n):
        neighbors = np.argsort(distance_matrix[i, :])[1:]  # Exclude self-loop, get indices of sorted distances
        neighbors = neighbors[:k]  # Select the k nearest neighbors

        for j in range(n):
            if j != i and j not in neighbors:
                heuristic_matrix[i, j] = 0

    # Normalize heuristics to be between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:  # Avoid division by zero when all elements are zero.
       heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
