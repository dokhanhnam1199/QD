```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic is based on the 'Best Fit' strategy, aiming to minimize
    the wasted space in each chosen bin. It prioritizes bins that, after
    receiving the item, would have the smallest amount of remaining capacity.
    This helps to "tightly pack" bins, potentially leaving larger gaps in
    other bins for future, larger items, or closing bins quickly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more preferred bin. Bins that cannot fit
        the item will have a very low (negative infinity) priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # We want to find a bin where this value is small and non-negative.
    potential_remaining_capacity = bins_remain_cap - item

    # Initialize priorities for all bins.
    # Bins that cannot fit the item should have an extremely low priority,
    # ensuring they are never chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that *can* accommodate the current item.
    can_fit_mask = potential_remaining_capacity >= 0

    # For bins that can fit the item, their priority is the negative of the
    # remaining capacity. This way, a smaller positive remaining capacity
    # (e.g., 0.1) results in a higher priority (e.g., -0.1), while a larger
    # remaining capacity (e.g., 0.8) results in a lower priority (e.g., -0.8).
    # Since we choose the bin with the MAX priority, this correctly implements Best Fit.
    priorities[can_fit_mask] = -potential_remaining_capacity[can_fit_mask]

    return priorities
```
