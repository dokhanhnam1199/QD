```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the principles of atomic stability and efficient energy release,
    this heuristic aims for the most "stable" packing, minimizing wasted space
    and optimizing the utilization of each bin's capacity.

    This strategy is a refined Best Fit approach: it prioritizes bins that,
    after placing the item, would have the smallest remaining capacity. Perfect
    fits are given the highest possible priority, akin to achieving a highly
    stable, optimal configuration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of the same size as bins_remain_cap with a priority score for each bin.
        Higher scores indicate a more desirable bin for the current item.
    """
    # Initialize priorities. Bins where the item cannot fit are given an
    # infinitely low priority, rendering them "unstable" or impossible choices.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify all bins where the current item can physically be placed.
    can_fit_mask = bins_remain_cap >= item

    # For these eligible bins, calculate the remaining capacity if the item were placed inside.
    # This 'remaining space' is analogous to unutilized potential or "excess energy" we wish to minimize.
    remaining_space_after_placement = bins_remain_cap[can_fit_mask] - item

    # To prioritize bins that leave the least remaining space, we use the inverse
    # of this remaining space as the priority score. A smaller remaining space
    # results in a larger inverse value, thus a higher priority.
    #
    # Add a small epsilon to the denominator to prevent division by zero in cases
    # where an item fits perfectly (remaining_space = 0). This ensures perfect
    # fits receive the highest possible (finite) priority score, reflecting their
    # ideal, stable configuration.
    epsilon = np.finfo(float).eps  # Smallest positive float representable

    # Calculate the "stability score" for eligible bins.
    # A higher score indicates a more 'stable' or optimally packed bin.
    priorities[can_fit_mask] = 1.0 / (remaining_space_after_placement + epsilon)

    return priorities
```
