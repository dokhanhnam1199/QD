```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins using a "Best Fit" strategy.
    It calculates a score based on the proportion of the bin's remaining
    capacity that the item would fill. Bins that cannot accommodate the
    item are assigned a very low (negative infinity) priority to ensure
    they are not selected.

    A higher score indicates a tighter fit (i.e., the item uses a larger
    proportion of the available space in the bin), which is the essence
    of Best Fit heuristic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array with a very low value (-np.inf) for all bins.
    # This ensures that bins where the item does not fit will automatically
    # have the lowest priority and will not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can actually fit.
    # A bin can fit the item if its remaining capacity is greater than or equal to the item size.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can accommodate the item, calculate their priority score.
    # The score is the ratio of the item's size to the bin's remaining capacity.
    # This ratio is between 0 (for a very small item in a relatively large bin)
    # and 1 (for an item that perfectly fills the bin's remaining capacity).
    # A higher ratio indicates a tighter fit, which is desired by the "Best Fit" rule.
    priorities[can_fit_mask] = item / bins_remain_cap[can_fit_mask]

    return priorities
```
