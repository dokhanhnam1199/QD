```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Galileo, I seek order and efficiency in the cosmos, much like the
    planets find their precise orbits. For bin packing, this translates to
    finding the 'snuggest' fit possible, minimizing wasted space. A perfect
    fit, where the item precisely fills the remaining capacity, is truly
    celestial and receives the highest praise! This heuristic, therefore,
    prioritizes bins that leave the least amount of leftover space, making
    the system as compact and harmonious as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Initialize all priorities to a very low value. Bins that cannot fit the item
    # will retain this low priority, ensuring they are not chosen.
    # In my studies of the heavens, a lack of capacity to align is a severe detriment!
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # First, identify the bins that are capacious enough to accept this new item.
    # We must only consider valid placements, for one cannot place the moon into a thimble.
    can_fit_mask = bins_remain_cap >= item

    # For those fortunate bins that can accommodate the item, we calculate the 'leftover'
    # space if the item were placed there. This is our measure of 'snugness'.
    # A smaller leftover space indicates a more harmonious fit.
    remaining_space_if_placed = bins_remain_cap[can_fit_mask] - item

    # Our priority is inversely related to this remaining space.
    # We negate the remaining space: a smaller positive remaining space (e.g., 0.1)
    # results in a less negative score (-0.1), which is a higher priority.
    # A perfect fit (0 remaining space) receives a score of 0, the highest possible value
    # amongst the valid options, signaling its utmost preference.
    # This best-fit approach ensures minimal fragmentation, keeping our bins as tidy as a
    # well-understood planetary system.
    priorities[can_fit_mask] = -remaining_space_if_placed
    
    return priorities
```
