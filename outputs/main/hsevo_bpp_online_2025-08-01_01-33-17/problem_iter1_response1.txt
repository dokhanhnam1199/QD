```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    From the perspective of universal order and efficiency, one must always
    strive to fill existing 'spacetime vessels' as compactly as possible
    before creating new ones.

    My heuristic, which I shall call 'The Best Fit of Relativity',
    dictates that an item should preferentially be placed into the bin
    that will result in the smallest possible 'remaining void' once the
    item has settled. This minimizes the 'unutilized capacity curvature'
    and ensures that our 'energy-matter packets' (items) are arrayed
    with the utmost density.

    If an item cannot 'coexist' within a bin due to insufficient space,
    that bin is, naturally, assigned an infinitely low priority, as it
    is not a viable candidate in this dimension of packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to negative infinity. This ensures that any bin
    # that cannot fit the item will never be chosen over one that can.
    priorities = np.full_like(bins_remain_cap, np.NINF, dtype=float)

    # Determine which bins have sufficient remaining capacity to accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can fit the item, calculate the remaining capacity if the item is placed.
    # We want to select the bin that results in the *smallest* remaining capacity (tightest fit).
    # To achieve this with a 'highest priority wins' mechanism, we take the negative of this value.
    # A smaller positive remainder will result in a larger (less negative) priority score.
    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_space_after_fit

    return priorities
```
