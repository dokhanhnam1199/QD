```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    
    This function implements a "Best Fit" like heuristic, inspired by how
    particles seek the lowest energy state, or how objects naturally
    settle into the snuggest available spot.
    
    We prefer bins that, after accommodating the item, will have the
    smallest positive remaining capacity. A perfect fit (0 remaining capacity)
    is considered the highest priority among valid placements.
    Bins where the item cannot fit are given an infinitely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the hypothetical remaining capacity for each bin
    # if the current item were placed there.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize a priority array. We'll start by giving an infinitely low
    # priority to all bins, signifying they are undesirable unless proven otherwise.
    # This ensures that bins where the item does not fit will never be chosen
    # if there is at least one bin where it does fit.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually accommodate the item.
    # These are the bins where the 'potential_remaining_cap' is non-negative.
    can_fit_mask = potential_remaining_cap >= 0

    # For the bins where the item *can* fit:
    # We want to find the bin that leaves the *least* amount of space remaining.
    # In other words, we want to minimize 'potential_remaining_cap' for these bins.
    # To do this using a maximization priority function, we take the negative
    # of 'potential_remaining_cap'.
    # A smaller 'potential_remaining_cap' (e.g., 0 for a perfect fit)
    # will result in a larger (less negative) priority score (e.g., 0).
    # A larger 'potential_remaining_cap' (e.g., 0.5) will result in a smaller
    # (more negative) priority score (e.g., -0.5).
    priority_scores[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    return priority_scores
```
