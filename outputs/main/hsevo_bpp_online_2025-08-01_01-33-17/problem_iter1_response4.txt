```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Nikola Tesla, I envision this process much like routing an electrical current.
    We seek the path of least "resistance" in terms of wasted capacity, aiming for the
    most efficient "connection" or "transfer" of the item (our electrical charge)
    into its vessel (the bin). This method prioritizes snugly fitting items, minimizing
    the "idle capacity" and thus optimizing the overall "power grid" of our bins.
    It embodies the 'Best Fit' heuristic, ensuring minimal remaining "electrical potential"
    (unused space) within the chosen receptacle.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the theoretical remaining space if the item were placed in each bin.
    # This is our measure of 'impedance' or 'unused potential'.
    theoretical_remaining_space = bins_remain_cap - item

    # Initialize priorities to a very low value (negative infinity).
    # Bins that cannot accommodate the item are effectively 'open circuits'
    # and must have a negligible priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'closed circuits' â€“ bins where the item can physically fit.
    can_fit_mask = theoretical_remaining_space >= 0

    # For the bins where the item can fit, we assign a priority.
    # We desire the bin with the *smallest positive* remaining space.
    # By taking the negative of this remaining space, a smaller positive value
    # (e.g., 1 unit remaining) becomes a higher (less negative) priority
    # (e.g., -1) compared to a larger positive value (e.g., 10 units remaining,
    # resulting in a priority of -10). This effectively converts the minimization
    # problem (of remaining space) into a maximization problem (of priority score).
    priorities[can_fit_mask] = -theoretical_remaining_space[can_fit_mask]

    return priorities
```
