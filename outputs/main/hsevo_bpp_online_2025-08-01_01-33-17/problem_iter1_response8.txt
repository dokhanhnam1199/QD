```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This priority function is inspired by the "Best Fit" heuristic, aiming to
    mimic Rosalind Franklin's meticulous approach to fitting components together
    with minimal wasted space, much like nucleotides in a DNA helix.

    It prioritizes bins that, if the item were placed in them, would leave the
    smallest amount of remaining capacity. This encourages filling bins as
    tightly as possible, saving larger available spaces for larger items that
    might come later, thereby optimizing bin utilization and minimizing the
    total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher preference. Bins where the item cannot
        fit are assigned a very low (negative infinity) priority.
    """
    # Initialize all scores to negative infinity. This ensures that any bin
    # where the item cannot fit will never be selected, as their priority
    # will be lowest.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item actually fits.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the "tightness" of the fit.
    # The quantity `bins_remain_cap - item` represents the space left after placing the item.
    # We want to minimize this value. By taking the negative of this difference,
    # a smaller remaining space will result in a larger (less negative, or positive) score.
    # A perfect fit (remaining_capacity - item = 0) will yield a score of 0,
    # which is the highest possible score and represents the most desirable fit.
    scores[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return scores
```
