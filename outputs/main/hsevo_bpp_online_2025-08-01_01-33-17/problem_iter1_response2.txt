```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic, akin to the 'Best Fit' strategy, aims to minimize the
    remaining idle capacity in a bin after placing the item. By striving
    for the snuggest possible fit, we endeavor to consolidate items
    efficiently, thereby reducing the total number of receptacles required.
    It is a principle of economy, much like Nature abhors a vacuum.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current capacities remaining in each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Initialize all priorities to an infinitely low value.
    # Any bin that cannot accommodate the item shall be rejected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Ascertain which bins possess sufficient remaining capacity to receive the item.
    # These are the only candidates for consideration.
    can_fit = bins_remain_cap >= item

    # For those bins capable of holding the item, we calculate the remaining space
    # should the item be placed therein. We seek to minimize this remainder.
    # To transform this minimization into a maximization for priority, we assign
    # a score equal to the negative of this remaining space.
    # Thus, a smaller positive remainder (a snugger fit) yields a value closer to zero (higher).
    # A perfect fit (remainder 0) will yield a score of 0, the highest possible for a fitting bin.
    snugness_scores = -(bins_remain_cap[can_fit] - item)

    # Assign these calculated scores to the eligible bins.
    priorities[can_fit] = snugness_scores

    return priorities
```
