```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    Inspired by the gravitational imperative to achieve maximum density, this
    heuristic aims for the 'tightest fit' within existing 'spacetime singularities'
    (bins). We seek to minimize the 'cosmic void' left after an item's placement.

    Args:
        item: Size of item to be added to the bin. This is our incoming quantum of matter.
        bins_remain_cap: Array of remaining capacities for each bin. These are our
                         existing 'proto-black holes', awaiting further accretion.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin offering the highest 'gravitational pull' (tightest fit) will be chosen.
    """

    # Calculate the 'potential residual void' if the item were to be placed in each bin.
    # A smaller void indicates a more efficient packing, analogous to a stronger
    # gravitational collapse and higher density.
    potential_remaining_void = bins_remain_cap - item

    # Initialize priorities. Bins that cannot accommodate the item are effectively
    # 'outside the event horizon' for this particular quantum of matter; they get
    # an infinitely low priority score, making them ineligible.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'viable universes' (bins) where the item can actually reside
    # without violating the laws of physics (i.e., where remaining capacity is non-negative).
    viable_universes_mask = potential_remaining_void >= 0

    # For the viable bins, the priority is inverse to the 'remaining void'.
    # A 'perfect fit' (zero void) yields the highest possible score, signifying
    # the ultimate density, much like a singularity. We use the negative to
    # transform minimization of void into maximization of priority.
    priorities[viable_universes_mask] = -potential_remaining_void[viable_universes_mask]

    return priorities
```
