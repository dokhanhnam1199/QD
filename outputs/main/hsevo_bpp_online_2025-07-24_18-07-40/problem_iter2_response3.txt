```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin by combining Best-Fit strategy with normalization.
    Prioritizes bins that can accommodate the item and have remaining capacity closest to the item size.
    """
    # Calculate the absolute difference between the item size and the remaining capacity
    diff = np.abs(bins_remain_cap - item)
    
    # Bins that cannot accommodate the item get a priority of -inf
    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)
    
    # Normalize the priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        min_priority = np.min(priority[valid_bins])
        max_priority = np.max(priority[valid_bins])
        if max_priority != min_priority:
            priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)
    
    return priority
```
