```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin by combining best-fit strategy and nuanced scoring.
    """
    # Check if item can fit into each bin and calculate remaining capacity after addition
    can_fit = bins_remain_cap >= item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign high priority to bins where item fits, using negative absolute difference for best-fit strategy
    priority = np.where(can_fit, -np.abs(remaining_cap_after_addition), -np.inf)
    
    # Normalize priority scores using exponential function for bins where item fits
    max_priority = np.max(priority)
    priority = np.where(can_fit, np.exp(priority - max_priority), priority)
    
    return priority
```
