import numpy as np
import random
import math
import scipy
import torch

def priority_v2(item: float, bins_remain_cap: np.ndarray, bonus_threshold: float = 9.221964330314271e-07, 
                normalization_epsilon: float = 7.48589819450546e-06, bonus_value: float = 1.3477516504491212e-06) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for bins that are nearly full after adding the item.
    Simple and effective approach for online Bin Packing.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_add = bins_remain_cap - item
    
    # Set priority to negative infinity for bins that cannot hold the item
    valid_bins = bins_remain_cap >= item
    priority = np.where(valid_bins, -np.abs(remaining_cap_after_add), -np.inf)
    
    # Enhance priority for bins that are almost full after adding the item
    bonus = np.where((remaining_cap_after_add >= 0) & (remaining_cap_after_add < item), bonus_value, 0)
    priority += bonus
    
    # Normalize the priority scores for valid bins
    if np.any(valid_bins):  
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + normalization_epsilon), priority)
    
    return priority
