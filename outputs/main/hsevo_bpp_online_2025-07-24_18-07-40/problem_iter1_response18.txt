```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    The priority is calculated based on how well the item fits into the bin.
    A higher priority is given to bins where the item fits perfectly or leaves a large remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins where the item doesn't fit
    priority = np.where(remaining_cap_after_addition < 0, -1e10, 
                        # For bins where the item fits, the priority is the remaining capacity after addition
                        # This encourages filling bins as much as possible
                        remaining_cap_after_addition)
    
    # To further encourage using bins that are almost full, we can slightly increase the priority
    # for bins with very small remaining capacity after adding the item
    priority = np.where((remaining_cap_after_addition >= 0) & (remaining_cap_after_addition < item), 
                        priority + 1e-6, priority)
    
    return priority
```
