{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements the First-Fit decreasing heuristic with a twist.\n    The priority is higher for bins that have enough capacity and are more full.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot accommodate the item get a priority of -inf\n    priority = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    # Normalize the priority to be between 0 and 1 for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        if max_priority != min_priority:\n            priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin based on \n    the remaining capacity and the size of the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on how well the item fits\n    # into the remaining capacity. The closer the item size is to the remaining\n    # capacity, the higher the priority.\n    priority_score = np.where(bins_remain_cap >= item, \n                              bins_remain_cap - item, \n                              -np.inf)\n    \n    # To avoid division by zero and to ensure that bins with more remaining \n    # capacity after placing the item are prioritized less, we use the \n    # negative of the remaining capacity after placing the item as a secondary \n    # priority metric.\n    return priority_score\n\n### Analyze & experience\n- Comparing the best heuristic (Heuristics 1st) with the worst (Heuristics 20th), we see that the best heuristic uses a more sophisticated scoring system involving exponential normalization, whereas the worst heuristic uses a simple remaining capacity scoring. \nComparing (1st) vs (2nd), we see that both prioritize bins based on remaining capacity, but the 1st heuristic normalizes scores using exponential function, while the 2nd doesn't. \n(3rd) vs (4th) shows that both use a form of best-fit strategy, but the 3rd heuristic directly uses the negative absolute difference, whereas the 4th normalizes the priority scores.\nOverall, better heuristics tend to use more nuanced scoring systems and normalization techniques.\n- \nTo design better heuristics, let's rethink 'Current self-reflection'. Since 'Ineffective self-reflection' is None, we'll focus on enhancing the current approach. Here are the key takeaways:\n* **Keywords**: nuanced scoring, normalization, prioritization\n* **Advice**: Explore diverse normalization techniques and scoring systems to improve heuristic design.\n* **Avoid**: Over-reliance on a single scoring or normalization method.\n* **Explanation**: By incorporating varied techniques, we can develop more robust and adaptable heuristics, leading to improved performance and problem-solving capabilities.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}