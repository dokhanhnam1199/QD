{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines nuanced scoring and normalization for online Bin Packing Problem.\n    Prioritizes bins based on negative absolute difference and remaining capacity.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Initial capacity is assumed to be 1.0 for all bins\n    initial_capacity = 1.0\n    \n    # Calculate the priority score as a combination of negative difference and relative utilization\n    priority = -diff / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority score for each bin by combining best-fit strategy and nuanced scoring with relative utilization.\n    \"\"\"\n    # Check if item can fit into each bin and calculate remaining capacity after addition\n    can_fit = bins_remain_cap >= item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Assign high priority to bins where item fits using a combination of best-fit and relative utilization\n    initial_capacity = 1.0  # Assuming uniform initial capacity for all bins\n    priority = np.where(can_fit, -np.abs(remaining_cap_after_addition) + bins_remain_cap / initial_capacity, -np.inf)\n    \n    # Normalize priority scores using exponential function for bins where item fits\n    max_priority = np.max(priority[can_fit]) if np.any(can_fit) else -np.inf\n    if not np.isneginf(max_priority):  \n        priority = np.where(can_fit, np.exp(priority - max_priority), priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic focuses on a simple yet effective strategy of prioritizing bins based on the remaining capacity closest to the item size. In contrast, the worst heuristic uses a more complex scoring system that doesn't perform as well. \nComparing (1st) vs (2nd), we see that the second-best heuristic combines the best-fit strategy with nuanced normalization, which is more complex than the first. \n(3rd) vs (4th) shows that giving a bonus to bins that are nearly full can be beneficial, but the 4th heuristic's approach is more complicated and slightly less effective. \nOverall, simpler and more focused strategies tend to perform better.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls of 'Ineffective self-reflection'. Here's a redefined approach in 4 bullet points:\n\n* **Keywords**: Simple, focused strategies\n* **Advice**: Design heuristics with straightforward and targeted approaches\n* **Avoid**: Nuanced scoring systems, normalization techniques, and repetitive code\n* **Explanation**: By avoiding complex scoring and normalization, we can create more efficient and effective heuristics that prioritize simplicity and clarity, leading to better performance and design.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}