```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on a combination of the remaining capacity 
    of each bin and a normalization technique to enhance the scoring system.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate the priority score for each bin using a combination of the difference and the remaining capacity
    # A bin with remaining capacity closest to the item size and with larger remaining capacity gets the highest priority
    priority = -diff / (bins_remain_cap + 1e-6)  # Adding a small value to avoid division by zero
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    # Normalize the priority scores to be within a certain range
    finite_priority = priority[np.isfinite(priority)]
    if len(finite_priority) > 0:
        max_priority = np.max(finite_priority)
        min_priority = np.min(finite_priority)
        if max_priority != min_priority:
            priority[np.isfinite(priority)] = (finite_priority - min_priority) / (max_priority - min_priority)
    
    return priority
```
