```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin based on 
    the remaining capacity and the size of the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on how well the item fits
    # into the remaining capacity. The closer the item size is to the remaining
    # capacity, the higher the priority.
    priority_score = np.where(bins_remain_cap >= item, 
                              bins_remain_cap - item, 
                              -np.inf)
    
    # To avoid division by zero and to ensure that bins with more remaining 
    # capacity after placing the item are prioritized less, we use the 
    # negative of the remaining capacity after placing the item as a secondary 
    # priority metric.
    return priority_score
```
