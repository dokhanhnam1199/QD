```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for nearly full bins.
    
    Prioritizes bins based on remaining capacity closest to item size and 
    gives a bonus to bins that are nearly full after adding the item.
    """
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    priority = -np.abs(bins_remain_cap - item)
    
    # Bonus for bins that are nearly full after adding the item
    nearly_full_bonus = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item / 2), 1, 0)
    priority += nearly_full_bonus
    
    # Normalize priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    else:
        priority = -np.inf * np.ones_like(priority)
    
    return priority
```
