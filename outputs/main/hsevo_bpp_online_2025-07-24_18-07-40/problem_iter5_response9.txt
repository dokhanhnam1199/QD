```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with nuanced scoring and normalization for online Bin Packing Problem.
    """
    # Calculate initial priority score based on negative absolute difference and remaining capacity
    priority = -np.abs(bins_remain_cap - item) + bins_remain_cap
    
    # Set priority to negative infinity if bin cannot fit the item
    priority[bins_remain_cap < item] = -np.inf
    
    # Apply softmax normalization for robustness
    valid_priority = priority[priority != -np.inf]
    if len(valid_priority) > 0:
        exp_priority = np.exp(priority - np.max(valid_priority))  # Subtract max for numerical stability
        exp_priority[priority == -np.inf] = 0
        priority = exp_priority / np.sum(exp_priority)
    else:
        priority = np.zeros_like(priority)
    
    return priority
```
