```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a nuanced handling of remaining capacity.
    
    Prioritizes bins based on remaining capacity closest to item size and 
    remaining capacity after adding the item, with a bonus for nearly full bins.
    """
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    priority = -np.abs(bins_remain_cap - item)
    
    # Nuanced handling: consider remaining capacity after adding the item and give a bonus to nearly full bins
    remaining_cap_after_add = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    priority += -remaining_cap_after_add / (item + 1e-6)  # Normalize the remaining capacity
    
    # Bonus for nearly full bins
    nearly_full_bonus = np.where(bins_remain_cap >= item, (bins_remain_cap - item) < item * 0.1, False)
    priority += np.where(nearly_full_bonus, 1, 0)  # Add a bonus for bins that are 90% full
    
    # Normalize priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    else:
        priority = -np.inf * np.ones_like(priority)
    
    return priority
```
