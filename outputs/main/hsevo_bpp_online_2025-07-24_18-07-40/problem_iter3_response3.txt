```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.
    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.
    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the initial capacity of the bins (assuming it's the same for all bins)
    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)
    initial_capacity = 1.0
    
    # Calculate the priority score for each bin based on the remaining capacity and relative utilization
    # A bin with remaining capacity closest to the item size gets higher priority
    # A bin with higher overall capacity (less utilized) gets higher priority
    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity
    
    # Normalize the priority scores to be within a comparable range
    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements
    max_priority = np.max(priority[bins_remain_cap >= item])
    if not np.isneginf(max_priority):  # Check if there's at least one valid bin
        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)
    else:
        priority = -np.inf * np.ones_like(priority)
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
