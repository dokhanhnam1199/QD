```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on a nuanced scoring system combining best-fit strategy and normalization.
    
    Prioritizes bins with remaining capacity closest to the item size, using exponential normalization.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Set the priority score to negative infinity for bins that cannot hold the item
    priority = np.where(bins_remain_cap < item, -np.inf, 
                        # For bins that can hold the item, use a scoring system that combines best-fit and normalization
                        -diff / (bins_remain_cap + 1e-6) + np.exp(-diff / (item + 1e-6)))
    
    return priority
```
