```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on the remaining capacity and item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score based on how well the item fits into the bin
    # The closer the item size is to the remaining capacity, the higher the priority
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Normalize the priority scores to ensure they are on the same scale
    # Using the negative exponential to give higher scores to bins that are closer to being full
    priority = np.exp(-priority)
    
    # Return the priority scores
    return priority
```
