{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for bins that are nearly full after adding the item.\n    Simple and effective approach for online Bin Packing.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_cap_after_add = bins_remain_cap - item\n    \n    # Set priority to negative infinity for bins that cannot hold the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, -np.abs(remaining_cap_after_add), -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    bonus = np.where((remaining_cap_after_add >= 0) & (remaining_cap_after_add < item), 1e-6, 0)\n    priority += bonus\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), priority)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item as priority.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    uses remaining capacity after adding the item for further differentiation.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Further differentiate bins by considering remaining capacity after adding the item\n    remaining_cap_after_add = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    priority += -remaining_cap_after_add / (item + 1e-6)  # Normalize the remaining capacity\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins and uses remaining capacity after adding item as base priority.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Set priority to negative infinity for bins that cannot hold the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, -np.abs(remain_cap_after_add), -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    priority = np.where((remain_cap_after_add >= 0) & (remain_cap_after_add < item), priority + 1e-6, priority)\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), priority)\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a best-fit strategy and a bonus for nearly full bins.\n    A bin with a remaining capacity closest to the item size gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n    A bonus is given to bins that would be filled to at least 90% capacity after adding the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Define the capacity of the bins (assuming it's the same for all bins)\n    bin_capacity = bins_remain_cap[0] + np.max(bins_remain_cap - bins_remain_cap[0])  # Not needed if we directly compare remain cap\n    \n    # Calculate the priority score for each bin based on best-fit strategy\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Give a bonus to bins that would be filled to at least 90% capacity after adding the item\n    bonus = np.where((bins_remain_cap - item) / bin_capacity <= 0.1, 10, 0)  # Bonus for nearly full bins\n    \n    # Combine the priority score and the bonus\n    priority += bonus\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with a remaining capacity closest to the item size gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n    A bonus is given to bins that are nearly full to maximize capacity utilization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # A bin with remaining capacity closest to the item size gets the highest priority\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Give a bonus to bins that are nearly full (remaining capacity less than 0.5 * item size)\n    nearly_full_bonus = bins_remain_cap < 0.5 * item\n    priority[nearly_full_bonus] += 1\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for bins that are nearly full after adding the item.\n    Simple and effective approach for online Bin Packing.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_cap_after_add = bins_remain_cap - item\n    \n    # Set priority to negative infinity for bins that cannot hold the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, -np.abs(remaining_cap_after_add), -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    bonus = np.where((remaining_cap_after_add >= 0) & (remaining_cap_after_add < item), 1e-6, 0)\n    priority += bonus\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), priority)\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    Prioritizes bins based on negative absolute difference and a bonus for bins that are almost full.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Assign high priority to bins where item fits using best-fit strategy\n    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item, similar to priority_v1's logic\n    remaining_after_add = bins_remain_cap - item\n    priority = np.where((remaining_after_add >= 0) & (remaining_after_add < item/2), priority + 1e-6, priority)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item as priority.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    uses remaining capacity after adding the item for further differentiation.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Further differentiate bins by considering remaining capacity after adding the item\n    remaining_cap_after_add = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    priority += -remaining_cap_after_add / (item + 1e-6)  # Normalize the remaining capacity\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with a remaining capacity closest to the item size gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n    A bonus is given to bins that are nearly full to maximize capacity utilization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # A bin with remaining capacity closest to the item size gets the highest priority\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Give a bonus to bins that are nearly full (remaining capacity less than 0.5 * item size)\n    nearly_full_bonus = bins_remain_cap < 0.5 * item\n    priority[nearly_full_bonus] += 1\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_cap = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    priority = best_fit + 0.5 * (-remaining_cap / np.max(remaining_cap + 1e-6))\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_cap_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_cap_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_cap_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_cap_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_cap_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_cap_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}