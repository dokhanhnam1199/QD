{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    Prioritizes bins based on negative absolute difference and a bonus for bins that are almost full.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Assign high priority to bins where item fits using best-fit strategy\n    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item, similar to priority_v1's logic\n    remaining_after_add = bins_remain_cap - item\n    priority = np.where((remaining_after_add >= 0) & (remaining_after_add < item/2), priority + 1e-6, priority)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines best-fit strategy with remaining capacity after adding item.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    remaining capacity after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    best_fit_priority = -np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    remaining_capacity_priority = bins_remain_cap - item\n    \n    # Combine priorities, ensuring bins that can't fit the item have lowest priority\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that both use a similar best-fit strategy but differ in how they handle the remaining capacity after adding an item. The top heuristics tend to use a more nuanced approach to prioritizing bins, such as adding a bonus for bins that are nearly full or normalizing the priority scores. Comparing (1st) vs (2nd), we see that the first heuristic adds a small bonus to bins that are almost full, while the second heuristic normalizes the remaining capacity after adding the item. (3rd) vs (4th) shows a similar pattern, with the third heuristic enhancing priority for nearly full bins and the fourth giving a significant bonus to bins that would be filled to at least 90% capacity. Overall, the top heuristics tend to combine best-fit strategies with additional factors like remaining capacity and bonuses for nearly full bins, and they often normalize their priority scores.\n- \nTo design better heuristics, we need to redefine 'Current self-reflection' while avoiding the pitfalls of 'Ineffective self-reflection'. Here's a breakdown:\n\n* **Keywords**: Best-fit strategy, nuanced handling, remaining capacity, normalization techniques\n* **Advice**: Combine best-fit strategies with nuanced handling, and consider simple, focused strategies for effective heuristics.\n* **Avoid**: Complex scoring systems, unnecessary normalization, repetitive code, and duplication.\n* **Explanation**: By focusing on simplicity and nuanced handling of remaining capacity, we can create more effective heuristics that avoid the pitfalls of overly complex scoring systems and unnecessary normalization.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}