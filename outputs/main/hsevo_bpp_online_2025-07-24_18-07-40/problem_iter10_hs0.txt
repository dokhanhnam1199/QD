import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                bonus_threshold_ratio: float = 0.6498141294830639, 
                bonus_value: float = 3.70466393690008e-06, 
                normalization_epsilon: float = 1.8964370899987276e-06) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for nearly full bins.
    Simple and focused approach for effective online Bin Packing.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate the priority score based on negative difference
    priority = -diff
    
    # Set priority to negative infinity for bins that cannot hold the item
    valid_bins = bins_remain_cap >= item
    priority = np.where(valid_bins, priority, -np.inf)
    
    # Enhance priority for bins that are almost full after adding the item
    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item * bonus_threshold_ratio), priority + bonus_value, priority)
    
    # Normalize the priority scores for valid bins
    if np.any(valid_bins):  
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + normalization_epsilon), priority)
    
    return priority
