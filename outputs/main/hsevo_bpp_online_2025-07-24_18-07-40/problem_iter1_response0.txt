```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # For bins that have enough capacity, the priority is the negative of the remaining capacity after addition
    # This encourages packing items tightly into bins
    priority = np.where(remaining_cap_after_addition >= 0, -remaining_cap_after_addition, -np.inf)
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority)
    if max_priority != -np.inf:  # Check if there are bins with enough capacity
        priority = np.where(priority != -np.inf, priority / max_priority, 0)
    else:
        priority = np.zeros_like(bins_remain_cap)
    
    return priority
```
