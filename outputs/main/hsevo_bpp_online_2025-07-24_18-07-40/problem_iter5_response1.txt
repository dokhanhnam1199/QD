```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on a nuanced scoring system combining best-fit strategy and remaining capacity.
    """
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate priority score using a combination of difference and remaining capacity
    priority = -diff / (bins_remain_cap + 1e-6) + bins_remain_cap
    
    # Set priority to negative infinity for bins without enough capacity
    priority[bins_remain_cap < item] = -np.inf
    
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        min_priority = np.min(priority[valid_bins])
        max_priority = np.max(priority[valid_bins])
        if max_priority != min_priority:
            priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)
        else:
            priority[valid_bins] = 1.0
    
    return priority
```
