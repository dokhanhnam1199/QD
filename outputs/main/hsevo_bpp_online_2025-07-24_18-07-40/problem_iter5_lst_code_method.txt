{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin by combining best-fit strategy and nuanced scoring.\n    \"\"\"\n    # Check if item can fit into each bin and calculate remaining capacity after addition\n    can_fit = bins_remain_cap >= item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Assign high priority to bins where item fits, using negative absolute difference for best-fit strategy\n    priority = np.where(can_fit, -np.abs(remaining_cap_after_addition), -np.inf)\n    \n    # Normalize priority scores using exponential function for bins where item fits\n    max_priority = np.max(priority)\n    priority = np.where(can_fit, np.exp(priority - max_priority), priority)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity \n    of each bin and a normalization technique to improve heuristic design.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score for each bin using a combination of the difference and the remaining capacity\n    # A bin with remaining capacity closest to the item size and with more remaining capacity gets the highest priority\n    priority = -diff / (bins_remain_cap + 1e-6)  # Adding a small value to avoid division by zero\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    # Normalize the priority scores to be between 0 and 1 for bins with sufficient capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        if max_priority != min_priority:\n            priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)\n        else:\n            priority[valid_bins] = 1.0  # All valid bins have the same priority, so set them to 1.0\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on a nuanced scoring system combining best-fit strategy and normalization.\n    \n    Prioritizes bins with remaining capacity closest to the item size, using exponential normalization.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Set the priority score to negative infinity for bins that cannot hold the item\n    priority = np.where(bins_remain_cap < item, -np.inf, \n                        # For bins that can hold the item, use a scoring system that combines best-fit and normalization\n                        -diff / (bins_remain_cap + 1e-6) + np.exp(-diff / (item + 1e-6)))\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines elements of best-fit and nuanced scoring.\n    Prioritizes bins based on negative absolute difference and remaining capacity.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score as the negative of the difference, normalized by remaining capacity\n    priority = -diff / (bins_remain_cap + 1e-6)\n    \n    # Set the priority score to negative infinity for bins that cannot hold the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    # Enhance priority for bins that are almost full after adding the item\n    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)\n    \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and a normalization technique.\n    A bin with a remaining capacity closest to the item size gets the highest priority, and the priority is normalized to be between 0 and 1.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the remaining capacity of each bin and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the minimum and maximum differences\n    min_diff = np.min(diff[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else 0\n    max_diff = np.max(diff)\n    \n    # Normalize the differences to be between 0 and 1\n    normalized_diff = (diff - min_diff) / (max_diff - min_diff + 1e-9)\n    \n    # Calculate the priority score for each bin\n    # A bin with a remaining capacity closest to the item size gets the highest priority\n    priority = 1 - normalized_diff\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity and item size.\n    Combines nuanced scoring and normalization techniques for improved heuristic design.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Assign a very low priority to bins where the item doesn't fit\n    priority = np.where(remaining_cap_after_addition < 0, -np.inf, \n                        # For bins where the item fits, use a nuanced scoring system\n                        -remaining_cap_after_addition)\n    \n    # Normalize the priority scores using the exponential function\n    priority = np.exp(priority)\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on a nuanced scoring system combining best-fit strategy and normalization.\n    \n    Prioritizes bins with remaining capacity closest to the item size, using exponential normalization.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Set the priority score to negative infinity for bins that cannot hold the item\n    priority = np.where(bins_remain_cap < item, -np.inf, \n                        # For bins that can hold the item, use a scoring system that combines best-fit and normalization\n                        -diff / (bins_remain_cap + 1e-6) + np.exp(-diff / (item + 1e-6)))\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin by combining best-fit strategy and nuanced scoring.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Assign -inf priority to bins where the item doesn't fit\n    priority = np.where(remaining_capacity_after_addition >= 0, \n                        # Use negative remaining capacity for best-fit strategy\n                        -remaining_capacity_after_addition + \n                        # Add a small bonus for bins that are almost full\n                        np.exp(-remaining_capacity_after_addition / item), \n                        -np.inf)\n    \n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin by combining Best-Fit strategy with normalization.\n    Prioritizes bins that can accommodate the item and have remaining capacity closest to the item size.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Bins that cannot accommodate the item get a priority of -inf\n    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)\n    \n    # Normalize the priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        if max_priority != min_priority:\n            priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)\n    \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity and item size.\n    Combines best-fit strategy with exponential normalization for robustness.\n    \"\"\"\n    # Calculate priority score as negative absolute difference between remaining capacity and item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Set priority to negative infinity if bin cannot fit the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    # Apply softmax to convert scores to probabilities for normalization\n    exp_priority = np.exp(priority - np.max(priority[priority != -np.inf]))  # Subtract max for numerical stability\n    exp_priority[priority == -np.inf] = 0  # Set exp_priority to 0 where priority is -inf\n    \n    # Normalize to get final priority scores\n    sum_exp_priority = np.sum(exp_priority)\n    if sum_exp_priority > 0:\n        priority = exp_priority / sum_exp_priority\n    else:\n        priority = np.zeros_like(exp_priority)\n    \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on a combination of the remaining capacity of each bin and its relative utilization.\n    A bin with a remaining capacity closest to the item size and higher overall capacity gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the initial capacity of the bins (assuming it's the same for all bins)\n    # For demonstration, let's assume the initial capacity is 1.0 (can be changed based on actual problem requirements)\n    initial_capacity = 1.0\n    \n    # Calculate the priority score for each bin based on the remaining capacity and relative utilization\n    # A bin with remaining capacity closest to the item size gets higher priority\n    # A bin with higher overall capacity (less utilized) gets higher priority\n    priority = -np.abs(bins_remain_cap - item) / initial_capacity + bins_remain_cap / initial_capacity\n    \n    # Normalize the priority scores to be within a comparable range\n    # Using a simple normalization technique for demonstration; can be adjusted based on the problem's requirements\n    max_priority = np.max(priority[bins_remain_cap >= item])\n    if not np.isneginf(max_priority):  # Check if there's at least one valid bin\n        priority = np.where(bins_remain_cap >= item, (priority - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item])), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}