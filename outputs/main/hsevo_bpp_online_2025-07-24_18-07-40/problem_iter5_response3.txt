```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced scoring and normalization for online Bin Packing Problem.
    Prioritizes bins based on negative absolute difference and remaining capacity.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Initial capacity is assumed to be 1.0 for all bins
    initial_capacity = 1.0
    
    # Calculate the priority score as a combination of negative difference and relative utilization
    priority = -diff / initial_capacity + bins_remain_cap / initial_capacity
    
    # Normalize the priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):  
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    else:
        priority = -np.inf * np.ones_like(priority)
    
    # Enhance priority for bins that are almost full after adding the item
    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)
    
    return priority
```
