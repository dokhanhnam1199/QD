```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for nearly full bins and normalization.
    
    Prioritizes bins based on remaining capacity closest to item size, 
    gives a bonus to nearly full bins, and normalizes priority scores.
    """
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    priority = -np.abs(bins_remain_cap - item)
    
    # Give a bonus to bins that are nearly full (remaining capacity less than 0.5 * item size)
    nearly_full_bonus = bins_remain_cap < 0.5 * item
    priority[nearly_full_bonus] += 1
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    # Normalize priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    
    return priority
```
