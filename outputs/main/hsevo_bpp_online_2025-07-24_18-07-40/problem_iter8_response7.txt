```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on a simple best-fit strategy.
    """
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Prioritize bins with remaining capacity closest to the item size and having enough capacity
    valid_bins = bins_remain_cap >= item
    priority = np.where(valid_bins, -diff, -np.inf)  # Simple best-fit strategy
    
    # Normalize priority scores for valid bins using exponential normalization
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)
        priority[valid_bins] = np.exp(priority[valid_bins])  # Exponential normalization
    
    return priority
```
