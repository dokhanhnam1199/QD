{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines best-fit strategy with nuanced normalization.\n    Prioritizes bins with remaining capacity closest to the item size.\n    \"\"\"\n    # Calculate absolute difference between item size and bin remaining capacity\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Set priority to negative infinity for bins that cannot hold the item\n    priority = np.where(bins_remain_cap < item, -np.inf, \n                        # Combine best-fit strategy with relative utilization\n                        -diff / (item + 1e-6) + bins_remain_cap / (np.max(bins_remain_cap) + 1e-6))\n    \n    # Normalize priority scores using softmax-like function for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority + 1e-6)\n        priority[valid_bins] = np.exp(priority[valid_bins]) / (np.sum(np.exp(priority[valid_bins])) + 1e-6)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on best-fit strategy and nuanced normalization.\n    Combines the benefits of nuanced scoring and relative utilization.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Assign a very low priority to bins where the item doesn't fit\n    priority = np.where(remaining_cap_after_addition < 0, -np.inf, \n                        # For bins where the item fits, use a best-fit scoring system with relative utilization\n                        -np.abs(remaining_cap_after_addition) + bins_remain_cap)\n    \n    # Normalize the priority scores using the exponential function\n    valid_bins = np.isfinite(priority)\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        # Normalize the priority scores to avoid identical values\n        priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)\n        priority[valid_bins] = np.exp(priority[valid_bins])  # Apply exponential normalization\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic focuses on a simple yet effective strategy of prioritizing bins based on the remaining capacity closest to the item size. In contrast, the worst heuristic uses a more complex scoring system that doesn't perform as well. \nComparing (1st) vs (2nd), we see that the second-best heuristic combines the best-fit strategy with nuanced normalization, which is more complex than the first. \n(3rd) vs (4th) shows that giving a bonus to bins that are nearly full can be beneficial, but the 4th heuristic's approach is more complicated and slightly less effective. \nOverall, simpler and more focused strategies tend to perform better.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls of 'Ineffective self-reflection'. Here's a redefined approach in 4 bullet points:\n\n* **Keywords**: Simple, focused strategies\n* **Advice**: Design heuristics with straightforward and targeted approaches\n* **Avoid**: Nuanced scoring systems, normalization techniques, and repetitive code\n* **Explanation**: By avoiding complex scoring and normalization, we can create more efficient and effective heuristics that prioritize simplicity and clarity, leading to better performance and design.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}