```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on a combination of best-fit strategy and relative utilization.
    """
    # Calculate the absolute difference between the remaining capacity of each bin and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate the priority score for each bin based on the difference and relative utilization
    priority = -diff + bins_remain_cap
    
    # Normalize the priority scores using exponential normalization for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)
        priority[valid_bins] = np.exp(priority[valid_bins])  # Exponential normalization
    
    # Set priority to negative infinity for bins that cannot hold the item
    priority[~valid_bins] = -np.inf
    
    return priority
```
