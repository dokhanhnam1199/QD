```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on remaining capacity and item size.
    Combines best-fit strategy with exponential normalization for robustness.
    """
    # Calculate priority score as negative absolute difference between remaining capacity and item size
    priority = -np.abs(bins_remain_cap - item)
    
    # Set priority to negative infinity if bin cannot fit the item
    priority[bins_remain_cap < item] = -np.inf
    
    # Apply softmax to convert scores to probabilities for normalization
    exp_priority = np.exp(priority - np.max(priority[priority != -np.inf]))  # Subtract max for numerical stability
    exp_priority[priority == -np.inf] = 0  # Set exp_priority to 0 where priority is -inf
    
    # Normalize to get final priority scores
    sum_exp_priority = np.sum(exp_priority)
    if sum_exp_priority > 0:
        priority = exp_priority / sum_exp_priority
    else:
        priority = np.zeros_like(exp_priority)
    
    return priority
```
