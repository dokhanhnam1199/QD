import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, initial_capacity: float = 5.602718813065824, epsilon: float = 0.0006006268609991822) -> np.ndarray:
    """
    Combines best-fit strategy with nuanced scoring and normalization.
    Prioritizes bins with remaining capacity closest to the item size.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Scoring system that combines best-fit and relative utilization
    priority = np.where(bins_remain_cap < item, -np.inf, 
                        -diff / initial_capacity + bins_remain_cap / initial_capacity + np.exp(-diff / (item + epsilon)))
    
    return priority
