```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on a best-fit strategy and a bonus for nearly full bins.
    A bin with a remaining capacity closest to the item size gets the highest priority.
    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.
    A bonus is given to bins that will be filled to a certain threshold after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on best-fit strategy
    priority = -np.abs(bins_remain_cap - item)
    
    # Give a bonus to bins that will be filled to a certain threshold (e.g., 90% of capacity) after adding the item
    capacity = bins_remain_cap.max()  # Assuming all bins have the same capacity
    threshold = 0.9 * capacity
    bonus = np.where(bins_remain_cap - item <= capacity - threshold, 1, 0)
    priority += bonus
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
