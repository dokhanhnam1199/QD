```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with nuanced scoring and normalization.
    """
    # Calculate remaining capacity after adding the item
    remaining_capacity_after_addition = bins_remain_cap - item
    
    # Assign -inf priority to bins where the item doesn't fit
    # Use negative remaining capacity for best-fit strategy and add a bonus for almost full bins
    priority = np.where(remaining_capacity_after_addition >= 0, 
                        -np.abs(remaining_capacity_after_addition) + 
                        bins_remain_cap / (bins_remain_cap + item),  # bonus for less utilized bins
                        -np.inf)
    
    # Normalize priority scores for valid bins
    valid_bins = remaining_capacity_after_addition >= 0
    if np.any(valid_bins):
        min_priority, max_priority = np.min(priority[valid_bins]), np.max(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority), -np.inf)
    
    return priority
```
