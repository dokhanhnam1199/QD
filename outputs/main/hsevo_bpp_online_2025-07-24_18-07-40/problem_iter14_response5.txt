```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for bins that are nearly full after adding the item and normalizes priority scores.
    """
    # Calculate remaining capacity after adding item to each bin
    remaining_cap_after_add = bins_remain_cap - item
    
    # Best-fit strategy with a check for valid bins
    valid_bins = bins_remain_cap >= item
    priority = np.where(valid_bins, -np.abs(bins_remain_cap - item), -np.inf)
    
    # Bonus for bins that are almost full after adding the item
    bonus = np.where((remaining_cap_after_add >= 0) & (remaining_cap_after_add < item), 1e-6, 0)
    priority += bonus
    
    # Normalize priority scores for valid bins
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    
    return priority
```
