```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin by combining best-fit strategy and nuanced scoring.
    """
    # Calculate remaining capacity after adding the item
    remaining_capacity_after_addition = bins_remain_cap - item
    
    # Assign -inf priority to bins where the item doesn't fit
    priority = np.where(remaining_capacity_after_addition >= 0, 
                        # Use negative remaining capacity for best-fit strategy
                        -remaining_capacity_after_addition + 
                        # Add a small bonus for bins that are almost full
                        np.exp(-remaining_capacity_after_addition / item), 
                        -np.inf)
    
    return priority
```
