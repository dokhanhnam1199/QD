{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    Simple and focused approach for effective online Bin Packing.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score based on negative difference\n    priority = -diff\n    \n    # Set priority to negative infinity for bins that cannot hold the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, priority, -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), priority)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether the bin can fit the item.\n    A bin that can fit the item and has the least remaining capacity gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority scores with negative infinity for all bins\n    priority = np.full_like(bins_remain_cap, -np.inf)\n    \n    # For bins that can fit the item, calculate the priority score as the negative remaining capacity\n    # This way, the bin with the least remaining capacity gets the highest priority\n    can_fit = bins_remain_cap >= item\n    priority[can_fit] = -bins_remain_cap[can_fit]\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether the bin can hold the item.\n    A bin that can hold the item and has the least remaining capacity gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority array with negative infinity\n    priority = np.full_like(bins_remain_cap, -np.inf)\n    \n    # For bins that can hold the item, calculate priority based on remaining capacity\n    # A bin with less remaining capacity gets higher priority\n    can_hold_item = bins_remain_cap >= item\n    priority[can_hold_item] = -bins_remain_cap[can_hold_item]\n    \n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    Simple and focused approach for effective online Bin Packing.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score based on negative difference\n    priority = -diff\n    \n    # Set priority to negative infinity for bins that cannot hold the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, priority, -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)\n    \n    # Normalize the priority scores for valid bins\n    if np.any(valid_bins):  \n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), priority)\n    \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    gives a bonus to bins that are nearly full after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Bonus for bins that are nearly full after adding the item\n    nearly_full_bonus = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item / 2), 1, 0)\n    priority += nearly_full_bonus\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    gives a bonus to bins that are nearly full after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Bonus for bins that are nearly full after adding the item\n    nearly_full_bonus = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item / 2), 1, 0)\n    priority += nearly_full_bonus\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    gives a bonus to bins that are nearly full after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Bonus for bins that are nearly full after adding the item\n    nearly_full_bonus = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item / 2), 1, 0)\n    priority += nearly_full_bonus\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a bonus for nearly full bins.\n    \n    Prioritizes bins based on remaining capacity closest to item size and \n    gives a bonus to bins that are nearly full after adding the item.\n    \"\"\"\n    # Best-fit strategy: prioritize bins with remaining capacity closest to item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Bonus for bins that are nearly full after adding the item\n    nearly_full_bonus = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item / 2), 1, 0)\n    priority += nearly_full_bonus\n    \n    # Normalize priority scores for valid bins\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        min_priority = np.min(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)\n    else:\n        priority = -np.inf * np.ones_like(priority)\n    \n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit strategy with a simple bonus for nearly full bins.\n    Prioritizes bins based on negative absolute difference and a bonus for bins that are almost full.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Assign high priority to bins where item fits using best-fit strategy\n    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)\n    \n    # Enhance priority for bins that are almost full after adding the item\n    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)\n    \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Priority score for each bin based on remaining capacity closest to item size and bin utilization.\n    \"\"\"\n    # Calculate priority score: favor bins with remaining capacity closest to item size and higher utilization\n    max_capacity = 1.0  # Uniform initial capacity for all bins\n    priority = -np.abs(bins_remain_cap - item) + 0.5 * (max_capacity - bins_remain_cap) / max_capacity\n    \n    # Set priority to negative infinity if bin cannot hold the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}