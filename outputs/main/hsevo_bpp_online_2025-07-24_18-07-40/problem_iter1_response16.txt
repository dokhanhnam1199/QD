```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    The priority is calculated based on the remaining capacity of each bin. 
    The bin with the least remaining capacity that can still fit the item gets the highest priority.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin
    # The score is high if the bin has enough capacity and is close to being full
    scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Normalize the scores to avoid overflow
    max_score = np.max(scores)
    if max_score > -np.inf:
        scores = scores - max_score
    
    # Apply softmax to convert scores to probabilities
    exp_scores = np.exp(scores)
    priority = exp_scores / np.sum(exp_scores)
    
    return priority
```
