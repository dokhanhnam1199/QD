```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin and the item size.
    A bin with a remaining capacity closest to the item size gets the highest priority, 
    with a bonus for bins that are nearly full. 
    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin
    # A bin with remaining capacity closest to the item size gets the highest priority
    priority = -np.abs(bins_remain_cap - item)
    
    # Give a bonus to bins that are nearly full to encourage packing items tightly
    nearly_full_bonus = np.where((bins_remain_cap - item) < (item / 2), 1, 0)
    priority += nearly_full_bonus
    
    # Normalize the priority scores to be within a comparable range
    max_priority = np.max(priority[bins_remain_cap >= item])
    if max_priority != -np.inf:  # Check to avoid division by -inf or nan
        priority[bins_remain_cap >= item] = (priority[bins_remain_cap >= item] - np.min(priority[bins_remain_cap >= item])) / (max_priority - np.min(priority[bins_remain_cap >= item]))
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
