```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for nearly full bins and normalization.
    
    Prioritizes bins based on remaining capacity closest to item size, 
    with a bonus for bins that would be nearly full after adding the item.
    """
    # Define the capacity of the bins (assuming it's the same for all bins)
    bin_capacity = np.max(bins_remain_cap) + (np.max(bins_remain_cap) - np.min(bins_remain_cap))
    
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    best_fit_priority = -np.abs(bins_remain_cap - item)
    
    # Give a bonus to bins that would be filled to at least 90% capacity after adding the item
    bonus = np.where((bins_remain_cap - item) / bin_capacity <= 0.1, 10, 0)
    
    # Combine the best-fit priority and the bonus
    priority = best_fit_priority + bonus
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    # Normalize priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    
    return priority
```
