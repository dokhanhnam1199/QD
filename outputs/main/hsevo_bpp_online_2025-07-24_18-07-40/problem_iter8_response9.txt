```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a simple scoring system.
    Prioritizes bins with remaining capacity closest to the item size.
    """
    # Calculate absolute difference between item size and bin remaining capacity
    diff = np.abs(bins_remain_cap - item)
    
    # Assign a very low priority to bins where the item doesn't fit
    priority = np.where(bins_remain_cap < item, -np.inf, -diff)
    
    # Normalize priority scores using softmax-like function for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority + 1e-6)
        priority[valid_bins] = np.exp(priority[valid_bins]) / (np.sum(np.exp(priority[valid_bins])) + 1e-6)
    
    return priority
```
