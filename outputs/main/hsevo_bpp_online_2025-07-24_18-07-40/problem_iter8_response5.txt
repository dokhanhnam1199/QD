```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a simple bonus for nearly full bins.
    Prioritizes bins based on negative absolute difference and a bonus for bins that are almost full.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Assign high priority to bins where item fits using best-fit strategy
    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)
    
    # Enhance priority for bins that are almost full after adding the item
    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)
    
    return priority
```
