```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin and 
    whether the bin has enough capacity to hold the item. A bin with a remaining 
    capacity closest to the item size gets the highest priority among the bins 
    that can hold the item. If no bin can hold the item, the bin with the largest 
    remaining capacity gets the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array with negative infinity
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    # Check if there are bins that can hold the item
    valid_bins = bins_remain_cap >= item
    
    # For bins that can hold the item, calculate priority based on remaining capacity
    if np.any(valid_bins):
        # A bin with remaining capacity closest to the item size gets the highest priority
        priority[valid_bins] = -np.abs(bins_remain_cap[valid_bins] - item)
    else:
        # If no bin can hold the item, the bin with the largest remaining capacity gets the highest priority
        priority = bins_remain_cap
    
    return priority
```
