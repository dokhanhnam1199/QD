```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on a combination of the remaining capacity of each bin and a normalization technique.
    A bin with a remaining capacity closest to the item size gets the highest priority, and the priority is normalized to be between 0 and 1.
    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the remaining capacity of each bin and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate the minimum and maximum differences
    min_diff = np.min(diff[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else 0
    max_diff = np.max(diff)
    
    # Normalize the differences to be between 0 and 1
    normalized_diff = (diff - min_diff) / (max_diff - min_diff + 1e-9)
    
    # Calculate the priority score for each bin
    # A bin with a remaining capacity closest to the item size gets the highest priority
    priority = 1 - normalized_diff
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
