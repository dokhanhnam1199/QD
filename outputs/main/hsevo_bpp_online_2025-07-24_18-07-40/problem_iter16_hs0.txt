import numpy as np
import random
import math
import scipy
import torch

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                bonus_threshold_ratio: float = 1.2923954224278686, 
                bonus_value: float = 8.31224968686425e-06, 
                epsilon: float = 2.3985779172516772e-06) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for bins that are nearly full after adding the item and normalization.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_add = bins_remain_cap - item
    
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    priority = np.where(bins_remain_cap >= item, -np.abs(bins_remain_cap - item), -np.inf)
    
    # Enhance priority for bins that are almost full after adding the item
    bonus = np.where((remaining_cap_after_add >= 0) & (remaining_cap_after_add < item * bonus_threshold_ratio), bonus_value, 0)
    priority += bonus
    
    # Normalize the priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):  
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + epsilon), priority)
    
    return priority
