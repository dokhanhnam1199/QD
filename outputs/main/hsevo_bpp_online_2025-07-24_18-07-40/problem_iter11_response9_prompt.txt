{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority score for each bin based on remaining capacity closest to item size and bin utilization.\n    \"\"\"\n    # Calculate priority score: favor bins with remaining capacity closest to item size and higher utilization\n    max_capacity = 1.0  # Uniform initial capacity for all bins\n    priority = -np.abs(bins_remain_cap - item) + 0.5 * (max_capacity - bins_remain_cap) / max_capacity\n    \n    # Set priority to negative infinity if bin cannot hold the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin and whether it can fit the item.\n    A bin that can fit the item and has the least remaining capacity after adding the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask for bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    # Initialize priority scores with negative infinity for bins that cannot fit the item\n    priority = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic combines best-fit strategy with a bonus for nearly full bins and normalizes the priority scores, whereas the worst simply uses the remaining capacity after adding the item as priority without normalization or bonus. \nComparing (1st) vs (2nd), we see that both use a form of best-fit strategy, but (1st) includes a bonus for nearly full bins and normalization. \n(3rd) vs (4th) shows duplication in code, indicating that (4th) is not an improvement over (3rd). \nComparing (2nd) vs (3rd), there's no significant difference, suggesting that they are essentially the same strategy.\n(19th) vs (20th) again shows identical strategies, indicating no improvement.\nOverall, top heuristics incorporate a combination of best-fit strategy, bonus for nearly full bins, and normalization, while the lower-ranked ones often lack these nuances or are duplicates.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls of 'Ineffective self-reflection'. Here's a redefined approach:\n\n* **Keywords**: Simple strategies, focused approaches, bin packing, unique techniques.\n* **Advice**: \n    * Incorporate a best-fit strategy to optimize bin packing.\n    * Consider bonuses for nearly full bins to maximize capacity utilization.\n* **Avoid**: Complex scoring systems, unnecessary normalization, and repetitive code.\n* **Explanation**: By focusing on simple, unique strategies and avoiding unnecessary complexity, we can design more effective heuristics that efficiently solve bin packing problems.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}