```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with bonus for nearly full bins and normalization.
    
    Prioritizes bins based on remaining capacity closest to item size, 
    adds bonus for bins that are nearly full, and normalizes priority scores.
    """
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    priority = -np.abs(bins_remain_cap - item)
    
    # Add bonus for bins that are nearly full after adding the item
    remaining_cap_after_add = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    bonus = -remaining_cap_after_add / (item + 1e-6)  # Normalize the remaining capacity
    
    # Combine best-fit priority and bonus
    priority += bonus
    
    # Normalize priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    else:
        priority = -np.inf * np.ones_like(priority)
    
    return priority
```
