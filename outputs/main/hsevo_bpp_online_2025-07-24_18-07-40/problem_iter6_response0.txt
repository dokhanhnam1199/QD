```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin and the item size.
    A bin with a remaining capacity closest to the item size and not less than it gets the highest priority.
    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.
    The priority is also influenced by the bin utilization, favoring bins that are more full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin
    # A bin with remaining capacity closest to the item size gets the highest priority
    # We also consider the bin utilization by adding a term that favors more full bins
    max_capacity = np.max(bins_remain_cap) + item  # Assuming all bins have the same max capacity
    priority = -np.abs(bins_remain_cap - item) + 0.5 * (max_capacity - bins_remain_cap) / max_capacity
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
