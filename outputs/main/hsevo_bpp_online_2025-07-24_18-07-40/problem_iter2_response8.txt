```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines elements of best-fit and nuanced scoring.
    Prioritizes bins based on negative absolute difference and remaining capacity.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate the priority score as the negative of the difference, normalized by remaining capacity
    priority = -diff / (bins_remain_cap + 1e-6)
    
    # Set the priority score to negative infinity for bins that cannot hold the item
    priority[bins_remain_cap < item] = -np.inf
    
    # Enhance priority for bins that are almost full after adding the item
    priority = np.where((bins_remain_cap - item >= 0) & (bins_remain_cap - item < item), priority + 1e-6, priority)
    
    return priority
```
