```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with remaining capacity after adding item.
    
    Prioritizes bins based on remaining capacity closest to item size and 
    remaining capacity after adding the item.
    """
    # Best-fit strategy: prioritize bins with remaining capacity closest to item size
    best_fit_priority = -np.abs(bins_remain_cap - item)
    
    # Prioritize bins with less remaining capacity after adding the item
    remaining_capacity_priority = bins_remain_cap - item
    
    # Combine priorities, ensuring bins that can't fit the item have lowest priority
    can_fit = bins_remain_cap >= item
    priority = np.where(can_fit, best_fit_priority + remaining_capacity_priority, -np.inf)
    
    # Normalize priority scores for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), -np.inf)
    
    return priority
```
