```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin using a nuanced scoring system with exponential normalization.

    The priority is higher for bins that have enough capacity for the item and 
    lower remaining capacity after packing the item.
    """
    # Calculate the remaining capacity after packing the item into each bin
    remaining_cap_after_packing = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_packing >= 0
    
    # Assign a very low priority to bins that cannot hold the item
    priority = np.where(has_enough_capacity, -remaining_cap_after_packing, -np.inf)
    
    # Apply exponential normalization to priority scores
    max_priority = np.max(priority)
    if max_priority != -np.inf:  
        valid_priority = priority != -np.inf
        priority[valid_priority] = np.exp(priority[valid_priority] - max_priority)
        priority[~valid_priority] = 0
    
    return priority
```
