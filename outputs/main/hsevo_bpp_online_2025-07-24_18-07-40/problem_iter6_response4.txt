```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on a combination of the remaining capacity 
    and the proportion of the bin that the item would occupy. A bin with a 
    remaining capacity closest to the item size and that would be filled to a 
    high proportion gets the highest priority. If a bin has not enough capacity 
    to hold the item, its priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin (assuming all bins have the same total capacity).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Assuming all bins have the same total capacity, which is the maximum possible value in bins_remain_cap
    bin_capacity = np.max(bins_remain_cap) + (np.max(bins_remain_cap) - np.min(bins_remain_cap)) / 2
    
    # Calculate the proportion of the bin that the item would occupy
    occupancy_proportion = item / (bins_remain_cap)
    
    # Avoid division by zero for empty bins
    occupancy_proportion[bins_remain_cap == bin_capacity] = 0
    
    # Calculate the priority score for each bin
    # A bin with remaining capacity closest to the item size and high occupancy proportion gets the highest priority
    priority = -np.abs(bins_remain_cap - item) + np.log(1 + (1 - occupancy_proportion))
    
    # If a bin does not have enough capacity, set its priority to negative infinity
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
