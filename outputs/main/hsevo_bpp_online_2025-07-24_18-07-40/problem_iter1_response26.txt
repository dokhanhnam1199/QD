```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    The priority score is calculated based on the remaining capacity of each bin.
    A bin with remaining capacity closest to the item size gets the highest priority.
    If a bin doesn't have enough capacity, its priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # For bins with enough capacity, calculate the priority score as the negative of the remaining capacity
    # This is because we want to prioritize bins with remaining capacity closest to the item size
    priority_scores = np.where(has_enough_capacity, -remaining_cap_after_addition, -np.inf)
    
    return priority_scores
```
