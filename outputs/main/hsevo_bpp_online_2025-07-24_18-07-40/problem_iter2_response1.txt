```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin by combining best-fit strategy and nuanced scoring.
    
    Prioritizes bins with the least remaining capacity after adding the item.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_capacity_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    # For bins that can accommodate the item, use negative remaining capacity as priority
    priority = np.where(remaining_capacity_after_addition >= 0, 
                        -remaining_capacity_after_addition, 
                        -np.inf)
    
    # Normalize priority scores using exponential function to enhance nuance
    priority = np.exp(priority - np.max(priority[~np.isinf(priority)]))
    
    return priority
```
