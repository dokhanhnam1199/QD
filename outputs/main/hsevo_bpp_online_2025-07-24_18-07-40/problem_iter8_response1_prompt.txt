{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with a remaining capacity closest to the item size gets the highest priority.\n    If a bin has not enough capacity to hold the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # A bin with remaining capacity closest to the item size gets the highest priority\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # If a bin does not have enough capacity, set its priority to negative infinity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on a nuanced scoring system combining best-fit strategy and remaining capacity.\n    \"\"\"\n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate priority score using a combination of difference and remaining capacity\n    priority = -diff / (bins_remain_cap + 1e-6) + bins_remain_cap\n    \n    # Set priority to negative infinity for bins without enough capacity\n    priority[bins_remain_cap < item] = -np.inf\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        if max_priority != min_priority:\n            priority[valid_bins] = (priority[valid_bins] - min_priority) / (max_priority - min_priority)\n        else:\n            priority[valid_bins] = 1.0\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic focuses on a simple yet effective strategy of prioritizing bins based on the remaining capacity closest to the item size. In contrast, the worst heuristic uses a more complex scoring system that doesn't perform as well. \nComparing (1st) vs (2nd), we see that the second-best heuristic combines the best-fit strategy with nuanced normalization, which is more complex than the first. \n(3rd) vs (4th) shows that giving a bonus to bins that are nearly full can be beneficial, but the 4th heuristic's approach is more complicated and slightly less effective. \nOverall, simpler and more focused strategies tend to perform better.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls of 'Ineffective self-reflection'. Here's a redefined approach in 4 bullet points:\n\n* **Keywords**: Simple, focused strategies\n* **Advice**: Design heuristics with straightforward and targeted approaches\n* **Avoid**: Nuanced scoring systems, normalization techniques, and repetitive code\n* **Explanation**: By avoiding complex scoring and normalization, we can create more efficient and effective heuristics that prioritize simplicity and clarity, leading to better performance and design.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}