```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit strategy with a bonus for nearly full bins and uses remaining capacity after adding item as base priority.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remain_cap_after_add = bins_remain_cap - item
    
    # Set priority to negative infinity for bins that cannot hold the item
    valid_bins = bins_remain_cap >= item
    priority = np.where(valid_bins, -np.abs(remain_cap_after_add), -np.inf)
    
    # Enhance priority for bins that are almost full after adding the item
    priority = np.where((remain_cap_after_add >= 0) & (remain_cap_after_add < item), priority + 1e-6, priority)
    
    # Normalize the priority scores for valid bins
    if np.any(valid_bins):  
        max_priority = np.max(priority[valid_bins])
        min_priority = np.min(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-6), priority)
    
    return priority
```
