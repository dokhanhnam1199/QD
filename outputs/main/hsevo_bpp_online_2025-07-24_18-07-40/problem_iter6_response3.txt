```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin and 
    the item size. A bin with a remaining capacity closest to the item size gets 
    the highest priority. Additionally, the priority is influenced by the ratio 
    of the item size to the bin's remaining capacity, favoring bins that are 
    filled to a higher extent after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that have enough capacity for the item
    valid_bins = bins_remain_cap >= item
    
    # For valid bins, calculate the priority score based on the remaining capacity
    # and the fill ratio after adding the item
    priority = np.zeros_like(bins_remain_cap)
    priority[valid_bins] = -np.abs(bins_remain_cap[valid_bins] - item) + np.log(item / (bins_remain_cap[valid_bins] - item + 1e-6))
    
    # For bins that do not have enough capacity, set their priority to negative infinity
    priority[~valid_bins] = -np.inf
    
    return priority
```
