```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more sophisticated priority function inspired by physics. It considers:
    1. Waste: Bins with less waste after adding the item get higher priority.
    2. Potential Energy: A lower potential energy after adding is favored.
       (Imagine the item "falling" into the bin; lower fall = better fit).
    3. Avoidance of Trivial Fits: Discourages putting tiny items in huge bins early.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap) - np.inf  # No fit, very low priority

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Assign infinite waste to infeasible bins
    waste_normalized = np.clip(1 - (waste / bins_remain_cap), a_min=0, a_max=1) # Higher when less waste after placing item in bin. Between 0-1. Inf. waste = 0.

    # Potential energy is the "drop" of the item, smaller drop = higher priority
    potential_energy = item / bins_remain_cap # If close to zero, tiny item inside huge bin

    # Avoid filling bins with too big items. Add some buffer to increase priority as approaching bin capacity
    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    buffer_boost = np.exp(-2 * np.abs(bin_utilization - 0.9)) # Prefer 90 % util

    # Priority is a combination of these factors:
    priorities = waste_normalized * (1 - potential_energy) * buffer_boost
    priorities[~potential_bins] = -np.inf  # Ensure infeasible bins get lowest priority.

    return priorities
```
