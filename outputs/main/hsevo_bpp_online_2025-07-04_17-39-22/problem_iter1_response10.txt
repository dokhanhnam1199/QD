```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the remaining capacity after placing the item
    new_remain_cap = bins_remain_cap - item
    
    # Give high priority to bins that can accommodate the item
    can_accommodate = new_remain_cap >= 0
    priorities[can_accommodate] += 1  # Basic priority

    # Further prioritize bins where the remaining capacity is small but non-negative (minimize wasted space)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf # Set bins that cannot accommodate to infinite waste.
    
    priorities[can_accommodate] += (1 / (waste[can_accommodate] + 0.00001))  #avoid division by zero
    

    # Optionally, penalize bins that are already very full to encourage spreading items
    #fullness = 1 - (bins_remain_cap / bins_remain_cap.max())  # Normalize to between 0 and 1

    # Penalize bins where this item is close to half of its capacity.
    # Prioritize bin that is closest to current item size
    diff = np.abs(bins_remain_cap - item)
    priorities += 1.0 / (diff + 0.00001)

    return priorities
```
