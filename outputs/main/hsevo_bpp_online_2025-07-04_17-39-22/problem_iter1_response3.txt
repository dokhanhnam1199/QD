```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits reasonably well,
    avoiding both bins that are too full (small remaining capacity)
    and bins that are too empty (large remaining capacity compared to item size).
    It also penalizes bins where the item almost perfectly fills the bin (leaving very little space),
    encouraging a more balanced fill across bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins where the item fits (positive remaining capacity).
    # Penalize bins where item doesn't fit by assigning a very low priority.
    fits = bins_remain_cap >= item
    priorities[~fits] = -np.inf # Very Low Priority: Cannot fit

    valid_bins = bins_remain_cap[fits]

    if len(valid_bins) > 0:

      # Calculate the fill ratio after adding the item to valid bins.
      fill_ratio = item / valid_bins
      remaining_space = valid_bins - item

      # 1. Encourage bins where the item uses a substantial portion of the bin's capacity,
      # but doesn't fill it up almost entirely.  Avoid almost perfect fits

      priorities[fits] = np.exp(-5*np.abs(fill_ratio - 0.7))  # centered on 0.7 filling percentage with exponential drop off
    return priorities
```
