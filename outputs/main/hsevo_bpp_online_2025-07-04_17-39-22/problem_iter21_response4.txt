```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priority scores for bins based on remaining capacity and item size,
    aiming for a balance between bin utilization and avoiding excessive fragmentation.

    Args:
        item (float): Size of the item to be packed.
        bins_remain_cap (np.ndarray): Array of remaining capacities for each bin.

    Returns:
        np.ndarray: Priority scores for each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # All bins are infeasible

    # Initialize priorities for feasible bins based on remaining capacity ratio.
    capacity_ratios = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = capacity_ratios # Base priority: favor tighter fits

    # Add a small bonus to bins that can accommodate the item well (moderate waste).
    moderate_waste = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins] < 0.3
    priorities[feasible_bins][moderate_waste] += 0.1  # Encourage efficient packing

    # Penalize bins that lead to small fragments (avoid fragmentation).
    fragment_size = bins_remain_cap[feasible_bins] - item
    small_fragment = (fragment_size / item) < 0.2
    priorities[feasible_bins][small_fragment] -= 0.2  # Discourage small fragments

    # Introduce some randomness for exploration (especially when many bins are feasible).
    num_feasible = np.sum(feasible_bins)
    if num_feasible > 3:
        priorities[feasible_bins] += np.random.normal(0, 0.05, size=np.sum(feasible_bins))
    else:
        priorities[feasible_bins] += np.random.normal(0, 0.1, size=np.sum(feasible_bins)) # More exploration

    # If the item is large, slightly prefer bins with more remaining capacity.
    if item > np.mean(bins_remain_cap):
        priorities[feasible_bins] += bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) * 0.05 # Slight preference
    
    # Set the priority of infeasible bins to -inf
    priorities[~feasible_bins] = -np.inf

    return priorities
```
