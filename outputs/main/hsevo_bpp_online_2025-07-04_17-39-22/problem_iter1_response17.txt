```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates a stochastic element and a consideration for bin fragmentation.
    It also introduces a 'quantum tunneling' effect to occasionally explore less obvious choices.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small constant to avoid division by zero and log(0)
    bins_remain_cap = np.clip(bins_remain_cap, epsilon, None) # Ensure no bin has zero capacity or negative

    # Heuristic 1: Remaining capacity after packing (higher is better, less fragmentation)
    remaining_after_pack = bins_remain_cap - item
    remaining_after_pack = np.clip(remaining_after_pack, 0, None)  # Negative capacity is meaningless
    priority_remaining = remaining_after_pack

    # Heuristic 2: Percentage of bin filled (closer to full, better - reduces total bins)
    fill_percentage = item / bins_remain_cap
    priority_fill = 1 - np.abs(fill_percentage - 0.9)  # Target around 90% full

    # Heuristic 3: Penalize bins too close in size to the item (avoid exact fit, better long term)
    proximity = np.abs(bins_remain_cap - item)
    priority_proximity = -proximity

    # Heuristic 4: Stochastic element (quantum tunneling - introduce some randomness)
    random_noise = np.random.normal(0, 0.1, size=bins_remain_cap.shape)

    # Combine the heuristics
    priorities = 0.4 * priority_remaining + 0.3 * priority_fill + 0.2 * priority_proximity + 0.1 * random_noise

    return priorities
```
