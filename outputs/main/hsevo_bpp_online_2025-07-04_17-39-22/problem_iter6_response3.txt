```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several improvements:
    1.  Adaptive capacity ratio weighting.
    2.  A penalty term for bins that become too full.
    3.  Dynamic exploration/exploitation balance.
    4.  Constraint anticipation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility mask
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bins
    feasible_mask = ~infeasible_mask
    feasible_caps = bins_remain_cap[feasible_mask]

    if np.any(feasible_mask):  # Only proceed if there are feasible bins
        remaining_capacity_after_fit = feasible_caps - item
        capacity_ratio = item / feasible_caps

        # Adaptive Capacity Ratio Weighting: Adjust importance based on average cap.
        avg_cap = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1.0 # Avoid ZeroDivisionError, handle edge case
        adaptive_weight = np.clip(avg_cap / (item + 1e-9), 0.1, 10) # Clip to avoid extreme weights
        capacity_ratio_weighted = capacity_ratio * adaptive_weight

        # Penalty for nearly full bins.  Higher penalty for smaller remaining space.
        fullness_penalty = np.exp(-5 * remaining_capacity_after_fit / (item + 1e-9)) # Higher exponent for stronger penalty
        priorities[feasible_mask] = capacity_ratio_weighted * (1 - fullness_penalty)  # Subtract penalty

        # Dynamic Exploration/Exploitation:  Adjust randomness based on remaining bins.
        num_empty_bins = np.sum(bins_remain_cap > 0.99) # Count bins that are almost empty (>.99 full capacity)
        exploration_factor = np.clip(num_empty_bins / len(bins_remain_cap), 0.01, 0.1) # Avoid zero division, clip range

        priorities += np.random.normal(0, exploration_factor, size=len(priorities))

        # Constraint anticipation: Prefer bins that can accommodate at least a small *future* item
        small_item_size = np.mean(bins_remain_cap[bins_remain_cap>0])/10 if np.any(bins_remain_cap > 0) else 0.1
        future_fit_penalty = np.where(remaining_capacity_after_fit < small_item_size, -0.1 , 0)
        priorities[feasible_mask] += future_fit_penalty # Apply slight penalty if doesn't fit small_item.

    return priorities
```
