```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                small_fragment_threshold_ratio: float = 0.18466643198227367,
                small_fragment_penalty: float = 0.27731097399017257,
                large_capacity_threshold_ratio: float = 1.8626060346685316,
                large_capacity_bonus: float = 1.4940231128487715,
                base_exploration_noise: float = 0.03615474634440513,
                num_feasible_bins_threshold: int = 5,
                exploitation_bonus: float = 0.0388722336961404,
                exploration_noise: float = 0.05315726236485679,
                fragment_penalty_threshold_ratio: float = 0.29623738564910945,
                fragment_penalty_factor: float = 0.6538117438072715,
                bin_utilization_exponent: float = 2.0,
                item_size_threshold_ratio: float = 0.5,
                large_item_bonus: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        small_fragment_threshold_ratio: Threshold ratio for small fragment penalty.
        small_fragment_penalty: Penalty factor for small fragments.
        large_capacity_threshold_ratio: Threshold ratio for large capacity bonus.
        large_capacity_bonus: Bonus factor for large capacity bins.
        base_exploration_noise: Base exploration noise.
        num_feasible_bins_threshold: Threshold for number of feasible bins to switch between exploration and exploitation.
        exploitation_bonus: Bonus for exploitation when more than num_feasible_bins_threshold bins are feasible.
        exploration_noise: Exploration noise when fewer than or equal to num_feasible_bins_threshold bins are feasible.
        fragment_penalty_threshold_ratio: Threshold ratio for fragment penalty.
        fragment_penalty_factor: Penalty factor for fragments.
        bin_utilization_exponent: Exponent to control the impact of bin utilization on priority.
        item_size_threshold_ratio: Threshold ratio for considering an item "large."
        large_item_bonus: Bonus applied when a large item is placed in a well-utilized bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to accommodate the item. Otherwise the priority should be very low.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Make infeasible bins have the lowest priority.

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        # Encourage bins that fit the item *relatively* well.
        # The more filled the bin is the higher the priority.
        priorities[feasible_mask] = capacity_ratio**bin_utilization_exponent  # Increased impact of utilization

        # Reduce the priority if the remaining space is too small *relative* to the item to avoid creating *very* small fragments.
        small_fragment_mask = remaining_capacity_after_fit < (item * small_fragment_threshold_ratio)
        priorities[feasible_mask][small_fragment_mask] *= small_fragment_penalty

        # Slightly increase the priority of bins with large remaining capacity to diversify selection.
        large_capacity_mask = remaining_capacity_after_fit > (item * large_capacity_threshold_ratio)
        priorities[feasible_mask][large_capacity_mask] *= large_capacity_bonus

        # Introduce some randomness to break ties and explore the search space more effectively.
        priorities += np.random.normal(0, base_exploration_noise, size=len(priorities))

        # Adaptive adjustment of exploration vs. exploitation
        # Based on the number of feasible bins
        num_feasible = np.sum(feasible_mask)
        if num_feasible > num_feasible_bins_threshold:  # more options, more exploitation
            priorities[feasible_mask] *= (1 + exploitation_bonus * capacity_ratio) # Favor bins that are already relatively full.
        else: # Fewer options, more exploration
            priorities += np.random.normal(0, exploration_noise, size=len(priorities)) # Higher randomness

        # Dynamic fragment penalty based on item size
        fragment_penalty_threshold = item * fragment_penalty_threshold_ratio  # Adjust threshold relative to item size

        fragment_penalty_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < fragment_penalty_threshold)
        priorities[feasible_mask][fragment_penalty_mask] *= (1 - (remaining_capacity_after_fit[fragment_penalty_mask] / fragment_penalty_threshold) * fragment_penalty_factor) # Apply a graded penalty

        # Bonus for placing large items in well-utilized bins
        if item > bins_remain_cap.max() * item_size_threshold_ratio:
            well_utilized_mask = capacity_ratio > 0.7 # consider a bin well-utilized if 70% filled with new item
            priorities[feasible_mask][well_utilized_mask] *= (1 + large_item_bonus)

    return priorities
```
