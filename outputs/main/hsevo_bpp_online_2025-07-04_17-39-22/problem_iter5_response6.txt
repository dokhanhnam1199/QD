```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive bin selection with waste penalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    feasible_mask = ~infeasible_mask
    remaining_capacities_can_fit = bins_remain_cap[feasible_mask]
    
    if len(remaining_capacities_can_fit) > 0:
        waste = remaining_capacities_can_fit - item
        waste_normalized = waste / remaining_capacities_can_fit
        relative_fullness = 1 - remaining_capacities_can_fit / np.max(bins_remain_cap)
        priorities[feasible_mask] = -waste_normalized + relative_fullness * 0.5 # Adjusted weight

        fragmentation_penalty = np.exp(-5 * waste)
        priorities[feasible_mask] -= 0.1 * fragmentation_penalty

        # Adaptive reuse bonus
        already_full_mask = (remaining_capacities_can_fit < 0.7 * np.max(bins_remain_cap)) & (remaining_capacities_can_fit > item)
        priorities[feasible_mask][already_full_mask] += 0.1 * item * relative_fullness[already_full_mask]

        priorities += np.random.normal(0, 0.005, size=len(priorities))

    return priorities
```
