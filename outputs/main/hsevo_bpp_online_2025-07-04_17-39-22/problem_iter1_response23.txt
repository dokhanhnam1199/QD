```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. Whether the item fits in the bin.  Bins that cannot fit the item receive the lowest priority.
    2. The amount of wasted space if the item is placed in the bin. Less wasted space = higher priority.
    3. A slight preference for bins that are already somewhat full.  This can help consolidate items and reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit, lowest priority.  Important: Must be -inf to avoid comparison issues
        else:
            waste = cap - item
            priorities[i] = -waste + 0.1 * (1 - cap / np.max(bins_remain_cap))  # Minimize waste, prefer somewhat full bins

    return priorities
```
