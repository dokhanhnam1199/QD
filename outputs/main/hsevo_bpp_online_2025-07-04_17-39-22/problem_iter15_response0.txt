```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                small_fragment_threshold_ratio: float = 0.18466643198227367,
                small_fragment_penalty: float = 0.27731097399017257,
                large_capacity_threshold_ratio: float = 1.8626060346685316,
                large_capacity_bonus: float = 1.4940231128487715,
                base_exploration_noise: float = 0.03615474634440513,
                num_feasible_bins_threshold: int = 5,
                exploitation_bonus: float = 0.0388722336961404,
                exploration_noise: float = 0.05315726236485679,
                fragment_penalty_threshold_ratio: float = 0.29623738564910945,
                fragment_penalty_factor: float = 0.6538117438072715,
                bin_occupation_exponent: float = 2.0,
                item_size_relative_importance: float = 0.5) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        small_fragment_threshold_ratio: Threshold ratio for small fragment penalty.
        small_fragment_penalty: Penalty factor for small fragments.
        large_capacity_threshold_ratio: Threshold ratio for large capacity bonus.
        large_capacity_bonus: Bonus factor for large capacity bins.
        base_exploration_noise: Base exploration noise.
        num_feasible_bins_threshold: Threshold for number of feasible bins to switch between exploration and exploitation.
        exploitation_bonus: Bonus for exploitation when more than num_feasible_bins_threshold bins are feasible.
        exploration_noise: Exploration noise when fewer than or equal to num_feasible_bins_threshold bins are feasible.
        fragment_penalty_threshold_ratio: Threshold ratio for fragment penalty.
        fragment_penalty_factor: Penalty factor for fragments.
        bin_occupation_exponent: Exponent to adjust the impact of bin occupation ratio.
        item_size_relative_importance: Relative importance of the item size when calculating the bin score

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap
        
        # Bin occupation ratio, raised to a power
        bin_occupation_ratio = (feasible_bins_remain_cap - remaining_capacity_after_fit) / feasible_bins_remain_cap
        priorities[feasible_mask] = np.power(bin_occupation_ratio, bin_occupation_exponent)
        
        # Adjust priority based on item size relative to bin capacity
        priorities[feasible_mask] += item_size_relative_importance * capacity_ratio

        small_fragment_mask = remaining_capacity_after_fit < (item * small_fragment_threshold_ratio)
        priorities[feasible_mask][small_fragment_mask] *= small_fragment_penalty

        large_capacity_mask = remaining_capacity_after_fit > (item * large_capacity_threshold_ratio)
        priorities[feasible_mask][large_capacity_mask] *= large_capacity_bonus

        # Adaptive exploration noise
        num_feasible = np.sum(feasible_mask)
        if num_feasible > num_feasible_bins_threshold:  # more options, more exploitation
            priorities[feasible_mask] *= (1 + exploitation_bonus * capacity_ratio) # Favor bins that are already relatively full.
            exploration_noise_level = base_exploration_noise / (1 + exploitation_bonus)
        else:  # Fewer options, more exploration
            exploration_noise_level = exploration_noise * (1 + exploitation_bonus)
        priorities += np.random.normal(0, exploration_noise_level, size=len(priorities))

        # Dynamic fragment penalty
        fragment_penalty_threshold = item * fragment_penalty_threshold_ratio
        fragment_penalty_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < fragment_penalty_threshold)
        priorities[feasible_mask][fragment_penalty_mask] *= (1 - (remaining_capacity_after_fit[fragment_penalty_mask] / fragment_penalty_threshold) * fragment_penalty_factor)

    return priorities
```
