```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                small_fragment_threshold_ratio: float = 0.2,
                small_fragment_penalty: float = 0.3,
                large_capacity_threshold_ratio: float = 1.5,
                large_capacity_bonus: float = 1.2,
                base_exploration_noise: float = 0.05,
                num_feasible_bins_threshold: int = 4,
                exploitation_bonus: float = 0.05,
                exploration_noise: float = 0.1,
                fragment_penalty_threshold_ratio: float = 0.3,
                fragment_penalty_factor: float = 0.7,
                bin_utilization_exponent: float = 2.0,
                item_size_threshold_ratio: float = 0.6,
                large_item_bonus: float = 0.15,
                almost_full_threshold_ratio: float = 0.9,
                almost_full_bonus: float = 0.2) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        small_fragment_threshold_ratio: Threshold ratio for small fragment penalty.
        small_fragment_penalty: Penalty factor for small fragments.
        large_capacity_threshold_ratio: Threshold ratio for large capacity bonus.
        large_capacity_bonus: Bonus factor for large capacity bins.
        base_exploration_noise: Base exploration noise.
        num_feasible_bins_threshold: Threshold for number of feasible bins to switch between exploration and exploitation.
        exploitation_bonus: Bonus for exploitation when more than num_feasible_bins_threshold bins are feasible.
        exploration_noise: Exploration noise when fewer than or equal to num_feasible_bins_threshold bins are feasible.
        fragment_penalty_threshold_ratio: Threshold ratio for fragment penalty.
        fragment_penalty_factor: Penalty factor for fragments.
        bin_utilization_exponent: Exponent to control the impact of bin utilization on priority.
        item_size_threshold_ratio: Threshold ratio for considering an item "large."
        large_item_bonus: Bonus applied when a large item is placed in a well-utilized bin.
        almost_full_threshold_ratio: Threshold ratio for considering a bin almost full.
        almost_full_bonus: Bonus for placing item in an almost full bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        # Core: Bin Utilization
        priorities[feasible_mask] = capacity_ratio**bin_utilization_exponent

        # Edge Case: Small Fragments
        small_fragment_mask = remaining_capacity_after_fit < (item * small_fragment_threshold_ratio)
        priorities[feasible_mask][small_fragment_mask] *= small_fragment_penalty

        # Edge Case: Large Capacity
        large_capacity_mask = remaining_capacity_after_fit > (item * large_capacity_threshold_ratio)
        priorities[feasible_mask][large_capacity_mask] *= large_capacity_bonus

        # Adaptive Exploration/Exploitation
        num_feasible = np.sum(feasible_mask)
        if num_feasible > num_feasible_bins_threshold:  # Exploit
            priorities[feasible_mask] *= (1 + exploitation_bonus * capacity_ratio)
        else:  # Explore
            priorities += np.random.normal(0, exploration_noise, size=len(priorities))

        # Dynamic Fragment Penalty
        fragment_penalty_threshold = item * fragment_penalty_threshold_ratio
        fragment_penalty_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < fragment_penalty_threshold)
        priorities[feasible_mask][fragment_penalty_mask] *= (1 - (remaining_capacity_after_fit[fragment_penalty_mask] / fragment_penalty_threshold) * fragment_penalty_factor)

        # Bonus for Large Items in Well-Utilized Bins
        if item > bins_remain_cap.max() * item_size_threshold_ratio:
            well_utilized_mask = capacity_ratio > 0.7
            priorities[feasible_mask][well_utilized_mask] *= (1 + large_item_bonus)

        # Bonus for Almost Full Bins
        almost_full_mask = remaining_capacity_after_fit < (bins_remain_cap.max() * (1-almost_full_threshold_ratio))
        priorities[feasible_mask][almost_full_mask] *= (1 + almost_full_bonus)

        # Base exploration noise
        priorities += np.random.normal(0, base_exploration_noise, size=len(priorities))

    return priorities
```
