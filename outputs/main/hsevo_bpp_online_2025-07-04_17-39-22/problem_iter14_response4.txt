```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio, fragment avoidance, bin balancing, and adaptive randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        priorities[feasible_mask] = capacity_ratio

        # Fragment avoidance relative to bin size.
        small_fragment_mask = remaining_capacity_after_fit < (bins_remain_cap[feasible_mask] * 0.05)
        priorities[feasible_mask][small_fragment_mask] *= 0.75

        # Optimal space, prioritizing bins with space slightly larger than item.
        optimal_space_mask = (remaining_capacity_after_fit >= (item * 0.1)) & (remaining_capacity_after_fit <= (item * 1.25))
        priorities[feasible_mask][optimal_space_mask] *= 1.2

        # Bin balancing to discourage excessive empty space.
        avg_bin_capacity = np.mean(bins_remain_cap[feasible_mask])
        large_capacity_mask = remaining_capacity_after_fit > (avg_bin_capacity * 1.1)
        priorities[feasible_mask][large_capacity_mask] *= 0.8

        # Adaptive randomness scaled by max capacity used.
        max_capacity_used = np.max(1 - bins_remain_cap / np.max(bins_remain_cap))
        randomness_scale = 0.01 + (0.04 * max_capacity_used)
        priorities += np.random.normal(0, randomness_scale, size=len(priorities))

        # Exploration/exploitation adjustment based on feasibility count.
        num_feasible = np.sum(feasible_mask)
        if num_feasible > 5:
            priorities[feasible_mask] *= (1 + 0.02 * capacity_ratio)
        else:
            avg_fill_level = np.mean(capacity_ratio)
            exploration_boost = 0.03 + (0.07 * (1 - avg_fill_level))
            priorities += np.random.normal(0, exploration_boost, size=len(priorities))

    return priorities
```
