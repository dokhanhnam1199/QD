```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized waste and relative fullness for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf
    can_fit = ~cannot_fit
    remaining_capacities_can_fit = bins_remain_cap[can_fit]

    if len(remaining_capacities_can_fit) > 0:
        waste = remaining_capacities_can_fit - item
        waste_normalized = waste / remaining_capacities_can_fit
        relative_fullness = 1 - remaining_capacities_can_fit
        priorities[can_fit] = -waste_normalized + relative_fullness
        fragmentation_penalty = np.exp(-5 * waste) #waste = remaining_after_fit

        random_factor = 0.01 * np.random.rand(np.sum(can_fit))
        priorities[can_fit] -= 0.1 * fragmentation_penalty + random_factor
    return priorities
```
