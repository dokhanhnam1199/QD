```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering utilization, waste, and adaptive exploration.
    Combines normalized waste and utilization with exploration based on bin state.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf

    can_fit = ~cannot_fit
    if not np.any(can_fit):
        return priorities

    feasible_bins_remain_cap = bins_remain_cap[can_fit]

    utilization = item / feasible_bins_remain_cap
    waste = feasible_bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = waste / (feasible_bins_remain_cap + 1e-9)  # Prevent division by zero

    bin_utilization = (feasible_bins_remain_cap - waste) / (bins_remain_cap[can_fit] + item)  # corrected bin util calculation

    priorities[can_fit] = 0.7 * utilization - 0.3 * waste_normalized  # Adjusted weights

    num_feasible = np.sum(can_fit)
    if num_feasible > 5:
        priorities[can_fit] *= (1 + 0.02 * utilization) # Favor bins that are already relatively full

    exploration_rate = 0.01 + 0.03 * (1 - (np.mean(bins_remain_cap[can_fit]) / np.max(bins_remain_cap))) if np.sum(can_fit) > 0 else 0.01
    priorities += np.random.normal(0, exploration_rate, size=len(priorities))

    small_item_size = np.mean(bins_remain_cap[can_fit]) / 10 if np.any(can_fit) else 0.1
    future_fit_penalty = np.where(waste < small_item_size, -0.1, 0)
    priorities[can_fit] += future_fit_penalty

    # NEW:  Penalty for placing large items in relatively empty bins
    item_size_threshold_ratio = 0.5
    large_item_penalty = 0.2
    bin_size = bins_remain_cap + item  # Approximate original bin size.
    large_item_mask = item / bin_size[can_fit] > item_size_threshold_ratio
    bin_utilization_threshold = 0.75
    empty_bin_mask = bin_utilization < (1 - bin_utilization_threshold) # consider bins less than (1 - bin_utilization_threshold) utilized as relatively empty
    priorities[can_fit][large_item_mask & empty_bin_mask] *= (1 - large_item_penalty) # Penalize placing large items in almost empty bins.

    return priorities
```
