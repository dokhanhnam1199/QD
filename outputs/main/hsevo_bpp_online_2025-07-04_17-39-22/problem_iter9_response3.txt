```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling:
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    num_feasible = np.sum(feasible_mask)

    if num_feasible > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap
        
        # Base priority: encourage fitting relatively well
        priorities[feasible_mask] = capacity_ratio

        # Fragment penalty
        small_fragment_mask = remaining_capacity_after_fit < (item * 0.1)
        priorities[feasible_mask][small_fragment_mask] *= 0.3  # More aggressive penalty

        # Large capacity bonus (but tempered)
        large_capacity_mask = remaining_capacity_after_fit > (item * 2)
        priorities[feasible_mask][large_capacity_mask] *= 1.05 # Slightly less aggressive

        # Adaptive exploration/exploitation
        if num_feasible > 5:
            # Exploitation: Favor bins already relatively full
            priorities[feasible_mask] += 0.02 * (capacity_ratio**2) # Emphasize fuller bins
            
            # Reduce priority of almost full bins to avoid very small remaining space
            almost_full_mask = remaining_capacity_after_fit < (item * 0.2)
            priorities[feasible_mask][almost_full_mask] *= 0.95  # Slightly de-prioritize
        else:
            # Exploration: More randomness, focus on bins that aren't too full.
            priorities[feasible_mask] += np.random.normal(0, 0.04, size=num_feasible)
            # Encourage bins with larger capacity if limited options
            larger_capacity_options = remaining_capacity_after_fit > (item * 0.75)
            priorities[feasible_mask][larger_capacity_options] *= 1.03

        # Dynamic Randomness Adjustment
        randomness_scale = 0.01 + 0.01 * (1 - np.mean(capacity_ratio)) # More randomness when bins are less full on average
        priorities[feasible_mask] += np.random.normal(0, randomness_scale, size=num_feasible)

    return priorities
```
