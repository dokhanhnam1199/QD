```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version attempts to balance bin utilization and fragmentation avoidance
    with an adaptive strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to accommodate the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_cap = bins_remain_cap[feasible_mask]
    remaining_capacity_after_fit = feasible_bins_cap - item

    # Calculate bin utilization ratio. Higher is better, but not too high.
    utilization_ratio = item / feasible_bins_cap

    # Calculate remaining capacity ratio.
    remaining_ratio = remaining_capacity_after_fit / feasible_bins_cap

    # Adaptive weighting based on remaining capacity.
    # If there is enough space in most bins, focus on consolidation
    # If bins are getting full, focus on not making too many small gaps.
    avg_remaining_cap = np.mean(bins_remain_cap[~infeasible_mask]) if np.any(~infeasible_mask) else 0

    if avg_remaining_cap > 2 * item:  # Heuristic adjustment factor. This can be further refined/optimized

        # Encourages filling bins with significant remaining capacity.
        # Gives high priority to bins with good utilization and not too much fragmentation
        priorities[feasible_mask] = utilization_ratio * np.exp(-remaining_ratio)
    else:
        # Bins are getting full, so avoid creating small fragments at all costs.
        # Reduces the priority of bins that will have very small remaining capacity.
        priorities[feasible_mask] = utilization_ratio * np.exp(-remaining_ratio * 10)  # Penalize more heavily
        # slightly increased weight to high utilization

    # Adding a small penalty for bins with very very little capacity left.
    tiny_space_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < 0.1)

    if np.any(tiny_space_mask):
        priorities[feasible_mask][tiny_space_mask] -= 0.05 # Adaptive small penalty

    # Introducing randomness to break ties and encourage exploration.
    priorities += np.random.normal(0, 0.01, size=len(priorities))
    return priorities
```
