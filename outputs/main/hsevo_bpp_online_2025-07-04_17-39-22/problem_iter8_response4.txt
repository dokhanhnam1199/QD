```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive strategies for bin packing priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_capacities = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_capacities - item
        capacity_ratio = item / feasible_capacities

        priorities[feasible_mask] = capacity_ratio

        small_fragment_threshold = 0.1 * item
        small_fragment_mask = remaining_capacity_after_fit < small_fragment_threshold
        priorities[feasible_mask][small_fragment_mask] *= 0.5

        large_capacity_threshold = 2 * item
        large_capacity_mask = remaining_capacity_after_fit > large_capacity_threshold
        priorities[feasible_mask][large_capacity_mask] *= 1.1

        num_feasible = np.sum(feasible_mask)
        if num_feasible > 5:
            priorities[feasible_mask] *= (1 + 0.01 * capacity_ratio)
        else:
            priorities += np.random.normal(0, 0.05, size=len(priorities))

        # Near-full bin penalty
        near_full_threshold = 0.1 * np.max(bins_remain_cap)
        near_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item + near_full_threshold) & (~infeasible_mask)
        priorities[near_full_mask] = -0.1

        bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)
        priorities += 0.05 * bin_fullness

        utilization = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap))
        noise_level = 0.01 * (1 - utilization)
        priorities += np.random.normal(0, noise_level, size=len(priorities))

    return priorities
```
