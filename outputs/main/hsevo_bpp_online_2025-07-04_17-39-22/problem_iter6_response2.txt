```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several improvements:
    1. Adaptive penalty for near-full bins:  A bin that's *almost* full but can't fit the item gets a moderate negative priority to discourage creating tiny fragments.
    2. Encourages packing items of similar sizes together.
    3. Dynamic noise injection based on bin utilization.
    4. Considers bin fullness when prioritizing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling: Hard constraint.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_capacities = bins_remain_cap[feasible_mask]
    remaining_capacity_after_fit = feasible_capacities - item
    capacity_ratio = item / feasible_capacities

    # Near-full bin penalty:  Discourage tiny fragments.
    near_full_threshold = 0.1  # Tune this; relative to bin size.  Bins with <10% of capacity remaining considered near full.
    near_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item + near_full_threshold) & (~infeasible_mask)
    priorities[near_full_mask] = -0.1  # Moderate negative priority, tunable.

    # Encourage packing items of similar sizes by looking at average item sizes already in the bin.
    # For simplicity, this is a placeholder for now as we don't have bin content information.
    # In a real implementation, you'd need to track which items are in each bin.

    # Core priority calculation:
    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_capacity_after_fit / (item + 1e-9))

    # Bin fullness bonus:  Slightly prefer filling emptier bins *initially* (exploration), then switch to filling fuller bins (exploitation).
    bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)  # Normalize bin fullness
    priorities += 0.05 * bin_fullness # Added bonus to priorities

    # Adaptive Noise Injection:  Add more noise when bins are relatively empty to promote exploration.
    utilization = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap)) # Overall utilization.
    noise_level = 0.01 * (1 - utilization)  # Higher noise when bins are emptier.
    priorities += np.random.normal(0, noise_level, size=len(priorities))


    return priorities
```
