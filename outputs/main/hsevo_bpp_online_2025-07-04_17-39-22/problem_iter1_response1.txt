```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Einstein's Field Equation Inspired Term: Curvature of Bin Space
    #  The 'curvature' is high when bins are nearly full (close to item size).
    #  This incentivizes using bins that are 'bent' towards capacity.
    curvature = np.exp(-np.abs(bins_remain_cap - item))

    # Cosmological Constant Inspired Term: A universal pressure to fill all bins, but modulated.
    #   This ensures that even bins with less-than-ideal fit still get a chance, preventing premature new bin creation.
    cosmological_constant = np.where(bins_remain_cap >= item, 0.1, -np.inf) # Give slight encouragement, large discouragement

    # Relative Remaining Capacity: Encourage bins with suitable space.
    relative_capacity = (bins_remain_cap - item) / bins_remain_cap
    relative_capacity = np.where(bins_remain_cap >= item, np.clip(relative_capacity, 0, 1), -np.inf) #valid only if bin has space for item. Negative inf. otherwise

    # Stability Term: Prevent filling nearly full bins at the expense of slightly larger bins
    stability = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Combine all terms with some scaling factors.
    priorities = 0.5 * curvature + 0.2 * cosmological_constant + 0.4 * relative_capacity + 0.1 * stability

    return priorities
```
