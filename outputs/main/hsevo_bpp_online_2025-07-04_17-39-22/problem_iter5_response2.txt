```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive capacity ratio, remaining space penalty, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]

    fullness_ratio = 1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))
    priorities[feasible_mask] = capacity_ratio * np.exp(-10 * remaining_capacity_after_fit / (item + 1e-9)) * (1-fullness_ratio)

    already_full_mask = (bins_remain_cap[feasible_mask] < 0.7 * np.max(bins_remain_cap)) & (bins_remain_cap[feasible_mask] > item)
    priorities[feasible_mask][already_full_mask] += 0.1 * item
    
    random_scale = 0.01 * item
    priorities += np.random.normal(0, random_scale, size=len(priorities))
    return priorities
```
