```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized waste, bin utilization, and adaptive noise.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_capacities = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_capacities - item
        capacity_ratio = item / feasible_capacities

        # Encourage bins that fit the item *relatively* well.
        priorities[feasible_mask] = capacity_ratio

        # Reduce the priority if the remaining space is too small
        small_fragment_threshold = 0.1
        small_fragment_mask = remaining_capacity_after_fit < (item * small_fragment_threshold)
        priorities[feasible_mask][small_fragment_mask] *= 0.5

        # Slightly increase the priority of bins with large remaining capacity
        large_capacity_threshold = 2.0
        large_capacity_mask = remaining_capacity_after_fit > (item * large_capacity_threshold)
        priorities[feasible_mask][large_capacity_mask] *= 1.1

        # Adaptive adjustment of exploration vs. exploitation
        num_feasible = np.sum(feasible_mask)
        if num_feasible > 5:
            priorities[feasible_mask] *= (1 + 0.01 * capacity_ratio)
        else:
            priorities += np.random.normal(0, 0.05, size=len(priorities))

        # Dynamic adjustment based on average bin fill level
        average_fill = np.mean((1 - bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)) if feasible_capacities.size else 0)
        if average_fill > 0.7:
            priorities[feasible_mask][small_fragment_mask] *= 0.3
            priorities[feasible_mask] *= (1 + 0.02 * capacity_ratio)
        elif average_fill < 0.3:
            priorities[feasible_mask][large_capacity_mask] *= 1.2

        bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)
        priorities += 0.05 * bin_fullness # Use bins that have been more used

        noise_level = 0.01 * (1 - average_fill)
        priorities += np.random.normal(0, noise_level, size=len(priorities))

    return priorities
```
