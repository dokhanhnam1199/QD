```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities using capacity ratio and adaptive randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    if np.sum(feasible_bins) == 0:
        return priorities

    feasible_bins_remain_cap = bins_remain_cap[feasible_bins]
    capacity_ratio = item / feasible_bins_remain_cap

    # Prioritize bins based on capacity ratio with non-linear scaling
    bin_utilization_exponent = 1.5
    priorities[feasible_bins] = capacity_ratio**bin_utilization_exponent

    # Adaptive randomness: scale with the average fill level of bins
    avg_fill_level = np.mean(capacity_ratio) if np.sum(feasible_bins) > 0 else 0.0
    randomness_scale = 0.01 + (0.04 * avg_fill_level)
    priorities += np.random.normal(0, randomness_scale, size=len(priorities))

    # Fragment avoidance: penalize bins that will have very small remaining capacity
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item
    small_fragment_mask = remaining_capacity_after_fit < (bins_remain_cap[feasible_bins] * 0.05)
    priorities[feasible_bins][small_fragment_mask] *= 0.75

    return priorities
```
