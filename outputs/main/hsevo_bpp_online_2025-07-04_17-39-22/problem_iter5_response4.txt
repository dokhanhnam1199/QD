```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: Combines waste normalization, fullness, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = 1 - (waste / bins_remain_cap)
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    is_used_bonus = (bin_utilization > 0).astype(float)

    priorities = 0.7 * waste_normalized + 0.3 * is_used_bonus
    priorities += np.random.normal(0, 0.005, size=len(priorities))
    return priorities
```
