import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, cannot_fit_priority: float = -560.4273099229843, waste_normalized_weight: float = -0.8963126706335938, relative_fullness_weight: float = 0.8714542949708903) -> np.ndarray:
    """Calculates bin priorities based on normalized waste and relative fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = cannot_fit_priority
    can_fit = ~cannot_fit
    remaining_capacities_can_fit = bins_remain_cap[can_fit]

    if len(remaining_capacities_can_fit) > 0:
        waste = remaining_capacities_can_fit - item
        waste_normalized = waste / remaining_capacities_can_fit
        relative_fullness = 1 - remaining_capacities_can_fit
        priorities[can_fit] = waste_normalized_weight * waste_normalized + relative_fullness_weight * relative_fullness

    return priorities
