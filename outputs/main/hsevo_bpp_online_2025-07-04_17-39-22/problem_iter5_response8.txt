```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive bin selection: balance fit, capacity, and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]

    # Capacity Ratio
    priority_capacity_ratio = capacity_ratio

    # Remaining Capacity (Gaussian-like)
    mean_remaining_capacity = item
    std_dev_remaining_capacity = item / 2.0
    priority_remaining_capacity = np.exp(-((remaining_capacity_after_fit - mean_remaining_capacity) ** 2) / (2 * std_dev_remaining_capacity ** 2))

    # Balancing Term
    priority_balance = 1.0 / (bins_remain_cap[feasible_mask] + 1e-9)

    priorities[feasible_mask] = (
        0.5 * priority_capacity_ratio +
        0.3 * priority_remaining_capacity +
        0.2 * priority_balance
    )

    # Add randomness, scale with item size
    priorities += np.random.normal(0, 0.005 * item, size=len(priorities))

    return priorities
```
