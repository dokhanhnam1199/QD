```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Fill bins as much as possible but avoid overfilling
    fit_score = bins_remain_cap - item
    fit_priority = np.where(fit_score >= 0, np.exp(-np.abs(fit_score)), -np.inf)  # Higher priority to closer fit, negative infinity if doesn't fit

    # Heuristic 2: Consider the remaining capacity after placement. Lower remaining capacity is better. Avoid tiny gaps.
    remaining_cap_penalty = np.where(fit_score >= 0, np.exp(-5 * fit_score), 0)  # Penalize larger remaining gaps. The factor of 5 is tuned. Zero if item doesn't fit
    # Heuristic 3: Prefer bins with greater initial utilization, less likely to open a new bin
    utilization_priority = np.zeros_like(bins_remain_cap)
    initial_capacity = bins_remain_cap + item # initial capacity = current cap + the item size only if the bin can accomodate the item
    utilization_priority[fit_score>=0] = 1 / initial_capacity[fit_score>=0] # smaller initial capacity is better

    # Combine heuristics using weighted sum. Experiment with weights
    priorities = 0.7 * fit_priority + 0.2 * remaining_cap_penalty + 0.1 * utilization_priority

    return priorities
```
