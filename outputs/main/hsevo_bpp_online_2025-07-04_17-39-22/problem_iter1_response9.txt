```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Aims for a balance between filling bins well and avoiding excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Base priority on how well the item fills the bin (higher is better).
            fill_ratio = item / remaining_capacity
            priorities[i] = fill_ratio

            # Add a bonus for leaving a "useful" amount of space.
            # This heuristic tries to avoid small fragments by rewarding bins that will have enough space remaining for another medium-sized item.
            # "Useful" is defined here as somewhere around 20-50% of bin capacity, but adjust accordingly.
            remaining_after_fit = remaining_capacity - item
            if 0.2 <= remaining_after_fit <= 0.5:
                priorities[i] += 0.5  # Boost for leaving a useful fragment

            # Add a penalty for leaving a very small remainder, indicating fragmentation.
            elif remaining_after_fit < 0.1:
                priorities[i] -= 0.3  # Small penalty for tiny fragments

        else:
            priorities[i] = -np.inf  # Cannot fit, so very low priority

    return priorities
```
