```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering occupancy, fit, and adaptive noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - 1e9

    # Core: Bin occupancy ratio, favor higher occupancy
    occupation_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = 1 - occupation_ratio

    # Fit bonus (favor tighter fits, but not too tight)
    remaining_space = bins_remain_cap[feasible_bins] - item
    fit_bonus = np.exp(-np.abs(remaining_space) / (item + 1e-9))
    priorities[feasible_bins] += fit_bonus * 0.2

    # Adaptive exploration noise based on num of feasible bins
    num_feasible = np.sum(feasible_bins)
    noise_scale = 0.005 if num_feasible > 3 else 0.05
    noise = np.random.normal(0, noise_scale, len(priorities))
    priorities += noise

    # Small fragment penalty
    small_fragment_threshold = item * 0.2  # Example threshold
    small_fragment_penalty = -0.1
    small_fragment_bins = (remaining_space > 0) & (remaining_space < small_fragment_threshold)
    priorities[feasible_bins][small_fragment_bins] += small_fragment_penalty

    return priorities
```
