```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several enhancements:

    1.  Adaptive weighting based on bin fullness: Prioritizes bins that are neither too full nor too empty.
    2.  Constraint anticipation:  Uses a 'look-ahead' to estimate the effect of placing the item.
    3.  Dynamic noise injection: Adds noise proportional to the number of bins with similar capacity.
    4.  Robustness to edge cases: Addresses bins with almost exact fits and nearly empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to accommodate the item. Otherwise the priority should be very low.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Make infeasible bins have the lowest priority.

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    # Calculate remaining capacity after fitting the item in feasible bins
    remaining_capacity_after_fit = feasible_bins_remain_cap - item

    # Calculate the capacity ratio for feasible bins
    capacity_ratio = item / feasible_bins_remain_cap

    # Adaptive weighting based on bin fullness: sigmoid function gives higher weight when bin is neither too full nor too empty.
    fullness = 1 - (feasible_bins_remain_cap / np.max(bins_remain_cap)) #normalized bin fullness
    fullness_weights = 1 / (1 + np.exp(-5 * (fullness - 0.5))) # Sigmoid, peaks around 0.5 fullness

    # Constraint anticipation: Penalize bins if the remaining capacity after placement will be too small.
    # This anticipates future difficulties by not leaving tiny, unusable spaces.
    tiny_space_penalty = np.exp(-10 * remaining_capacity_after_fit / (item + 1e-9)) #High penalty if remaining space << item

    # Main priority calculation, incorporating all factors:
    priorities[feasible_mask] = fullness_weights * capacity_ratio * tiny_space_penalty

    # Dynamic noise injection:  Add noise proportional to bins with similar capacities to encourage exploration and break ties
    capacity_counts = np.bincount(bins_remain_cap.astype(int))  # Count of each capacity

    noise_magnitude = 0.01 * np.array([capacity_counts[int(cap)] for cap in bins_remain_cap]) #Noise proportional to capacity count.
    priorities += np.random.normal(0, noise_magnitude, size=len(priorities))

    return priorities
```
