```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly,
    but also considers avoiding bins that are almost completely full
    to leave space for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining space after placing the item (if it fits)
    remaining_after_fit = bins_remain_cap - item

    # Initialize a very small value to avoid division by zero.
    epsilon = 1e-9

    # Give high priority to bins where the item fits with minimal waste
    fit_indices = remaining_after_fit >= 0
    if np.any(fit_indices):
      priorities[fit_indices] = 1.0 / (remaining_after_fit[fit_indices] + epsilon)  # Lower remaining -> Higher priority

    # Penalize bins which are very close to full even if the item fits.
    # This helps preserve space for larger future items, preventing fragmentation.
    almost_full_threshold = 0.1 # A bin is considered almost full if its remaining capacity is less than 10% of the bin size

    # Calculate fraction of bin used if item is placed
    fraction_used_if_placed = (bins_remain_cap - remaining_after_fit) / (bins_remain_cap + epsilon) #Avoid division by zero

    #Reduce priority for bins that will be almost full
    almost_full_indices = (fraction_used_if_placed > (1 - almost_full_threshold)) & fit_indices

    priorities[almost_full_indices] *= 0.5  #Reduce priority for those bins. Adjust factor if needed.

    return priorities
```
