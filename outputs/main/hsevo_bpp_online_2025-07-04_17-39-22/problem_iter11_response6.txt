```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, utilization, and adaptive noise based on feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities - 1e9

    # Fit score
    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + 1e-9))
    priorities[valid_bins] = fit_score[valid_bins]

    # Bin utilization bonus
    utilization = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += utilization

    # Adaptive noise based on number of valid bins
    num_valid_bins = np.sum(valid_bins)
    noise_scale = 0.005 if num_valid_bins > 3 else 0.05
    noise = np.random.normal(0, noise_scale, len(priorities))
    priorities += noise

    # Encourage bins with mid-level remaining capacities
    remaining_capacity_after_fit = bins_remain_cap[valid_bins] - item
    medium_capacity_mask = (remaining_capacity_after_fit >= (item * 0.2)) & (remaining_capacity_after_fit <= (item * 1.5))
    priorities[valid_bins][medium_capacity_mask] *= 1.1  # Slightly favor medium capacity
    return priorities
```
