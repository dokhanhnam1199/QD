```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, utilization, exploration, and fragment handling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities - 1e9

    # Normalized capacity ratio (fit score)
    feasible_bins_remain_cap = bins_remain_cap[valid_bins]
    capacity_ratio = item / feasible_bins_remain_cap  # Normalize by remaining capacity
    bin_utilization_exponent = 2.0  # Emphasize near-full bins
    priorities[valid_bins] = capacity_ratio**bin_utilization_exponent


    # Fragment penalty
    remaining_capacity_after_fit = feasible_bins_remain_cap - item
    fragment_threshold_ratio = 0.2 #tuned value
    small_fragment_mask = remaining_capacity_after_fit < (item * fragment_threshold_ratio)
    fragment_penalty = 0.7
    priorities[valid_bins][small_fragment_mask] *= fragment_penalty

    # Exploration noise
    num_valid_bins = np.sum(valid_bins)
    exploration_noise_scale = 0.01 if num_valid_bins > 3 else 0.05  # Reduce noise if many options
    priorities += np.random.normal(0, exploration_noise_scale, size=len(priorities))

    return priorities
```
