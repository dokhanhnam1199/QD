```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic with dynamic penalties and bonuses."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    feasible_mask = ~infeasible_mask
    remaining_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]
    
    # Dynamic weighting based on item size and remaining capacity
    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_after_fit / (item + 1e-9))

    # Adaptive penalty for almost full bins
    too_full_mask = feasible_mask & (remaining_after_fit < 0.1 * bins_remain_cap[feasible_mask])
    priorities[too_full_mask] -= 0.5 

    # Bonus for nearly perfect fit
    almost_perfect_mask = feasible_mask & (remaining_after_fit < 1e-6)
    priorities[almost_perfect_mask] += 0.2

    # Adaptive Randomization
    random_scale = 0.01 * item
    priorities += np.random.normal(0, random_scale, size=len(priorities))

    # Waste Normalization
    waste_norm = remaining_after_fit / (bins_remain_cap[feasible_mask] + item + 1e-9)
    priorities[feasible_mask] -= 0.1 * np.clip(waste_norm, 0, 1)

    priorities /= (item + 1e-9)
    return priorities
```
