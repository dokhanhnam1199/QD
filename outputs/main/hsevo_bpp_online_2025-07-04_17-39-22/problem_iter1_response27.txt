```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to accommodate the item. Otherwise the priority should be very low.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Make infeasible bins have the lowest priority.

    # Encourage bins that fit the item *relatively* well (but not too perfectly, to avoid small remaining spaces).

    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]  # ratio of item size to bin capacity

    # Priority is high if the capacity ratio is high AND the remaining space is small *relative* to the item
    # This favors using most of the bin's space without creating *very* small fragments.

    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_capacity_after_fit / (item + 1e-9))

    # Introduce some randomness to break ties and explore the search space more effectively.
    priorities += np.random.normal(0, 0.01, size=len(priorities))

    return priorities
```
