```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No suitable bins, return zero priorities.

    # Calculate fill ratio, but only for valid bins
    fill_ratio = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratio[valid_bins] = item / bins_remain_cap[valid_bins]

    # Prioritize bins that will be filled more completely, but not excessively.
    priorities[valid_bins] = np.exp(-np.abs(fill_ratio[valid_bins] - 1.0)) # Favor bins close to full after packing

    # Add a bonus for bins that have more remaining capacity (avoid fragmentation)
    priorities[valid_bins] += 0.1 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))

    # If we are left with a few bins which provide close packing, choose the emptiest one.
    nearly_full_mask = np.isclose(fill_ratio, 1.0, atol=0.1) & valid_bins
    if np.any(nearly_full_mask):
        priorities[nearly_full_mask] += 0.2*(bins_remain_cap[nearly_full_mask] / np.max(bins_remain_cap))

    return priorities
```
