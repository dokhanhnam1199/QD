```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space.
    Bins that cannot accommodate the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a large negative priority if the item doesn't fit
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very low priority

    # Prioritize based on how well the item fits (remaining capacity)
    feasible = ~infeasible
    remaining_after_fit = bins_remain_cap[feasible] - item
    priorities[feasible] = -np.abs(remaining_after_fit) # Prioritize small remaining capacity
    #Prioritize bins that are almost full after adding item. The smaller the remaining capacity the higher the priority.

    #Add some randomness to break ties, in case lots of bins have similar remaining capacity:
    priorities[feasible] += np.random.normal(scale=1e-6, size=np.sum(feasible))

    return priorities
```
