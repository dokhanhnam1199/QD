```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects: fit, remaining cap, utilization.
    Normalizes values and uses weighted sum.
    """

    fit_score = bins_remain_cap - item
    fit_priority = np.where(fit_score >= 0, np.exp(-np.abs(fit_score)), -np.inf)

    remaining_cap_penalty = np.where(fit_score >= 0, np.exp(-5 * fit_score), 0)

    utilization_priority = np.zeros_like(bins_remain_cap)
    initial_capacity = bins_remain_cap + item
    utilization_priority[fit_score>=0] = 1 / initial_capacity[fit_score>=0]

    priorities = 0.7 * fit_priority + 0.2 * remaining_cap_penalty + 0.1 * utilization_priority
    return priorities
```
