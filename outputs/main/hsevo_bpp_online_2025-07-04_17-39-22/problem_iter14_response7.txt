```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities considering fill ratio, fragmentation, and bin diversity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf
    
    if np.sum(feasible_bins) == 0:
        return priorities

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)

    capacity_ratio = item / bins_remain_cap
    capacity_ratio = np.clip(capacity_ratio, a_min=0, a_max=1) # Ensure ratio is bounded

    # Fragmentation penalty: higher penalty for smaller waste
    fragment_penalty = np.exp(-waste / (item * 0.5))  # Exponential penalty
    fragment_penalty[~feasible_bins] = 1.0 #no penalty if infeasible

    bin_utilization = (bins_remain_cap - waste) / (bins_remain_cap + 1e-9)
    bin_utilization = np.clip(bin_utilization, a_min=0, a_max=1)
    
    # Combine factors with weights, scaling with capacity ratio
    priorities[feasible_bins] = (0.6 * capacity_ratio[feasible_bins] - 0.2 * fragment_penalty[feasible_bins] + 0.2 * bin_utilization[feasible_bins])

    #Adaptive exploration with noise
    num_feasible = np.sum(feasible_bins)
    exploration_factor = min(0.1, 1 / (num_feasible + 1))

    priorities += np.random.normal(0, exploration_factor, size=len(priorities))

    # Additional penalty for bins with very little waste to avoid creating tiny fragments.
    near_full_mask = waste < np.mean(bins_remain_cap) * 0.05 #Adaptive
    priorities[feasible_bins & near_full_mask] -= 0.05

    return priorities
```
