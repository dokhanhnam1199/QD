```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling:
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) == 0:
        return priorities  # No feasible bins, all priorities remain at 0 (or -inf).

    # Calculate initial capacity ratio:
    capacity_ratio = item / feasible_bins_remain_cap

    # Base priority on capacity ratio:
    priorities[feasible_mask] = capacity_ratio

    # Fragment avoidance:
    remaining_capacity_after_fit = feasible_bins_remain_cap - item
    small_fragment_mask = remaining_capacity_after_fit < (item * 0.1)
    priorities[feasible_mask][small_fragment_mask] *= 0.3 # Reduced to 0.3 instead of 0.5 for stronger penalty

    # Encourage bins that are not too full and not too empty, a more balanced selection
    medium_capacity_mask = (remaining_capacity_after_fit >= (item * 0.2)) & (remaining_capacity_after_fit <= (item * 1.5))
    priorities[feasible_mask][medium_capacity_mask] *= 1.2 # Slightly prefer bins with medium remaining capacity


    # Adaptive exploration based on bin fill levels. This is more explicit
    bin_fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalize to 0-1, filled vs total
    avg_fill_level = np.mean(bin_fill_levels[~np.isinf(bin_fill_levels)]) #Exclude -inf values
    exploration_rate = 0.01 + 0.04 * (1 - avg_fill_level)  # Higher exploration when bins are less full


    # Exploration noise:
    priorities += np.random.normal(0, exploration_rate, size=len(priorities)) # Scales with global fill level.

    # Dynamic exploitation adjustment based on feasible bin count
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 5:
        priorities[feasible_mask] *= (1 + 0.02 * capacity_ratio)  # More exploitation
    else:
        priorities += np.random.normal(0, 0.03, size=len(priorities)) # More exploration when limited choices.

    # Penalize bins that are getting too full to avoid premature saturation
    almost_full_mask = (bins_remain_cap < (0.2 * np.max(bins_remain_cap))) & feasible_mask
    priorities[almost_full_mask] *= 0.7 # Reduced priority of almost full bins

    return priorities
```
