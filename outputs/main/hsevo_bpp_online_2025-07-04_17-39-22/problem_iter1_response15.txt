```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space,
    but also introduces a slight preference for bins that are already somewhat filled.
    This aims to balance efficiency with exploration of potentially better-fitting arrangements
    later on. We are simulating a celestial dance, favoring both nearness (good fit) and
    the pre-existing motions (current fill level) of the bins. The "squaring" of avail_space_ratio
    emphasizes the importance of near-perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities  # No valid bins, all priorities remain zero

    # Calculate remaining space if item were placed in each bin
    remaining_space = bins_remain_cap - item
    remaining_space[~valid_bins] = np.inf  # Penalize invalid bins

    # Calculate ratio of available space in bin to original capacity
    avail_space_ratio = remaining_space / np.max(bins_remain_cap) # Assuming bins have same max capacity
    avail_space_ratio = np.clip(avail_space_ratio, 0, 1) # Ensure valid range (0-1)
    avail_space_ratio[~valid_bins] = 1 # setting the ratios of invalid bins to max val

    #Give larger penalty to invalid bins
    priorities = 1 / (0.001 + avail_space_ratio**2) # lower avail_space_ratio is given high priority


    # Add a bonus for bins that are already partially filled.
    # This encourages filling bins that are already in use. We are mimicing gravity, favoring bigger mass.
    fill_ratio = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    priorities = priorities + fill_ratio * 0.5 # weighning it with 0.5, since avail_space_ratio should have higher weight
    priorities[~valid_bins] = 0 # zero out for invalid bins again


    return priorities
```
