```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First Fit Decreasing inspired: prioritize bins that can fit the item closely
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
      capacities_that_fit = bins_remain_cap[fit_mask]
      priorities[fit_mask] = capacities_that_fit - item
      priorities[fit_mask] = -priorities[fit_mask]  #Smaller remaining capacity = higher priority
      #Prioritize almost-full bins more. We want to fill bins completelly
      priorities[fit_mask] = priorities[fit_mask] / bins_remain_cap[fit_mask] #Normalizing it

    else: #If nothing fits, try to find a bin to make the overfill as little as possible. This is a last ditch effort
        priorities = item - bins_remain_cap
        priorities = -priorities  #minimize wasted space
        priorities = priorities / np.max(np.abs(priorities)) #Normalize so bins are somewhat close

    return priorities
```
