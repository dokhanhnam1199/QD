```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic balancing utilization, waste, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - 1e9

    feasible_caps = bins_remain_cap[feasible_bins]
    remaining_after_fit = feasible_caps - item
    utilization = item / feasible_caps
    normalized_waste = remaining_after_fit / (item + feasible_caps)

    priorities[feasible_bins] = utilization**1.5 - normalized_waste #Balance act

    #Adaptive exploration
    num_feasible = np.sum(feasible_bins)
    exploration_scale = 0.01 if num_feasible > 3 else 0.05
    priorities += np.random.normal(0, exploration_scale, size=len(priorities))

    # Fragment penalty (adaptive)
    frag_threshold = 0.15 * item  # Dynamic threshold
    small_frag = (remaining_after_fit > 0) & (remaining_after_fit < frag_threshold)
    priorities[feasible_bins][small_frag] -= 0.08 # Reduce priority

    return priorities
```
