```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A more sophisticated heuristic considering multiple factors.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        # If no bin can fit the item, prioritize nearly full bins. This
        # forces creation of new bins quicker, preventing scenarios where
        # many bins are left slightly under-utilized. Note: Should be impossible in theory unless floating point issue exists, but useful in practise.

        # In this unusual edge case, we give near empty bins a penalty.
        # we want to force using them.
        priorities = bins_remain_cap # Smallest value (least capacity) have lower prioritiy.

        return priorities


    # 2. Prioritize bins where the remaining capacity is closest to item size (Best Fit) within only the feasible bins
    capacity_diff = bins_remain_cap - item
    capacity_diff[~feasible_bins] = np.inf  # Ignore infeasible bins in best-fit calculation

    best_fit_priority = -np.abs(capacity_diff) # Closer is better so the negative of absolute difference to remaining is highest.
    best_fit_priority[~feasible_bins] = -np.inf  # Zero-out priorities outside feasible solutions
    priorities += best_fit_priority # Add contribution to total priority.
    #3. Add a tie breaker for scenarios when 2 or more bins are equally optimal (i.e., almost fully utilized or same remaining).
    # We want to use an existing bin that is already relatively empty more (i.e., least recently added, for example)
    # Add a slight penalty for fuller bins if there's a tie (breaks tie in favour of less empty bins
    priorities[feasible_bins] += bins_remain_cap[feasible_bins] * 0.0001 # very small.
    return priorities
```
