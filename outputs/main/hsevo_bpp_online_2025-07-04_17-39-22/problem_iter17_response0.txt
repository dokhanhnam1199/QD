```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste normalization, bin utilization, and adaptive exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    if np.sum(feasible_bins) == 0:
        return priorities

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)

    waste_normalized = 1 - (waste / bins_remain_cap)
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    bin_utilization = np.clip(bin_utilization, a_min=0, a_max=1)
    is_used_bonus = (bin_utilization > 0).astype(float)
    capacity_ratio = item / bins_remain_cap
    capacity_ratio = np.clip(capacity_ratio, a_min=0, a_max=1)

    num_feasible_bins = np.sum(feasible_bins)
    noise_scale = 0.01 if num_feasible_bins > 0 else 0.05

    if num_feasible_bins > 3:
        bin_utilization_exponent = 2.0
        priorities[feasible_bins] = 0.5 * waste_normalized[feasible_bins] + 0.3 * is_used_bonus[feasible_bins] + 0.2 * (capacity_ratio[feasible_bins]**bin_utilization_exponent) + np.random.normal(0, noise_scale, size=num_feasible_bins)
    else:
        priorities[feasible_bins] = 0.6 * waste_normalized[feasible_bins] + 0.4 * is_used_bonus[feasible_bins] + np.random.normal(0, noise_scale, size=num_feasible_bins)

    return priorities
```
