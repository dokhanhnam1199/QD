import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_fragment_threshold: float = 0.15526750284924928,
                small_fragment_penalty: float = 0.8882298818819484, large_capacity_threshold: float = 2.379283473613773,
                large_capacity_bonus: float = 1.3159302910659647, base_randomness_std: float = 0.01164808675648098,
                feasible_bins_threshold: int = 8.562041140170972, exploitation_bonus: float = 0.04218974479127441,
                exploration_randomness_std: float = 0.12436489172846002) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        small_fragment_threshold: Threshold relative to item size below which a fragment is considered small.
        small_fragment_penalty: Multiplier to reduce priority if a small fragment would be created.
        large_capacity_threshold: Threshold relative to item size above which remaining capacity is considered large.
        large_capacity_bonus: Multiplier to increase priority if remaining capacity is large.
        base_randomness_std: Standard deviation of the base random noise added to priorities.
        feasible_bins_threshold: Number of feasible bins above which exploitation is favored over exploration.
        exploitation_bonus: Bonus added to priority based on capacity ratio when exploiting.
        exploration_randomness_std: Standard deviation of random noise added to priorities when exploring.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to accommodate the item. Otherwise the priority should be very low.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Make infeasible bins have the lowest priority.

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        # Encourage bins that fit the item *relatively* well.
        # The more filled the bin is the higher the priority.

        priorities[feasible_mask] = capacity_ratio

        # Reduce the priority if the remaining space is too small *relative* to the item to avoid creating *very* small fragments.
        small_fragment_mask = remaining_capacity_after_fit < (item * small_fragment_threshold)
        priorities[feasible_mask][small_fragment_mask] *= small_fragment_penalty

        # Slightly increase the priority of bins with large remaining capacity to diversify selection.
        large_capacity_mask = remaining_capacity_after_fit > (item * large_capacity_threshold)
        priorities[feasible_mask][large_capacity_mask] *= large_capacity_bonus

        # Introduce some randomness to break ties and explore the search space more effectively.
        priorities += np.random.normal(0, base_randomness_std, size=len(priorities))

        # Adaptive adjustment of exploration vs. exploitation
        # Based on the number of feasible bins
        num_feasible = np.sum(feasible_mask)
        if num_feasible > feasible_bins_threshold:  # more options, more exploitation
            priorities[feasible_mask] *= (1 + exploitation_bonus * capacity_ratio) # Favor bins that are already relatively full.
        else: # Fewer options, more exploration
            priorities += np.random.normal(0, exploration_randomness_std, size=len(priorities)) # Higher randomness
    return priorities
