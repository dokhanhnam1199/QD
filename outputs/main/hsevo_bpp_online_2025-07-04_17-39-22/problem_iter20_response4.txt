```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, utilization, and adaptive exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if not np.any(feasible_mask):
        return priorities

    # Core: Normalized waste *after* placement
    remaining_capacity_after_fit = feasible_bins_remain_cap - item
    normalized_waste = remaining_capacity_after_fit / bins_remain_cap.max()
    priorities[feasible_mask] = 1.0 - np.clip(normalized_waste, 0, 1)

    num_feasible = np.sum(feasible_mask)

    # Adaptive exploration
    if num_feasible <= 3:
        exploration_noise_scale = 0.15
    elif num_feasible > 5:
        exploration_noise_scale = 0.01
    else:
        exploration_noise_scale = 0.05

    priorities += np.random.normal(0, exploration_noise_scale, size=len(priorities))

    # Discourage tiny fragments
    tiny_fragment_threshold = 0.05 * bins_remain_cap.max()
    tiny_fragment_penalty = 0.5
    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < tiny_fragment_threshold)
    priorities[feasible_mask][tiny_fragment_mask] *= tiny_fragment_penalty

    # Encourage filling nearly full bins
    nearly_full_threshold = 0.9 * bins_remain_cap.max()
    nearly_full_bonus = 0.1
    nearly_full_mask = (bins_remain_cap >= nearly_full_threshold) & feasible_mask
    priorities[nearly_full_mask] += nearly_full_bonus

    # Large item in empty bin penalty
    item_size_threshold_ratio = 0.5
    large_item_penalty = 0.2
    bin_size = bins_remain_cap + item
    large_item_mask = item / bin_size[feasible_mask] > item_size_threshold_ratio
    bin_utilization = (bins_remain_cap[feasible_mask] - remaining_capacity_after_fit) / bin_size[feasible_mask]
    empty_bin_mask = bin_utilization < 0.25  # Lower threshold for empty
    priorities[feasible_mask][large_item_mask & empty_bin_mask] *= (1 - large_item_penalty)

    return priorities
```
