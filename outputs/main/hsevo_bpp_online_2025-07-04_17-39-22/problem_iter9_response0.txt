```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        # Primary priority: Fill bins well, but not too tightly.
        priorities[feasible_mask] = capacity_ratio

        # Penalize small fragments, but less harshly.
        small_fragment_mask = remaining_capacity_after_fit < (item * 0.05)  # Even smaller fragment threshold
        priorities[feasible_mask][small_fragment_mask] *= 0.7  # Reduced penalty

        # Incentivize bins that are already relatively full (more exploitation).
        full_bin_mask = capacity_ratio > 0.7
        priorities[feasible_mask][full_bin_mask] *= 1.2

        # Exploration bonus for bins with moderate remaining capacity. This encourages a mix of bin usage.
        moderate_capacity_mask = (remaining_capacity_after_fit > (item * 0.5)) & (remaining_capacity_after_fit <= (item * 1.5))
        priorities[feasible_mask][moderate_capacity_mask] *= 1.1

        # Adaptive Randomness: Reduce randomness as bins fill up (more exploitation)
        average_fill_level = np.mean(1 - bins_remain_cap / np.max(bins_remain_cap)) # crude estimate of overall fill-level
        randomness_scale = max(0.01, 0.05 * (1 - average_fill_level))  # scale randomness down as bins get full
        priorities += np.random.normal(0, randomness_scale, size=len(priorities))
    return priorities
```
