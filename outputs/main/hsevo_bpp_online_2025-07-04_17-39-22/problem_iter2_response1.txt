```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste normalization with a fullness preference."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf  # No fit, very low priority

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Assign infinite waste to infeasible bins
    waste_normalized = np.clip(1 - (waste / bins_remain_cap), a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    is_used_bonus = (bin_utilization > 0).astype(float)

    priorities = waste_normalized + is_used_bonus
    return priorities
```
