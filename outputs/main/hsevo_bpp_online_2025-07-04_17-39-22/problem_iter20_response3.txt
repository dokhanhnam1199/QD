```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive bin selection: combines normalized waste, bin utilization, and controlled exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf #Or zero

    if np.sum(feasible_bins) == 0:
        return priorities

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    bin_capacity = bins_remain_cap.max()

    waste_normalized = waste / bin_capacity
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)


    bin_utilization = (bins_remain_cap - waste) / bin_capacity
    bin_utilization = np.clip(bin_utilization, a_min=0, a_max=1)

    # Prioritize bins that are already somewhat full
    utilization_bonus = 0.2 * bin_utilization

    # Discourage creating very small fragments.
    fragment_penalty_threshold = 0.1 * item #Relative to item size
    fragment_penalty = np.where(waste < fragment_penalty_threshold, 0.3, 0)

    #Adaptive exploration noise
    num_feasible_bins = np.sum(feasible_bins)
    exploration_scale = 0.02 * (1 - (num_feasible_bins / len(bins_remain_cap))) #Scale down noise if most bins are viable
    noise = np.random.normal(0, exploration_scale, size=len(bins_remain_cap))

    priorities[feasible_bins] = (1 - waste_normalized[feasible_bins]) + utilization_bonus[feasible_bins] - fragment_penalty[feasible_bins] + noise[feasible_bins]

    return priorities
```
