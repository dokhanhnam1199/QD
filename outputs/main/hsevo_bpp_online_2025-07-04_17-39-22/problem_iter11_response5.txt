```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized waste and bin utilization with adaptive noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities - 1e9

    # Fit score: based on remaining capacity after placing the item
    remaining_capacity_after_fit = bins_remain_cap[valid_bins] - item
    fit_score = np.exp(-np.abs(remaining_capacity_after_fit) / item)
    priorities[valid_bins] = fit_score

    # Bin utilization bonus
    is_used_bonus = (bins_remain_cap < 1).astype(float) * (1 - bins_remain_cap)
    priorities += is_used_bonus

    # Normalize waste
    waste = bins_remain_cap[valid_bins] - item
    waste_normalized = waste / bins_remain_cap[valid_bins]
    priorities[valid_bins] -= waste_normalized

    # Dynamic noise injection
    num_valid = np.sum(valid_bins)
    noise_scale = min(1.0, 1.0 / (num_valid + 1e-6))
    noise = np.random.normal(0, 0.01 * noise_scale, len(priorities))
    priorities += noise

    return priorities
```
