```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, waste, and adaptive noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    remaining_capacities = bins_remain_cap[feasible]

    if len(remaining_capacities) > 0:
        utilization = item / remaining_capacities
        waste = remaining_capacities - item
        waste = np.clip(waste, a_min=0, a_max=None) #avoid negative values in waste
        waste_normalized = waste / remaining_capacities
        priorities[feasible] = utilization - waste_normalized

        # Adaptive noise based on number of bins
        num_feasible = np.sum(feasible)
        if num_feasible > 0:
            noise_level = 1e-6 * np.mean(remaining_capacities) # scale noise
            noise = np.random.normal(0, noise_level, len(priorities))
            priorities += noise

    return priorities
```
