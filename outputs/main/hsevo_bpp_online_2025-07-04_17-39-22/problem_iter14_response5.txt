```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste normalization, utilization, and adaptive exploration based on feasible bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf  # Infeasible bins

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = 1 - (waste / bins_remain_cap)
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    is_used_bonus = (bin_utilization > 0).astype(float)

    num_potential_bins = np.sum(potential_bins)
    
    # Adaptive noise scaling
    noise_scale = 0.01 if num_potential_bins > 0 else 0.05

    if num_potential_bins > 3:
        #Emphasize filling bins well when there are many choices. Introduce exploration.
        priorities = 0.6 * waste_normalized + 0.4 * is_used_bonus + 0.02 * (bin_utilization**2) + np.random.normal(0, noise_scale, size=len(priorities))
    else:
        #More exploration when fewer bins are available.
        priorities = 0.6 * waste_normalized + 0.4 * is_used_bonus + np.random.normal(0, noise_scale, size=len(priorities))

    return priorities
```
