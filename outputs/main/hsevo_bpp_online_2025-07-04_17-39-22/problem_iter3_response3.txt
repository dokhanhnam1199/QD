```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bin prioritization
    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]

    # Modified priority calculation: combines capacity ratio and remaining capacity, with tunable parameters.
    alpha = 1.0  # Weighting for capacity ratio
    beta = 1.0  # Weighting for remaining capacity
    gamma = 0.1 # Scaling factor for remaining capacity (avoid extreme values)


    priorities[feasible_mask] = (alpha * capacity_ratio) - (beta * np.abs(remaining_capacity_after_fit) * gamma)

    # Encourage "almost full" bins, but avoid tiny fragments. Add a bonus if the remaining capacity is below a threshold.
    small_fragment_threshold = item * 0.2  # e.g., remaining space should be no more than 20% of item size

    almost_full_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= small_fragment_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.5 # Boost priority for almost full bins

    # Add scaled remaining capacity
    priorities[feasible_mask] += bins_remain_cap[feasible_mask] * 0.01
    # Introduce randomness, but reduce its magnitude
    priorities += np.random.normal(0, 0.005, size=len(priorities))

    return priorities
```
