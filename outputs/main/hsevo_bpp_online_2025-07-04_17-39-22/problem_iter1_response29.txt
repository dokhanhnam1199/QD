```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers the waste created and the relative fullness of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap[0] + item #Assuming bins have same capacity, after the addition of current item (if feasible), the bin size would represent original capacity

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins that result in less waste (higher priority)
            # AND prefer bins which are already relatively full (lower waste relative to full size of bin)
            priorities[i] = (bin_size - waste)/bin_size #Ratio of item being added
            priorities[i] += (1 - waste / bin_size)**2 #Also factor how much waste there will be

    return priorities
```
