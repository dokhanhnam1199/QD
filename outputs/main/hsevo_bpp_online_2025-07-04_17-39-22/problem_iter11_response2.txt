```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines normalized waste, bin utilization, and exploration-exploitation.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = 1 - (waste / bins_remain_cap)
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    is_used_bonus = (bin_utilization > 0).astype(float)

    num_feasible = np.sum(potential_bins)
    exploration_prob = 0.3 if num_feasible < 3 else 0.1

    if np.random.rand() < exploration_prob:
        random_scale = 0.1 * item
        priorities += np.random.normal(0, random_scale, size=len(priorities))
    else:
        exploitation_bonus = 0.05
        priorities[potential_bins] = waste_normalized[potential_bins] + is_used_bonus[potential_bins] * (1 + exploitation_bonus * bin_utilization[potential_bins])

    return priorities
```
