```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on normalized waste and relative fullness."""

    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        # Normalized waste: smaller waste = higher priority
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 - (waste / bins_remain_cap[fit_mask])

        # Encourage filling almost full bins
        priorities[fit_mask] += (bins_remain_cap[fit_mask] / np.max(bins_remain_cap)) #relative fullness

    else:
        # If no bin fits, minimize overfill (last resort)
        overfill = item - bins_remain_cap
        priorities = -overfill / np.max(overfill) #Normalize

    return priorities
```
