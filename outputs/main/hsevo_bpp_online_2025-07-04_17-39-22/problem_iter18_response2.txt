```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version focuses on simplicity, adaptability, and balancing exploration/exploitation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    num_feasible = np.sum(feasible_mask)

    if num_feasible > 0:
        # Core heuristic: Normalized remaining capacity *after* placement.  Lower is better.
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        normalized_waste = remaining_capacity_after_fit / bins_remain_cap.max()  # Normalize by max bin size for consistency

        # Assign initial priorities based on normalized waste (invert, smaller waste = higher priority)
        priorities[feasible_mask] = 1.0 - np.clip(normalized_waste, 0, 1)

        # Adaptive Exploration/Exploitation: Adjust randomness based on the number of options.
        if num_feasible <= 3: # Increased exploration when few options exist
            exploration_noise_scale = 0.15 # Higher exploration noise
        elif num_feasible > 5: # Focus on exploitation when multiple bins are feasible
            exploration_noise_scale = 0.01
        else:
            exploration_noise_scale = 0.05 # medium exploration

        priorities += np.random.normal(0, exploration_noise_scale, size=len(priorities))

        # Edge Case Handling:
        #   1. Discourage tiny fragments.
        tiny_fragment_threshold = 0.05 * bins_remain_cap.max() # Dynamic threshold
        tiny_fragment_penalty = 0.5

        tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < tiny_fragment_threshold)
        priorities[feasible_mask][tiny_fragment_mask] *= tiny_fragment_penalty  # Apply penalty

        # 2. Encourage filling nearly full bins to completion.
        nearly_full_threshold = 0.9 * bins_remain_cap.max()
        nearly_full_bonus = 0.1

        nearly_full_mask = (bins_remain_cap >= nearly_full_threshold) & feasible_mask
        priorities[nearly_full_mask] += nearly_full_bonus

    return priorities
```
