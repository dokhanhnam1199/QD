```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority scores for bins based on remaining capacity and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities - 1e9

    # Normalized waste prioritization + Encourage fuller bins.
    waste = bins_remain_cap[valid_bins] - item
    waste_normalized = waste / bins_remain_cap[valid_bins]
    priorities[valid_bins] = 1 - waste_normalized

    # Boost bins with smaller remaining capacity
    remaining_after_placement = bins_remain_cap[valid_bins] - item
    remaining_after_placement = np.clip(remaining_after_placement, a_min=0, a_max=None)
    priority_boost = np.exp(-remaining_after_placement)
    priorities[valid_bins] *= priority_boost

    #Add noise
    noise = np.random.normal(0, 1e-6, len(priorities))
    priorities += noise

    return priorities
```
