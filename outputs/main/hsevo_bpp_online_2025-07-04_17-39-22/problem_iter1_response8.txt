```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Iterate through bins and calculate priority, prioritizing bins that
    # can accommodate the item.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the fill ratio after adding the item. A higher fill
            # ratio (closer to 1) is generally better, but we want to
            # avoid bins that are *too* full (e.g., > 0.95), as that leaves
            # little room for future items.

            fill_ratio_after = (item + (bins_remain_cap[i] - cap)) / (bins_remain_cap[i] + (bins_remain_cap[i] - cap) ) if (bins_remain_cap[i] + (bins_remain_cap[i] - cap) ) > 0 else 0

            # Heuristic: Prioritize bins with remaining capacity slightly larger than the item.
            # This aims to reduce fragmentation. Also, a small penalty for near full bins.
            priority =  1.0/(cap - item + 1e-6)  - (fill_ratio_after > 0.95) * 100 # Avoid almost full bins, big penalty
            priority += fill_ratio_after

            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Cannot fit the item

    return priorities
```
