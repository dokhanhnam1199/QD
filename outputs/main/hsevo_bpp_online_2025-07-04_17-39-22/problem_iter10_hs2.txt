import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                waste_normalized_weight: float = 0.3984207520185027,
                is_used_bonus_weight: float = 0.07825940551730981,
                noise_scale_potential_bins_exist: float = 0.052651467391895926,
                noise_scale_potential_bins_not_exist: float = 0.07182349554610613) -> np.ndarray:
    """Adaptive priority: Combines waste normalization, fullness, and dynamic noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = 1 - (waste / bins_remain_cap)
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
    is_used_bonus = (bin_utilization > 0).astype(float)

    # Dynamic noise based on number of potential bins
    num_potential_bins = np.sum(potential_bins)
    noise_scale = noise_scale_potential_bins_exist if num_potential_bins > 0 else noise_scale_potential_bins_not_exist  # Higher noise if no good bins
    priorities = waste_normalized_weight * waste_normalized + is_used_bonus_weight * is_used_bonus + np.random.normal(0, noise_scale, size=len(priorities))

    return priorities
