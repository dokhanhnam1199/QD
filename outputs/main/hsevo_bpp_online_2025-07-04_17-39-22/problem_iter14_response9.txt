```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste normalization, bin utilization, adaptive noise, and a dynamic item penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf  # Infeasible bins get negative infinity priority

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None) # Ensure waste is non-negative

    waste_normalized = 1 - (waste / (bins_remain_cap + 1e-9)) # Normalize waste; prevent division by zero
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)  # Ensure normalized waste is within [0, 1]

    bin_utilization = (bins_remain_cap - waste) / (bins_remain_cap + 1e-9) # Calculate bin utilization; prevent division by zero
    is_used_bonus = (bin_utilization > 0).astype(float)  # Give a bonus to bins already in use

    num_potential_bins = np.sum(potential_bins)
    noise_scale = 0.01 if num_potential_bins > 0 else 0.05 # Smaller noise when good bins exist

    # Adaptive noise and weights
    if num_potential_bins > 3:  # More bins, emphasize exploitation
        priorities = 0.7 * waste_normalized + 0.3 * is_used_bonus + 0.02 * (bin_utilization**2) + np.random.normal(0, noise_scale, size=len(priorities)) # Emphasize bin_utilization even more using power
    else:  # Fewer bins, emphasize exploration
        priorities = 0.7 * waste_normalized + 0.3 * is_used_bonus + np.random.normal(0, noise_scale, size=len(priorities)) # Standard noise for exploration
    
    small_item_size = np.mean(bins_remain_cap[bins_remain_cap>0])/10 if np.any(bins_remain_cap > 0) else 0.1
    future_fit_penalty = np.where(waste < small_item_size, -0.1 , 0) # Add penalty when waste is less than small_item_size to avoid small fragments
    priorities[potential_bins] += future_fit_penalty[potential_bins]

    return priorities
```
