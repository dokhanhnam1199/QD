```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, waste normalization, and adaptive noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    remaining_capacities = bins_remain_cap[feasible]

    if len(remaining_capacities) > 0:
        utilization = item / remaining_capacities
        waste = remaining_capacities - item
        waste = np.clip(waste, a_min=0, a_max=None)
        waste_normalized = waste / bins_remain_cap[feasible] # Normalize by original remaining capacity

        priorities[feasible] = utilization - 0.5 * waste_normalized #Balance

        # Adaptive noise
        num_feasible = np.sum(feasible)
        noise_scale = 1e-6 * np.mean(bins_remain_cap) if num_feasible > 0 else 1e-5 * np.mean(bins_remain_cap)

        noise = np.random.normal(0, noise_scale, len(priorities))
        priorities += noise

        #Bin usage bonus
        bin_utilization = (bins_remain_cap - waste) / bins_remain_cap
        is_used_bonus = (bin_utilization > 0).astype(float)
        priorities += 0.1 * is_used_bonus  # Encourage using partially filled bins

    return priorities
```
