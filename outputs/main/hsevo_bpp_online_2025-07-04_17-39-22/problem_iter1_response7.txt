```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a probabilistic packing strategy inspired by quantum mechanics,
    prioritizing bins based on a 'potential well' analogy.  The fuller the
    bin (smaller remaining capacity), the steeper the potential, and hence
    the higher the probability (priority) of attracting the item. A touch of
    uncertainty is added to avoid getting stuck in local minima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-6  # Small constant to avoid division by zero and log(0)
    potential_energy = -np.log(bins_remain_cap + epsilon)  # Inverted log function simulates a potential well

    # A large negative potential means lower remaining capacity i.e. a 'steeper' well, hence, high priority.
    # Normalize by item size, so large items are less likely to get crammed into barely fitting bins,
    # but rather into bins with room to spare.  This mitigates fragmentation to a degree.
    priority = potential_energy / (item + epsilon) # Divide by Item, so that smaller items can fill almost-full-bins

    # introduce some quantum noise: This perturbs the priority so we explore other packings sometimes.
    noise = np.random.normal(0, 0.1, size=bins_remain_cap.shape) # Gaussian random noise with stdev 0.1
    priority += noise  # Adds "quantum fluctuations" to the bin priorities

    return priority
```
