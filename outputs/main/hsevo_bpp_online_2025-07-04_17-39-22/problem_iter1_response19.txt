```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item
    with minimal remaining capacity, aiming for better space utilization.
    If a bin cannot accommodate the item, it receives a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            # Prioritize bins where the item fits snugly.
            # Invert the remaining capacity to give higher priority to smaller remainders.
            priorities[i] = 1.0 / (remaining_after_fit + 0.0001)  # Adding a small value to avoid division by zero.

            #Further prioritize bins with close to perfect fit
            if remaining_after_fit < 0.1:
              priorities[i] *= 2 # Boost priority for very tight fits

        else:
            # Very low priority if item doesn't fit.
            priorities[i] = -1000  # A significantly low value
    return priorities
```
