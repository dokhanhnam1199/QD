```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version focuses on a more adaptive approach, balancing bin utilization,
    fragmentation avoidance, and exploration based on the current state.  It
    aims for a simpler core with more adaptive elements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap  # Bin utilization ratio

        # Base priority: Bin utilization (higher is better)
        priorities[feasible_mask] = capacity_ratio**2  # Emphasize higher utilization

        # Fragmentation avoidance: Adaptive penalty
        fragment_threshold = 0.2 * item  # 20% of item size
        fragment_penalty = np.where(
            remaining_capacity_after_fit < fragment_threshold,
            -0.5 * (fragment_threshold - remaining_capacity_after_fit) / fragment_threshold, # Graded penalty
            0
        )
        priorities[feasible_mask] += fragment_penalty


        # Encourage filling up the bin if item fills a big chunk of it
        large_item_fit = 0.75
        large_fit_bonus = 0.2
        large_fit_mask = capacity_ratio > large_item_fit
        priorities[feasible_mask][large_fit_mask] += large_fit_bonus

        # Exploration/Exploitation balance: Adaptive noise
        num_feasible = np.sum(feasible_mask)
        if num_feasible <= 3: # Few options - explore more
             exploration_noise = 0.1
        else:
             exploration_noise = 0.025

        priorities[feasible_mask] += np.random.normal(0, exploration_noise, size=len(feasible_bins_remain_cap))



    return priorities
```
