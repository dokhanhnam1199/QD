```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes simplicity and adaptivity.  The core is based on
    normalized remaining waste if the item is placed in the bin.  Edge cases
    (small fragments, nearly-full bins) are handled explicitly and smoothly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap.max() #Assumes all bins have the same capacity

    # Infeasible bins get zero priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = 0.0

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item

        # Core Heuristic: Normalized Waste (lower is better)
        normalized_waste = remaining_capacity_after_fit / bin_capacity
        priorities[feasible_mask] = 1.0 - normalized_waste  # Convert to a higher-is-better priority

        # Edge Case 1: Small Fragment Penalty (smoothly applied)
        small_fragment_threshold = 0.2 * item # Relative to item size
        small_fragment_penalty = 0.5 # Reduce priority by this much

        small_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < small_fragment_threshold)
        fragment_penalty_factor = remaining_capacity_after_fit[small_fragment_mask] / small_fragment_threshold
        priorities[feasible_mask][small_fragment_mask] *= (1.0 - fragment_penalty_factor * small_fragment_penalty)

        # Edge Case 2: Near-Full Bin Bonus (smoothly applied)
        near_full_threshold = 0.9 * bin_capacity #Relative to bin capacity.
        near_full_bonus = 0.1 #Increase priority by this much.

        near_full_mask = feasible_bins_remain_cap - item > 0  # Check for valid indices before using the mask
        near_full_mask = near_full_mask & (feasible_bins_remain_cap > near_full_threshold)
        priorities[feasible_mask][near_full_mask] *= (1.0 + near_full_bonus)

        # Adaptivity: Exploration Noise (proportional to remaining bins)
        num_feasible = np.sum(feasible_mask)
        exploration_noise_scale = 0.05
        exploration_noise = np.random.normal(0, exploration_noise_scale * (1.0 - (num_feasible / len(bins_remain_cap))), size=len(priorities))
        priorities += exploration_noise

    return priorities
```
