```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have enough capacity for the item,
    giving preference to those that are filled closest to a certain
    percentage (e.g., 90%) after adding the item. Bins that cannot
    fit the item receive a very low priority (negative infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        remaining_after_fit = bins_remain_cap[feasible_bins] - item
        fill_percentage = 1 - remaining_after_fit / 1.0  # Assuming bin capacity is 1.0
        target_fill = 0.9  # Target fill percentage, can be adjusted

        # Calculate a score based on how close we are to the target fill.
        # Closer is better, so we use a negative squared difference.
        proximity_score = -np.square(fill_percentage - target_fill)

        priorities[feasible_bins] = proximity_score

        # Add a small bonus for bins that are already relatively full,
        # to encourage filling them up first (without strongly penalizing
        # other feasible bins).
        initial_fill = 1 - bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += initial_fill * 0.1


    return priorities
```
