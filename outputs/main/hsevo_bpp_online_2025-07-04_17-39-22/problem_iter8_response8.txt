```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities based on adaptive waste normalization,
    bin utilization, and dynamic exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item
    priorities[~potential_bins] = -np.inf

    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = 1 - (waste / (bins_remain_cap + 1e-9))
    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)

    bin_utilization = (bins_remain_cap - waste) / (bins_remain_cap + 1e-9)
    is_used_bonus = (bin_utilization > 0).astype(float)

    avg_cap = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1.0
    adaptive_weight = np.clip(avg_cap / (item + 1e-9), 0.1, 10)

    priorities = 0.7 * waste_normalized + 0.3 * is_used_bonus
    num_empty_bins = np.sum(bins_remain_cap > 0.99 * np.max(bins_remain_cap))
    exploration_factor = np.clip(num_empty_bins / len(bins_remain_cap), 0.01, 0.1)
    priorities += np.random.normal(0, exploration_factor, size=len(priorities))

    small_item_size = np.mean(bins_remain_cap[bins_remain_cap>0])/10 if np.any(bins_remain_cap > 0) else 0.1
    future_fit_penalty = np.where(waste < small_item_size, -0.1 , 0)
    priorities[potential_bins] += future_fit_penalty[potential_bins]

    return priorities
```
