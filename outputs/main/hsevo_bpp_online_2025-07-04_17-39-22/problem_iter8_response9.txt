```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic: Combines capacity ratio, fragment avoidance, and dynamic exploration-exploitation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    feasible_mask = ~infeasible_mask
    
    if np.sum(feasible_mask) > 0:
        remaining_after_fit = bins_remain_cap[feasible_mask] - item
        capacity_ratio = item / bins_remain_cap[feasible_mask]
        
        # Base priority on capacity ratio
        priorities[feasible_mask] = capacity_ratio

        # Small fragment penalty
        small_fragment_threshold = 0.2  # Tuneable
        small_fragment_penalty = 0.7
        small_fragment_mask = remaining_after_fit < (item * small_fragment_threshold)
        priorities[feasible_mask][small_fragment_mask] *= small_fragment_penalty

        # Large capacity bonus
        large_capacity_threshold = 2.0 # Tuneable
        large_capacity_bonus = 1.1
        large_capacity_mask = remaining_after_fit > (item * large_capacity_threshold)
        priorities[feasible_mask][large_capacity_mask] *= large_capacity_bonus

        # Adaptive exploration/exploitation
        num_feasible = np.sum(feasible_mask)
        exploration_prob = 0.3 if num_feasible < 3 else 0.1 # Tuneable
        
        if np.random.rand() < exploration_prob:
            random_scale = 0.1 * item  #Tuneable
            priorities += np.random.normal(0, random_scale, size=len(priorities))
        else:
            exploitation_bonus = 0.05 # Tuneable
            priorities[feasible_mask] *= (1 + exploitation_bonus * capacity_ratio) # Favor full bins.

    return priorities
```
