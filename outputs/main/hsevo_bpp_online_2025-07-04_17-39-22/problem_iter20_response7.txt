```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function balancing utilization, fragmentation, and exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap.max()
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / bin_capacity # Use bin_capacity for ratio

        # Core: Bin Utilization (similar to v0, but using bin_capacity)
        priorities[feasible_mask] = capacity_ratio**2

        # Fragment penalty (v0 style, but adapted)
        fragment_threshold = 0.2 * bin_capacity
        fragment_penalty_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < fragment_threshold)
        priorities[feasible_mask][fragment_penalty_mask] *= 0.7

        # Encourage almost full bins (v0 style)
        almost_full_threshold = 0.9 * bin_capacity
        almost_full_mask = remaining_capacity_after_fit < (bin_capacity - almost_full_threshold)
        priorities[feasible_mask][almost_full_mask] *= 1.2

        # Large item bonus (v1 style, adaptively scaled)
        large_item_threshold = 0.7 * bin_capacity
        if item > large_item_threshold:
            sufficient_capacity_bonus = np.where(remaining_capacity_after_fit > 0.1 * bin_capacity, 0.15, 0) #Slightly adjusted parameters
            priorities[feasible_mask] += sufficient_capacity_bonus

        # Adaptive Exploration (Combines elements of both)
        num_feasible = np.sum(feasible_mask)
        if num_feasible <= 3: # More exploration when few choices
            priorities += np.random.normal(0, 0.1, size=len(priorities))
        else:  # Less exploration, more exploitation
             priorities[feasible_mask] *= (1 + 0.05 * capacity_ratio) # V0 Exploitation

    return priorities
```
