```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, only consider bins that can actually fit the item.
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit the item, return lowest priority for all. This shouldn't happen in a typical problem instance, but adding this as failsafe.
        return priorities

    # Calculate the "waste" if the item were placed in each bin. Waste is defined as remaining capicity in a bin, AFTER item placement
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Set waste to infinity for bins that can't fit.

    # 1. Prioritize bins where the item fills them up nicely. That is, min waste.
    priorities = 1 / (waste + 1e-9) # Adding small constant to avoid division by zero

    # 2. Add a term that rewards utilizing more space relative to initial capacity
    # but scaled down appropriately so it doesn't dominate waste prioritization.

    #We don't want it to dominate. I consider that adding the inverse of wasted volume, it means that we are also prioritizing a fuller pack in terms of ratio of capacity that is used
    priorities += 0.1 * (item / bins_remain_cap) * feasible_bins

    #3. A small nudge to completely filled bins, if any, helps towards the end of run
    perfect_fit = waste == 0
    priorities[perfect_fit] += 1
    
    return priorities
```
