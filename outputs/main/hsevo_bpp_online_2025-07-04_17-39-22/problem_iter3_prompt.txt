{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin must have enough capacity to accommodate the item. Otherwise the priority should be very low.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Make infeasible bins have the lowest priority.\n\n    # Encourage bins that fit the item *relatively* well (but not too perfectly, to avoid small remaining spaces).\n\n    feasible_mask = ~infeasible_mask\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    capacity_ratio = item / bins_remain_cap[feasible_mask]  # ratio of item size to bin capacity\n\n    # Priority is high if the capacity ratio is high AND the remaining space is small *relative* to the item\n    # This favors using most of the bin's space without creating *very* small fragments.\n\n    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_capacity_after_fit / (item + 1e-9))\n\n    # Introduce some randomness to break ties and explore the search space more effectively.\n    priorities += np.random.normal(0, 0.01, size=len(priorities))\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current Self-Reflection\" to be more effective for designing better heuristics, keeping in mind the goal of avoiding ineffective practices (which are currently undefined, so we'll focus on generally good practices).\n\nHere's a breakdown to guide the redefined self-reflection process:\n\n*   **Keywords:** *Adaptive, Iterative, Modular, Validation, Experimentation.*\n\n*   **Advice:** Focus on iterative refinement through experimentation. Design heuristics as modular components, enabling easy modification and combination. Continuously validate performance against benchmarks and adapt based on results.\n\n*   **Avoid:** Premature optimization, rigid designs, relying solely on intuition without empirical validation, ignoring problem-specific characteristics.\n\n*   **Explanation:** Move beyond static, predefined heuristics. Embrace an adaptive approach where the heuristic's parameters or structure can be adjusted based on feedback from the search process or the problem instance itself. Modular design allows for easier testing and combination of different heuristic components. Rigorous validation is crucial to ensure the heuristic consistently improves performance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}