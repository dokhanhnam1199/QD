```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio, waste, and adaptive noise based on # feasible bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        # Primary priority: Fill bins well.
        priorities[feasible_mask] = capacity_ratio

        # Penalize small fragments.
        small_fragment_mask = remaining_capacity_after_fit < (item * 0.05)
        priorities[feasible_mask][small_fragment_mask] *= 0.7

        # Incentivize bins that are already relatively full.
        full_bin_mask = capacity_ratio > 0.7
        priorities[feasible_mask][full_bin_mask] *= 1.2

        # Adaptive Randomness based on num of feasible bins
        num_feasible = np.sum(feasible_mask)
        random_scale = 0.01 * item * max(1, num_feasible)
        priorities += np.random.normal(0, random_scale, size=len(priorities))

    return priorities
```
