```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic: balances fit, waste, fullness, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf

    can_fit = ~cannot_fit
    remaining_capacities_can_fit = bins_remain_cap[can_fit]

    if len(remaining_capacities_can_fit) > 0:
        waste = remaining_capacities_can_fit - item
        waste_normalized = waste / remaining_capacities_can_fit
        utilization = item / remaining_capacities_can_fit

        priorities[can_fit] = utilization - waste_normalized

        # Boost bins with smaller remaining capacity after placement
        remaining_after_placement = remaining_capacities_can_fit - item
        remaining_after_placement = np.clip(remaining_after_placement, a_min=0, a_max=None)
        priority_boost = np.exp(-5 * remaining_after_placement)
        priorities[can_fit] += 0.5* priority_boost

        #Adaptive noise: reduce noise as bins get full.
        noise_scale = np.mean(remaining_capacities_can_fit)
        noise = np.random.normal(0, 1e-6 * noise_scale, len(priorities))
        priorities += noise

    return priorities
```
