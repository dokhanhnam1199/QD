```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces a few improvements:
    1.  It strongly discourages exceeding capacity.  Bins that cannot fit the
        item get a very negative priority.
    2.  It prefers bins that have capacity close to the item size, but with
        a bias towards using bins that are already partially full.  This is
        achieved by considering both the absolute difference between item size
        and remaining capacity, and the initial capacity of each bin.
    3.  Prioritizes completely empty bins *less* to allow partially filled bins to be utilized before starting new bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very negative priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Heuristic based on how well the item fits and encourages utilizing partially-filled bins
    fit_score = np.exp(-np.abs(bins_remain_cap - item) / item)

    # Add bonus if the bin is already used
    is_used_bonus = (bins_remain_cap < 1).astype(float) #Bins with remaining cap < 1 are considered used

    priorities = fit_score + is_used_bonus

    return priorities
```
