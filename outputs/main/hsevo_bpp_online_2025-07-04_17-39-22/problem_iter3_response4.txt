```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]

    # First Fit Decreasing inspired element - gives higher priority to bins where item fits best,
    # with less remaining capacity.
    priority_best_fit = 1.0 / (remaining_capacity_after_fit + 1e-9)

    # Modified Capacity Ratio: Emphasize bins that are filled significantly
    priority_capacity_ratio = capacity_ratio**2  # Squaring emphasizes higher ratios

    # Combination of factors - weighted average
    priorities[feasible_mask] = (0.6 * priority_best_fit + 0.4 * priority_capacity_ratio)

    # Adaptive element: Reduce priority of bins that lead to very small fragments.
    small_fragment_threshold = 0.1
    small_fragment_penalty = -0.2
    small_fragment_mask = remaining_capacity_after_fit < small_fragment_threshold
    priorities[feasible_mask][small_fragment_mask] += small_fragment_penalty

    # Stochasticity - Add small random component for exploration
    priorities += np.random.normal(0, 0.005, size=len(priorities))

    return priorities
```
