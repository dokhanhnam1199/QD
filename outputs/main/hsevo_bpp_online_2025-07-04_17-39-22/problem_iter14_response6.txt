```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio, fragment avoidance, target utilization, and adaptive randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        priorities[feasible_mask] = capacity_ratio

        # Fragment Avoidance (relative to original bin size)
        small_fragment_mask = remaining_capacity_after_fit < (bins_remain_cap[feasible_mask] * 0.05)
        priorities[feasible_mask][small_fragment_mask] *= 0.75

        # Target Utilization
        target_utilization = 0.75
        utilization = (bins_remain_cap[feasible_mask] - remaining_capacity_after_fit) / bins_remain_cap[feasible_mask]
        utilization_diff = np.abs(utilization - target_utilization)
        priorities[feasible_mask] *= (1 - 0.1 * utilization_diff)

        # Adaptive Randomness (based on max capacity used)
        max_capacity_used = np.max(1 - bins_remain_cap / np.max(bins_remain_cap))
        randomness_scale = 0.01 + (0.04 * max_capacity_used)
        priorities += np.random.normal(0, randomness_scale, size=len(priorities))

        num_feasible = np.sum(feasible_mask)
        if num_feasible > 5:
            priorities[feasible_mask] *= (1 + 0.02 * capacity_ratio)
        else:
            avg_fill_level = np.mean(capacity_ratio)
            exploration_boost = 0.03 + (0.07 * (1 - avg_fill_level))
            priorities += np.random.normal(0, exploration_boost, size=len(priorities))
    return priorities
```
