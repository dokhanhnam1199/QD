[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, used bin bonus, normalized waste, and noise.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities - 1e9\n\n    # Fit score: exp distance\n    fit_score = np.exp(-np.abs(bins_remain_cap - item) / item)\n    priorities[valid_bins] = fit_score[valid_bins]\n\n    # Used bin bonus\n    is_used_bonus = (bins_remain_cap < 1).astype(float)\n    priorities += is_used_bonus\n\n    # Normalize waste\n    waste = bins_remain_cap[valid_bins] - item\n    waste_normalized = waste / bins_remain_cap[valid_bins]\n    priorities[valid_bins] -= waste_normalized # Subtract normalized waste\n\n    #Add noise\n    noise = np.random.normal(0, 1e-6, len(priorities))\n    priorities += noise\n    \n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Dynamically combines fullness and waste, with noise and infeasibility mask.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    cannot_fit = item > bins_remain_cap\n    priorities[cannot_fit] = -np.inf\n\n    can_fit = ~cannot_fit\n    remaining_capacities_can_fit = bins_remain_cap[can_fit]\n\n    if len(remaining_capacities_can_fit) > 0:\n        waste = remaining_capacities_can_fit - item\n        waste_normalized = waste / remaining_capacities_can_fit\n\n        relative_fullness = 1 - remaining_capacities_can_fit #Assume bin capacity is 1.\n\n        priorities[can_fit] = -waste_normalized + relative_fullness\n\n        # Boost bins with smaller remaining capacity after placement\n        remaining_after_placement = remaining_capacities_can_fit - item\n        remaining_after_placement = np.clip(remaining_after_placement, a_min=0, a_max=None)\n        priority_boost = np.exp(-5 * remaining_after_placement) #Scale remaining capacity\n        priorities[can_fit] += priority_boost\n\n    #Add noise\n    noise = np.random.normal(0, 1e-6, len(priorities))\n    priorities += noise\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines adaptive capacity ratio, remaining space penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    feasible_mask = ~infeasible_mask\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    capacity_ratio = item / bins_remain_cap[feasible_mask]\n\n    fullness_ratio = 1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))\n    priorities[feasible_mask] = capacity_ratio * np.exp(-10 * remaining_capacity_after_fit / (item + 1e-9)) * (1-fullness_ratio)\n\n    already_full_mask = (bins_remain_cap[feasible_mask] < 0.7 * np.max(bins_remain_cap)) & (bins_remain_cap[feasible_mask] > item)\n    priorities[feasible_mask][already_full_mask] += 0.1 * item\n    \n    random_scale = 0.01 * item\n    priorities += np.random.normal(0, random_scale, size=len(priorities))\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 53.260869565217405,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive priority with capacity ratio, remaining space, and item-size scaling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    \n    feasible_mask = ~infeasible_mask\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    capacity_ratio = item / bins_remain_cap[feasible_mask]\n    \n    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_capacity_after_fit / (item + 1e-9))\n\n    too_full_mask = feasible_mask & (remaining_capacity_after_fit < 0.1 * bins_remain_cap[feasible_mask])\n    priorities[too_full_mask] -= 0.5\n\n    almost_perfect_mask = feasible_mask & (remaining_capacity_after_fit < 1e-6)\n    priorities[almost_perfect_mask] += 0.2\n\n    random_scale = 0.01 * item\n    priorities += np.random.normal(0, random_scale, size=len(priorities))\n\n    priorities /= (item + 1e-9)\n    \n    # Bonus for bins that were nearly full before, promoting reuse\n    nearly_full_before_mask = feasible_mask & (bins_remain_cap[feasible_mask] < item * 1.1)\n    priorities[nearly_full_before_mask] += 0.1\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 16.2644595133626,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive priority: Combines waste normalization, fullness, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    potential_bins = bins_remain_cap >= item\n    priorities[~potential_bins] = -np.inf\n\n    waste = bins_remain_cap - item\n    waste = np.clip(waste, a_min=0, a_max=None)\n    waste_normalized = 1 - (waste / bins_remain_cap)\n    waste_normalized = np.clip(waste_normalized, a_min=0, a_max=1)\n\n    bin_utilization = (bins_remain_cap - waste) / bins_remain_cap\n    is_used_bonus = (bin_utilization > 0).astype(float)\n\n    priorities = 0.7 * waste_normalized + 0.3 * is_used_bonus\n    priorities += np.random.normal(0, 0.005, size=len(priorities))\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive priority: combines normalized waste, fit score and randomness.\"\"\"\n\n    # Prioritize bins where the item fits, penalize others harshly\n    fit_score = bins_remain_cap - item\n    fit_priority = np.where(fit_score >= 0, np.exp(-np.abs(fit_score)), -np.inf)\n\n    # Normalize remaining capacity\n    remaining_normalized = np.zeros_like(bins_remain_cap)\n    remaining_normalized[fit_score >= 0] = 1 - (fit_score[fit_score >= 0] / bins_remain_cap[fit_score >= 0])\n\n    # Combine fit proximity with remaining capacity, randomness\n    priorities = 0.7 * fit_priority + 0.3 * remaining_normalized + np.random.normal(0, 0.01, size=len(bins_remain_cap))\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 36.02911846828879,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines adaptive bin selection with waste penalization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    feasible_mask = ~infeasible_mask\n    remaining_capacities_can_fit = bins_remain_cap[feasible_mask]\n    \n    if len(remaining_capacities_can_fit) > 0:\n        waste = remaining_capacities_can_fit - item\n        waste_normalized = waste / remaining_capacities_can_fit\n        relative_fullness = 1 - remaining_capacities_can_fit / np.max(bins_remain_cap)\n        priorities[feasible_mask] = -waste_normalized + relative_fullness * 0.5 # Adjusted weight\n\n        fragmentation_penalty = np.exp(-5 * waste)\n        priorities[feasible_mask] -= 0.1 * fragmentation_penalty\n\n        # Adaptive reuse bonus\n        already_full_mask = (remaining_capacities_can_fit < 0.7 * np.max(bins_remain_cap)) & (remaining_capacities_can_fit > item)\n        priorities[feasible_mask][already_full_mask] += 0.1 * item * relative_fullness[already_full_mask]\n\n        priorities += np.random.normal(0, 0.005, size=len(priorities))\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.437574790586359,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive heuristic with dynamic penalties and bonuses.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    feasible_mask = ~infeasible_mask\n    remaining_after_fit = bins_remain_cap[feasible_mask] - item\n    capacity_ratio = item / bins_remain_cap[feasible_mask]\n    \n    # Dynamic weighting based on item size and remaining capacity\n    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_after_fit / (item + 1e-9))\n\n    # Adaptive penalty for almost full bins\n    too_full_mask = feasible_mask & (remaining_after_fit < 0.1 * bins_remain_cap[feasible_mask])\n    priorities[too_full_mask] -= 0.5 \n\n    # Bonus for nearly perfect fit\n    almost_perfect_mask = feasible_mask & (remaining_after_fit < 1e-6)\n    priorities[almost_perfect_mask] += 0.2\n\n    # Adaptive Randomization\n    random_scale = 0.01 * item\n    priorities += np.random.normal(0, random_scale, size=len(priorities))\n\n    # Waste Normalization\n    waste_norm = remaining_after_fit / (bins_remain_cap[feasible_mask] + item + 1e-9)\n    priorities[feasible_mask] -= 0.1 * np.clip(waste_norm, 0, 1)\n\n    priorities /= (item + 1e-9)\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 13.382528919026731,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive bin selection: balance fit, capacity, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    capacity_ratio = item / bins_remain_cap[feasible_mask]\n\n    # Capacity Ratio\n    priority_capacity_ratio = capacity_ratio\n\n    # Remaining Capacity (Gaussian-like)\n    mean_remaining_capacity = item\n    std_dev_remaining_capacity = item / 2.0\n    priority_remaining_capacity = np.exp(-((remaining_capacity_after_fit - mean_remaining_capacity) ** 2) / (2 * std_dev_remaining_capacity ** 2))\n\n    # Balancing Term\n    priority_balance = 1.0 / (bins_remain_cap[feasible_mask] + 1e-9)\n\n    priorities[feasible_mask] = (\n        0.5 * priority_capacity_ratio +\n        0.3 * priority_remaining_capacity +\n        0.2 * priority_balance\n    )\n\n    # Add randomness, scale with item size\n    priorities += np.random.normal(0, 0.005 * item, size=len(priorities))\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 24.511368169126442,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins balancing utilization, fragmentation, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n    remaining_after_fit = bins_remain_cap[feasible_mask] - item\n    utilization = item / bins_remain_cap[feasible_mask]\n\n    fullness_ratio = 1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))\n    priorities[feasible_mask] = utilization * np.exp(-5 * remaining_after_fit / (item + 1e-9)) * (1 - fullness_ratio)\n\n    already_full_mask = (bins_remain_cap[feasible_mask] < 0.7 * np.max(bins_remain_cap)) & (bins_remain_cap[feasible_mask] > item)\n    priorities[feasible_mask][already_full_mask] += 0.1 * item\n\n    priorities += np.random.normal(0, 0.005, size=len(priorities))\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.946150777822112,
    "exec_success": true
  }
]