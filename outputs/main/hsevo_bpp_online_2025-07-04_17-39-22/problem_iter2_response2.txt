```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on space utilization and fragmentation."""
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~feasible_bins] = -np.inf

    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    utilization = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = utilization

    fragmentation_penalty = np.exp(-5 * remaining_after_fit)
    priorities[feasible_bins] -= fragmentation_penalty

    almost_full_bonus = np.exp(-10*np.abs(remaining_after_fit-0.1))
    priorities[feasible_bins] += 0.1*almost_full_bonus

    return priorities
```
