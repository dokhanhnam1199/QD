```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized waste and bin utilization with exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities - 1e9

    feasible_bins_remain_cap = bins_remain_cap[valid_bins]

    # Normalized Waste Score (Core Intuition)
    remaining_capacity_after_fit = feasible_bins_remain_cap - item
    normalized_waste = remaining_capacity_after_fit / (item + feasible_bins_remain_cap) # normalized by both item and remaining capacity
    priorities[valid_bins] = -normalized_waste # smaller waste better

    # Bin Utilization Bonus (Exploitation)
    utilization = item / feasible_bins_remain_cap
    priorities[valid_bins] += utilization**2  # Non-linear

    #Adaptive noise for Exploration
    num_valid_bins = np.sum(valid_bins)
    noise_scale = 0.01 if num_valid_bins > 3 else 0.07
    noise = np.random.normal(0, noise_scale, len(priorities))
    priorities += noise

    # Edge Case Handling: Small Fragments Penalty
    small_fragment_threshold = 0.2 * item
    small_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < small_fragment_threshold)
    priorities[valid_bins][small_fragment_mask] -= 0.1 # Penalize small waste

    return priorities
```
