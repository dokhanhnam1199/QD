import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                small_fragment_threshold_ratio: float = 0.44286267643009036,
                small_fragment_penalty: float = 0.6293283246425551,
                large_capacity_threshold_ratio: float = 2.4820992155175032,
                large_capacity_bonus: float = 1.3751667650393218,
                base_exploration_noise: float = 0.09891992233000507,
                num_feasible_bins_threshold: int = 4.847650220251868,
                exploitation_bonus: float = 0.08619658248762585,
                exploration_noise: float = 0.13785977157696336,
                fragment_penalty_threshold_ratio: float = 0.25922518673355877,
                fragment_penalty_factor: float = 0.6875555235845779,
                bin_utilization_exponent: float = 2.542045440162718,
                item_size_threshold_ratio: float = 0.34460682417635463,
                large_item_bonus: float = 0.14235763577586166,
                bin_fullness_threshold: float = 0.7354052563462707,
                full_bin_bonus: float = 0.11463412061434396) -> np.ndarray:
    """Calculate bin priorities, balancing bin utilization, fragmentation, and exploration."""


    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        priorities[feasible_mask] = capacity_ratio**bin_utilization_exponent

        small_fragment_mask = remaining_capacity_after_fit < (item * small_fragment_threshold_ratio)
        priorities[feasible_mask][small_fragment_mask] *= small_fragment_penalty

        large_capacity_mask = remaining_capacity_after_fit > (item * large_capacity_threshold_ratio)
        priorities[feasible_mask][large_capacity_mask] *= large_capacity_bonus

        priorities += np.random.normal(0, base_exploration_noise, size=len(priorities))

        num_feasible = np.sum(feasible_mask)
        if num_feasible > num_feasible_bins_threshold:
            priorities[feasible_mask] *= (1 + exploitation_bonus * capacity_ratio)
        else:
            priorities += np.random.normal(0, exploration_noise, size=len(priorities))

        fragment_penalty_threshold = item * fragment_penalty_threshold_ratio
        fragment_penalty_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < fragment_penalty_threshold)
        priorities[feasible_mask][fragment_penalty_mask] *= (1 - (remaining_capacity_after_fit[fragment_penalty_mask] / fragment_penalty_threshold) * fragment_penalty_factor)


        bin_fullness = 1 - (feasible_bins_remain_cap / (bins_remain_cap[feasible_mask]))

        full_bin_mask = bin_fullness > bin_fullness_threshold
        priorities[feasible_mask][full_bin_mask] *= (1 + full_bin_bonus)

        if item > bins_remain_cap.max() * item_size_threshold_ratio:
            well_utilized_mask = capacity_ratio > 0.7
            priorities[feasible_mask][well_utilized_mask] *= (1 + large_item_bonus)

    return priorities
