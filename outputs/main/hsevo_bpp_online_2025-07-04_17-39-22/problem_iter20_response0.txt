```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority scores, adaptive randomness, balance occupancy."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - 1e9

    # Core: Bin occupancy ratio, penalize low fill
    occupation_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = occupation_ratio

    # Tighter fit bonus
    fit_bonus = np.exp(-np.abs(bins_remain_cap[feasible_bins] - item) / (item + 1e-9))
    priorities[feasible_bins] += fit_bonus * 0.2

    # Avoid small fragments relative to item
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item
    small_fragment_mask_item_relative = remaining_capacity_after_fit < (item * 0.1)
    priorities[feasible_bins][small_fragment_mask_item_relative] *= 0.75

    # Adaptive noise
    num_feasible = np.sum(feasible_bins)
    noise_scale = 0.005 if num_feasible > 3 else 0.05
    
    # Scale noise with occupancy
    avg_occupancy = np.mean(1 - occupation_ratio) if len(occupation_ratio) > 0 else 0
    noise_scale += 0.01 * (1 - avg_occupancy)

    noise = np.random.normal(0, noise_scale, len(priorities))
    priorities += noise

    return priorities
```
