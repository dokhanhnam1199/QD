```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of previous heuristics for improved bin packing."""

    # Calculate how much space would be left in each bin if the item were placed
    fit_score = bins_remain_cap - item

    # Prioritize bins where the item fits, penalize others harshly
    fit_priority = np.where(fit_score >= 0, np.exp(-np.abs(fit_score)), -np.inf)

    # Normalize remaining capacity to a [0,1] scale, higher value for near-full bins
    remaining_normalized = np.zeros_like(bins_remain_cap)
    remaining_normalized[fit_score >= 0] = 1 - (fit_score[fit_score >= 0] / bins_remain_cap[fit_score >= 0])

    # Combine fit proximity with remaining capacity using a weighted sum.
    priorities = 0.8 * fit_priority + 0.2 * remaining_normalized
    return priorities
```
