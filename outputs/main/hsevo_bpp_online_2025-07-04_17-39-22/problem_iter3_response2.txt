```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get negative infinity priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Prioritize bins based on a combination of factors for feasible bins
    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]

    # 1. Capacity Ratio: Higher ratio means the item fills the bin more completely.
    priority_capacity_ratio = capacity_ratio

    # 2. Remaining Capacity: Moderate remaining capacity is better than very small or very large.
    #    We use a Gaussian-like function to penalize extreme remaining capacities.
    mean_remaining_capacity = item  # Target a remaining capacity close to the item size
    std_dev_remaining_capacity = item / 2.0  # Adjust the spread as needed
    priority_remaining_capacity = np.exp(-((remaining_capacity_after_fit - mean_remaining_capacity) ** 2) / (2 * std_dev_remaining_capacity ** 2))

    # 3. Balancing Term: Encourages use of bins with already smaller remaining capacity, but not too small
    priority_balance = 1.0 / (bins_remain_cap[feasible_mask] + 1e-9)

    # Combine the priorities using a weighted sum or product.
    priorities[feasible_mask] = (
        0.5 * priority_capacity_ratio +
        0.3 * priority_remaining_capacity +
        0.2 * priority_balance
    )

    # Add a bit of randomness to break ties.  Reduce the magnitude.
    priorities += np.random.normal(0, 0.005, size=len(priorities))

    return priorities
```
