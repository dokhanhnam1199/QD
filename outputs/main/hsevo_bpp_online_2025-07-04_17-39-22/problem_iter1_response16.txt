```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more sophisticated priority function, considering both space utilization
    and a penalty for excessive fragmentation. We also introduce a small random
    element to help escape local optima. Inspired by the chaotic nature
    of black hole singularities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Feasibility check: Only consider bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~feasible_bins] = -np.inf  # Give infeasible bins lowest priority

    # 2. Space utilization: Prefer bins with tighter fit (higher utilization).
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    utilization = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = utilization

    # 3. Fragmentation penalty: Penalize creating bins with small remaining space.
    #    This is analogous to preventing information loss by encouraging filling the bins
    #    more fully (avoiding small "event horizons" of unused space).
    fragmentation_penalty = np.exp(-5 * remaining_after_fit)
    priorities[feasible_bins] -= fragmentation_penalty

    # 4. Introduce a small random element: Analogous to Hawking radiation,
    #    this random factor helps to escape local optima and explore different
    #    bin configurations. The intensity is scaled down to a small number to keep it subtle.
    random_factor = 0.01 * np.random.rand(np.sum(feasible_bins))
    priorities[feasible_bins] += random_factor

    # 5. A slight preference for almost full bins
    almost_full_bonus = np.exp(-10*np.abs(remaining_after_fit-0.1))
    priorities[feasible_bins] += 0.1*almost_full_bonus

    return priorities
```
