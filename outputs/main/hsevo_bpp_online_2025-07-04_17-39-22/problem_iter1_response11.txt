```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers several factors:
    1. Remaining capacity compared to item size (closeness to perfect fit).
    2. Penalty for bins where the item doesn't fit.
    3. A bonus for bins that were almost full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very important: Handle the case where the item doesn't fit!
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf  # Definitely avoid these bins

    # Now handle bins where the item *can* fit
    can_fit = ~cannot_fit
    remaining_capacities_can_fit = bins_remain_cap[can_fit]

    if len(remaining_capacities_can_fit) > 0:  # Only calculate when needed
        # Proximity to "perfect fit" - smaller waste is better
        waste = remaining_capacities_can_fit - item
        waste_normalized = waste / remaining_capacities_can_fit # Smaller number means smaller waste as a portion.

        # Encourage packing into bins that were already quite full.  A bit of relative fullness before adding item.
        relative_fullness = 1 - remaining_capacities_can_fit #Assume bin capacity is 1.
        priorities[can_fit] = -waste_normalized + relative_fullness
    return priorities
```
