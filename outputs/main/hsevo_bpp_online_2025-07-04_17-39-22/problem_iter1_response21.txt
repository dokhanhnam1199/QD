```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fills a substantial portion
    of the remaining capacity, while also discouraging bins that are
    almost full but still can't accommodate the item (avoiding near misses).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the fill ratio:  How much of the remaining capacity will the item fill?
            fill_ratio = item / cap

            # Give higher priority to bins that are filled reasonably well,
            # but not perfectly (to leave room for future items).  A sigmoid-like function
            # might be useful for a more refined version.
            priority = fill_ratio #Simple starting point based on fill ratio

            # Add a bonus if the fill ratio is above a certain threshold (e.g., 0.5)
            # Encourages using bins where the item "fits well"
            if fill_ratio > 0.5:
                priority += 0.2

            # Penalize near misses: If the bin is almost full but the item *still* doesn't fit,
            # strongly discourage using it. This prevents wasting bins with tiny unusable slivers.
            # Since the if condition at the beginning already covers the "doesn't fit" scenario, 
            # no penalty here is needed
            priorities[i] = priority
        else:
            # If the item doesn't fit, give a very low (negative) priority
            priorities[i] = -100  # Discourage these bins

    return priorities
```
