```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) == 0:
        return priorities  # No feasible bins

    remaining_capacity_after_fit = feasible_bins_remain_cap - item
    capacity_ratio = item / feasible_bins_remain_cap

    # Base priority on capacity ratio
    priorities[feasible_mask] = capacity_ratio

    # Fragment penalty: exponentially reduce priority for small fragments
    small_fragment_mask = remaining_capacity_after_fit < (item * 0.1)
    priorities[feasible_mask][small_fragment_mask] *= np.exp(-5 * (item * 0.1 - remaining_capacity_after_fit[small_fragment_mask]) / item)  # Exponential penalty

    # Bonus for filling bins significantly: sigmoid function
    large_fill_mask = capacity_ratio > 0.8  # Tunable parameter
    priorities[feasible_mask][large_fill_mask] += 0.2 * (1 / (1 + np.exp(-10 * (capacity_ratio[large_fill_mask] - 0.8)))) # Sigmoid bonus

    # Exploration/Exploitation balance: Adaptive noise based on fill level
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalize by largest bin capacity to provide a global sense of utilization
    global_utilization = np.mean(bin_utilization[~np.isinf(bin_utilization)])
    if np.isnan(global_utilization):
      global_utilization = 0.0
    exploration_rate = 0.05 * (1 - global_utilization) + 0.005 # Reduce exploration as global utilization increases

    priorities += np.random.normal(0, exploration_rate, size=len(priorities))

    # Bin diversity: Slightly favor bins with capacity near the median
    median_capacity = np.median(bins_remain_cap[feasible_mask])
    capacity_difference = np.abs(feasible_bins_remain_cap - median_capacity)
    priority_boost = np.exp(-capacity_difference / (np.max(bins_remain_cap) * 0.2)) * 0.05 # Gaussian-like boost
    priorities[feasible_mask] += priority_boost

    return priorities
```
