```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This version focuses on a more adaptive and balanced approach:
    - Prioritizes bins with a "good fit" (not too tight, not too loose).
    - Adapts exploration/exploitation based on bin availability and item size.
    - Simpler fragment penalty.
    - Avoids hardcoded constants where possible, favoring ratios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap  # How full will the bin be?

        # 1. "Good Fit" Score:  Ideal utilization is around 70-90%.
        utilization_score = np.exp(-((capacity_ratio - 0.8) ** 2) / 0.05)  # Gaussian-like curve, peak at 0.8
        priorities[feasible_mask] += utilization_score

        # 2.  Fragment Penalty: Simple penalty if space is left, but not too harsh if it's a tiny fragment.
        fragment_ratio = remaining_capacity_after_fit / bins_remain_cap[feasible_mask] # Fraction of space wasted.
        priorities[feasible_mask] -= np.clip(fragment_ratio * 0.5, 0, 0.5)  # Max penalty of 0.5, proportional to waste.

        # 3. Adaptive Exploration/Exploitation:  Fewer options -> more explore.  Larger Item -> more exploit.
        num_feasible = np.sum(feasible_mask)
        exploration_factor = min(1.0, 5.0 / (num_feasible + 1e-6)) # Scale exploration to available bins
        exploration_noise = 0.05 * exploration_factor
        priorities += np.random.normal(0, exploration_noise, size=len(priorities))

        exploitation_factor = min(1.0, item) # Scale exploitation to item size.
        priorities[feasible_mask] += capacity_ratio * 0.1 * exploitation_factor

        # 4. Favor placing larger items early
        if item > np.mean(bins_remain_cap) * 0.5 and len(bins_remain_cap) > 10:
              priorities[feasible_mask] += 0.1


    return priorities
```
