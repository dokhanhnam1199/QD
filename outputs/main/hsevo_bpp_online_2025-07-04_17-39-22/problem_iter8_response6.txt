```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, bin utilization, normalized waste, and adaptive noise."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities - 1e9

    # Fit score: exp distance
    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + 1e-9))
    priorities[valid_bins] = fit_score[valid_bins]

    # Bin utilization bonus
    utilization = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += utilization

    # Normalize waste
    waste = bins_remain_cap[valid_bins] - item
    waste_normalized = waste / (bins_remain_cap[valid_bins] + 1e-9)
    priorities[valid_bins] -= waste_normalized

    # Adaptive noise based on number of valid bins
    num_valid_bins = np.sum(valid_bins)
    noise_scale = 0.005 if num_valid_bins > 3 else 0.05 #tune noise scale
    noise = np.random.normal(0, noise_scale, len(priorities))
    priorities += noise

    return priorities
```
