```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling:
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / feasible_bins_remain_cap

        # Core Priority: Capacity Ratio (Higher is better)
        priorities[feasible_mask] = capacity_ratio

        # Fragment Avoidance: Penalize small fragments *relative* to the bin size
        small_fragment_mask = remaining_capacity_after_fit < (bins_remain_cap[feasible_mask] * 0.05) # relative to original bin size not just item size.
        priorities[feasible_mask][small_fragment_mask] *= 0.75  # Reduced penalty

        # Favor bins with space slightly larger than the item, but not too large. Encourages filling bins well.
        optimal_space_mask = (remaining_capacity_after_fit >= (item * 0.1)) & (remaining_capacity_after_fit <= (item * 1.25))
        priorities[feasible_mask][optimal_space_mask] *= 1.2 # bump up priority

        # Bin Balancing: Discourage excessive empty space in all bins. This encourages using bins more evenly and prevents one bin from becoming excessively full while others are near empty
        avg_bin_capacity = np.mean(bins_remain_cap[feasible_mask])
        large_capacity_mask = remaining_capacity_after_fit > (avg_bin_capacity*1.1) # greater than average, penalize
        priorities[feasible_mask][large_capacity_mask] *= 0.8

        # Adaptive Randomness: Adjust noise based on how full the *most* full bin is.
        max_capacity_used = np.max(1 - bins_remain_cap / np.max(bins_remain_cap))
        randomness_scale = 0.01 + (0.04 * max_capacity_used)
        priorities += np.random.normal(0, randomness_scale, size=len(priorities))

        #Adjust exploration/exploitation based on number of feasible solutions
        num_feasible = np.sum(feasible_mask)
        if num_feasible > 5:
            # Apply a slight bonus to bins that are already relatively full.
             priorities[feasible_mask] *= (1 + 0.02 * capacity_ratio) # more exploitation based on current capacity ratio
        else:
            # Increase exploration, esp if the average fill level is low
            avg_fill_level = np.mean(capacity_ratio)
            exploration_boost = 0.03 + (0.07 * (1 - avg_fill_level)) # less average fill --> increase the exploration boost.
            priorities += np.random.normal(0, exploration_boost, size=len(priorities))

    return priorities
```
