```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, waste, adaptive noise based on bin state."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf

    can_fit = ~cannot_fit
    if not np.any(can_fit):
        return priorities

    feasible_bins_remain_cap = bins_remain_cap[can_fit]

    utilization = item / feasible_bins_remain_cap
    waste = feasible_bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = waste / (feasible_bins_remain_cap + 1e-9) # Prevent division by zero

    bin_utilization = (feasible_bins_remain_cap - waste) / (feasible_bins_remain_cap + 1e-9) #bin utilization for available bins only.
    is_used_bonus = (bin_utilization > 0).astype(float) # Bin Utilization bonus

    priorities[can_fit] = 0.6*utilization - 0.4*waste_normalized + 0.2 * is_used_bonus #Weighted sum of utilization and normalized waste

    num_feasible = np.sum(can_fit)
    if num_feasible > 5:
         priorities[can_fit] *= (1 + 0.02 * utilization)

    exploration_rate = 0.01 + 0.03 * (1 - (np.mean(bins_remain_cap[can_fit]) / np.max(bins_remain_cap))) if np.sum(can_fit) > 0 else 0.01
    priorities += np.random.normal(0, exploration_rate, size=len(priorities))

    small_item_size = np.mean(bins_remain_cap[can_fit])/10 if np.any(can_fit) else 0.1
    future_fit_penalty = np.where(waste < small_item_size, -0.1 , 0)
    priorities[can_fit] += future_fit_penalty

    return priorities
```
