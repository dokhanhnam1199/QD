```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on capacity ratio, fragment avoidance, and adaptive noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_mask = bins_remain_cap >= item
    priorities[~feasible_mask] = -np.inf

    if np.sum(feasible_mask) == 0:
        return priorities

    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]
    remaining_capacity_after_fit = feasible_bins_remain_cap - item
    capacity_ratio = item / feasible_bins_remain_cap
    priorities[feasible_mask] = capacity_ratio

    # Fragment avoidance: Discourage small fragments
    small_fragment_mask = remaining_capacity_after_fit < (bins_remain_cap[feasible_mask] * 0.05)
    priorities[feasible_mask][small_fragment_mask] *= 0.75

    # Optimal space: Prioritize bins where the remaining space is suitable.
    optimal_space_mask = (remaining_capacity_after_fit >= (item * 0.1)) & (remaining_capacity_after_fit <= (item * 1.25))
    priorities[feasible_mask][optimal_space_mask] *= 1.2

    # Adaptive exploration: Noise scales with bin utilization.
    max_capacity_used = np.max(1 - bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0
    randomness_scale = 0.01 + (0.04 * max_capacity_used)
    priorities += np.random.normal(0, randomness_scale, size=len(priorities))

    return priorities
```
