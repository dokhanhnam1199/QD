```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority with capacity ratio, remaining space, and item-size scaling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]
    
    priorities[feasible_mask] = capacity_ratio * np.exp(-remaining_capacity_after_fit / (item + 1e-9))

    too_full_mask = feasible_mask & (remaining_capacity_after_fit < 0.1 * bins_remain_cap[feasible_mask])
    priorities[too_full_mask] -= 0.5

    almost_perfect_mask = feasible_mask & (remaining_capacity_after_fit < 1e-6)
    priorities[almost_perfect_mask] += 0.2

    random_scale = 0.01 * item
    priorities += np.random.normal(0, random_scale, size=len(priorities))

    priorities /= (item + 1e-9)
    
    # Bonus for bins that were nearly full before, promoting reuse
    nearly_full_before_mask = feasible_mask & (bins_remain_cap[feasible_mask] < item * 1.1)
    priorities[nearly_full_before_mask] += 0.1

    return priorities
```
