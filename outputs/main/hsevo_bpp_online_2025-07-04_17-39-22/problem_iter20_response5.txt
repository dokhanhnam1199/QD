```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic balancing utilization, fragmentation, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]
    num_feasible = np.sum(feasible_mask)

    if num_feasible > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        capacity_ratio = item / bins_remain_cap.max()

        priorities[feasible_mask] = capacity_ratio**2  # Bin utilization

        # Adaptive exploration
        if num_feasible <= 3:
            exploration_noise_scale = 0.15
        elif num_feasible > 5:
            exploration_noise_scale = 0.01
        else:
            exploration_noise_scale = 0.05
        priorities += np.random.normal(0, exploration_noise_scale, size=len(priorities))

        # Fragmentation penalty
        tiny_fragment_threshold = 0.05 * bins_remain_cap.max()
        tiny_fragment_penalty = 0.5
        tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < tiny_fragment_threshold)
        priorities[feasible_mask][tiny_fragment_mask] *= tiny_fragment_penalty

        # Encourage filling
        nearly_full_threshold = 0.9 * bins_remain_cap.max()
        nearly_full_bonus = 0.1
        nearly_full_mask = (bins_remain_cap >= nearly_full_threshold) & feasible_mask
        priorities[nearly_full_mask] += nearly_full_bonus

        # large item encouragement
        if item > bins_remain_cap.max() * 0.5:
            well_utilized_mask = capacity_ratio > 0.7
            priorities[feasible_mask][well_utilized_mask] *= 1.1


    return priorities
```
