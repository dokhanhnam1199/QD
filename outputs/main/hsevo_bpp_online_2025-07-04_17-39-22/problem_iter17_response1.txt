```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic balancing bin utilization, waste, and adaptive exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]
    capacity_ratio = item / feasible_bins_remain_cap
    bin_utilization_exponent = 2.0
    priorities[feasible_mask] = capacity_ratio**bin_utilization_exponent

    waste = feasible_bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)
    waste_normalized = waste / (feasible_bins_remain_cap + 1e-9)

    priorities[feasible_mask] = 0.7*capacity_ratio - 0.3*waste_normalized # Adjust weights

    num_feasible = np.sum(feasible_mask)
    if num_feasible > 5:
        priorities[feasible_mask] *= (1 + 0.03 * capacity_ratio)

    exploration_rate = 0.01 + 0.03 * (1 - np.mean(bins_remain_cap[feasible_mask]) / np.max(bins_remain_cap)) if np.any(feasible_mask) else 0.01
    priorities += np.random.normal(0, exploration_rate, size=len(priorities))

    small_fragment_threshold_ratio = 0.2
    small_fragment_penalty = 0.3
    small_fragment_mask = waste < (item * small_fragment_threshold_ratio)
    priorities[feasible_mask][small_fragment_mask] *= (1 - small_fragment_penalty)

    item_size_threshold_ratio = 0.5
    large_item_bonus = 0.1
    if item > bins_remain_cap.max() * item_size_threshold_ratio:
        well_utilized_mask = capacity_ratio > 0.7
        priorities[feasible_mask][well_utilized_mask] *= (1 + large_item_bonus)

    return priorities
```
