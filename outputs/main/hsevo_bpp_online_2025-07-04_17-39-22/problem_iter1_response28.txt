```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can accommodate the item closely (minimize wasted space)
    but also penalizes bins that are almost full (to avoid overfilling). It uses a combination of
    remaining capacity and the ratio of item size to remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Priority based on how closely the item fits, and remaining capacity
            # A smaller remaining capacity (after packing) is better.
            remaining_after_pack = cap - item
            # Using a scaled inverse of wasted space
            priorities[i] =  1.0 / (0.0001 + remaining_after_pack) # Avoid division by zero

            # Ratio to prioritize bins where the item fills a significant portion
            fill_ratio = item / cap
            priorities[i] += fill_ratio  #Encourage bins that fill most of the bin

            # A bit of penalty for large bins to prevent packing small items into large bins right away
            priorities[i] -= 0.1 * (cap/np.max(bins_remain_cap))

        else:
            priorities[i] = -np.inf # Item does not fit

    return priorities
```
