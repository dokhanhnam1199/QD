```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for the online bin packing problem that balances bin utilization,
    fragmentation avoidance, and exploration/exploitation with adaptive elements.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap.max() #introduce total bin capacity parameter.

    # 1. Feasibility check: Disqualify bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    num_feasible = np.sum(feasible_mask)

    if num_feasible == 0:
        return priorities # If no feasible bins, early return.

    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]
    remaining_capacity_after_fit = feasible_bins_remain_cap - item

    # 2. Primary Metric: Bin Utilization (Ratio of item size to remaining capacity).
    utilization_ratio = item / feasible_bins_remain_cap
    priorities[feasible_mask] = utilization_ratio**2  # Emphasize higher utilization.

    # 3. Fragmentation Avoidance: Penalize bins that would lead to small remaining fragments.
    fragment_threshold_ratio = 0.2 #Fraction of total bin capacity.
    small_fragment_threshold = bin_capacity * fragment_threshold_ratio #Scale penalty based on total bin capacity.

    small_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < small_fragment_threshold)
    fragment_penalty = 0.5 # Penalty factor
    priorities[feasible_mask][small_fragment_mask] *= (1 - fragment_penalty * (remaining_capacity_after_fit[small_fragment_mask] / small_fragment_threshold))

    # 4. Exploration/Exploitation Balance: Adaptive noise injection based on available choices.
    if num_feasible > 3:  # Exploit when several choices are available.
        priorities[feasible_mask] += 0.05 * utilization_ratio #Favor bins that are already relatively full.
    else:  # Explore more when few choices exist.
        priorities[feasible_mask] += np.random.normal(0, 0.1, size=num_feasible)

    # 5. Large Item Consideration: Give a bonus to well-utilized bins if item is large
    large_item_threshold_ratio = 0.6
    if item > bin_capacity * large_item_threshold_ratio:
         well_utilized_ratio = 0.8
         well_utilized_mask = utilization_ratio > well_utilized_ratio
         priorities[feasible_mask][well_utilized_mask] *= 1.1

    return priorities
```
