```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get negative infinity priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    capacity_ratio = item / bins_remain_cap[feasible_mask]

    # Encourage bins that fit the item well, but penalize almost-full bins more harshly.
    # This is a more refined version of the original logic. We want to avoid creating tiny slivers of space.
    # The exponential penalty is now stronger for very small remaining capacities.  Also, we consider the "fullness" of the bin *before* placing the item.

    fullness_ratio = 1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)) # added to ensure diversity
    priorities[feasible_mask] = capacity_ratio * np.exp(-10 * remaining_capacity_after_fit / (item + 1e-9)) * (1-fullness_ratio) # More agressive penalty

    # Bonus for bins that are already relatively full, but not too full to cause tiny slivers. This encourages reuse.
    # The bonus is scaled by the item size so that smaller items don't overly influence the choice.
    already_full_mask = (bins_remain_cap[feasible_mask] < 0.7 * np.max(bins_remain_cap)) & (bins_remain_cap[feasible_mask] > item)
    priorities[feasible_mask][already_full_mask] += 0.1 * item

    # Add some randomness, but reduce its intensity
    priorities += np.random.normal(0, 0.005, size=len(priorities))

    return priorities
```
