{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit score, used bin bonus, and normalizes waste.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Disallow overfill\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Fit score\n    fit_score = np.exp(-np.abs(bins_remain_cap - item) / item)\n\n    # Used bin bonus\n    is_used_bonus = (bins_remain_cap < 1).astype(float)\n\n    priorities = fit_score + is_used_bonus\n\n    # Normalize waste\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        priorities[fit_mask] = priorities[fit_mask] / bins_remain_cap[fit_mask]\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Calculate priority scores for bins based on remaining capacity and item size.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities - 1e9\n\n    # Normalized waste prioritization + Encourage fuller bins.\n    waste = bins_remain_cap[valid_bins] - item\n    waste_normalized = waste / bins_remain_cap[valid_bins]\n    priorities[valid_bins] = 1 - waste_normalized\n\n    # Boost bins with smaller remaining capacity\n    remaining_after_placement = bins_remain_cap[valid_bins] - item\n    remaining_after_placement = np.clip(remaining_after_placement, a_min=0, a_max=None)\n    priority_boost = np.exp(-remaining_after_placement)\n    priorities[valid_bins] *= priority_boost\n\n    #Add noise\n    noise = np.random.normal(0, 1e-6, len(priorities))\n    priorities += noise\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st heuristic introduces randomness to break ties, while the 20th does not directly address tie-breaking, potentially leading to suboptimal solutions; (2nd best) vs (second worst) 2nd heuristic combines fit score and used bin bonus and normalizes waste, while heuristic 19th focuses on normalized waste and encourages fuller bins. The former could be better as It explicitly encourages re-using partially filled bins; Comparing (1st) vs (2nd), we see the 1st heuristic explicitly penalizes infeasible bins by assigning a very low priority to them. The 2nd heuristic does the same thing, both ensure that the algorithm avoids considering bins that cannot accommodate the item; (3rd) vs (4th), the 3rd heuristic calculates normalized waste and relative fullness without using fixed weights but hardcoded calculation, while the 4th uses weights that may have been optimized. This allows for better weighting between different factors; Comparing (second worst) vs (worst), we see that heuristic 19th includes a clipping function to ensure the remaining capacity after placement is no less than zero, while heuristic 20th does not have this clipping function. Overall:\n\n- The best heuristics incorporate randomness to avoid local optima.\n- Normalizing waste and rewarding fuller bins often lead to better results.\n- The use of an explicit infeasibility mask to avoid considering bins that are not feasible is critical.\n- Optimized weights provide the flexibility to find the best combination of factors.\n- It is important to clip the remaining capacity after placement to be no less than zero to avoid generating error.\n- Penalizing almost-full bins more harshly to avoid creating tiny slivers of space appears beneficial.\n- Scaling penalties and bonuses by item size allows for adaptive behavior.\n- \nOkay, let's redefine \"Current Self-Reflection\" to be more effective for heuristic design, keeping in mind the pitfalls of \"Ineffective Self-Reflection\" and aiming for actionable insights.\n\nHere's a revised approach:\n\n*   **Keywords:** Adaptive strategies, dynamic balance, constraint awareness, robustification.\n\n*   **Advice:** Focus on developing heuristics that *dynamically adapt* their behavior based on the current state of the bin packing problem. Consider adaptive weighting schemes and methods to intelligently switch between exploration and exploitation phases.\n\n*   **Avoid:** Overly simplistic, static approaches based solely on easily interpretable factors. Avoid premature optimization for speed at the expense of solution quality and flexibility. Don't rely *only* on penalizing infeasibility with -inf; seek methods to prevent infeasibility.\n\n*   **Explanation:** Effective heuristics need adaptability and robustness. Move beyond simple greediness and static parameters. Explicitly address constraint handling *before* infeasibility occurs, and allow the heuristic to adjust its strategies based on the problem's progress.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}