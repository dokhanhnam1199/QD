```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap.max() # Assume all bins have the same capacity, and find what it is.

    # Infeasible bin handling: set to negative infinity
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]

    if np.sum(feasible_mask) > 0:
        remaining_capacity_after_fit = feasible_bins_remain_cap - item
        
        # Core heuristic: Normalized Remaining Waste (NRW).  Smaller is better.
        normalized_waste = remaining_capacity_after_fit / bin_capacity
        priorities[feasible_mask] = -normalized_waste # Larger negative value means higher priority (smaller waste)
        
        # Adaptivity: Bin Selection Pressure
        num_feasible = np.sum(feasible_mask)
        
        if num_feasible > 3:
            # Exploitation: Penalize bins with high normalized waste *more*.
            priorities[feasible_mask] -= (normalized_waste**2) # Quadratic penalty for larger waste
        else:
            # Exploration: Add noise to encourage diversity
            priorities += np.random.normal(0, 0.05, size=len(priorities))

        # Edge case handling: Small fragment penalty
        small_fragment_threshold = 0.15 * bin_capacity
        small_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < small_fragment_threshold)
        priorities[feasible_mask][small_fragment_mask] -= 0.1  #Fixed penalty for small fragments.

        # Edge case handling: Near-full bonus
        near_full_threshold = 0.9 * bin_capacity
        near_full_mask = bins_remain_cap[feasible_mask] > item and (bins_remain_cap[feasible_mask] - item) / bin_capacity < 0.1 # Fill bin to at least 90%.
        
        priorities[feasible_mask][near_full_mask] += 0.05 # Slight bonus if bin is almost full

    return priorities
```
