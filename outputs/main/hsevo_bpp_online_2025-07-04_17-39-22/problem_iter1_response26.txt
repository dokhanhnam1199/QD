```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage bins that can fit the item. Near fit gives highest priority
            priorities[i] = (cap - item + 1e-9) / (cap + 1e-9)  # Normalized remaining space after fit

            # Further refine based on fullness of bin
            fullness = 1 - (cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0.0

            #Prefer fuller bins that can still fit the item
            priorities[i] += fullness * 0.5  #Weight this factor somewhat less

        else:
            #Penalty for bins that cannot fit the item
            priorities[i] = -np.inf
    return priorities
```
