{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version focuses on simplicity, adaptability, and balancing exploration/exploitation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get the lowest priority.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n    feasible_bins_remain_cap = bins_remain_cap[feasible_mask]\n\n    num_feasible = np.sum(feasible_mask)\n\n    if num_feasible > 0:\n        # Core heuristic: Normalized remaining capacity *after* placement.  Lower is better.\n        remaining_capacity_after_fit = feasible_bins_remain_cap - item\n        normalized_waste = remaining_capacity_after_fit / bins_remain_cap.max()  # Normalize by max bin size for consistency\n\n        # Assign initial priorities based on normalized waste (invert, smaller waste = higher priority)\n        priorities[feasible_mask] = 1.0 - np.clip(normalized_waste, 0, 1)\n\n        # Adaptive Exploration/Exploitation: Adjust randomness based on the number of options.\n        if num_feasible <= 3: # Increased exploration when few options exist\n            exploration_noise_scale = 0.15 # Higher exploration noise\n        elif num_feasible > 5: # Focus on exploitation when multiple bins are feasible\n            exploration_noise_scale = 0.01\n        else:\n            exploration_noise_scale = 0.05 # medium exploration\n\n        priorities += np.random.normal(0, exploration_noise_scale, size=len(priorities))\n\n        # Edge Case Handling:\n        #   1. Discourage tiny fragments.\n        tiny_fragment_threshold = 0.05 * bins_remain_cap.max() # Dynamic threshold\n        tiny_fragment_penalty = 0.5\n\n        tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < tiny_fragment_threshold)\n        priorities[feasible_mask][tiny_fragment_mask] *= tiny_fragment_penalty  # Apply penalty\n\n        # 2. Encourage filling nearly full bins to completion.\n        nearly_full_threshold = 0.9 * bins_remain_cap.max()\n        nearly_full_bonus = 0.1\n\n        nearly_full_mask = (bins_remain_cap >= nearly_full_threshold) & feasible_mask\n        priorities[nearly_full_mask] += nearly_full_bonus\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering utilization, waste, and adaptive exploration.\n    Combines normalized waste and utilization with exploration based on bin state.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    cannot_fit = item > bins_remain_cap\n    priorities[cannot_fit] = -np.inf\n\n    can_fit = ~cannot_fit\n    if not np.any(can_fit):\n        return priorities\n\n    feasible_bins_remain_cap = bins_remain_cap[can_fit]\n\n    utilization = item / feasible_bins_remain_cap\n    waste = feasible_bins_remain_cap - item\n    waste = np.clip(waste, a_min=0, a_max=None)\n    waste_normalized = waste / (feasible_bins_remain_cap + 1e-9)  # Prevent division by zero\n\n    bin_utilization = (feasible_bins_remain_cap - waste) / (bins_remain_cap[can_fit] + item)  # corrected bin util calculation\n\n    priorities[can_fit] = 0.7 * utilization - 0.3 * waste_normalized  # Adjusted weights\n\n    num_feasible = np.sum(can_fit)\n    if num_feasible > 5:\n        priorities[can_fit] *= (1 + 0.02 * utilization) # Favor bins that are already relatively full\n\n    exploration_rate = 0.01 + 0.03 * (1 - (np.mean(bins_remain_cap[can_fit]) / np.max(bins_remain_cap))) if np.sum(can_fit) > 0 else 0.01\n    priorities += np.random.normal(0, exploration_rate, size=len(priorities))\n\n    small_item_size = np.mean(bins_remain_cap[can_fit]) / 10 if np.any(can_fit) else 0.1\n    future_fit_penalty = np.where(waste < small_item_size, -0.1, 0)\n    priorities[can_fit] += future_fit_penalty\n\n    # NEW:  Penalty for placing large items in relatively empty bins\n    item_size_threshold_ratio = 0.5\n    large_item_penalty = 0.2\n    bin_size = bins_remain_cap + item  # Approximate original bin size.\n    large_item_mask = item / bin_size[can_fit] > item_size_threshold_ratio\n    bin_utilization_threshold = 0.75\n    empty_bin_mask = bin_utilization < (1 - bin_utilization_threshold) # consider bins less than (1 - bin_utilization_threshold) utilized as relatively empty\n    priorities[can_fit][large_item_mask & empty_bin_mask] *= (1 - large_item_penalty) # Penalize placing large items in almost empty bins.\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of capacity ratio, fragment avoidance, exploration noise, and bonuses/penalties based on item size and bin fullness. The worst heuristic prioritizes utilization and waste with adaptive exploration and penalties for small items and large items in empty bins.\n\nComparing (2nd best) vs (second worst), we see that the second best employs similar logic to the best, but with different coefficients, and a more detailed breakdown of parameters. The second worst combines waste normalization, bin utilization, and adaptive exploration.\n\nComparing (1st) vs (2nd), we see that (1st) uses more hyperparameter tuning with very specific values which may indicate it was more tuned to the dataset. (2nd) has cleaner documentation.\nComparing (3rd) vs (4th), we see that (3rd) uses hardcoded parameters, while (4th) introduces dynamic calculations for parameters like `randomness_scale` based on `max_capacity_used` and `exploration_boost` based on `avg_fill_level` - implying adaptivity is better.\nComparing (second worst) vs (worst), we see that (20th) has a penalty for placing large items in relatively empty bins, an attempt to avoid a specific undesirable outcome whereas (14th) lacks this specific edge case handling, suggesting importance of edge case handling.\nOverall: the better heuristics use more nuanced and adaptive methods for exploration/exploitation and edge case handling (fragmentation, bin fullness, large items) and well-tuned hyperparameters, while the worse heuristics rely on simpler calculations and fixed parameters.\n- \nOkay, I understand. We need to redefine \"current self-reflection\" to be more effective for designing better heuristics, while explicitly avoiding the pitfalls of \"ineffective self-reflection.\" Here's a redefined approach:\n\n*   **Keywords:** Adaptive, Problem-State, Balance, Simplicity.\n*   **Advice:** Focus on heuristics that adapt to the current problem state, finding the right balance between exploration and exploitation. Start with a simple, interpretable core and add complexity judiciously.\n*   **Avoid:** Overly complex formulas, hardcoded values, and ignoring edge cases. Don't neglect clear interpretability in favor of minor improvements.\n*   **Explanation:** Effective heuristics need to be agile and responsive to the challenges of the problem. Keep it understandable and tunable. Focus on meaningful factors, scaling parameters, and balancing randomness and greed.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}