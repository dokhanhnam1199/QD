```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness, waste, and adaptive bin selection with noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf

    can_fit = ~cannot_fit
    remaining_capacities_can_fit = bins_remain_cap[can_fit]

    if len(remaining_capacities_can_fit) > 0:
        waste = remaining_capacities_can_fit - item
        waste_normalized = waste / remaining_capacities_can_fit
        relative_fullness = 1 - remaining_capacities_can_fit / np.max(bins_remain_cap)

        priorities[can_fit] = -waste_normalized + relative_fullness * 0.5 # Adjusted weight
        
        #Adaptive reuse bonus - encourage packing into bins which are already somewhat full
        already_full_mask = (remaining_capacities_can_fit < 0.7 * np.max(bins_remain_cap)) & (remaining_capacities_can_fit > item)
        priorities[can_fit][already_full_mask] += 0.1 * item * relative_fullness[already_full_mask]

        # Boost bins with smaller remaining capacity after placement, scale remaining capacity.
        remaining_after_placement = remaining_capacities_can_fit - item
        remaining_after_placement = np.clip(remaining_after_placement, a_min=0, a_max=None)
        priority_boost = np.exp(-5 * remaining_after_placement)
        priorities[can_fit] += priority_boost * 0.2

    # Add noise
    noise = np.random.normal(0, 1e-6, len(priorities))
    priorities += noise

    return priorities
```
