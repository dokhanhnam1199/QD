```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item

    # If no bin can accommodate the item, return a low priority for all bins.
    if not np.any(valid_bins):
        return priorities - 1e9  # Very low priority for all

    # Calculate fill ratios for valid bins: (capacity - item_size) / original capacity
    # However, we don't have original capacity readily available. So, we use this approximation.
    fill_ratios = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]

    # Apply Newton's inverse square law-inspired priority: Priority increases as fill ratio increases, but decreases inversely proportional to the remaining space.
    priorities[valid_bins] = fill_ratios / (bins_remain_cap[valid_bins] + 1e-6) # Small constant to avoid division by zero

    # Boosting bins with smaller remaining capacity after placing item.
    # Encourage filling up bins more completely.

    remaining_after_placement = bins_remain_cap[valid_bins] - item
    # Ensure that the bin is not overfilled
    remaining_after_placement = np.clip(remaining_after_placement, a_min=0, a_max=None)
    priority_boost = np.exp(-remaining_after_placement)

    priorities[valid_bins] *= priority_boost

    #Add some noise to the priority score to handle degeneracy (Equal priority scores). This will break ties in random.
    noise = np.random.normal(0, 1e-6, len(priorities))
    priorities += noise

    return priorities
```
