```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, waste, and adaptive noise.
    Balances exploration/exploitation based on feasible bin count.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf

    can_fit = ~cannot_fit
    feasible_bins_remain_cap = bins_remain_cap[can_fit]

    if np.sum(can_fit) == 0:
        return priorities

    utilization = item / feasible_bins_remain_cap
    waste = feasible_bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None) # ensure waste is non-negative
    waste_normalized = waste / feasible_bins_remain_cap

    priorities[can_fit] = utilization - waste_normalized

    num_feasible = np.sum(can_fit)
    if num_feasible > 5:
        priorities[can_fit] *= (1 + 0.02 * utilization)  # Exploit

    exploration_rate = 0.01 + 0.03 * (1 - (np.mean(bins_remain_cap[can_fit]) / np.max(bins_remain_cap))) if np.sum(can_fit) > 0 else 0.01
    priorities += np.random.normal(0, exploration_rate, size=len(priorities))

    return priorities
```
