```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired:
    # Give high priority to bins that can fit the item with least wasted space
    # or the bins that are almost full.

    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap - item
        waste[~valid_bins] = np.inf # Ignore invalid bins

        min_waste = np.min(waste)
        best_bins = waste == min_waste

        priorities[best_bins] += 100  # High priority for bins with min waste

        # Increase priority based on how full bin would be.
        fill_ratio = item / bins_remain_cap
        priorities[valid_bins] += (1 - fill_ratio[valid_bins]) * 50 # small waste -> high priority

    # If the item doesn't fit into any bin, try to put into the least full bin:
    else:
        priorities = bins_remain_cap / np.max(bins_remain_cap) * -10

    return priorities
```
