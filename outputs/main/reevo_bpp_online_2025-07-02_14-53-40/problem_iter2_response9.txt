```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Can the item fit in the bin?
    can_fit = bins_remain_cap >= item

    # Prioritize bins that can fit the item
    if not np.any(can_fit):
      # If no bin can fit, prioritize the bin with max remaining cap
      priorities = bins_remain_cap
      return priorities

    priorities[can_fit] = 1.0

    # Tighter fit gets higher priority (lower remaining space)
    remaining_space = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1.0 / (remaining_space + 1e-6) # Adding small constant to avoid division by zero


    # Consider current occupancy: give higher priority to bins that are already partially full
    # but not too full (avoid almost full bins)
    already_occupied = (bins_remain_cap < 0.95) & (bins_remain_cap > item) #being less than 0.95 avoids putting items in almost full bins
    priorities[already_occupied] *= 2.0 #boost existing priorities

    # If it doesn't fit, assign negative priority so it doesn't get chosen unless no bin can fit it
    priorities[~can_fit] = -100.0

    return priorities
```
