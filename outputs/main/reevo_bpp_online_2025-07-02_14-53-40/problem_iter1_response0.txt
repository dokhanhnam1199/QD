```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate Fit: High priority for bins where the item fits exactly.
    immediate_fit = np.isclose(bins_remain_cap, item)
    priorities[immediate_fit] = 1000  # Very high priority
    
    # Best Fit: Higher priority for bins where the remaining capacity after placing the item is smallest, but still positive.
    fits = bins_remain_cap >= item
    if np.any(fits):
        remaining_after_fit = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(remaining_after_fit)
        #Find index of the best fit bin in original bins_remain_cap array
        original_best_fit_idx = np.where(fits)[0][best_fit_idx]
        priorities[original_best_fit_idx] = 500 + (1 / (remaining_after_fit[best_fit_idx] + 0.00001)) #Avoid division by zero
    
    # Penalize bins where item doesn't fit.
    priorities[bins_remain_cap < item] = -1000 # Very low priority

    #Remaining space affects priority. More remaining space = lower priority, so we don't fill up one bin and leave other nearly empty
    #Only apply if item fits, if not, the bins will have already been penalised by above rule.
    fits = bins_remain_cap >= item
    if np.any(fits):
        priorities[fits] += (bins_remain_cap[fits] - item) * -1 #Add negative remaining so larger remainder results in more negative adjustment to priority (lower)

    return priorities
```
