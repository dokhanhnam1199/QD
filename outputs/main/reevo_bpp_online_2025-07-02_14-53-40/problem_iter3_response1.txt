```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assuming bin capacity is 1. Can be parameterized

    # Infeasibility penalty
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Huge penalty for infeasibility

    # Tight-fit prioritization (inverse remaining capacity), only if feasible
    feasible = bins_remain_cap >= item
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        inverse_remaining = 1 / (remaining_capacity + 1e-6)  # Avoid division by zero
        priorities[feasible] += inverse_remaining

        # Occupancy awareness: Favor bins that are already relatively full
        occupancy = (bin_capacity - remaining_capacity) / bin_capacity
        priorities[feasible] += occupancy * 100 #Scale occupancy boost

        # Normalize waste relative to item size and bin capacity
        waste = remaining_capacity - item
        normalized_waste = waste / (item + bin_capacity)
        priorities[feasible] -= normalized_waste * 50 # Scale waste penalty.  Subtract waste


    # Dynamic penalty adjustment (example: reduce penalty early on)
    # packing_stage = current_item_index / total_items  # Assuming access to this info
    # if packing_stage < 0.2:
    #     priorities[infeasible] *= 0.1  # Reduce infeasibility penalty early

    return priorities
```
