```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired approach:
    # Prioritize bins that can accommodate the item and have the least remaining capacity *after* placing the item
    # to simulate filling them up quickly. Bins that cannot fit get a -inf priority.
    remaining_capacities_after_insertion = bins_remain_cap - item
    cannot_fit = remaining_capacities_after_insertion < 0
    priorities = -remaining_capacities_after_insertion
    priorities[cannot_fit] = -np.inf


    # Add a small bonus to bins that are close to being full even before adding the item
    # This encourages using bins that are already somewhat filled
    almost_full_bonus = np.where(bins_remain_cap > 0, np.exp(-bins_remain_cap * 10), 0) # sigmoid-like bonus. Increased the impact of remaining cap on bonus
    priorities += almost_full_bonus

    # Add a tiny noise, it helps with exploration when all priorities are same
    noise = np.random.normal(0, 0.0001, size=bins_remain_cap.shape)
    priorities += noise

    return priorities
```
