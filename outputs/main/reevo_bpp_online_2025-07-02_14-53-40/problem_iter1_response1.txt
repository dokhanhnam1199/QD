```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit Decreasing heuristic adaptation: prioritize bins that can accommodate the item with minimal waste
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.0001) # Avoid division by zero

    # Prioritize bins with higher remaining capacity to avoid creating many nearly-full bins early on.
    # Only applied to bins which the item can fit.

    priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap) #Normalize the remaining capacity

    # Give a slight bonus for bins that are almost full after adding the item, promoting efficiency
    almost_full_mask = (waste > 0) & (waste < 0.1 * np.max(bins_remain_cap)) & fit_mask
    priorities[almost_full_mask] += 2

    # Penalize bins where the item doesn't fit (set to a very low priority)
    priorities[bins_remain_cap < item] = -1e9 # Effectively blocks placement.  Very important for correctness.

    return priorities
```
