{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing inspired: Prefer bins that can accommodate the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1  # Give a base priority for being able to fit.\n\n    # Give higher priority to bins with less remaining capacity after placing the item\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[remaining_after_fit < 0] = np.inf # Ignore bins that cant fit.\n\n    priorities[can_fit] += 1.0 / (1e-6 + remaining_after_fit[can_fit]) # Prioritize lower remaining after fit\n\n    # Prefer bins that are not too full\n    priorities += np.clip(bins_remain_cap / np.max(bins_remain_cap), 0, 1)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and leaves the least amount of wasted space\n    fit_mask = remaining_after_add >= 0\n    if np.any(fit_mask):\n        priorities[fit_mask] = 1 / (remaining_after_add[fit_mask] + 1e-6)  # Avoid division by zero. The smaller the remaining capacity, the higher the priority.\n\n        # Boost bins that are nearly full after adding the item, encouraging full packing.\n        nearly_full_mask = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)  #Bins with capacity less than 0.1 after addition\n        priorities[nearly_full_mask] += 10 #Boost\n\n    # Penalize bins where item doesn't fit by setting priority to -inf. We shouldn't consider these bins.\n    priorities[~fit_mask] = -np.inf\n    \n    #Handle bins that exactly fit the item\n    exact_fit_mask = remaining_after_add == 0\n    priorities[exact_fit_mask] = np.inf #Highest priority\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits and nearly full bins; penalize infeasible bins; use a better waste minimization function.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}