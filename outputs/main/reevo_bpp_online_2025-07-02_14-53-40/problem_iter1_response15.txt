```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item.

            # First Fit Decreasing (FFD) inspired: prioritize bins with smallest remaining capacity that can still fit the item.
            # This tries to fill bins as much as possible before opening new ones.
            priorities[i] = 1.0 / (cap + 1e-9) #Avoid division by zero and the lowest remaining capacity has higher priority
            # Alternatively, prioritize bins where the item fills a significant portion.

            fill_ratio = item / cap
            priorities[i] *= (fill_ratio**2) #emphasize higher filling ratios

            # Bonus for bins almost full (but can still take the item) to reduce fragmentation
            if (cap - item) < 0.1:  # Tune threshold 0.1
                priorities[i] *= 2 #tune bonus coefficient
        else:
            # Give negative priority to bins that can't fit the item.
            priorities[i] = -1e9 #very low priority.

    return priorities
```
