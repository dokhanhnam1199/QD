{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nCombine tight-fit prioritization (inverse remaining capacity) with occupancy awareness. Heavily penalize infeasibility. Normalize waste relative to item size and bin capacity. Dynamically adjust penalties based on packing stage.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Immediate Fit: High priority for bins where the item fits exactly.\n    immediate_fit = np.isclose(bins_remain_cap, item)\n    priorities[immediate_fit] = 1000  # Very high priority\n    \n    # Best Fit: Higher priority for bins where the remaining capacity after placing the item is smallest, but still positive.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        remaining_after_fit = bins_remain_cap[fits] - item\n        best_fit_idx = np.argmin(remaining_after_fit)\n        #Find index of the best fit bin in original bins_remain_cap array\n        original_best_fit_idx = np.where(fits)[0][best_fit_idx]\n        priorities[original_best_fit_idx] = 500 + (1 / (remaining_after_fit[best_fit_idx] + 0.00001)) #Avoid division by zero\n    \n    # Penalize bins where item doesn't fit.\n    priorities[bins_remain_cap < item] = -1000 # Very low priority\n\n    #Remaining space affects priority. More remaining space = lower priority, so we don't fill up one bin and leave other nearly empty\n    #Only apply if item fits, if not, the bins will have already been penalised by above rule.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        priorities[fits] += (bins_remain_cap[fits] - item) * -1 #Add negative remaining so larger remainder results in more negative adjustment to priority (lower)\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}