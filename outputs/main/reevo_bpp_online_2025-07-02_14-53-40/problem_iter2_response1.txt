```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Smaller remaining capacity gets higher priority if feasible
    remaining_capacity_priority = bins_remain_cap[feasible_bins]
    
    # 3. Try to fill up bins which are already not empty
    non_empty_bins = bins_remain_cap < 1.0 #assuming bin capacity is 1.0
    
    # 4. Combination Strategy:
    priorities[feasible_bins] = 1/(remaining_capacity_priority + 1e-6) # avoid division by zero
    
    #Boost priority of bins which are already not empty
    priorities[non_empty_bins] = priorities[non_empty_bins] * 2

    # Perfect Fit Bonus
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 10  # Significantly boost priority for perfect fits

    # Near Fit Bonus (but not too small)
    near_fit = (bins_remain_cap - item) <= 0.1  # within 10%
    near_fit = near_fit & (bins_remain_cap > item) #only when fits
    priorities[near_fit] += 5  # Moderate boost

    #Penalty for almost empty bins if item fits
    almost_empty = (bins_remain_cap > item) & (bins_remain_cap > 0.9) #Bins that are almost empty
    priorities[almost_empty] -= 1

    return priorities
```
