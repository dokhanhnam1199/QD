```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Prefer bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] += 1

    # Rule 2: Among valid bins, prefer bins with less remaining capacity after packing.
    remaining_after_pack = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1 / (remaining_after_pack + 0.0001) # Adding a small constant to avoid division by zero.

    # Rule 3: Discourage bins that are too full (high item/capacity ratio).
    ratios = item / bins_remain_cap
    priorities -= 2 * ratios # Weighing this higher than rule 1 to discourage very small bins.
    
    # Rule 4: Favor bins that are close to being half-full or 3/4 full when the item is added, because such bins
    # are likely to be good candidates to add another item of similar size.
    expected_capacity = bins_remain_cap - item
    half_full_diff = np.abs(expected_capacity - bins_remain_cap / 2)
    three_quarter_full_diff = np.abs(expected_capacity - bins_remain_cap * 0.25)

    priorities -= half_full_diff / bins_remain_cap
    priorities -= three_quarter_full_diff / bins_remain_cap

    return priorities
```
