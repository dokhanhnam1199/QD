```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority for perfect fits
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = 10000.0

    # Consider bins where the item fits
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        # Prioritize bins with minimal waste, normalized by item size
        priorities[fits] = item / (waste + 0.0001)  # Avoid division by zero
        
        # Very high priority for near-perfect fits
        near_perfect = np.isclose(waste, 0, atol=0.01)
        priorities[fits][near_perfect] = 5000.0


    # Large negative priority for bins where the item doesn't fit
    priorities[~fits] = -1000.0

    return priorities
```
