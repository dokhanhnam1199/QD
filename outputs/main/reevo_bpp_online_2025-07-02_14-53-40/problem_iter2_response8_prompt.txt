{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit-Decreasing inspired: prefer bins that can accommodate the item with minimal wasted space.\n    # But, modified to handle online nature (can't pre-sort).\n\n    # Give high priority to bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1\n\n    # Prioritize bins where remaining space after packing the item is small but not too small (avoid tiny wasted space)\n    remaining_space = bins_remain_cap - item\n    valid_remaining = (remaining_space >= 0.01) & (remaining_space <= 0.2)  # Avoid near-full and too empty bins. Adjust thresholds as needed.\n    priorities[can_fit & valid_remaining] += 2 # higher than basic fit\n\n    # Penalize bins with very little space left\n    near_full = (bins_remain_cap > item) & (remaining_space < 0.01)\n    priorities[near_full] -= 0.5 # Slightly penalize using these\n\n    # Severely Penalize bins that are already full. Should be redundant given first filter but ensures it.\n    priorities[bins_remain_cap < item] = -1000 # Extreme negative penalty if the item won't fit.\n\n    # Encourage filling bins that are somewhat empty, but not completely empty.\n    # This helps balance utilization across bins.\n    medium_full = (bins_remain_cap > 0.3) & (bins_remain_cap <= 0.7)  # adjust based on the bin size\n    priorities[medium_full] += 0.7\n\n    # If no bin can fit, try to find the least incompatible one (least negative score)\n    if np.all(bins_remain_cap < item):\n        priorities = -np.abs(bins_remain_cap - item) # Prefer smallest difference\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and leaves the least amount of wasted space\n    fit_mask = remaining_after_add >= 0\n    if np.any(fit_mask):\n        priorities[fit_mask] = 1 / (remaining_after_add[fit_mask] + 1e-6)  # Avoid division by zero. The smaller the remaining capacity, the higher the priority.\n\n        # Boost bins that are nearly full after adding the item, encouraging full packing.\n        nearly_full_mask = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)  #Bins with capacity less than 0.1 after addition\n        priorities[nearly_full_mask] += 10 #Boost\n\n    # Penalize bins where item doesn't fit by setting priority to -inf. We shouldn't consider these bins.\n    priorities[~fit_mask] = -np.inf\n    \n    #Handle bins that exactly fit the item\n    exact_fit_mask = remaining_after_add == 0\n    priorities[exact_fit_mask] = np.inf #Highest priority\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits (using inverse remaining capacity), reward nearly full bins, and penalize infeasible bins strongly.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}