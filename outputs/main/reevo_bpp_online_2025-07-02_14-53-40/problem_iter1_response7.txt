```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority if the item fits perfectly (or nearly perfectly)
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Arbitrarily high value

    # High priority if item fits and fills a good portion of bin
    fits = bins_remain_cap >= item
    fill_ratio = item / bins_remain_cap
    priorities[fits] = fill_ratio[fits] * 500 # Scale to control its effect
    
    # Prioritize bins that are nearly full if item doesn't perfectly fit,
    # avoid creating too many almost empty bins
    near_full = (bins_remain_cap > item) & (bins_remain_cap < 2*item) #Avoid filling bins with just a small remaining capacity that's not useful

    priorities[near_full] += 200 - 50*(bins_remain_cap[near_full]/item) #Higher priority for lower remain cap
        
    # Penalize bins that are too big (avoid fragmenting)
    too_big = (bins_remain_cap > item*2) & fits #Added too_big
    priorities[too_big] -= (bins_remain_cap[too_big]-item) *0.1 # Penalty proportional to wasted space

    # Give negative priority to bins where the item doesn't fit.
    priorities[bins_remain_cap < item] = -100  # Very Low priority

    return priorities
```
