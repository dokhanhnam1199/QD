```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the wasted space if the item is placed in the bin
            wasted_space = cap - item
            
            # Give a higher priority to bins where the wasted space is smaller
            # and the remaining capacity is larger. This encourages filling bins
            # as much as possible while leaving bigger spaces for future items.
            
            # Handle the case where cap is 0 to avoid division by zero
            if cap > 0:
                priorities[i] = (1 / (wasted_space + 1e-6)) * cap
            else:
                priorities[i] = -np.inf  # Very low priority if capacity is 0
        else:
            priorities[i] = -np.inf  # Negative infinity for bins that can't fit the item
    return priorities
```
