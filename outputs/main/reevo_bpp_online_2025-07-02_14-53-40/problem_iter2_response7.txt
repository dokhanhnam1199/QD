```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Perfect Fit: Highest Priority
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000

    # 2. Wasted Space Minimization: Prefer bins that minimize wasted space after placing the item.
    can_fit = bins_remain_cap >= item
    remaining_space = bins_remain_cap - item
    
    #A: Moderate wasted space: High Priority
    moderate_waste = (remaining_space > 0.05) & (remaining_space < 0.3) # Adjust thresholds based on bin size characteristics.
    priorities[can_fit & moderate_waste] += 500 - 100 * remaining_space[can_fit & moderate_waste] #Decreasing priority based on remaining space
    
    #B: Small wasted space: Medium Priority
    small_waste = (remaining_space >= 0.001) & (remaining_space <= 0.05)
    priorities[can_fit & small_waste] += 400 #Slightly lower than moderate waste to give preference for more optimal fit.

    # 3. Avoid Fragmentation: Penalize bins that leave very small remaining space.
    near_full = (bins_remain_cap > item) & (remaining_space < 0.001) # If remaining capacity is near zero
    priorities[near_full] -= 750  # High penalty - significant deterrent

    # 4. Balance Bin Utilization: Encourage filling bins that are not too full and not too empty.
    medium_full = (bins_remain_cap > 0.4) & (bins_remain_cap <= 0.75)  # Adjust thresholds based on the bin size and item sizes
    priorities[medium_full] += 300

    # 5. Penalize Large Wasted Space: Avoid using bins that will result in significant wasted space
    large_waste = (remaining_space > 0.3) & can_fit
    priorities[large_waste] -= 50 * remaining_space[large_waste] #Linear penalty.

    # 6. Absolute Infeasibility: Ensure item DOES NOT go into bins that cannot accommodate it.
    priorities[bins_remain_cap < item] = -10000 # Very large negative number.
    
    # 7. Desperation Move: If no bin can fit the item, put it in the bin with the least negative impact.
    if np.all(bins_remain_cap < item):
        priorities = -np.abs(bins_remain_cap - item)  # Prioritize bins closest in size, but still smaller.
        priorities += 1 #Small positive bias so that we don't end up with priority of 0

    return priorities
```
