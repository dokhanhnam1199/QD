```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign -inf to bins that cannot accommodate the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Prioritize bins with smallest remaining capacity *after* placing the item
    # Only consider feasible bins
    feasible_mask = ~infeasible_mask
    remaining_after_fit = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -np.abs(remaining_after_fit) # Smaller remaining capacity = higher priority
    
    # 3. Fill Rate: Also consider how much of the bin's original capacity will be used. This biases towards fuller bins
    fill_rate = item / (bins_remain_cap[feasible_mask] + item) if np.any(feasible_mask) else np.array([])  # Avoid div by zero. Add small constant if needed.
    if np.any(feasible_mask):
        priorities[feasible_mask] += fill_rate * 0.5  # Scale the fill rate (arbitrary value)

    #4. Avoid waste: if an item can fit perfectly, prioritise this bin highly.

    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = np.inf

    return priorities
```
