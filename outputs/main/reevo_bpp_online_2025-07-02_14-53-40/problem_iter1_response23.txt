```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing variant.
            # Favor bins that can accommodate the item with smallest remaining capacity.
            remaining = cap - item
            priorities[i] = 1 / (remaining + 0.00001)  # Avoid division by zero

            # # Alternative heuristic - Balance packing between bins to reduce bin utilization
            # # Favor bins that can accommodate item without making bin near full.
            # remaining = cap - item
            # priorities[i] = cap # Favor bigger bins
        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
    return priorities
```
