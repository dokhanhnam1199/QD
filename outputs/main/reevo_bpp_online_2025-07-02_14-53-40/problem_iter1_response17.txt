```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = (cap - item) / np.sum(bins_remain_cap - item, where=bins_remain_cap >= item) if np.any(bins_remain_cap >= item) else 1e-6  # Prioritize bins that fit item well, normalized by total remaining space

            priorities[i] += 1/(1 + (item/cap -0.5)**2) # Prioritize if the item fills the bin close to half

            if cap == item:
                priorities[i] += 1.0  # Perfect fit bonus
            elif cap > item * 1.2:
                priorities[i] -= 0.2 # Penalize if item is too small compared to bin
        else:
            priorities[i] = -1e9  # Very low priority for bins that don't fit

    return priorities
```
