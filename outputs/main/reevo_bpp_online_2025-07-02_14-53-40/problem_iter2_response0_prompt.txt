{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1\n\n    # Give higher priority to bins with tighter fit, but not too tight\n    fit_ratios = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_ratios[can_fit] = item / bins_remain_cap[can_fit]\n\n    # Boost the priority based on fit ratio, but penalize bins that will have very small remain cap\n    small_cap = bins_remain_cap - item < 0.1  # if less than 0.1 capacity after packing, penalize\n    fit_boost = (fit_ratios * (1-small_cap))[can_fit]  #only compute values if the items fits in the can. Also multiply with 1 - small_cap, so as to penalise packing in almost full bins\n\n    priorities[can_fit] += fit_boost\n\n    #If it doesn't fit, assign negative priority so it doesn't get chosen unless no bin can fit it\n    priorities[~can_fit] = -100 #large negative number\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspired approach:\n    # Prioritize bins that can accommodate the item and have the least remaining capacity *after* placing the item\n    # to simulate filling them up quickly.  Bins that cannot fit get a -inf priority.\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            priorities[i] = - (cap - item) # Lower remaining capacity after insertion -> higher priority\n        else:\n            priorities[i] = -np.inf\n\n    # Add a small bonus to bins that are close to being full even before adding the item\n    # This encourages using bins that are already somewhat filled\n    almost_full_bonus = np.where(bins_remain_cap > 0, np.exp(-bins_remain_cap), 0) # sigmoid-like bonus\n    priorities += almost_full_bonus\n\n    #Add a tiny noise, it helps with exploration when all priorities are same\n    noise = np.random.normal(0, 0.0001, size=bins_remain_cap.shape)\n    priorities += noise\n\n    return priorities\n\n[Reflection]\nPrioritize bins by post-insertion remaining capacity. Add bonuses for almost-full bins and exploration noise.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}