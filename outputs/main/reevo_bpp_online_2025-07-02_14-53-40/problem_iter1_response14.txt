```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize impossibly large number for bins that can't hold item
    priorities[bins_remain_cap < item] = -np.inf

    # Define some helper variables
    almost_full_threshold = 0.95  # Bins filled beyond this are very valuable

    # Calculate the fill ratio after placing the item in the bin.
    fill_ratios = (bins_remain_cap - item) / np.max(bins_remain_cap)

    # Prioritize bins that the item can fit in
    can_fit = bins_remain_cap >= item

    # Prioritize based on remaining capacity after insertion
    priorities[can_fit] = (bins_remain_cap[can_fit] - item)

    # If a bin is almost full after insertion, strongly favor it.
    almost_full_bins = (fill_ratios > almost_full_threshold) & can_fit
    priorities[almost_full_bins] += 1000  # Huge bonus for almost full

    # Add a bonus if the item fits perfectly
    perfect_fit_bins = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit_bins] += 500

    # Avoid bins that will become almost empty after insertion
    almost_empty_threshold = 0.1
    almost_empty_bins = (fill_ratios < almost_empty_threshold) & can_fit
    priorities[almost_empty_bins] -= 200

    return priorities
```
