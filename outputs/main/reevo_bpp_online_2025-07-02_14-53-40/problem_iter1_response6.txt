```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item fits.
    fits = bins_remain_cap >= item
    priorities[fits] += 1

    # Heuristic 2: Prefer bins with less remaining capacity (First-Fit Decreasing variant). Closer to full is better, but only when the item fits
    remaining_percentage = (bins_remain_cap - item) / np.max(bins_remain_cap)  # Normalize remaining capacity

    priorities[fits] += (1 - remaining_percentage[fits])

    # Heuristic 3: Give a larger priority boost for bins that will be filled almost exactly
    close_to_full = np.abs(bins_remain_cap - item) < 0.1  # Small threshold

    priorities[close_to_full] += 2 # higher weightage

    #Heuristic 4: Penalize bins that lead to significant remaining capacity without fitting
    doesnt_fit = bins_remain_cap < item
    priorities[doesnt_fit] -= 0.5 * (item - bins_remain_cap[doesnt_fit]) # Penalize by wasted space
    
    #Heuristic 5: Moderate preference to bins with capacity close to the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[fits] += np.exp(-capacity_diff[fits]) / 2  # Gaussian-like boost for near matches when it fits

    return priorities
```
