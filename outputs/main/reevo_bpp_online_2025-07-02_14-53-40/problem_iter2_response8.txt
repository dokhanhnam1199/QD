```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits and leaves the least amount of wasted space
    fit_mask = remaining_after_add >= 0
    if np.any(fit_mask):
        # Prioritize tight fits using inverse remaining capacity, adding a small constant to avoid division by zero.
        priorities[fit_mask] = 1 / (remaining_after_add[fit_mask] + 1e-9)

        # Reward bins that are nearly full after adding the item, encouraging full packing.
        nearly_full_mask = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)  # Adjust threshold as needed
        priorities[nearly_full_mask] += 10

    # Penalize bins where item doesn't fit by setting priority to -inf. We shouldn't consider these bins.
    priorities[~fit_mask] = -np.inf
    
    # Handle bins that exactly fit the item, giving them the highest priority.
    exact_fit_mask = remaining_after_add == 0
    priorities[exact_fit_mask] = np.inf

    return priorities
```
