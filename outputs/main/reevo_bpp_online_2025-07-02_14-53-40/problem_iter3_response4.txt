```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap.max() # Assuming all bins have the same capacity

    # 1. Infeasibility Penalty: Heavily penalize bins where the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # Huge penalty

    # 2. Tight-Fit Prioritization:
    #   - Inverse of remaining capacity after packing.
    #   - Normalized by item size and bin capacity to make it relative.
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        remaining_capacity = bins_remain_cap[feasible_bins] - item
        normalized_waste = remaining_capacity / (item + 1e-6)  # Avoid division by zero
        tight_fit_priority = 1 / (normalized_waste + 1e-6)   # Avoid division by zero

        # Incorporate remaining bin capacity into tight-fit score
        occupancy_ratio = (bin_capacity - bins_remain_cap[feasible_bins]) / bin_capacity
        #Weight the tight-fit priority by how full the bin is to favor those that are more full.
        weighted_tight_fit = tight_fit_priority * (1 + occupancy_ratio)

        priorities[feasible_bins] = weighted_tight_fit

        #Perfect fit handling. This should have highest priority
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] = 1e9 #Maximum priority

    # 3. Occupancy Awareness: Encourage filling partially filled bins.
    # This is already incorporated in "weighted_tight_fit"

    # 4. Dynamic Penalty Adjustment (Simplified - based on average fill level):
    #   - Could be extended to consider the stage of packing.
    average_fill = (bin_capacity - np.mean(bins_remain_cap)) / bin_capacity
    if average_fill > 0.75: # Penalize when bins are relatively full to avoid over-packing.
        priorities[feasible_bins] *= 0.5

    return priorities
```
