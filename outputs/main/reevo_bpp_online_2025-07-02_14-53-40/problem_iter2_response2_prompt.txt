{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Initialize impossibly large number for bins that can't hold item\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Define some helper variables\n    almost_full_threshold = 0.95  # Bins filled beyond this are very valuable\n\n    # Calculate the fill ratio after placing the item in the bin.\n    fill_ratios = (bins_remain_cap - item) / np.max(bins_remain_cap)\n\n    # Prioritize bins that the item can fit in\n    can_fit = bins_remain_cap >= item\n\n    # Prioritize based on remaining capacity after insertion\n    priorities[can_fit] = (bins_remain_cap[can_fit] - item)\n\n    # If a bin is almost full after insertion, strongly favor it.\n    almost_full_bins = (fill_ratios > almost_full_threshold) & can_fit\n    priorities[almost_full_bins] += 1000  # Huge bonus for almost full\n\n    # Add a bonus if the item fits perfectly\n    perfect_fit_bins = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit_bins] += 500\n\n    # Avoid bins that will become almost empty after insertion\n    almost_empty_threshold = 0.1\n    almost_empty_bins = (fill_ratios < almost_empty_threshold) & can_fit\n    priorities[almost_empty_bins] -= 200\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Very high priority if item fits perfectly.\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = 1000  # A very high priority value\n\n    # Higher priority if the item fits and leaves the least waste.\n    fits = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    \n    if np.any(fits):\n        min_waste = np.min(waste[fits])\n        priorities[fits] = 1 / (waste[fits] + 0.001) #Avoid division by zero. higher inverse waste is better\n\n        # Normalize waste based on item size for better selection\n        priorities[fits] += item / (waste[fits] + 0.001) #Higher item size for lower waste\n        \n        #If there exists close to zero waste bins give higher priority\n        close_to_zero = np.isclose(waste, 0, atol = 0.01) & fits\n        priorities[close_to_zero] = 200\n\n    # Negative priority if the item does not fit.\n    priorities[~fits] = -100 \n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits and minimize waste. Normalize waste using item size. Discourage infeasible assignments strongly.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}