```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #Assume all bins have the same capacity

    # Infeasibility penalty
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very strong penalty

    # Tight-fit prioritization (inverse of remaining capacity, normalized)
    feasible = bins_remain_cap >= item
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        normalized_waste = remaining_capacity / bin_capacity #Normalize waste
        priorities[feasible] = 1 - normalized_waste # Higher priority for tighter fits

        # Boost near-exact fits
        near_exact = np.isclose(bins_remain_cap[feasible], item, rtol=0, atol=0.01*bin_capacity)
        priorities[feasible][near_exact] += 0.5  # Significant boost
    
    #Occupancy Awareness: Prefer bins that are already reasonably full
    occupancy = 1 - (bins_remain_cap / bin_capacity)
    priorities += occupancy * 0.2  # Add a small preference for occupied bins
    

    return priorities
```
