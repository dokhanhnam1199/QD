```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic inspiration
    # High priority to bins that can accommodate the item with minimal wasted space.

    # Consider only bins that can actually fit the item
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Calculate wasted space for valid bins
        wasted_space = bins_remain_cap[valid_bins] - item
        
        # Assign priority based on inverse of wasted space (smaller waste = higher priority)
        priorities[valid_bins] = 1 / (wasted_space + 1e-9)  # Adding a small constant to avoid division by zero
        
        # Optionally, scale priorities to be between 0 and 1
        priorities[valid_bins] /= np.max(priorities[valid_bins])

    #If item does not fit in any bin, select the one with the highest capacity, but with very low priority.
    else:
      priorities = bins_remain_cap / np.max(bins_remain_cap)
      priorities = priorities * 0.01

    return priorities
```
