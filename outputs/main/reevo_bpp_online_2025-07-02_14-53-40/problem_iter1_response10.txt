```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority if item fits perfectly.
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = 1000  # A very high priority value

    # Higher priority if the item fits and leaves the least waste.
    fits = bins_remain_cap >= item
    waste = bins_remain_cap - item
    
    if np.any(fits):
        min_waste = np.min(waste[fits])
        priorities[fits] = 1 / (waste[fits] + 0.001) #Avoid division by zero. higher inverse waste is better

        # Normalize waste based on item size for better selection
        priorities[fits] += item / (waste[fits] + 0.001) #Higher item size for lower waste
        
        #If there exists close to zero waste bins give higher priority
        close_to_zero = np.isclose(waste, 0, atol = 0.01) & fits
        priorities[close_to_zero] = 200

    # Negative priority if the item does not fit.
    priorities[~fits] = -100 

    return priorities
```
