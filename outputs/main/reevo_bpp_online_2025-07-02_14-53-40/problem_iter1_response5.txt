```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired: Prefer bins that can accommodate the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give a base priority for being able to fit.

    # Give higher priority to bins with less remaining capacity after placing the item
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf # Ignore bins that cant fit.

    priorities[can_fit] += 1.0 / (1e-6 + remaining_after_fit[can_fit]) # Prioritize lower remaining after fit

    # Prefer bins that are not too full
    priorities += np.clip(bins_remain_cap / np.max(bins_remain_cap), 0, 1)

    return priorities
```
