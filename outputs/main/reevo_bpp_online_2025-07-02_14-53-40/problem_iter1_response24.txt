```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired: prefer bins that can accommodate the item with minimal wasted space.
    # But, modified to handle online nature (can't pre-sort).

    # Give high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Prioritize bins where remaining space after packing the item is small but not too small (avoid tiny wasted space)
    remaining_space = bins_remain_cap - item
    valid_remaining = (remaining_space >= 0.01) & (remaining_space <= 0.2)  # Avoid near-full and too empty bins. Adjust thresholds as needed.
    priorities[can_fit & valid_remaining] += 2 # higher than basic fit

    # Penalize bins with very little space left
    near_full = (bins_remain_cap > item) & (remaining_space < 0.01)
    priorities[near_full] -= 0.5 # Slightly penalize using these

    # Severely Penalize bins that are already full. Should be redundant given first filter but ensures it.
    priorities[bins_remain_cap < item] = -1000 # Extreme negative penalty if the item won't fit.

    # Encourage filling bins that are somewhat empty, but not completely empty.
    # This helps balance utilization across bins.
    medium_full = (bins_remain_cap > 0.3) & (bins_remain_cap <= 0.7)  # adjust based on the bin size
    priorities[medium_full] += 0.7

    # If no bin can fit, try to find the least incompatible one (least negative score)
    if np.all(bins_remain_cap < item):
        priorities = -np.abs(bins_remain_cap - item) # Prefer smallest difference

    return priorities
```
