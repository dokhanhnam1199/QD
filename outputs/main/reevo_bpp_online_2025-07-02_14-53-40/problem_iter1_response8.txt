```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large Negative Priority if item doesn't fit
    priorities[item > bins_remain_cap] = -np.inf
    
    # Higher priority for bins that can accommodate the item but have little space left afterwards (almost full)
    remaining_space = bins_remain_cap - item
    
    # Normalize remaining space to [0, 1]
    normalized_remaining_space = remaining_space / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_space)
    
    # Give bins with smaller remaining normalized space higher priority, but not extremely high
    priorities[item <= bins_remain_cap] = 1 - normalized_remaining_space[item <= bins_remain_cap]

    #If two bins both are capable, we also prefer bin with largest space left if the bin is reasonably empty
    reasonable_empty = bins_remain_cap > 0.75 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities[reasonable_empty] = priorities[reasonable_empty] + 0.1*bins_remain_cap[reasonable_empty]/np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else priorities[reasonable_empty]
    
    return priorities
```
