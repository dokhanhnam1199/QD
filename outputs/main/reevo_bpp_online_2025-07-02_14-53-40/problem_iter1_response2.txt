```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing variant
            space_waste = cap - item
            priorities[i] = 1 / (space_waste + 1e-9)  # Avoid division by zero

            # Modified First Fit: Try to fill bins more completely.
            if space_waste < 0.1:
                priorities[i] += 10  # High priority if almost perfect fit
            elif space_waste < 0.25:
                priorities[i] += 5 # Moderate bonus

        else:
            priorities[i] = -1e9  # Very low priority if it doesn't fit

    return priorities
```
