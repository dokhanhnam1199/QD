```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bins have capacity 1.0. Adjust if needed

    # Infeasibility penalty: Heavily penalize bins that cannot accommodate the item.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very large negative priority

    # Feasible bins: Calculate priorities based on remaining capacity and item size.
    feasible = ~infeasible
    if np.any(feasible):
        remaining_cap = bins_remain_cap[feasible]
        
        # Tight-fit prioritization: Inverse of remaining capacity after placing the item.
        # Normalize by item size and bin capacity.
        remaining_after_fit = remaining_cap - item
        normalized_waste = remaining_after_fit / (item * bin_capacity)
        
        priorities[feasible] = 1.0 / (normalized_waste + 0.00001) #Adding small number to avoid division by zero errors

        # Occupancy awareness: Encourage packing into bins that are already relatively full.
        # Base priority on the current occupancy level.
        occupancy_level = (bin_capacity - remaining_cap) / bin_capacity
        priorities[feasible] += occupancy_level * 100  # Scale occupancy bonus.

    #Packing stage: Reduce best-fit eagerness in the late stage. Not implemented

    return priorities
```
