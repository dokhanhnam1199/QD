```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired prioritization
    # Favor bins that can fit the item closely without excessive waste
    
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        # Prioritize bins with smaller waste. Use a negative exponential to emphasize small waste
        priorities[fit_mask] = np.exp(-waste) 
    else:
        # If no bin can fit, strongly penalize existing bins, this encourages the creation of new bins, i.e., prevents excessive waste in any existing bin
        priorities = np.full_like(bins_remain_cap, -1.0) # or a large negative number
        
    return priorities
```
