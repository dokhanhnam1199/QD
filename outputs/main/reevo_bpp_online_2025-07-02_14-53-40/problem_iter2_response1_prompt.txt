{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Very high priority if the item fits perfectly (or nearly perfectly)\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # Arbitrarily high value\n\n    # High priority if item fits and fills a good portion of bin\n    fits = bins_remain_cap >= item\n    fill_ratio = item / bins_remain_cap\n    priorities[fits] = fill_ratio[fits] * 500 # Scale to control its effect\n    \n    # Prioritize bins that are nearly full if item doesn't perfectly fit,\n    # avoid creating too many almost empty bins\n    near_full = (bins_remain_cap > item) & (bins_remain_cap < 2*item) #Avoid filling bins with just a small remaining capacity that's not useful\n\n    priorities[near_full] += 200 - 50*(bins_remain_cap[near_full]/item) #Higher priority for lower remain cap\n        \n    # Penalize bins that are too big (avoid fragmenting)\n    too_big = (bins_remain_cap > item*2) & fits #Added too_big\n    priorities[too_big] -= (bins_remain_cap[too_big]-item) *0.1 # Penalty proportional to wasted space\n\n    # Give negative priority to bins where the item doesn't fit.\n    priorities[bins_remain_cap < item] = -100  # Very Low priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Can the item fit in the bin?\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Remaining Capacity: Smaller remaining capacity gets higher priority if feasible\n    remaining_capacity_priority = bins_remain_cap[feasible_bins]\n    \n    # 3. Try to fill up bins which are already not empty\n    non_empty_bins = bins_remain_cap < 1.0 #assuming bin capacity is 1.0\n    \n    # 4. Combination Strategy:\n    priorities[feasible_bins] = 1/(remaining_capacity_priority + 1e-6) # avoid division by zero\n    \n    #Boost priority of bins which are already not empty\n    priorities[non_empty_bins] = priorities[non_empty_bins] * 2\n\n    \n    return priorities\n\n[Reflection]\nThe better code prioritizes feasibility, fills non-empty bins, and avoids fragmentation, yielding improved bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}