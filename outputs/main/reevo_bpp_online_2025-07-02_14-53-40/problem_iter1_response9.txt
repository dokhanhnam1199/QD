```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Reward bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Give higher priority to bins with smaller remaining capacity AFTER fitting item
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~can_fit] = np.inf  # Penalize bins that cannot fit

    priorities[can_fit] += np.max(bins_remain_cap) - remaining_after_fit[can_fit] # Reward smaller remaining

    # Consider the wasted space if the item is placed in a bin.
    wasted_space = bins_remain_cap - item
    wasted_space[~can_fit] = np.inf  # Infinite waste if it doesn't fit
    priorities[can_fit] += np.max(wasted_space[can_fit]) - wasted_space[can_fit] # Smaller waste is good

    # Penalize almost full bins with large item, high chance of future items not fitting
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 2 * item) #Bins will have leftover less than item
    priorities[almost_full] -= 0.5

    return priorities
```
