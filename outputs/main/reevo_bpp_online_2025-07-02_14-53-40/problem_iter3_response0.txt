```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0] + item if np.any(bins_remain_cap + item > bins_remain_cap) else 1.0 #Avoids div by zero in initial case. Assumes all bins of same size, for online alg
    # Tight-fit prioritization (inverse remaining capacity)
    remaining_space_normalized = bins_remain_cap / bin_capacity  # Normalize
    priorities = (1 - remaining_space_normalized)  # Higher priority for tighter fits

    # Heavily penalize infeasibility
    priorities[bins_remain_cap < item] = -1e9  # Very low priority
    
    # Scale priority based on inverse of wasted space relative to item and bin size
    waste = bins_remain_cap - item
    waste_normalized = waste / (item + bin_capacity) #Waste relative to both item size and initial bin size
    
    fits = bins_remain_cap >= item
    priorities[fits] += (1 - waste_normalized[fits]) * 100 #Scale to make sure it is significant

    # Occupancy awareness (Avoid bins being too empty, favoring near full)
    occupancy = 1 - remaining_space_normalized
    priorities += occupancy * 50
    

    return priorities
```
