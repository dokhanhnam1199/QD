{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1\n\n    # Give higher priority to bins with tighter fit, but not too tight\n    fit_ratios = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_ratios[can_fit] = item / bins_remain_cap[can_fit]\n\n    # Boost the priority based on fit ratio, but penalize bins that will have very small remain cap\n    small_cap = bins_remain_cap - item < 0.1  # if less than 0.1 capacity after packing, penalize\n    fit_boost = (fit_ratios * (1-small_cap))[can_fit]  #only compute values if the items fits in the can. Also multiply with 1 - small_cap, so as to penalise packing in almost full bins\n\n    priorities[can_fit] += fit_boost\n\n    #If it doesn't fit, assign negative priority so it doesn't get chosen unless no bin can fit it\n    priorities[~can_fit] = -100 #large negative number\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Prefer bins where the item fits.\n    fits = bins_remain_cap >= item\n    priorities[fits] += 1\n\n    # Heuristic 2: Prefer bins with less remaining capacity (First-Fit Decreasing variant). Closer to full is better, but only when the item fits\n    remaining_percentage = (bins_remain_cap - item) / np.max(bins_remain_cap)  # Normalize remaining capacity\n\n    priorities[fits] += (1 - remaining_percentage[fits])\n\n    # Heuristic 3: Give a larger priority boost for bins that will be filled almost exactly\n    close_to_full = np.abs(bins_remain_cap - item) < 0.1  # Small threshold\n\n    priorities[close_to_full] += 2 # higher weightage\n\n    #Heuristic 4: Penalize bins that lead to significant remaining capacity without fitting\n    doesnt_fit = bins_remain_cap < item\n    priorities[doesnt_fit] -= 0.5 * (item - bins_remain_cap[doesnt_fit]) # Penalize by wasted space\n    \n    #Heuristic 5: Moderate preference to bins with capacity close to the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    priorities[fits] += np.exp(-capacity_diff[fits]) / 2  # Gaussian-like boost for near matches when it fits\n\n    return priorities\n\n[Reflection]\nThe better code uses normalized remaining capacity, explicit bonuses/penalties, and nuanced capacity matching for improved performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}