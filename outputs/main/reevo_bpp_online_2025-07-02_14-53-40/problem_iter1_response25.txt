```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic
    # Give preference to bins that can fit the item reasonably well,
    # but avoid bins where the item fills it almost completely (waste).

    # High priority if the remaining capacity is slightly bigger than item
    fit_ratios = item / bins_remain_cap
    valid_bins = bins_remain_cap >= item

    # Normalize ratios such that better fits receive higher scores.

    priorities = np.where(valid_bins, (1 - np.abs(fit_ratios - 0.75)), -1) # Prefer bins to be 75% filled.

    # Bonus for almost full bins which the items fit into
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < item * 1.1)
    priorities[almost_full] = 0.9


    # Penalize bins where item cannot fit. This helps prevent assigning negative values when item is larger than bin cap.
    priorities[~valid_bins] = -100  #Very low priority

    return priorities
```
