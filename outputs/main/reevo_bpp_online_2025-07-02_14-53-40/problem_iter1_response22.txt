```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large bins get a base priority proportional to remaining capacity.  Helps with "almost full" bins being chosen later
    priorities = bins_remain_cap

    # Give bins that can fit the item a bonus proportional to how *close* the fit is
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap[fit_mask] - item + 1e-9) # Normalize

    # Greatly penalize bins that can't fit the item
    priorities[~fit_mask] = -1e9  # Or any sufficiently low value. Force no fit.

    #Prioritize more full bins, but only if item fits.
    #fill_ratios = (1 - bins_remain_cap / np.max(bins_remain_cap + 1e-9))
    #priorities[fit_mask] += fill_ratios[fit_mask] * 0.1  #Scale this appropriately.  Want fit close-ness to be more important


    return priorities
```
