```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Prefer bins that can fit the item
            priorities[i] += 1.0

            # Secondary criterion: Minimize wasted space (closeness to full)
            priorities[i] += (item / cap)

            # Tertiary criterion: Penalize near-full bins to reduce fragmentation
            remaining = cap - item
            if 0 < remaining <= 0.1:  #if remaining capacity is very low (upto 10%)
                priorities[i] -= 0.5 #reduce chance of near full bin

        else:
            # Item doesn't fit
            priorities[i] = -1e9  # Very low priority

    return priorities
```
