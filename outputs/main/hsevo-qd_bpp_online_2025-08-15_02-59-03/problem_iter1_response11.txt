```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins_mask = bins_remain_cap >= item
    available_bins_caps = bins_remain_cap[possible_bins_mask]

    if available_bins_caps.size > 0:
        differences = available_bins_caps - item
        min_difference = np.min(differences)
        best_fit_mask = (available_bins_caps - item) == min_difference
        
        priorities[possible_bins_mask][best_fit_mask] = 1.0
    
    return priorities
```
