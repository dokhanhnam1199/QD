```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tight fit, favoring exact fits then closest fits.

    Combines exact fit (priority 1.0) with a tight fit metric using sigmoid
    on the inverse of remaining capacity relative to item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If there are no bins that can fit the item, return all zeros
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Prioritize exact fits with the highest score
    exact_fit_mask_for_fitting = np.abs(fitting_bins_remain_cap - item) < epsilon
    priorities[can_fit_mask][exact_fit_mask_for_fitting] = 1.0

    # For bins that can fit but are not exact fits, use a sigmoid score
    # that favors bins with less remaining capacity (tighter fit).
    # The metric is `item / remaining_capacity`. Closer to 1 is better.
    # We use `sigmoid(k * (item / remaining_capacity - 1))`
    # k controls the steepness. We choose a moderate k.
    # We need to apply this only to bins that are not exact fits.
    non_exact_fit_mask_for_fitting = ~exact_fit_mask_for_fitting

    if np.any(non_exact_fit_mask_for_fitting):
        non_exact_fitting_capacities = fitting_bins_remain_cap[non_exact_fit_mask_for_fitting]
        
        # Calculate the tightness ratio: item size / remaining capacity.
        # A higher ratio indicates a tighter fit.
        tightness_ratio = item / (non_exact_fitting_capacities + epsilon)

        # Sigmoid function to map the tightness ratio to a priority score between 0 and 1.
        # The formula `1 / (1 + exp(-k * (ratio - 1)))` peaks around ratio=1.
        # A k=5.0 makes the sigmoid relatively steep, favoring capacities closer to item size.
        k = 5.0
        sigmoid_priorities = 1 / (1 + np.exp(-k * (tightness_ratio - 1)))
        
        # Assign these priorities to the corresponding original bins
        priorities[can_fit_mask][non_exact_fit_mask_for_fitting] = sigmoid_priorities

    return priorities
```
