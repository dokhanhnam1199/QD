```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Exact Fit priority with a scaled Best Fit for remaining bins.
    Prioritizes exact matches and then bins with minimal remaining capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    fit_mask = bins_remain_cap >= item

    # Assign highest priority to exact fits (score 1.0)
    exact_fit_mask = np.isclose(bins_remain_cap, item) & fit_mask
    priorities[exact_fit_mask] = 1.0

    # For bins that fit but are not exact fits, calculate a Best Fit score
    # This score is inversely proportional to the remaining capacity after packing.
    # Scale the scores to be below the exact fit priority (e.g., 0 to 0.9).
    non_exact_fit_mask = fit_mask & ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        fitting_capacities = bins_remain_cap[non_exact_fit_mask]
        remaining_after_packing = fitting_capacities - item
        
        # Avoid division by zero and ensure scores are positive.
        # The "+ 1e-9" acts as a small epsilon to prevent division by zero and
        # to ensure that bins with zero remaining capacity (after packing) get a high score.
        # Scaling is done to map these scores to a range below 1.0.
        # We use 0.9 as the maximum score for these bins, relative to the smallest remaining capacity.
        min_remaining = np.min(remaining_after_packing)
        if np.max(remaining_after_packing) > min_remaining:
            scaled_priorities = 0.9 * (1.0 - (remaining_after_packing - min_remaining) / (np.max(remaining_after_packing) - min_remaining))
        else: # All non-exact fits have the same remaining capacity
            scaled_priorities = np.full_like(remaining_after_packing, 0.45) # Neutral score

        priorities[non_exact_fit_mask] = scaled_priorities

    # Bins that cannot fit the item receive the lowest priority (-1.0)
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -1.0

    return priorities
```
