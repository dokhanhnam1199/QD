```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    compatible_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if not np.any(compatible_bins_mask):
        return priorities

    compatible_bins_caps = bins_remain_cap[compatible_bins_mask]
    
    
    bin_fill_ratios = (compatible_bins_caps - item) / compatible_bins_caps
    
    
    exp_priorities = np.exp(bin_fill_ratios)
    
    
    priorities[compatible_bins_mask] = exp_priorities
    
    
    sum_exp_priorities = np.sum(exp_priorities)
    if sum_exp_priorities > 0:
        priorities[compatible_bins_mask] /= sum_exp_priorities

    return priorities
```
