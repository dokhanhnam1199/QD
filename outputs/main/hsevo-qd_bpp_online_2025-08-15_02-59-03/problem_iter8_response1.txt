```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by favoring exact fits, then tightest fits, and finally smallest suitable bins.

    Combines the strict preference for exact fits from Heuristic 3 with the
    refined Best Fit logic of Heuristic 1, creating a clear preference hierarchy.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)
    
    # Mask for bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # Priority 1: Exact Fits (highest priority)
    # Assign a high score to bins where remaining capacity exactly matches the item size.
    exact_fit_mask = (bins_remain_cap == item) & can_fit_mask
    priorities[exact_fit_mask] = 2.0  # Strict preference for exact fits

    # Mask for bins that can fit but are not exact fits
    suitable_but_not_exact_mask = can_fit_mask & ~exact_fit_mask

    if np.any(suitable_but_not_exact_mask):
        suitable_bins_remain_cap = bins_remain_cap[suitable_but_not_exact_mask]
        
        # Priority 2: Tightest Fits (second highest priority)
        # Calculate priority based on how close the remaining capacity is to the item size.
        # A smaller difference (residual capacity) gets a higher score.
        # We use 1 / (difference + epsilon) to give higher scores to smaller differences.
        differences = suitable_bins_remain_cap - item
        tight_fit_scores = 1.0 / (differences + 1e-9)
        
        # Normalize these scores so they are between 0 and 1, and less than 2.0
        # This ensures exact fits still have the highest priority.
        if np.max(tight_fit_scores) > 0:
            normalized_tight_fit_scores = (tight_fit_scores / np.max(tight_fit_scores)) * 0.9 + 0.1 # Scale to 0.1-1.0
        else:
            normalized_tight_fit_scores = np.zeros_like(suitable_bins_remain_cap)

        # Assign these refined priorities
        priorities[suitable_but_not_exact_mask] = normalized_tight_fit_scores

    # Bins where the item doesn't fit retain their default priority of 0.0
    
    return priorities

```
