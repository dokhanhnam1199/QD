```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins with the tightest fit, giving an extra boost to exact fits.

    Combines the tight-fit strategy of inverse remaining capacity with an
    explicit preference for bins where the item fits perfectly.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins where the item can fit
    fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[fit_mask]
    
    if fitting_bins_remain_cap.size > 0:
        # Calculate the difference for bins where the item fits
        diffs = fitting_bins_remain_cap - item
        
        # Exact fits get the highest priority (1.0)
        exact_fit_mask = diffs == 0
        priorities[fit_mask][exact_fit_mask] = 1.0
        
        # Other fitting bins get priority based on the inverse of the difference
        # This favors bins with smaller gaps (tighter fits)
        non_exact_fit_mask = ~exact_fit_mask
        priorities[fit_mask][non_exact_fit_mask] = 1.0 / (diffs[non_exact_fit_mask] + 1e-9)
        
    return priorities
```
