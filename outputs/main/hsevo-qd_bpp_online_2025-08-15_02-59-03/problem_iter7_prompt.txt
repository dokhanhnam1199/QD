{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes exact fits, then bins with least remaining capacity using a graded scale.\n\n    Combines the explicit prioritization of exact fits (score 2.0) from priority_v0\n    with a graded penalty for non-exact fits based on the difference, aiming for\n    a balanced Best Fit approach.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Bins where the item can fit exactly\n    exact_fit_mask = np.isclose(bins_remain_cap, item)\n    priorities[exact_fit_mask] = 2.0  # Highest priority for exact fits\n\n    # Bins where the item can fit but not exactly\n    fit_mask = bins_remain_cap > item\n    \n    # Calculate priority for bins that can fit but not exactly.\n    # Prioritize bins with smaller remaining capacity (tighter fit).\n    # A higher score indicates a better (tighter) fit.\n    # The score is inversely proportional to the remaining capacity after fitting.\n    # Add epsilon to avoid division by zero.\n    difference = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] = 1.0 / (difference + 1e-9)\n\n    # Ensure exact fits still have the highest priority if they also satisfy fit_mask\n    priorities[exact_fit_mask] = np.maximum(priorities[exact_fit_mask], 2.0)\n    \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}