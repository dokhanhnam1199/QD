```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit prioritization with a graded best-fit strategy.
    Gives highest priority to bins with no remaining capacity after packing (exact fit),
    followed by bins that leave minimal remaining capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity for each bin if the item is placed
    potential_remaining_caps = bins_remain_cap - item
    
    # Identify bins that can fit the item
    can_fit_mask = potential_remaining_caps >= -1e-9 # Allow for small floating point errors

    # Assign priorities
    for i in range(len(bins_remain_cap)):
        if can_fit_mask[i]:
            remaining_capacity = potential_remaining_caps[i]
            
            # High priority for exact fits
            if abs(remaining_capacity) < 1e-9:
                priorities[i] = 2.0  # Highest priority for exact fits
            else:
                # Graded priority for bins that are close fits (best fit)
                # The closer to zero remaining capacity, the higher the priority
                priorities[i] = 1.0 / (remaining_capacity + 1e-9) # Add epsilon to avoid division by zero
                
    return priorities
```
