```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by favoring exact fits, then tightest fits, and penalizing unsuitable bins.

    Combines the clarity of exact fits (priority 1.0) with the "tight fit"
    principle using a sigmoid on the inverse of remaining capacity, similar to heuristic 15.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # For numerical stability and handling exact matches

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bins can fit, return all zeros
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Assign highest priority (1.0) to bins with an exact fit
    exact_fit_mask_for_fitting = np.abs(fitting_bins_remain_cap - item) < epsilon
    priorities[can_fit_mask][exact_fit_mask_for_fitting] = 1.0

    # For bins that can fit but are not exact fits, use a sigmoid score
    # to favor bins with less remaining capacity (tighter fit).
    # Metric: item / remaining_capacity. Higher ratio means tighter fit.
    # Sigmoid: 1 / (1 + exp(-k * (ratio - 1)))
    # This penalizes bins with significantly more remaining capacity than needed.
    non_exact_fit_mask_for_fitting = ~exact_fit_mask_for_fitting

    if np.any(non_exact_fit_mask_for_fitting):
        non_exact_fitting_capacities = fitting_bins_remain_cap[non_exact_fit_mask_for_fitting]
        
        # Calculate the tightness ratio. Add epsilon to denominator for stability.
        tightness_ratio = item / (non_exact_fitting_capacities + epsilon)

        # Sigmoid scaling factor to control steepness. Higher k means stronger preference for tighter fits.
        k = 5.0  
        sigmoid_priorities = 1 / (1 + np.exp(-k * (tightness_ratio - 1)))
        
        # Assign these calculated priorities back to the original bins
        priorities[can_fit_mask][non_exact_fit_mask_for_fitting] = sigmoid_priorities

    return priorities
```
