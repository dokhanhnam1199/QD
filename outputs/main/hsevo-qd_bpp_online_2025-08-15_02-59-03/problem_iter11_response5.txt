```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit (prioritizing minimal remaining capacity) with a penalty for unsuitable bins.
    Exact fits are prioritized.
    """
    suitable_bins_mask = bins_remain_cap >= item
    unsuitable_bins_mask = ~suitable_bins_mask

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(suitable_bins_mask):
        suitable_capacities = bins_remain_cap[suitable_bins_mask]
        
        # Prioritize exact fits with a higher score
        exact_fit_mask = suitable_capacities == item
        if np.any(exact_fit_mask):
            priorities[suitable_bins_mask][exact_fit_mask] = 2.0
        
        # For non-exact fits, use inverse of remaining capacity (Best Fit principle)
        non_exact_fit_mask = ~exact_fit_mask
        if np.any(non_exact_fit_mask):
            capacities_for_bf = suitable_capacities[non_exact_fit_mask]
            # Add a small epsilon to avoid division by zero and ensure sorting
            inverted_capacities = 1.0 / (capacities_for_bf - item + 1e-9)
            
            # Normalize to keep priorities within a reasonable range, below exact fit priority
            max_inverted_capacity = np.max(inverted_capacities) if inverted_capacities.size > 0 else 1.0
            normalized_priorities = 1.0 + (inverted_capacities / max_inverted_capacity) * 0.9 # Scale to be below 2.0
            
            priorities[suitable_bins_mask][non_exact_fit_mask] = normalized_priorities

    # Assign a very low priority to bins that cannot accommodate the item
    if np.any(unsuitable_bins_mask):
        priorities[unsuitable_bins_mask] = 1e-6

    return priorities
```
