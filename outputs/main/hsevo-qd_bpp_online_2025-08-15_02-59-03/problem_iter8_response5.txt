```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Exact Fit and Best Fit. Prioritizes bins that exactly fit the item,
    then bins that leave the least remaining capacity. Unsuitable bins get zero priority.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    # Exact Fit: Highest priority (1.0)
    exact_fit_mask = suitable_bins_mask & (bins_remain_cap == item)
    priorities[exact_fit_mask] = 1.0

    # Best Fit: Second highest priority, scaled from 0.1 to 0.9
    # Calculate remaining capacity for suitable bins (excluding exact fits)
    non_exact_fit_suitable_mask = suitable_bins_mask & ~exact_fit_mask
    if np.any(non_exact_fit_suitable_mask):
        remaining_after_packing = bins_remain_cap[non_exact_fit_suitable_mask] - item

        min_rem = np.min(remaining_after_packing)
        max_rem = np.max(remaining_after_packing)

        if max_rem == min_rem:
            # If all remaining suitable bins have the same capacity after packing
            priorities[non_exact_fit_suitable_mask] = 0.5
        else:
            # Scale priorities for best fit: higher priority for smaller remaining capacity
            # Map to range [0.1, 0.9] to distinguish from Exact Fit (1.0)
            scaled_priorities = 0.1 + 0.8 * (1.0 - (remaining_after_packing - min_rem) / (max_rem - min_rem))
            priorities[non_exact_fit_suitable_mask] = scaled_priorities

    return priorities
```
