{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit strategy.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n    if np.any(suitable_bins_mask):\n        remaining_capacities = bins_remain_cap[suitable_bins_mask] - item\n        min_remaining_capacity = np.min(remaining_capacities)\n        best_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap - item == min_remaining_capacity)\n        priorities[best_fit_mask] = 1.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Objective alignment, iterative refinement, empirical validation, robust design.\n*   **Advice:** Focus on how your heuristic *directly* optimizes the primary objective. If a secondary criterion is needed, ensure it's a logical extension or a robust tie-breaker, not an arbitrary addition. Validate performance against diverse problem instances.\n*   **Avoid:** Relying on \"mimicking\" existing heuristics without understanding their underlying logic. Over-engineering with complex, unproven transformations or prioritizing easily quantifiable but less impactful metrics.\n*   **Explanation:** True self-reflection in heuristic design means dissecting *why* a strategy works, ensuring alignment with the core problem, and building robustness through testing, not just imitation or complexity.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}