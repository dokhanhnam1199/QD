```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priorities for placing an item into bins using a hybrid Best Fit and Softmax strategy.

    Prioritizes bins with exact fits, then bins with the tightest fit.
    Unsuitable bins receive a minimal priority.
    """
    suitable_bins_mask = bins_remain_cap >= item
    unsuitable_bins_mask = ~suitable_bins_mask

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(suitable_bins_mask):
        suitable_capacities = bins_remain_cap[suitable_bins_mask]
        
        # Prioritize exact fits with highest score
        exact_fit_mask = suitable_capacities == item
        if np.any(exact_fit_mask):
            priorities[suitable_bins_mask][exact_fit_mask] = 1.0
        
        # For other suitable bins, use inverted remaining capacity for tightest fit
        non_exact_suitable_mask = suitable_bins_mask.copy()
        non_exact_suitable_mask[suitable_bins_mask] = ~exact_fit_mask
        
        if np.any(non_exact_suitable_mask):
            non_exact_capacities = bins_remain_cap[non_exact_suitable_mask]
            
            # Inverse of (capacity - item) for tightest fit, normalized
            inverted_gaps = 1.0 / (non_exact_capacities - item + 1e-9)
            
            # Scale priorities to be between 0 and 1, favoring larger inverse_gaps (tighter fits)
            max_inverted_gap = np.max(inverted_gaps)
            normalized_priorities = inverted_gaps / max_inverted_gap
            
            # Assign scaled priorities to non-exact fitting bins
            priorities[non_exact_suitable_mask] = normalized_priorities
    
    # Assign a very low priority to bins that cannot fit the item
    if np.any(unsuitable_bins_mask):
        priorities[unsuitable_bins_mask] = 1e-6

    return priorities
```
