```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    possible_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[possible_bins_mask]
    
    if valid_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)
    
    inverse_distances = 1.0 / (valid_bins_remain_cap - item + 1e-9)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins_mask] = inverse_distances
    
    return priorities
```
