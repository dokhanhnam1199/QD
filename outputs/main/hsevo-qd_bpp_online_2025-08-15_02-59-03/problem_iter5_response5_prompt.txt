{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit strategy.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n    if np.any(suitable_bins_mask):\n        remaining_capacities = bins_remain_cap[suitable_bins_mask] - item\n        min_remaining_capacity = np.min(remaining_capacities)\n        best_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap - item == min_remaining_capacity)\n        priorities[best_fit_mask] = 1.0\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a hybrid strategy:\n    Prioritize bins that are a \"tight fit\" (minimizing waste), but also consider\n    bins that have a moderate amount of remaining capacity to potentially accommodate\n    future larger items or to avoid creating many small, unusable spaces.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n\n    if not np.any(suitable_bins_mask):\n        return priorities\n\n    suitable_bins_capacities = bins_remain_cap[suitable_bins_mask]\n\n    # Strategy 1: Tight fit (Best Fit)\n    # Calculate remaining capacity if item is placed\n    remaining_after_fit = suitable_bins_capacities - item\n    min_remaining = np.min(remaining_after_fit)\n    tight_fit_mask_local = (suitable_bins_capacities - item) == min_remaining\n\n    # Strategy 2: Moderate capacity (to potentially fit larger items later)\n    # This is a bit heuristic, let's consider bins that have capacity\n    # roughly between the item size and the bin capacity, avoiding extreme\n    # both very full and very empty bins for this secondary score.\n    # We can normalize remaining capacities and assign a score.\n    # Let's define a \"good enough\" fit as having remaining capacity that is\n    # not too small (but not necessarily the absolute smallest) and not too large.\n    # A simple approach is to give higher priority to bins with remaining capacity\n    # that is closer to the item size, but not exactly the tightest fit.\n\n    # Calculate a \"wastefulness\" score for each suitable bin. Lower is better.\n    # We want to minimize (bin_capacity - item).\n    waste_score = suitable_bins_capacities - item\n\n    # Normalize waste score to be between 0 and 1 (where 0 is best).\n    # Avoid division by zero if all suitable bins have exactly item size capacity.\n    if np.max(waste_score) > 0:\n        normalized_waste_score = waste_score / np.max(waste_score)\n    else:\n        normalized_waste_score = np.zeros_like(waste_score)\n\n    # Create a composite score: prioritize tight fits, but give some boost\n    # to bins that are not excessively empty.\n    # We can use a function that gives higher values to smaller waste.\n    # For example, 1 / (1 + waste_score) or exp(-waste_score).\n    # Let's try a simpler approach: a weighted sum.\n    # High score for tightest fits, moderate score for other suitable bins.\n\n    # Assign a base score to all suitable bins.\n    base_priority = 0.1 # Small baseline for being suitable\n\n    # Boost the tightest fits.\n    priorities[suitable_bins_mask][tight_fit_mask_local] = 1.0\n\n    # For other suitable bins, assign a priority based on how much space is left.\n    # We want to prefer bins that leave less space, but not *too* little (which is the tight fit).\n    # A score that increases as remaining capacity decreases, but capped.\n    # Let's assign a score that is inversely proportional to the remaining capacity AFTER packing.\n    # We'll scale this to avoid overpowering the 'best fit' score.\n    other_suitable_indices = np.where(suitable_bins_mask)[0][~tight_fit_mask_local]\n    if other_suitable_indices.size > 0:\n        other_capacities = bins_remain_cap[other_suitable_indices] - item\n        # Assign priority based on inverse of remaining capacity (smaller remaining is better)\n        # Add a small epsilon to avoid division by zero if a bin is perfectly filled\n        inverse_capacity_score = 1.0 / (other_capacities + 1e-6)\n        # Normalize this score so it doesn't dominate the '1.0' from tight fit\n        max_inverse_score = np.max(inverse_capacity_score)\n        if max_inverse_score > 0:\n            normalized_inverse_score = inverse_capacity_score / max_inverse_score\n        else:\n            normalized_inverse_score = np.zeros_like(inverse_capacity_score)\n\n        # Combine baseline, tight fit boost, and moderate fit score.\n        # The tightest fit gets 1.0. Other suitable bins get a score based on inverse capacity.\n        # We need to ensure that the 'best fit' priority (1.0) is respected.\n        # If a bin is the tightest fit, its priority is 1.0.\n        # For others, it's a scaled inverse capacity.\n\n        # Recalculate priorities for 'other' suitable bins\n        priorities[other_suitable_indices] = 0.5 * normalized_inverse_score # Scale it down to be less than 1.0\n\n    # Ensure that the best fits truly have the highest priority and that other suitable bins\n    # have a priority higher than 0 but lower than the best fit.\n    # If any bin was marked as a tight fit, its priority is 1.0.\n    # Other suitable bins get their calculated score, which should be < 1.0.\n    # If a bin is suitable but not a tight fit, and not in 'other_suitable_indices' (which shouldn't happen if logic is correct),\n    # it will remain 0.\n    # The logic above correctly assigns 1.0 to tight fits and <1.0 to other suitable bins.\n\n    return priorities\n\n### Analyze & experience\n- *   **Heuristic 1 vs. Heuristic 2:** These two heuristics are identical. The ranking suggests a subtle difference might have been intended, but as provided, they perform the same.\n*   **Heuristic 1 & 2 vs. Heuristic 3:** Heuristics 1 and 2 offer a more nuanced priority system. They specifically target \"perfect fits\" with the highest priority (2.0) and then use a scaled inverse of remaining capacity for other suitable bins. Heuristic 3 simply uses the inverse of remaining capacity, which might lead to very large scores for near-perfect fits and doesn't explicitly prioritize exact fits.\n*   **Heuristic 1 & 2 vs. Heuristic 4:** Heuristic 4 implements a pure Best Fit strategy, assigning a priority of 1.0 only to the bin(s) with the minimum remaining capacity. Heuristics 1 and 2 are more sophisticated by introducing a higher priority for exact fits and a graded priority for other bins, making them potentially better.\n*   **Heuristic 1 & 2 vs. Heuristic 5:** Heuristic 5 calculates `capacity - item` as a base priority and then transforms it. The transformation `min_diff - priorities[priorities != -np.inf]` effectively prioritizes bins with the *smallest* `capacity - item`, which is the Best Fit criterion. However, it lacks the explicit handling of exact fits that Heuristics 1 and 2 have.\n*   **Heuristic 1 & 2 vs. Heuristic 6:** Heuristic 6 explicitly prioritizes exact fits (1.0) and then uses a normalized score for other best-fit bins (0.9 minus a scaled gap). This is very similar in spirit to Heuristics 1 and 2, but Heuristics 1 and 2 use a higher peak priority (2.0 vs. 1.0 for exact fit) and a slightly different scaling for non-exact fits. The initial ranking suggests 1 and 2 are slightly better.\n*   **Heuristic 7 vs. Heuristics 1 & 2:** Heuristic 7 attempts to combine Best Fit with a secondary consideration for bin \"fill ratio.\" However, its implementation is more complex and its secondary criterion might not always be beneficial. Heuristics 1 and 2's direct focus on exact fit and then best fit for remaining capacity seems more robust.\n*   **Heuristic 8 & 9 vs. Heuristics 1 & 2:** Heuristics 8 and 9 introduce a second heuristic focusing on moderate remaining space, adding it as a scaled component to the snug fit score. While this aims for better overall utilization, the specific definition of \"moderate\" (10%-50% of item size) is quite arbitrary and might not generalize well. Heuristics 1 and 2's focused approach on exact/best fit is likely more stable.\n*   **Heuristic 10 vs. Heuristics 1 & 2:** Heuristic 10 implements a First Fit strategy, prioritizing bins with the smallest positive remaining capacity (`1.0 / (difference + epsilon)`). This is a distinct strategy from Best Fit and doesn't explicitly handle exact fits as a special case. Heuristics 1 and 2 are generally more sophisticated.\n*   **Heuristic 11, 14, 17 vs. Heuristics 1 & 2:** These heuristics use a sigmoid function on a scaled remaining capacity. The sigmoid `1 / (1 + exp(-5 * (scaled_capacities - 0.5)))` attempts to give higher priority to bins with remaining capacity closer to the middle of the scale (0.5). They also give a priority of 1.0 to exact fits. While these are interesting, the sigmoid's specific shape and the scaling (`fitted_capacities / np.max(available_capacities)`) might be less direct than Heuristics 1 and 2's explicit Best Fit logic. Heuristics 1 and 2 are ranked higher, suggesting their approach is favored.\n*   **Heuristic 12 & 18 vs. Heuristics 1 & 2:** These heuristics also combine exact fits (1.0) with a sigmoid for other bins, using `item / remaining_capacity`. This is similar to 11/14/17 but uses a different metric for tightness. Again, Heuristics 1 and 2 are ranked above them, indicating a preference for their specific implementation.\n*   **Heuristic 13 vs. Others:** Heuristic 13 simply returns all zeros, making it the worst possible heuristic as it never selects a bin.\n*   **Heuristic 15, 19, 20 vs. Heuristics 1 & 2:** These heuristics attempt to implement First Fit (FF). They give priority to bins that can fit the item and then try to boost the priority of earlier bins. However, FF is inherently a greedy, sequential selection, not typically implemented by assigning numerical priorities to all bins and then picking the max. The approach of assigning a slightly higher score based on index is a weak simulation and less effective than true Best Fit variants like 1 and 2.\n*   **Comparing Worst:** Heuristic 13 (all zeros) is clearly the worst. Heuristics 15/19/20 (FF simulation) are also poor because they don't capture the core FF selection mechanism effectively through priorities alone. Heuristic 3, while simpler than 1/2, is a valid but less refined Best Fit.\n\n**Overall Comparison:** Heuristics 1 and 2 (being identical and ranked highest) represent a refined Best Fit strategy that explicitly prioritizes exact fits. They offer a balanced approach by giving the highest score to perfect matches and a graded score to other suitable bins based on minimizing remaining capacity. The heuristics ranked lower introduce more complex (and sometimes arbitrary) secondary criteria, use different mathematical functions (sigmoid), or attempt to simulate other strategies (FF) in a way that's less effective for priority-based selection.\n- \nHere's a redefined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Objective alignment, iterative refinement, empirical validation, robust design.\n*   **Advice:** Focus on how your heuristic *directly* optimizes the primary objective. If a secondary criterion is needed, ensure it's a logical extension or a robust tie-breaker, not an arbitrary addition. Validate performance against diverse problem instances.\n*   **Avoid:** Relying on \"mimicking\" existing heuristics without understanding their underlying logic. Over-engineering with complex, unproven transformations or prioritizing easily quantifiable but less impactful metrics.\n*   **Explanation:** True self-reflection in heuristic design means dissecting *why* a strategy works, ensuring alignment with the core problem, and building robustness through testing, not just imitation or complexity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}