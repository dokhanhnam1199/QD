```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priorities for placing an item into bins using a Softmax-Based Fit strategy.

    The priority is higher for bins that have a remaining capacity greater than or equal to the item's size,
    and among those, bins that have less remaining capacity (tighter fit) are preferred.
    A small penalty is added to bins that cannot accommodate the item to ensure they receive a non-zero
    but still lower priority.

    Args:
        item: The size of the item to be packed.
        bins_remain_cap: A numpy array representing the remaining capacity of each bin.

    Returns:
        A numpy array of the same size as bins_remain_cap, where each element represents
        the priority score for placing the item into the corresponding bin.
    """
    suitable_bins_mask = bins_remain_cap >= item
    unsuitable_bins_mask = ~suitable_bins_mask

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(suitable_bins_mask):
        suitable_capacities = bins_remain_cap[suitable_bins_mask]
        
        inverted_capacities = 1.0 / (suitable_capacities - item + 1e-9)
        
        max_inverted_capacity = np.max(inverted_capacities)
        
        normalized_priorities = inverted_capacities / max_inverted_capacity
        
        priorities[suitable_bins_mask] = normalized_priorities

    if np.any(unsuitable_bins_mask):
        priorities[unsuitable_bins_mask] = 1e-6

    return priorities
```
