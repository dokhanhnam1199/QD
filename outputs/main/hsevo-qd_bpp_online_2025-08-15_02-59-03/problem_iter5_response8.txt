```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit priority with a smooth Best Fit approach for remaining capacity.
    Prioritizes exact fits, then bins with minimal remaining capacity, and finally bins
    that leave a moderate amount of space.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]
    remaining_after_fit = suitable_bins_remain_cap - item

    # Heuristic 1: Prioritize exact fits with a high score.
    exact_fit_mask = np.isclose(remaining_after_fit, 0)
    exact_fit_priorities = np.zeros_like(suitable_bins_remain_cap)
    exact_fit_priorities[exact_fit_mask] = 2.0  # Highest priority for exact fits

    # Heuristic 2: Best Fit for remaining suitable bins (prioritize minimal remaining space).
    # Use inverse of remaining space, add epsilon for stability.
    non_exact_fit_mask = ~exact_fit_mask
    non_exact_remaining = remaining_after_fit[non_exact_fit_mask]
    best_fit_priorities = np.zeros_like(suitable_bins_remain_cap)
    if np.any(non_exact_fit_mask):
        # Score based on how little space is left (higher score for smaller remaining space)
        best_fit_scores = 1.0 / (non_exact_remaining + 1e-9)
        # Normalize these scores relative to the max among non-exact fits
        max_best_fit_score = np.max(best_fit_priorities[non_exact_fit_mask] if np.any(best_fit_priorities[non_exact_fit_mask]>0) else [1e-9])
        best_fit_priorities[non_exact_fit_mask] = best_fit_scores / max_best_fit_score

    # Combine: Assign exact fit priorities, then overlay best fit scores for the rest.
    # The overall priority for suitable bins will be the max of exact fit and best fit.
    combined_suitable_priorities = np.maximum(exact_fit_priorities, best_fit_priorities)

    # Assign these priorities back to the original array structure
    priorities[suitable_bins_mask] = combined_suitable_priorities

    return priorities
```
