```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines linear Best Fit with a minor additive bonus for fuller bins, and a dominant score for perfect fits,
    prioritizing immediate waste minimization and bin closure.
    """
    # Initialize all priorities to negative infinity, marking unavailable bins.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit, return the initialized priorities.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate potential remaining space for fitting bins.
    potential_remaining_space = bins_remain_cap[can_fit_mask] - item

    # Numerical stability epsilon.
    EPSILON = np.finfo(float).eps

    # Core Best Fit Component: Linear scoring for minimal remaining space.
    # A smaller (closer to zero) potential_remaining_space results in a higher (less negative) score,
    # prioritizing the tightest fits.
    best_fit_scores = -potential_remaining_space

    # Additive Consolidation Bias Component: Small bonus for already fuller bins.
    # By using the inverse of remaining capacity, fuller bins (smaller remaining capacity)
    # receive a higher bonus. The weight ensures this is a minor adjustment.
    CONSOLIDATION_BIAS_WEIGHT = 0.005  # Reduced weight compared to v0 for subtle influence
    consolidation_bonus = CONSOLIDATION_BIAS_WEIGHT / (bins_remain_cap[can_fit_mask] + EPSILON)

    # Combine the linear Best Fit score with the additive consolidation bias.
    priorities[can_fit_mask] = best_fit_scores + consolidation_bonus

    # Explicitly boost perfect fits to ensure their absolute priority.
    PERFECT_FIT_TOLERANCE = 1e-9
    PERFECT_FIT_SCORE = 1e30  # A very high score to ensure perfect fits are chosen.

    # Identify perfect or near-perfect fits within the fitting bins.
    perfect_fit_mask_in_fitting = np.abs(potential_remaining_space) < PERFECT_FIT_TOLERANCE

    # Apply the super-high score to perfect fit bins, overriding previous calculations.
    priorities[can_fit_mask][perfect_fit_mask_in_fitting] = PERFECT_FIT_SCORE

    return priorities
```
