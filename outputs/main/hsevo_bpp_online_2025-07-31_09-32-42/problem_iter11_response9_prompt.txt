{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority for placing an item into bins, implementing a multi-objective\n    heuristic that combines Best Fit with strategic bin consolidation and exact fit preference.\n\n    This heuristic extends the Best Fit strategy by introducing weighted bonuses to prioritize\n    actions that lead to more efficient bin utilization and fewer open bins.\n\n    Objectives:\n    1.  **Prioritize Exact Fits (Consolidation):** Give a very high bonus to bins where the item\n        fits perfectly, resulting in 0 remaining capacity. This encourages \"closing\" bins.\n    2.  **Minimize Remaining Capacity (Best Fit):** For non-exact fits, prefer the bin that\n        will have the least remaining capacity, as per the standard Best Fit approach.\n    3.  **Prefer Partially Filled Bins (Strategic Consolidation):** Give a small bonus to bins\n        that are already partially filled (i.e., not completely empty) over completely empty bins\n        (new bins). This aims to consolidate items into existing bins, reducing the total number\n        of bins used over time.\n\n    Args:\n        item: Size of item to be added to the bin (expected to be > 0 and <= BIN_CAPACITY).\n        bins_remain_cap: Array of current remaining capacities for each bin.\n                         Assumes capacities are normalized (e.g., BIN_CAPACITY = 1.0).\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority for placing the item in that bin.\n        Bins that cannot accommodate the item receive the lowest possible priority (-inf).\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.full(num_bins, -np.inf, dtype=float)\n\n    # Assume a standard bin capacity for normalization. This is crucial for\n    # distinguishing between partially filled and completely empty bins.\n    BIN_CAPACITY = 1.0\n\n    # Define constants for bonus scores and floating-point comparisons.\n    # EXACT_FIT_BONUS must be significantly larger than any possible base Best Fit score\n    # (which ranges from -BIN_CAPACITY to 0).\n    EXACT_FIT_BONUS = 100.0\n\n    # PARTIALLY_FILLED_BIN_BONUS should be small enough not to override a significantly\n    # better Best Fit score, but large enough to break ties or give a slight preference.\n    PARTIALLY_FILLED_BIN_BONUS = 0.005\n\n    # Epsilon for robust floating-point comparisons, accounts for precision errors.\n    # Using np.finfo(float).eps * a_factor is generally robust for numerical stability.\n    EPSILON = np.finfo(float).eps * 100\n\n    # 1. Calculate the potential remaining space in each bin if the item were placed.\n    potential_remaining_space = bins_remain_cap - item\n\n    # 2. Identify bins where the item can actually fit.\n    # We use a small negative tolerance for `potential_remaining_space` to account for\n    # minor floating-point inaccuracies that might make a valid fit appear slightly negative.\n    can_fit_mask = potential_remaining_space >= -EPSILON\n\n    # For scoring, ensure remaining space is non-negative. If it's slightly negative\n    # due to precision (but within fit tolerance), treat it as 0.\n    potential_remaining_space_for_scoring = np.where(potential_remaining_space < 0, 0, potential_remaining_space)\n\n    # 3. Base Score: Apply the Best Fit logic.\n    # A smaller potential_remaining_space results in a higher score (less negative).\n    # A perfect fit (0 remaining space) will get a base score of 0.\n    priorities[can_fit_mask] = -potential_remaining_space_for_scoring[can_fit_mask]\n\n    # 4. Apply Exact Fit Bonus: Strongly prioritize bins that become perfectly full.\n    # A bin is considered an exact fit if its remaining space after placing the item is\n    # very close to zero.\n    exact_fit_mask = can_fit_mask & (potential_remaining_space_for_scoring < EPSILON)\n    priorities[exact_fit_mask] += EXACT_FIT_BONUS\n\n    # 5. Apply Partially Filled Bin Bonus: Promote consolidation into existing bins.\n    # Identify bins that are not completely empty (i.e., already contain items)\n    # and are not already handled by the exact fit bonus.\n    is_empty_bin_mask = np.isclose(bins_remain_cap, BIN_CAPACITY, atol=EPSILON)\n    is_partially_filled_bin_mask = can_fit_mask & ~is_empty_bin_mask & ~exact_fit_mask\n\n    priorities[is_partially_filled_bin_mask] += PARTIALLY_FILLED_BIN_BONUS\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive Hybrid Heuristic: Combines robust best-fit, explicit perfect-fit,\n    and consolidation bias, scaled for problem awareness.\n    \"\"\"\n    # Initialize all priorities to negative infinity. Bins unable to fit are disqualified.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins where the item can be placed.\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit, return the initialized (all -inf) priorities.\n    if not np.any(can_fit_mask):\n        return priorities\n\n    # Calculate the potential remaining space (waste) in suitable bins after placing the item.\n    potential_waste = bins_remain_cap[can_fit_mask] - item\n\n    # --- Problem-aware constants for numerical stability and scaling ---\n    # EPSILON: A small value for numerical stability in inverse calculations, scaled by bin_capacity\n    # to maintain relative precision across different bin sizes.\n    EPSILON = np.finfo(float).eps * bin_capacity \n    if EPSILON == 0.0: # Safeguard for very small bin_capacity values\n        EPSILON = np.finfo(float).eps\n\n    # PERFECT_FIT_TOLERANCE: Tolerance for identifying \"perfect fits\" to account for\n    # floating-point inaccuracies, scaled by bin_capacity.\n    PERFECT_FIT_TOLERANCE = 1e-9 * bin_capacity \n\n    # PERFECT_FIT_SCORE: A very high score for perfect fits, scaled by bin_capacity\n    # to ensure they are overwhelmingly prioritized regardless of problem scale.\n    PERFECT_FIT_SCORE = 1e6 * bin_capacity \n\n    # CONSOLIDATION_FACTOR: Weight for the consolidation bonus. This additive factor\n    # encourages selecting already fuller bins, promoting their closure.\n    CONSOLIDATION_FACTOR = 0.1 \n\n    # --- Assign priorities based on fit characteristics ---\n\n    # 1. Prioritize perfect fits (waste is zero or very close to zero).\n    perfect_fit_mask = np.isclose(potential_waste, 0, atol=PERFECT_FIT_TOLERANCE)\n    priorities[can_fit_mask][perfect_fit_mask] = PERFECT_FIT_SCORE\n\n    # 2. For non-perfect fits (some waste remains), use a combined score.\n    non_perfect_fit_mask = ~perfect_fit_mask \n\n    if np.any(non_perfect_fit_mask):\n        # Extract waste for only the non-perfect fitting bins.\n        current_potential_waste = potential_waste[non_perfect_fit_mask]\n\n        # Primary score: Inverse of waste. This strongly rewards tighter fits\n        # by making smaller wastes result in disproportionately higher scores.\n        best_fit_score = 1.0 / (current_potential_waste + EPSILON)\n\n        # Secondary score: Bonus based on the bin's current fullness (before placing item).\n        # This is normalized (0 to 1) and encourages selecting bins closer to full.\n        current_fullness = (bin_capacity - bins_remain_cap[can_fit_mask][non_perfect_fit_mask]) / bin_capacity\n\n        # Additive consolidation bonus.\n        consolidation_bonus = CONSOLIDATION_FACTOR * current_fullness\n\n        # Combine the scores. Best Fit is dominant, but fuller bins get a slight edge.\n        priorities[can_fit_mask][non_perfect_fit_mask] = best_fit_score + consolidation_bonus\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (15th), we see a stark contrast. The 1st ranked heuristic is a pure Best Fit approach, prioritizing bins that result in the least remaining capacity. In contrast, the 15th (worst unique) heuristic is a complex hybrid: it combines inverse waste best-fit, explicit perfect-fit prioritization, and a multiplicative bonus for bin fullness, all with constants scaled by `bin_capacity`. The best performance by the simplest heuristic suggests that for this problem, added complexity, especially through multiplicative scoring and multiple tuning parameters, may introduce instability or conflicting objectives that degrade overall performance.\n\nComparing (2nd) vs (13th), the second-best heuristic introduces fixed additive bonuses for exact fits and partially filled bins over the simple Best Fit. The 13th heuristic employs an inverse waste primary score, explicit perfect fit, and an *additive* consolidation bonus based on normalized current fullness, with `bin_capacity`-scaled constants. The ranking suggests that fixed, perhaps overly simplistic, additive bonuses (2nd) perform better than a more mathematically nuanced additive consolidation with inverse waste (13th). The non-adaptive nature of 2nd's bonuses might be less disruptive than the specific implementation of consolidation in 13th.\n\nComparing (1st) vs (2nd), the 1st heuristic uses a straightforward negative remaining capacity (Best Fit). The 2nd adds fixed additive bonuses for exact fits and preferring partially filled bins. The degradation from 1st to 2nd indicates that these fixed bonuses, while aiming for consolidation, might disrupt the optimal ordering of pure Best Fit, leading to suboptimal choices by favoring bins that are not the absolute tightest fit in all scenarios.\n\nComparing (2nd) vs (3rd), the 2nd relies on linear negative remaining capacity with fixed additive bonuses. The 3rd shifts to an inverse waste function, a strong perfect fit bonus, and an *adaptive* additive consolidation based on current bin fullness. The higher rank of 2nd suggests that while inverse waste and adaptive consolidation are theoretically powerful, their specific implementation and tuning (or lack thereof) in 3rd might have introduced too much sensitivity or an ineffective consolidation bias compared to 2nd's simpler approach.\n\nComparing (3rd) vs (4th), both heuristics employ an inverse waste function, strong perfect-fit prioritization, and an additive consolidation bias. The key difference in 4th is using `relative_fullness` (based on `max_rem_cap`) for its consolidation bias, rather than 3rd's simpler `current_bin_fullness`. The performance drop indicates that dynamically adapting the consolidation bias to the overall maximum remaining capacity (4th) was less effective than a bias solely based on the individual bin's current fullness (3rd), possibly due to the `max_rem_cap` metric being less indicative of optimal consolidation opportunities.\n\nComparing (4th) vs (5th), the 4th uses an inverse waste core with adaptive consolidation. The 5th returns to a scaled linear Best Fit component but critically introduces an adaptive penalty for creating \"fragmented\" small remaining spaces. The lower rank of 5th suggests that its linear Best Fit scoring might be less effective than inverse waste, or that the fragmentation penalty, while conceptually sound, might be overly aggressive or poorly calibrated, leading to the selection of less optimal bins.\n\nComparing (5th) vs (6th), the 5th heuristic focuses on linear Best Fit with fragmentation avoidance. The 6th is a highly complex multi-objective heuristic with linear Best Fit, perfect/near-perfect bonuses, adaptive fragmentation avoidance specific to small items, and a \"worst-fit\" tendency for small items to preserve space for larger items. The significantly lower rank of 6th strongly indicates that its highly nuanced and multi-faceted adaptive logic, with many parameters and potentially conflicting objectives (like worst-fit for small items vs. general best-fit), made it less robust and less effective than simpler strategies.\n\nComparing (6th) vs (7th), the very complex 6th is outperformed by the 7th heuristic. The 7th simplifies by focusing on an inverse waste base, a perfect fit bonus, and a *severe* fixed penalty for small gaps. This suggests that a targeted, strong penalty for unequivocally bad states (like very small, unusable gaps), combined with a powerful inverse waste mechanism, can be more effective than a broadly adaptive, complex approach.\n\nComparing (7th) vs (8th), the 7th uses inverse waste for its base, while 8th reverts to a simpler negative remaining space (linear Best Fit). Both apply penalties for fragmentation, but 8th also adds a bonus for leaving *large usable gaps*. The ranking suggests that 8th's linear Best Fit is less effective than inverse waste for driving optimal tight fits, and its \"large gap bonus\" might encourage suboptimal bin usage if better, tighter fits exist, thus performing worse than 7th.\n\nComparing (8th) vs (11th), the 8th uses linear Best Fit with additive adjustments. The 11th returns to the inverse waste primary component and introduces a *multiplicative* bonus for bin fullness. The degradation in rank from 8th to 11th indicates that the multiplicative fullness bonus, despite aiming for consolidation, may be too sensitive or poorly controlled compared to additive adjustments, leading to less stable and effective prioritization.\n\nComparing (11th) vs (13th), both use inverse waste and perfect fit. The 11th applies a multiplicative fullness bonus without `bin_capacity` scaling. The 13th uses an additive consolidation bonus based on normalized fullness, crucially introducing `bin_capacity`-scaled constants. The fact that 13th performs worse than 11th, despite the seemingly better practice of `bin_capacity` scaling, suggests that the additive consolidation, or its specific `CONSOLIDATION_FACTOR`, was less effective for the problem than the multiplicative one from 11th, or that the parameter values in 13th were not well-tuned.\n\nComparing (13th) vs (15th), both are scaled by `bin_capacity` and feature inverse waste and perfect fit. The key difference is the consolidation bonus: 13th uses an *additive* factor based on normalized current fullness, while 15th uses a *multiplicative* factor based on inverse remaining capacity. The worse performance of 15th confirms the pattern observed earlier: multiplicative bonuses, even with scaling, tend to be less robust and harder to tune than additive ones, potentially leading to less effective heuristics.\n\nOverall: The consistent pattern is that simpler heuristics, particularly those leveraging a robust Best Fit (negative remaining space), tend to outperform more complex multi-objective heuristics with many tunable parameters and intricate interaction rules. Attempts to introduce \"smart\" adaptive behaviors, multiple bonuses, or multiplicative scoring often lead to worse performance, likely due to increased sensitivity, conflicting objectives, or insufficient parameter tuning for the specific problem distribution. Explicitly overriding scores for \"perfect fits\" is a generally good practice.\n- \nHere's a redefined 'Current self-reflection':\n\n*   **Keywords**: Emergent Behavior, Local Rules, State Evolution, Information Flow.\n*   **Advice**: Design heuristics with minimal, local decision rules where desired global outcomes emerge from their aggregate application. Focus on how problem state changes meaningfully propagate to inform subsequent choices.\n*   **Avoid**: Hardcoding explicit global objectives or dynamic parameter adjustments that react to problem state. Do not rely on specific numerical stability mechanisms (e.g., epsilon, infinity) or predefined \"best fit\" criteria.\n*   **Explanation**: Powerful heuristics often arise from simple, iterative processes where decisions progressively shape the problem state, rather than from pre-engineered complex strategies or numerical safeguards.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}