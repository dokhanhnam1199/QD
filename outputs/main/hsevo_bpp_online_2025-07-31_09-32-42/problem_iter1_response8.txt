```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a 'Best Fit' heuristic. Bins that result in the smallest
    remaining capacity (tightest fit) after the item is placed receive a
    higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item does not fit will have a very low (negative infinity) priority.
    """
    # Initialize all priorities to a very low value, effectively marking them as unsuitable
    # This ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the 'tightness' of the fit.
    # The 'Best Fit' strategy aims to minimize the remaining space in a bin after the item is placed.
    # To translate this into a "highest priority score", we can use the negative of the remaining space.
    # A smaller positive remaining space (e.g., 0.1) will result in a larger negative number (e.g., -0.1),
    # which is "higher" than a larger negative number (e.g., -0.5 for 0.5 remaining space).
    # Thus, np.argmax on these priorities will correctly select the bin with the smallest positive remaining space.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
