```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using the Best Fit strategy.

    The Best Fit (BF) heuristic attempts to minimize the wasted space within a bin
    by placing the item into the bin that, if the item were placed there, would leave
    the least remaining capacity. This often leads to a more compact packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that cannot fit the item
        are assigned a very low (negative infinity) priority.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins that can accommodate the current item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a priority score.
    # The Best Fit strategy aims to minimize `bins_remain_cap[i] - item` (the "wasted" space).
    # To achieve this with a "highest priority wins" selection, we maximize `-(bins_remain_cap[i] - item)`,
    # which is equivalent to maximizing `item - bins_remain_cap[i]`.
    # A perfect fit (wasted space = 0) will result in a score of 0, which is the maximum possible score
    # for a valid bin. Less optimal fits (more wasted space) will result in negative scores.
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    # For bins that cannot fit the item, assign a very low priority (negative infinity)
    # to ensure they are never selected unless no other valid option exists (which implies a new bin must be opened).
    priorities[~can_fit_mask] = -np.inf

    return priorities
```
