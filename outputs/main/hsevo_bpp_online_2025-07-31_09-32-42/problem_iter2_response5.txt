```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with strong preference for tight/perfect fits.
    Uses inverse of remaining waste + epsilon for numerical stability,
    and clear disqualification for unfit bins with -inf.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity (waste) if the item is placed.
    # This value will be non-negative for bins where the item fits.
    remaining_waste = bins_remain_cap[can_fit_mask] - item

    # Add a small epsilon to the denominator for numerical stability.
    # This prevents division by zero for perfect fits (waste = 0) and
    # ensures very large, but finite, priority for them.
    # It also handles very small positive waste values gracefully.
    epsilon = np.finfo(float).eps

    # The priority is the inverse of (remaining_waste + epsilon).
    # This creates a strong non-linear preference: smaller waste yields
    # disproportionately higher priority. Perfect fits receive the highest score (1/epsilon).
    priorities[can_fit_mask] = 1.0 / (remaining_waste + epsilon)

    return priorities
```
