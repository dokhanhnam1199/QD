```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, implementing a variation of Best Fit.

    This heuristic aims to select the bin that will have the least remaining capacity
    after the item is placed, effectively trying to "fill up" a bin as much as possible.
    Bins that cannot accommodate the item receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority for placing the item in that bin.
        Scores are designed such that a perfect fit (remaining capacity = 0) gets the
        highest possible score (0), while bins that cannot fit the item get -inf.
    """
    # Calculate the remaining space in each bin if the item were placed.
    # A smaller positive value here means a "better fit".
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priorities to negative infinity. This ensures that
    # any bin that cannot fit the item will never be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space >= 0).
    can_fit_mask = potential_remaining_space >= 0

    # For bins where the item can fit, assign a priority based on the negative
    # of the potential remaining space.
    # By maximizing this value, we are effectively minimizing the potential remaining space.
    # A perfect fit (0 remaining space) will result in a priority of 0 (the highest).
    # A larger remaining space (e.g., 0.5) will result in a lower priority (-0.5).
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priorities
```
