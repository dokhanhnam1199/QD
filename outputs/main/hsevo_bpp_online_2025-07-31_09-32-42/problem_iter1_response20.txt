```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implements a "Best Fit" strategy for online bin packing.
    It prioritizes bins that, after accommodating the item, would have the
    smallest remaining capacity (i.e., a "tight" fit). Bins that cannot
    fit the item are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that cannot fit the item
        will have a priority of -infinity.
    """
    # Initialize priorities with a very low value (-infinity) for all bins.
    # This ensures that bins incapable of holding the item are never chosen
    # unless no bin can hold the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space if the item were placed in each valid bin.
    # We want to minimize this remaining space (bins_remain_cap[i] - item).
    # To convert this minimization problem into a maximization of priority,
    # we take the negative of the remaining space.
    # A smaller positive remainder (tighter fit) will result in a larger
    # (closer to zero or positive) priority score.
    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_space_after_fit

    return priorities
```
