```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Isaac Newton, I observe that Nature abhors a vacuum. Therefore,
    to achieve the most efficient and compact arrangement, an item
    should be 'attracted' to the bin that it most perfectly fills,
    leaving the least amount of residual void. This minimizes the
    'potential energy' of the system by ensuring that the remaining
    space within a bin is as small as possible after the item's placement.

    This heuristic prioritizes bins that will have the least remaining
    capacity after the item is placed (a "Best Fit" strategy). Bins that
    cannot accommodate the item are given an infinitely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the space that would remain in each bin after placing the item.
    # A smaller positive value here indicates a "tighter fit".
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priorities to a state of infinitely low preference.
    # This ensures that bins which cannot accommodate the item are never chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually hold the item (where remaining space would be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, their priority is determined by the
    # negation of the remaining space. A smaller positive remaining space
    # (a tighter fit) results in a larger (less negative, or zero) priority score,
    # thus favoring the best fit. A perfect fit (0 remaining space) yields a priority of 0,
    # which is the highest possible.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
