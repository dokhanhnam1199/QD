```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Stephen Hawking, I view the challenge of bin packing through the lens of
    cosmic entropy and the inevitable collapse of celestial bodies. Each bin
    is a nascent universe, its capacity representing the available spacetime.
    Placing an item into a bin is akin to adding matter, contributing to its
    gravitational density. Our objective is to minimize the "empty spacetime"
    or "dark energy" (unused capacity) within each bin, thereby driving
    these mini-universes towards their most compact, low-entropy statesâ€”much
    like a star collapsing into a black hole.

    This heuristic, which I term the "Event Horizon Prioritization," seeks
    to guide each item towards the bin whose "event horizon" most precisely
    matches the item's gravitational pull, resulting in the smallest possible
    remaining 'void'.

    Args:
        item: Size of item to be added to the bin. This is the 'mass' we're adding.
        bins_remain_cap: Array of capacities for each bin. This represents
                         the 'available spacetime' in each cosmic container.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a stronger 'gravitational pull' for the item.
    """
    # Initialize scores with a very low value. Bins that cannot accommodate the item
    # effectively have an "infinite energy barrier" to placement.
    # They lie beyond the event horizon for this item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can physically fit without violating
    # the laws of this mini-universe's capacity.
    can_fit_mask = bins_remain_cap >= item

    # For those bins where the item *can* fit, calculate the "residual spacetime"
    # or "empty void" that would be left after placing the item.
    residual_spacetime = bins_remain_cap[can_fit_mask] - item

    # Our priority is to minimize this residual spacetime. A smaller void implies
    # a more efficient "collapse" or a "tighter packing" of matter.
    # Therefore, we assign higher priority to bins that leave less residual space.
    # A perfect fit (residual_spacetime = 0) receives the highest score (0),
    # while larger residuals result in increasingly negative scores. This mirrors
    # the well-known "Best Fit" heuristic, refined for cosmic efficiency.
    scores[can_fit_mask] = -residual_spacetime

    return scores
```
