```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a 'Best-Fit' like heuristic.

    Inspired by the natural tendency of radioactive decay to seek a stable
    (or 'full') state, this heuristic aims to place the item into the bin
    that, after accommodating the item, leaves the smallest possible
    remaining capacity. This maximizes the 'compactness' of our bins,
    analogous to particles seeking their lowest energy state, thereby
    reducing the total number of 'active' bins required.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with a priority score for each bin.
        A higher score indicates a more favorable bin for the item.
        Bins where the item does not fit are assigned a very low (negative infinity) priority.
    """
    # Calculate the theoretical remaining capacity if the item were placed in each bin.
    # This represents the 'potential energy state' after placement.
    potential_remaining_capacity = bins_remain_cap - item

    # Initialize priority scores for each bin.
    # We use a float type to accommodate -np.inf.
    priorities = np.zeros_like(bins_remain_capacity, dtype=float)

    # Determine which bins can actually accommodate the item.
    # These are the bins where the 'potential energy state' is non-negative.
    can_fit_mask = potential_remaining_capacity >= 0

    # For bins where the item fits, we want to prioritize those that lead to the
    # smallest positive remaining capacity (i.e., the 'snuggest' fit).
    # To achieve this, we assign a score that is the negative of the remaining capacity.
    # A smaller positive remaining capacity (e.g., 0.1) will result in a larger
    # (less negative) score (-0.1), which is prioritized over a larger remaining
    # capacity (e.g., 0.5) resulting in a smaller score (-0.5).
    priorities[can_fit_mask] = -potential_remaining_capacity[can_fit_mask]

    # For bins where the item does not fit, we assign an extremely low priority.
    # This ensures these bins are never selected.
    priorities[~can_fit_mask] = -np.inf

    return priorities
```
