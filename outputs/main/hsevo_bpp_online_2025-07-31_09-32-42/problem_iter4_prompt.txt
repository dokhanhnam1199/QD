{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using a non-linear 'Best Fit' approach, emphasizing very\n    tight fits while robustly disqualifying bins that cannot fit the item.\n    \"\"\"\n    # Initialize priorities to negative infinity, ensuring bins unable to fit\n    # the item are unequivocally disqualified. This is a robust signal.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Determine which bins have sufficient remaining capacity for the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining space (waste) in suitable bins after placing the item.\n    # A smaller waste indicates a more efficient, tighter fit.\n    remaining_waste = bins_remain_cap[can_fit_mask] - item\n\n    # A small positive constant to ensure numerical stability and to assign a\n    # very high, finite priority to perfect fits (waste = 0). This creates\n    # a strong non-linear preference for bins that are nearly or perfectly full.\n    EPSILON = 1e-9\n\n    # Calculate priority as the inverse of (waste + epsilon).\n    # This non-linear function disproportionately rewards very small waste values,\n    # making perfect or near-perfect fits highly desirable.\n    priorities[can_fit_mask] = 1.0 / (remaining_waste + EPSILON)\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}