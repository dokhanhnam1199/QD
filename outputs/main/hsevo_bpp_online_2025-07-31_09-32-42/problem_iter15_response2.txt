```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    mutating priority_v1 to strongly favor perfect fits with a fixed bonus.

    This heuristic aims to select the bin that will have the least remaining capacity
    after the item is placed (Best Fit), but gives a significant, fixed additive bonus
    to bins that achieve a perfect fit (remaining capacity = 0).
    Bins that cannot accommodate the item receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority for placing the item in that bin.
        Scores are designed such that a perfect fit gets the highest possible score,
        while bins that cannot fit the item get -inf.
    """
    # A small epsilon for floating point comparisons to identify 'perfect fits'
    EPSILON = 1e-9 

    # A fixed bonus for a perfect fit. This value must be significantly larger
    # than any possible negative score from non-perfect fits (which range from -1 to 0).
    PERFECT_FIT_BONUS = 1.0 

    potential_remaining_space = bins_remain_cap - item

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit. We use -EPSILON to account for
    # minor floating point inaccuracies that might make a valid fit appear slightly negative.
    can_fit_mask = potential_remaining_space >= -EPSILON

    # Assign base priority using the Best Fit logic: maximize -potential_remaining_space,
    # effectively minimizing the remaining space.
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    # Identify true perfect fit bins using a precise epsilon comparison.
    # Only bins where the remaining space is very close to zero get this bonus.
    perfect_fit_mask = np.isclose(potential_remaining_space, 0, atol=EPSILON)

    # Apply the fixed bonus to perfect fit bins. This ensures that any perfect fit
    # is prioritized above all non-perfect fits, as its score will be positive.
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priorities
```
