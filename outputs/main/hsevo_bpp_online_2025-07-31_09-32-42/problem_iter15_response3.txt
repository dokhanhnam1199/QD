```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, implementing Best Fit with a strong Perfect Fit bias.

    This heuristic prioritizes bins that achieve a perfect fit for the item. If no perfect
    fit is available, it defaults to a Best Fit strategy, selecting the bin that will
    have the least remaining capacity after the item is placed. Bins that cannot
    accommodate the item receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority for placing the item in that bin.
        Scores are designed such that a perfect fit gets a significantly higher
        fixed bonus, ensuring it's always preferred over any non-perfect fit.
        Bins that cannot fit the item get -inf.
    """
    # Define a fixed, large bonus for perfect fits. This value should be chosen
    # to be greater than the absolute maximum possible score obtained from a non-perfect fit.
    # In the Best Fit strategy, non-perfect fit scores range from -(MaxBinCapacity - Item) to just below 0.
    # For common bin capacities (e.g., 1.0), this range is typically [-1.0, 0).
    # A bonus of 1.0 (or higher) ensures that a perfect fit (score 0 + bonus) will always
    # outscore any non-perfect fit (score < 0).
    PERFECT_FIT_SCORE_BOOST = 1.0

    # Calculate the remaining space in each bin if the item were placed.
    # A smaller positive value here means a "better fit".
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priorities to negative infinity. This ensures that
    # any bin that cannot fit the item will never be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space >= 0).
    can_fit_mask = potential_remaining_space >= 0

    # For bins where the item can fit, assign a priority based on the negative
    # of the potential remaining space. This implements the core Best Fit strategy.
    # By maximizing this value, we are effectively minimizing the potential remaining space.
    # A larger remaining space (e.g., 0.5) will result in a lower priority (-0.5),
    # while a very tight fit (e.g., 0.01 remaining) gets a priority closer to 0 (-0.01).
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    # Identify bins that result in a perfect fit (remaining space is exactly 0).
    # This comparison assumes floating point equality to zero is sufficient for perfect fit.
    perfect_fit_mask = potential_remaining_space == 0

    # Apply a fixed, additive bonus to the priority of bins that achieve a perfect fit.
    # This ensures that any bin offering a perfect fit will always have a higher
    # priority than any bin offering a non-perfect fit, regardless of how small
    # the remaining space is in the non-perfect fit bin.
    priorities[perfect_fit_mask] += PERFECT_FIT_SCORE_BOOST

    return priorities
```
