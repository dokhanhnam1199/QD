{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with strong bonuses for perfect fits and consolidating\n    items into already partially-filled bins.\n    \"\"\"\n    # Constants for priority bonuses, chosen to ensure desired hierarchy\n    PERFECT_FIT_BONUS = 10000.0  # Very large, fixed bonus for exact fits (dominant)\n    CONSOLIDATION_BONUS = 5.0    # Fixed bonus for filling existing, partially used bins\n\n    # Initialize priorities to negative infinity. Bins that cannot fit the item\n    # will maintain this low priority and thus never be chosen.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Calculate the remaining space in each bin if the item were placed.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Identify bins where the item can actually fit (remaining space >= 0).\n    can_fit_mask = potential_remaining_space >= 0\n    \n    # Extract relevant values for bins where the item can fit for efficient computation.\n    valid_remaining_space = potential_remaining_space[can_fit_mask]\n    \n    # --- Core Priority: Best Fit Principle ---\n    # Assign a base score to eligible bins. Prioritize bins that would have the\n    # least remaining space (i.e., closest to a perfect fit but not necessarily 0).\n    # A smaller positive remaining space results in a higher (less negative) score.\n    priorities[can_fit_mask] = -valid_remaining_space\n\n    # --- Consolidation Bonus (Strategic Fill) ---\n    # Apply a fixed bonus to bins that are already partially utilized (not full, not empty).\n    # This encourages packing into existing bins before opening new ones (assuming full capacity\n    # is the maximum value in bins_remain_cap).\n    if bins_remain_cap.size > 0: # Avoid errors on empty bin list\n        # Determine what \"full capacity\" means from the current bin capacities.\n        # This assumes the largest capacity in the array represents a \"new/empty\" bin.\n        max_current_cap = np.max(bins_remain_cap)\n        \n        # Identify bins that are currently partially filled (not completely empty, not full).\n        is_partially_filled_pre_placement = (bins_remain_cap < max_current_cap) & (bins_remain_cap > 0)\n        \n        # Apply consolidation bonus to bins that can fit the item AND are partially filled.\n        consolidation_eligible_mask = can_fit_mask & is_partially_filled_pre_placement\n        priorities[consolidation_eligible_mask] += CONSOLIDATION_BONUS\n\n    # --- Perfect Fit Bonus (Dominant Override) ---\n    # Apply a very large, fixed bonus to guarantee that exact fits (remaining space == 0)\n    # are always the highest possible priority. This overrides any other score for perfect fits.\n    perfect_fit_mask = (valid_remaining_space == 0)\n    # Apply the bonus to the subset of priorities corresponding to fitting bins that are perfect fits.\n    priorities[can_fit_mask][perfect_fit_mask] += PERFECT_FIT_BONUS\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}