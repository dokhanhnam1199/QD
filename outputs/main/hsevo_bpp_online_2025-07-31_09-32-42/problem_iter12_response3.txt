```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority for placing an item in each bin, implementing a strategy
    that favors keeping bins with more remaining capacity flexible for future items,
    akin to a Worst Fit approach, and designed with "emergent behavior" in mind.

    This heuristic assigns a higher priority to bins that would have more space remaining
    after the item is placed, provided the item can fit. This aims to keep bins
    "open" and versatile for subsequent, potentially larger, items, letting a global
    packing strategy emerge from these local decisions rather than explicit optimization.
    Bins that cannot accommodate the item receive a low, but finite, priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority for placing the item in that bin.
        Scores are designed to reflect the desirability of a bin, with unfitting
        bins receiving a score strictly lower than any possible valid placement.
    """
    # Initialize all priorities to a sufficiently small negative value.
    # This ensures that any bin where the item cannot fit will always have
    # a lower priority than any bin where it can fit, without using -np.inf.
    # Assuming capacities and item sizes are positive, the minimum valid
    # remaining capacity (for a perfect fit) is 0. Thus, any negative value
    # effectively excludes non-fitting bins.
    priorities = np.full_like(bins_remain_cap, -1.0, dtype=float)

    # Calculate the potential remaining space in each bin if the item were placed.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit
    # (i.e., where potential_remaining_space is non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins where the item can fit, assign a priority based on the
    # potential remaining space. A larger positive value means more space
    # would be left, which is preferred in this "Worst Fit" type of strategy.
    # This promotes keeping bins less full, allowing for more flexibility
    # in subsequent item placements.
    priorities[can_fit_mask] = potential_remaining_space[can_fit_mask]

    return priorities
```
