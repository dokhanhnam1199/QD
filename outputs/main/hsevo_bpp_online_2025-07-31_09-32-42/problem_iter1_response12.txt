```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    As Isaac Newton, I seek the most orderly and efficient arrangement, much like
    how celestial bodies arrange themselves in orbits. For bin packing, this means
    seeking a "snug fit" for the item, thereby minimizing the wasted space within
    any single container and allowing it to be effectively "closed" from future items
    to make way for new, possibly more suitable items in other, less constrained bins.

    This implementation employs a "Best Fit" heuristic, favoring bins that will have
    the smallest remaining capacity after the item is placed. This method aims to
    pack items as densely as possible into existing bins, striving to minimize the
    total number of bins required.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Calculate the space that would remain in each bin if the item were placed there.
    # This reflects the 'slack' or 'excess' capacity after the item's insertion.
    remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores.
    # To achieve 'Best Fit', we prioritize bins that result in the smallest
    # remaining space. This means we want to maximize a value that decreases
    # as 'remaining_after_placement' increases.
    # A simple negation serves this purpose: smaller remaining_after_placement
    # yields a larger (less negative) priority score.
    priorities = -remaining_after_placement

    # For bins where the item physically cannot fit (resulting in a negative
    # remaining capacity), their priority must be set to an infinitely low value.
    # An object cannot occupy space it does not fit into; such a choice would violate
    # the fundamental laws of conservation and spatial integrity.
    invalid_bins_mask = remaining_after_placement < 0
    priorities[invalid_bins_mask] = -np.inf # Represents an impossible or highly undesirable choice.

    return priorities
```
