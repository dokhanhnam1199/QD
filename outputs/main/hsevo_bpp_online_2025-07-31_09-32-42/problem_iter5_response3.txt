```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid Best Fit: prioritizes tight fits, with a bonus for already-full bins.
    Combines inverse waste minimization (Best Fit) with a proportional bonus for
    the current fullness of a bin, encouraging efficient bin closure.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity (waste) if the item is placed.
    remaining_waste = bins_remain_cap[can_fit_mask] - item

    # Epsilon for numerical stability, especially for perfect fits (waste = 0).
    epsilon = np.finfo(float).eps

    # Primary Best Fit component: Inverse of (remaining_waste + epsilon).
    # This gives disproportionately high scores to tighter fits.
    best_fit_score = 1.0 / (remaining_waste + epsilon)

    # Bin Fullness component: Inverse of (bins_remain_cap + epsilon).
    # This term gives higher scores to bins that are already more full (smaller bins_remain_cap).
    # It acts as a bias towards closing bins.
    bin_fullness_score = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)

    # Weighting factor for the bin fullness bonus.
    # A small alpha ensures that the primary Best Fit (waste minimization) remains dominant,
    # but the fullness component provides a subtle, adaptive influence, acting as a tie-breaker
    # or a mild preference for already-fuller bins with similar Best Fit scores.
    alpha = 0.01  # Tunable parameter: Adjust based on desired balance.

    # Combine: Multiply the best-fit score by a factor that increases with bin fullness.
    # The '1.0 + alpha * ...' ensures the base best_fit_score is always present
    # and is only amplified by the fullness, not replaced. This hybrid approach
    # aims for immediate efficiency (Best Fit) while adaptively guiding towards bin closure.
    priorities[can_fit_mask] = best_fit_score * (1.0 + alpha * bin_fullness_score)

    return priorities
```
