{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Assume a normalized bin capacity. In a real application, this could be\n# an argument to the function or configured based on problem specifics.\n# Using 1.0 is common when item sizes are normalized relative to bin capacity.\nBIN_CAPACITY = 1.0\n\n    \"\"\"\n    Returns priority with which to add an item to each bin, implementing a multi-objective\n    heuristic that combines Best Fit principles with strategic considerations for\n    fragmentation, bin consolidation, and adaptive behavior based on item size.\n\n    This heuristic aims to:\n    1. Strongly prioritize exact fits (remaining capacity = 0).\n    2. Beyond exact fits, prefer bins that will have less remaining capacity (Best Fit).\n    3. Adaptively adjust priority based on the item size and the resulting bin state:\n       - Discourage creating very small, \"fragmented\" remaining spaces, especially for small items.\n       - Encourage efficient use of bins by giving a slight preference to more empty bins\n         when placing small items (a \"Worst Fit\" tendency for small items) to keep\n         nearly-full bins available for larger items to complete them.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score for each bin.\n        A higher score indicates a higher priority for placing the item in that bin.\n        Scores are designed such that a perfect fit receives the highest possible score,\n        while bins that cannot fit the item receive -inf.\n    \"\"\"\n    # 1. Calculate the potential remaining space in each bin if the item were placed.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Initialize all priorities to negative infinity. This ensures that\n    # any bin that cannot fit the item will never be chosen.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit (remaining space >= 0).\n    can_fit_mask = potential_remaining_space >= 0\n    \n    # Extract relevant values for bins where the item can fit\n    valid_remaining_space = potential_remaining_space[can_fit_mask]\n    \n    # 2. Base Priority: Best Fit Component\n    # This core component prioritizes bins that will have the least remaining space.\n    # A smaller positive remaining space (closer to a perfect fit) leads to a higher\n    # (less negative, closer to 0) base score. A perfect fit (0 remaining space)\n    # gets a base score of 0.\n    priorities[can_fit_mask] = -valid_remaining_space\n\n    # --- Strategic & Adaptive Adjustments ---\n    # These constants can be tuned based on problem characteristics or desired behavior.\n    PERFECT_FIT_BONUS = 1000.0  # Large bonus to guarantee exact fits are highest priority\n    NEAR_PERFECT_FIT_BONUS = 10.0 # Bonus for very tight fits (e.g., 0.001 remaining)\n    \n    # Define a \"fragmentation zone\" for remaining capacities that are small but not trivial.\n    # Placing an item that results in remaining space within this zone might be undesirable\n    # for small items, as it leaves an awkward, hard-to-use gap.\n    FRAGMENTATION_ZONE_LOW = 0.01 * BIN_CAPACITY  # E.g., 1% of bin capacity\n    FRAGMENTATION_ZONE_HIGH = 0.10 * BIN_CAPACITY # E.g., 10% of bin capacity\n    FRAGMENTATION_PENALTY_MAGNITUDE = 5.0 # How much to penalize fragmentation\n\n    # Define what constitutes a \"small item\". Behavior changes for such items.\n    SMALL_ITEM_THRESHOLD = 0.20 * BIN_CAPACITY # E.g., items smaller than 20% of bin capacity\n\n    # Apply Perfect Fit Bonus: If the item perfectly fills a bin, it's the absolute best.\n    perfect_fit_mask = (valid_remaining_space == 0)\n    priorities[can_fit_mask][perfect_fit_mask] += PERFECT_FIT_BONUS\n\n    # Apply Near Perfect Fit Bonus: Reward bins that are almost perfectly filled.\n    # This differentiates a 0.001 remaining space from a 0.05 remaining space,\n    # making the tighter one preferred even if neither is exactly zero.\n    near_perfect_fit_mask = (valid_remaining_space > 0) & (valid_remaining_space < FRAGMENTATION_ZONE_LOW)\n    priorities[can_fit_mask][near_perfect_fit_mask] += NEAR_PERFECT_FIT_BONUS\n\n    # Fragmentation Avoidance Penalty (Adaptive):\n    # This penalty applies if placing the item would result in a remaining space\n    # that falls within the defined fragmentation zone.\n    # The penalty is primarily applied when the item itself is small, as placing\n    # a small item and leaving a medium-sized, awkward gap might be inefficient.\n    # For large items, a small remaining space usually just means the bin is well-filled,\n    # which is desirable, so we don't penalize.\n    fragmentation_zone_mask = (valid_remaining_space >= FRAGMENTATION_ZONE_LOW) & \\\n                              (valid_remaining_space < FRAGMENTATION_ZONE_HIGH)\n    \n    if item < SMALL_ITEM_THRESHOLD:\n        # Calculate a penalty that increases as the remaining space gets deeper into the\n        # fragmentation zone (from low to high threshold).\n        # This makes leaving a 0.02 gap slightly better than a 0.08 gap.\n        penalty_scale = (valid_remaining_space[fragmentation_zone_mask] - FRAGMENTATION_ZONE_LOW) / \\\n                        (FRAGMENTATION_ZONE_HIGH - FRAGMENTATION_ZONE_LOW + 1e-9) # Add epsilon to prevent div by zero\n        priorities[can_fit_mask][fragmentation_zone_mask] -= FRAGMENTATION_PENALTY_MAGNITUDE * penalty_scale\n\n    # Strategic Placement for Small Items (\"Worst Fit\" tendency):\n    # For very small items, sometimes it's better to place them in a bin that is\n    # currently more empty, to keep other partially-filled bins available for\n    # larger items to complete them. This helps consolidate small items into\n    # fewer bins and prevents creation of many partially-filled bins.\n    if item < SMALL_ITEM_THRESHOLD:\n        # Give a bonus proportional to the current remaining capacity of the bin.\n        # A bin with more space gets a higher bonus, pulling small items towards\n        # more empty bins. The magnitude of this bonus can be tuned.\n        emptiness_preference_bonus = 0.5 * (bins_remain_cap[can_fit_mask] / BIN_CAPACITY)\n        priorities[can_fit_mask] += emptiness_preference_bonus\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Hybrid Best Fit with explicit perfect fit priority and fullness bonus.\n    Prioritizes perfect fits, then combines inverse waste minimization with a\n    multiplicative bonus for bin fullness to encourage consolidation.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # 1. Identify bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Extract relevant data for bins that can fit, to avoid re-indexing.\n    relevant_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    potential_remain_after_fit = relevant_bins_remain_cap - item\n\n    # Epsilon for numerical stability, using a small standard machine epsilon.\n    epsilon = np.finfo(float).eps\n\n    # 2. Prioritize Perfect Fits: Assign a very high, distinct score.\n    # Use a tolerance for floating point comparisons, scaled by bin_capacity for robustness\n    # across different problem scales.\n    PERFECT_FIT_TOLERANCE = epsilon * bin_capacity \n    \n    # Mask for perfect fits *within the set of bins that can fit*.\n    perfect_fit_sub_mask = (np.abs(potential_remain_after_fit) < PERFECT_FIT_TOLERANCE)\n    \n    # A large, bin_capacity-scaled score ensures perfect fits are unequivocally dominant.\n    PERFECT_FIT_SCORE = 1e6 * bin_capacity \n    \n    # Assign perfect fit scores to the identified bins.\n    priorities[can_fit_mask][perfect_fit_sub_mask] = PERFECT_FIT_SCORE\n\n    # 3. Process Non-Perfect Fits: Apply the hybrid Best Fit + Fullness logic.\n    # Mask for non-perfect fits *within the set of bins that can fit*.\n    non_perfect_fit_sub_mask = ~perfect_fit_sub_mask\n\n    # Get the remaining waste and bin remaining capacities specifically for non-perfect fits.\n    remaining_waste_non_perfect = potential_remain_after_fit[non_perfect_fit_sub_mask]\n    bins_remain_cap_non_perfect = relevant_bins_remain_cap[non_perfect_fit_sub_mask]\n\n    # Primary Best Fit component: Inverse of (remaining_waste + epsilon).\n    # This gives disproportionately high scores to tighter (but not perfect) fits.\n    best_fit_score = 1.0 / (remaining_waste_non_perfect + epsilon)\n\n    # Bin Fullness component: Inverse of (bins_remain_cap + epsilon).\n    # This term gives higher scores to bins that are already more full (smaller bins_remain_cap),\n    # acting as a bias towards closing bins.\n    bin_fullness_score = 1.0 / (bins_remain_cap_non_perfect + epsilon)\n\n    # Weighting factor for the bin fullness bonus.\n    # A small alpha ensures that the primary Best Fit (waste minimization) remains dominant,\n    # but the fullness component provides a subtle, adaptive influence, encouraging bin closure.\n    alpha = 0.01  # Tunable parameter: Adjust based on desired balance.\n\n    # Combine: Multiply the best-fit score by a factor that increases with bin fullness.\n    # The '1.0 + alpha * ...' ensures the base best_fit_score is always present\n    # and is only amplified by the fullness, not replaced.\n    combined_score = best_fit_score * (1.0 + alpha * bin_fullness_score)\n\n    # Assign these combined scores to the corresponding non-perfect fit bins.\n    priorities[can_fit_mask][non_perfect_fit_sub_mask] = combined_score\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (15th), we see a stark contrast. The 1st ranked heuristic is a pure Best Fit approach, prioritizing bins that result in the least remaining capacity. In contrast, the 15th (worst unique) heuristic is a complex hybrid: it combines inverse waste best-fit, explicit perfect-fit prioritization, and a multiplicative bonus for bin fullness, all with constants scaled by `bin_capacity`. The best performance by the simplest heuristic suggests that for this problem, added complexity, especially through multiplicative scoring and multiple tuning parameters, may introduce instability or conflicting objectives that degrade overall performance.\n\nComparing (2nd) vs (13th), the second-best heuristic introduces fixed additive bonuses for exact fits and partially filled bins over the simple Best Fit. The 13th heuristic employs an inverse waste primary score, explicit perfect fit, and an *additive* consolidation bonus based on normalized current fullness, with `bin_capacity`-scaled constants. The ranking suggests that fixed, perhaps overly simplistic, additive bonuses (2nd) perform better than a more mathematically nuanced additive consolidation with inverse waste (13th). The non-adaptive nature of 2nd's bonuses might be less disruptive than the specific implementation of consolidation in 13th.\n\nComparing (1st) vs (2nd), the 1st heuristic uses a straightforward negative remaining capacity (Best Fit). The 2nd adds fixed additive bonuses for exact fits and preferring partially filled bins. The degradation from 1st to 2nd indicates that these fixed bonuses, while aiming for consolidation, might disrupt the optimal ordering of pure Best Fit, leading to suboptimal choices by favoring bins that are not the absolute tightest fit in all scenarios.\n\nComparing (2nd) vs (3rd), the 2nd relies on linear negative remaining capacity with fixed additive bonuses. The 3rd shifts to an inverse waste function, a strong perfect fit bonus, and an *adaptive* additive consolidation based on current bin fullness. The higher rank of 2nd suggests that while inverse waste and adaptive consolidation are theoretically powerful, their specific implementation and tuning (or lack thereof) in 3rd might have introduced too much sensitivity or an ineffective consolidation bias compared to 2nd's simpler approach.\n\nComparing (3rd) vs (4th), both heuristics employ an inverse waste function, strong perfect-fit prioritization, and an additive consolidation bias. The key difference in 4th is using `relative_fullness` (based on `max_rem_cap`) for its consolidation bias, rather than 3rd's simpler `current_bin_fullness`. The performance drop indicates that dynamically adapting the consolidation bias to the overall maximum remaining capacity (4th) was less effective than a bias solely based on the individual bin's current fullness (3rd), possibly due to the `max_rem_cap` metric being less indicative of optimal consolidation opportunities.\n\nComparing (4th) vs (5th), the 4th uses an inverse waste core with adaptive consolidation. The 5th returns to a scaled linear Best Fit component but critically introduces an adaptive penalty for creating \"fragmented\" small remaining spaces. The lower rank of 5th suggests that its linear Best Fit scoring might be less effective than inverse waste, or that the fragmentation penalty, while conceptually sound, might be overly aggressive or poorly calibrated, leading to the selection of less optimal bins.\n\nComparing (5th) vs (6th), the 5th heuristic focuses on linear Best Fit with fragmentation avoidance. The 6th is a highly complex multi-objective heuristic with linear Best Fit, perfect/near-perfect bonuses, adaptive fragmentation avoidance specific to small items, and a \"worst-fit\" tendency for small items to preserve space for larger items. The significantly lower rank of 6th strongly indicates that its highly nuanced and multi-faceted adaptive logic, with many parameters and potentially conflicting objectives (like worst-fit for small items vs. general best-fit), made it less robust and less effective than simpler strategies.\n\nComparing (6th) vs (7th), the very complex 6th is outperformed by the 7th heuristic. The 7th simplifies by focusing on an inverse waste base, a perfect fit bonus, and a *severe* fixed penalty for small gaps. This suggests that a targeted, strong penalty for unequivocally bad states (like very small, unusable gaps), combined with a powerful inverse waste mechanism, can be more effective than a broadly adaptive, complex approach.\n\nComparing (7th) vs (8th), the 7th uses inverse waste for its base, while 8th reverts to a simpler negative remaining space (linear Best Fit). Both apply penalties for fragmentation, but 8th also adds a bonus for leaving *large usable gaps*. The ranking suggests that 8th's linear Best Fit is less effective than inverse waste for driving optimal tight fits, and its \"large gap bonus\" might encourage suboptimal bin usage if better, tighter fits exist, thus performing worse than 7th.\n\nComparing (8th) vs (11th), the 8th uses linear Best Fit with additive adjustments. The 11th returns to the inverse waste primary component and introduces a *multiplicative* bonus for bin fullness. The degradation in rank from 8th to 11th indicates that the multiplicative fullness bonus, despite aiming for consolidation, may be too sensitive or poorly controlled compared to additive adjustments, leading to less stable and effective prioritization.\n\nComparing (11th) vs (13th), both use inverse waste and perfect fit. The 11th applies a multiplicative fullness bonus without `bin_capacity` scaling. The 13th uses an additive consolidation bonus based on normalized fullness, crucially introducing `bin_capacity`-scaled constants. The fact that 13th performs worse than 11th, despite the seemingly better practice of `bin_capacity` scaling, suggests that the additive consolidation, or its specific `CONSOLIDATION_FACTOR`, was less effective for the problem than the multiplicative one from 11th, or that the parameter values in 13th were not well-tuned.\n\nComparing (13th) vs (15th), both are scaled by `bin_capacity` and feature inverse waste and perfect fit. The key difference is the consolidation bonus: 13th uses an *additive* factor based on normalized current fullness, while 15th uses a *multiplicative* factor based on inverse remaining capacity. The worse performance of 15th confirms the pattern observed earlier: multiplicative bonuses, even with scaling, tend to be less robust and harder to tune than additive ones, potentially leading to less effective heuristics.\n\nOverall: The consistent pattern is that simpler heuristics, particularly those leveraging a robust Best Fit (negative remaining space), tend to outperform more complex multi-objective heuristics with many tunable parameters and intricate interaction rules. Attempts to introduce \"smart\" adaptive behaviors, multiple bonuses, or multiplicative scoring often lead to worse performance, likely due to increased sensitivity, conflicting objectives, or insufficient parameter tuning for the specific problem distribution. Explicitly overriding scores for \"perfect fits\" is a generally good practice.\n- \nHere's a redefined 'Current self-reflection':\n\n*   **Keywords**: Emergent Behavior, Local Rules, State Evolution, Information Flow.\n*   **Advice**: Design heuristics with minimal, local decision rules where desired global outcomes emerge from their aggregate application. Focus on how problem state changes meaningfully propagate to inform subsequent choices.\n*   **Avoid**: Hardcoding explicit global objectives or dynamic parameter adjustments that react to problem state. Do not rely on specific numerical stability mechanisms (e.g., epsilon, infinity) or predefined \"best fit\" criteria.\n*   **Explanation**: Powerful heuristics often arise from simple, iterative processes where decisions progressively shape the problem state, rather than from pre-engineered complex strategies or numerical safeguards.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}