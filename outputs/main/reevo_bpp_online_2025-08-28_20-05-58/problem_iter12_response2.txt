```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Relative capacity: how much of the bin is available for this item?
    relative_capacity = bins_remain_cap / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priorities = 1.0 / (np.abs(relative_capacity - (item / bins_remain_cap)) + 1e-9)

    # Reward higher utilization
    priorities[bins_remain_cap > item * 1.2] += 0.2
    priorities[bins_remain_cap > item * 0.8] += 0.1

    # Gently penalize almost-full bins
    priorities[bins_remain_cap < item * 0.5] -= 0.1

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
