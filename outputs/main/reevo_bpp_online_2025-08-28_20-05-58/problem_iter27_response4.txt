```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1  # Assign a very low priority to infeasible bins

    # Inverse distance weighting to remaining capacity for feasible bins
    distances = np.abs(bins_remain_cap[feasible_bins] - item)
    priorities[feasible_bins] = 1.0 / (distances + 1e-9)

    # Reward spaciousness (relative to item size)
    priorities[feasible_bins & (bins_remain_cap > item * 1.5)] += 0.1

    # Reward near-full bins (relative to item size)
    priorities[feasible_bins & (bins_remain_cap < item * 0.5)] += 0.15
    
    return priorities
```
