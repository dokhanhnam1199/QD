```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the relative fit (how well the item fits in each bin)
    fit = bins_remain_cap / item
    fit[bins_remain_cap < item] = 0.0  # Penalize bins that are too small

    # Base priority: Prefer bins with a good fit
    priorities = fit

    # Reward spacious bins (moderate utilization)
    priorities[bins_remain_cap > item * 1.5] += 0.1

    # Gently nudge towards filling bins that are already partially used
    priorities[bins_remain_cap < item * 0.5] += 0.05

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
