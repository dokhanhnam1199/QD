```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    if np.sum(valid_bins) == 0:
        return np.zeros_like(bins_remain_cap)

    # Distance to full
    distances = np.abs(bins_remain_cap[valid_bins] - item)
    
    # Ratio of item size to bin remaining capacity
    ratios = item / bins_remain_cap[valid_bins]

    # Combine distance and ratio.  Prioritize smaller ratios (better fit)
    # and smaller distances (less wasted space).
    priority_scores = np.exp(-distances - 2 * ratios)  # Adjust weighting as needed
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = priority_scores
    
    probabilities = priorities / np.sum(priorities)
    return probabilities
```
