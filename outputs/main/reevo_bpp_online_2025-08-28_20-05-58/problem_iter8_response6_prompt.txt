{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Compatibility score: 1 if item fits, 0 otherwise\n    compatibility = (bins_remain_cap >= item).astype(float)\n\n    # Distance from item size to remaining capacity\n    distances = np.abs(bins_remain_cap - item)\n\n    # Normalize distances to be between 0 and 1\n    normalized_distances = distances / np.max(distances) if np.max(distances) > 0 else distances\n\n    # Combine compatibility and normalized distance\n    # Higher score for compatible bins with smaller distances\n    priorities = compatibility * np.exp(-normalized_distances)\n\n    # Normalize priorities to create a probability distribution\n    probabilities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else priorities\n    return probabilities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Calculate the absolute difference between item size and bin remaining capacity\n    diffs = np.abs(bins_remain_cap - item)\n\n    # Calculate inverse distance to remaining capacity with a small offset\n    priorities = 1.0 / (diffs + 1e-6)\n\n    # Boost bins with significantly more capacity\n    priorities[bins_remain_cap > item * 1.5] += 0.3\n\n    # Penalize bins that are almost full (reduce fragmentation)\n    priorities[bins_remain_cap < item * 0.5] -= 0.2\n\n    # Ensure non-negative priorities\n    priorities = np.maximum(priorities, 0.0)\n    return priorities\n\n[Reflection]\nFocus on inverse distance, capacity boosting, & fragmentation penalties\u2014balance utilization & avoiding small gaps.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}