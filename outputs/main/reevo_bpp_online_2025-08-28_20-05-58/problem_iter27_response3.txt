```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Feasibility check: only consider bins with enough capacity
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = 1.0 / (np.abs(bins_remain_cap[feasible_bins] - item) + 1e-9)

    # Reward spaciousness and near-full bins
    relative_capacity = bins_remain_cap / (bins_remain_cap.max() + 1e-9) # Avoid div by zero if all bins are empty
    priorities[relative_capacity > 0.6] += 0.1 * relative_capacity[relative_capacity > 0.6]
    priorities[relative_capacity < 0.4] += 0.05 * relative_capacity[relative_capacity < 0.4]

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
