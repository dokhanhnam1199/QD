{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Probability of choosing a random bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Calculate the 'greedy' priority: how much space remains after putting the item in\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] = bins_remain_cap[valid_bins] - item\n\n    # Apply epsilon-greedy strategy\n    if np.random.rand() < epsilon:\n        # Choose a bin randomly (from bins that can fit the item)\n        if np.any(valid_bins):\n            random_bin_index = np.random.choice(np.where(valid_bins)[0])\n            priorities = np.zeros_like(bins_remain_cap)\n            priorities[random_bin_index] = 1.0  # Assign highest priority to the random bin\n    else:\n        # Use the greedy priorities\n        pass\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero and negative capacities.\n    valid_bins = bins_remain_cap > 0\n    bins_remain_cap_valid = bins_remain_cap[valid_bins]\n\n    # Sigmoid Fit Score:  Fit = 1 / (1 + exp(-k * (capacity - item)))\n    # We want to find a 'k' that balances exploration and exploitation.\n    # A larger k favors bins where the item fits tightly.  A smaller k is more exploratory.\n    k = 5.0  # Adjusted k value. Empirically determined. Higher value, tighter fit preferred\n\n    fit_scores = 1 / (1 + np.exp(-k * (bins_remain_cap_valid - item)))\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = fit_scores\n\n    return priorities\n\n[Reflection]\nPrioritize tighter fits, explore strategically (like sigmoid), and validate bin capacities consistently.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}