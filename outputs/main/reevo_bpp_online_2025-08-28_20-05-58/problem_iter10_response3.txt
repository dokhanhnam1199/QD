```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    distances = np.abs(bins_remain_cap - item)
    
    # Base priority: inverse of distance to full capacity
    priorities = 1.0 / (distances + 1e-9)

    # Boost bins with ample remaining capacity (more than twice the item size)
    priorities[bins_remain_cap > item * 2] += 0.5

    # Further boost bins where item fits perfectly or nearly perfectly
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 1.0

    # Boost bins where item fits well proportionally
    good_fit = (bins_remain_cap >= item * 0.8) & (bins_remain_cap <= item * 2)
    priorities[good_fit] += 0.3

    # Slightly penalize bins that are almost full
    priorities[distances < item * 0.1] -= 0.2

    # Penalize bins that are much larger than the item
    priorities[bins_remain_cap > item * 5] -= 0.1
    
    return priorities
```
