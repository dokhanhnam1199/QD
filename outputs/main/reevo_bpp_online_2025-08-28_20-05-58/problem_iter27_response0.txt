```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Feasibility check first
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = 1.0 / (np.abs(bins_remain_cap[feasible_bins] - item) + 1e-9)

    # Reward spaciousness and near-full bins
    relative_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else bins_remain_cap
    spacious_bonus = 0.1 * np.exp(-(relative_capacity - 0.8)**2 / 0.02)  # Peak at 80%
    near_full_bonus = 0.1 * np.exp(-(relative_capacity - 0.2)**2 / 0.02)  # Peak at 20%
    priorities[feasible_bins] += spacious_bonus[feasible_bins] + near_full_bonus[feasible_bins]

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
