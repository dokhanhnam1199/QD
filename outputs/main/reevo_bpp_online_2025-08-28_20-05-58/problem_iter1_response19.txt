```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the fit score for each bin (how well the item fits in the bin)
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    
    # Apply Softmax to the fit scores to get the priorities
    # Add a small constant to avoid division by zero
    exp_scores = np.exp(fit_scores / 0.1)
    
    # Normalize the exponential scores to get probabilities (priorities)
    priorities = exp_scores / np.sum(exp_scores)
    
    return priorities
```
