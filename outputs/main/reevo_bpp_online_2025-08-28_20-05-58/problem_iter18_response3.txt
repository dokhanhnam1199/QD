```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Inverse distance

    # Reward spacious bins
    priorities[bins_remain_cap > item * 2] += 0.05

    # Reward near-full utilization
    priorities[bins_remain_cap < item * 0.5] += 0.05

    # Ensure non-negative priorities
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
