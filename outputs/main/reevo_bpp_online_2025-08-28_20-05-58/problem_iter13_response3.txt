```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate how well the item fits into each bin
    fit = bins_remain_cap / item
    fit = np.clip(fit, 0.0, 3.0)  # Cap fit at 3.0 to avoid extreme values

    # Reward good fits (close to 1.0)
    priorities = np.exp(-((fit - 1.0) ** 2) / 0.2)

    # Reward spacious bins (remaining capacity > item size)
    priorities[bins_remain_cap > item] += 0.1

    # Gently nudge towards moderate utilization (avoiding very full bins)
    priorities[bins_remain_cap < item * 0.5] += 0.05

    return priorities
```
