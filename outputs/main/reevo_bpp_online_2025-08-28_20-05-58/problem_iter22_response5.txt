```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Prioritize bins where the item fits
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        remaining_after_add = bins_remain_cap[fit_bins] - item
        priorities[fit_bins] = 1.0 / (remaining_after_add + 1e-9)  # Inverse remaining capacity

    # Reward bins with ample remaining capacity (not too full)
    priorities[bins_remain_cap > item * 1.2] += 0.5

    # Reward bins where the item fits very well (small gap)
    priorities[np.abs(bins_remain_cap - item) < item * 0.2] += 1.0

    # Add a small constant to all bins to avoid zero priorities and encourage exploration
    priorities += 0.001
    return priorities
```
