```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Feasibility check - prioritize bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = 1.0

    # Reward spaciousness (normalized to avoid dominance)
    spaciousness_bonus = (bins_remain_cap[feasible_bins] - item) / item
    priorities[feasible_bins] += 0.1 * spaciousness_bonus

    # Reward near-full bins (normalized to avoid dominance)
    near_full_bonus = (item) / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += 0.1 * near_full_bonus

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    
    return priorities
```
