```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Boost priority for bins where item fits well (not too tight, not too loose)
    priorities[(bins_remain_cap >= item * 0.7) & (bins_remain_cap <= item * 1.3)] += 1.0

    # Reduce priority for overly spacious bins
    priorities[bins_remain_cap > item * 2.0] -= 0.5

    priorities = np.maximum(priorities, 0.0)
    return priorities
```
