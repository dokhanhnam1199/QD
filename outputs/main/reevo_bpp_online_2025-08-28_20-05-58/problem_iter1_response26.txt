```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin. Fit score = remaining_capacity / item_size
    fit_scores = bins_remain_cap / item

    # Apply a sigmoid function to the fit scores to scale them between 0 and 1.
    # The sigmoid function is defined as: sigmoid(x) = 1 / (1 + exp(-x))
    # We use a scaling factor of 1.0 to control the steepness of the sigmoid curve.  This can be tuned.
    scaled_fit_scores = 1.0 / (1.0 + np.exp(-1.0 * fit_scores))

    # Prioritize bins with higher sigmoid-scaled fit scores.
    priorities = scaled_fit_scores

    return priorities
```
