```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit score: Higher for tighter fits, but not *too* tight
    fit_score = np.exp(-((bins_remain_cap - item) ** 2) / (2 * item**2))

    # Spaciousness bonus: Reward bins with enough space, scaled by remaining capacity
    spaciousness_bonus = np.where(bins_remain_cap > item, bins_remain_cap / item, 0.0) * 0.2

    # Avoid almost full bins: Penalize bins that are nearly full
    fullness_penalty = np.where(bins_remain_cap < item * 0.2, -0.5, 0.0)

    # Combine scores
    priorities = fit_score + spaciousness_bonus + fullness_penalty

    return priorities
```
