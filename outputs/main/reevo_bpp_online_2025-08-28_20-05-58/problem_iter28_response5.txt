```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasible Fit: Inverse distance to remaining capacity.
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        priorities[fit_bins] = 1.0 / (bins_remain_cap[fit_bins] - item + 1e-9)

    # Spaciousness: Reward bins with ample remaining capacity.
    spacious_bins = bins_remain_cap > item * 1.5
    priorities[spacious_bins] += 0.8

    # Near-full: Prioritize filling bins almost completely.
    near_full_bins = np.abs(bins_remain_cap - item) < item * 0.3
    priorities[near_full_bins] += 1.5

    # Tight fit bonus:  Increase priority for bins where the item fits very snugly
    tight_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap < item * 1.1)
    priorities[tight_fit_bins] += 0.5
    

    return priorities
```
