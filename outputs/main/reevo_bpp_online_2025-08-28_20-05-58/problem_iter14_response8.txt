```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate relative capacity (avoiding division by zero)
    relative_capacity = bins_remain_cap / (bins_remain_cap + 1e-9)

    # Smoothly reward bins where the item fits well
    fit_score = np.exp(-((relative_capacity - (item / bins_remain_cap))**2) / 0.05)
    priorities = fit_score

    # Encourage utilization - reward bins that aren't too full or too empty
    utilization_reward = np.exp(-((bins_remain_cap / 1.0) - (item + bins_remain_cap / 2.0))**2 / 0.2)
    priorities += 0.2 * utilization_reward

    # Gently penalize almost-full bins
    priorities[bins_remain_cap < item * 0.2] -= 0.1

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
