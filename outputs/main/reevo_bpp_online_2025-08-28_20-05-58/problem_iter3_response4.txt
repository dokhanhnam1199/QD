```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item  # Only consider bins that can fit the item

    if np.any(valid_bins):
        distances = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1.0 / (distances + 1e-6)  # Inverse distance
        # Add a bonus for exact fits
        exact_fit_indices = np.where(distances == 0)[0]
        if len(exact_fit_indices) > 0:
            priorities[valid_bins[exact_fit_indices]] += 1.0  # Higher priority for exact fits

    return priorities
```
