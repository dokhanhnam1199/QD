```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1.0

    # Second best, bins that can fit the item, prioritize based on less remaining capacity.
    # This strategy attempts to fill bins more completely.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
        remaining_capacities = bins_remain_cap[fit_indices]
        # Inverse of remaining capacity: smaller capacity = higher priority
        priorities[fit_indices] = 1.0 / (remaining_capacities + 1e-6)  # Add a small value to avoid division by zero

    return priorities
```
