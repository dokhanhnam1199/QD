```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Inverse distance to item size
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Reward spaciousness (large remaining capacity, relative to item size)
    priorities += 0.5 * (bins_remain_cap / (item + 1e-9))

    # Reward near-full utilization (small remaining capacity) - more aggressive
    priorities += 0.3 * (1.0 / (bins_remain_cap + 1e-9))

    # Penalize bins that are too small
    priorities[bins_remain_cap < item] = 0.0

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
