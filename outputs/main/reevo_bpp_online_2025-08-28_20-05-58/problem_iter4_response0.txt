```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0
    # Prioritize bins where the item fits, minimizing waste
    fit = (bins_remain_cap >= item)
    if np.any(fit):
        waste = bins_remain_cap[fit] - item
        # Inverse of waste: smaller waste = higher priority
        priorities[fit] = 1.0 / (waste + 1e-6)

    # Incorporate bin fullness awareness: prefer less full bins
    # Normalize remaining capacity to a 0-1 scale
    fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    # Add a bonus for less full bins, scaled by a factor
    priorities += 0.1 * fullness
    
    return priorities
```
