```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1.0

    # Second best, bins that can fit the item, prioritize based on less remaining capacity.
    # This strategy attempts to fill bins more completely.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
        remaining_capacities = bins_remain_cap[fit_indices]
        # Inverse of remaining capacity: smaller capacity = higher priority
        priorities[fit_indices] = 1.0 / (remaining_capacities + 1e-6)

    # Further refinement:  Introduce a diversity factor.  If many bins have similar
    # remaining capacity, we want to spread items across them.
    # This is a very simple attempt at bin diversity, prioritizing bins with more unique remaining capacity
    # This could be improved with more sophisticated methods like calculating the number of bins
    # within a certain capacity range.
    
    # Calculate the average remaining capacity.
    avg_remaining_cap = np.mean(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else 0.0

    # Bins with remaining capacity closest to the average get a slight boost.
    if avg_remaining_cap > 0:
      diffs = np.abs(bins_remain_cap[fit_indices] - avg_remaining_cap)
      min_diff_index = np.argmin(diffs)
      priorities[fit_indices[min_diff_index]] += 0.1
      

    return priorities
```
