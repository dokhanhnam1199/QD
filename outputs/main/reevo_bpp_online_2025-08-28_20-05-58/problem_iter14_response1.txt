```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Inverse distance

    # Boost bins with ample remaining capacity
    priorities[bins_remain_cap > item * 1.5] += 0.5

    # Further boost bins where item fits very well
    priorities[np.abs(bins_remain_cap - item) < item * 0.1] += 1.0

    # Add a small constant to all bins
    priorities += 0.01

    return priorities
```
