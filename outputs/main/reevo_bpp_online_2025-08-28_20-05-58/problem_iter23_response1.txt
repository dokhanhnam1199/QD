```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Fit score: Prefer bins where the item fits well
    fit_score = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + 1e-9), 0.0)
    priorities = fit_score

    # Relative capacity bonus: Reward bins that are neither too empty nor too full
    remaining_ratio = bins_remain_cap / np.max(bins_remain_cap)
    
    # Give a small bonus to bins with remaining capacity between 0.25 and 0.75
    bonus = np.where((remaining_ratio >= 0.25) & (remaining_ratio <= 0.75), 0.1, 0.0)
    priorities += bonus

    # Gentle reward for near-full bins, but only if they can still fit the item
    near_full_bonus = np.where((bins_remain_cap < item * 0.1) & (bins_remain_cap >= item), 0.05, 0.0)
    priorities += near_full_bonus
    
    return priorities
```
