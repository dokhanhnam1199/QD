```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate relative fit: how close is the item size to the bin's remaining capacity?
    relative_fit = np.abs(bins_remain_cap - item) / item
    
    # Invert relative fit to get a basic priority: smaller relative fit -> higher priority
    priorities = 1.0 / (relative_fit + 1e-9)
    
    # Penalize bins that are extremely spacious or nearly empty
    priorities[bins_remain_cap > item * 3.0] -= 0.5
    priorities[bins_remain_cap < item * 0.5] -= 0.3
    
    # Boost priority for bins where item fits reasonably well
    priorities[(bins_remain_cap >= item * 0.8) & (bins_remain_cap <= item * 1.2)] += 0.7

    priorities = np.maximum(priorities, 0.0)
    return priorities
```
