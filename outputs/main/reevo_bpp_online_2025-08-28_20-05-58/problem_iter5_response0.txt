```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1000.0  # High priority for exact fits

    # Calculate priority for other bins
    feasible_bins = bins_remain_cap >= item
    distances = bins_remain_cap[feasible_bins] - item
    
    if len(distances) > 0:
        # Inverse distance with softmax for smoother scoring
        priorities[feasible_bins] = 1.0 / (distances + 1e-6)
        
        # Softmax normalization for probabilities
        priorities[feasible_bins] = np.exp(priorities[feasible_bins] - np.max(priorities[feasible_bins]))
        priorities[feasible_bins] /= np.sum(np.exp(priorities[feasible_bins] - np.max(priorities[feasible_bins])))
        
    return priorities
```
