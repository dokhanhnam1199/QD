{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate how well the item fits into each bin\n    fit = bins_remain_cap / item\n    fit = np.clip(fit, 0.0, 3.0)  # Cap fit at 3.0 to avoid extreme values\n\n    # Reward good fits (close to 1.0)\n    priorities = np.exp(-((fit - 1.0) ** 2) / 0.2)\n\n    # Reward spacious bins (remaining capacity > item size)\n    priorities[bins_remain_cap > item] += 0.1\n\n    # Gently nudge towards moderate utilization (avoiding very full bins)\n    priorities[bins_remain_cap < item * 0.5] += 0.05\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Inverse distance to remaining capacity\n    distances = np.abs(bins_remain_cap - item)\n    priorities = 1.0 / (distances + 1e-9)\n\n    # Perfect fit bonus\n    perfect_fit_mask = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit_mask] += 1.0\n\n    # Spacious bin bonus\n    spacious_mask = bins_remain_cap > item * 1.5\n    priorities[spacious_mask] += 0.3\n\n    # Bonus for bins with enough space, but not too much\n    good_fit_mask = (bins_remain_cap >= item * 0.8) & (bins_remain_cap <= item * 2)\n    priorities[good_fit_mask] += 0.2\n\n    return priorities\n\n[Reflection]\nPrioritize tighter fits, reward spaciousness, and avoid overly full or empty bins\u2014balance is key!\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}