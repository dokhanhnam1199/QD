```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Fit (Inverse distance to ideal)
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Avoid division by zero
    
    # Weighted remaining capacity - encourage bins that aren't too empty or too full
    priorities += bins_remain_cap / (item + 1e-9)
    
    # Gently reward spaciousness and near-full bins
    priorities[bins_remain_cap > item * 1.5] += 0.1
    priorities[bins_remain_cap < item * 0.5] += 0.1
    
    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    
    return priorities
```
