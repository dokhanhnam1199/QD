```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate relative capacity
    relative_cap = bins_remain_cap / bins_remain_cap.max()
    
    # Reward bins with enough capacity
    priorities[relative_cap >= item] = 1.0 / (item - bins_remain_cap[relative_cap >= item])
    
    # Reward spacious bins
    priorities[relative_cap > 0.75] += 0.1
    
    # Reward near-full bins
    priorities[relative_cap < 0.25] += 0.05
    
    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    
    return priorities
```
