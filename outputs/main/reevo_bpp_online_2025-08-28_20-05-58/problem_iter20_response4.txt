```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Inverse distance

    # Reward bins where the item fits well (smooth reward)
    fit_reward = np.exp(-((bins_remain_cap - item) ** 2) / (item ** 2 + 1e-9))
    priorities += 0.4 * fit_reward

    # Reward bins with moderate utilization
    utilization = bins_remain_cap / 1.0  # Assuming bin capacity is 1.0
    utilization_reward = np.exp(-((utilization - 0.6) ** 2) / 0.05)  # Center around 0.6
    priorities += 0.3 * utilization_reward

    # Penalize bins that are almost full to prevent fragmentation
    priorities[bins_remain_cap < item * 0.2] -= 0.6

    priorities = np.maximum(priorities, 0.0)
    return priorities
```
