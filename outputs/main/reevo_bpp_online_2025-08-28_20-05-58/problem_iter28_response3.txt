```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Feasible bins only
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    # Inverse distance to remaining capacity
    distances = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = 1.0 / (distances + 1e-9)

    # Slight preference for bins with more remaining capacity (avoiding very full bins)
    priorities[feasible_bins] += bins_remain_cap[feasible_bins] / (bins_remain_cap[feasible_bins].max() + 1e-9) * 0.1

    return priorities
```
