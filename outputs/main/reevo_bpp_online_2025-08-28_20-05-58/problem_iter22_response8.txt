```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Fit: Inverse distance to item size.
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Gentle rewards for specific remaining capacity ranges.
    # Reward bins with enough space, but not excessively large.
    priorities[np.logical_and(bins_remain_cap >= item * 1.05, bins_remain_cap < item * 1.5)] += 0.05
    # Reward bins that are nearly full.
    priorities[np.logical_and(bins_remain_cap < item * 1.1, bins_remain_cap >= item * 0.9)] += 0.07

    # Penalize bins that are too small
    priorities[bins_remain_cap < item] = 0.0

    # Ensure priorities are non-negative.
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
