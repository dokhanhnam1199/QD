```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Fit: Inverse distance to remaining capacity
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Avoid division by zero

    # Utilization bonus: Encourage filling bins, but scaled by remaining capacity
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] > item:
            priorities[i] += 0.02 * (bins_remain_cap[i] / item - 1)
        
    # Small gap bonus
    if np.any(np.abs(bins_remain_cap - item) < item * 0.2):
        priorities[np.abs(bins_remain_cap - item) < item * 0.2] += 0.05
    

    return priorities
```
