```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the 'fit' score - how well the item fits into the remaining capacity.
    fit_score = item / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priorities = fit_score

    # Reward bins where the item fits well (close to perfect fit).
    priorities[np.abs(fit_score - 1.0) < 0.1] += 0.3

    # Reward spacious bins (more remaining capacity).
    priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.1

    # Penalize almost full bins gently. Avoid strong penalties.
    priorities[bins_remain_cap < item * 0.2] -= 0.05

    # Ensure priorities are non-negative.
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
