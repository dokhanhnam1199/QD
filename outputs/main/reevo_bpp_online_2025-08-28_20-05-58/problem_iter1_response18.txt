```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of choosing a random bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the 'greedy' priority: how much space remains after putting the item in
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = bins_remain_cap[valid_bins] - item

    # Apply epsilon-greedy strategy
    if np.random.rand() < epsilon:
        # Choose a bin randomly (from bins that can fit the item)
        if np.any(valid_bins):
            random_bin_index = np.random.choice(np.where(valid_bins)[0])
            priorities = np.zeros_like(bins_remain_cap)
            priorities[random_bin_index] = 1.0  # Assign highest priority to the random bin
    else:
        # Use the greedy priorities
        pass
        
    return priorities
```
