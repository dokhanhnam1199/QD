```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate absolute differences between item size and remaining capacity
    distances = np.abs(bins_remain_cap - item)
    
    # Assign priority based on inverse distance, adding a small offset
    priorities = 1.0 / (distances + 1e-9)

    # Boost bins with ample remaining capacity (more than twice the item size)
    priorities[bins_remain_cap > item * 2] += 0.3 

    # Further boost bins where item fits perfectly or nearly perfectly
    priorities[np.abs(bins_remain_cap - item) < 1e-6] += 0.7

    return priorities
```
