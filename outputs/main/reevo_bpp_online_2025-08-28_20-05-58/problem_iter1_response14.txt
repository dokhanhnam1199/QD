```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Using Exact Fit First strategy. Prioritize bins where the item fits exactly.
    If no exact fit, prioritize bins with the smallest remaining capacity.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    if len(exact_fit_indices) > 0:
        priorities[exact_fit_indices] = 1.0  # Highest priority for exact fits
    else:
        # If no exact fit, prioritize bins with the smallest remaining capacity
        sorted_indices = np.argsort(bins_remain_cap)
        for i, index in enumerate(sorted_indices):
            if bins_remain_cap[index] >= item:
                priorities[index] = 1.0 / (i + 1)  # Higher priority for smaller remaining capacities
    return priorities
```
