```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Inverse distance weighting to remaining capacity
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Reward spacious bins
    priorities[bins_remain_cap > item * 1.75] += 0.15

    # Reward near-full utilization (but not *too* full)
    priorities[bins_remain_cap < item * 0.75] += 0.1

    # Penalize bins that are almost exactly the size of the item
    priorities[np.abs(bins_remain_cap - item) < item * 0.1] -= 0.05

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
