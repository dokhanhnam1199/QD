```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Fit: Prioritize bins where the item fits
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0 / (bins_remain_cap[fit_mask] - item + 1e-9)
    
    # Relative Capacity: Reward bins where the item uses a significant portion
    # but avoid extremely small bins
    relative_capacity = item / bins_remain_cap
    relative_capacity = np.clip(relative_capacity, 0.05, 0.95)
    priorities[fit_mask] += relative_capacity
    
    # Spaciousness: Small bonus for bins with ample space
    priorities[bins_remain_cap > item * 1.5] += 0.05
    
    # Near-full bins: Small bonus for almost full bins
    priorities[bins_remain_cap < item * 0.5] += 0.02
    
    return priorities
```
