```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where item fits well (close to remaining capacity)
    fit_score = np.exp(-((bins_remain_cap - item)**2) / (bins_remain_cap**2 + 1e-9))
    priorities = fit_score
    
    # Reward bins that are medium full
    medium_full_reward = np.exp(-((bins_remain_cap / 1.0) - (item + bins_remain_cap / 2.0))**2 / 0.2)
    priorities += 0.2 * medium_full_reward

    # Penalize almost-full bins
    priorities[bins_remain_cap < item * 0.2] -= 0.1
    
    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    
    return priorities
```
