```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the absolute difference between item size and bin remaining capacity
    diffs = np.abs(bins_remain_cap - item)

    # Calculate inverse distance to remaining capacity with a small offset
    priorities = 1.0 / (diffs + 1e-6)

    # Boost bins with significantly more capacity
    priorities[bins_remain_cap > item * 1.5] += 0.3

    # Penalize bins that are almost full (reduce fragmentation)
    priorities[bins_remain_cap < item * 0.5] -= 0.2

    # Ensure non-negative priorities
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
