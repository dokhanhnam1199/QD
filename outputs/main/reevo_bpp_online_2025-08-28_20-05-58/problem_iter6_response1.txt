```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-6)
    
    # Scale priorities to avoid extremely high values for very small distances
    scaled_priorities = np.sqrt(priorities)

    # Softmax to get probabilities for more stable selection
    exp_priorities = np.exp(scaled_priorities)
    probabilities = exp_priorities / np.sum(exp_priorities)

    return probabilities
```
