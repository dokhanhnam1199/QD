```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Fit: Inverse distance to remaining capacity
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Avoid division by zero

    # Relative Capacity: Encourage utilization, but gently
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] > item * 1.5:
            priorities[i] += 0.1  # Spacious bin bonus
        elif bins_remain_cap[i] < item * 0.5:
            priorities[i] += 0.05 # Near-full bonus (smaller reward)

    # Ensure non-negativity
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
