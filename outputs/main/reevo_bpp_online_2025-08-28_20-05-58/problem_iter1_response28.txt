```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Feasible bins only
    feasible_bins = bins_remain_cap >= item
    
    if np.sum(feasible_bins) == 0:
        return priorities  # No bin can accommodate the item
    
    # Greedy part: Best fit (highest remaining capacity)
    best_bin_index = np.argmax(bins_remain_cap[feasible_bins])
    greedy_priority = bins_remain_cap[feasible_bins][best_bin_index] 

    # Exploration part
    if np.random.rand() < epsilon:
        # Randomly choose a feasible bin
        random_bin_index = np.random.choice(np.where(feasible_bins)[0])
        priorities[random_bin_index] = greedy_priority * (1 + np.random.rand() * 0.5) 
    else:
        # Exploitation: Assign highest priority to best fit bin
        priorities[feasible_bins] = greedy_priority

    return priorities
```
