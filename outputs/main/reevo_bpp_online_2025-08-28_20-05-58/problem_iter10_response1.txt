```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)  # Inverse distance weighting

    # Reward spacious bins (more than 1.5 times the item size)
    priorities[bins_remain_cap > item * 1.5] += 0.15

    # Reward near-full utilization (less than 0.5 times the item size remaining)
    priorities[bins_remain_cap < item * 0.5] += 0.2

    # Penalize bins where the item is much larger than remaining capacity.
    priorities[bins_remain_cap < item * 0.2] -= 0.1

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
