```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Basic fit: prioritize bins where the item fits
    fit_bins = bins_remain_cap >= item
    priorities[fit_bins] = 1.0 / (bins_remain_cap[fit_bins] - item + 1e-9)

    # Encourage utilization - reward bins that aren't too empty or too full
    # Slightly reward bins with more remaining capacity (spaciousness)
    priorities[fit_bins] += bins_remain_cap[fit_bins] * 0.01

    # Slightly reward bins that are closer to being full
    priorities[fit_bins] += (1.0 - (bins_remain_cap[fit_bins] / np.max(bins_remain_cap))) * 0.05

    return priorities
```
