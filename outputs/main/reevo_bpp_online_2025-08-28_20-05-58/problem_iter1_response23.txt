```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the "almost full" threshold.  We consider bins that are within
    # item size of being full as high priority
    threshold = item 

    # Prioritize bins where the item fits
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = 1.0 

    # Among feasible bins, prioritize those that are close to full
    remaining_capacities = bins_remain_cap[feasible_bins]
    bin_fullness = 1.0 - (remaining_capacities / bins_remain_cap[feasible_bins]) #Ratio of how much is filled in each bin
    priorities[feasible_bins] += bin_fullness * 0.5

    return priorities
```
