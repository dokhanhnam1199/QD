```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between item size and bin remaining capacity
    distances = np.abs(bins_remain_cap - item)

    # Inverse distance weighting: tighter fits get higher priority
    priorities = 1.0 / (distances + 1e-9)  # Add a small value to avoid division by zero

    # Reward spacious bins (more remaining capacity)
    priorities += bins_remain_cap / (bins_remain_cap.max() + 1e-9)

    # Reward near-full utilization (but not so close as to cause issues)
    priorities += (bins_remain_cap - item) / (bins_remain_cap.max() + 1e-9) * 0.5

    # Penalize bins that are too small for the item
    priorities[bins_remain_cap < item] = 0.0

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
