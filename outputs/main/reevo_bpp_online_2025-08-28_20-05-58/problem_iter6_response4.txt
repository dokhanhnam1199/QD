```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Compatibility score: 1 if item fits, 0 otherwise
    compatibility = (bins_remain_cap >= item).astype(float)

    # Distance from item size to remaining capacity
    distances = np.abs(bins_remain_cap - item)

    # Normalize distances to be between 0 and 1
    normalized_distances = distances / np.max(distances) if np.max(distances) > 0 else distances

    # Combine compatibility and normalized distance
    # Higher score for compatible bins with smaller distances
    priorities = compatibility * np.exp(-normalized_distances)

    # Normalize priorities to create a probability distribution
    probabilities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else priorities
    return probabilities
```
