```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using Inverse Distance (Proximity Fit) strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the distance between the item size and the remaining capacity of each bin
    distances = np.abs(bins_remain_cap - item)
    
    # Avoid division by zero by adding a small constant to the distances
    distances = np.where(distances == 0, 1e-6, distances)
    
    # Calculate the inverse distance (proximity fit)
    priorities = 1.0 / distances
    
    return priorities
```
