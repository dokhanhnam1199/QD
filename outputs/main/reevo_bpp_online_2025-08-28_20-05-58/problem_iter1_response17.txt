```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Assign higher priority to bins where the item fits exactly
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1.0

    # Assign higher priority to bins with smaller remaining capacity
    # (Best-Fit decreasing heuristic influence)
    priorities += (bins_remain_cap - item) / bins_remain_cap

    # Add a small random noise to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001
    
    # Penalize bins that are almost full. This helps avoid creating new bins unnecessarily.
    priorities[bins_remain_cap < item*1.2] -=0.5 

    return priorities
```
