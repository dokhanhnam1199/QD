```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    # Assign a base priority to bins that can fit
    priorities[can_fit] = 1.0

    # Introduce a small random perturbation to the priority
    # This encourages exploration, but avoids excessive randomness
    random_noise = np.random.rand(len(bins_remain_cap)) * 0.1  # Adjust the factor for exploration intensity
    priorities[can_fit] += random_noise[can_fit]

    return priorities
```
