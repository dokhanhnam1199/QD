```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    distances = np.abs(bins_remain_cap - item)

    # Base priority: Inverse distance with a small offset
    priorities = 1.0 / (distances + 1e-9)

    # Boost for near-perfect fits
    priorities[distances < item * 0.05] += 2.0  # Higher boost than v1

    # Reward bins with ample remaining capacity
    priorities[bins_remain_cap > item * 2] += 0.75 # Higher boost than v1

    # Penalize bins that are too small - set priority to a very low value
    priorities[bins_remain_cap < item] = 1e-10

    # Add a small reward for higher remaining capacity, even if not ample
    priorities += bins_remain_cap / (item + 1e-6) * 0.25

    return priorities
```
