```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the ratio of item size to remaining bin capacity
    ratios = item / (bins_remain_cap + 1e-9)  # Avoid division by zero

    # Reward bins where the item fits well (ratio close to 1)
    priorities = np.exp(- (ratios - 1)**2 / 0.1)  # Gaussian-like reward

    # Encourage using more spacious bins
    priorities += 0.1 * (bins_remain_cap / np.max(bins_remain_cap))

    # Slight encouragement for bins with moderate utilization
    priorities[bins_remain_cap > item * 0.5] += 0.05

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
