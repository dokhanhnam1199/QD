```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_item = bins_remain_cap - item

    # Only consider bins where the item fits
    valid_bins = remaining_after_item >= 0

    # Initialize priorities to 0
    priorities = np.zeros_like(bins_remain_cap)

    # If no bins can fit the item, return the zeroed priorities
    if not np.any(valid_bins):
        return priorities

    # Calculate the waste (remaining capacity after adding the item) for valid bins
    waste = remaining_after_item[valid_bins]

    # Calculate the priority as the inverse of the waste.  Add a small constant
    # to avoid division by zero and to give a small, non-zero priority to bins with 0 waste
    priorities[valid_bins] = 1.0 / (waste + 1e-6)

    return priorities
```
