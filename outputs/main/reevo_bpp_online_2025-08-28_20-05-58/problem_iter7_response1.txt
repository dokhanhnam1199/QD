```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    capacities = np.array(bins_remain_cap, dtype=float)
    priorities = np.zeros_like(capacities)

    # Validate capacities (handle potential negative or zero values)
    capacities = np.maximum(capacities, 0.0)

    # Calculate absolute difference between item size and remaining capacity
    diffs = np.abs(capacities - item)

    # Inverse distance to remaining capacity, with small offset for stability
    priorities = 1.0 / (diffs + 1e-6)

    # Smoothness: Boost bins with sufficient remaining capacity
    priorities[capacities >= item * 1.5] += 0.2
    priorities[capacities >= item * 2.0] += 0.3

    # Further smoothing: Slight penalty for almost full bins
    priorities[diffs < item * 0.1] -= 0.1

    return priorities
```
