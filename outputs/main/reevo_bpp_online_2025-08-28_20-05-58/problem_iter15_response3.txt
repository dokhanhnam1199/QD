```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Fit: Prefer bins where the item fits
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0 / (bins_remain_cap[fit_mask] - item + 1e-9)

    # Spaciousness: Reward bins with ample remaining capacity
    spaciousness_reward = 0.1
    priorities[bins_remain_cap > item * 1.5] += spaciousness_reward

    # Near-full: Gently reward bins that are almost full
    near_full_reward = 0.1
    priorities[bins_remain_cap < item * 0.5] += near_full_reward

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
