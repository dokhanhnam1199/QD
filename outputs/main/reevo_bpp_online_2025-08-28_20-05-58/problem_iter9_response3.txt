```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between item size and bin remaining capacity
    diffs = bins_remain_cap - item
    
    # Inverse distance weighting.  Add a small constant to avoid division by zero.
    priorities = 1.0 / (np.abs(diffs) + 1e-9)

    # Reward spacious bins (more than enough capacity)
    priorities[bins_remain_cap > item * 1.5] += 0.2

    # Reward near-full utilization (but not overfull!)
    priorities[np.logical_and(bins_remain_cap >= item, bins_remain_cap < item * 1.2)] += 0.1

    # Penalize bins that are almost too small.
    priorities[bins_remain_cap < item * 0.5] -= 0.1

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
