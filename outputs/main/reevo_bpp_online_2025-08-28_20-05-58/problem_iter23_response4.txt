```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Fit score: how well the item fits in the bin
    fit_score = item / (bins_remain_cap + 1e-9)
    priorities = 1.0 - fit_score  # Higher score for better fit

    # Relative capacity bonus: reward bins that are neither too full nor too empty
    relative_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    bonus = np.exp(-((relative_cap - 0.5) ** 2) / 0.05)  # Gaussian centered at 0.5
    priorities += 0.1 * bonus

    # Small bonus for near-full bins (encourage closing bins)
    priorities[bins_remain_cap < item * 0.2] += 0.05
    
    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
