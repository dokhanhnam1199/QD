```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative capacities.
    valid_bins = bins_remain_cap > 0
    bins_remain_cap_valid = bins_remain_cap[valid_bins]

    # Sigmoid Fit Score:  Fit = 1 / (1 + exp(-k * (capacity - item)))
    # We want to find a 'k' that balances exploration and exploitation.
    # A larger k favors bins where the item fits tightly.  A smaller k is more exploratory.
    k = 5.0  # Adjusted k value. Empirically determined. Higher value, tighter fit preferred

    fit_scores = 1 / (1 + np.exp(-k * (bins_remain_cap_valid - item)))
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = fit_scores

    return priorities
```
