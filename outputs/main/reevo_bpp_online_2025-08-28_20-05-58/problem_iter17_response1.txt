```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Weighted remaining capacity and fit
    fit = item / bins_remain_cap
    fit = np.clip(fit, 0.0, 1.0)  # Ensure fit is between 0 and 1
    priorities = 0.6 * bins_remain_cap / (item + 1e-9) + 0.4 * fit

    # Reward spaciousness and near-full bins gently
    priorities[bins_remain_cap > item * 1.5] += 0.1
    priorities[bins_remain_cap < item * 0.5] += 0.05

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
