```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1e9  # A very high priority

    # Calculate the distance between the item size and the remaining capacity of each bin.
    distances = np.abs(bins_remain_cap - item)

    # Avoid division by zero and prioritize tighter fits
    priorities_temp = 1.0 / (distances + 1e-6)
    
    # Apply priorities to the remaining bins
    for i in range(len(bins_remain_cap)):
        if i not in exact_fit_indices:
            priorities[i] = priorities_temp[i]

    return priorities
```
