```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit: Inverse distance to ideal fit
    fit_bins = bins_remain_cap >= item
    priorities[fit_bins] = 1.0 / (bins_remain_cap[fit_bins] - item + 1e-9)

    # Ample space: Reward spaciousness
    ample_space = bins_remain_cap > item * 1.5
    priorities[ample_space] += 0.5

    # Near-full: Prioritize filling bins almost completely
    near_full = np.abs(bins_remain_cap - item) < item * 0.3
    priorities[near_full] += 1.0

    # Small bonus to all bins to encourage use, but diminish over time
    priorities += 0.001

    return priorities
```
