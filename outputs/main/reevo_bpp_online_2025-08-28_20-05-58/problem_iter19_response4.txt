```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Fit (inverse distance to ideal)
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Weighted remaining capacity - Reward spaciousness *and* near-full bins
    # Gentle rewards to avoid extremes.
    priorities[bins_remain_cap > item * 1.2] += 0.1  # Spacious
    priorities[bins_remain_cap < item * 0.8] += 0.15 # Near-full

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)

    return priorities
```
