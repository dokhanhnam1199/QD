```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Fit score: How well the item fits in the bin
    fit_score = item / (bins_remain_cap + 1e-9)
    priorities = 1.0 - fit_score  # Lower fit score means higher priority

    # Relative capacity bonus: Reward bins with reasonable remaining capacity
    # Encourage using spacious bins (but not excessively)
    spacious_bonus = np.where(bins_remain_cap > item * 1.5, 0.1, 0.0)
    # Gently reward near-full bins
    near_full_bonus = np.where(bins_remain_cap < item * 0.5, 0.05, 0.0)

    priorities += spacious_bonus + near_full_bonus

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
