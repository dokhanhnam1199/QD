```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Worst Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between bin capacity and item size
    diffs = bins_remain_cap - item
    
    # Filter bins that can accommodate the item
    valid_bins = diffs >= 0
    
    if np.any(valid_bins):
        # Calculate the maximum remaining capacity after placing the item (Worst Fit)
        max_remaining_cap = np.max(diffs[valid_bins])
        
        # Assign priority based on the maximum remaining capacity
        for i in range(len(bins_remain_cap)):
            if valid_bins[i]:
                if diffs[i] == max_remaining_cap:
                    priorities[i] = 1.0  # Highest priority
                else:
                    priorities[i] = 0.0 
    
    return priorities
```
