```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit: Inverse distance to remaining capacity. Avoid division by zero.
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        distances = np.abs(bins_remain_cap[fit_bins] - item)
        priorities[fit_bins] = 1.0 / (distances + 1e-9)

    # Relative capacity bonuses (tuned weights)
    priorities[bins_remain_cap >= item * 1.8] += 0.05  # More spacious
    priorities[bins_remain_cap <= item * 0.4] += 0.1  # Near-full

    # Small bonus to encourage use (reduced weight)
    priorities += 0.001

    return priorities
```
