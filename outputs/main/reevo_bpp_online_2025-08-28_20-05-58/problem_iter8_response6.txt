```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    diffs = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (diffs + 1e-6)  # Inverse distance

    # Boost bins with significantly more capacity
    priorities[bins_remain_cap > item * 1.5] += 0.2

    # Penalize bins that are almost full (reduce fragmentation)
    priorities[bins_remain_cap < item * 0.5] -= 0.3

    # Small boost for bins where item fits well (not too tight, not too loose)
    priorities[(bins_remain_cap >= item * 0.8) & (bins_remain_cap <= item * 1.2)] += 0.1

    priorities = np.maximum(priorities, 0.0)
    return priorities
```
