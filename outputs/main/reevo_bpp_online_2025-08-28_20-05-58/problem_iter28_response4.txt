```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit: Inverse distance to remaining capacity.
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Relative Capacity: Smoothly reward near-full and spacious bins.
    relative_capacity = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)  # Normalize to 0-1

    # Gaussian-weighted preferences
    priorities += 0.2 * np.exp(-((relative_capacity - 0.7)**2) / 0.01)  # Near full
    priorities += 0.1 * np.exp(-((relative_capacity - 0.3)**2) / 0.05)  # Spacious

    return priorities
```
