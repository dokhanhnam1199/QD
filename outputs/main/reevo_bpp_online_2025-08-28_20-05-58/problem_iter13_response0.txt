```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the ratio of item size to remaining bin capacity
    ratios = item / bins_remain_cap
    # Assign a higher priority to bins where the item fits well (ratio close to 1)
    # and avoid penalizing nearly full bins too strongly
    priorities = 1.0 / (np.abs(ratios - 1.0) + 1e-9)
    # Reward spacious bins
    priorities[bins_remain_cap > item * 1.5] += 0.1
    # Gentle reward for bins with moderate utilization
    priorities[bins_remain_cap > item * 0.5] += 0.05

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
