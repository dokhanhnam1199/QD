```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration (choosing a random bin).
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate 'greedy' priority: bins where the item fits
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = bins_remain_cap[valid_bins] - item  # Lower remainder is better

    # Epsilon-Greedy Exploration
    if np.random.rand() < epsilon:
        # Randomly assign priorities to all bins
        priorities = np.random.rand(len(bins_remain_cap))
    
    return priorities
```
