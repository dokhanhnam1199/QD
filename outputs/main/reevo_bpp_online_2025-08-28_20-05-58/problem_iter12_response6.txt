```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Input validation
    if np.any(bins_remain_cap < 0):
        raise ValueError("Negative bin capacity encountered.")

    # Inverse distance to remaining capacity
    distances = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (distances + 1e-9)

    # Perfect fit bonus
    perfect_fit_mask = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit_mask] += 2.0

    # Near-perfect fit bonus
    near_perfect_mask = np.abs(bins_remain_cap - item) < 0.05 * item
    priorities[near_perfect_mask] += 1.0

    # Spacious bin bonus
    spacious_mask = bins_remain_cap > item * 1.5
    priorities[spacious_mask] += 0.5

    # Gentle penalty for almost-full bins
    almost_full_mask = bins_remain_cap < item * 0.5
    priorities[almost_full_mask] += 0.1

    return priorities
```
