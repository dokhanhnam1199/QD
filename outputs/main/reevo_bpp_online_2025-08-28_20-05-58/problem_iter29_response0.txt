```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1  # Assign very low priority to infeasible bins

    # Priority based on remaining capacity (normalized)
    remaining_capacity_ratio = bins_remain_cap[feasible_bins] / item
    priorities[feasible_bins] = remaining_capacity_ratio

    # Bonus for near-full bins (subtle reward)
    priorities[feasible_bins & (bins_remain_cap < item * 0.5)] += 0.1

    # Bonus for spacious bins
    priorities[feasible_bins & (bins_remain_cap > item * 1.5)] += 0.05

    return priorities
```
