```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate relative capacity
    relative_capacity = bins_remain_cap / item

    # Base priority: Inverse distance to item size
    distances = np.abs(relative_capacity - 1.0)
    priorities = 1.0 / (distances + 1e-9)

    # Reward spacious bins (relative capacity > 1.5)
    priorities[relative_capacity > 1.5] += 0.015

    # Reward near-full utilization (relative capacity between 0.5 and 1)
    priorities[(relative_capacity >= 0.5) & (relative_capacity < 1.0)] += 0.01

    # Gently penalize almost-full bins (relative capacity < 0.3)
    priorities[relative_capacity < 0.3] -= 0.005

    # Ensure priorities are non-negative
    priorities = np.maximum(priorities, 0.0)
    return priorities
```
