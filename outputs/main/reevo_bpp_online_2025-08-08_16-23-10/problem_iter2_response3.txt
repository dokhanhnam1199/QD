```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements the "Best Fit" heuristic for the online Bin Packing Problem.
    The priority is higher for bins that have just enough capacity to fit the item,
    minimizing wasted space. Bins that cannot fit the item are given a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority (i.e., a bin that results in
        less remaining capacity after packing).
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Find bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.
    # The "best fit" heuristic aims to minimize this remaining capacity.
    # Therefore, a smaller remaining capacity should result in a higher priority score.
    # We can achieve this by using the negative of the remaining capacity as the priority.
    # The bin with the smallest `bins_remain_cap[i] - item` will have the largest
    # negative value, hence the highest priority.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
