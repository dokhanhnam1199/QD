```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    This version implements the "Best Fit" heuristic by prioritizing bins
    that have the least remaining capacity *after* the item is placed.
    This aims to minimize wasted space. Bins that cannot fit the item are
    given a priority of negative infinity to ensure they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that have enough capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.
    # The "best fit" is the bin with the smallest remaining capacity.
    # To maximize priority, we want to minimize this remaining capacity.
    # Therefore, we can assign the negative of the remaining capacity as the priority.
    # A smaller positive remaining capacity will result in a larger negative value,
    # which will be correctly selected as the maximum by a max-priority queue or similar selection mechanism.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
