```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a heuristic that prioritizes minimal waste.

    This priority function aims to minimize wasted space in bins. It assigns higher
    priority to bins where the remaining capacity is just enough or slightly more than
    the item size. Bins that are too small to fit the item are given a priority of zero.
    The priority is calculated using a function that rewards smaller positive differences
    between remaining capacity and item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Initialize priorities to zero for all bins. Bins that cannot fit the item will retain this zero priority.
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that have enough remaining capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a score based on the "waste" (remaining capacity - item size).
    # We want to reward bins with minimal waste. A smaller waste should result in a higher score.
    # A function like `1 / (waste + epsilon)` or `exp(-waste / temperature)` can achieve this.
    # Let's use `1 / (waste + 1e-6)` to give higher scores to smaller positive waste.
    # Adding a small epsilon (1e-6) to the denominator prevents division by zero if remaining_capacity == item.
    
    waste = bins_remain_cap[can_fit_mask] - item
    
    # The score is the inverse of the waste. Higher score for lower waste.
    # We add a small constant to avoid division by zero if item perfectly fits.
    # A perfectly fitting bin (waste=0) should have the highest priority.
    # Let's map `waste=0` to a high score and increasing `waste` to decreasing scores.
    # `1.0 / (waste + 1.0)` maps 0 waste to 1, 1 waste to 0.5, 5 waste to 0.16, etc.
    # This seems like a good heuristic for minimizing waste.

    scores = 1.0 / (waste + 1.0) # Adding 1.0 to ensure even waste=0 results in a finite score >= 1

    priorities[can_fit_mask] = scores

    return priorities
```
