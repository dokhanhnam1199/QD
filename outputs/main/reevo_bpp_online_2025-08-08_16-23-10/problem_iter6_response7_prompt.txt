{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a temperature-controlled exponential fit.\n\n    This priority function aims to prioritize bins with less remaining capacity that can still fit the item.\n    It uses an exponential function with a temperature parameter to smooth the priority distribution.\n    Bins that cannot fit the item are assigned a priority of zero.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    # Define a temperature parameter. Lower temperature makes the priority sharper,\n    # favoring bins that are a closer fit. Higher temperature smooths the distribution.\n    # A value of 1.0 can be a good starting point, similar to Softmax.\n    temperature = 1.0\n\n    # Initialize priorities to zero. Bins that cannot fit the item will retain this zero priority.\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that have enough remaining capacity to fit the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate a score.\n    # We want to prioritize bins with less remaining capacity (closer fit).\n    # A good heuristic is to use the negative of the remaining capacity.\n    # However, to favor bins that are *just* enough, we can use the negative of the *surplus* capacity.\n    # Surplus capacity = bins_remain_cap - item.\n    # So, score = -(bins_remain_cap - item).\n    # This makes a bin with exactly `item` capacity have a score of 0,\n    # a bin with `item + 1` capacity have a score of -1, and so on.\n\n    surplus_capacity = bins_remain_cap[can_fit_mask] - item\n    \n    # We want higher priority for smaller surplus capacity.\n    # The function `exp(-surplus_capacity / temperature)` achieves this.\n    # When surplus_capacity is 0, exp(0) = 1.\n    # When surplus_capacity is positive, exp(-positive/temperature) < 1.\n    # As surplus_capacity increases, the score decreases exponentially.\n\n    scores = np.exp(-surplus_capacity / temperature)\n\n    # Assign the calculated scores to the priorities array for the bins that can fit the item.\n    priorities[can_fit_mask] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a Sigmoid Fit Score strategy that emphasizes minimal resulting remaining capacity.\n\n    This heuristic prioritizes bins where placing the item leaves the least amount\n    of remaining capacity. It calculates the \"resulting remaining capacity\" for each\n    bin that can fit the item and then uses a sigmoid function to normalize these\n    values into priority scores between 0 and 1. A smaller resulting remaining\n    capacity leads to a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    # Initialize priorities to zero for all bins. Bins that cannot fit the item will retain this zero priority.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that have enough remaining capacity to fit the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.\n    # We want to prioritize bins where this resulting remaining capacity is minimized.\n    resulting_remaining_cap = bins_remain_cap[can_fit_mask] - item\n\n    # To prioritize smaller resulting remaining capacities, we can use the inverse\n    # of the resulting remaining capacity as a measure of \"fit tightness\".\n    # A smaller resulting capacity means a larger inverse, hence a tighter fit.\n    # Add a small epsilon to avoid division by zero or extremely large values when resulting_remaining_cap is close to zero.\n    epsilon = 1e-9\n    fit_tightness = 1.0 / (resulting_remaining_cap + epsilon)\n\n    # Apply a sigmoid function to map the tightness scores to a normalized priority between 0 and 1.\n    # The sigmoid function `1 / (1 + exp(-x))` maps larger x to values closer to 1.\n    # We scale `fit_tightness` by a sensitivity parameter `k`. A larger `k` means\n    # a steeper increase in priority as the fit becomes tighter (resulting_remaining_cap decreases).\n    k = 10.0  # Sensitivity parameter: Controls how strongly tighter fits are favored.\n    scaled_tightness = k * fit_tightness\n    sigmoid_scores = 1 / (1 + np.exp(-scaled_tightness))\n\n    # Assign the calculated sigmoid scores to the bins that can fit the item.\n    priorities[can_fit_mask] = sigmoid_scores\n\n    return priorities\n\n[Reflection]\nPrioritize tightest fits. Experiment with normalization and sensitivity parameters.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}