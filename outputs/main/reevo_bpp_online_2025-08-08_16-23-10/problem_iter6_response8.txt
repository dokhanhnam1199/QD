```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements a "Best Fit" heuristic by prioritizing bins that
    minimize the remaining capacity *after* packing the item (i.e., minimize slack).
    Bins that cannot fit the item are given a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority (i.e., a bin that results in
        less remaining capacity after packing).
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, the priority is the negative of the slack
    # (remaining capacity after placing the item). This way, smaller slack
    # (better fit) results in a higher priority score.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
