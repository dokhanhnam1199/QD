```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    The strategy is to greedily choose the bin with the most remaining capacity that can fit the item,
    but with a probability of epsilon, choose a random bin that can fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Exploration rate

    # Identify bins that can fit the item
    valid_bins_indices = np.where(bins_remain_cap >= item)[0]

    if len(valid_bins_indices) == 0:
        # No bin can fit the item, return all zeros (or handle as an error/new bin creation)
        return np.zeros_like(bins_remain_cap)

    priorities = np.zeros_like(bins_remain_cap)

    # Epsilon-Greedy logic
    if np.random.rand() < epsilon:
        # Explore: choose a random valid bin
        chosen_bin_index = np.random.choice(valid_bins_indices)
        priorities[chosen_bin_index] = 1.0  # High priority for the chosen random bin
    else:
        # Exploit: choose the best valid bin (most remaining capacity)
        best_bin_index = valid_bins_indices[np.argmax(bins_remain_cap[valid_bins_indices])]
        priorities[best_bin_index] = 1.0  # High priority for the best bin

    return priorities
```
