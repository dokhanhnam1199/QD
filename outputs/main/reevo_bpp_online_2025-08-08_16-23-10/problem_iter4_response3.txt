```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Sigmoid Fit Score strategy that emphasizes minimal resulting remaining capacity.

    This heuristic prioritizes bins where placing the item leaves the least amount
    of remaining capacity. It calculates the "resulting remaining capacity" for each
    bin that can fit the item and then uses a sigmoid function to normalize these
    values into priority scores between 0 and 1. A smaller resulting remaining
    capacity leads to a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Initialize priorities to zero for all bins. Bins that cannot fit the item will retain this zero priority.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that have enough remaining capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.
    # We want to prioritize bins where this resulting remaining capacity is minimized.
    resulting_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # To prioritize smaller resulting remaining capacities, we can use the inverse
    # of the resulting remaining capacity as a measure of "fit tightness".
    # A smaller resulting capacity means a larger inverse, hence a tighter fit.
    # Add a small epsilon to avoid division by zero or extremely large values when resulting_remaining_cap is close to zero.
    epsilon = 1e-9
    fit_tightness = 1.0 / (resulting_remaining_cap + epsilon)

    # Apply a sigmoid function to map the tightness scores to a normalized priority between 0 and 1.
    # The sigmoid function `1 / (1 + exp(-x))` maps larger x to values closer to 1.
    # We scale `fit_tightness` by a sensitivity parameter `k`. A larger `k` means
    # a steeper increase in priority as the fit becomes tighter (resulting_remaining_cap decreases).
    k = 10.0  # Sensitivity parameter: Controls how strongly tighter fits are favored.
    scaled_tightness = k * fit_tightness
    sigmoid_scores = 1 / (1 + np.exp(-scaled_tightness))

    # Assign the calculated sigmoid scores to the bins that can fit the item.
    priorities[can_fit_mask] = sigmoid_scores

    return priorities
```
