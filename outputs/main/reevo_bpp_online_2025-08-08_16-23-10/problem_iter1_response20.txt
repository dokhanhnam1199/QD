```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit Decreasing-like approach.

    This heuristic prioritizes bins that can accommodate the item and
    gives higher priority to bins that have a remaining capacity closer to the item's size.
    This is an adaptation of the First Fit Decreasing strategy for the online setting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value, so bins that cannot fit the item get no priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a priority score
    # The score is based on the "tightness" of the fit.
    # A higher score means a tighter fit (remaining capacity closer to item size).
    # We use the inverse of the difference to give higher priority to tighter fits.
    # Adding 1 to the denominator prevents division by zero if remaining capacity is exactly the item size.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9) # Adding a small epsilon for numerical stability

    # Invert the priorities so that the highest value represents the best bin to fit into.
    # Since we want to minimize bins, we are looking for the tightest fit.
    # The current calculation already assigns higher values to tighter fits.
    # So, we can directly return. However, if we wanted to prioritize bins with MORE
    # remaining capacity for a different strategy, we might need inversion.
    # For the First Fit concept aiming for tightest fit, the current `priorities` are good.
    # If we want to use np.argmax, higher values are better.

    # A common First Fit variation might also consider the overall remaining capacity
    # to avoid "wasted" space too early. However, the prompt emphasizes a "First Fit"
    # strategy, which typically implies trying to fit the item into the first available bin.
    # Our priority here is to define "first available" in a way that's beneficial.
    # The current approach prioritizes bins that are almost full and can still fit the item.

    return priorities
```
