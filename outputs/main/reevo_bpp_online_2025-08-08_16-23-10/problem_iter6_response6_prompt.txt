{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit.\n\n    This version implements the \"Best Fit\" heuristic. It prioritizes bins\n    that have the least remaining capacity *after* the item is placed,\n    thereby minimizing wasted space. Bins that cannot fit the item are given\n    a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that have enough capacity for the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit, calculate the remaining capacity after placing the item.\n    # The goal is to minimize this remaining capacity to achieve the \"best fit\".\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # To prioritize bins with the smallest remaining capacity, we can assign\n    # the negative of this remaining capacity as the priority. A smaller\n    # (more negative) value means a tighter fit, and thus a higher priority\n    # when we seek the maximum priority score.\n    priorities[can_fit_mask] = -remaining_after_fit\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a smoothed\n    non-linear function favoring tighter fits.\n\n    This heuristic prioritizes bins that can accommodate the item and have the smallest\n    remaining capacity after packing (Best Fit strategy). The priority is calculated\n    using a softened version of the \"smallest surplus\" idea. Specifically, for bins\n    that can fit the item, the priority is determined by `sigmoid(-steepness * (remaining_capacity - item))`.\n    This function is monotonically decreasing with respect to `(remaining_capacity - item)`,\n    meaning smaller non-negative remaining capacities (tighter fits) get higher scores.\n\n    The score for a bin is 0 if the item cannot fit. For bins that can fit,\n    the score is calculated as 1 / (1 + exp(steepness * (remaining_capacity - item))).\n    This formulation ensures that a perfect fit (remaining_capacity - item = 0) results\n    in a score of 0.5, tighter fits (negative surplus) result in scores > 0.5, and\n    looser fits (positive surplus) result in scores < 0.5.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Scores range from 0 (cannot fit or very loose fit) up to 1 (perfect or very tight fit).\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    steepness = 5.0  # Tunable parameter: higher values mean stronger preference for tight fits.\n\n    # Identify bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the post-placement remaining capacity for bins that can fit the item.\n    post_placement_remain_cap = bins_remain_cap[can_fit_mask] - item\n\n    # Calculate the exponent argument for the sigmoid function.\n    # We want to prioritize smaller `post_placement_remain_cap`.\n    # The function `1 / (1 + exp(x))` is decreasing in `x`.\n    # To make it decrease as `post_placement_remain_cap` increases, we set `x = steepness * post_placement_remain_cap`.\n    # A small `post_placement_remain_cap` (tight fit) results in a smaller `x`, thus a higher score.\n    # A large `post_placement_remain_cap` (loose fit) results in a larger `x`, thus a lower score.\n    # For a perfect fit (post_placement_remain_cap = 0), x=0, score=0.5.\n    # For negative post_placement_remain_cap (item is smaller than remaining cap), x is negative, exp(x) is small, score > 0.5.\n    # For positive post_placement_remain_cap (item is larger than remaining cap, which should not happen due to can_fit_mask,\n    # but conceptually if it did, x would be positive, score < 0.5).\n    exponent_args = steepness * post_placement_remain_cap\n\n    # Clip the exponent arguments to prevent potential overflow/underflow in np.exp.\n    # Values like +/- 700 can cause issues. A range like [-30, 30] is generally safe.\n    # For very negative args, exp -> 0, score -> 1. For very positive args, exp -> inf, score -> 0.\n    clipped_exponent_args = np.clip(exponent_args, -30.0, 30.0)\n\n    # Calculate the priority scores for the valid bins using the sigmoid function.\n    # This results in scores between ~0.5 (for perfect fit) and ~1 (for very tight fits where post_placement_remain_cap is negative).\n    # Scores for bins that cannot fit remain 0.\n    priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(clipped_exponent_args))\n\n    return priorities\n\n[Reflection]\nSmooth non-linear functions, like sigmoid, can yield better results than linear ones.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}