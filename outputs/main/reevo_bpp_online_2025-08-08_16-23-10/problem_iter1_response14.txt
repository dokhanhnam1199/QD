```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Exact Fit First strategy prioritizes bins where the item fits exactly, meaning
    the remaining capacity of the bin is exactly equal to the item's size.
    Among bins that offer an exact fit, we might further refine the priority.
    In this implementation, we simply assign a higher priority to exact fits.
    For bins that do not offer an exact fit, we assign a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Find bins where the item fits exactly
    exact_fit_indices = np.where(bins_remain_cap == item)[0]

    # Assign a high priority to bins that offer an exact fit.
    # We can use a value greater than any possible difference or capacity.
    # For simplicity, a large constant is used here.
    high_priority_value = 1000.0
    priorities[exact_fit_indices] = high_priority_value

    # For all other bins (where item doesn't fit exactly), the priority remains 0.
    # This strategy aims to use bins that are perfectly filled by the current item.
    # If multiple bins offer an exact fit, any one of them can be chosen
    # based on the inherent ordering of numpy arrays or could be further refined
    # by a secondary criterion (e.g., lowest original bin index for stability).
    # This implementation gives equal high priority to all exact fits.

    return priorities
```
