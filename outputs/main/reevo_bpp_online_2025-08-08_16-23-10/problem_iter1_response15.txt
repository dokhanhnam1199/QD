```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    The Inverse Distance strategy prioritizes bins that are a close fit for the item.
    A smaller remaining capacity that is still sufficient for the item will receive
    a higher priority. This aims to utilize bin space more efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can actually accommodate the item
    suitable_bins_mask = bins_remain_cap >= item

    # Calculate the "gap" or "waste" if the item is placed in a suitable bin
    # A smaller gap means a better fit.
    gaps = bins_remain_cap[suitable_bins_mask] - item

    # To use inverse distance, we want a higher score for smaller gaps.
    # If a gap is 0 (perfect fit), the inverse of gap would be infinity.
    # To avoid division by zero and handle the perfect fit case, we can add a small epsilon
    # or simply assign a very high score for a perfect fit.
    # For this implementation, we'll use (1 / (gap + epsilon)) for small gaps
    # and a large constant for perfect fits (gap == 0).
    epsilon = 1e-9  # A small value to prevent division by zero

    # Initialize priorities for suitable bins
    priorities[suitable_bins_mask] = 1.0 / (gaps + epsilon)

    # Optional: Boost the priority for perfect fits to ensure they are considered first.
    # This is not strictly part of the inverse distance but can be a useful enhancement.
    perfect_fit_mask = (gaps < epsilon) & suitable_bins_mask
    priorities[perfect_fit_mask] = np.max(priorities) * 100  # Assign a very high score

    # Ensure that bins that cannot fit the item have a priority of 0
    priorities[~suitable_bins_mask] = 0

    return priorities
```
