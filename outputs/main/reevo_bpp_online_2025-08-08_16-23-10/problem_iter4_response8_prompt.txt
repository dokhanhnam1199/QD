{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a heuristic that prioritizes minimal waste.\n\n    This priority function aims to minimize wasted space in bins. It assigns higher\n    priority to bins where the remaining capacity is just enough or slightly more than\n    the item size. Bins that are too small to fit the item are given a priority of zero.\n    The priority is calculated using a function that rewards smaller positive differences\n    between remaining capacity and item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    # Initialize priorities to zero for all bins. Bins that cannot fit the item will retain this zero priority.\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that have enough remaining capacity to fit the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate a score based on the \"waste\" (remaining capacity - item size).\n    # We want to reward bins with minimal waste. A smaller waste should result in a higher score.\n    # A function like `1 / (waste + epsilon)` or `exp(-waste / temperature)` can achieve this.\n    # Let's use `1 / (waste + 1e-6)` to give higher scores to smaller positive waste.\n    # Adding a small epsilon (1e-6) to the denominator prevents division by zero if remaining_capacity == item.\n    \n    waste = bins_remain_cap[can_fit_mask] - item\n    \n    # The score is the inverse of the waste. Higher score for lower waste.\n    # We add a small constant to avoid division by zero if item perfectly fits.\n    # A perfectly fitting bin (waste=0) should have the highest priority.\n    # Let's map `waste=0` to a high score and increasing `waste` to decreasing scores.\n    # `1.0 / (waste + 1.0)` maps 0 waste to 1, 1 waste to 0.5, 5 waste to 0.16, etc.\n    # This seems like a good heuristic for minimizing waste.\n\n    scores = 1.0 / (waste + 1.0) # Adding 1.0 to ensure even waste=0 results in a finite score >= 1\n\n    priorities[can_fit_mask] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements the \"Best Fit\" heuristic for the online Bin Packing Problem.\n    The priority is higher for bins that have just enough capacity to fit the item,\n    minimizing wasted space. Bins that cannot fit the item are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority (i.e., a bin that results in\n        less remaining capacity after packing).\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Find bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.\n    # The \"best fit\" heuristic aims to minimize this remaining capacity.\n    # Therefore, a smaller remaining capacity should result in a higher priority score.\n    # We can achieve this by using the negative of the remaining capacity as the priority.\n    # The bin with the smallest `bins_remain_cap[i] - item` will have the largest\n    # negative value, hence the highest priority.\n    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)\n\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal *post-placement* remaining capacity for better fit.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}