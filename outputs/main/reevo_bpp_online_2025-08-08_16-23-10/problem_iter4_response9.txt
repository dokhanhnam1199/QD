```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined Best Fit strategy.

    This heuristic prioritizes bins that have the least remaining capacity *after*
    packing the item (Best Fit). It further refines this by favoring bins where
    the item occupies a larger proportion of the bin's *current* remaining capacity.
    This encourages packing larger items into larger available spaces first,
    potentially leaving smaller spaces for smaller items.

    The score for a bin is calculated as:
    score = (1 / (1 + remaining_capacity_after_packing)) * (item / (initial_remaining_capacity + epsilon))
    where `remaining_capacity_after_packing` is minimized, and the second term
    encourages fitting larger items into relatively larger bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that cannot fit the item
        receive a score of 0.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # To avoid division by zero for bins with 0 remaining capacity

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for bins that can fit the item.
    remaining_after_packing = bins_remain_cap[can_fit_mask] - item
    initial_remaining_cap_fitting_bins = bins_remain_cap[can_fit_mask]

    # Primary criterion: Minimize remaining capacity after packing (Best Fit).
    # We use the inverse of (1 + remaining_capacity) to assign higher scores to smaller remaining capacities.
    # Adding 1 to remaining_after_packing ensures that if remaining_after_packing is 0, the score is 1.
    best_fit_score = 1.0 / (1.0 + remaining_after_packing)

    # Secondary criterion: Favor bins where the item represents a larger fraction of the *initial* remaining capacity.
    # This encourages filling up bins more effectively with larger items relative to their current space.
    # We add epsilon to the denominator to prevent division by zero and to ensure a small, non-zero score.
    fit_proportion_score = item / (initial_remaining_cap_fitting_bins + epsilon)

    # Combine the scores: Multiply the two scores.
    # This way, bins that are a good fit (low remaining capacity) AND
    # where the item fills a significant portion of the available space get higher priority.
    priorities[can_fit_mask] = best_fit_score * fit_proportion_score

    return priorities
```
