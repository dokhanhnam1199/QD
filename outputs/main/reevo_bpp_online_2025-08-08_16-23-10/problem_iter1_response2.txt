```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Worst Fit.

    The Worst Fit strategy aims to place the current item into the bin that has
    the most remaining capacity. This leaves larger remaining capacities in other
    bins, potentially allowing for larger future items to be packed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more preferred bin.
    """
    # Initialize priorities to a very small negative number (or negative infinity)
    # to ensure that bins that cannot fit the item get a lower priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Find bins that have enough capacity to fit the current item.
    # For these bins, the priority is simply their remaining capacity.
    # The higher the remaining capacity, the higher the priority (Worst Fit).
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
