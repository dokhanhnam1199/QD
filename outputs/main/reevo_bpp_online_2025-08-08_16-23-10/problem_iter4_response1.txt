```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a temperature-controlled exponential fit.

    This priority function aims to prioritize bins with less remaining capacity that can still fit the item.
    It uses an exponential function with a temperature parameter to smooth the priority distribution.
    Bins that cannot fit the item are assigned a priority of zero.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Define a temperature parameter. Lower temperature makes the priority sharper,
    # favoring bins that are a closer fit. Higher temperature smooths the distribution.
    # A value of 1.0 can be a good starting point, similar to Softmax.
    temperature = 1.0

    # Initialize priorities to zero. Bins that cannot fit the item will retain this zero priority.
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that have enough remaining capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a score.
    # We want to prioritize bins with less remaining capacity (closer fit).
    # A good heuristic is to use the negative of the remaining capacity.
    # However, to favor bins that are *just* enough, we can use the negative of the *surplus* capacity.
    # Surplus capacity = bins_remain_cap - item.
    # So, score = -(bins_remain_cap - item).
    # This makes a bin with exactly `item` capacity have a score of 0,
    # a bin with `item + 1` capacity have a score of -1, and so on.

    surplus_capacity = bins_remain_cap[can_fit_mask] - item
    
    # We want higher priority for smaller surplus capacity.
    # The function `exp(-surplus_capacity / temperature)` achieves this.
    # When surplus_capacity is 0, exp(0) = 1.
    # When surplus_capacity is positive, exp(-positive/temperature) < 1.
    # As surplus_capacity increases, the score decreases exponentially.

    scores = np.exp(-surplus_capacity / temperature)

    # Assign the calculated scores to the priorities array for the bins that can fit the item.
    priorities[can_fit_mask] = scores

    return priorities
```
