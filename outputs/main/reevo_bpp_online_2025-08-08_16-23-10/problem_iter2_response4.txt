```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    This version implements the "Best Fit" heuristic. It prioritizes bins
    that have the least remaining capacity *after* the item is placed,
    thereby minimizing wasted space. Bins that cannot fit the item are given
    a priority of 0 (or a very low score).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that have enough capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity *after* placing the item in the eligible bins
    # We want to minimize this value for the "best fit"
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # To prioritize the minimum remaining capacity, we can assign a score
    # that is inversely proportional to it, or simply the negative of it.
    # The smaller the remaining capacity (i.e., the better the fit), the higher the priority.
    # Using the negative of the remaining capacity achieves this:
    # -1 is higher priority than -5.
    # A small epsilon can be added to avoid perfect zero-remaining bins getting arbitrarily high priority
    # if other heuristics prefer variety, but for pure "best fit", negative remaining capacity is direct.
    # Let's use a slightly adjusted score: higher priority for smaller remaining capacity.
    # A common strategy is to assign a score based on the *difference* that is maximized.
    # The difference is `bins_remain_cap - item`. We want to minimize this.
    # So, we can assign `-(bins_remain_cap - item)` as priority.
    # This means a smaller positive difference becomes a larger negative number, which we want to select as the maximum.

    # Assign priorities to bins that can fit the item.
    # Higher priority means smaller remaining capacity after placing the item.
    priorities[can_fit_mask] = -remaining_after_fit

    return priorities
```
