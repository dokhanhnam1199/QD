```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Exact Fit First prioritizes bins that can accommodate the item with the least
    remaining capacity after placement. This aims to fill bins as much as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Only consider bins that have enough capacity for the item
    possible_bins_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in the bin
    # We want to minimize this remaining capacity, so higher priority means lower remaining capacity.
    # Therefore, we use the negative of the remaining capacity as the priority.
    remaining_capacities_after_placement = bins_remain_cap[possible_bins_mask] - item

    # Assign a priority score: a higher score means a better fit.
    # We use the negative of the remaining capacity, so the smallest remaining capacity
    # gets the highest (least negative) score.
    priorities[possible_bins_mask] = -remaining_capacities_after_placement

    return priorities
```
