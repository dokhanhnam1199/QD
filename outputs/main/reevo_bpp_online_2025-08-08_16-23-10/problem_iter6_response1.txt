```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a modified Best Fit.

    This version implements a modified "Best Fit" heuristic. It prioritizes bins
    that have the least remaining capacity *after* the item is placed,
    but with a twist: it adds a small penalty for bins that would be *exactly* full.
    This encourages leaving a tiny bit of space if possible, which can sometimes
    be beneficial for subsequent items. Bins that cannot fit the item are given
    a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that have enough capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Prioritize bins with the smallest remaining capacity.
    # We use the negative of the remaining capacity.
    # Add a small epsilon to the priority for bins that would be exactly full,
    # making them slightly less preferable than bins with a tiny bit of leftover space.
    # This encourages leaving a small gap (e.g., 0.001) rather than filling completely.
    epsilon = 1e-6
    priorities[can_fit_mask] = -remaining_after_fit - (remaining_after_fit == 0) * epsilon

    return priorities
```
