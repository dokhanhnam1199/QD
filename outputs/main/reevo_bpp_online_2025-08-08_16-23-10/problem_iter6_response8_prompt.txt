{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a smoothed\n    non-linear function prioritizing minimal post-placement remaining capacity.\n\n    This heuristic prioritizes bins that can accommodate the item and have the smallest\n    remaining capacity after packing (Best Fit strategy). The priority is calculated\n    using a sigmoid-like function (specifically, 1 / (1 + exp(x))), where 'x' is\n    tuned to strongly favor tighter fits.\n\n    The score for a bin is 0 if the item cannot fit. For bins that can fit, the score\n    is calculated based on the negative surplus (item - remaining_capacity) which\n    we want to minimize. To use a function that rewards smaller values, we transform\n    the remaining capacity. A bin with remaining capacity `r` after packing will have\n    a score based on `steepness * (r - item)`. Smaller `r` leads to smaller `r-item`,\n    which results in a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Scores range from 0 (cannot fit or very loose fit) to 1 (perfect or near-perfect fit).\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    steepness = 10.0  # Tunable parameter: higher values mean stronger preference for tight fits.\n\n    # Identify bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit, calculate the remaining capacity *after* placing the item.\n    # We want to prioritize bins where this value is smallest (tightest fit).\n    post_placement_remain_cap = bins_remain_cap[can_fit_mask] - item\n\n    # Calculate the exponent argument for the sigmoid function.\n    # The function 1 / (1 + exp(x)) is monotonically decreasing in x.\n    # To make it favor smaller `post_placement_remain_cap`, we use `steepness * post_placement_remain_cap`.\n    # A small `post_placement_remain_cap` (tight fit) results in a smaller argument, thus a higher score.\n    # A large `post_placement_remain_cap` (loose fit) results in a larger argument, thus a lower score.\n    exponent_args = steepness * post_placement_remain_cap\n\n    # Clip the exponent arguments to prevent potential overflow/underflow in np.exp.\n    # Values like +/- 700 can cause issues. A range like [-30, 30] is generally safe.\n    # For very negative args, exp -> 0, score -> 1. For very positive args, exp -> inf, score -> 0.\n    clipped_exponent_args = np.clip(exponent_args, -30.0, 30.0)\n\n    # Calculate the priority scores for the valid bins.\n    # The scores will range from close to 1 (for perfect fits, post_placement_remain_cap=0)\n    # down to values close to 0 (for very loose fits).\n    priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(clipped_exponent_args))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements an improved \"Best Fit\" heuristic. It prioritizes bins\n    that, after placing the item, will have the smallest remaining capacity.\n    This aims to leave bins with larger remaining capacities for potentially larger\n    future items, thus optimizing space utilization more effectively.\n    Bins that cannot fit the item are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority (i.e., a bin that results in\n        less remaining capacity after packing).\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Find bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.\n    # The heuristic aims to minimize this remaining capacity.\n    # A smaller `bins_remain_cap[i] - item` value corresponds to a better fit.\n    # We want the highest priority for the smallest positive difference.\n    # Therefore, we can use the negative of this difference as the priority.\n    # A bin that results in a remaining capacity of 0 (perfect fit) will have a priority of 0.\n    # A bin that results in a remaining capacity of 1 will have a priority of -1.\n    # This naturally prioritizes bins that are closer to being full.\n    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)\n\n    return priorities\n\n[Reflection]\nPrioritize minimizing slack. Simpler, direct metrics often outperform complex, non-linear ones.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}