```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    This version implements the "Best Fit" heuristic. It prioritizes bins
    that have the least remaining capacity *after* the item is placed,
    thereby minimizing wasted space. Bins that cannot fit the item are given
    a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that have enough capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the remaining capacity after placing the item.
    # The goal is to minimize this remaining capacity to achieve the "best fit".
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # To prioritize bins with the smallest remaining capacity, we can assign
    # the negative of this remaining capacity as the priority. A smaller
    # (more negative) value means a tighter fit, and thus a higher priority
    # when we seek the maximum priority score.
    priorities[can_fit_mask] = -remaining_after_fit

    return priorities
```
