```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    The priority is calculated based on how well an item fits into a bin.
    A higher priority is given to bins where the remaining capacity is just enough
    or slightly more than the item size (i.e., minimal surplus). A large surplus capacity is penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value (negative infinity) for invalid bins.
    # This ensures that when exp is applied, their priority becomes effectively zero.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item.
    valid_mask = bins_remain_cap >= item

    # For valid bins, calculate a score that is higher for bins with less surplus capacity.
    # Surplus capacity is defined as `bins_remain_cap - item`.
    # We want to maximize the score as surplus capacity decreases.
    # A simple score function is the negative of the surplus capacity: `-(bins_remain_cap - item)`.
    # This means a bin with `bins_remain_cap == item` gets a score of 0.
    # A bin with `bins_remain_cap == item + 1` gets a score of -1.
    # A bin with `bins_remain_cap == item + 10` gets a score of -10.
    # When `np.exp()` is applied, these scores are transformed into probabilities.
    # A score of 0 yields `exp(0) = 1`.
    # A score of -1 yields `exp(-1) ≈ 0.368`.
    # A score of -10 yields `exp(-10) ≈ 0.000045`.
    # This transformation ensures that bins with less surplus capacity have higher priorities.

    surplus_capacity = bins_remain_cap[valid_mask] - item
    scores_for_valid_bins = -surplus_capacity

    # Assign the calculated scores to the priorities array for valid bins.
    priorities[valid_mask] = scores_for_valid_bins

    # Apply the exponential function to the scores. This is the core of the Softmax approach.
    # The resulting values can be interpreted as unnormalized probabilities or weights.
    # The bin with the highest score will have the highest priority after exponentiation.
    return np.exp(priorities)
```
