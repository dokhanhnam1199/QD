```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a tuned Sigmoid Best Fit.

    This heuristic prioritizes bins that can accommodate the item and have the smallest
    remaining capacity after packing (Best Fit strategy). The priority is calculated
    using a sigmoid function, with parameters tuned for a more balanced preference between
    tight fits and general fit. It also incorporates a small base priority for any bin
    that can fit, ensuring that even loose fits are considered if no tight fits are available.

    The score for a bin is 0 if the item cannot fit. For bins that can fit, the score
    is calculated as base_priority + (1 - base_priority) * (1 / (1 + exp(steepness * (remaining_capacity - item)))).
    This ensures scores are between base_priority and 1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores range from 0 (cannot fit) to 1 (best possible fit).
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    steepness = 7.0  # Increased steepness for stronger preference for tighter fits.
    base_priority = 0.1  # Small base priority for any bin that can fit.

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for bins that can fit the item.
    potential_remaining_cap_valid = bins_remain_cap[can_fit_mask] - item

    # Calculate the exponent argument for the sigmoid function.
    # We want to prioritize smaller `potential_remaining_cap_valid`.
    # A small `potential_remaining_cap_valid` (tight fit) results in a smaller `x`, thus a higher score.
    # A large `potential_remaining_cap_valid` (loose fit) results in a larger `x`, thus a lower score.
    exponent_args = steepness * potential_remaining_cap_valid

    # Clip the exponent arguments to prevent potential overflow/underflow in np.exp.
    clipped_exponent_args = np.clip(exponent_args, -30.0, 30.0)

    # Calculate the core best-fit score using the sigmoid function.
    # Scores range from ~0.5 (for perfect fit) to ~0 (for very loose fits).
    best_fit_scores = 1.0 / (1.0 + np.exp(clipped_exponent_args))

    # Combine with base priority: higher scores for tighter fits, but all fitting bins have at least base_priority.
    # The final score is base_priority + (1 - base_priority) * best_fit_score.
    # This scales the best_fit_scores to be between base_priority and 1.
    priorities[can_fit_mask] = base_priority + (1.0 - base_priority) * best_fit_scores

    return priorities
```
