```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using Random Fit.

    In Random Fit, we randomly select a bin that can accommodate the item.
    The priority function here aims to simulate this by assigning higher priority
    to bins that can fit the item, and then introducing a random element to break ties
    and achieve the "random" aspect.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    fit_indices = np.where(bins_remain_cap >= item)[0]

    if len(fit_indices) == 0:
        # If no bin can fit the item, return all zeros (or signal failure)
        # For this heuristic, we'll return zeros, implying no good fit.
        return priorities

    # Assign a base priority (e.g., 1) to bins that can fit the item.
    priorities[fit_indices] = 1.0

    # Introduce randomness to the selection among fitting bins.
    # We can add a small random value to the priorities of fitting bins.
    # This ensures that when multiple bins have the same base priority (i.e., they all fit),
    # the selection becomes random.
    random_component = np.random.rand(len(bins_remain_cap)) * 0.1  # Small random values between 0 and 0.1
    priorities += random_component

    return priorities
```
