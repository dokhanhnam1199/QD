{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score strategy with emphasis on tighter fits.\n\n    This version refines the Sigmoid Fit Score by directly focusing on the\n    \"tightness\" of the fit, which is inversely related to the remaining capacity.\n    A tighter fit (smaller remaining capacity) should yield a higher priority score.\n    The sigmoid function is used to map this tightness to a normalized priority score between 0 and 1.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # For bins that can fit the item, calculate the resulting remaining capacity.\n    # We want to prioritize bins where this resulting remaining capacity is minimized.\n    resulting_remaining_cap = bins_remain_cap[can_fit_mask] - item\n\n    # To prioritize smaller remaining capacities, we can use the inverse of\n    # the resulting remaining capacity as a measure of \"fit tightness\".\n    # A smaller resulting capacity means a larger inverse, hence a tighter fit.\n    # Add a small epsilon to avoid division by zero or extremely large values.\n    epsilon = 1e-9\n    fit_tightness = 1.0 / (resulting_remaining_cap + epsilon)\n\n    # Apply a sigmoid function to normalize the tightness scores and control\n    # the sensitivity to different degrees of tightness.\n    # The sigmoid function `1 / (1 + exp(-x))` maps larger x to values closer to 1.\n    # We scale `fit_tightness` by a factor `k` to control how strongly we\n    # favor tighter fits. A larger `k` means a steeper increase in priority\n    # as the fit becomes tighter.\n    k = 10.0  # Sensitivity parameter: higher k favors tighter fits more strongly.\n    scaled_tightness = k * fit_tightness\n    sigmoid_scores = 1 / (1 + np.exp(-scaled_tightness))\n\n    # Assign the calculated sigmoid scores to the bins that can fit the item.\n    priorities[can_fit_mask] = sigmoid_scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using Sigmoid Best Fit.\n\n    This heuristic prioritizes bins that can accommodate the item and have the smallest\n    remaining capacity after packing (Best Fit strategy). The priority is calculated\n    using a sigmoid function to provide a smooth ranking, strongly favoring tighter fits.\n\n    The score for a bin is 0 if the item cannot fit. For bins that can fit, the score\n    is calculated as 1 / (1 + exp(steepness * (remaining_capacity - item))).\n    This function is monotonically decreasing with respect to (remaining_capacity - item),\n    meaning smaller non-negative remaining capacities get higher scores.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Scores range from 0 (cannot fit or very loose fit) to 1 (perfect or near-perfect fit).\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    steepness = 5.0  # Tunable parameter: higher values mean stronger preference for tight fits.\n\n    # Identify bins where the item can fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity for bins that can fit the item.\n    # If a bin can fit, the remaining capacity after packing is: bins_remain_cap[i] - item\n    potential_remaining_cap_valid = bins_remain_cap[can_fit_mask] - item\n\n    # Calculate the exponent argument for the sigmoid function.\n    # We want to prioritize smaller `potential_remaining_cap_valid`.\n    # The function `1 / (1 + exp(x))` is decreasing in `x`.\n    # To make it decrease as `potential_remaining_cap_valid` increases, we set `x = steepness * potential_remaining_cap_valid`.\n    # A small `potential_remaining_cap_valid` (tight fit) results in a smaller `x`, thus a higher score.\n    # A large `potential_remaining_cap_valid` (loose fit) results in a larger `x`, thus a lower score.\n    exponent_args = steepness * potential_remaining_cap_valid\n\n    # Clip the exponent arguments to prevent potential overflow/underflow in np.exp.\n    # Values like +/- 700 can cause issues. A range like [-30, 30] is generally safe.\n    # For very negative args, exp -> 0, score -> 1. For very positive args, exp -> inf, score -> 0.\n    clipped_exponent_args = np.clip(exponent_args, -30.0, 30.0)\n\n    # Calculate the priority scores for the valid bins using the sigmoid function.\n    # priorities[can_fit_mask] will be populated with scores between ~0.5 (for perfect fit) and ~0 (for very loose fits).\n    # Scores for bins that cannot fit remain 0.\n    priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(clipped_exponent_args))\n\n    return priorities\n\n[Reflection]\nPrioritize tighter fits with a decreasing sigmoid of remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}