```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    This heuristic prioritizes bins that have a remaining capacity closest to the item's size.
    The "distance" is defined as the absolute difference between the bin's remaining capacity and the item's size.
    The priority is the inverse of this distance. Bins with remaining capacity exactly equal to the item size
    (i.e., zero distance) get the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the "distance" to each bin. We only consider bins that can fit the item.
    # For bins that cannot fit the item, the distance is effectively infinity,
    # so their priority will be 0.
    fit_mask = bins_remain_cap >= item
    
    # Calculate the difference between remaining capacity and item size for fitting bins
    diffs = bins_remain_cap[fit_mask] - item
    
    # Calculate inverse distance. Add a small epsilon to avoid division by zero.
    # A diff of 0 means perfect fit, so priority should be very high.
    epsilon = 1e-9
    priorities_fit = 1.0 / (diffs + epsilon)
    
    # Initialize priorities array with zeros
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign calculated priorities to fitting bins
    priorities[fit_mask] = priorities_fit
    
    return priorities
```
