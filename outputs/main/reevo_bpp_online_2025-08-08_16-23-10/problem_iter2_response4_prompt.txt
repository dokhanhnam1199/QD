{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Random Fit.\n\n    In Random Fit, we randomly select a bin that has enough capacity for the item.\n    This priority function assigns a higher priority to bins that have enough capacity\n    for the item, effectively making it more likely for those bins to be chosen.\n    A truly random selection among valid bins would be handled by the selection\n    mechanism outside this function. This function aims to 'filter' bins that\n    cannot fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign a high priority (e.g., 1) to bins that can accommodate the item,\n    # and a low priority (e.g., 0) to bins that cannot.\n    # This allows the selection logic to pick from valid bins.\n    priorities = np.where(bins_remain_cap >= item, 1, 0)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version implements the \"Best Fit\" heuristic for the online Bin Packing Problem.\n    The priority is higher for bins that have just enough capacity to fit the item,\n    minimizing wasted space. Bins that cannot fit the item are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Find bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity *after* placing the item\n    # We want to prioritize bins where this value is minimized (i.e., the \"best fit\")\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # The priority score is inversely related to the remaining capacity after fitting.\n    # A smaller remaining capacity (closer to 0) means a higher priority.\n    # To avoid division by zero and to give higher scores to bins that fit snugly,\n    # we can use a large number minus the remaining capacity.\n    # Add a small epsilon to the remaining capacity to avoid division by zero if an item\n    # perfectly fills a bin and to ensure that bins with less remaining space get higher scores.\n    # A common approach is to use 1 / (remaining_capacity + epsilon).\n    # However, for best fit, we want to MINIMIZE remaining_capacity.\n    # So, a good strategy is to assign a high priority to the bin with the smallest\n    # `remaining_after_fit`.\n    # We can transform the `remaining_after_fit` values such that smaller values\n    # result in larger priorities. A simple way is to invert them or use their negative.\n    # Let's use 1 / (remaining_after_fit + a_small_constant) where the small constant\n    # helps in cases where remaining_after_fit is 0.\n    # A more direct way for \"best fit\" is to simply rank them: the best fit has the minimum\n    # remaining space. So, we can assign a score based on the rank or a transformed value.\n\n    # For best fit, the goal is to find the bin that has the smallest remaining capacity\n    # *after* the item is placed in it, provided it fits.\n    # So, we want to maximize `-(bins_remain_cap - item)` among valid bins.\n    # Or equivalently, minimize `bins_remain_cap - item`.\n\n    # Let's assign priority based on how \"tightly\" the item fits.\n    # The difference `bins_remain_cap - item` represents the slack.\n    # We want to minimize this slack.\n    # A higher priority score should be given to a smaller slack.\n    # So, we can use something like `1 / (slack + epsilon)` or `max_slack - slack`.\n    # Using `max_slack - slack` makes larger values of slack have lower priority.\n    # Let's calculate the slack for bins that can fit the item.\n\n    slacks = bins_remain_cap[can_fit_mask] - item\n\n    # If there are no bins that can fit the item, return all zeros.\n    if not slacks.size:\n        return priorities\n\n    # We want to assign higher priority to smaller slacks.\n    # We can achieve this by taking the inverse of (slack + a small number)\n    # to avoid division by zero, or by taking the negative of slack.\n    # Let's use `1 / (slack + 1e-6)` which means smaller slacks get larger values.\n    # Alternatively, we can directly use the negative slack as priority if we\n    # are going to select the maximum, or if we are going to select the minimum of `-priority`.\n\n    # Let's use a scoring system where a perfect fit (slack = 0) gets the highest priority.\n    # A slightly larger slack gets a slightly lower priority.\n    # `1.0 / (slack + 1e-9)` works well.\n    # Or, `(max_slack_possible - slack)` where `max_slack_possible` is greater than any slack.\n    # For simplicity and to directly implement \"smallest remaining capacity\",\n    # we can assign priority as `-slack`. Then the bin with the highest priority\n    # will be the one with the smallest slack.\n\n    priorities[can_fit_mask] = -slacks\n\n    return priorities\n\n[Reflection]\nPrioritize bins that minimize wasted space for a tighter fit.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}