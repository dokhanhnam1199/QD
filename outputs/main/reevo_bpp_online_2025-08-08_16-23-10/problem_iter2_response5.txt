```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined Best Fit strategy for Softmax.

    This priority function aims to prioritize bins that have the least remaining capacity
    while still being able to fit the item. This is a form of Best Fit.
    The scores are designed to be used with a softmax-like selection mechanism,
    where higher scores indicate higher preference. A significant penalty is applied
    to bins with a large surplus capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value for bins that cannot fit the item.
    # Using -inf ensures that after np.exp, these bins will have a priority of 0.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that have enough remaining capacity to fit the item.
    valid_mask = bins_remain_cap >= item

    # For valid bins, calculate a score that reflects the "goodness" of the fit.
    # We want to prioritize bins where the remaining capacity is closest to the item size.
    # This means minimizing the "waste" or "surplus capacity": `bins_remain_cap - item`.
    # A smaller surplus is better.
    # A score that is inversely proportional to the surplus is desirable.
    # Let's use `score = 1.0 / (surplus + epsilon)` or `score = -surplus`.
    # For softmax-like application, `np.exp(score)` is used.
    # Using `score = -surplus` directly works well:
    # if surplus is 0, score is 0, exp(0) = 1.
    # if surplus is 1, score is -1, exp(-1) is ~0.37.
    # if surplus is 5, score is -5, exp(-5) is ~0.0067.
    # This naturally penalizes larger surpluses.

    surplus_capacity = bins_remain_cap[valid_mask] - item

    # We want smaller surplus_capacity to yield higher scores.
    # So, use the negative of the surplus capacity.
    scores_for_valid_bins = -surplus_capacity

    # Assign these scores to the corresponding positions in the priorities array.
    priorities[valid_mask] = scores_for_valid_bins

    # The resulting priorities are the exponents for a softmax distribution.
    # Higher values indicate higher preference.
    return np.exp(priorities)
```
