```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian and dampened ratio for robust bin packing."""
    # Newtonian component (with safety and handling empty bins)
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newton_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newton_priorities = np.nan_to_num(newton_priorities, neginf=-np.inf)  # Handle NaN and inf
    newton_priorities = np.where(~valid_bins, -np.inf, newton_priorities)

    # Dampened Ratio component
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 100)  # Clamp for stability
    ratio_priorities = -np.log(ratios)

    # Adaptive Weighting (Newtonian favored for larger bins)
    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight = np.clip(item / (mean_cap + 1e-9), 0, 0.5) # favor newton
    combined_priorities = (1 - weight) * newton_priorities + weight * ratio_priorities

    return combined_priorities
```
