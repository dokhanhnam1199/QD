```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins that can fit the item.
    # Heuristic 2: Among bins that can fit, prefer bins with smaller remaining capacity after placing the item
    # Heuristic 3: If no bin can fit, penalize bins based on how much the item exceeds the remaining capacity. The larger the excess, the smaller (more negative) priority.
    # Modified heuristic 4: Add a small random number to each bin's score to introduce some randomness.

    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_after_fit + 0.00001) # Avoid division by zero, high priority to near fit

    else:
        excess = item - bins_remain_cap
        priorities = -excess  # Penalize based on how much the item doesn't fit. Smaller priority for large excess.

    priorities += np.random.rand(len(bins_remain_cap)) * 0.0001 # Add small noise
    return priorities
```
