```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. The fraction of the bin that the item would fill. Bins that would be filled more completely
       are preferred (up to a point).
    2. A penalty for bins that don't have enough capacity. These get a large negative priority.
    3. A slight preference for bins that are already somewhat full, to avoid fragmentation, but not so full that adding the item
       would make it nearly full. This is a "gravitational" attraction toward moderately filled bins.
    4. A bias towards selecting the bin with minimal *waste*, that is to say the bin that leaves the least free space.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalty for bins that can't fit the item.
    insufficient_capacity = bins_remain_cap < item
    priorities[insufficient_capacity] = -np.inf

    # Calculate the fraction of the bin that the item would fill.
    fill_ratio = item / bins_remain_cap
    fill_ratio[insufficient_capacity] = 0  # Avoid division by zero in the invalid bins.

    # Add a "gravitational" attraction toward moderately filled bins
    bin_occupation = 1 - bins_remain_cap / np.max(bins_remain_cap)
    attraction = - (bin_occupation - 0.5)**2 # peak priority for bins roughly half full
    priorities += attraction

    # Prioritize based on how well the item fills the bin (higher is better, but capped).
    priorities += fill_ratio

    # Apply small weight to avoid creating overly fragmented bin states.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf # Ensure that infeasible allocations yield large waste values
    priorities -= 0.01 * waste # Prefer smallest amount of "waste" possible

    return priorities
```
