```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Adaptive Optimization Heuristic: Combines First-Fit-Decreasing (FFD) and Best-Fit
    principles with a dynamic adjustment based on bin fill levels.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Best-Fit component: Prioritize bins with capacity closest to item size
    best_fit_priority = 1 / (np.abs(safe_bins_remain_cap - item) + 1e-9)  # Adding a small constant to avoid division by zero

    # FFD component: Prioritize bins with higher remaining capacity
    ffd_priority = safe_bins_remain_cap / np.sum(safe_bins_remain_cap) # Normalize to avoid overflowing range

    # Adaptive weighting: Adjust the influence of Best-Fit vs. FFD based on fill levels
    fill_levels = 1 - (safe_bins_remain_cap / np.max(safe_bins_remain_cap)) #normalized fill levels

    #Heavily penalize bins smaller than item
    priority = np.where(safe_bins_remain_cap >= item,  (best_fit_priority*(1-fill_levels) + ffd_priority*fill_levels), -np.inf)
    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)

    return priority
```
