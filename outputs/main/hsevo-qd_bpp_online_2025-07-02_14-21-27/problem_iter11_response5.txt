```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity matching and Newtonian potential for bin selection."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Capacity difference (Newtonian-inspired)
    capacity_diff = np.abs(safe_bins_remain_cap - item)
    newtonian_priority = safe_bins_remain_cap / (capacity_diff + 1e-6)

    # Proportion filled (Capacity Matching)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Combined priority: adaptive weighting
    priority = 0.7 * newtonian_priority + 0.3 * proportion_filled

    priority += np.random.rand(len(bins_remain_cap)) * 0.01 # Exploration

    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf) # Item fits
    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority) # Invalid bins

    return priority
```
