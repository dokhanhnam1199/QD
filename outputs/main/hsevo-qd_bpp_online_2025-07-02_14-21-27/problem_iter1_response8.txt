```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considers wasted space and tries to balance bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Iterate through bins and assign priorities only to feasible bins.
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        # Calculate space utilization ratios for feasible bins.
        utilization = item / bins_remain_cap[feasible_bins]

        # Higher score to more full bins to avoid lots of nearly-empty bins
        priorities[feasible_bins] = utilization

        # Adjust priority to balance bin utilization to reduce waste
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += 1.0 / (waste + 1e-9)  #Add a small constant to avoid division by zero

        #Scale waste with bin capacity so that small residual capacity get larger priority.
        priorities[feasible_bins] += 1.0/(bins_remain_cap[feasible_bins]+1e-9)

    return priorities
```
