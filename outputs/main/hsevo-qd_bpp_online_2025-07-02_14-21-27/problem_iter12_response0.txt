```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that dynamically adjusts
    its strategy based on item size and bin availability. It combines
    modified Newtonian potential, capacity ratio, and a fragmentation penalty
    with adaptive weighting and considers a stochastic element for exploration.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # --- Newtonian Potential (Focus on near-fit bins) ---
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # --- Capacity Ratio (How well the item fits relative to bin size) ---
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # --- Fragmentation Penalty (Discourage leaving very small spaces) ---
    fragmentation_threshold = 0.1  # As a fraction of bin capacity
    fragmentation_penalty = np.where(
        (safe_bins_remain_cap - item > fragmentation_threshold) & (safe_bins_remain_cap >= item),
        0,  # No penalty if the remaining space is above the threshold OR bin does not fit.
        -1.0, # High penalty if remains a very small space after placing the item
    )

    # --- Adaptive Weighting (Item size vs. Available Capacity) ---
    mean_available_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0
    weight = np.clip(item / (mean_available_capacity + 1e-9), 0.0, 1.0)

    # --- Combined Priority ---
    combined_priority = (
        weight * newtonian_priority
        + (1 - weight) * ratio_priority
        + fragmentation_penalty
    )

    # --- Stochastic Element for Exploration (Optional) ---
    exploration_probability = 0.01 # Probability to randomly select any valid bin
    if np.random.rand() < exploration_probability:
        valid_indices = np.where(valid_bins)[0]
        if len(valid_indices) > 0:
            random_index = np.random.choice(valid_indices)
            combined_priority[:] = -np.inf  # Reset all priorities
            combined_priority[random_index] = 10 # Give a very high priority

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
