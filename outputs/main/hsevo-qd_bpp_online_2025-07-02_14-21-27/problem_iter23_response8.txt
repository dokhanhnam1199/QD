```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, capacity ratio, and bin utilization."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Capacity ratio component
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # Bin utilization component (Prioritize fuller bins)
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))
    utilization_priority = bin_utilization

    # Adaptive weighting based on item size relative to *available* capacity
    weight = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)

    # Combine priorities
    combined_priority = (weight * newtonian_priority +
                         (1 - weight) * ratio_priority +
                         0.5 * utilization_priority)  # Added bin utilization

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
