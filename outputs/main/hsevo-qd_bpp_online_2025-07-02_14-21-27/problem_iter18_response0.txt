```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that incorporates adaptive weights,
    stochastic exploration, and a refined handling of bin capacities.  It uses a combination
    of capacity-aware potential, utilization, and an emphasis on fitting items snugly without
    excessive fragmentation.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity-Aware Newtonian Potential (refined)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Bin Utilization (Encourages filling partially full bins - refined)
    max_capacity = np.max(bins_remain_cap)
    bin_utilization = 1 - (safe_bins_remain_cap / max_capacity)  # Normalize to 0-1
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 3. Fragmentation Penalty (Prioritizes bins that fit items snugly)
    fragmentation = np.abs(safe_bins_remain_cap - item)
    fragmentation_priority = -fragmentation  # Smaller fragmentation is better

    # 4. Remaining Capacity Ratio (Focuses on bins closest to item size)
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    capacity_priority = np.log(capacity_ratio)


    # 5. Adaptive Weighting based on Item Size and Available Capacity
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_ratio = item / (avg_capacity + 1e-9)
    weight_newtonian = np.clip(1- item_ratio, 0.1, 0.9)  #More weight to Newton for smaller items
    weight_utilization = np.clip(item_ratio, 0.1, 0.9)  #More weight to utilization for larger items
    weight_fragmentation = np.clip(1- np.abs(item_ratio - 0.5) * 2, 0.0, 0.8) # Mid sized items use fragmentation the most


    # 6. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_utilization * utilization_priority +
        weight_fragmentation * fragmentation_priority +
        0.1 * capacity_priority
    )

    # 7. Stochastic Exploration (Introduce some randomness - reduced level of exploration)
    exploration_factor = 0.005  # Reduced exploration
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 8. Handling Invalid Bins and NaN values
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
