```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian, capacity ratio, and fragmentation with adaptive weights."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_size = np.max(bins_remain_cap)

    # Heuristic 1: Remaining Capacity Ratio
    capacity_ratio = safe_bins_remain_cap / bin_size
    capacity_priority = capacity_ratio

    # Heuristic 2: Item Fit Score (Fragmentation)
    fit_score = np.exp(-np.abs(safe_bins_remain_cap - item) / (bin_size / 4))
    fit_priority = fit_score

    # Heuristic 3: Newtonian
    newtonian_component = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, newtonian_component, -np.inf)

    # Adaptive Weighting
    item_size_ratio = item / bin_size
    weight_capacity = 0.1 if item_size_ratio < 0.5 else 0.05
    weight_fit = 0.4 if item_size_ratio < 0.5 else 0.35
    weight_newtonian = 0.5 if item_size_ratio < 0.5 else 0.6

    # Combined Priority
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_fit * fit_priority +
        weight_newtonian * newtonian_priority
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
