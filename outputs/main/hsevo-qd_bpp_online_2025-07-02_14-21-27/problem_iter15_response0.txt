```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that combines multiple factors
    with adaptive weighting and stochastic exploration.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity-Aware Newtonian Potential
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Normalized Remaining Capacity
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    capacity_priority = np.log(capacity_ratio)

    # 3. Bin Utilization (Encourages filling partially full bins)
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))  # Normalize to 0-1
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 4. Item Size Relative to Average Available Capacity (Adaptive Weighting)
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    weight_newtonian = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_capacity = np.clip(1 - item / (avg_capacity + 1e-9), 0.0, 1.0)

    # 5. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_capacity * capacity_priority +
        0.2 * utilization_priority # Weight for utilization
    )

    # 6. Stochastic Exploration (Introduce some randomness)
    exploration_factor = 0.01  # Adjust for desired exploration level
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Handling Invalid Bins and NaN values
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
