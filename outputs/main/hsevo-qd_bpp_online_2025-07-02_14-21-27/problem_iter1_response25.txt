```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if not np.any(eligible_bins):
        # If no bin can fit, prioritize bins with largest remaining capacity.
        priorities = bins_remain_cap.copy()
    else:
        # Heuristic 1: Minimize wasted space. Prioritize bins where the remaining space after placing the item is smallest.
        wasted_space = bins_remain_cap - item
        wasted_space[~eligible_bins] = np.inf  # Exclude ineligible bins
        priorities[eligible_bins] = -wasted_space[eligible_bins]  # Invert for priority

        # Heuristic 2: Balance fill levels. Give a slight preference to bins that are already somewhat full.
        fill_levels = 1 - bins_remain_cap / bins_remain_cap.max()
        fill_levels[~eligible_bins] = 0  #Exclude ineligible bins
        priorities[eligible_bins] += 0.1 * fill_levels[eligible_bins]

    return priorities
```
