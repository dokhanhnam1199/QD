```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating several improvements:

    1.  Adaptive Capacity-Aware Weighting:  Dynamically adjusts the balance between different priority components based on the remaining capacity of bins relative to the item size.
    2.  Remaining Capacity Focus: Prioritizes bins with capacity closer to the item size, but only if they can fit the item.
    3.  Bin State Awareness: Accounts for bins that are nearly full, empty, or somewhere in between.
    4. Robustness: Adds small values to denominators to prevent division by zero.

    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity-Aware Weighting (Focus on Tight Fit):
    capacity_ratio = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)  # Ratio of item size to bin capacity. Closer to 1 is a tighter fit.
    tight_fit_priority = np.where(safe_bins_remain_cap >= item, 1 - np.abs(1 - capacity_ratio), -np.inf) # higher if close to item size.

    # 2. Remaining Capacity Signal
    remaining_cap_priority = safe_bins_remain_cap / (np.max(safe_bins_remain_cap) + 1e-9)

    # 3. Bin State Awareness:
    #   - Give preference to bins with substantial remaining capacity, but only if they can fit the item.
    bin_state_priority = np.where(safe_bins_remain_cap >= item, np.sqrt(safe_bins_remain_cap) , -np.inf)

    # Combine the priorities, adaptively weighted by bin capacity
    combined_priority = (
        0.4 * tight_fit_priority +
        0.3 * remaining_cap_priority +
        0.3 * bin_state_priority
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
