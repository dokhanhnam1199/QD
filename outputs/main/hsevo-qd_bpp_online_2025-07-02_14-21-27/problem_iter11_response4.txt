```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity matching and Newtonian potential for bin priority."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    capacity_diff = np.abs(safe_bins_remain_cap - item)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Newtonian potential (inverse of capacity difference)
    newtonian_potential = 1 / (capacity_diff + 1e-6)

    # Combined score: weighted sum of proportion filled and Newtonian potential
    priority = 0.6 * proportion_filled + 0.4 * newtonian_potential

    priority += np.random.rand(len(bins_remain_cap)) * 0.01
    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)

    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)
    return priority
```
