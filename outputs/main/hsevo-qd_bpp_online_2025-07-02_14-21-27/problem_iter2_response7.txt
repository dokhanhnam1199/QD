```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian approach with ratio-based adjustments.
    Adapts to bin capacity and item size for optimized packing.
    """
    # Newtonian-inspired potential
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, priorities)

    # Ratio-based adjustment: weighs bins that have good capacity
    ratios = item / bins_remain_cap
    log_ratios = np.log(np.maximum(ratios, 1e-6)) # avoid log(0)
    priorities += -0.1 * log_ratios  # scale down ratio effect

    return priorities
```
