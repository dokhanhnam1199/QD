```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian potential, capacity ratio, and fragmentation awareness with adaptive weighting and stochastic exploration.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component (Focuses on bins close to the item size)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Capacity ratio component (Prioritizes bins that have space relative to item)
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # Fragmentation awareness: Penalize bins that will be left with very small remaining capacity
    fragmentation_threshold = 0.1  # Fraction of bin size
    fragmentation_penalty = -10  # Penalty value
    fragmentation_priority = np.where(
        (safe_bins_remain_cap - item > 0) & (safe_bins_remain_cap - item < fragmentation_threshold),
        fragmentation_penalty,
        0.0
    )

    # Adaptive weighting based on item size relative to *available* capacity
    mean_available_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0
    weight_newtonian = np.clip(item / (mean_available_capacity + 1e-9), 0.0, 1.0)
    weight_ratio = 1 - weight_newtonian

    # Adaptive weighting for fragmentation based on how full bins are on average
    avg_bin_utilization = 1 - (mean_available_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0
    weight_fragmentation = np.clip(avg_bin_utilization * 2 - 1 , 0.0, 0.5)  # Higher weight when bins are mostly full
    weight_newtonian *= (1 - weight_fragmentation)
    weight_ratio *= (1 - weight_fragmentation)
    # Combine the priorities with adaptive weighting
    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_ratio * ratio_priority +
        weight_fragmentation * fragmentation_priority
    )

    # Stochastic Exploration: Add small random noise to break ties and explore different options
    exploration_factor = 0.01  # Adjust this value based on desired exploration level
    noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += noise

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
