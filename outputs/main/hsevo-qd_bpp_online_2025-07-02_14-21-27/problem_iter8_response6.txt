```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity matching with ratio-based prioritization."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Capacity difference
    capacity_diff = np.abs(safe_bins_remain_cap - item)

    # Proportion filled
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Ratio of item to remaining capacity
    ratios = item / safe_bins_remain_cap
    log_ratios = np.log(ratios + 1e-6) # Adding small number to avoid log(0)

    # Combine scores adaptively:
    priority = (0.6 * proportion_filled / (capacity_diff + 1e-6)) + (0.4 * (-log_ratios)) # Weighted average

    # Exploration factor
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    # Ensure item fits and handle invalid bins:
    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)
    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)

    return priority
```
