```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function that incorporates bin diversity, a refined capacity factor,
    dynamic exploration, and enhanced robustness for online bin packing.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1) #Using -1 avoids comparison issues with np.inf

    # 1. Capacity-Aware Newtonian Potential (Similar to v1, but slightly adjusted)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Refined Normalized Remaining Capacity (Focus on tighter fit)
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    capacity_priority = np.log(capacity_ratio) * np.exp(-np.abs(safe_bins_remain_cap - item)/(np.mean(bins_remain_cap[valid_bins]) + 1e-9)) # Penalize large gaps

    # 3. Bin Utilization (Encourages filling partially full bins)
    max_cap = np.max(bins_remain_cap)
    bin_utilization = 1 - (safe_bins_remain_cap / max_cap)
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 4. Bin Diversity (Encourage using bins with different fill levels)
    std_dev_cap = np.std(bins_remain_cap[valid_bins]) if np.sum(valid_bins) > 1 else 0.0
    diversity_priority = np.abs(safe_bins_remain_cap - np.mean(bins_remain_cap[valid_bins])) / (std_dev_cap + 1e-9) if std_dev_cap > 0 else 0.0
    diversity_priority = np.where(safe_bins_remain_cap >= item, diversity_priority, -np.inf)


    # 5. Adaptive Weighting (Dynamic based on item size and bin characteristics)
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_ratio = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0) #Ratio of item size to average capacity
    weight_newtonian = np.clip(1-item_ratio, 0.05, 0.95) # Heavier weight when item is smaller
    weight_capacity = np.clip(item_ratio, 0.05, 0.95) #Heavier when item is closer to average capacity
    weight_utilization = np.clip(item_ratio, 0.05, 0.5)
    weight_diversity = np.clip(1-item_ratio, 0.05, 0.3)

    # 6. Combined Priority
    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_diversity * diversity_priority
    )

   # 7. Dynamic Stochastic Exploration (Adaptive to problem instance)
    exploration_factor = 0.01 * np.exp(-item_ratio) #Less exploration for larger items
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 8. Robustness and Handling Invalid Bins
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
