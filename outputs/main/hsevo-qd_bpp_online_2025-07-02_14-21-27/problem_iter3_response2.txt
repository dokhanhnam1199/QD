```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Adaptive Capacity Matching Heuristic: Prioritizes bins based on how well
    the item's size "fits" into the remaining capacity, considering both
    the absolute difference and the proportion of the bin filled. Also includes a small random factor to handle pathological cases.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative capacity
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
      return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Calculate capacity difference
    capacity_diff = np.abs(safe_bins_remain_cap - item)

    # Calculate proportion of bin filled if item is added
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)  # Negative inf if item doesn't fit

    # Calculate a combined score: lower difference AND higher fill is better
    priority = proportion_filled / (capacity_diff + 1e-6) # Adding small number to prevent division by zero and stabilize

    # Add a small random factor to avoid stagnation and explore different solutions
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    # Ensure the item fits in the bin, otherwise, very low priority
    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)

    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)  # Invalid bins get lowest priority
    return priority
```
