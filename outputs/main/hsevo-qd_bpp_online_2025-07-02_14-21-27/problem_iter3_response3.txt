```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Adaptive Optimization Heuristic: Combines Newtonian-inspired potential
    with a bin utilization factor and a penalty for near-full bins to encourage
    better overall packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative capacity
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Calculate "gravitational potential" - higher potential = higher priority
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))

    # Bin Utilization Factor: Encourages using bins that are already somewhat full
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap)) # Normalize to bin size

    # Near-Full Bin Penalty: Discourages adding to bins that will become nearly full
    near_full_penalty = np.where(safe_bins_remain_cap - item < 0.1 * np.max(bins_remain_cap), -10, 0) # Critical param: near-full threshold

    # Combine factors: Prioritize bins close to item size, with some utilization, but avoid near-full bins
    priorities = np.where(safe_bins_remain_cap >= item, potential + bin_utilization + near_full_penalty, -np.inf)
    priorities = np.nan_to_num(priorities, neginf=-np.inf)  # Handle inf values after masking
    priorities = np.where(~valid_bins, -np.inf, priorities)  # Ensure that initially invalid bins have -inf priorities

    return priorities
```
