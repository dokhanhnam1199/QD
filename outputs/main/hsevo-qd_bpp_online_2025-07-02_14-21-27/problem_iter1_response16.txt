```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Hawking Radiation inspired: Smaller remaining capacity near item size, higher priority (evaporation)
            diff = cap - item
            priorities[i] = np.exp(-diff**2 / (2 * (item/2)**2))  # Gaussian-like preference near item
            # Prevent too-tight fit: avoid extreme cases where the space left is too little, 
            # increasing the odds that the next item will require a new bin.
            if diff < item * 0.1:  #adjust 0.1?
                priorities[i] *= 0.5  # Reduce the priority of too-tight fits

        else:
            priorities[i] = -np.inf #make infeasible

    # Favour bins with higher relative fill (attempt at balancing usage)
    relative_fills = (np.sum(bins_remain_cap) - bins_remain_cap) / np.sum(bins_remain_cap) if np.sum(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap) # avoid division by 0 if bins_remain_cap = 0

    priorities += relative_fills*0.1

    return priorities
```
