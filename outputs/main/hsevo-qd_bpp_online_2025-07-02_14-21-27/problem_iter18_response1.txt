```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, incorporating multiple factors,
    adaptive weighting, simulated annealing-inspired exploration, and bin diversity.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Remaining Capacity Ratio with Sigmoid Scaling
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    capacity_priority = np.tanh(capacity_ratio)  # Sigmoid for stable gradient

    # 2. Bin Utilization with Penalty for Nearly Full Bins
    max_capacity = np.max(bins_remain_cap)  # Use the actual max capacity
    bin_utilization = 1 - (safe_bins_remain_cap / max_capacity)
    utilization_priority = bin_utilization - np.where(safe_bins_remain_cap < 0.1 * max_capacity, 0.5, 0) # Penalty for nearly full

    # 3. Item Fit Score (How well the item fits in the bin)
    fit_score = np.exp(-np.abs(safe_bins_remain_cap - item) / (max_capacity + 1e-9)) # Gaussian-like distribution
    fit_priority = np.where(safe_bins_remain_cap >= item, fit_score, -np.inf)

    # 4. Bin Diversity (Encourage using bins with different fill levels)
    bin_diversity = np.std(bins_remain_cap[valid_bins]) if np.sum(valid_bins) > 1 else 0
    diversity_priority = np.where(safe_bins_remain_cap >= item, bin_diversity / (max_capacity + 1e-9), -np.inf)

    # 5. Adaptive Weighting based on Item Size
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_size_ratio = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_capacity = 1 - item_size_ratio
    weight_utilization = item_size_ratio
    weight_fit = 0.5
    weight_diversity = 0.1

    # 6. Combined Priority
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_fit * fit_priority +
        weight_diversity * diversity_priority
    )

    # 7. Simulated Annealing-inspired Exploration
    temperature = 0.1  # Adjust for annealing schedule
    exploration_noise = np.random.normal(0, temperature, size=bins_remain_cap.shape)
    combined_priority += exploration_noise

    # 8. Handling Invalid Bins and NaN values
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
