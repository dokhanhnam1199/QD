```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins where the item fits (remaining capacity >= 0).
    fit_indices = remaining_after_add >= 0
    
    if np.any(fit_indices):
        # Prioritize bins that result in a small amount of wasted space.
        priorities[fit_indices] = 1 / (remaining_after_add[fit_indices] + 0.00001)  # Avoid division by zero
        
        # Boost priority for bins that are filled up more completely (higher fill ratio).
        fill_ratio = (bins_remain_cap[fit_indices] - remaining_after_add[fit_indices]) / bins_remain_cap[fit_indices]
        priorities[fit_indices] += fill_ratio * 10 # Scale fill_ratio boost to be significant
    else:
        #If no bin fits, assign a low priority so it is not selected.
        priorities[:] = -1000
    
    return priorities
```
