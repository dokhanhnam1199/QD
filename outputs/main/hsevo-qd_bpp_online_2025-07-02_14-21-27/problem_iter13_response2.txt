import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, ratio_clip_lower: float = 0.0023033259937097366, ratio_clip_upper: float = 3494.586822288903, weight_clip_lower: float = 0.9733524846449393, weight_clip_upper: float = 1.72111317397383, weight_epsilon: float = 6.075275724774057e-07) -> np.ndarray:
    """Combines Newtonian and ratio-based approaches with adaptive weighting."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    
    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Ratio-based component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, ratio_clip_lower, ratio_clip_upper))  # Clip for stability

    # Adaptive weighting based on item size relative to bin capacity
    weight = np.clip(item / (safe_bins_remain_cap + weight_epsilon), weight_clip_lower, weight_clip_upper) # Avoid zero division
    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    
    return priorities
