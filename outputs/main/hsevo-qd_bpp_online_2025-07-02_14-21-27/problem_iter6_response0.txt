```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for the online bin packing problem.
    This version emphasizes a balance between fill level, item fit, and bin utilization
    with more robust handling of edge cases and adaptive parameter tuning.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Fill Level Priority: Prioritize bins that are already somewhat full
    fill_level_priority = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))  # Normalize to 0-1

    # 2. Item Fit Priority: How well the item fits into the remaining capacity
    fit_ratio = item / safe_bins_remain_cap
    fit_priority = np.exp(-np.abs(fit_ratio - 0.8)) # Prefer bins where item fills ~80% capacity
    fit_priority = np.where(safe_bins_remain_cap < item, -np.inf, fit_priority) #Infeasible bins get -inf

    # 3. Bin Utilization Priority: Encourage using bins effectively
    utilization_priority = np.zeros_like(bins_remain_cap)
    nearly_full_bins = (safe_bins_remain_cap - item) < (0.1 * np.max(bins_remain_cap))
    utilization_priority = np.where(nearly_full_bins & (safe_bins_remain_cap >= item), 1.0, 0.0)

    # Adaptive Weighting and Combination
    weight_fill = 0.3
    weight_fit = 0.5
    weight_util = 0.2

    combined_priority = (weight_fill * fill_level_priority +
                           weight_fit * fit_priority +
                           weight_util * utilization_priority)
    
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf) # Handle NaNs
    priorities = np.where(~valid_bins, -np.inf, combined_priority) # Invalidate bins

    return priorities
```
