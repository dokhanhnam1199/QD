```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian potential with a capacity ratio and exploration.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, priorities)

    # Capacity ratio component
    ratios = item / safe_bins_remain_cap
    log_ratios = np.log(ratios)
    capacity_priority = -log_ratios
    capacity_priority = np.where(~valid_bins, -np.inf, capacity_priority)
    capacity_priority = np.nan_to_num(capacity_priority, neginf=-np.inf)

    # Adaptive weighting of potential and capacity ratio
    alpha = 0.7  # Weight for potential
    beta = 0.3   # Weight for capacity ratio

    final_priorities = alpha * priorities + beta * capacity_priority

    # Exploration: Add small random noise to priorities
    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)
    final_priorities += noise

    return final_priorities
```
