```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, capacity ratio, adaptive weights, and adds exploration."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Capacity ratio component
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # Adaptive weighting
    weight = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)

    # Combine the priorities with adaptive weighting
    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)

    #Stochastic exploration
    exploration_noise = np.random.normal(0, 0.1, size=bins_remain_cap.shape)  # Add some noise
    priorities = np.where(~valid_bins, -np.inf, combined_priority + exploration_noise)


    return priorities
```
