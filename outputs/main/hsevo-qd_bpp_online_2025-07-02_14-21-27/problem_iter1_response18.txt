```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small default value
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9  #Very low default priority

    # Only consider bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        #No bins fit, return all small priorities
        return priorities

    # Calculate fill ratio for valid bins
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Calculate remaining capacity ratio for valid bins
    remaining_capacity_ratio = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)

    # Combine both to make a score
    priorities[valid_bins] = (fill_ratio*1.2 - remaining_capacity_ratio)* 100 # Favor smaller bins and good fill ratio
    
    # Add a bonus if it is close to filling bin
    close_to_full = bins_remain_cap[valid_bins] - item < 0.1
    priorities[valid_bins][close_to_full] += 5 #Give these bins extra priority

    return priorities
```
