```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining capacity, fit, and exploration."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_size = np.max(bins_remain_cap)

    # 1. Capacity Ratio
    capacity_ratio = safe_bins_remain_cap / bin_size
    capacity_priority = capacity_ratio

    # 2. Item Fit Score
    fit_score = np.exp(-np.abs(safe_bins_remain_cap - item) / (bin_size / 4))
    fit_priority = fit_score

    # 3. Usage Priority
    usage_level = 1 - capacity_ratio
    usage_priority = np.sqrt(usage_level)

    # 4. Newtonian Potential
    newtonian_component = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, newtonian_component, -np.inf)

    # 5. Adaptive Weights
    item_size_ratio = item / bin_size
    weight_capacity = 0.2 if item_size_ratio < 0.3 else (0.1 if item_size_ratio < 0.6 else 0.05)
    weight_fit = 0.5 if item_size_ratio < 0.3 else (0.4 if item_size_ratio < 0.6 else 0.3)
    weight_usage = 0.2 if item_size_ratio < 0.3 else (0.3 if item_size_ratio < 0.6 else 0.4)
    weight_newtonian = 0.1 if item_size_ratio < 0.3 else (0.2 if item_size_ratio < 0.6 else 0.25)

    # 6. Stochastic Exploration
    temperature = 0.1
    exploration_factor = temperature * np.exp(-item_size_ratio)
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)

    # Combine and return
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_fit * fit_priority +
        weight_usage * usage_priority +
        weight_newtonian * newtonian_priority +
        random_noise
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
