```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential and capacity ratio with adaptive weighting."""
    epsilon = 1e-9
    ratio_min = 0.01
    ratio_max = 100
    weight_clip_min = 0.1
    weight_clip_max = 0.9

    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newton_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newton_priorities = np.nan_to_num(newton_priorities, neginf=-np.inf)
    newton_priorities = np.where(~valid_bins, -np.inf, newton_priorities)

    ratios = item / (bins_remain_cap + epsilon)
    ratios = np.clip(ratios, ratio_min, ratio_max)
    log_ratios = np.log(ratios)
    ratio_priorities = -log_ratios

    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight = np.clip(item / (mean_cap + epsilon), weight_clip_min, weight_clip_max)

    combined_priorities = (1 - weight) * newton_priorities + weight * ratio_priorities
    return combined_priorities
```
