```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: Combines ratio and remaining capacity with exploration."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    
    # Ratio-based priority
    ratio_priority = np.clip(item / safe_bins_remain_cap, 0.001, 1000)
    ratio_priority = np.log(ratio_priority)

    # Remaining capacity priority - prioritize bins closer to item size
    capacity_priority = -np.abs(safe_bins_remain_cap - item)

    # Adaptive weight: Larger items emphasize capacity, smaller items emphasize ratio.
    weight = np.clip(item / (np.mean(safe_bins_remain_cap) + 1e-9), 0.0, 1.0)
    combined_priority = weight * capacity_priority + (1 - weight) * ratio_priority

    # Exploration: Randomly boost priority of some bins.
    exploration_mask = np.random.rand(len(bins_remain_cap)) < 0.05 # 5% exploration
    combined_priority = np.where(exploration_mask & valid_bins, combined_priority + np.random.rand(len(bins_remain_cap)) * 2, combined_priority)

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
