```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based and capacity-matching approaches with exploration."""

    # Ratio-based priority (modified)
    ratios = item / (bins_remain_cap + 1e-6)  # Avoid division by zero
    priority = -np.log(ratios + 1e-6)  # Make sure log defined

    # Capacity matching
    capacity_diff = np.abs(bins_remain_cap - item)
    proportion_filled = np.where(bins_remain_cap >= item, item / (bins_remain_cap + 1e-6), -np.inf)
    capacity_priority = proportion_filled / (capacity_diff + 1e-6)

    # Adaptive weighting (combining both)
    priority = 0.6 * priority + 0.4 * capacity_priority

    # Exploration: Add small randomness
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    # Ensure item fits
    priority = np.where(bins_remain_cap >= item, priority, -np.inf)

    priority = np.nan_to_num(priority, neginf=-np.inf)
    return priority
```
