```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines volume utilization, balance, large item penalty, and Newtonian potential."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)

    # 1. Volume Utilization: Favor bins that will be filled well.
    volume_utilization_priority = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # 2. Balance Priority: Penalize bins with small remaining space.
    balance_priority = np.where(safe_bins_remain_cap >= item, (safe_bins_remain_cap - item) / np.max(bins_remain_cap), -np.inf)

    # 3. Large Item Penalty
    large_item_penalty = np.where(item > np.mean(bins_remain_cap), -0.1, 0.0)

    # 4. Newtonian Potential
    newtonian_potential = np.where(safe_bins_remain_cap >= item, (item / safe_bins_remain_cap) / (abs(safe_bins_remain_cap - item) + 1e-9), -np.inf)

    # Combine Priorities
    combined_priority = (
        0.4 * volume_utilization_priority +
        0.2 * (-balance_priority) +
        0.1 * large_item_penalty +
        0.3 * newtonian_potential
    )

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    
    return priorities
```
