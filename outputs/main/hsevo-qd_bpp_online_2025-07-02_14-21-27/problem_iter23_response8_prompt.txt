{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines Newtonian potential and capacity ratio with adaptive weighting.\"\"\"\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)\n\n    # Newtonian component (Focuses on bins close to the item size)\n    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)\n    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)\n\n    # Capacity ratio component (Prioritizes bins that have space relative to item)\n    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)\n    ratio_priority = np.log(capacity_ratio)\n\n    # Adaptive weighting based on item size relative to *available* capacity\n    weight = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)\n\n    # Combine the priorities with adaptive weighting\n    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority\n\n    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)\n    priorities = np.where(~valid_bins, -np.inf, combined_priority)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of Newtonian potential, capacity ratio, bin utilization, and stochastic exploration, with adaptive weighting based on item size, while the worst heuristic uses only the ratio of item size to remaining capacity. (2nd best) vs (second worst): the second-best heuristic also uses Newtonian potential and capacity ratio but adds a fragmentation penalty and adaptive weighting. (1st) vs (2nd), the best heuristic incorporates bin utilization and stochastic exploration, which are absent in the second-best. The best also has exploration factor, and the 2nd one does not have it.\n(3rd) vs (4th): They are identical. Comparing (second worst) vs (worst), we see that both use a simple ratio-based approach, but the second worst includes numpy and some calculations, while the worst is simpler. The later one are more straightforward and have not used `numpy` well.\nOverall: The better heuristics incorporate more factors, use adaptive weighting, and include stochastic exploration to avoid local optima. They also handle edge cases more robustly by checking valid bins and avoiding division by zero. The worse heuristics are simpler but less effective because they ignore important factors and are prone to getting stuck in local optima.\n- \nOkay, let's redefine \"Current Self-Reflection\" to design better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection.\"\n\nHere's a refined approach:\n\n*   **Keywords:** Adaptive, multi-faceted, robust, contextual, iterative.\n*   **Advice:** Develop heuristics that dynamically adapt based on context and incorporate multiple relevant factors. Prioritize robustness, especially against edge cases.\n*   **Avoid:** Oversimplification, premature optimization, neglecting edge cases, lack of validation.\n*   **Explanation:** Design should be iterative: Begin with a foundational approach, rigorously test, and iteratively refine, focusing on adaptive mechanisms and addressing weaknesses revealed through testing.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}