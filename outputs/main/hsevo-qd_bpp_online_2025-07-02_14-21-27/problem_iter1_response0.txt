```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Reward bins that can fit the item
            priorities[i] = (cap - item) / cap  # Higher priority to bins with tighter fit

            #Bonus for bins that are already somewhat full (encourages using partially filled bins)
            if cap < 1.0: # Assuming bin capacity is 1.0, or normalize it.
                priorities[i] += 0.5 * (1 - cap)

        else:
            # Penalize bins that cannot fit the item
            priorities[i] = -1e9  # Very low priority
    return priorities
```
