```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines several strategies:
    - Volume Utilization: Encourages filling bins as much as possible.
    - Balance: Tries to equalize the remaining space in the bins.
    - Penalty for large items: Reduce the chance that large items leave bins highly fragmented.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)  # Use -1 for invalid bins

    # 1. Volume Utilization Priority: Favor bins that will be filled well.
    volume_utilization_priority = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # 2. Remaining Space Balance Priority:  Penalize bins which after insertion would have small remaining space and large items.
    balance_priority = np.where(safe_bins_remain_cap >= item, (safe_bins_remain_cap - item) / np.max(bins_remain_cap), -np.inf)

    # 3. Large Item Penalty
    large_item_penalty = np.where(item > np.mean(bins_remain_cap), -0.1, 0.0)  # Small penalty if item is large

    # 4. Combine Priorities with weights

    combined_priority = (
        0.6 * volume_utilization_priority +
        0.3 * (-balance_priority) +  # Invert to prefer smaller remaining space.
        0.1 * large_item_penalty
    )

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    
    return priorities
```
