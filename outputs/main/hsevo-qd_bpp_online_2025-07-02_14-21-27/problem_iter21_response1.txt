```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, incorporating adaptive weights,
    robust edge case handling, and stochastic exploration with a focus on bin diversity.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)

    # 1. Remaining Capacity Ratio (Prioritize bins that are close to full after packing)
    capacity_ratio = np.clip((safe_bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-9), 0.0, 1.0)
    capacity_priority = np.where(safe_bins_remain_cap >= item, 1 - capacity_ratio, -np.inf)

    # 2. Item Fit Score (How well the item fits relatively to the bin's capacity)
    item_fit_score = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    fit_priority = np.where(safe_bins_remain_cap >= item, 1 - np.abs(item_fit_score - 0.5), -np.inf)

    # 3. Bin Utilization History (Track how often bins have been used)
    # Simulate history of bin usage (for demonstration; in real implementation, would persist).
    bin_usage_count = np.random.randint(1, 10, size=bins_remain_cap.shape)
    utilization_priority = np.log(bin_usage_count + 1e-9)

    # 4. Adaptive Weighting Based on Item Size and Bin Capacity
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    weight_capacity = np.clip(1 - item / (avg_capacity + 1e-9), 0.1, 0.9)
    weight_fit = np.clip(item / (avg_capacity + 1e-9), 0.1, 0.9)
    weight_utilization = 0.1  # Lower Weight for utilization_priority

    # 5. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_fit * fit_priority +
        weight_utilization * utilization_priority
    )

    # 6. Stochastic Exploration (Adjust Exploration Level Based on Remaining Bins)
    exploration_factor = np.clip(1 / (np.sum(valid_bins) + 1e-9), 0.001, 0.1)  # Fewer bins -> more exploration
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Edge Case Handling and Numerical Stability
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
