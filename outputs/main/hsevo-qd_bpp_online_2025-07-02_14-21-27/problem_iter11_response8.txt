```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, ratio, and bin usage with adaptive weighting."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)

    # Ratio component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))

    # Bin Usage component: prioritize emptier bins
    bin_usage_priority = 1.0 / (bins_remain_cap + 1e-9)

    # Adaptive weighting
    weight_newtonian = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    weight_ratio = 1.0 - weight_newtonian
    weight_bin_usage = np.clip(1.0 - (safe_bins_remain_cap.mean() / (safe_bins_remain_cap + 1e-9)), 0, 0.5) # Bias towards emptier bins

    #Combine the newtonian ratio, and bin usage
    combined_priority = weight_newtonian * newtonian_priority + weight_ratio * ratio_priority + weight_bin_usage * bin_usage_priority
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
