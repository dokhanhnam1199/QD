```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive combination of Newtonian and ratio-based priorities with safety."""
    # Newtonian component
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newton_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newton_priorities = np.nan_to_num(newton_priorities, neginf=-np.inf)
    newton_priorities = np.where(~valid_bins, -np.inf, newton_priorities)

    # Ratio component
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 100)  # Clamp for stability
    log_ratios = np.log(ratios)
    ratio_priorities = -log_ratios

    # Adaptive weight based on remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity > 0:
        weight = np.clip(np.sum(bins_remain_cap < item) / len(bins_remain_cap), 0, 1)
    else:
        weight = 0.5  # Default if no capacity

    combined_priorities = (1 - weight) * newton_priorities + weight * ratio_priorities
    return combined_priorities
```
