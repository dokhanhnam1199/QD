```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential and capacity ratio, adaptive weights."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)
    potential = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    ratio = item / safe_bins_remain_cap
    weight = np.clip(item / np.mean(safe_bins_remain_cap[safe_bins_remain_cap != np.inf]), 0, 1) # Adaptive Weight
    priorities = (1 - weight) * potential - weight * ratio
    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, priorities)
    return priorities
```
