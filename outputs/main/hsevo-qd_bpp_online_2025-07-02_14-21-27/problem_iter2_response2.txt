```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian approach with ratio-based adjustments for online BPP."""

    # Newtonian-inspired potential
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, priorities)

    # Ratio-based adjustment: emphasizes bins with closer capacity
    ratios = item / safe_bins_remain_cap
    log_ratios = np.log(ratios)
    ratio_adjustment = -log_ratios
    ratio_adjustment = np.where(~valid_bins, -np.inf, ratio_adjustment)


    # Combined priority:  Newtonian + adjusted ratio to fine-tune.
    combined_priorities = priorities + 0.2 * ratio_adjustment # Reduced weight for ratio_adjustment

    return combined_priorities
```
