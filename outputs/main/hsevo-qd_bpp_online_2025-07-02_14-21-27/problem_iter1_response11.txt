```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a heuristic that combines several factors to
    determine the priority of placing an item into a bin:

    1.  **Capacity Fit:** Bins with remaining capacity close to the item's
        size receive higher priority (reduces fragmentation).

    2.  **Bin Utilization:** Bins that are already relatively full receive
        higher priority (consolidates items into fewer bins).  The utilization
        is non-linearly transformed to emphasize highly utilized bins.

    3.  **Avoidance of Overfill:**  Bins with insufficient capacity receive
        a very low priority (negative value).

    The function returns an array of the same size as bins_remain_cap
    containing the priority score of each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.  Assume bin capacity is 1.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assume all bins have capacity 1

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -1000.0  # Very low priority for insufficient capacity
        else:
            # Capacity Fit - Higher priority for bins with space close to item size
            capacity_fit_score = np.exp(-np.abs(remaining_cap - item) / (0.2 * bin_capacity))

            # Bin Utilization - Higher priority for fuller bins
            utilization = (bin_capacity - remaining_cap) / bin_capacity
            utilization_score = utilization**3 # Cubic to emphasize fuller bins

            # Combine the scores
            priorities[i] = capacity_fit_score + 2 * utilization_score # Adjust weights as needed

    return priorities
```
