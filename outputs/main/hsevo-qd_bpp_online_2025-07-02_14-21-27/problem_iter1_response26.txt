```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers several factors:
    1. How close the item size is to the remaining capacity (best fit).
    2. A small bonus for bins that are nearly empty (to avoid fragmentation if possible).
    3. A large penalty for bins that cannot fit the item.
    4. A term that uses bin fill ratio after packing

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate base priority based on "best fit" - smaller diff is better.
    diff = bins_remain_cap - item
    priorities = -np.abs(diff)

    # Add a bonus for almost empty bins
    almost_empty_threshold = 0.95 * np.max(bins_remain_cap) # use the maximum remaining capacity as a proxy for bin capacity. avoids requiring actual capacity info
    almost_empty_bonus = 10
    priorities[bins_remain_cap > almost_empty_threshold] += almost_empty_bonus

    # Large penalty for bins that cannot fit item
    cannot_fit_penalty = -1e9
    priorities[bins_remain_cap < item] = cannot_fit_penalty
    
    # bin fill ratio AFTER packing
    post_fill_ratio = (np.max(bins_remain_cap) - (bins_remain_cap - item)) / np.max(bins_remain_cap) # approximate pre-packing full size
    post_fill_ratio[bins_remain_cap < item] = 0 # assign zero value
    
    priorities += post_fill_ratio * 5 #scale by 5
    
    return priorities
```
