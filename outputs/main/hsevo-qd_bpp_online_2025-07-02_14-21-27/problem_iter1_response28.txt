```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item to each bin
    remaining_capacities = bins_remain_cap - item

    # Give high priority to bins where the item fits and the remaining capacity is minimized (but not negative)
    fit_indices = remaining_capacities >= 0
    
    if np.any(fit_indices): # if item fits at least in one bin
      priorities[fit_indices] = 1 / (remaining_capacities[fit_indices] + 0.0000001)  # add small number to prevent division by zero

    # Consider bins that *almost* fit, penalizing heavily for those that exceed
    overflow = item - bins_remain_cap
    almost_fit_indices = (overflow > 0) & (overflow < 0.2 * item) # tuning: only "slightly overflowed bins count"
    if np.any(almost_fit_indices):
      priorities[almost_fit_indices] = -10 * overflow[almost_fit_indices]  # Negative priority

    # Very strongly penalize completely overflowing bins
    overflow_indices = overflow >= 0.2*item
    if np.any(overflow_indices):
      priorities[overflow_indices] = -1000
      
    return priorities
```
