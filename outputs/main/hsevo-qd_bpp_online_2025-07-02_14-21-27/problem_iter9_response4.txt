```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A multifactorial and adaptive priority function for online bin packing.

    Combines Newtonian, ratio-based, and fragmentation-based approaches with adaptive weighting.
    Also incorporates a stochastic exploration component.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Newtonian Component (Attraction based on proximity to ideal fit)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)  # Added small constant
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Ratio-based Component (Efficiency of space utilization)
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))  # Clip for stability

    # 3. Fragmentation Component (Penalize bins leading to small remaining space)
    fragmentation = np.clip((safe_bins_remain_cap - item) / np.max(bins_remain_cap), 0, 1)  # Relative fragmentation
    fragmentation_priority = -fragmentation**2  # Penalize high fragmentation (squared for stronger effect)

    # 4. Adaptive Weighting (Dynamically adjust influence of each component)
    item_ratio_to_max_bin = np.clip(item / (np.max(bins_remain_cap) + 1e-9), 0.0, 1.0) # Item size relative to largest bin
    weight_newtonian = 0.4 * (1 - item_ratio_to_max_bin) + 0.1  # Smaller items favor Newtonian, larger items reduce it
    weight_ratio = 0.4 * item_ratio_to_max_bin + 0.1 # Larger items favor ratio, smaller items reduce it. The weights change from [0.1, 0.5] depending of the size of the items
    weight_fragmentation = 0.2

    # 5. Stochastic Exploration (Introduce randomness to avoid local optima)
    exploration_prob = 0.05  # Probability of exploring a non-optimal bin
    random_values = np.random.rand(len(bins_remain_cap))
    explore_mask = (random_values < exploration_prob) & valid_bins
    exploration_bonus = np.where(explore_mask, np.random.rand(len(bins_remain_cap)), 0) # Assign random bonus, only when exploring


    # Combine priorities with adaptive weights
    combined_priority = (
        weight_newtonian * newtonian_priority
        + weight_ratio * ratio_priority
        + weight_fragmentation * fragmentation_priority
        + exploration_bonus # Add stochastic exploration
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)  # Invalidate bins with no capacity


    return priorities
```
