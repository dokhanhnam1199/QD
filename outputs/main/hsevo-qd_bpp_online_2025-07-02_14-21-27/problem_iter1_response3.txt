```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Higher priority means we want to put the item in that bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give highest priority to bins that can fit the item exactly.
    exact_fit = np.isclose(bins_remain_cap, item)
    priorities[exact_fit] = 1000.0  # Very high priority for exact fit

    # For bins that can fit the item, prioritize those with less remaining space *after* packing
    # This encourages filling bins more completely.  We only consider bins with sufficient capacity.
    can_fit = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap[can_fit] - item

    # Assign lower values for bigger remaining sizes
    priorities[can_fit] = 1.0 / (remaining_after_fit + 0.0001) # add a tiny number to avoid division by zero

    # Bins that cannot fit get negative priority
    priorities[bins_remain_cap < item] = -1.0 # avoid trying to put items in bins they don't fit

    return priorities
```
