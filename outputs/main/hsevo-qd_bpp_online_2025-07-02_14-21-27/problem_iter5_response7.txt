```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity difference, fill proportion, and "Newtonian" potential for bin priority."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian potential
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 1e-6)

    # Fill proportion
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / (safe_bins_remain_cap + 1e-6), -np.inf)

    # Capacity difference
    capacity_diff = np.abs(safe_bins_remain_cap - item)

    # Combined score: Newtonian + fill proportion, penalized by capacity difference
    priority = (potential + proportion_filled) / (capacity_diff + 1e-6)

    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)
    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)
    return priority
```
