```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential with log ratio for online bin packing."""

    # Newtonian potential component (handles edge cases, penalizes overflow)
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newton_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newton_priorities = np.nan_to_num(newton_priorities, neginf=-np.inf)
    newton_priorities = np.where(~valid_bins, -np.inf, newton_priorities)

    # Log ratio component (simple, emphasizes relative item size)
    ratios = item / bins_remain_cap
    log_ratios = np.log(np.maximum(ratios, 1e-9)) # Avoid log(0)
    log_priorities = -log_ratios

    # Combine both components: Newtonian handles edge cases and overflow,
    # log ratio provides a general size-based prioritization. We normalize to combine them
    # with proper weight. If newton_priorities == -inf, assign log_priorities instead
    newton_priorities_normalized = np.where(newton_priorities != -np.inf, newton_priorities / np.max(newton_priorities[newton_priorities != -np.inf], initial=-np.inf), 0)
    log_priorities_normalized = log_priorities / np.max(log_priorities, initial=0)

    combined_priorities = np.where(newton_priorities == -np.inf, log_priorities_normalized, newton_priorities_normalized + log_priorities_normalized)

    return combined_priorities
```
