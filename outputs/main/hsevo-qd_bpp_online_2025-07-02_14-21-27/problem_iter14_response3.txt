```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: Newtonian, ratio, & usage. Balances packing efficiency & bin utilization."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_size = np.max(bins_remain_cap)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Ratio-based component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))

    # Bin Usage component
    usage_level = 1 - (safe_bins_remain_cap / bin_size)
    usage_priority = np.sqrt(usage_level)

    # Adaptive weighting based on item size
    item_size_ratio = item / bin_size
    weight_newtonian = 0.5 if item_size_ratio < 0.5 else 0.2
    weight_ratio = 0.3 if item_size_ratio < 0.5 else 0.5
    weight_usage = 0.2

    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_ratio * ratio_priority +
        weight_usage * usage_priority
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
