```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive weighting, utilization, and exploration for bin selection."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Item Fit Score
    fit_score = np.exp(-np.abs(safe_bins_remain_cap - item) / bin_capacity)
    item_size_priority = np.where(safe_bins_remain_cap >= item, fit_score, -np.inf)

    # 2. Capacity Waste Penalty
    capacity_ratio = safe_bins_remain_cap / bin_capacity
    waste_penalty = np.exp(-5 * np.abs(capacity_ratio - (item / bin_capacity)))
    capacity_priority = np.where(safe_bins_remain_cap >= item, waste_penalty, -np.inf)

    # 3. Bin Utilization Boost
    bin_utilization = (bin_capacity - safe_bins_remain_cap) / bin_capacity
    utilization_boost = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 4. Adaptive Weights based on Item Size
    small_item_threshold = 0.2 * bin_capacity
    large_item_threshold = 0.8 * bin_capacity

    if item <= small_item_threshold:
        weight_item_size = 0.1
        weight_capacity = 0.5
        weight_utilization = 0.4
    elif item >= large_item_threshold:
        weight_item_size = 0.7
        weight_capacity = 0.2
        weight_utilization = 0.1
    else:
        weight_item_size = 0.4
        weight_capacity = 0.3
        weight_utilization = 0.3

    # 5. Combined Priority
    combined_priority = (
        weight_item_size * item_size_priority +
        weight_capacity * capacity_priority +
        weight_utilization * utilization_boost
    )

    # 6. Exploration Noise (reduced)
    exploration_factor = 0.005
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Ratio-based Priority (dampened)
    ratio_min = 0.01
    ratio_max = 1.0
    epsilon = 1e-9
    ratios = item / (bins_remain_cap + epsilon)  # Prevent division by zero
    ratios = np.clip(ratios, ratio_min, ratio_max)
    log_ratios = np.log(ratios)
    ratio_priority = -0.1 * log_ratios  # Reduced impact of ratio priority

    # 8. Integrate Ratio Priority
    combined_priority += ratio_priority

    # 9. Final Adjustments
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
