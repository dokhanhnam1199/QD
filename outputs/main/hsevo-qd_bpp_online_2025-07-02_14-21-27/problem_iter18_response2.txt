```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function that incorporates adaptive weighting, temperature-based exploration,
    a refined capacity ratio, and penalties for near-misses.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity-Aware Newtonian Potential (with softened denominator)
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 0.1)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Refined Capacity Ratio: Emphasize bins slightly larger than the item.
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_priority = np.where(
        safe_bins_remain_cap >= item,
        np.exp(-(capacity_ratio - 1)**2 / 0.5),  # Gaussian-like preference around ratio=1
        -np.inf
    )

    # 3. Bin Utilization (Encourages filling partially full bins)
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 4. Near-Miss Penalty: Discourage bins that are almost big enough.
    near_miss_penalty = np.where(
        (safe_bins_remain_cap < item) & (safe_bins_remain_cap > item * 0.75),  # Tune 0.75
        -10,  # Significant penalty
        0
    )

    # 5. Adaptive Weighting based on Item Size and Available Capacity
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_size_ratio = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_newtonian = 1 - item_size_ratio
    weight_capacity = item_size_ratio

    # 6. Temperature-Based Stochastic Exploration (Simulated Annealing)
    temperature = 0.1  # Adjust cooling schedule as needed
    exploration_factor = temperature * np.exp(-item_size_ratio) # Reduce exploration as item size increase
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)

    # 7. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_capacity * capacity_priority +
        0.2 * utilization_priority +
        near_miss_penalty + # Directly add penalty
        random_noise # Add the noise
    )

    # 8. Handle Invalid Bins and NaN values
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
