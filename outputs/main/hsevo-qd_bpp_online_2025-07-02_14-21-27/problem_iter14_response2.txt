```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential and ratio with adaptive weighting and stochastic exploration."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9) # avoid divide by zero
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)

    # Ratio component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)) # avoid divide by zero

    # Adaptive weighting
    weight = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority

    # Stochastic Exploration
    exploration_noise = np.random.normal(0, 0.1, size=bins_remain_cap.shape) #tune exploration factor.
    combined_priority += exploration_noise

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
