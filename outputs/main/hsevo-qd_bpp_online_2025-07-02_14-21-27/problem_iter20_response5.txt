```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio, Newtonian potential, and bin utilization with adaptive weights and penalties."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Capacity Ratio with Gaussian Preference
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_priority = np.where(safe_bins_remain_cap >= item, np.exp(-(capacity_ratio - 1)**2 / 0.5), -np.inf)

    # Newtonian Potential
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 0.1)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Bin Utilization
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # Near-Miss Penalty
    near_miss_penalty = np.where((safe_bins_remain_cap < item) & (safe_bins_remain_cap > item * 0.75), -10, 0)

    # Adaptive Weighting
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_size_ratio = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_newtonian = 1 - item_size_ratio
    weight_capacity = item_size_ratio

    # Combine Priorities
    combined_priority = (weight_newtonian * newtonian_priority + weight_capacity * capacity_priority + 0.2 * utilization_priority + near_miss_penalty)

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
