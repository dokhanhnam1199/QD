```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A multi-faceted priority function for online bin packing, incorporating:
    - Remaining capacity ratio
    - Item size relative to bin capacity (modified Newtonian potential)
    - Bin utilization (how full the bin already is)
    - Stochastic exploration (epsilon-greedy)
    - Adaptive weighting based on item size and bin availability
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity Ratio: Prioritize bins with sufficient remaining capacity relative to item size
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_priority = np.clip(capacity_ratio, 0.01, 100)  # Clip to avoid extreme values
    capacity_priority = np.log(capacity_priority)  # Logarithmic scaling for better distribution

    # 2. Modified Newtonian Potential:  Focus on bins nearly matching item size but penalize overflow harshly
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 3. Bin Utilization: Prioritize bins that are already somewhat full (avoid creating many almost-empty bins)
    bin_capacity = 1.0  # Assuming bins have a capacity of 1.0
    utilization = (bin_capacity - safe_bins_remain_cap) / (bin_capacity + 1e-9)  # avoid zero division
    utilization_priority = utilization  # Higher utilization is better

    # 4. Adaptive Weighting: Adjust weights based on item size and available capacity.
    # Small items: Favor utilization and capacity ratio.
    # Large items: Favor modified Newtonian potential (closer fit).

    avg_available_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0.01
    item_size_ratio = np.clip(item / (avg_available_capacity + 1e-9), 0.0, 1.0) # ratio of item to avg available

    weight_newtonian = item_size_ratio  # Weight for Newtonian component
    weight_capacity = 0.7 * (1 - item_size_ratio) #Weight of capacity priority
    weight_utilization = 0.3 *(1 - item_size_ratio) #Weight of utilization priority

    # 5. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_newtonian * newtonian_priority
        + weight_capacity * capacity_priority
        + weight_utilization * utilization_priority
    )

    # 6. Stochastic Exploration (Epsilon-Greedy):  Introduce some randomness to explore different bin assignments
    epsilon = 0.01  # Exploration probability
    if np.random.rand() < epsilon and np.any(valid_bins):
        # Choose a random valid bin
        valid_indices = np.where(valid_bins)[0]
        random_index = np.random.choice(valid_indices)
        combined_priority = np.full_like(combined_priority, -np.inf)  # Reset all priorities
        combined_priority[random_index] = 1.0  # Assign high priority to the random bin

    # 7. Handle Invalid Bins: Ensure invalid bins (full or non-existent) have the lowest priority
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)  # Convert NaN to -inf
    priorities = np.where(~valid_bins, -np.inf, combined_priority)  # Set invalid bins to -inf

    return priorities
```
