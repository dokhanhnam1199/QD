```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, focusing on adaptive strategies,
    robustness, and contextual awareness. Incorporates insights from previous attempts
    and addresses their limitations.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Remaining Capacity Ratio with Adaptive Scaling
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.01, 100)  # Dampen extreme values
    capacity_priority = np.log(capacity_ratio)

    # 2. Bin Utilization with Non-Linear Emphasis
    max_cap = np.max(bins_remain_cap)
    bin_utilization = 1 - (safe_bins_remain_cap / max_cap)
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization**2, -np.inf) # Emphasize almost full bins

    # 3. Item Fit Score: How well the item fits relative to bin size
    item_fit = (item / safe_bins_remain_cap)
    fit_priority = np.where(safe_bins_remain_cap >= item, 1 - np.abs(item_fit - 0.75), -np.inf)  # Prefer bins where item fills about 75%

    # 4. Adaptive Weighting based on Item Size and Available Capacity
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_size_ratio = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_capacity = 1 - item_size_ratio
    weight_utilization = item_size_ratio * 0.75  # Give utilization a bit less weight
    weight_fit = item_size_ratio * 0.25  # Give fit a smaller, adaptive weight.

    # 5. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_fit * fit_priority
    )

    # 6. Contextual Exploration: Adjust exploration based on bin diversity
    capacity_std = np.std(bins_remain_cap[valid_bins]) if np.sum(valid_bins) > 1 else 0
    exploration_factor = 0.005 * (1 + np.tanh(capacity_std))  # Higher std -> more exploration
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Penalize near-full bins lightly when possible
    near_full_penalty = np.where((safe_bins_remain_cap >= item) & (safe_bins_remain_cap < item + 0.1 * max_cap), -0.1, 0) #A small penalty
    combined_priority += near_full_penalty

    # 8. Handle invalid bins and NaN values
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
