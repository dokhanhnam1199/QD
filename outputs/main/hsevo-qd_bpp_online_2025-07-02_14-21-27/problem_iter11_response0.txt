```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian and ratio-based approaches with adaptive weighting."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    # Newtonian-inspired potential
    diff = np.abs(bins_remain_cap - item)
    newtonian = bins_remain_cap / (diff + 1e-6)

    # Ratio-based approach
    ratios = item / (bins_remain_cap + 1e-6)
    ratios = np.clip(ratios, 0.01, 100)  # Clip for stability
    log_ratios = np.log(ratios)

    # Adaptive weighting (item size-based)
    weight = np.clip(item, 0.1, 0.9)  # Scale by item size
    priorities = weight * newtonian - (1 - weight) * log_ratios

    return priorities
```
