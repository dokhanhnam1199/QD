```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian and ratio-based approaches."""

    # Newtonian component (safe handling and potential calculation)
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newtonian_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priorities = np.nan_to_num(newtonian_priorities, neginf=-np.inf)
    newtonian_priorities = np.where(~valid_bins, -np.inf, newtonian_priorities)

    # Ratio-based component (logarithmic scaling)
    ratios = item / bins_remain_cap
    log_ratios = np.log(np.maximum(ratios, 1e-9))  # Prevent log(0)
    ratio_priorities = -log_ratios

    # Hybrid: Combine both components
    # Balance the exploration (ratio) and exploitation (newtonian)
    hybrid_priorities = 0.7 * newtonian_priorities + 0.3 * ratio_priorities

    return hybrid_priorities
```
