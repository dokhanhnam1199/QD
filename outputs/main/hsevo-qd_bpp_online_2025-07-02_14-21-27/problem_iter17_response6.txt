```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian potential & capacity ratio with stochasticity for bin packing.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian Potential
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Capacity Ratio
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # Combined Priority (equal weighting)
    combined_priority = 0.5 * newtonian_priority + 0.5 * ratio_priority

    # Stochastic Element
    exploration_probability = 0.01
    if np.random.rand() < exploration_probability:
        valid_indices = np.where(valid_bins)[0]
        if len(valid_indices) > 0:
            random_index = np.random.choice(valid_indices)
            combined_priority[:] = -np.inf
            combined_priority[random_index] = 10

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
