```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and safe capacity based approach."""

    # Ratio component
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 100)  # Clamp for stability
    log_ratios = np.log(ratios)
    ratio_priorities = -log_ratios

    # Safe Capacity component
    safe_bins_remain_cap = np.clip(bins_remain_cap, item, np.inf)
    safe_capacity_priorities = safe_bins_remain_cap - item

    # Adaptive Weighting
    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight = np.clip(item / (mean_cap + 1e-9), 0, 1)  # Avoid division by zero

    combined_priorities = (1 - weight) * ratio_priorities + weight * safe_capacity_priorities
    return combined_priorities
```
