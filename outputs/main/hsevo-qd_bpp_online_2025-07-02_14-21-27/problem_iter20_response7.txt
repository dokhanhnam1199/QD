```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on capacity, item size, and exploration."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Capacity Ratio with Gaussian preference
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_priority = np.where(
        safe_bins_remain_cap >= item,
        np.exp(-(capacity_ratio - 1)**2 / 0.5),
        -np.inf
    )

    # Adaptive Weighting
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_size_ratio = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_capacity = item_size_ratio

    # Stochastic Exploration
    temperature = 0.1
    exploration_factor = temperature * np.exp(-item_size_ratio)
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)

    # Combined Priority
    combined_priority = (
        weight_capacity * capacity_priority + random_noise
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
