```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Newtonian approach: Prioritize bins where the 'force' of the item
       relative to the remaining space is balanced with a consideration
       of minimizing wasted potential space.
       Considers a 'gravitational potential' analogy, penalizing almost-full bins that cannot accept the item.
       Also prioritizes bins that are a good 'fit' without being overly wasteful.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Ineligible bins receive the lowest priority (negative infinity).
    ineligible_bins = bins_remain_cap < item
    priorities[ineligible_bins] = -np.inf  

    # Calculate a score for each eligible bin.  Consider a combination of fit and space wasted.
    eligible_bins = ~ineligible_bins

    if np.any(eligible_bins):  # only do calculations if there are any valid bins to calculate priorities for
        fit_score = bins_remain_cap[eligible_bins] - item
        # a good fit would have space left over, but not too much. Penalize both
        fit_score = np.exp(-np.abs(fit_score)) # exponential decay penalizing bins which offer far less/more space.

        capacity_score = bins_remain_cap[eligible_bins]  # Favor bins with more remaining capacity (less full)
        
        # Combine factors.  Adjust weights as needed for performance
        priorities[eligible_bins] = 0.7 * fit_score + 0.3 * (capacity_score / np.max(bins_remain_cap))

    return priorities
```
