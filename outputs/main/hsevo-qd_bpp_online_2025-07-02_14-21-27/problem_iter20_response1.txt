```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential and adaptive capacity ratio,
    with robust handling and fragmentation control.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian potential with softened denominator
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Capacity ratio with clipping
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # Fragmentation penalty
    fragmentation_threshold = 0.1
    fragmentation_penalty = np.where(
        (safe_bins_remain_cap - item > fragmentation_threshold) & (safe_bins_remain_cap >= item),
        0,
        -1.0,
    )

    # Adaptive weighting
    weight = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)

    # Combined priority
    combined_priority = (
        weight * newtonian_priority
        + (1 - weight) * ratio_priority
        + fragmentation_penalty
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
