```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that incorporates:
    - Adaptive weighting based on item size and bin capacity distribution.
    - Dynamic exploration based on bin fill levels.
    - Robust handling of edge cases and numerical stability.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity-Aware Score (Prioritizes bins that fit the item well)
    capacity_diff = safe_bins_remain_cap - item
    capacity_priority = np.where(safe_bins_remain_cap >= item, np.exp(-np.abs(capacity_diff) / (item + 1e-9)), -np.inf)

    # 2. Bin Utilization Score (Encourages filling partially full bins)
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 3. Remaining Capacity Ratio (Prioritizes bins with higher relative remaining capacity, but not too high)
    capacity_ratio = safe_bins_remain_cap / (np.mean(bins_remain_cap[valid_bins]) + 1e-9) if np.any(valid_bins) else 0
    capacity_ratio_priority = np.clip(np.log(capacity_ratio + 1e-9), -5, 5) # clip to avoid extreme values


    # 4. Adaptive Weighting (Adjust weights based on item size and bin characteristics)
    item_size_ratio = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0, 1) if np.any(valid_bins) else 0
    weight_capacity = 1 - item_size_ratio
    weight_utilization = item_size_ratio
    weight_ratio = 0.1  #small weight to capacity ratio

    # 5. Combine Priorities
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_ratio * capacity_ratio_priority
    )

    # 6. Dynamic Exploration (Adjust exploration based on bin fill levels)
    exploration_rate = 0.01
    exploration_std = exploration_rate * (1 - bin_utilization)  # More exploration for emptier bins
    random_noise = np.random.normal(0, exploration_std, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Edge Case Handling
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
