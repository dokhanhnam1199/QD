import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, invalid_priority: float = -11.742475752478072) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Newtonian Optimization Heuristic: Inspired by gravitational potential,
    prioritizes bins based on how "close" the item's size is to the bin's
    remaining capacity, scaled by the remaining capacity itself.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        invalid_priority: Priority assigned to invalid bins (e.g., negative capacity).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative capacity
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
      return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Calculate "gravitational potential" - higher potential = higher priority
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))

    # Further emphasize bins with capacities closest to the item size but also penalize overflowing the bin
    priorities = np.where(safe_bins_remain_cap >= item, potential, invalid_priority)
    priorities = np.nan_to_num(priorities, neginf=invalid_priority) # Handle inf values when item >> safe_bins_remain_cap after masking
    priorities = np.where(~valid_bins, invalid_priority, priorities) # Ensure that bins that are initially invalid has -inf priorities

    return priorities
