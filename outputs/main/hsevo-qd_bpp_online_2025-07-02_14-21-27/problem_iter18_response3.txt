```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, integrating
    adaptive weighting, stochastic exploration, a capacity-based score,
    and bin diversity encouragement.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)

    # 1. Capacity Ratio with Exponential Scaling (Enhances Discrimination)
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_priority = np.where(safe_bins_remain_cap >= item, np.exp(capacity_ratio), -np.inf)

    # 2. Bin Utilization with Sigmoid Function (Smooths and Normalizes)
    max_capacity = np.max(bins_remain_cap)
    bin_utilization = 1 - (safe_bins_remain_cap / (max_capacity + 1e-9))
    utilization_priority = np.where(safe_bins_remain_cap >= item, 1 / (1 + np.exp(-10 * (bin_utilization - 0.5))), -np.inf) # Sigmoid around 0.5 utilization

    # 3. Item Fit Score (How well the item fits relative to remaining capacity)
    fit_score = np.where(safe_bins_remain_cap >= item, np.exp(-np.abs(safe_bins_remain_cap - item) / (item + 1e-9)), -np.inf)

    # 4. Adaptive Weighting Based on Item Size and Bin Availabilty
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    item_size_factor = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_capacity = 0.5 + 0.5 * item_size_factor
    weight_utilization = 0.5 - 0.5 * item_size_factor
    weight_fit = np.clip(1 - item_size_factor * item_size_factor, 0.1, 0.9) #Ensures fit always contributes.

    # 5. Exploration with Temperature (Simulated Annealing Approach)
    temperature = 0.1  # Reduced temperature
    random_noise = np.random.normal(0, temperature, size=bins_remain_cap.shape)

    # 6. Diversity Incentive (Penalize packing into bins with similar capacity)
    capacity_std = np.std(bins_remain_cap[valid_bins]) if np.sum(valid_bins) > 1 else 0
    diversity_penalty = np.where(safe_bins_remain_cap >= item, (safe_bins_remain_cap - avg_capacity) / (capacity_std + 1e-9), 0)
    diversity_priority = np.where(safe_bins_remain_cap >= item, np.exp(-np.abs(diversity_penalty)), -np.inf)  # Exponential penalty

    # 7. Combine Priorities with Weights
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_fit * fit_score +
        0.1 * diversity_priority + # Lower diversity weight
        random_noise
    )

    # 8. Final Adjustments: Invalid Bins and NaN Handling
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
