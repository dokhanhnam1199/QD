```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A heuristic for online bin packing that combines several factors to determine bin priority.
    This version prioritizes bins based on a combination of remaining capacity, item size fit,
    and fragmentation cost, with adaptive weighting and exploration bonuses.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Fit Score: How well the item fits into the remaining capacity
    fit_score = np.zeros_like(bins_remain_cap, dtype=float)
    fit_score[valid_bins] = np.exp(-np.abs(safe_bins_remain_cap[valid_bins] - item) / (item + 1e-9))

    # Only consider bins large enough
    fit_score = np.where(safe_bins_remain_cap >= item, fit_score, -np.inf)


    # 2. Remaining Capacity Ratio: Prioritize bins with enough relative space
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_ratio = np.clip(capacity_ratio, 0.01, 100) # Clip to avoid extreme values
    capacity_priority = np.log(capacity_ratio)


    # 3. Fragmentation Cost: Penalize bins that would leave small, unusable space
    fragmentation_threshold = np.mean(bins_remain_cap[valid_bins]) / 4 #Dynamic threshold
    fragmentation_cost = np.zeros_like(bins_remain_cap, dtype=float)

    remaining_after_fit = safe_bins_remain_cap - item
    fragmentation_cost[valid_bins] = np.where(
        (remaining_after_fit[valid_bins] > 0) & (remaining_after_fit[valid_bins] < fragmentation_threshold),
        -1, #High penalty
        0
    )

    # 4. Adaptive Weighting: Adjust based on item size and available capacities
    avg_capacity = np.mean(bins_remain_cap[valid_bins])
    item_size_weight = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)

    # 5. Exploration Bonus: Encourage trying different bins, especially when capacities are similar
    capacity_std = np.std(bins_remain_cap[valid_bins])
    exploration_bonus = np.random.normal(0, 0.1 * (1 - (capacity_std / (avg_capacity + 1e-9))), size=bins_remain_cap.shape)


    # Combine all factors with adaptive weighting
    combined_priority = (
        item_size_weight * fit_score
        + (1 - item_size_weight) * capacity_priority
        + 0.5 * fragmentation_cost #Relatively strong penality
        + 0.1 * exploration_bonus
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
