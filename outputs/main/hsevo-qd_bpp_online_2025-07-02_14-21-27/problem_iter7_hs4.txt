import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, ratio_min: float = 0.08787264750978585, ratio_max: float = 76.42300951406418, weight_clip_min: float = 0.17911103094288602, weight_clip_max: float = 0.947939657801188, epsilon: float = 5.481320340442446e-09) -> np.ndarray:
    """Combines Newtonian and ratio-based approaches for bin packing priority."""
    # Newtonian component (with safety checks)
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newton_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newton_priorities = np.nan_to_num(newton_priorities, neginf=-np.inf)
    newton_priorities = np.where(~valid_bins, -np.inf, newton_priorities)

    # Ratio component (dampened to avoid dominance)
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, ratio_min, ratio_max)  # Clamp for stability
    log_ratios = np.log(ratios)
    ratio_priorities = -log_ratios

    # Weighted combination - adaptive weight based on item size relative to bin capacities
    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight = np.clip(item / (mean_cap + epsilon), weight_clip_min, weight_clip_max)  # Avoid division by zero

    combined_priorities = (1 - weight) * newton_priorities + weight * ratio_priorities
    return combined_priorities
