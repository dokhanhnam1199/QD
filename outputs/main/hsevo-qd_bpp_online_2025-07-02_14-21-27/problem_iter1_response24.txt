```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
      priorities[valid_bins] = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins] # Utilization Ratio after packing

      # Favor bins with less wasted space after packing
      min_waste = np.min(bins_remain_cap[valid_bins] - item)
      priorities[valid_bins] += 1.0 / (1.0 + (bins_remain_cap[valid_bins] - item - min_waste)) #Add bonus for bins with low waste
    else:
      # If no bin can fit, try to minimize how much item exceeds
      exceed_amount = item - bins_remain_cap
      priorities = -exceed_amount

    return priorities
```
