```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large negative priority if the item doesn't fit
    priorities[item > bins_remain_cap] = -np.inf  

    # First Fit Decreasing variant
    residual_space = bins_remain_cap - item
    priorities[item <= bins_remain_cap] = -np.abs(residual_space[item <= bins_remain_cap]) # Minimize wasted space
    
    # Small bonus to bins that are already somewhat full to promote filling existing bins
    # but only if it fits.
    priorities[item <= bins_remain_cap] += bins_remain_cap[item <= bins_remain_cap] # Try to add to least full

    #Big penalization to adding to a new bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)

    priorities[is_empty & (item <= bins_remain_cap)] -= np.max(bins_remain_cap)

    return priorities
```
