```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, incorporating dynamic bin selection
    based on item size and bin availability.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_capacity = np.max(bins_remain_cap)  # Get the maximum capacity

    # 1. Relative Item Size Priority: Favor bins that accommodate the item snugly.
    item_size_ratio = item / bin_capacity  # Item size relative to bin capacity
    fit_score = np.exp(-np.abs(safe_bins_remain_cap - item) / bin_capacity)
    item_size_priority = np.where(safe_bins_remain_cap >= item, fit_score, -np.inf)

    # 2. Remaining Capacity Ratio Penalty: Discourage leaving too much wasted space.
    capacity_ratio = safe_bins_remain_cap / bin_capacity
    waste_penalty = np.exp(-5 * np.abs(capacity_ratio - item_size_ratio))  # Penalize large waste
    capacity_priority = np.where(safe_bins_remain_cap >= item, waste_penalty, -np.inf)

    # 3. Bin Utilization Boost: Incentivize filling partially filled bins.
    bin_utilization = (bin_capacity - safe_bins_remain_cap) / bin_capacity
    utilization_boost = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 4. Dynamic Weighting: Adjust influence based on item size.
    small_item_threshold = 0.2 * bin_capacity
    large_item_threshold = 0.8 * bin_capacity

    if item <= small_item_threshold:
        # For small items, prioritize utilization and capacity
        weight_item_size = 0.1
        weight_capacity = 0.5
        weight_utilization = 0.4
    elif item >= large_item_threshold:
        # For large items, focus on immediate fit
        weight_item_size = 0.7
        weight_capacity = 0.2
        weight_utilization = 0.1
    else:
        # Balance all factors for medium-sized items
        weight_item_size = 0.4
        weight_capacity = 0.3
        weight_utilization = 0.3

    # 5. Combine Priorities with Dynamic Weights
    combined_priority = (
        weight_item_size * item_size_priority +
        weight_capacity * capacity_priority +
        weight_utilization * utilization_boost
    )

    # 6. Exploration Factor: Introduce randomness for diverse bin selection.
    exploration_factor = 0.005  # Reduced exploration
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Handling Invalid Bins and Numerical Stability
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
