```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, ratio, and exploration with adaptive weighting."""

    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)

    # Ratio component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))

    # Adaptive weighting based on item size.
    weight = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority

    # Stochastic Exploration: Add small random value to each bin
    exploration_strength = 0.01  # Adjust the exploration strength.
    random_values = np.random.uniform(low=-exploration_strength, high=exploration_strength, size=bins_remain_cap.shape)

    priorities = np.where(~valid_bins, -np.inf, combined_priority + random_values)
    return priorities
```
