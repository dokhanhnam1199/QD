```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, featuring adaptive
    parameter adjustment, dynamic weighting, and tailored exploration.
    """
    num_bins = len(bins_remain_cap)
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)

    # 1. Remaining Capacity Ratio (focused on bins where item fits)
    capacity_ratio = safe_bins_remain_cap / (item + 1e-9)
    capacity_priority = np.where(safe_bins_remain_cap >= item, np.log(capacity_ratio + 1e-9), -np.inf)  # Only prioritize bins with enough capacity
    capacity_priority = np.nan_to_num(capacity_priority, neginf=-np.inf)

    # 2. Bin Utilization (penalize almost full bins)
    max_capacity = np.max(bins_remain_cap) if np.any(valid_bins) else 1
    bin_utilization = 1 - (safe_bins_remain_cap / max_capacity)
    utilization_priority = np.where(safe_bins_remain_cap >= item, 1 - bin_utilization, -np.inf) # only consider valid bins
    utilization_priority = np.nan_to_num(utilization_priority, neginf=-np.inf)

    # 3. Fragmentation Penalty (Penalize bins that leave small remaining space)
    fragmentation = safe_bins_remain_cap - item
    fragmentation_penalty = np.where(
        (fragmentation > 0) & (fragmentation < 0.1 * max_capacity),  # Threshold for small space
        -np.abs(fragmentation), # Penalize small fragment
        0  # No penalty if fragmentation is acceptable
    )
    fragmentation_penalty = np.where(safe_bins_remain_cap >= item, fragmentation_penalty, -np.inf)
    fragmentation_penalty = np.nan_to_num(fragmentation_penalty, neginf=-np.inf)

    # 4. Number of Empty Bins
    num_empty_bins = np.sum(bins_remain_cap == max_capacity)
    empty_bin_boost = np.where(bins_remain_cap == max_capacity, 0.01 * num_empty_bins, 0) # Give them a slight boost. Avoid creating too many bins

    # 5. Adaptive Weighting (based on item size)
    item_size_ratio = np.clip(item / max_capacity if max_capacity > 0 else 0, 0, 1)  # Normalized item size
    weight_capacity = 1 - item_size_ratio
    weight_utilization = item_size_ratio * 0.7  # Weight is smaller
    weight_fragmentation = item_size_ratio * 0.3 # fragmentation weight is smaller

    # 6. Combined Priority
    combined_priority = (
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_fragmentation * fragmentation_penalty +
        empty_bin_boost # Add the boost here
    )
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)

    # 7. Stochastic Exploration (Temperature annealing)
    temperature = 0.01 # Reduced temperature
    exploration_noise = np.random.normal(0, temperature, size=num_bins)
    combined_priority += exploration_noise

    # 8. Ensure Invalid Bins have lowest priority
    final_priorities = np.where(~valid_bins, -np.inf, combined_priority)
    final_priorities = np.nan_to_num(final_priorities, neginf=-np.inf)

    return final_priorities
```
