```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian potential, capacity ratio, and fragmentation awareness with adaptive weighting and stochastic exploration.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Newtonian Potential (Attraction based on proximity to ideal fit)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Capacity Ratio (Logarithmic scaling to manage large differences)
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # 3. Fragmentation Awareness (Penalize bins that become too empty)
    fragmentation_penalty = np.exp(-5 * safe_bins_remain_cap / (np.max(bins_remain_cap) + 1e-9))
    fragmentation_priority = -fragmentation_penalty

    # 4. Adaptive Weighting (Dynamically adjust importance based on item size)
    weight_newtonian = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)
    weight_ratio = 1 - weight_newtonian
    weight_fragmentation = np.clip(1 - item / (np.max(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 0.5) # Favor fragmentation more for smaller items

    # 5. Stochastic Exploration (Introduce randomness to escape local optima)
    exploration_factor = 0.01  # Adjust this for more or less exploration
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)

    # 6. Combined Priority
    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_ratio * ratio_priority +
        weight_fragmentation * fragmentation_priority +
        random_noise
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
