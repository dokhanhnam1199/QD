```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of factors to determine the priority:
    1. Remaining Capacity: Bins with capacity close to the item size get higher priority.
    2. Waste Avoidance: Penalizes bins that would result in significant wasted space after packing.
    3. Number of Items: Penalizes bins that contain many items, indirectly
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-6  # Small constant to avoid division by zero and log(0)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Proximity to item size:
            proximity_score = np.exp(-np.abs(capacity - item) / (item + epsilon)) # Closer capacity, higher score

            # Waste avoidance: discourage very large waste if item added
            waste = capacity - item
            waste_penalty = np.exp(-waste / (item + epsilon)) # Less waste is better.

            # Number of items: indirectly penalize full bins
            # item_penalty = bin_num_items[i]/(bin_num_items.sum() + 1e-3) # penalize more frequently used bins
            priorities[i] = proximity_score * waste_penalty # - item_penalty  # Combination of factors

    return priorities
```
