```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, emphasizing robustness,
    adaptive weighting based on bin characteristics, and refined stochastic exploration.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)

    # 1. Space Efficiency Score: How well the item fits (ratio)
    space_efficiency = np.where(safe_bins_remain_cap >= item, item / (safe_bins_remain_cap + 1e-9), -1)
    space_priority = np.where(safe_bins_remain_cap >= item, space_efficiency, -np.inf)

    # 2. Remaining Capacity Percentage
    max_capacity = np.max(bins_remain_cap)
    capacity_percentage = safe_bins_remain_cap / (max_capacity + 1e-9)
    capacity_priority = np.where(safe_bins_remain_cap >= item, capacity_percentage, -np.inf)

    # 3. Bin "Fullness" Preference: Encourage filling bins close to full
    fullness = 1 - capacity_percentage  # 0 (empty) to 1 (full)
    fullness_priority = np.where(safe_bins_remain_cap >= item, fullness, -np.inf)

    # 4.  Adaptive Weighting based on Remaining Capacity Distribution
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    std_capacity = np.std(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9

    # Calculate weights based on how far a bin's remaining capacity is from the average
    capacity_zscore = (safe_bins_remain_cap - avg_capacity) / (std_capacity + 1e-9)
    weight_space = np.clip(1 - np.abs(capacity_zscore), 0.1, 0.9)  # Bins closer to average get higher weight
    weight_capacity = np.clip(0.5 + capacity_zscore, 0.1, 0.9)       # Preferentially select bins with higher remaining capacity if zscore is positive

    # 5. Combine Priorities with Adaptive Weights
    combined_priority = (
        weight_space * space_priority +
        weight_capacity * capacity_priority +
        0.3 * fullness_priority  # Bias towards fuller bins
    )

    # 6. Stochastic Exploration with Capacity Awareness
    exploration_factor = np.clip(0.01 + (item / (max_capacity + 1e-9)), 0.01, 0.1) # Higher for larger items
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Edge Case Handling and Output
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
