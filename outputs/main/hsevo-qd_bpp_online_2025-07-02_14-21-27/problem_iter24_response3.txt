```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, incorporating
    adaptive strategies and focusing on robustness and edge-case handling.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Waste Minimization (Primary Objective)
    waste = safe_bins_remain_cap - item
    waste_priority = np.where(waste >= 0, -np.abs(waste), -np.inf)  # Negative waste preferred

    # 2. Capacity Utilization Balancing
    total_capacity = np.sum(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0
    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9

    capacity_utilization = safe_bins_remain_cap / (total_capacity + 1e-9)  # Ratio of bin capacity to total
    utilization_priority = np.where(safe_bins_remain_cap >= item, capacity_utilization, -np.inf)

    # 3. Item Size Relative to Bin Capacity (Adaptive Weighting)
    capacity_ratio = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.001, 1000)
    size_priority = -np.abs(np.log(capacity_ratio))  # Penalize extreme size mismatches

    # 4. Dynamic Priority Combination with Adaptive Weights
    weight_waste = 0.6  # Base weight for waste minimization
    weight_utilization = 0.3  # Base weight for balancing capacity utilization
    weight_size = 0.1  # Base weight for matching item size to bin capacity

    # Adaptive weight adjustment based on item size relative to average capacity
    size_factor = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)
    weight_waste += 0.1 * (1 - size_factor)  # Increase waste importance for smaller items
    weight_utilization += 0.1 * size_factor  # Increase utilization for larger items

    combined_priority = (
        weight_waste * waste_priority +
        weight_utilization * utilization_priority +
        weight_size * size_priority
    )

    # 5. Bin Diversity Encouragement
    bin_diversity_factor = 0.005 # adjust to the level of desired bin diversity
    if np.any(valid_bins):
        min_remain_cap = np.min(bins_remain_cap[valid_bins])
        max_remain_cap = np.max(bins_remain_cap[valid_bins])
        cap_range = max_remain_cap - min_remain_cap

        if cap_range > 0:
            diversity_priority = bin_diversity_factor * (safe_bins_remain_cap - min_remain_cap) / cap_range
            diversity_priority = np.where(safe_bins_remain_cap >= item, diversity_priority, -np.inf)
            combined_priority += diversity_priority
    
    #6. Stochastic Exploration
    exploration_factor = 0.005  # Reduced Exploration for focused Search
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    # 7. Handling Invalid Bins and NaN values
    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    

    return priorities
```
