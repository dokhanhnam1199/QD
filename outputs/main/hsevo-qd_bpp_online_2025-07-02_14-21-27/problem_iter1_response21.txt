```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # No feasible bin. Assign minimum priority so new bin can be opened
        return priorities

    # 2. Balance usage with minimizing wasted space, but not greedily.
    remaining_after_fit = bins_remain_cap - item
    
    # Prioritize bins where adding the item leaves some space, but not too much.
    # This aims for near-full bins and reduces fragmentation.
    
    # Inverse of wasted space. Smaller wasted space, higher score. Prevents huge waste.
    waste_score = 1.0 / (remaining_after_fit + 1e-9)
    waste_score[remaining_after_fit < 0] = 0 # Penalize infeasible bins

    # Add a bonus for almost full bins, which encourage them to be packed.
    almost_full_bonus = np.exp(-np.abs(remaining_after_fit - 0.1) / 0.05) # If 0.1 is close to 0, then add bonus.
    almost_full_bonus[remaining_after_fit < 0] = 0

    
    # 3. Adjust priority based on original remaining capacity
    #   Bins with higher remaining capacity might be better in the long run if we are unsure of future items.
    capacity_score = bins_remain_cap / np.max(bins_remain_cap) #Normalize
    
    
    priorities = feasible_bins * (waste_score + 0.5 * almost_full_bonus + 0.2*capacity_score) 
    
    return priorities
```
