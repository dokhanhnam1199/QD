```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, ratio, bin utilization with exploration."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)

    # Ratio component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000))

    # Bin Utilization component
    bin_utilization = 1 - (safe_bins_remain_cap / np.sum(safe_bins_remain_cap))
    bin_utilization_priority = np.clip(bin_utilization, 0, 1)

    # Adaptive weighting
    weight_newtonian = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    weight_ratio = np.clip(1 - item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)

    combined_priority = (weight_newtonian * newtonian_priority +
                         weight_ratio * ratio_priority +
                         0.1 * bin_utilization_priority)

    # Exploration component: Add stochasticity to priorities
    exploration_factor = 0.01  # Adjust for desired exploration level
    noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += noise

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
