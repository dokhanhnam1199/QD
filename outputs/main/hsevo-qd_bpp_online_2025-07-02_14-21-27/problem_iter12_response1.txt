```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that combines several heuristics
    with dynamic adjustment based on bin availability and item size.
    """

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. First-Fit Decreasing-inspired Preference: prioritize bins closest to item size.
    size_difference = np.abs(safe_bins_remain_cap - item)
    size_priority = -size_difference  # Smaller difference is better

    # Add a bonus for bins where the item *fits*
    fit_bonus = np.where(safe_bins_remain_cap >= item, 10, -np.inf) #Large bonus for valid bins

    # 2. Capacity utilization: prefer bins that will be well-utilized after packing.
    utilization = item / (bins_remain_cap + 1e-9) #Consider original capacity for utilization
    utilization_priority = np.clip(utilization, 0, 1)  # Ensure values between 0 and 1
    utilization_priority = np.where(safe_bins_remain_cap >= item, utilization_priority, -np.inf)

    # 3. Avoid fragmentation. Penalize bins that would have very small remaining capacity.
    remaining_after_pack = safe_bins_remain_cap - item
    fragmentation_penalty = np.where(
        (remaining_after_pack > 0) & (remaining_after_pack < 0.1), -5, 0
    ) #Consider a small margin

    #4. Dynamic Weighting based on Item Size and Bin Availability
    available_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0
    item_size_ratio = np.clip(item / (available_capacity + 1e-9), 0.0, 1.0)

    # Combine priorities, adding weights based on item_size_ratio
    combined_priority = (
        (1 - item_size_ratio) * (size_priority + fit_bonus)
        + item_size_ratio * utilization_priority
        + fragmentation_penalty
    )

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
