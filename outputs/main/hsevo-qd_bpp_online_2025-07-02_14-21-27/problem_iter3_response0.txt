```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Adaptive Capacity Matching Heuristic: Combines a capacity-matching score with
    a bin-utilization factor to adaptively prioritize bins.  It also incorporates a small
    random element to break ties and potentially explore new packing arrangements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Handle edge cases: empty bins_remain_cap
    if bins_remain_cap.size == 0:
        return np.array([])

    # Avoid division by zero and negative capacity
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Capacity Matching Score: Prioritize bins where the item fits well.
    capacity_difference = np.abs(safe_bins_remain_cap - item)
    capacity_matching_score = np.exp(-capacity_difference)  # Exponential decay for smaller differences

    # 2. Bin Utilization Factor: Encourage filling partially full bins.
    # Calculate the fullness of each bin (how much it's already used).
    bin_fullness = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))  # Normalize to 0-1
    bin_utilization_factor = np.clip(bin_fullness, 0, 1) # Ensure the value is between 0 and 1


    # 3. Combine scores and add Randomization
    # Combine the capacity matching and utilization scores.
    combined_priority = capacity_matching_score + 0.5 * bin_utilization_factor #Weighting Util factor less

    # Small random number for tie-breaking (exploration)
    random_factor = np.random.rand(len(bins_remain_cap)) * 0.01 #Scale Random Factor

    priorities = combined_priority + random_factor

    # Penalize bins that cannot fit the item and invalidate the invalid bins
    priorities = np.where(safe_bins_remain_cap >= item, priorities, -np.inf)
    priorities = np.where(~valid_bins, -np.inf, priorities)

    return priorities
```
