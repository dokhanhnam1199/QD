```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity difference, fill ratio, and adaptive weighting for bin selection."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    capacity_diff = np.abs(safe_bins_remain_cap - item)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Combine fill ratio and capacity difference
    combined_priority = proportion_filled / (capacity_diff + 1e-6)

    # Adaptive weighting based on item size relative to mean capacity
    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight = np.clip(item / (mean_cap + 1e-6), 0.1, 0.9)  # Clip for stability

    # Combine with the ratio
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 1.0) #Clamp for stability
    log_ratios = -np.log(ratios)

    final_priority = (1 - weight) * combined_priority + weight * log_ratios
    final_priority += np.random.rand(len(bins_remain_cap)) * 0.01

    final_priority = np.where(safe_bins_remain_cap >= item, final_priority, -np.inf)
    final_priority = np.nan_to_num(final_priority, neginf=-np.inf)
    final_priority = np.where(~valid_bins, -np.inf, final_priority)
    return final_priority
```
