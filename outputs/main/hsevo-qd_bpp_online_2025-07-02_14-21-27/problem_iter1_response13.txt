```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space
    but penalizes bins that are too full (approaching item size).  It also gives a very
    low priority to bins that cannot fit the item at all.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give a very low priority to bins that can't fit the item
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf

    # Calculate "wastage" if the item were placed in each bin
    wastage = bins_remain_cap - item
    wastage[cannot_fit] = np.inf  # Ignore wastage for bins that can't fit

    # Prioritize bins with lower wastage
    priorities[~cannot_fit] = -wastage[~cannot_fit]

    # Boost priority for bins that are close to being full but CAN still fit item
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap <= (item * 1.2)) # Within 20% of item size. Tunable param
    priorities[nearly_full] += 10  # Add significant boost. Tunable param

    return priorities
```
