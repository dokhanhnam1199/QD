```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity matching and Newtonian heuristics, with adaptive weights."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
      return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Capacity matching
    capacity_diff = np.abs(safe_bins_remain_cap - item)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Newtonian potential
    newtonian_potential = np.where(safe_bins_remain_cap >= item, safe_bins_remain_cap / (capacity_diff + 1e-6), -np.inf)

    # Adaptive weighting (adjust weights based on item size)
    weight_capacity = 0.6 if item < 0.5 else 0.4
    weight_newtonian = 1 - weight_capacity

    # Combined priority
    priority = weight_capacity * (proportion_filled / (capacity_diff + 1e-6)) + weight_newtonian * newtonian_potential

    # Exploration
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    # Ensure item fits
    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)

    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)

    return priority
```
