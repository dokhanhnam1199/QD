```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Multifactorial priority with adaptive weights, and exploration."""

    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_size = np.max(bins_remain_cap) # Assuming all bins have the same max capacity

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)

    # Ratio component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))

    # Fragmentation component: penalize bins that will have significant remaining capacity after packing the item
    fragmentation_penalty = np.exp(-np.abs(safe_bins_remain_cap - item) / (bin_size / 4))

    # Adaptive weighting
    item_size_ratio = item / bin_size
    weight_newtonian = 0.6 if item_size_ratio < 0.5 else 0.4
    weight_ratio = 0.3 if item_size_ratio < 0.5 else 0.5
    weight_fragment = 0.1

    combined_priority = (
        weight_newtonian * newtonian_priority +
        weight_ratio * ratio_priority -
        weight_fragment * fragmentation_penalty  # Subtract penalty
    )

    # Stochastic exploration: adding small random noise
    exploration_noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)
    combined_priority += exploration_noise

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
