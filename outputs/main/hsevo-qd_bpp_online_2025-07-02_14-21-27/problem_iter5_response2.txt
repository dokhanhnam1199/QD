```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity matching with ratio-based considerations."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    capacity_diff = np.abs(safe_bins_remain_cap - item)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Combined score with capacity difference and fill proportion
    priority = proportion_filled / (capacity_diff + 1e-6)

    # Ratio component, dampened
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 100)
    ratio_priorities = -np.log(ratios)

    # Adaptive weight for ratio component
    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight = np.clip(item / (mean_cap + 1e-9), 0, 0.5)

    priority = (1 - weight) * priority + weight * ratio_priorities
    priority += np.random.rand(len(bins_remain_cap)) * 0.01
    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)

    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)
    return priority
```
