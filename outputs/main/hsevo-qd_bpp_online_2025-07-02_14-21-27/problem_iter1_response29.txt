```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Consider only bins that can actually fit the item.  If none fit, return low priority for all
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap) - 1e9  # Return very low priority if item doesn't fit in any bin

    # Heuristic 2: First-Fit Decreasing inspired - prioritize bins that have a small amount of remaining space
    # after the item is added, but still prefer those with larger capacity initially
    remaining_space_after_fit = bins_remain_cap - item
    remaining_space_after_fit[remaining_space_after_fit < 0] = np.inf #effectively excluding invalid bins

    # Heuristic 3: Balance space usage and avoid overfilling - target near a specific fullness ratio

    target_fullness = 0.8 # Experiment with this value

    #Priority is how close it is to target capacity after adding
    distance_from_target = np.abs((bins_remain_cap - item) - (1-target_fullness)* (bins_remain_cap+item))

    priorities = -distance_from_target # Minimize the distance from target

    # If an item cannot fit, penalize hard
    priorities[remaining_space_after_fit < 0] = -1e9

    #For bins that *can* accomodate the item, assign the `priorities`
    #else set as -infinity
    not_valid_bins = bins_remain_cap < item
    priorities[not_valid_bins] = -np.inf

    return priorities
```
