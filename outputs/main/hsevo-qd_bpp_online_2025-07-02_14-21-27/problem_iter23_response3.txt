```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, ratio, and bin utilization."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)

    # Ratio component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))

    # Bin utilization component
    bin_utilization = 1 - (safe_bins_remain_cap / np.sum(bins_remain_cap)) # Normalize remaining capacity

    # Adaptive weighting
    weight_newtonian = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    weight_ratio = np.clip(1 - item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0) # Inverse weight for ratio.

    combined_priority = (weight_newtonian * newtonian_priority +
                         weight_ratio * ratio_priority +
                         0.1 * bin_utilization)  # Add a small amount of bin utilization

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
