{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines Newtonian potential and ratio, adaptively weighted.\"\"\"\n    valid_bins = bins_remain_cap > 0\n    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)\n\n    # Newtonian component\n    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)\n    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)\n    newtonian_priority = np.nan_to_num(newtonian_priority, neginf=-np.inf)\n\n    # Ratio component\n    ratio_priority = np.log(np.clip(safe_bins_remain_cap / item, 0.001, 1000))\n\n    # Adaptive weighting\n    weight = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)\n    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority\n\n    priorities = np.where(~valid_bins, -np.inf, combined_priority)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of Newtonian potential, capacity ratio, bin utilization, adaptive weighting, and stochastic exploration while the worst heuristic uses only the log of the ratio between the item size and the remaining bin capacity. (2nd) vs (19th) shows same as (1st) vs (20th) with less effect; Comparing (1st) vs (2nd), we see the best heuristic adds bin utilization and stochastic exploration compared to the second best. (3rd) vs (4th) shows the same functionality; Comparing (second worst) vs (worst), we see both heuristics only use log ratios, but the second worst adds a lot of unused library imports; Overall: Better heuristics combine multiple factors, adaptively weight them, and use stochastic exploration. The worst heuristic is too simplistic, and higher-ranked heuristics also benefit from considerations like bin utilization and penalties for near misses.\n- \nOkay, let's redefine \"Current Self-Reflection\" to create better heuristic design strategies. Here's a breakdown focusing on actionable improvements and avoiding common pitfalls, aiming for a balanced and effective approach:\n\n*   **Keywords:** Iterative refinement, problem-specific tuning, balanced complexity, empirical validation.\n\n*   **Advice:** Begin with a basic, interpretable heuristic. Progressively enhance it based on *problem-specific* performance data and insights. Focus on understanding *why* a factor improves results, not just adding it.\n\n*   **Avoid:** Prematurely optimizing for complexity. Avoid overly relying on inspiration from unrelated domains without clear justification and rigorous testing. Don't equate sophistication with effectiveness.\n\n*   **Explanation:** Heuristic design should be an iterative process driven by empirical results. Start simple, then refine by adding complexity only when demonstrably beneficial and well-understood within the problem's context. Prioritize interpretability and validation to avoid over-fitting to specific scenarios.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}