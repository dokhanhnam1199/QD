```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian approach with ratio-based scaling."""
    # Newtonian potential component
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item)
    priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, priorities)

    # Ratio-based scaling component
    ratios = item / bins_remain_cap
    log_ratios = np.log(np.maximum(ratios, 1e-9))  # Avoid log(0)
    ratio_priority = -log_ratios

    # Combine the priorities: weighted sum
    combined_priority = 0.7 * priorities + 0.3 * ratio_priority

    return combined_priority
```
