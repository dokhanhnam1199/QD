```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity matching and Newtonian ideas."""
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
      return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    capacity_diff = np.abs(safe_bins_remain_cap - item)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Combined score: fill and inverse capacity difference
    priority = proportion_filled / (capacity_diff + 1e-6)

    # Newtonian component, scaled by capacity
    newtonian = safe_bins_remain_cap / (capacity_diff + 1e-6)
    priority += newtonian * 0.1 # Scale Newtonian effect

    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)
    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)
    return priority
```
