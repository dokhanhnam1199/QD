```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive capacity matching with a dampened ratio component."""

    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    capacity_diff = np.abs(safe_bins_remain_cap - item)
    proportion_filled = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    priority = proportion_filled / (capacity_diff + 1e-6)
    priority += np.random.rand(len(bins_remain_cap)) * 0.01
    priority = np.where(safe_bins_remain_cap >= item, priority, -np.inf)
    priority = np.nan_to_num(priority, neginf=-np.inf)
    priority = np.where(~valid_bins, -np.inf, priority)


    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 100)
    log_ratios = np.log(ratios)
    ratio_priorities = -log_ratios

    weight = np.clip(item / (np.mean(bins_remain_cap) + 1e-9), 0, 0.5) # Dampened weight

    combined_priorities = (1 - weight) * priority + weight * ratio_priorities
    return combined_priorities
```
