{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    A refined priority function for online bin packing that combines multiple factors\n    with adaptive weighting and stochastic exploration.\n    \"\"\"\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)\n\n    # 1. Capacity-Aware Newtonian Potential\n    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)\n    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)\n\n    # 2. Normalized Remaining Capacity\n    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)\n    capacity_priority = np.log(capacity_ratio)\n\n    # 3. Bin Utilization (Encourages filling partially full bins)\n    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))  # Normalize to 0-1\n    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)\n\n    # 4. Item Size Relative to Average Available Capacity (Adaptive Weighting)\n    avg_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9\n    weight_newtonian = np.clip(item / (avg_capacity + 1e-9), 0.0, 1.0)\n    weight_capacity = np.clip(1 - item / (avg_capacity + 1e-9), 0.0, 1.0)\n\n    # 5. Combine Priorities with Adaptive Weights\n    combined_priority = (\n        weight_newtonian * newtonian_priority +\n        weight_capacity * capacity_priority +\n        0.2 * utilization_priority # Weight for utilization\n    )\n\n    # 6. Stochastic Exploration (Introduce some randomness)\n    exploration_factor = 0.01  # Adjust for desired exploration level\n    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)\n    combined_priority += random_noise\n\n    # 7. Handling Invalid Bins and NaN values\n    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)\n    priorities = np.where(~valid_bins, -np.inf, combined_priority)\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a redefined approach to self-reflection for heuristic design, focusing on actionable insights and avoiding common pitfalls:\n\n*   **Keywords:** Adaptive weights, edge case handling, stochastic exploration, multi-factor analysis, robustness, iterative refinement, performance evaluation, problem complexity.\n\n*   **Advice:** Focus on capturing underlying problem complexities by intelligently combining multiple relevant factors and adapting their influence. Prioritize robust handling of edge cases and numerical instability. Systematically evaluate and refine heuristics through experimentation.\n\n*   **Avoid:** Over-simplification, premature optimization, neglecting edge cases, redundant heuristics, and relying solely on intuition without proper testing and evaluation.\n\n*   **Explanation:** Move beyond simply \"combining factors.\" Emphasize capturing the *essence* of the problem. Prioritize *robustness* and systematic *evaluation*. This involves not just addressing edge cases as afterthoughts, but designing for them from the start. Avoid unnecessary complexity, focusing on targeted refinements based on empirical data and problem-specific insights.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}