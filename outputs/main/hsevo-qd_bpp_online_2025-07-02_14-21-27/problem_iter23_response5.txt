```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, capacity ratio, utilization boost, and exploration."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    bin_capacity = np.max(bins_remain_cap)

    # Newtonian component
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Ratio-based component
    ratio_priority = np.log(np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000))

    # Bin Utilization Boost
    bin_utilization = (bin_capacity - safe_bins_remain_cap) / (bin_capacity + 1e-9)
    utilization_boost = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)
    
    #Adaptive weight
    weight = np.clip(item / (bin_capacity + 1e-9), 0.0, 1.0)

    # Combined Priority
    combined_priority = weight * newtonian_priority + (1 - weight) * ratio_priority + 0.1 * utilization_boost

    # Exploration factor
    exploration_factor = 0.005
    random_noise = np.random.normal(0, exploration_factor, size=bins_remain_cap.shape)
    combined_priority += random_noise

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    
    return priorities
```
