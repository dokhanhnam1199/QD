```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, ratio, and bin utilization for priority."""

    # Newtonian component (with safety checks)
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)
    potential = (safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item))
    newton_priorities = np.where(safe_bins_remain_cap >= item, potential, -np.inf)
    newton_priorities = np.nan_to_num(newton_priorities, neginf=-np.inf)
    newton_priorities = np.where(~valid_bins, -np.inf, newton_priorities)

    # Ratio component (dampened to avoid dominance)
    ratios = item / bins_remain_cap
    ratios = np.clip(ratios, 0.01, 100)  # Clamp for stability
    log_ratios = np.log(ratios)
    ratio_priorities = -log_ratios

    # Bin Utilization Component: Prefer bins that are already somewhat full.
    bin_utilization = (1 - bins_remain_cap / np.max(bins_remain_cap))
    bin_utilization_priorities = bin_utilization

    # Adaptive Weighting: Adjust weights based on item size.
    mean_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 0
    weight_item_size = np.clip(item / (mean_cap + 1e-9), 0, 1)

    # Combine the priorities with adaptive weights
    combined_priorities = (0.4 - 0.1*weight_item_size) * newton_priorities + (0.4 + 0.1*weight_item_size) * ratio_priorities + (0.2 + 0.1*weight_item_size)*bin_utilization_priorities

    return combined_priorities
```
