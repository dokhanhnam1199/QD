```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian potential, capacity ratio, and bin utilization."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Newtonian component (Focuses on bins close to the item size)
    potential = safe_bins_remain_cap / np.abs(safe_bins_remain_cap - item + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # Capacity ratio component (Prioritizes bins with more relative space)
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # Bin utilization component (Balance utilization across bins)
    total_capacity = np.sum(bins_remain_cap[valid_bins])
    bin_utilization = (bins_remain_cap[valid_bins] / total_capacity) if total_capacity > 0 else np.zeros_like(bins_remain_cap[valid_bins])
    utilization_priority = bin_utilization
    full_priority = np.zeros_like(bins_remain_cap)
    full_priority[valid_bins]= utilization_priority


    # Adaptive weighting based on item size relative to *available* capacity
    weight_newton = np.clip(item / (np.mean(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)
    weight_ratio = np.clip(item / (np.std(bins_remain_cap[valid_bins]) + 1e-9), 0.0, 1.0)

    # Combine the priorities with adaptive weighting
    combined_priority = weight_newton * newtonian_priority + (1 - weight_newton) * ratio_priority + weight_ratio * full_priority

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
