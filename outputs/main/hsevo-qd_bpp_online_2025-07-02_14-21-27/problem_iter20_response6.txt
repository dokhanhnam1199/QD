```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian potential, capacity ratio, utilization, & exploration
    with adaptive weighting based on item size for bin selection.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # 1. Newtonian Potential
    potential = safe_bins_remain_cap / (np.abs(safe_bins_remain_cap - item) + 1e-9)
    newtonian_priority = np.where(safe_bins_remain_cap >= item, potential, -np.inf)

    # 2. Capacity Ratio
    capacity_ratio = np.clip(safe_bins_remain_cap / (item + 1e-9), 0.001, 1000)
    ratio_priority = np.log(capacity_ratio)

    # 3. Bin Utilization
    bin_utilization = 1 - (safe_bins_remain_cap / np.max(bins_remain_cap))
    utilization_priority = np.where(safe_bins_remain_cap >= item, bin_utilization, -np.inf)

    # 4. Adaptive Weighting
    mean_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1e-9
    weight = np.clip(item / (mean_capacity + 1e-9), 0.0, 1.0)

    # 5. Combined Priority
    combined_priority = (
        weight * newtonian_priority
        + (1 - weight) * ratio_priority
        + 0.1 * utilization_priority  # Reduced utilization weight
    )

    # 6. Stochastic Exploration
    exploration_prob = 0.005 # Reduced exploration probability
    if np.random.rand() < exploration_prob:
        valid_indices = np.where(valid_bins)[0]
        if len(valid_indices) > 0:
            random_index = np.random.choice(valid_indices)
            combined_priority[:] = -np.inf
            combined_priority[random_index] = 10

    combined_priority = np.nan_to_num(combined_priority, neginf=-np.inf)
    priorities = np.where(~valid_bins, -np.inf, combined_priority)

    return priorities
```
