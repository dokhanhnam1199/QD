```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines volume utilization, balance, and a penalty for large items."""

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, -1)

    # Volume Utilization:
    volume_utilization_priority = np.where(safe_bins_remain_cap >= item, item / safe_bins_remain_cap, -np.inf)

    # Remaining Space Balance:
    balance_priority = np.where(safe_bins_remain_cap >= item, (safe_bins_remain_cap - item) / np.max(bins_remain_cap), -np.inf)

    # Large Item Penalty:
    large_item_penalty = np.where(item > np.mean(bins_remain_cap), -0.1, 0.0)

    # Adaptive Weighting based on item size
    item_size_ratio = item / np.max(bins_remain_cap)  # Ratio of item size to largest bin

    weight_volume = 0.5 + 0.3 * (1 - item_size_ratio)  # More weight for volume if item is smaller
    weight_balance = 0.3 - 0.1 * (1 - item_size_ratio)  # Less weight for balance if item is smaller
    weight_penalty = 0.2                               #Fixed penalty weight

    combined_priority = (
        weight_volume * volume_utilization_priority +
        weight_balance * (-balance_priority) +
        weight_penalty * large_item_penalty
    )

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
