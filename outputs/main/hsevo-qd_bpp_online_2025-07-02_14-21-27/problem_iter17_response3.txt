```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and capacity, adaptively weighted."""
    valid_bins = bins_remain_cap > 0
    safe_bins_remain_cap = np.where(valid_bins, bins_remain_cap, np.inf)

    # Ratio component (item size / remaining capacity)
    ratio_priority = np.log(np.clip(item / safe_bins_remain_cap, 0.001, 1000))

    # Capacity component (remaining capacity)
    capacity_priority = safe_bins_remain_cap

    # Adaptive weighting
    weight = np.clip(item / (safe_bins_remain_cap + 1e-9), 0.0, 1.0)
    combined_priority = weight * ratio_priority + (1 - weight) * capacity_priority

    priorities = np.where(~valid_bins, -np.inf, combined_priority)
    return priorities
```
