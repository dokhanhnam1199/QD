```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with enough space, penalizes near misses,
    and strongly penalizes bins that are too small.  It attempts to balance
    bin utilization while avoiding fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Sufficient capacity: Prioritize bins that are closer to the item size,
            # but also favor bins with slightly more space to avoid perfect fits every time.
            priorities[i] = (item / cap) + 0.5 * np.exp(-(cap - item)**2) # Prioritize smaller gaps, slight bonus for not perfect fit.
        else:
            # Insufficient capacity:  Strong penalty proportional to the deficiency.
            priorities[i] = -100 * (item - cap) # Highly discourage small bins.

    return priorities
```
