```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Create a mask to avoid division by zero and negative values
    valid_bins = remaining_after_addition >= 0
    
    # Initialize priorities with negative infinity for bins that are too small
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # For valid bins, calculate priority based on the ratio of remaining capacity to the original remaining capacity
    priorities[valid_bins] = (remaining_after_addition[valid_bins] / bins_remain_cap[valid_bins]) ** 2
    
    # Prioritize bins that are not too small and have a larger original remaining capacity
    priorities += bins_remain_cap / np.max(bins_remain_cap)
    
    return priorities
```
