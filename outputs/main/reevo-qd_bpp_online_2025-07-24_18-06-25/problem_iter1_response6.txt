```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins_mask = remaining_after_addition >= 0
    
    # For bins with enough capacity, priority is inversely proportional to the remaining capacity after addition
    # This encourages packing items tightly
    priorities_valid = 1 / (remaining_after_addition[valid_bins_mask] + 1e-6)
    
    # For bins without enough capacity, assign a very low priority
    priorities_invalid = np.full_like(remaining_after_addition[~valid_bins_mask], -np.inf)
    
    # Combine priorities for valid and invalid bins
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[valid_bins_mask] = priorities_valid
    priorities[~valid_bins_mask] = priorities_invalid
    
    return priorities
```
