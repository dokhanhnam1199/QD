```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Calculate the priority based on how full the bin will be after adding the item
    # and the remaining capacity after addition. We prefer bins that will be fuller
    # and have less remaining capacity.
    priorities = np.where(remaining_after_addition >= 0, 
                          bins_remain_cap - remaining_after_addition, 
                          -np.inf)
    
    # Normalize the priorities to be between 0 and 1 for valid bins
    valid_bins = remaining_after_addition >= 0
    if np.any(valid_bins):
        min_priority = np.min(priorities[valid_bins])
        max_priority = np.max(priorities[valid_bins])
        if max_priority != min_priority:
            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)
    
    return priorities
```
