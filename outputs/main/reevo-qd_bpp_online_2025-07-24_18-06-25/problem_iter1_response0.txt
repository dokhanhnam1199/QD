```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function implements a more sophisticated priority function that considers 
    both the remaining capacity of the bin and the size of the item. It assigns 
    higher priority to bins that have just enough capacity to hold the item, and 
    lower priority to bins that have too much or too little remaining capacity.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot hold the item
    priorities = np.where(remaining_after_addition < 0, -1e10, 0)
    
    # For bins that can hold the item, assign higher priority to those with less remaining capacity
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, priorities)
    
    # To avoid assigning the same priority to multiple bins, add a small random noise
    np.random.seed(0)  # For reproducibility
    priorities += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
