```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins = remaining_after_add >= 0
    
    # For bins with enough capacity, prioritize those with less remaining capacity after adding the item
    priorities = np.where(valid_bins, -remaining_after_add, -np.inf)
    
    # Normalize the priorities to avoid extremely large or small values
    priorities = priorities - np.max(priorities)
    priorities = np.exp(priorities)
    
    return priorities
```
