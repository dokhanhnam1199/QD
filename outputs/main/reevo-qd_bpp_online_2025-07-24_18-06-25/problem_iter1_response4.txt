```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_caps_after_addition = bins_remain_cap - item
    
    # Bins that cannot accommodate the item get the lowest priority
    priorities = np.where(remaining_caps_after_addition >= 0, 
                          # Prioritize bins with less remaining capacity after addition (FFD-like behavior)
                          -np.abs(remaining_caps_after_addition), 
                          # Very low priority for bins that cannot fit the item
                          -np.inf)
    
    # To avoid division by zero and to make the priority more nuanced, 
    # we can add a small value to the denominator and use a more complex formula
    # However, the above simple formula already captures the essence of a good heuristic
    
    return priorities
```
