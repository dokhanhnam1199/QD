```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    valid_bins = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item
    priorities = np.where(valid_bins, -np.abs(remaining_after_addition), -np.inf)
    
    # To avoid identical priorities, slightly prioritize bins with smaller index
    priorities += np.where(valid_bins, -1e-6 * np.arange(len(bins_remain_cap)), 0)
    
    return priorities
```
