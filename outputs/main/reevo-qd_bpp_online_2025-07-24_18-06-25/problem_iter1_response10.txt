```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # For bins that can fit the item, prioritize the one with the least remaining capacity
    can_fit = remaining_after_addition >= 0
    priorities = np.where(can_fit, -remaining_after_addition, -np.inf)
    
    # To avoid division by zero, add a small epsilon to bins_remain_cap
    epsilon = 1e-9
    ratios = item / (bins_remain_cap + epsilon)
    log_ratios = np.log(ratios)
    priorities = np.where(can_fit, priorities, log_ratios)  # Use log_ratios as a fallback for bins that cannot fit
    
    return priorities
```
