```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Calculate the priority based on how well the item fills the bin
    # and how much capacity is left after adding the item
    priorities = np.where(
        remaining_after_addition >= 0, 
        # For bins that can fit the item, prioritize the ones that are filled the most
        bins_remain_cap - item, 
        # For bins that can't fit the item, give a very low priority
        -np.inf
    )
    
    # Normalize the priorities to avoid overflow
    max_priority = np.max(priorities)
    if max_priority != -np.inf:
        priorities = priorities - max_priority
    
    return priorities
```
