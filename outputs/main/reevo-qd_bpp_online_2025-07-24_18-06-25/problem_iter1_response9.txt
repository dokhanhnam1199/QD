```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item get a higher priority
    priorities = np.where(remaining_after_addition >= 0, 
                          # Prioritize bins with less remaining capacity after addition
                          -remaining_after_addition, 
                          # Bins that can't fit the item get a very low priority
                          -np.inf)
    
    # To avoid identical priorities for bins with the same remaining capacity after addition,
    # we add a small random noise to the priorities
    np.random.seed(0)  # For reproducibility
    noise = np.random.uniform(low=0, high=1e-6, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
