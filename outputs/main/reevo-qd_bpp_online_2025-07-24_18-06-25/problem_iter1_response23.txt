```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remain_cap_after_add >= 0
    
    # Initialize priorities with negative infinity for bins that cannot accommodate the item
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # For valid bins, calculate priority based on the remaining capacity after adding the item
    # and the ratio of item size to the bin's remaining capacity before adding the item
    priorities[valid_bins_mask] = remain_cap_after_add[valid_bins_mask] + np.log(1 + item / bins_remain_cap[valid_bins_mask])
    
    return priorities
```
