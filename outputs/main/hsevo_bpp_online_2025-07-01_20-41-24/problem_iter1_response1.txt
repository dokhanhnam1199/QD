```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins where the item fills a significant portion
    of the remaining capacity, but also avoids near-full bins to prevent
    excessive fragmentation.  A quadratic term penalizes bins that are
    almost full after packing the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    remaining_after_packing = bins_remain_cap - item
    
    # Bins where the item doesn't fit get a very low priority.
    priorities = np.where(remaining_after_packing >= 0, 0.0, -np.inf)

    # Prioritize bins based on fill ratio *after* packing. We want high utilization.
    fill_ratio_after = item / bins_remain_cap

    # Add a bonus for filling a significant portion of the remaining space, up to a point.
    # This promotes utilization, but not at the cost of over-filling.
    priorities = np.where(remaining_after_packing >=0, fill_ratio_after, priorities)
    
    # A penalty for bins that are close to full after the item is packed.
    # If remaining_after_packing is small, the penalty becomes larger.
    # A quadratic penalty helps to strongly avoid very tight fits.
    # Only apply penalty when packing is possible
    penalty = np.where(remaining_after_packing >= 0, (1 - remaining_after_packing / np.max(bins_remain_cap))**2, 0)  # Normalize penalty by max capacity
    priorities = np.where(remaining_after_packing >= 0, priorities - penalty, priorities)
    
    # Handle the case of division by zero for any bins with zero remaining capacity
    # by setting them to lowest possible priority before fit consideration.
    priorities = np.nan_to_num(priorities, nan=-np.inf)

    return priorities
```
