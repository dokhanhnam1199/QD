```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the concept of event horizons. Bins closer to being 'filled' (item size approaching remaining capacity)
    experience a higher 'gravitational pull' and thus are prioritized.  Bins that cannot accommodate are assigned -inf priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
      return np.full_like(bins_remain_cap, fill_value=-np.inf)

    priorities[~eligible_bins] = -np.inf
    
    # Calculate how well the item 'fits' into each bin, considering the "event horizon" (perfect fit)
    fit_score = 1.0 - np.abs(item - bins_remain_cap) / (bins_remain_cap[eligible_bins] + item)  #Normalize based on total size
    #The "fit score" closer to 1 has a higher priority.

    priorities[eligible_bins] = fit_score
    
    # Add a term which adds some importance for filling a bin up almost fully, resembling a final "infall"

    close_to_full = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins] < 0.1

    priorities[eligible_bins][close_to_full] += 0.5 #A "bonus" for full bins
    return priorities
```
