```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste minimization, and capacity awareness for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap)
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # Fill ratio: Higher is better
        fill_ratio = item / bins_remain_cap[fit_mask]
        priorities[fit_mask] = fill_ratio

        # Waste minimization: Lower is better, exponentially penalized.
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] -= np.exp(waste)

        # Capacity awareness: Slightly favor larger bins that fit.
        priorities[fit_mask] += np.log(bins_remain_cap[fit_mask]) * 0.1

        # Scale the fill ratio
        adaptive_fill_scale = 10 + 40 * np.mean(fill_ratio)
        priorities[fit_mask] += fill_ratio * adaptive_fill_scale
    else:
        # If no bin fits, prioritize bins that are "closest" to fitting
        space_needed = item - bins_remain_cap
        priorities = -space_needed

    return priorities
```
