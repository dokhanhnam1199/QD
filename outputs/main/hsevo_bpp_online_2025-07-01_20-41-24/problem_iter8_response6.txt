```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, near-full bonus, and waste minimization."""
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(feasible_bins):
        # Fill ratio priority
        fill_ratio = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] = fill_ratio * 100

        # Waste minimization with exponential penalty for small waste
        remaining_space = bins_remain_cap[feasible_bins] - item
        waste_penalty = np.exp(-10 * remaining_space)  # Emphasize small waste
        priorities[feasible_bins] -= waste_penalty

    else:
        # If no bin fits, prioritize bins closest to fitting
        space_needed = item - bins_remain_cap
        priorities = -space_needed

    return priorities
```
