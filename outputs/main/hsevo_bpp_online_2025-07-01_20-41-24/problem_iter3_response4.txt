```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)  # No valid bins

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # invalid bins

    # Give high priority to bins that can fit the item without much waste.
    priority = -waste

    # Adjust priority based on how full the bin would be. Favor almost full bins.
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0  # Correct invalid fills
    priority += fill_ratio * 100  # Scale up the fill ratio effect.

    # Penalize bins where the item barely fits (high waste) but also favor bins that create minimal waste
    close_fit_penalty = np.exp(waste)
    close_fit_penalty[np.isinf(close_fit_penalty)] = 0
    priority -= close_fit_penalty

    # Introduce a small bonus for bins with larger remaining capacity, encouraging space consolidation.
    # This can help prevent creating many nearly-empty bins. However avoid bins that are too large
    capacity_bonus = np.where(bins_remain_cap > item, np.log(bins_remain_cap), 0)
    priority += capacity_bonus

    # Adaptive scaling for fill ratio
    adaptive_fill_scale = 50 + 50 * np.mean(fill_ratio)  # Scale based on average fill
    priority += fill_ratio * adaptive_fill_scale

    # Ensure the priority of invalid bins are always very small
    priority[bins_remain_cap < item] = -np.inf

    return priority
```
