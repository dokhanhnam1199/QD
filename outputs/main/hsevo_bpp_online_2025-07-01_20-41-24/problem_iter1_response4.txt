```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # A bin must have sufficient space to even be considered
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # No feasible bins, give a very tiny, but non-zero, negative priority to all,
        # signifying they're to be opened as new bins. This encourages opening bins uniformly.
        priorities[:] = -1e-9
        return priorities

    # Prioritize bins with smallest remaining capacity greater than or equal to item size (almost-full heuristic)
    almost_full = np.where(feasible_bins)[0] # indices of bins
    capacities_almost_full = bins_remain_cap[almost_full]
    priorities[almost_full] = 1.0 / capacities_almost_full

    # Adjust for waste. Bigger bins get slight negative penalty based on the bin size ratio,
    # Encourages using smaller bins if multiple bins are able to fit the item
    waste = bins_remain_cap - item
    bin_size_ratio = bins_remain_cap/(np.max(bins_remain_cap))
    penalties = np.zeros_like(priorities)
    penalties[feasible_bins] = 0.1 * bin_size_ratio[feasible_bins]

    priorities -= penalties

    return priorities
```
