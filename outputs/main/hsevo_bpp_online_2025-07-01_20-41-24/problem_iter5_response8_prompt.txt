{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero and negative values in log.\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, -np.inf)  # No valid bins\n\n    # Calculate the waste if the item is placed in each bin.\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # invalid bins\n\n    # Give high priority to bins that can fit the item without much waste.\n    priority = -waste\n\n    # Adjust priority based on how full the bin would be. Favor almost full bins.\n    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap\n    fill_ratio[np.isinf(fill_ratio)] = 0  # Correct invalid fills\n    priority += fill_ratio * 100  # Scale up the fill ratio effect.\n\n    # Penalize bins where the item barely fits (high waste) but also favor bins that create minimal waste\n    close_fit_penalty = np.exp(waste)\n    close_fit_penalty[np.isinf(close_fit_penalty)] = 0\n    priority -= close_fit_penalty\n\n    # Introduce a small bonus for bins with larger remaining capacity, encouraging space consolidation.\n    # This can help prevent creating many nearly-empty bins. However avoid bins that are too large\n    capacity_bonus = np.where(bins_remain_cap > item, np.log(bins_remain_cap), 0)\n    priority += capacity_bonus\n\n    # Adaptive scaling for fill ratio\n    adaptive_fill_scale = 50 + 50 * np.mean(fill_ratio)  # Scale based on average fill\n    priority += fill_ratio * adaptive_fill_scale\n\n    # Ensure the priority of invalid bins are always very small\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio and remaining space.\"\"\"\n    remaining_after_packing = bins_remain_cap - item\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Fit check\n    fit_mask = remaining_after_packing >= 0\n    \n    if np.any(fit_mask):\n      #Fill ratio for suitable bins\n      fill_ratio_after = item / bins_remain_cap[fit_mask]\n      priorities[fit_mask] = fill_ratio_after\n      #Remaining space affect\n      remaining_space = bins_remain_cap[fit_mask] - item\n      priorities[fit_mask] = priorities[fit_mask] * (1/(remaining_space + 0.00001))\n      #Cap affect\n      priorities[fit_mask] = priorities[fit_mask] * bins_remain_cap[fit_mask]\n      \n\n    else:\n        space_needed = item - bins_remain_cap\n        priorities = -space_needed\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st uses fill-based priority with perfect fit bonus and considers initial capacity, while the 20th combines tight fit, larger bins, and almost full bins but penalizes bins that are close to fitting. The 1st prioritizes minimizing waste and higher fill, while the 20th focuses on space utilization but does not handle infeasible bins as effectively, potentially leading to less optimal packing. Comparing (2nd best) vs (second worst), the 2nd uses fill ratio, near-full bonus, anti-fragmentation, and scaled capacity, whereas the 19th, which is the same as 20th, combines tight fit, larger bins, and almost full bins, but heavily penalizes bins that are close to fitting but don't fit. Comparing (1st) vs (2nd), we see that the 1st gives a very big bonus to perfect fits, whereas the 2nd promotes an almost-full bonus. (3rd) vs (4th) the 3rd penalizes bins where the item barely fits, whereas the 4th uses gravitational force and the \"almost full\" heuristic. Comparing (second worst) vs (worst), they are identical. Overall: The better heuristics tend to prioritize minimizing waste and achieving high fill ratios, often incorporating bonuses for perfect or near-perfect fits. They also effectively penalize infeasible bins and may consider initial capacity. The inferior heuristics sometimes over-penalize near misses or lack a clear strategy for space utilization and fragmentation.\n- \nOkay, let's refine \"Current self-reflection\" to be more effective for heuristic design, specifically addressing the pitfalls of \"Ineffective self-reflection.\"\n\nHere's a breakdown:\n\n*   **Keywords:** Objective measurement, Adaptability, Realistic Constraints, Iterative Improvement.\n*   **Advice:** Focus on *quantifiable* metrics like items packed per unit time, solution feasibility rate, and solution quality variance. Design for adaptability to different dataset characteristics.\n*   **Avoid:** Overly complex formulas (exponential, ratios without clear justification), vague priorities (near-full), and reliance on intuition without empirical validation.\n*   **Explanation:** Emphasize measuring performance to guide heuristic refinement. Design heuristics that adapt to various data patterns and avoid unnecessary complexity.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}