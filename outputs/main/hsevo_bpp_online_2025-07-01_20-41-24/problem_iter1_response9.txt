```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Iterate through the bins and calculate priorities.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the wasted space if the item is placed in the bin.
            wasted_space = cap - item

            # Prioritize bins with smaller wasted space. Add a small term to favour almost-full bins
            # Prioritize bins more where the item fills a larger fraction of the remaining space
            # to use the capacity better. Higher priority means smaller wasted space.
            fill_ratio = item / cap
            priorities[i] = fill_ratio * (1 - wasted_space / (np.sum(bins_remain_cap)+1e-9)) #Scale by global remaining capacity to encourage distribution. + 1e-9 to prevent zero division

    return priorities
```
