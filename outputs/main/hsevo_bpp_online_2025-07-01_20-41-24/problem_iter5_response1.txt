```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, near-full bonus, and anti-fragmentation. Avoids overly complex functions."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]

    almost_full = (bins_remain_cap - item) < 0.1
    priorities[feasible_bins & almost_full] += 0.3

    remainder = bins_remain_cap - item
    priorities[feasible_bins] += (1 - (remainder[feasible_bins] / np.max(bins_remain_cap))) * 0.1

    priority_copy = priorities.copy()
    priority_copy[bins_remain_cap < item] = -np.inf # Ensure only valid bins return from calculation
    return priority_copy
```
