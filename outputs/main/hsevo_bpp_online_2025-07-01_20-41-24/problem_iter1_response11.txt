```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers both the remaining capacity and a penalty
    for bins that would become too full if the item were added. We want to
    prioritize bins where the item fits reasonably well, but avoid
    bins that would leave very little space remaining, which might be
    difficult to fill later. This is a heuristic approximation of minimizing wasted space, drawing an analogy from General Relativity - how objects with masses follow geodesic through curved space-time, here, items of different sizes "follow" (are packed) through "bins" that represents our curved space time with capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a base priority based on how well the item fits.
    fit_score = (bins_remain_cap - item) / bins_remain_cap # ratio of remaining cap after packing
    fit_score = np.clip(fit_score, 0, 1) # only non-negative ratios are of consideration
    priorities = fit_score # Give highest prioritiy to bins where it fits well.

    # Penalize bins that would become almost full. This can be thought of as
    # a 'repulsive' force near full capacity. The closer we get to bin capacity,
    # the stronger the repulsion.
    almost_full_threshold = 0.1  # e.g., bin must have > 10% capacity remaining
    remaining_after_fit = bins_remain_cap - item
    penalty = np.where(remaining_after_fit < almost_full_threshold * bins_remain_cap,
                         -100*(almost_full_threshold * bins_remain_cap - remaining_after_fit)/ bins_remain_cap,
                         0) # big penalty factor (negative priority), scaled relative to bin cap

    priorities += penalty

    # Items which cannot be packed will have a very low priority value.
    priorities[bins_remain_cap < item] = -np.inf
    return priorities
```
