```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        # Focus on bins where the item fits
        remaining_space = bins_remain_cap[valid_bins] - item
        # Prioritize bins with smaller remaining space after adding the item.
        # This tries to fill up bins more completely.  Avoids fragmenting the bin
        priorities[valid_bins] = 1.0 / (remaining_space + 0.00001) #Adding a small number to avoid division by zero
        #Give larger bins with enough room more weight to accommodate future items. This is because adding to larger bins has more space to be filled up.
        priorities[valid_bins]= priorities[valid_bins] * bins_remain_cap[valid_bins]


    else:
        # If no bin fits, try to penalize near-misses less harshly, by prioritizing bins that are close to fitting.
        space_needed = item - bins_remain_cap
        priorities = -space_needed # Negative because we prioritize smallest need

    return priorities
```
