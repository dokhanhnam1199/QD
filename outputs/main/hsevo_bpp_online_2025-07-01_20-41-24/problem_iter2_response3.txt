```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of previous heuristics."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    fit_indices = np.where(bins_remain_cap >= item)[0]

    if len(fit_indices) > 0:
        remaining_after_fit = bins_remain_cap[fit_indices] - item
        # Heuristic 1: Fuller bins are preferred.
        priorities[fit_indices] = 1.0 / (remaining_after_fit + 1e-6)
        # Heuristic 2: Prioritize initially full bins.
        priorities[fit_indices] += 1.0 / (bins_remain_cap[fit_indices] + 1e-6)
        # Heuristic 3: Prefer bins which are *just* big enough.
        priorities[fit_indices] += np.exp(-10*(remaining_after_fit/item))
        # Heuristic 4: Fragmentation penalty
        priorities[fit_indices] -= (remaining_after_fit/np.max(bins_remain_cap))**2


    return priorities
```
