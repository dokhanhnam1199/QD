```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First fit logic: Favor bins where the item fits
            space_waste = cap - item
            priorities[i] = 1 / (space_waste + 1e-9)  # Prioritize less wasted space

            # Near-full bonus: Give a bonus to bins that are almost full after packing.
            # Encourage filling bins completely rather than starting new ones.
            fill_ratio = item / cap
            priorities[i] += fill_ratio * 0.5 # Reduce the effect to 50%
        else:
            priorities[i] = -np.inf # Cannot fit

    return priorities
```
