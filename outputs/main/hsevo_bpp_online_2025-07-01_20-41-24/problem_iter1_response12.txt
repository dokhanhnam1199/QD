```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by gravitational force and potential energy. Bins are treated as attracting masses.
    Larger capacity means larger mass, hence stronger attraction.
    Closer distance (smaller difference between bin capacity and item size) means stronger attraction.
    We add a penalty for bins where the item doesn't fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    gravitational_constant = 1.0  # Can be tuned. Affects relative importance of capacity and distance.

    # Calculate the "distance" between the item size and the bin's remaining capacity.
    distances = np.abs(bins_remain_cap - item)

    # Calculate the "gravitational force".  Add a small constant to the denominator to avoid division by zero.
    forces = (gravitational_constant * bins_remain_cap) / (distances + 0.0001)**2

    # Penalty for bins where the item doesn't fit
    penalty = np.where(item > bins_remain_cap, -np.inf, 0) #or -np.max(forces)*10 to make force adjustments meaningful


    priorities = forces + penalty  # Higher force means higher priority
    return priorities
```
