```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and penalizes waste, avoids near misses."""
    remaining_after_packing = bins_remain_cap - item
    
    # Infeasible bins get lowest priority.
    priorities = np.where(remaining_after_packing >= 0, 0.0, -np.inf)

    # Fill ratio after packing, prioritize high utilization.
    fill_ratio_after = item / bins_remain_cap
    priorities = np.where(remaining_after_packing >=0, fill_ratio_after, priorities)
    
    # Penalize bins with too little waste (risk of near miss on next item).
    waste_penalty = -np.exp(-bins_remain_cap/item*5) #Heavily penalize approaching 0 cap
    priorities = np.where(remaining_after_packing >= 0, priorities + waste_penalty, priorities)
    
    # Return correct priority for edge cases
    priorities = np.nan_to_num(priorities, nan=-np.inf)
    return priorities
```
