```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Heuristic 1: First Fit Decreasing approximation, try to leave as little space as possible (but only if it fits)
    space_left = bins_remain_cap - item
    priority = np.zeros_like(bins_remain_cap)

    #Give only to valid bins a value
    valid_bins = space_left >= 0
    priority[valid_bins] = 1.0 / (space_left[valid_bins] + 1e-9) #prioritize smallest space left
    # Heuristic 2: Avoid small residual space: If space is small (but bigger than item), penalize. This tries to avoid fragmentation
    residual_threshold = 0.1  # Tunable parameter: Relative to bin size, define a small threshold
    residual_penalty = 0.5  # Tunable parameter: Penalty for small residual space

    for i in range(len(bins_remain_cap)):
      if bins_remain_cap[i] >= item and space_left[i] > 0 and space_left[i] / bins_remain_cap[i] < residual_threshold:
        priority[i] *= residual_penalty  # Apply penalty

    #Heuristic 3: If item is very large compared to bins, prioritize almost full bins to consolidate large items together (try to complete these large capacity bins quickly)

    large_item_threshold = 0.5 #Tunable parameter. if the item size ratio is above this, consolidate
    if (item/bins_remain_cap.max()) > large_item_threshold:
      priority += (1 - (bins_remain_cap / bins_remain_cap.max()))*0.1 #favor full bins
    return priority
```
