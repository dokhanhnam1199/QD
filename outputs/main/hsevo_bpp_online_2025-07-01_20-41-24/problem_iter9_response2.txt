```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf

    priority = -waste

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0
    priority += fill_ratio * 100

    # Apply a sigmoid function to the waste to penalize close fits more smoothly.
    # The closer to zero the waste, the higher the penalty. The scale determines the steepness
    # of the sigmoid, and the location determines where the penalty is strongest.

    scale = 5  # Adjust for sensitivity. Higher = steeper
    location = 0.1 #Adjust this value as needed
    close_fit_penalty = 1 / (1 + np.exp(-scale * (waste - location)))

    close_fit_penalty[np.isinf(close_fit_penalty)] = 0
    priority -= close_fit_penalty * 50 # Scale the penalty

    # Add a bonus for bins that would become nearly full after packing
    near_full_bonus = np.exp(-10 * (1 - fill_ratio))
    near_full_bonus[np.isinf(near_full_bonus)] = 0
    priority += near_full_bonus * 30

    #Prioritize bins with larger remaining capacity when multiple bins can fit
    priority += bins_remain_cap/np.max(bins_remain_cap)*10 #add at most 10
    priority[bins_remain_cap< item]= -np.inf

    return priority
```
