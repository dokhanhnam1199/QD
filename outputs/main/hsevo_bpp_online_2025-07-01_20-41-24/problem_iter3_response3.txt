```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    # Calculate the remaining capacity after adding the item.
    remaining_cap = bins_remain_cap - item
    
    # Set priority to -inf for bins where the item doesn't fit.
    priority = np.where(remaining_cap < 0, -np.inf, 0)

    # Prioritize bins with smaller waste.
    waste = np.maximum(0, remaining_cap)
    priority = np.where(priority != -np.inf, -waste, priority)

    # Boost priority for bins that become nearly full after adding the item.
    fill_ratio = np.where(priority != -np.inf, (bins_remain_cap - waste) / bins_remain_cap, 0)
    priority = np.where(priority != -np.inf, priority + fill_ratio * 100, priority)

    # Penalize bins with very little remaining capacity (close fit).
    close_fit_penalty = np.where(priority != -np.inf, np.exp(10 * waste) , 0) #Adjusted waste magnification
    priority = np.where(priority != -np.inf, priority - close_fit_penalty, priority)

    # Add a small bonus for bins that were already relatively full
    initial_fill_ratio = bins_remain_cap / np.max(bins_remain_cap) # Normalize, handles single bin case.

    priority = np.where(priority != -np.inf, priority + initial_fill_ratio * 5, priority)

    return priority
```
