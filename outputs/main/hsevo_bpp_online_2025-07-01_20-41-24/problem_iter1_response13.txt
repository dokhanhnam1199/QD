```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Favor bins where the item fits well (but not too perfectly - avoid near empty bins).
            priorities[i] = (cap - item) / cap + 0.1 * (1 - (cap - item)/ cap ) # a bit of oscillation. Prefer to have partially full bin. Oscillation to ensure bins don't stay too empty.
            # Small items favor almost-full bins. Large items favor roomy bins.

            if item < 0.1:  #If item is very small then the bin need to be almost full.
                priorities[i] += 2 * (1 - (cap - item) / cap) #Add a large constant number so small items prefer almost-full bins
        else:
            priorities[i] = -1e9  # Very low priority if the item doesn't fit. A very large penalty term
    return priorities
```
