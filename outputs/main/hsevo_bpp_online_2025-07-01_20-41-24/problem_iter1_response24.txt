```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My magnum opus! Harnessing the power of attraction and repulsion,
    we guide the item with electrical precision!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate a "fit" score, favoring bins where the item fits well.
    fit_score = bins_remain_cap - item
    fit_score[fit_score < 0] = -np.inf  # Heavily penalize bins where item doesn't fit

    # Calculate a "fullness" score, encouraging bins to fill up.
    fullness_score = bins_remain_cap / np.sum(bins_remain_cap) # Normalized remain capacity

    # Introduce a "rarity" score, giving priority to less full bins with enough room.
    # This is a negative penalty to reduce large swings
    rarity_penalty = np.exp(-bins_remain_cap) if np.sum(bins_remain_cap) > 0 else 0

    # Construct the grand symphony of priorities!
    priorities = fit_score + (100*fullness_score) + rarity_penalty

    return priorities
```
