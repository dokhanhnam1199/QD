```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers multiple factors:
    1. Space utilization after packing (higher is better, but penalized for overfilling)
    2. A "nearly full" bonus to encourage filling bins close to capacity
    3. A small random factor to break ties and encourage exploration

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small value to avoid division by zero
    penalization_factor = 2.0 # Penalize overfilling by this factor

    # Calculate remaining capacity after packing (can be negative if overfilled)
    remaining_cap_after_packing = bins_remain_cap - item

    # Calculate space utilization (between 0 and 1 for valid fits, <0 if invalid)
    utilization = (bins_remain_cap - remaining_cap_after_packing) / (bins_remain_cap + epsilon)

    # Initialize priorities based on utilization. Overfilled bins get a large negative priority
    priorities = np.where(remaining_cap_after_packing >= 0, utilization, -penalization_factor * np.abs(remaining_cap_after_packing) )

    # "Nearly Full" Bonus: If the bin is close to full after packing, add a bonus.
    nearly_full_threshold = 0.1  # Bin is "nearly full" if remaining capacity <= 10%
    nearly_full_bonus = np.where( (remaining_cap_after_packing > 0) & (remaining_cap_after_packing <= nearly_full_threshold * bins_remain_cap), 1.0, 0.0)

    priorities += nearly_full_bonus

    # Add a small random factor to break ties
    random_factor = 0.01 * np.random.rand(len(bins_remain_cap))
    priorities += random_factor

    return priorities
```
