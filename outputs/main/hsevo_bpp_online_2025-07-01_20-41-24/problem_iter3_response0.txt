```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Invalidate bins that are too small
    invalid_bins = bins_remain_cap < item
    priority[invalid_bins] = -np.inf

    # Calculate waste
    waste = bins_remain_cap - item
    waste[invalid_bins] = np.inf

    # First Fit Decreasing inspired
    fit_score = bins_remain_cap - item
    fit_score[fit_score < 0] = -np.inf
    priority += fit_score * 50  # Prioritize bins with better fit

    # Encourage bins that are nearly full
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio) | np.isnan(fill_ratio)] = 0
    priority += fill_ratio * 100

    # Prioritize bins with less waste
    priority -= waste * 20

    # Try to balance usage - use bins that are most full already, but can fit item
    already_used = 1- (bins_remain_cap / np.max(bins_remain_cap))
    already_used[invalid_bins] = -np.inf # Exclude invalid bins

    priority += already_used * 30
    
    return priority
```
