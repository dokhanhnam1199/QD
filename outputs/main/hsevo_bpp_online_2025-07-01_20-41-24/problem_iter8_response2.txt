```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, exponential waste penalty for fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    remaining_capacity = bins_remain_cap - item
    feasible_remaining = remaining_capacity[feasible_bins]

    # Fill Ratio
    fill_ratio = (bins_remain_cap[feasible_bins] - feasible_remaining) / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = fill_ratio * 100

    # Exponential Waste Penalty (anti-fragmentation)
    waste = feasible_remaining
    priorities[feasible_bins] -= 50 * np.exp(-waste * 5)  # Experiment with scaling factor (5)

    return priorities
```
