```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf

    priority = -waste

    # Fill ratio bonus with a sigmoid function
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0
    priority += 100 * (1 / (1 + np.exp(-10 * (fill_ratio - 0.8))))  # Sigmoid around 0.8

    # Waste penalty with a scaled exponential
    close_fit_penalty = np.exp(5 * waste)
    close_fit_penalty[np.isinf(close_fit_penalty)] = 0
    priority -= 0.1 * close_fit_penalty

    # Capacity-based scaling: Larger bins are favored, slightly
    priority += 0.01 * bins_remain_cap

    priority[bins_remain_cap < item] = -np.inf
    return priority
```
