```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Bins that can accommodate the item get a base priority.
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        priorities[valid_bins] = 1.0

        # Heuristic 1: Reward bins that fit the item "perfectly" based on a small penalty (think Newton's Method: small corrections)
        # This prevents creating many nearly-empty bins by favouring tighter fits.

        slack = bins_remain_cap[valid_bins] - item
        #Penalty inversely proportional to the slack
        perfect_fit_bonus = np.exp(-slack**2) # Gaussian centred on zero, so best fit gets highest reward

        priorities[valid_bins] += perfect_fit_bonus


        # Heuristic 2: Penalize bins that have very high capacity but the item is relatively small compared to the bin's capacity.
        # Try to use bins that are smaller first

        capacity_ratio = item / bins_remain_cap[valid_bins]
        large_bin_penalty = - (1 - capacity_ratio)**2  # Square it to make the penalty more pronounced

        priorities[valid_bins] += large_bin_penalty #Subtract the penalty so lower ratio values get penalised more.


        #Heuristic 3: If an item leaves little space remaining, reward it. This pushes packing of bins and improves space utilitization.

        remaining_space = bins_remain_cap[valid_bins] - item
        near_full_reward = np.exp(-1/np.clip(bins_remain_cap[valid_bins] - item, a_min=0.001, a_max = None)) #Clip to avoid division by 0 or very large values.

        priorities[valid_bins] += near_full_reward
    return priorities
```
