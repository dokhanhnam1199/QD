```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log.
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
      return np.full_like(bins_remain_cap, -np.inf)  # No valid bins

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item


    priority = np.zeros_like(bins_remain_cap) # initialize priority

    # Prioritize bins where item fits: Waste is non-negative. Infeasible bins have priority -inf later
    priority[valid_bins] = 1

    # Adjust priority based on how full the bin would be. Favor almost full bins.
    fill_ratio = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]
    priority[valid_bins] += fill_ratio*50  # Scale up the fill ratio effect.

    #Penalize higher waste, but only moderately
    priority[valid_bins] -= waste[valid_bins]*2


    #Ensure the priority of invalid bins are always very small
    priority[bins_remain_cap< item]= -np.inf
    return priority
```
