```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
      return np.full_like(bins_remain_cap, -np.inf)  # No valid bins

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf #invalid bins

    # Give high priority to bins that can fit the item.
    priority = np.where(waste >= 0, 1, -np.inf)


    #Adjust priority based on fill ratio, but scale it gently
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0  # Correct invalid fills

    priority += fill_ratio * 10 #Scale back fill ratio

    # Penalize small waste, but only a bit (avoid over-penalizing good fits)
    waste_penalty = np.where((waste > 0) & (waste <= 0.1), -1, 0)
    priority += waste_penalty
    # If almost full bins available, give more priority to that
    almost_full_bonus = np.where((fill_ratio >= 0.9), 2, 0)
    priority += almost_full_bonus


    #Ensure the priority of invalid bins are always very small
    priority[bins_remain_cap< item]= -np.inf
    return priority
```
