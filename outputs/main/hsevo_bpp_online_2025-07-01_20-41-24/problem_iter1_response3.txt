```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero or log of zero.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspired component. Prioritize bins that can accommodate the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Prioritize bins where the item fills a significant portion, but not completely.
    # This helps to avoid creating bins with very small remaining capacity.
    fill_ratio = item / bins_remain_cap
    sweet_spot = (fill_ratio >= 0.5) & (fill_ratio <= 0.95) # tuneable parameters here
    priorities[sweet_spot] += 2.0 # boost the sweet spot

    # Penalize bins where adding the item would result in very little remaining space.
    # Prevents excessive fragmentation.  tuneable parameter
    fragmentation_threshold = 0.1 # e.g., remaining capacity should be > 10% after item is placed.
    small_remaining = (bins_remain_cap - item) / bins_remain_cap < fragmentation_threshold
    priorities[small_remaining] -= 1.5  # Penalize bins leading to high fragmentation.

    # Give slight preference to bins that are already relatively full, encourages reuse
    #  tuneable parameter
    fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities += 0.5 * fullness

    #Prioritize empty bins less unless the item is large

    if item > np.max(bins_remain_cap)/2:
        priorities[bins_remain_cap == np.max(bins_remain_cap)] += 3
    else:
        priorities[bins_remain_cap == np.max(bins_remain_cap)] -= 0.1
    return priorities
```
