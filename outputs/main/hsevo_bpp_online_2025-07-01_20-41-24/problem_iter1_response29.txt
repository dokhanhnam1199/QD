```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value to avoid assignment to bins that can't fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item

    # If no bin can fit the item, return the array of -inf. The calling function will need to handle this edge case.
    if not np.any(valid_bins):
        return priorities

    # Calculate remaining capacity after placing the item.
    remaining_capacity = bins_remain_cap - item

    # Apply a score based on the ratio of item size to remaining bin capacity after placement, only for valid bins.
    # A smaller ratio suggests a better fit (less wasted space). Add a slight bias to favor bins that will become full
    ratios = np.where(valid_bins, item / bins_remain_cap, np.inf) # Ensure ratios are high for invalid bins
    space_efficiency = 1 - np.abs(remaining_capacity/bins_remain_cap) #Favor near-full or full bins

    priorities[valid_bins] = 1 / (ratios[valid_bins] + 1e-9)  # Invert the ratio and add small value to avoid division by zero

    priorities[valid_bins] += space_efficiency[valid_bins]

    #Boost priority for bins nearing completion to encourage full bins and efficient space usage
    near_full_bins = (remaining_capacity > 0 ) & (remaining_capacity < 0.2 * np.max(bins_remain_cap)) #tune the 0.2 as necessary
    priorities[near_full_bins] += 2 #tunable

    return priorities
```
