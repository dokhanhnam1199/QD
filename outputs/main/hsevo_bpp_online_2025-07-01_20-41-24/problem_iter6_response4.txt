```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item

    # Initialize priority array
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    priority[remaining_capacity < 0] = -np.inf

    # Feasible bins:
    feasible_bins = remaining_capacity >= 0

    if np.any(feasible_bins):
        # 1. Fill Ratio: Prefer bins that result in a higher fill ratio, but avoid perfect fit
        fill_ratio = (bins_remain_cap[feasible_bins] - remaining_capacity[feasible_bins]) / bins_remain_cap[feasible_bins]

        # Avoid perfect fit to allow flexibility for future items. Instead favor close to perfect
        perfect_fit = (remaining_capacity[feasible_bins] == 0)
        fill_ratio[perfect_fit] = 0 # setting the fill ratio to 0 if it is a perfect fit.
        priority[feasible_bins] = fill_ratio * 100


        # 2. Balance Waste: Penalize very small remaining capacity to reduce fragmentation
        waste = remaining_capacity[feasible_bins]
        small_waste = (waste > 0) & (waste <= 0.1)  # tunable threshold
        priority[feasible_bins][small_waste] -= 50 #tunable param

        #3. Prioritize bins with enough space to accommodate half the size of current item
        enough_space = waste >= item/2
        priority[feasible_bins][enough_space] += 20 #tunable param

    return priority
```
