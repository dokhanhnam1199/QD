```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio maximization, and close fit penalties."""
    priority = np.zeros_like(bins_remain_cap)
    feasible = bins_remain_cap >= item
    priority[~feasible] = -np.inf
    if not np.any(feasible):
        return priority

    waste = bins_remain_cap - item
    waste[~feasible] = np.inf

    priority[feasible] = -waste[feasible] # Waste minimization
    fill_ratio = item / bins_remain_cap
    fill_ratio[~feasible] = 0

    priority[feasible] += fill_ratio[feasible] * 100  # Scaled Fill Ratio

    close_fit_penalty = np.exp(waste)
    close_fit_penalty[~feasible] = 0

    priority[feasible] -= close_fit_penalty[feasible]  # Penalty for close fits
    return priority
```
