```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Calculate the remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give higher priority to bins that can accommodate the item
    can_accommodate = remaining_after_add >= 0
    priorities[can_accommodate] = bins_remain_cap[can_accommodate] - item # favour smaller waste

    #If a bin can accommodate perfectly, increase priority significantly
    perfect_fit = remaining_after_add == 0
    priorities[perfect_fit] = np.inf

    # Normalize priorities for stability.
    if np.any(np.isfinite(priorities)): # prevent infs from messing up scaling
        max_priority = np.max(priorities[np.isfinite(priorities)])
        min_priority = np.min(priorities[np.isfinite(priorities)])
        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)


    return priorities
```
