```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)  # No valid bins

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # invalid bins

    # Give high priority to bins that can fit the item without much waste.
    priority = -waste

    # Adjust priority based on how full the bin would be. Favor almost full bins.
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0  # Correct invalid fills
    priority += fill_ratio * 100  # Scale up the fill ratio effect.

    # Penalize bins where the item barely fits (high waste).  Make the penalty adaptive.
    close_fit_penalty = np.exp(waste / (item + 1e-6))  # Normalize waste by item size.  Avoid division by zero.
    close_fit_penalty[np.isinf(close_fit_penalty)] = 0

    priority -= close_fit_penalty

    # Bonus for bins that make the bin completely full
    almost_full_bonus = np.exp(-np.abs(waste)) # Give a bonus if waste is close to zero
    priority += almost_full_bonus * 50

    # Small bonus for bins that are more than half full
    half_full_bonus = (bins_remain_cap > np.mean(bins_remain_cap)) * 10
    priority += half_full_bonus
    #Ensure the priority of invalid bins are always very small
    priority[bins_remain_cap < item] = -np.inf
    return priority
```
