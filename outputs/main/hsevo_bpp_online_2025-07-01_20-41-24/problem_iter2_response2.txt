```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1, with focus on space utilization."""
    priorities = np.full(bins_remain_cap.shape, -np.inf) #Initialize with very low priority
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        priorities[valid_bins] = 0.0 #Give a base priority to valid bins

        #Heuristic 1: Favor bins with tighter fit (similar to perfect fit bonus)
        slack = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-slack)

        #Heuristic 2: Give larger bins more weight to accomodate future items
        priorities[valid_bins] += bins_remain_cap[valid_bins] / np.max(bins_remain_cap)

        #Heuristic 3: Reward almost full bins (to encourage packing)
        remaining_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-10*np.clip(remaining_space, a_min=0.001, a_max = None)) #Clip and boost factor 10.

    else:
        #Prioritize bins that are CLOSE to fitting, but penalize heavily
        space_needed = item - bins_remain_cap
        priorities = -space_needed * 10  #Large Negative Value

    return priorities
```
