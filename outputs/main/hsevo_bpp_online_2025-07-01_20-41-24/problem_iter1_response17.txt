```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses a combination of remaining capacity and a "near miss" bonus to prioritize bins.
    It prefers bins where the item fits reasonably well but also gives a small bonus to bins that are
    close to being full after the item is added. This encourages filling bins as much as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Option 1: Penalize bins that are too small: big time
    too_small = bins_remain_cap < item
    priorities[too_small] = -np.inf

    # Option 2: Prioritize bins that fit the item reasonably well. Using relative fit.
    fit_scores = (bins_remain_cap - item) / bins_remain_cap
    fit_scores[fit_scores < 0] = 0 # ensure priorities are not negative

    # Add a small bonus for bins that will be nearly full after adding the item
    near_full_bonus = np.exp(-10 * (bins_remain_cap - item))

    # Overall Priority.  Mix up the fitness score and bonus to get a good filling algorithm.
    priorities = fit_scores + 0.5 * near_full_bonus
    return priorities
```
