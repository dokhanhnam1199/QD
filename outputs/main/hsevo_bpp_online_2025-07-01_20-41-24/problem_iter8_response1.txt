```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, and near-full bonus."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    too_small_penalty = -1e9

    if not np.any(feasible):
        space_needed = item - bins_remain_cap
        return -space_needed

    remaining_capacity = bins_remain_cap - item
    waste = remaining_capacity[feasible]
    eps = 1e-6
    priority[feasible] = (1 / (waste + eps)) * 5

    fill_ratio = item / bins_remain_cap
    priority = np.where(feasible, priority + fill_ratio * 3, too_small_penalty)

    almost_full_bonus = np.exp(-5 * (remaining_capacity / bins_remain_cap))
    priority = np.where(feasible, priority + almost_full_bonus, too_small_penalty)

    return priority
```
