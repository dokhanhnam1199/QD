```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility: Disqualify bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # 2. Best Fit Criterion: Prefer bins that leave the least waste
    waste = bins_remain_cap - item
    priorities[~infeasible_bins] = -waste[~infeasible_bins]  # Negative waste

    # 3. Normalize to encourage exploration even with suboptimal fits initially
    priorities[~infeasible_bins] = (priorities[~infeasible_bins] - np.min(priorities[~infeasible_bins])) / (np.max(priorities[~infeasible_bins]) - np.min(priorities[~infeasible_bins]) + 1e-9) # Avoid division by zero.  Scale between [0, 1].  Prioritizes smaller waste (best fit), only amongst bins the item *can* fit in.
    return priorities
```
