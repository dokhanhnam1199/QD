```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Assign high priority to bins that can accommodate the item
    can_accommodate = remaining_cap_after_add >= 0
    priorities[can_accommodate] = 1 / (remaining_cap_after_add[can_accommodate] + 0.0001) # Avoid division by zero and prioritize bins with tighter fit
    
    # Assign a penalty for bins that cannot accommodate the item (optional, can be set to 0)
    # priorities[~can_accommodate] = -1 # Penalize bins that cannot fit the item
    
    return priorities
```
