```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate wasted space if the item is placed in the bin.
            wasted_space = cap - item

            # Prioritize bins where the item fits and minimize wasted space.
            # Give higher priority to bins that fit the item more snugly,
            # but avoid near-full bins to retain flexibility.
            priorities[i] = (1 / (wasted_space + 0.0001)) #Avoid division by zero

            # Slightly boost priority for bins with relatively large remaining capacity, but avoid being greedy.
            priorities[i] += (cap / np.sum(bins_remain_cap))

            # Penalize almost-full bins, in an attempt to not create very tiny holes
            if wasted_space < item/4: # Item almost completely fills the bin. A small constant might be better, instead of item/4
                priorities[i] *= 0.5 #Or penalize via subtracting a term


    return priorities
```
