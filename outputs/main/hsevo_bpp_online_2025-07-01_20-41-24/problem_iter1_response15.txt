```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Eliminate bins that cannot fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins where the item fills a significant portion of the remaining space
    # but doesn't overfill it too much.

    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]

    # Add a bonus for bins that are almost full after adding the item
    almost_full = (bins_remain_cap - item) < 0.1  # Threshold for "almost full"
    priorities[feasible_bins & almost_full] += 0.5 # add a fixed score to increase chances of near-perfect fit
   
    # Introduce a penalty for fragmentation -- smaller remainder gives higher priority
    remainder = bins_remain_cap - item
    priorities[feasible_bins] += (1 - (remainder[feasible_bins] / np.max(bins_remain_cap)))*0.2
   
    # Invert remaining capacity; smaller gives bigger priority.  Scales remaining capacity based on item size for fair comparison between near full bins vs large bins.
    priorities[feasible_bins] += (item/(bins_remain_cap[feasible_bins]+0.0001)) *0.1 #Added 0.0001 to deal with divide by zero errors


    return priorities
```
