```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins where the item almost fills the bin but doesn't overflow.
    # Bins that cannot contain the item get a very low priority.
    # We use a capped exponential function to boost nearly full bins
    # and a step function to penalize bins that are too small.

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    #Large Negative Number for bins that are too small.
    too_small_penalty = -1e9

    #Check if the item fits
    can_fit = bins_remain_cap >= item
    
    #Prioritize partially filled bins: Exponential score boost. Higher remaining capacity = more boost.
    almost_full_bins = (bins_remain_cap - item) >=0
    remaining_space = bins_remain_cap - item
    
    priorities = np.where(can_fit, np.exp(-5 * (remaining_space/bins_remain_cap)), too_small_penalty) #Experiment parameters

    return priorities
```
