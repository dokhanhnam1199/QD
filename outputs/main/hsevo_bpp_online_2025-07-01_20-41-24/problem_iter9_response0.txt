```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
      return np.full_like(bins_remain_cap, -np.inf)  # No valid bins

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf #invalid bins

    # Give high priority to bins that can fit the item without much waste.
    priority = -waste

    # Adjust priority based on how full the bin would be. Favor almost full bins.
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0  # Correct invalid fills

    # Non-linear fill ratio bonus: Sigmoid function to encourage filling bins to a certain level.
    fill_bonus = 100 * (1 / (1 + np.exp(-10 * (fill_ratio - 0.8)))) # shifted sigmoid
    priority += fill_bonus  # Scale up the fill ratio effect.


    # Penalize bins where the item barely fits (high waste).  Use a different penalty function
    # Closer fit gives higher penalty: exponential decay. Also prevent inf values.

    waste_penalty = np.where(np.isinf(waste), 0, np.exp(5 * waste))
    priority -= waste_penalty

    # Additional term: Prioritize bins with larger remaining capacity IF item fits reasonably well.
    # This helps avoid accumulating tiny fragments in multiple bins.
    capacity_bonus = np.where(waste > 0, bins_remain_cap * (1 - np.exp(-waste)), 0)
    priority += capacity_bonus * 0.5

    #Ensure the priority of invalid bins are always very small
    priority[bins_remain_cap< item]= -np.inf
    return priority
```
