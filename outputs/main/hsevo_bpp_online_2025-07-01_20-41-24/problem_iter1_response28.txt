```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item without
    excessive remaining capacity, aiming for better space utilization. It
    also includes a penalty for bins that are too close in remaining capacity
    to the item size to avoid creating many almost-empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap, dtype=float) # return all zero if no valid bins.

    for i in range(len(bins_remain_cap)):
        if valid_bins[i]:
            remaining_after_fit = bins_remain_cap[i] - item
            # High priority for bins where the item fits well. Avoid bins with very little free space
            # Consider the ratio of the item size to remaining capacity *after* fitting the item.

            # Prioritize bins that result in low *relative* waste.
            if remaining_after_fit > 0:
                priorities[i] = 1.0 / (1.0 + remaining_after_fit/item) # Inverse proportional to relative waste

                # Add a small bonus if the bin is relatively full to start.
                priorities[i] += 0.1 * (bins_remain_cap[i] / np.max(bins_remain_cap))

            else:
                priorities[i] = 0  #Shouldn't get here, given valid_bins filter but good to have.

            # Penality for too much remaining space, promoting compact usage:
            priorities[i] -= 0.05 * remaining_after_fit if remaining_after_fit > 0 else 0


            # Very minor penalty if remaining cap too close to item to further reduce fragmentation:
            if 0 < remaining_after_fit < 0.1:
                priorities[i] -= 0.02 # Try to prevent very small remaining values, less fragmenting

    return priorities
```
