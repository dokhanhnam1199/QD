```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining space, and initial capacity."""

    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(feasible_bins):
        # Fill ratio priority
        fill_ratio = item / bins_remain_cap
        priorities[feasible_bins] = fill_ratio[feasible_bins]

        # Remaining space priority (smaller remainder is better)
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += (1 / (remaining_space + 0.00001)) * 0.3  # Small constant to avoid division by zero

        # Initial capacity bonus (prioritize larger bins if they fit)
        priorities[feasible_bins] += (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) * 0.1

    else:
        # If no bin fits, prioritize bins that are closest to fitting (least waste if we could split)
        space_needed = item - bins_remain_cap
        priorities = -space_needed #Negative because we prioritize smallest need

    return priorities
```
