```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values.
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)  # No valid bins

    # Calculate remaining capacity after adding item.
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[remaining_capacity < 0] = -np.inf  # Mark invalid bins

    # Prioritize bins with smallest remaining capacity, but only if valid
    priority = -remaining_capacity

    # Boost priority for almost full bins, but less aggressively
    fill_threshold = 0.9  # Tune this threshold
    almost_full_bonus = 10  # Tune this bonus
    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap
    priority += np.where(fill_ratio >= fill_threshold, almost_full_bonus, 0)

    # Penalize bins where item barely fits, but linearly
    waste_threshold = 0.1  # Tune this threshold
    waste_penalty = 5      # Tune this penalty
    priority -= np.where((remaining_capacity > 0) & (remaining_capacity <= waste_threshold), waste_penalty, 0)
    
    priority[bins_remain_cap < item] = -np.inf
    return priority
```
