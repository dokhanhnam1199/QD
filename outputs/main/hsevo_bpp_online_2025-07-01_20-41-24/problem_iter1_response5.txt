```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that can fit the item
    valid_bins = bins_remain_cap >= item

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(valid_bins):
        # Calculate wasted space for valid bins
        wasted_space = bins_remain_cap[valid_bins] - item

        # Prioritize bins with smaller wasted space.
        # and penalize nearly full bins to avoid them from completely filling up if possible.
        priorities[valid_bins] = 1 / (wasted_space + 0.0001) # Adding small constant for stability
        priorities[valid_bins] += (bins_remain_cap[valid_bins] - item)/ bins_remain_cap[valid_bins]

        # Favor bins with larger remaining capacity slightly to distribute the load.
        priorities[valid_bins] += bins_remain_cap[valid_bins] / np.max(bins_remain_cap) * 0.1


    else:
        # If no bin can fit, strongly penalize this bin. In online setting, this never happens.
        priorities = np.full_like(bins_remain_cap, -np.inf)

    return priorities
```
