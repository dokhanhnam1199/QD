```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Fill-based priority, perfect fit bonus, capacity scaling, avoids tiny remaining spaces."""
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    priorities[eligible_bins] = bins_remain_cap[eligible_bins] - item

    perfect_fit = bins_remain_cap[eligible_bins] == item
    if np.any(perfect_fit):
        priorities[eligible_bins][perfect_fit] = np.inf

    # Scale priorities by remaining capacity to favor larger bins (less fragmentation).
    priorities[eligible_bins] /= np.max(bins_remain_cap)

    # Penalize bins that would leave very small remaining space to avoid fragmentation
    small_space = (bins_remain_cap[eligible_bins] - item) < 0.1
    if np.any(small_space):
        priorities[eligible_bins][small_space] = -np.inf #Avoid very small space

    return priorities
```
