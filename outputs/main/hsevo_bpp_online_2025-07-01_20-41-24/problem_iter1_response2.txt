```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers both remaining capacity and a waste penalty.
    A slight preference is given to bins that can accommodate the item
    with minimal wasted space.  If the item doesn't fit, a large negative
    priority is assigned.  Bins close to full without the item are preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap >= item:
            # Item fits, prioritize based on remaining space
            waste = remaining_cap - item
            # Smaller waste is better, hence the inverse. Adding 1 to avoid division by zero if waste is zero.
            priorities[i] = 1 / (waste + 0.01) # Prevents division by zero
        else:
            # Item does not fit. Give very negative priority.  A bit less negative than complete fill.
            priorities[i] = -1000 * (item - remaining_cap) # Large penalty, scaled by overflow

    return priorities
```
