```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have enough capacity but penalizes near-full bins
    and nearly empty bins. It introduces a sigmoid-like function to favor
    bins with remaining capacity slightly larger than the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Define a scaling factor to adjust the sensitivity of the sigmoid
    scale = 2.0

    # Calculate the difference between bin capacity and item size
    diff = bins_remain_cap - item

    # Apply a sigmoid-like function to prioritize bins with a good fit
    priorities = 1 / (1 + np.exp(-scale * diff))

    # Penalize bins that are too full (remaining capacity close to zero) or almost empty
    # Heuristic: The bin shouldn't be too full or too empty after packing.
    near_full_penalty = np.exp(-10 * bins_remain_cap) # Larger bins_remain_cap has smaller penality
    near_empty_penalty = np.exp(-10 / (bins_remain_cap + 1e-9)) # To avoid division by zero

    priorities = priorities - near_full_penalty/100. - near_empty_penalty/100.
    priorities[bins_remain_cap < item] = -np.inf # Very Low
    return priorities
```
