```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Fill ratio component
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isinf(fill_ratio)] = 0
    priority += fill_ratio * 50

    # Waste component (inverse, smaller waste is better) using a sigmoid-like function
    waste_scaled = waste / np.max(bins_remain_cap)  # Scale waste to [0, 1]
    waste_penalty = 1 / (1 + np.exp(10 * waste_scaled - 5))  # Sigmoid, favoring small waste
    priority += waste_penalty * 50


    # Bonus for bins that can fit *another* item of similar size, look ahead one step
    potential_future_fit = bins_remain_cap - item >= item * 0.8 #can another item fit in there
    priority += potential_future_fit * 20

    # Penalize almost full bins, less flexible for future
    almost_full = (waste / bins_remain_cap) < 0.1
    priority -= almost_full * 10
    
    priority[bins_remain_cap < item] = -np.inf  # Invalidate bins that can't fit item

    return priority
```
