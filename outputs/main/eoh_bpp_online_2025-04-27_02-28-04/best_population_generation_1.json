{
     "algorithm": "This algorithm calculates priority scores for each bin based on a combination of remaining capacity and wasted space, aiming to balance bin utilization and minimize fragmentation.",
     "code": "def priority_v2(item, bins_remain_cap):\n  \"\"\"{This algorithm calculates priority scores for each bin based on a combination of remaining capacity and wasted space, aiming to balance bin utilization and minimize fragmentation.}\"\"\"\n  priority = []\n  for cap in bins_remain_cap:\n    if cap >= item:\n      wasted_space = cap - item\n      utilization = item / (cap + item)\n      priority_score = utilization - (wasted_space / 1000)  # Minor penalty for wasted space\n    else:\n      priority_score = -1  # Assign a very low priority if the item doesn't fit\n\n    priority.append(priority_score)\n  return priority",
     "objective": 4.04866,
     "other_inf": null
}