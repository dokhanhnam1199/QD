{
     "algorithm": "This algorithm prioritizes bins by balancing the remaining bin capacity with the item size, considering bin utilization and a size difference penalty to promote balanced packing.",
     "code": "def priority_v2(item, bins_remain_cap):\n  \"\"\"{This algorithm prioritizes bins by balancing the remaining bin capacity with the item size, considering bin utilization and a size difference penalty to promote balanced packing.}\"\"\"\n  priority = []\n  for cap in bins_remain_cap:\n    if cap >= item:\n      utilization = (cap - item) # Remaining capacity after placing the item\n      size_diff = abs(cap - item - item) # difference between remaining capacity and the size of the item\n      priority_score = (1 / (1 + utilization)) - (size_diff / (cap + item))\n    else:\n      priority_score = -1\n    priority.append(priority_score)\n  return priority",
     "objective": 0.99721,
     "other_inf": null
}