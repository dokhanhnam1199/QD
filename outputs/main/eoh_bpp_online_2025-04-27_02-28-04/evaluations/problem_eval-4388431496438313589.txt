def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score that balances the remaining capacity's proximity to the item size and the relative fullness of the bin after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      capacity_score = 1 - abs(cap - item) / 100 if abs(cap-item) < 100 else 0 # Score based on closeness to item size.
      fullness_score = item / cap #Score based on the relative fullness of the bin
      priority_score = 0.6 * capacity_score + 0.4 * fullness_score #Weighted average of capacity and fullness
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
