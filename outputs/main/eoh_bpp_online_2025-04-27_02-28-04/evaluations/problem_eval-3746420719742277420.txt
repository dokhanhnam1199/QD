def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item fits, considering the absolute remaining space after packing and a bonus for using bins that are already partially filled.}"""
  priority = []
  already_filled_weight = 0.2  # Weight to favor partially filled bins

  for cap in bins_remain_cap:
    if cap >= item:
      remaining_space = cap - item
      # Reward using bins that are already partially filled
      filled_proportion = 1 - (cap / (sum(bins_remain_cap) + sum([cap-i for i in bins_remain_cap])))  # crude approximation of how full the bin is
      priority_score = -remaining_space + filled_proportion * already_filled_weight
    else:
      priority_score = -float('inf')  # Item doesn't fit

    priority.append(priority_score)
  return priority
