def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority scores for each bin based on a combination of remaining capacity, waste after packing, and a bonus for bins nearly full after packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      # Encourage filling bins close to full
      if item > 0:
          fill_ratio_after_pack = (100 - waste) / 100.0
      else:
          fill_ratio_after_pack = 0
          
      bonus = 0
      if 0.9 <= fill_ratio_after_pack <= 1:
          bonus = 100
      
      priority_score = (1.0 / (waste + 0.00001)) + bonus
      priority.append(priority_score)
    else:
      priority.append(-1) # Assign a negative priority if item doesn't fit
  return priority
