def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering the absolute difference between the remaining capacity after placing the item and a target remaining capacity, penalized by a term proportional to the initial remaining capacity.}"""
  priority = []
  target_remaining_capacity_ratio = 0.2  # Target remaining capacity relative to bin size
  penalty_factor = 0.1 # Factor for penalizing based on initial remaining capacity

  for cap in bins_remain_cap:
    if cap >= item:
      remaining_capacity_after = cap - item
      target_remaining_capacity = 100 * target_remaining_capacity_ratio #fixed bin size = 100
      
      # Calculate priority based on how close the remaining capacity is to the target
      capacity_diff = abs(remaining_capacity_after - target_remaining_capacity)
      priority_score = 100 - capacity_diff

      # Apply a penalty based on the initial remaining capacity
      priority_score -= penalty_factor * cap
          
    else:
      priority_score = -1

    priority.append(priority_score)
  return priority
