def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity, favoring bins with capacity just slightly larger than the item size to minimize wasted space, while also considering a small penalty for bins that are too full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority.append(1 / (cap - item + 1e-9) - (item / cap)**2) # Inverse of wasted space - Penalty for bins nearing full capacity.
    else:
      priority.append(-1)
  return priority
