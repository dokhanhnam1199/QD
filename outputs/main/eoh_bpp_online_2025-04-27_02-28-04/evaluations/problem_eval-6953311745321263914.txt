def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority scores for each bin based on a combination of remaining capacity and the absolute difference between the item size and remaining capacity, favoring bins that can accommodate the item with minimal leftover space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      difference = abs(cap - item)
      priority_score = 1 / (1 + difference)  # Higher priority for smaller difference
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
