def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combination of fill percentage and a penalty for bins that are already very full.}"""
  priority = []
  bin_capacity = 100 #Assume bin capacity is 100

  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = (bin_capacity - cap + item) / bin_capacity #how full it will be
      priority_score = fill_percentage

      # Penalize bins that are already almost full before adding the item
      if cap < (0.2 * bin_capacity):
        priority_score -= 0.2
    else:
      priority_score = -1

    priority.append(priority_score)
  return priority
