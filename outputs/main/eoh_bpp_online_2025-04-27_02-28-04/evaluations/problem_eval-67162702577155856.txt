def priority_v2(item, bins_remain_cap):
    """
    {This algorithm calculates the priority of each bin by considering both remaining capacity and a penalty for bins that are too full or too empty, preferring bins that can accommodate the item without excessive leftover space.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the wasted space if the item is placed in this bin
            wasted_space = cap - item
            # Penalize bins that are too full (small wasted space) or too empty (large wasted space)
            priority_score = cap - (wasted_space * 0.5) # Higher score for bins that fit the item well
            priority.append(priority_score)
        else:
            priority.append(-1)  # Assign a low priority if the item doesn't fit

    return priority
