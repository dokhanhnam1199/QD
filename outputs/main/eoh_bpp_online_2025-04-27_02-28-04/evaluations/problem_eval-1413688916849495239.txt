def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combination of sufficient capacity and minimal fragmentation, giving higher scores to bins that can fit the item and leave the least unused space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority.append(1 / (cap - item + 1))  # Minimize remaining space after packing.
    else:
      priority.append(-1)
  return priority
