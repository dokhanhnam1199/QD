def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on fullness, favoring bins that are already relatively full but can still accommodate the item, and opening a new bin only when necessary.}"""
  priority = []
  bin_capacity = 100 #Assume bin capacity is 100

  for cap in bins_remain_cap:
    if cap >= item:
      # Prioritize bins that are relatively full
      priority_score = (bin_capacity - cap) / bin_capacity
    else:
      priority_score = -1  # Item doesn't fit

    priority.append(priority_score)
  return priority
