def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on how well the item fits, favoring bins with remaining capacity close to the item size, but also penalizing bins that are too full or too empty relative to the item size to balance between First Fit Decreasing and Best Fit Decreasing.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Fit is possible
            priority = (item / cap) * (1 - abs(cap - item) / max(item, 100-item)) #Prioritize closer fits, max(item, 100-item) used to penalize bins that are too full or too empty relative to the item
            priorities.append(priority)
        else:
            # Fit is not possible
            priorities.append(-1)  # Assign low priority if item doesn't fit

    return priority
