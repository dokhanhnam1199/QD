def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority scores for each bin based on a combination of remaining capacity and wasted space, aiming to balance bin utilization and minimize fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      utilization = item / (cap + item)
      priority_score = utilization - (wasted_space / 1000)  # Minor penalty for wasted space
    else:
      priority_score = -1  # Assign a very low priority if the item doesn't fit

    priority.append(priority_score)
  return priority
