def priority_v2(item, bins_remain_cap):
    """{This algorithm uses a Best-Fit Decreasing approach with a penalty based on bin utilization, prioritizing bins that can accommodate the item and are already relatively full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = 1 - (cap - item) / 100 if cap <= 100 else 0 # Assuming bin size 100, penalize if cap > 100
            priority_score = utilization if utilization > 0 else 0.0001 # Ensure a small positive score if utilization is 0
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
