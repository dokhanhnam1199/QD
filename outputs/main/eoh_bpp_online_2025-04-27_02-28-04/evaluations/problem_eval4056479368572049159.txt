def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both how well the item fills the bin relative to a target fill ratio and a penalty for bins that are already significantly full.}"""
  priority = []
  target_fill_ratio = 0.8 
  full_bin_threshold = 0.9 

  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      
      # Calculate priority based on how close the fill ratio is to the target
      fill_diff = abs(fill_ratio - target_fill_ratio)
      priority_score = 1 - fill_diff
      
      # Apply a penalty if the bin is already close to full
      if (1 - (cap - item)/item) > full_bin_threshold:
          priority_score -= 0.5 * ((1 - (cap - item)/item) - full_bin_threshold)
          
    else:
      priority_score = -1

    priority.append(priority_score)
  return priority
