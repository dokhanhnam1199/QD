def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score that considers the remaining capacity relative to the item size and the number of items already in the bin, favoring bins with a moderate number of items and sufficient space for the current item.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      #Adjust priority based on the relative space between item and capacity
      relative_space = cap - item
      priority_score = 100 / (1 + abs(relative_space - item * 0.5)) #give higher score to bins with remaining capacity closed to item * 0.5
    else:
      priority_score = -1  # Cannot fit
    priority.append(priority_score)
  return priority
