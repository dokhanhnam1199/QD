def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a score derived from the bin's remaining capacity relative to the item size, combined with a penalty for bins nearing full capacity to encourage even distribution.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            space_utilization = item / cap
            bin_near_full_penalty = 1 / (1 + max(0, cap - item * 2))  # Penalize bins getting close to full.
            priority.append(space_utilization * bin_near_full_penalty)
        else:
            priority.append(-1)
    return priority
