def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity, a penalty for exceeding a target fill level, and a bonus for approaching that target.}"""
    priority = []
    target_fill = 0.75  # Aim for bins to be 75% full after packing
    bin_size = 1.0 # Assuming bin size is 1.0

    for cap in bins_remain_cap:
        if cap >= item:
            fill_level = (bin_size - cap + item) / bin_size
            penalty = 0
            if fill_level > target_fill:
                penalty = (fill_level - target_fill) * 10  # Penalty for exceeding target fill
            bonus = fill_level * 5 #Bonus for fill level 
            priority_score = cap - penalty + bonus  # Reward bins closer to the target, penalize exceeding

            priority.append(priority_score)
        else:
            priority.append(-1)  # Item doesn't fit

    return priority
