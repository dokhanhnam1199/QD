def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering the remaining capacity after placing the item and penalizing smaller remaining capacities more heavily while also rewarding bins with remaining capacity close to half the bin size.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_capacity = cap - item
      size_diff = abs(cap - item - item)
      penalty = (1 / (1 + remaining_capacity**2))  # Penalize smaller remaining capacities more
      reward = 1 / (1 + size_diff) # reward bins with remaining capacity close to item size.
      priority_score = reward - penalty # balance reward with penalty
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
