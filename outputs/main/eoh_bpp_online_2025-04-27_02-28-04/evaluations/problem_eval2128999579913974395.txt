def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on how close its remaining capacity is to a target capacity derived from the item size, penalizing bins that are too full or too empty relative to this target.}"""
  priority = []
  target_capacity = item * 1.2 # Target capacity is slightly larger than the item.
  for cap in bins_remain_cap:
    if cap >= item:
      diff = abs(cap - target_capacity)
      priority.append(1 / (1 + diff))  # Higher priority for closer to target.
    else:
      priority.append(-1)
  return priority
