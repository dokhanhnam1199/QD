def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how close the resulting bin fill level will be to a target fill percentage, penalizing deviations in either direction more heavily for underfilling.}"""
  priority = []
  target_fill = 0.8  # Aim for 80% fill rate after placing the item

  for cap in bins_remain_cap:
    if cap >= item:
      new_fill = (item + (100-cap)) / 100
      fill_percentage = item / cap
      deviation = abs(new_fill - target_fill)
      # Penalize deviations, with higher penalty for underfilling
      if new_fill < target_fill:
          penalty = deviation * 3 # Higher penalty for underfilling
      else:
          penalty = deviation * 1.5 # Moderate penalty for overfilling
      priority_score = 1 - penalty  # Invert penalty
    else:
      priority_score = -1  # Item doesn't fit

    priority.append(priority_score)
  return priority
