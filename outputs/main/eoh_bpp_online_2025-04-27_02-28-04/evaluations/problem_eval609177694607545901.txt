def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the fit of the item, prioritizing bins with closer-to-perfect fit but also considering bins with larger remaining capacity to avoid fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority.append((cap - item) + (1/(cap+0.00001))) # Residual + inverse of the bins_remain_cap
    else:
      priority.append(-1) # Not feasible
  return priority
