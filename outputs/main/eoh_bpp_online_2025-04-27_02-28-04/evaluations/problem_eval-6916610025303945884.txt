def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins by favoring bins with higher utilization while also penalizing bins with very little remaining capacity relative to the item size.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / 100 #item size percentage of max bin size
      priority_score = (0.8 * utilization**2) - (0.2 * (item/cap)) # Weighted score
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
