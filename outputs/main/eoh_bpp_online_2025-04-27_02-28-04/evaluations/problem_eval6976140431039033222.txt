def priority_v2(item, bins_remain_cap):
    """
    {This algorithm calculates priority based on how closely the item size matches a target utilization percentage of the bin's capacity, incentivizing bins that, after packing, are filled closest to the target.}
    """
    target_utilization = 0.75  # Aim for bins to be around 75% full after packing
    priority = []

    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the potential utilization if the item is placed in this bin
            potential_utilization = (item + (cap - item)) / (item + cap)
            # Calculate the difference between the potential utilization and the target utilization
            utilization_difference = abs(potential_utilization - target_utilization)

            # Assign a priority score based on how close the potential utilization is to the target
            priority_score = 1 - utilization_difference  # Higher score for closer utilization
            priority.append(priority_score)
        else:
            priority.append(-1)  # Assign a low priority if the item doesn't fit

    return priority
