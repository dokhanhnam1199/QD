def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins whose remaining capacity is closest to the item size, while also considering the overall fill level of the bin to promote even distribution.}"""
  priorities = []
  for remain_cap in bins_remain_cap:
    if remain_cap >= item:
      capacity_diff = abs(remain_cap - item)
      fill_level = 1 - (remain_cap / 100)  # Assuming bin size is 100
      priority = 1 / (capacity_diff + 0.00001) + fill_level # Avoid division by zero
    else:
      priority = -1
    priorities.append(priority)
  return priority
