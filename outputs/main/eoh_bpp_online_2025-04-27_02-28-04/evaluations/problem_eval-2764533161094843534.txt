def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score that considers both the remaining capacity of the bin and how well the item's size aligns with a target ideal capacity level, discouraging excessive fragmentation and promoting filling bins to a desirable level.}"""
  priority = []
  ideal_capacity = item * 1.33  #item should occupy 75% capacity
  for cap in bins_remain_cap:
    if cap >= item:
      capacity_diff = abs(cap - ideal_capacity)
      priority_score = 1 / (1 + capacity_diff)  # Higher priority for bins closer to the ideal capacity
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
