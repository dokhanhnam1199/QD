def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score that considers the remaining capacity, penalizing bins that are either too full or too empty relative to the item size and target utilization.}"""
  priority = []
  target_utilization = 0.9 #item should occupy 90% capacity
  ideal_capacity = item / target_utilization
  capacity_threshold = item * 0.25 # acceptable deviation

  for cap in bins_remain_cap:
    if cap >= item:
      capacity_diff = abs(cap - ideal_capacity)
      if capacity_diff <= capacity_threshold:
          priority_score = 2 - (capacity_diff / capacity_threshold) # Linear scaling within acceptable range, score between 1 and 2
      else:
          priority_score = 1 / (1 + capacity_diff) # score is less than 1 if deviation is above threshold
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
