def priority_v2(item, bins_remain_cap):
    """
    {This algorithm prioritizes bins based on a combination of remaining capacity, wasted space, and a bonus for bins that are relatively empty, encouraging a more balanced distribution of items.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Bonus for relatively empty bins
            emptiness_bonus = (cap / sum(bins_remain_cap)) if sum(bins_remain_cap) > 0 else 0
            priority_score = cap - (wasted_space * 0.3) + (emptiness_bonus * 10)
            priority.append(priority_score)
        else:
            priority.append(-1)

    return priority
