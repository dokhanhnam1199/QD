def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by balancing the remaining bin capacity with the item size, considering bin utilization and a size difference penalty to promote balanced packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = (cap - item) # Remaining capacity after placing the item
      size_diff = abs(cap - item - item) # difference between remaining capacity and the size of the item
      priority_score = (1 / (1 + utilization)) - (size_diff / (cap + item))
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
