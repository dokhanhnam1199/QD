def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on how closely the item's size matches the bin's remaining capacity, penalizing bins with significant capacity differences.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the absolute difference between bin capacity and item size.
            capacity_difference = abs(cap - item)
            # Assign priority based on inverse of capacity difference (smaller difference = higher priority)
            priority_score = 1.0 / (1 + capacity_difference) #Adding 1 to avoid division by zero
            priority.append(priority_score)
        else:
            priority.append(-1)  # Assign a low priority if the item doesn't fit

    return priority
