def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted sum of remaining capacity and the inverse of the utilization, favoring bins that have sufficient space for the item and are not too full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / cap
      priority_score = (0.6 * (cap / 100)) + (0.4 * (1 - utilization)) # Weighted score
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
