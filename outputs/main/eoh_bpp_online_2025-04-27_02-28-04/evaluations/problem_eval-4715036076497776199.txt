def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted sum of remaining capacity and the square of utilization, favoring bins that are both reasonably full and have sufficient space for the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / cap
      priority_score = (0.7 * utilization**2) + (0.3 * (cap / 100)) # Weighted score
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
