def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin by considering the utilization ratio after placing the item, favoring bins that achieve a utilization close to a target utilization ratio while still being able to accommodate the item.}"""
  priority = []
  target_utilization = 0.75 # Aim for 75% utilization.
  bin_capacity = 100 # Assume bin capacity is 100.
  for cap in bins_remain_cap:
    if cap >= item:
      new_remaining_capacity = cap - item
      new_utilization = (bin_capacity - new_remaining_capacity) / bin_capacity
      priority.append(1 / (1 + abs(new_utilization - target_utilization))) # Closer to target is better
    else:
      priority.append(-1)
  return priority
