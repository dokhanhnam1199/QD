def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on how close the item size is to a certain percentage (e.g., 70%) of the bin's capacity, favoring bins that best utilize their space without leaving too much or too little unused.}"""
  priorities = []
  for remain_cap in bins_remain_cap:
    if remain_cap >= item:
      target_fill = 0.7 * (remain_cap + item) # Aim for filling 70%
      diff = abs(item - target_fill)
      priority = 1.0 / (diff + 0.00001) # Higher priority if closer to the target
    else:
      priority = -1
    priorities.append(priority)
  return priority
