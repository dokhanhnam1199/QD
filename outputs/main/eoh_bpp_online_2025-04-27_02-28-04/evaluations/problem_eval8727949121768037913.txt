def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on a penalty calculated from the squared difference between the remaining bin capacity after placing the item and an ideal remaining capacity, which is a fraction of the bin's original capacity after packing an average item.}"""
    priority = []
    bin_capacity = 1 # Assume bin capacity is 1 for normalization
    avg_item_size = 0.5 * bin_capacity #Assume an average item size is 50% bin capacity
    ideal_remaining = bin_capacity - avg_item_size 
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_after_placement = cap - item
            penalty = (remaining_after_placement - ideal_remaining)**2
            priority.append(1 / (1 + penalty))
        else:
            priority.append(-1)
    return priority
