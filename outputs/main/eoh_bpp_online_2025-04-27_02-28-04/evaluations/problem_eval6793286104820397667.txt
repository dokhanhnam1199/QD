def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted sum of remaining capacity and the reciprocal of the remaining capacity, favoring bins that have a balance between enough capacity and not too much space left.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority_score = (0.6 * (100-cap) / 100) + (0.4 * (1/cap))
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
