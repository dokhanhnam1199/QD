def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the absolute difference between the remaining capacity after placing the item and a target remaining capacity, favoring bins that result in a remaining capacity closest to the target.}"""
  priority = []
  bin_capacity = 1  # Assuming bins have unit capacity
  target_remaining = 0.25  # Aim for 25% remaining capacity after placing the item

  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after_placement = cap - item
      priority_score = -abs(remaining_after_placement - target_remaining) # Minimize the absolute difference
    else:
      priority_score = -float('inf')  # Item doesn't fit

    priority.append(priority_score)
  return priority
