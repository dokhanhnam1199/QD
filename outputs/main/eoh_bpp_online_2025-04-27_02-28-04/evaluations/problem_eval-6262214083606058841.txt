def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on a combination of remaining capacity fit and the current fill level of the bin, favoring bins that can accommodate the item well without being overly full or empty.}"""
  priorities = []
  for cap in bins_remain_cap:
    if item <= cap:
      priority = (cap - item) / (sum(bins_remain_cap)/len(bins_remain_cap)) + cap/100
    else:
      priority = -1
    priorities.append(priority)
  return priority
