def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by combining the remaining capacity, the item's size relative to the bin's capacity, and a penalty for exceeding a certain fullness threshold to balance space utilization and avoid overly full bins.}"""
  priority = []
  fullness_threshold = 0.9  # Avoid bins that will be more than 90% full
  for cap in bins_remain_cap:
    if cap >= item:
      fullness_after_packing = (1 - (cap - item))
      if fullness_after_packing > fullness_threshold:
        penalty = -1000 #Large negative penalty if bin exceeds fullness threshold
      else:
        penalty = 0
      capacity_ratio = float(item) / cap
      priority_score = cap + (1 - capacity_ratio) + penalty # Combines remain_cap and the ratio
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
