def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted sum of normalized remaining capacity and the inverse of wasted space if the item were placed in that bin.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      normalized_capacity = cap / 100  # Assuming bin size is 100
      wasted_space_inverse = 1 / (cap - item + 0.0001) # Adding a small constant to avoid division by zero
      priority_score = (0.6 * normalized_capacity) + (0.4 * wasted_space_inverse)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
