def priority_v3(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin by considering the utilization ratio after placing the item and applies a penalty if the bin is over-utilized, favoring bins that achieve a balanced fill level.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization_ratio = item / (cap)
            priority_score = 1 - abs(utilization_ratio - 0.7) 
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
