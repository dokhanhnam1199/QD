def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item fills the remaining capacity, considering the absolute difference between the resulting fill percentage and a target fill percentage, favoring bins that bring the fill level closer to the target.}"""
  priority = []
  target_fill = 0.8  # Aim for 80% fill rate after placing the item

  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = (item + (cap-item)) / (cap + (cap-item)) if (cap + (cap-item)) > 0 else 0
      priority_score = 1 - abs(fill_percentage - target_fill)
    else:
      priority_score = -1  # Item doesn't fit

    priority.append(priority_score)
  return priority
