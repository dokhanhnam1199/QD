def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item fills the remaining capacity, considering both the filled percentage and a penalty for exceeding a target fill percentage to encourage more balanced packing.}"""
  priority = []
  target_fill = 0.75  # Aim for 75% fill rate after placing the item

  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = item / cap
      if fill_percentage <= target_fill:
        priority_score = fill_percentage
      else:
        # Penalize exceeding the target fill percentage
        penalty = (fill_percentage - target_fill) * 2  # Increase penalty factor as needed
        priority_score = fill_percentage - penalty
    else:
      priority_score = -1  # Item doesn't fit

    priority.append(priority_score)
  return priority
