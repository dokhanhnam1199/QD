def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering how much space the item leaves unused in the bin, penalizing bins that would become too empty after packing the item.}"""
  priority = []
  target_empty_ratio = 0.2  
  almost_empty_threshold = 0.1 

  for cap in bins_remain_cap:
    if cap >= item:
      empty_space = cap - item
      
      # Calculate priority based on how close the empty space is to the target
      empty_ratio = empty_space / cap
      empty_diff = abs(empty_ratio - target_empty_ratio)
      priority_score = 1 - empty_diff
      
      # Apply a penalty if the bin would become almost empty
      if empty_ratio < almost_empty_threshold:
          priority_score -= 0.5 * (almost_empty_threshold - empty_ratio)
          
    else:
      priority_score = -1

    priority.append(priority_score)
  return priority
