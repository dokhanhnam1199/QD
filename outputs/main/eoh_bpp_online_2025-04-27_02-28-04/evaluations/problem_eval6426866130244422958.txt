def priority_v3(item, bins_remain_cap):
    """{Assign a priority score to each bin based on the ratio of item size to remaining capacity, favoring bins where the item fills a large portion of the remaining space, while also considering wasted space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            fill_ratio = item / cap
            if wasted_space == 0:
                priority.append(float('inf'))  # Perfect fit is highest priority
            else:
                priority.append(fill_ratio / (1 + wasted_space / item)) # Prioritize high fill ratio, penalize large wasted space relative to item size
        else:
            priority.append(-1)  # Cannot fit
    return priority
