def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item fits relative to remaining capacity, favoring bins where the item fills a significant portion but doesn't overfill, with a soft penalty for bins close to full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      priority.append(fill_ratio - (cap / 100)) #fill_ratio is the main component, then subtract cap/100 as a soft penalty.
    else:
      priority.append(-1)
  return priority
