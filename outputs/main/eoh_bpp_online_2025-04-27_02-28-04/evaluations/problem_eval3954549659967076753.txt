def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority score for each bin based on a combination of remaining capacity and a penalty for bins that are too full or too empty, aiming to balance bin utilization and prevent fragmentation.}"""
  priorities = []
  for capacity in bins_remain_cap:
    if capacity >= item:
      # Higher priority for bins that can accommodate the item
      priority = capacity - item  # Smaller difference = higher priority
      
      # Add a penalty for bins that become too full or too empty
      if capacity - item < 0.1: # If remaining cap is less than 10% after adding item
          priority -= 1
      if capacity < 0.3: # if the bin is already less than 30% full, reduce priority for further use to avoid heavy fragmentation.
          priority -=1
      priorities.append(priority)
    else:
      priorities.append(-10000)  # Very low priority for bins that cannot accommodate the item

  return priority
