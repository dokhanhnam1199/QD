def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score of remaining capacity relative to item size and the number of items already in the bin.}"""
  priority = []
  num_items_in_bins = [10 - x for x in bins_remain_cap] #assuming bin capacity = 10
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      capacity_score = (cap - item) / 10.0  # Normalized wasted capacity (assuming bin size 10)
      item_count_score = num_items_in_bins[i] / 5.0  # Normalized item count
      priority_score = 1 - (capacity_score + item_count_score) / 2 #combined and inversely related to priority score
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
