def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority to each bin based on the utilization ratio if the item is placed in the bin, penalizing bins that would become too full or leave too much space unused.}"""
  priorities = []
  bin_capacity = 1.0  # Assuming bin capacity is normalized to 1

  for remain_cap in bins_remain_cap:
    if remain_cap >= item:
      new_remain_cap = remain_cap - item
      utilization_ratio = (bin_capacity - new_remain_cap) / bin_capacity
      priority = utilization_ratio - abs(utilization_ratio - 0.7) #prefer the bin, which can make utilization ratio close to 0.7
    else:
      priority = -1
    priorities.append(priority)
  return priority
