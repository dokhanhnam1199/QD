def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on the remaining capacity of each bin after placing the item, favoring bins with smaller resulting remaining capacity while also considering the initial fill level to avoid creating highly fragmented bins.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_cap = cap - item
            priority_score = 1 / (remaining_cap + 0.1) + (1 - cap / sum(bins_remain_cap)) # Favor smaller remaining cap and fuller bins initially
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
