def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how closely their remaining capacity matches the item size, normalized by the total available capacity, to optimize for both fit and overall space utilization.}"""
  priorities = []
  total_capacity = sum(bins_remain_cap)
  for remain_cap in bins_remain_cap:
    if remain_cap >= item:
      capacity_diff = abs(remain_cap - item)
      priority = 1 - (capacity_diff / (item + remain_cap + 0.00001)) # Avoid division by zero
      priority *= (remain_cap / (total_capacity + 0.00001))
    else:
      priority = -1
    priorities.append(priority)
  return priority
