def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by rewarding bins that, after packing the item, get closest to a target fill level while also penalizing bins that are too empty after packing.}"""
  priority = []
  target_fill_level = 0.8  # Target fill level as a fraction of bin capacity
  empty_bin_threshold = 0.2

  for cap in bins_remain_cap:
    if cap >= item:
      new_fill_level = 1 - (cap - item) # Current fill level if item is placed

      # Calculate priority based on how close the fill level is to the target
      fill_diff = abs(new_fill_level - target_fill_level)
      priority_score = 1 - fill_diff

      # Apply a penalty if the bin becomes too empty
      if (cap - item) / 1 > empty_bin_threshold: #Bin capacity is assumed to be 1.
          priority_score -= 0.5 * ((cap - item) / 1 - empty_bin_threshold)

    else:
      priority_score = -1

    priority.append(priority_score)
  return priority
