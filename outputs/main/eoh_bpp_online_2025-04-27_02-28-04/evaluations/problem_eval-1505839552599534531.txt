def priority_v2(item, bins_remain_cap):
    """{Assign a priority score to each bin based on a combination of remaining capacity and wasted space if the item is placed in the bin, favoring bins with tighter fits and avoiding excessive wasted space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            if wasted_space == 0:
                priority.append(float('inf'))  # Perfect fit is highest priority
            else:
                priority.append(1 / (wasted_space * (1 + (cap > item * 1.5))))  # Prioritize tighter fits, penalize large gaps
        else:
            priority.append(-1)  # Cannot fit
    return priority
