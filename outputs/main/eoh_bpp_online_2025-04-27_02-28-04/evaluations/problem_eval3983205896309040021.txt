def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on their fullness relative to the item size, preferring bins that are neither too full nor too empty, while also considering the number of items already in the bin.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      fullness_ratio = (100 - (cap / 100) * 100)
      # Adjust priority based on fullness, avoid extreme fullness values
      priority_score = 100 / (1 + abs(fullness_ratio - 50)) #give higher score to bins with fullness ratio closer to 50
    else:
      priority_score = -1  # Cannot fit
    priority.append(priority_score)
  return priority
