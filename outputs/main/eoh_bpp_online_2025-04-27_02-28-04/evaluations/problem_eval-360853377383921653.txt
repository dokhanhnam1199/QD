def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how closely the item's size matches the bin's remaining capacity, favoring a fuller bin after placement while penalizing bins that are too small or would result in minimal utilization.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      priority_score = fill_ratio - abs(1 - fill_ratio) * 0.1 # Favor bins that get filled well, penalize if item is much smaller than capacity
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
