def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted combination of remaining capacity ratio and the absolute remaining capacity, favoring bins with tighter fits and larger absolute remaining capacities.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      capacity_ratio = item / cap  # Ratio of item size to remaining capacity
      priority_score = (0.7 * capacity_ratio) + (0.3 * cap) # Weighted sum of capacity ratio and remaining capacity
    else:
      priority_score = -1  # Assign a very low priority if the item doesn't fit
    priority.append(priority_score)
  return priority
