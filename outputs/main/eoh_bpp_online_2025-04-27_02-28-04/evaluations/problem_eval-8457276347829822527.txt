def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both the waste created if the item is placed in the bin and the fullness of the bin, favoring bins that minimize waste and are relatively full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      fullness = item / (cap + 1e-9)  # Avoid division by zero
      priority.append(fullness / (1 + waste))  # Higher priority for less waste and more fullness.
    else:
      priority.append(-1)
  return priority
