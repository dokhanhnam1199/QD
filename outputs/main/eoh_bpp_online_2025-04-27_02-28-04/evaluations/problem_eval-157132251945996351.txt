def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority scores to each bin based on a weighted combination of remaining capacity percentage and the ratio of item size to remaining capacity, favoring bins with high capacity utilization and sufficient space for the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      capacity_percentage = cap / 100.0 #Assuming bin size is 100.
      item_ratio = item / float(cap)
      priority_score = (0.6 * capacity_percentage) + (0.4 * item_ratio) # Weighted average
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
