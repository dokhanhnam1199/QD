def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority score to each bin based on a combination of remaining capacity and the wasted space if the item is placed in the bin, favoring bins that can accommodate the item with minimal waste and are already relatively full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      if wasted_space == 0:
        priority_score = 100  # Perfect fit
      else:
        priority_score = 50 + (cap / sum(bins_remain_cap)*50) - (wasted_space / max(bins_remain_cap)*10) # Prioritize fuller bins, penalize wasted space.
    else:
      priority_score = -1000  # Impossible to fit

    priority.append(priority_score)
  return priority
