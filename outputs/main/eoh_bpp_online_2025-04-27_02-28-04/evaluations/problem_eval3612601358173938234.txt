def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority scores for each bin based on a combination of remaining capacity and wasted space, prioritizing bins with capacity closest to the item size while discouraging excessive fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      #Prioritize bins where the wasted space is minimized and penalize bins with a lot of wasted space.
      priority_score = 1 / (wasted_space + 1)  # Invert wasted space, add 1 to avoid division by zero
    else:
      priority_score = -1

    priority.append(priority_score)
  return priority
