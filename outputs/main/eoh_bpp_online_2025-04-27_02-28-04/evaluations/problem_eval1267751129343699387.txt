def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by assessing the potential balance achieved after placing the item, favoring bins that lead to remaining capacities closest to the average remaining capacity across all bins if the item were placed.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      temp_bins_remain_cap = bins_remain_cap[:]
      temp_bins_remain_cap[i] -= item
      avg_remain_cap = sum(temp_bins_remain_cap) / len(temp_bins_remain_cap)
      priority_score = -abs(temp_bins_remain_cap[i] - avg_remain_cap) 
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
