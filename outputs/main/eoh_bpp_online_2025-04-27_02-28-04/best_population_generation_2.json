{
     "algorithm": "This algorithm prioritizes bins based on a weighted sum of remaining capacity and the square of utilization, favoring bins that are both reasonably full and have sufficient space for the item.",
     "code": "def priority_v2(item, bins_remain_cap):\n  \"\"\"{This algorithm prioritizes bins based on a weighted sum of remaining capacity and the square of utilization, favoring bins that are both reasonably full and have sufficient space for the item.}\"\"\"\n  priority = []\n  for cap in bins_remain_cap:\n    if cap >= item:\n      utilization = item / cap\n      priority_score = (0.7 * utilization**2) + (0.3 * (cap / 100)) # Weighted score\n    else:\n      priority_score = -1\n    priority.append(priority_score)\n  return priority",
     "objective": 3.87914,
     "other_inf": null
}