```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Reward near-perfect fits
    tolerance = 0.05  # Define a tolerance level for "near-perfect"
    near_perfect_fit = np.abs(bins_remain_cap - item) <= tolerance
    priorities[near_perfect_fit] += 100  # Substantial reward for near-perfect fit
    
    # Prioritize feasible bins and reward higher fill
    feasible = bins_remain_cap >= item
    priorities[feasible] += (item / bins_remain_cap[feasible]) * 50  # Reward higher fill
    
    # Target fill level: give extra score if the bin reaches a certain fill % after adding item
    target_fill_level = 0.9
    after_fill = (bins_remain_cap - item) / bins_remain_cap
    reached_target = (after_fill >= 0) & (after_fill <= (1 - target_fill_level))
    priorities[reached_target] += 75

    # Penalize wasted space, if the item fits
    wasted_space = bins_remain_cap - item
    priorities[feasible] -= wasted_space[feasible] * 2 # Penalize for wasted space

    # Large bin penalty - softly penalize for using a bigger bin
    priorities[feasible] -= bins_remain_cap[feasible] * 0.5

    # Infeasible assignment penalty
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    return priorities
```
