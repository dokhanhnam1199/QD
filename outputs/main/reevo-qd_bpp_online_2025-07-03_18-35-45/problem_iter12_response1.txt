```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Reward near-perfect fits
    near_perfect_fit_threshold = 0.05
    near_perfect_fit = np.abs(bins_remain_cap - item) <= near_perfect_fit_threshold
    priorities[near_perfect_fit] += 10  # Substantial reward

    # Target fill level reward (e.g., 70-95% full)
    target_fill_min = 0.7
    target_fill_max = 0.95
    remaining_after_placement = bins_remain_cap - item
    target_range = (remaining_after_placement >= 0) & (item / bins_remain_cap >= target_fill_min) & (item / bins_remain_cap <= target_fill_max)
    priorities[target_range] += 5  # Moderate reward for target fill

    # Wasted space penalty: Penalize bins with large remaining capacity after placement, but only if feasible
    waste = bins_remain_cap - item
    waste_penalty_mask = (waste > 0)
    waste_penalty_amount = waste[waste_penalty_mask]
    priorities[waste_penalty_mask] -= waste_penalty_amount * 0.02  # Slightly increased waste penalty

    # Soft penalty for bins that are much larger than the item, promoting tighter packing
    large_bin_threshold = 2 * item  # e.g., if bin is more than twice the item size
    large_bin_mask = (bins_remain_cap >= item) & (bins_remain_cap > large_bin_threshold)
    priorities[large_bin_mask] -= 1 # Small penalty

    return priorities
```
