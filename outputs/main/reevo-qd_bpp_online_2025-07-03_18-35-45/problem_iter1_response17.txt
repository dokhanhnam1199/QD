```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing inspired: Prioritize bins that can fit the item closely
    # but not too closely (to avoid excessive fragmentation)
    
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask): #Check if any bin has enough space
      
        diffs = bins_remain_cap[fit_mask] - item
        
        #Reward small difference
        priorities[fit_mask] = np.exp(-diffs)
        
        #Penalize bins where the item fits too perfectly to avoid fragmentations.
        perfect_fit_mask = diffs < 0.1*item
        
        if np.any(perfect_fit_mask):
          priorities[fit_mask][perfect_fit_mask] = priorities[fit_mask][perfect_fit_mask]*0.5
        
    
    return priorities
```
