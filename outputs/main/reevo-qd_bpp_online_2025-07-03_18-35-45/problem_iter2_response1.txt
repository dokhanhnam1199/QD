```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority for bins that can fit the item
    can_fit = (bins_remain_cap - item) >= 0
    
    # Prioritize near-perfect fits within the feasible bins
    near_perfect = can_fit & (bins_remain_cap <= item * 1.1) # Tolerate some extra space
    priorities[near_perfect] = 100 / (np.abs(bins_remain_cap[near_perfect] - item) + 1e-6)

    # Moderate priority for other bins that can fit, scaled inversely with remaining capacity
    other_fit = can_fit & ~near_perfect
    priorities[other_fit] = 10 / (bins_remain_cap[other_fit] + 1e-6)  # Scale inversely with remaining capacity

    # Penalize bins that are too large but can still fit
    priorities[can_fit] -= (bins_remain_cap[can_fit] - item) * 0.1  # Smaller penalty

    # Set priority to -inf for bins that can't fit the item
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf
    
    return priorities
```
