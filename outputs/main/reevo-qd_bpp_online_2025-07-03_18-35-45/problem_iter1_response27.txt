```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities  # No bin can fit the item, return all zeros

    # 2. Remaining Capacity Heuristic (First Fit Decreasing-like)
    #   - Prioritize bins with capacity closest to item size (best fit)
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] = -capacity_diff[feasible_bins]

    # 3. Avoid Fragmentation (if possible)
    #   - Add a bonus if the item fills a significant portion of the bin
    fill_ratio = item / bins_remain_cap
    bonus_threshold = 0.8 # Parameter to be tuned. Higher value encourages nearly full bins
    bonus = np.where((feasible_bins) & (fill_ratio > bonus_threshold), fill_ratio, 0) 
    priorities += bonus

    # 4. Penalize almost full bins: encourages bins to fill at middle range.

    penalty_threshold = 0.95
    penalty = np.where((feasible_bins) & (bins_remain_cap/np.max(bins_remain_cap) > penalty_threshold), -bins_remain_cap, 0)
    priorities += penalty
    

    return priorities
```
