```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic component: Prefer bins with enough space
    # and penalize those that are too full or not suitable.
    suitable_bins = bins_remain_cap >= item
    priorities[suitable_bins] = bins_remain_cap[suitable_bins] - item

    # Give higher priority to bins where the item fits best, but not perfectly.
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[suitable_bins] = item / bins_remain_cap[suitable_bins]
    priorities[suitable_bins] = 1 - np.abs(fill_ratios[suitable_bins] - 0.8)

    # Very full bins are penalized even further.
    almost_full_bins = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[almost_full_bins] = -1000  # Large negative priority

    # Remove possibility of placing in full or overfull bins:
    invalid_bins = bins_remain_cap < 0
    priorities[invalid_bins] = -np.inf

    return priorities
```
