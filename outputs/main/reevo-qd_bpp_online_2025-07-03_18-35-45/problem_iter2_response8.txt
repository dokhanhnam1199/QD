```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for bins that can fit the item almost perfectly
    almost_full = (bins_remain_cap - item) >= 0
    priorities[almost_full] = 100 / (np.abs(bins_remain_cap[almost_full] - item) + 1e-6)  # Increased importance, added small number to avoid division by zero

    # Penalize bins that are too large, but less aggressively if they are close to full
    too_large = (bins_remain_cap - item) > 0
    penalty = (bins_remain_cap[too_large] - item) / bins_remain_cap[too_large]  # Penalty is proportional to wasted space
    priorities[too_large] -= penalty * 10  # Smaller penalty, scaled by remaining capacity

    # Set priority to -inf for bins that can't fit the item
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf

    return priorities
```
