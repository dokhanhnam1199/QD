```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Infeasible bins get negative infinity priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward near-perfect fits
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05
    priorities[near_perfect_fit] += 25  # Higher reward than v1

    # Target fill level reward (e.g., 70-95% full)
    target_fill_min = 0.7
    target_fill_max = 0.95
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 15  # Increased reward for target fill

    # Moderate penalty for larger bins (prefer smaller bins that can still fit)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.005  # Reduced penalty

    # Wasted space penalty: Penalize bins with large remaining capacity after placement. Increased penalty
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.05  # Increased waste penalty

    # Bonus for bins that are already relatively full
    already_full = bins_remain_cap < 0.5  # Bins with less than 0.5 remaining capacity
    priorities[already_full & feasible] += 5 # Prioritize filling these bins

    return priorities
```
