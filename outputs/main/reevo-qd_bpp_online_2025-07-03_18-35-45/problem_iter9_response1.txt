```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Near-perfect fit reward (even tighter tolerance)
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05  # Define "near" as within 0.05
    priorities[near_perfect_fit] += 20  # Higher reward for near-perfect

    # Target fill level reward (slightly narrower, higher target)
    target_fill_min = 0.75
    target_fill_max = 0.95
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 10  # Good reward for target fill

    # Proportional wasted space penalty (more sensitive)
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= (waste[waste_penalty_mask] / bins_remain_cap[waste_penalty_mask]) * 5 # Waste relative to bin size

    # Bin usage penalty (gentle encouragement to fill existing bins)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= 0.1 # Even gentler bin usage penalty
    
    return priorities
```
