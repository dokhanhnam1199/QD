```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, penalize bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Mark as infeasible

    # For feasible bins, calculate a score based on remaining capacity
    feasible_mask = ~infeasible_mask
    
    if np.any(feasible_mask):
        remaining_after_fit = bins_remain_cap[feasible_mask] - item
        
        # Give higher priority to bins that leave less space after fitting.
        # This encourages filling bins more completely. Add small constant to avoid zero division and give it some bias
        priorities[feasible_mask] = 1.0 / (remaining_after_fit + 0.0001)

        # Add bonus for almost full bins.  This helps to close bins when an item fits almost perfectly.
        almost_full_mask = (remaining_after_fit >= 0) & (remaining_after_fit < 0.1)  # Bins with < 0.1 remaining are considered "almost full"
        priorities[feasible_mask][almost_full_mask] += 10  # Substantially increase priority if bin is almost full.

    return priorities
```
