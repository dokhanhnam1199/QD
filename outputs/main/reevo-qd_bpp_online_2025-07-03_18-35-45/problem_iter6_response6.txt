```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount - Infeasible bins get negative infinity priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward near-perfect fits
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.1
    priorities[near_perfect_fit] += 10

    # Target fill level reward (e.g., 70-95% full after placing the item)
    target_fill_min = 0.7
    target_fill_max = 0.95
    remaining_after_fit = bins_remain_cap - item
    target_range = (remaining_after_fit >= 0) & (remaining_after_fit / bins_remain_cap >= target_fill_min) & (remaining_after_fit / bins_remain_cap <= target_fill_max)
    priorities[target_range] += 5

    # Wasted space penalty: Penalize bins with large remaining capacity after placement, but only if feasible
    waste = bins_remain_cap - item
    waste_penalty_mask = (waste > 0) & (bins_remain_cap >= item)
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.01

    # Smaller bins preferred if item can fit - adds a small reward
    feasible = bins_remain_cap >= item
    priorities[feasible] += (1 / bins_remain_cap[feasible]) * 0.5

    return priorities
```
