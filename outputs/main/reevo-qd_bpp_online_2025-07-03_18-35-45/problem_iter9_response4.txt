```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check - critical!
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward near-perfect fits (tighter tolerance)
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05 # Very tight tolerance
    priorities[near_perfect_fit] += 20  # Stronger reward

    # Target fill level reward (more restrictive)
    target_fill_min = 0.75 # Tighter fill range
    target_fill_max = 0.85 # Tighter fill range
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 10 # Increased reward

    # Soft penalty for larger bins (if there are options)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.002 # Reduced penalty

    # Waste penalty (proportional but still gentle)
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.005 # Reduced penalty, more nuanced

    # Reward bins with smaller remaining capacity AFTER packing (promotes filling existing bins)
    remaining_capacity = np.copy(bins_remain_cap)
    remaining_capacity[feasible] -= item
    remaining_capacity[~feasible] = np.inf # Make infeasible very high to avoid positive contribution

    priorities -= remaining_capacity * 0.001

    return priorities
```
