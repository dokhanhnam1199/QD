```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Basic priority for fitting

    # Give higher priority to bins where the remaining capacity after placing the item is small
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Ignore bins that can't fit

    priorities[can_fit] += 1.0 / (1e-6 + remaining_after_fit[can_fit]) # Higher prio if it perfectly fits

    # Prioritize bins that are relatively empty based on item size.
    priorities[can_fit] += item / bins_remain_cap[can_fit]

    # Prioritize based on "closeness" to perfect fit
    priorities[can_fit] += np.exp(-np.abs(bins_remain_cap[can_fit] - item) / item)
    
    # Penalize nearly full bins (reduces fragmentation) if the item fits.
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < (item * 1.25)) # e.g. 25% larger
    priorities[nearly_full] *= 1.2  # Increase the chance of using it

    # Extremely empty bins (First Fit Decreasing variant)
    super_empty = bins_remain_cap > (item * 2)
    priorities[super_empty] -=0.5 * (item / bins_remain_cap[super_empty])
    
    return priorities
```
