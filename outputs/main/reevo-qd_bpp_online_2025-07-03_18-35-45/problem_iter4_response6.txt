```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Constraint: Bin must be able to fit the item
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Infeasible assignments get -inf

    # Reward: Near-perfect fits get the highest priority
    almost_perfect = np.abs(bins_remain_cap - item) <= 0.05  # Tolerance of 0.05 (Reduced tolerance)
    priorities[almost_perfect & can_fit] = 100  # High reward

    # Reward: Good utilization (but not perfect)
    good_utilization = can_fit & ~almost_perfect
    utilization_ratio = item / bins_remain_cap[good_utilization]
    priorities[good_utilization] = 10 * utilization_ratio # Increased importance of utilization

    # Penalty: Excessive space is penalized
    excessive_space = (bins_remain_cap - item) > 0.25 # Reduced threshold for penalizing excessive space
    priorities[excessive_space & can_fit] -= 0.5 * (bins_remain_cap[excessive_space & can_fit] - item) # Increased penalty

    # Penalty: Larger bins are penalized (encourage filling smaller bins first)
    priorities[can_fit] -= 0.1 * bins_remain_cap[can_fit] # Increased the penalty to focus on small bins

    # Bonus for bins that are already partially full
    already_filled = bins_remain_cap < np.max(bins_remain_cap)
    priorities[already_filled & can_fit] += 1 # Small bonus to partially filled bins

    return priorities
```
