```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Near-perfect fit reward (tightened tolerance)
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05  # Tighter tolerance
    priorities[near_perfect_fit] += 15  # Increased reward

    # Target fill level reward (refined target)
    target_fill_min = 0.75
    target_fill_max = 0.95
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 7  # Moderate reward

    # Soft penalty for larger bins (that can still fit)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.003 # Reduced penalty magnitude

    # Wasted space penalty (proportional to item size, tighter control)
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= (waste[waste_penalty_mask] / item) * 2 # Proportional and refined factor.
    
    # Encourage packing items into bins that would become nearly full
    almost_full = (bins_remain_cap - item) <= 0.1 and feasible
    priorities[almost_full] += 10

    return priorities
```
