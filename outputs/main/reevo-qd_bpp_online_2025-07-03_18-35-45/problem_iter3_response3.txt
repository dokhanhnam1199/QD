```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Constraint: Infeasible assignments get -inf priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward near-perfect fits: Higher utilization is better
    almost_perfect = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.1)  #Allow slightly larger than perfect fit
    priorities[almost_perfect] = 1000  # High reward for good fit.

    # Target-oriented reward: Prioritize bins that are somewhat full
    somewhat_full = (bins_remain_cap > item + 0.1) & (bins_remain_cap <= 0.7) # Between item+0.1 and 0.7
    priorities[somewhat_full] = 500/(bins_remain_cap[somewhat_full] -item) #Prefer smaller remaining cap

    #Penalize Excessive Space
    excessive_space = (bins_remain_cap > item + 0.7)
    priorities[excessive_space] = -100*(bins_remain_cap[excessive_space] - item) #Heavier penalty for large space.
    return priorities
```
