```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = 1

    # Among valid bins, prioritize bins with tighter fit to avoid fragmentation.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += 1.0 / (remaining_after_fit + 0.0001) #add small value to avoid division by zero

    # Slightly prioritize bins with more capacity to potentially accomodate future larger items.
    priorities[valid_bins] += bins_remain_cap[valid_bins] / np.max(bins_remain_cap + 0.0001)
    
    # If no bin can accommodate the item, assign a very low priority
    if not np.any(valid_bins):
        priorities[:] = -1
        
    return priorities
```
