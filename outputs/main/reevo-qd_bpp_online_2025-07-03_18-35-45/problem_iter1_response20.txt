```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large enough bins get higher priority, penalized by wasted space
    # Use item size as penalty for large bins
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = bins_remain_cap[valid_bins] - item 
    
    # Normalize and prevent zero division (add small constant)
    if np.any(priorities > 0):
       priorities[priorities > 0] = priorities[priorities > 0] / np.max(priorities)
    
    # Small bins get negative priority based on how much exceeded.
    # So, the smaller the exceedence, the smaller the negative priority (better).
    invalid_bins = ~valid_bins
    exceedence = item - bins_remain_cap[invalid_bins]
    priorities[invalid_bins] = - exceedence
    
    if np.any(priorities < 0):
        priorities[priorities < 0] = priorities[priorities < 0] / np.max(np.abs(priorities))

    return priorities
```
