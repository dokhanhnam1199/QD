```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility check (Critical)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Very Near-Perfect Fit Reward (Highest Priority)
    very_near_perfect = np.abs(bins_remain_cap - item) <= 0.02
    priorities[very_near_perfect] += 50

    # Target Fill Level Reward (Tight Range, High Reward)
    target_fill_min = 0.80
    target_fill_max = 0.90
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 30

    # Encourage filling bins, penalize remaining capacity
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.005

    # Wasted Space Penalty (Slightly stronger than v1)
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.02

    # Penalize bins that are just big enough (less desirable, but not as bad as huge waste)
    just_fits = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.05) # Tighter just fit
    priorities[just_fits] -= 1

    return priorities
```
