```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Assign a very low priority to bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. Remaining capacity: Prioritize bins that leave less wasted space.
    #    Calculate the wasted space after adding the item.
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Assign infinite waste to infeasible bins that passed the previous check due to numerical errors

    # 3. Fill percentage: Prefer bins that are already relatively full to promote consolidation
    fill_percentage = (bins_remain_cap - wasted_space) / (bins_remain_cap + item - wasted_space) # Original bin capacity
    fill_percentage[infeasible_mask] = -np.inf

    # Combine criteria to create priority score
    priorities = -wasted_space + 2 * fill_percentage  # Balance waste and fill

    return priorities
```
