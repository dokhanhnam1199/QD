```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Disqualify bins that are too small.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # 2. Encourage bins that can accommodate the item well (high fill rate, but not too high):
    fill_ratios = item / bins_remain_cap
    
    # 3. Apply a function to the fill ratios to create a preference:
    #   - Bins that perfectly fit the item should have the highest priority
    #   - Bins where the item is too small or too big get lower priority

    valid_bins = ~infeasible_bins
    if np.any(valid_bins):
        
        # Option 1: Inverted absolute difference from an ideal ratio (e.g., 0.9)
        ideal_ratio = 0.9
        priorities[valid_bins] = -np.abs(fill_ratios[valid_bins] - ideal_ratio)

        # Option 2:  Sigmoid function centered around an ideal ratio
        # This creates a smooth, peaked priority around the ideal ratio
        # slope = 10  # Adjust steepness as needed
        # priorities[valid_bins] = 1 / (1 + np.exp(-slope * (fill_ratios[valid_bins] - ideal_ratio)))

        # Option 3: Penalize waste more for near full bins:
        #waste = bins_remain_cap - item
        #priorities[valid_bins] = bins_remain_cap[valid_bins] / (waste[valid_bins] + 1e-9) # Avoid divide by zero

        # Option 4: Reward almost full and full bins
        #almost_full = (bins_remain_cap - item) < 0.1  # or a small value
        #priorities[almost_full] = 10 # high reward
        #priorities[valid_bins] = np.where(almost_full[valid_bins],10,priorities[valid_bins]) # high reward

    return priorities
```
