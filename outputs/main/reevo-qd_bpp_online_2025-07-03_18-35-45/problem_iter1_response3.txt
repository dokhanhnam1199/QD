```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize with a low default priority.
    priorities[:] = -1.0
    
    # Find bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):
        # Calculate remaining capacity after placing the item.
        remaining_capacity = bins_remain_cap[feasible_bins] - item
        
        # Prioritize bins with smaller remaining capacity (First-Fit Decreasing principle).
        priorities[feasible_bins] = 1.0 / (remaining_capacity + 0.0001) # Avoid division by zero
        
        # Prioritize bins that are closest to being full after packing the item
        priorities[feasible_bins] = 1.0 - (remaining_capacity / bins_remain_cap[feasible_bins])

        # Adjust priorities based on how well the item "fits"
        fit_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] =  fit_ratios  # The closer to filling, the better
        
        # Add a bonus for almost full bins
        almost_full = remaining_capacity < 0.1  # Define "almost full" threshold.
        priorities[feasible_bins][almost_full] += 2.0 # Add a larger bonus if close to full.

        # Ensure no negative priorities exist.
        priorities = np.maximum(priorities, 0.0)

        # Scale between 0 and 1 for all feasible bins
        max_priority = np.max(priorities[feasible_bins])
        if max_priority > 0:
            priorities[feasible_bins] /= max_priority

    return priorities
```
