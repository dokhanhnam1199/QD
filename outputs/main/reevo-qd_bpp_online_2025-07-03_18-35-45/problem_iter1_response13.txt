```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Disqualify bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Assign lowest priority to infeasible bins
    
    # 2. Encourage tight packing (First-Fit Decreasing heuristic influence)
    # Prioritize bins where the item fills a large percentage of the remaining capacity
    fill_ratios = item / bins_remain_cap
    fill_ratios[infeasible_mask] = 0  # Ensure infeasible bins have no fill ratio
    priorities += fill_ratios

    # 3. Penalize bins with small remaining capacity AFTER packing (to avoid fragmentation)
    remaining_after_packing = bins_remain_cap - item
    remaining_after_packing[infeasible_mask] = np.inf  # Ensure infeasible bins don't affect penalization
    fragmentation_penalty = -np.abs(remaining_after_packing) / np.max(bins_remain_cap)  # Normalize by maximum bin capacity
    priorities += fragmentation_penalty
    
    # 4. Give slight priority to emptier bins (balance between tight packing and reducing total bin count)
    # Helps prevent overuse of nearly full bins when other bins are much more empty.
    capacity_score = bins_remain_cap / np.max(bins_remain_cap) # normalize to avoid large bias.
    priorities += 0.1 * capacity_score  # weight this less than other factors
    
    return priorities
```
