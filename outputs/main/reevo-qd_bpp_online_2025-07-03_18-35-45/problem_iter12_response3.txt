```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility check (highest priority)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Perfect fit reward (highest positive priority)
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 20

    # Near-perfect fit reward (high priority)
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05
    priorities[near_perfect_fit] += 15

    # Target fill level reward (high-medium priority)
    target_fill_min = 0.7
    target_fill_max = 0.95
    fill_level = (bins_remain_cap - item) / bins_remain_cap
    target_range = (fill_level >= target_fill_min) & (fill_level <= target_fill_max)
    priorities[target_range] += 10

    # Moderate fill reward
    moderate_fill_min = 0.5
    moderate_fill_max = 0.7
    moderate_fill = (bins_remain_cap - item) / bins_remain_cap
    moderate_range = (moderate_fill >= moderate_fill_min) & (moderate_fill < moderate_fill_max)
    priorities[moderate_range] += 5

    # Smallest feasible bin reward (medium-low priority)
    feasible = bins_remain_cap >= item
    if np.any(feasible):
        smallest_feasible_bin = np.argmin(bins_remain_cap[feasible])
        # Find the index in the original array
        indices = np.where(feasible)[0]
        smallest_feasible_index = indices[smallest_feasible_bin]
        priorities[smallest_feasible_index] += 3

    # Penalty for wasted space (low priority)
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.02

    # Soft penalty for large remaining capacity (lowest priority)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.005

    return priorities
```
