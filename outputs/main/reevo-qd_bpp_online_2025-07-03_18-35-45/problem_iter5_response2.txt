```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Reward near-perfect fits
    almost_full = (bins_remain_cap >= item)
    close_to_full = np.abs(bins_remain_cap - item)
    priorities[almost_full] += 10 / (close_to_full[almost_full] + 0.01)  # Higher score for better fit

    # Target fill level reward (e.g., 70-90%)
    target_fill_min = 0.7
    target_fill_max = 0.9
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_bins = (target_fill >= target_fill_min) & (target_fill <= target_fill_max) & (bins_remain_cap >= item)
    priorities[target_bins] += 5

    # Softly penalize larger bins and wasted space
    feasible = (bins_remain_cap >= item)
    waste = bins_remain_cap - item
    priorities[feasible] -= waste[feasible] * 0.1  # Soft penalty based on wasted space
    priorities[feasible] -= bins_remain_cap[feasible] * 0.01 # Penalize larger bins

    # Infeasible assignment penalty
    infeasible = (bins_remain_cap < item)
    priorities[infeasible] = -np.inf

    return priorities
```
