```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough to fit: higher priority if it almost fills bin.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1 / (1e-9 + priorities[fit_mask]) # To be optimized later choose bins almost full

    # Small enough to fill to almost full bin: lower if remaining is large

    # Not enough to fit gets -inf priority.
    priorities[~fit_mask] = -np.inf

    return priorities
```
