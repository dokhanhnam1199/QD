```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for bins that can fit the item
    can_fit = (bins_remain_cap - item) >= 0
    
    # Reward bins that are filled efficiently (higher fill ratio)
    fill_ratio = item / bins_remain_cap[can_fit] if np.any(can_fit) else np.array([])
    if np.any(can_fit):
        priorities[can_fit] = fill_ratio * 10  # Scale the fill ratio to give it significant weight

    # Give a bonus to bins that result in a fill level close to a target
    target_fill = 0.8  # Aim for bins to be about 80% full
    if np.any(can_fit):
        target_proximity = np.abs(fill_ratio - target_fill)
        priorities[can_fit] -= target_proximity * 5 # Subtract a penalty based on deviation from target fill

    # Penalize bins with too much remaining capacity after placing the item
    if np.any(can_fit):
        remaining_capacity = bins_remain_cap[can_fit] - item
        priorities[can_fit] -= remaining_capacity * 0.5  # Subtract a penalty proportional to remaining capacity

    # Give a higher priority to bins close to full after the item is added.
    if np.any(can_fit):
        post_fill_level = (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit]
        fullness_priority = 1 - post_fill_level
        priorities[can_fit] += fullness_priority * 2

    # Set priority to -inf for bins that can't fit the item
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf

    return priorities
```
