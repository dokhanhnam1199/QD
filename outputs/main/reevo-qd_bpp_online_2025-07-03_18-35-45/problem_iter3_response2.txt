```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Constraint: Remove infeasible bins immediately
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward: Near-perfect fit
    near_perfect = np.abs(bins_remain_cap - item) <= 0.1  # Define 'near' as a tolerance
    priorities[near_perfect] += 10  # Substantial reward

    # Reward: High bin utilization (fill as much as possible)
    feasible = bins_remain_cap >= item
    priorities[feasible] += (item / bins_remain_cap[feasible]) * 5 #Scale reward by item size

    # Penalty: Excessive space (avoid creating very empty bins)
    excessive_space = (bins_remain_cap - item) > 0.5  # Define 'excessive'
    priorities[excessive_space] -= 2  # Moderate penalty

    # Penalty: Large bins (prefer filling smaller bins, avoid wasting space)
    priorities -= bins_remain_cap * 0.1 # Linear penalty based on remaining capacity
    
    # Bonus: Slightly prioritize bins that are already somewhat full
    somewhat_full = bins_remain_cap < 1 #assuming bin capacity of 1
    priorities[somewhat_full] += 1

    return priorities
```
