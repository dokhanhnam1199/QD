```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item almost perfectly
    can_fit = (bins_remain_cap - item) >= 0
    almost_full = can_fit & (bins_remain_cap <= item * 1.1) #within 10% of item size
    priorities[almost_full] = 100 / (np.abs(bins_remain_cap[almost_full] - item) + 1e-6)  # Add a small number to avoid division by zero

    # Moderately high priority for bins that can fit, but not perfectly
    fits = (bins_remain_cap - item) > 0
    fits = fits & (~almost_full)
    priorities[fits] = 1 / (bins_remain_cap[fits] - item + 1)
    
    # Heavily penalize bins that can't fit the item
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf
    
    return priorities
```
