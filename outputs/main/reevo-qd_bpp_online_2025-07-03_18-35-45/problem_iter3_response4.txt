```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Constraint: Infeasible bins get -inf priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward near-perfect fits, higher utilization
    almost_perfect_fit = np.abs(bins_remain_cap - item) < 0.1  # Target a gap of 0.1
    priorities[almost_perfect_fit] += 10  # Substantial bonus for nearly perfect fits

    # Reward good utilization more generally, but less than near-perfect
    feasible = bins_remain_cap >= item
    utilization = item / (bins_remain_cap[feasible] + item)
    priorities[feasible] += utilization # Utilization factor
    
    # Penalize larger bins more harshly if item fits
    fits = bins_remain_cap >= item
    priorities[fits] -= bins_remain_cap[fits] * 0.005 # Minor penalty based on bin size

    # Penalize excessive space, but only if it fits
    excessive_space = (bins_remain_cap - item) > 0.5
    priorities[excessive_space & fits] -= (bins_remain_cap[excessive_space & fits] - item) * 0.1  # More significant penalty

    return priorities
```
