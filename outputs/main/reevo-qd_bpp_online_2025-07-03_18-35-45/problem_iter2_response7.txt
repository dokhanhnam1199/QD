```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item

    # Very high priority for bins that can fit the item well (minimize wasted space)
    can_fit = remaining_capacity >= 0
    priorities[can_fit] = 1 / (remaining_capacity[can_fit] + 1e-6)  # Minimize remaining space

    # Boost priority for bins that result in high bin utilization
    utilization = item / (bins_remain_cap[can_fit] + item) # bin utilization if added to bin
    priorities[can_fit] += utilization * 5  # Scale utilization boost

    # Moderate penalty for bins that are much larger than the item
    too_large = remaining_capacity > item * 0.5 # remaining cap is larger than half of item's size
    priorities[too_large] -= remaining_capacity[too_large] * 0.1

    # Infeasible bins get a large negative priority
    cannot_fit = remaining_capacity < 0
    priorities[cannot_fit] = -np.inf

    return priorities
```
