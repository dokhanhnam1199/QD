```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_indices = np.where(remaining_after_add >= 0)[0]
    priorities[fit_indices] = 1

    # Prioritize bins with least remaining capacity after add
    priorities[fit_indices] += 1 / (remaining_after_add[fit_indices] + 1e-6)  # Avoid division by zero

    #Penalize bins if the item does not fit
    no_fit_indices = np.where(remaining_after_add < 0)[0]
    priorities[no_fit_indices] = -1e6 #Large negative number, avoid using these

    # Boost bins if nearly full before placement
    nearly_full_bins = np.where(bins_remain_cap < 2 * item)[0]
    priorities[nearly_full_bins] += 0.5 * priorities[nearly_full_bins] # small boost

    return priorities
```
