```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: bins that cannot fit the item get a very low priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Near-perfect fit reward: prioritize bins where the remaining space after packing is small
    feasible = bins_remain_cap >= item
    remaining_space = bins_remain_cap[feasible] - item
    priorities[feasible] = np.exp(-remaining_space * 10)  # Exponential decay for remaining space

    # Target fill level reward: give a boost to bins that, after packing, are close to a target fill level (e.g., 80%)
    target_fill = 0.8
    bin_size = 1.0  # Assuming bin size is 1.0
    target_capacity = target_fill * bin_size
    
    fill_level_diff = np.abs((bins_remain_cap[feasible] - item) - (bin_size - target_capacity))
    priorities[feasible] += np.exp(-fill_level_diff * 5)

    # Soft penalty for larger bins: slightly discourage using very large bins if smaller ones are available
    priorities[feasible] -= bins_remain_cap[feasible] * 0.01

    # Soft penalty for wasted space: discourage creating a lot of wasted space in bins
    priorities[feasible] -= remaining_space * 0.05
    
    return priorities
```
