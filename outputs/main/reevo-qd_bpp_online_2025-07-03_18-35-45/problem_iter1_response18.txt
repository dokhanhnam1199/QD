```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Higher priority for bins that can accommodate the item
            space_left = cap - item
            priorities[i] = (item / cap) * (1 / (space_left + 0.0001)) #Favor bins with small remaining space after placing item

            # Bonus for almost full bins before placing
            priorities[i] += (cap / 100) #Favor almost full bins. (Assume bin capacity <= 100)

        else:
            # Very low priority for bins that can't accommodate the item
            priorities[i] = -1000  # Or some very low value

    return priorities
```
