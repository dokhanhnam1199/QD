```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Assign -inf priority to bins that can't fit the item.
    priorities[bins_remain_cap < item] = -np.inf

    # 2. Remaining Capacity: Prioritize bins with smaller remaining capacity after packing the item.
    #    This encourages filling bins as much as possible before opening new ones.
    remaining_after_pack = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = -remaining_after_pack[bins_remain_cap >= item]

    # 3. Avoidance of fragmentation: slightly penalize bins that would have a very small remaining capacity
    fragmentation_threshold = 0.1  # Define a threshold for small remaining capacity (e.g., 10% of bin size)

    # Calculate fragmentation score: Higher score for bins that would result in smaller remaining capacity.
    fragmentation_score = np.where(
        (remaining_after_pack > 0) & (remaining_after_pack < fragmentation_threshold),
        -10 * (fragmentation_threshold - remaining_after_pack),  # Penalize with a magnitude relative to remaining capacity
        0
    )

    priorities += fragmentation_score
    return priorities
```
