```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasible bins: Assign -inf priority
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf

    # 2. Near-perfect fit: Assign high priority based on remaining space.
    #    Use a value function that decreases as the remaining space increases.
    can_fit = (bins_remain_cap - item) >= 0
    remaining_space = bins_remain_cap[can_fit] - item
    
    # Value function:  Penalize large remaining space
    priorities[can_fit] = np.exp(-remaining_space * 5)  # Higher exponent means sharper drop-off

    # 3. Bins where item fits but leaves a lot of space: Slight penalty
    # Adjusted penalty based on how much space is wasted.

    wasted_space_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    too_large = (bins_remain_cap - item) > 0
    wasted_space = bins_remain_cap[too_large] - item
    wasted_space_penalty[too_large] = wasted_space * 0.1
    priorities -= wasted_space_penalty
    
    return priorities
```
