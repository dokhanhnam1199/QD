{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Very high priority for bins that can fit the item almost perfectly\n    almost_full = (bins_remain_cap - item) >= 0\n    priorities[almost_full] = 1 / np.abs(bins_remain_cap[almost_full] - item + 1e-6)  # Add a small number to avoid division by zero\n    \n    # Slightly penalize bins that are too large\n    too_large = (bins_remain_cap - item) > 0\n    priorities[too_large] -= (bins_remain_cap[too_large] - item) * 0.01  # Smaller penalty\n\n    # Set priority to -inf for bins that can't fit the item\n    cannot_fit = (bins_remain_cap - item) < 0\n    priorities[cannot_fit] = -np.inf\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05  # Tighter definition of \"near\"\n    priorities[near_perfect_fit] += 20  # Substantial reward\n\n    # Target fill level reward (e.g., 70-95% full)\n    target_fill_min = 0.7\n    target_fill_max = 0.95\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 10  # Moderate reward for target fill\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.002 # Smaller penalty relative to bin size\n\n    # Wasted space penalty: Penalize bins with large remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.2  # Only penalize if waste is more than 20% of bin size\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.005  # Reduced waste penalty\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, reward near-perfect and target fills, and penalize wasted space more effectively.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}