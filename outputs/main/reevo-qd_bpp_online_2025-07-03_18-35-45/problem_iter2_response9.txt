```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item
    can_fit = (bins_remain_cap - item) >= 0
    
    # Prioritize bins that result in less remaining space
    remaining_space = bins_remain_cap[can_fit] - item
    priorities[can_fit] = 1 / (remaining_space + 1e-6)  # Add a small number to avoid division by zero

    # Penalize bins with large remaining capacity after placing the item
    too_large = (bins_remain_cap - item) > 0
    priorities[too_large] -= (bins_remain_cap[too_large] - item) * 0.001 # Reduced penalty further

    # Heavily penalize bins that can't fit the item
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf
    
    return priorities
```
