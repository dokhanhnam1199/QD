```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing heuristic improvement: Try to find a bin where item fits snugly.
    fit_indices = bins_remain_cap >= item
    if np.any(fit_indices):
        # Prioritize bins where the item fits but with least remaining space
        remaining_space = bins_remain_cap[fit_indices] - item
        priorities[fit_indices] = 1.0 / (remaining_space + 1e-9)  # Avoid division by zero
        
        # Optionally, further prioritize nearly-full bins.  Scale inversely to the *square* of remaining space.  Emphasizes very tight fits.
        priorities[fit_indices] += 1.0 / ((remaining_space + 1e-9)**2 + 1e-9)

    # Give bins that can't fit the item a very negative priority
    priorities[bins_remain_cap < item] = -1e9  # Extremely low priority to bins that cannot fit

    # Additional heuristic: Prefer bins that are already somewhat full
    bin_utilization = 1.0 - (bins_remain_cap / np.max(bins_remain_cap)) # normalized

    priorities += bin_utilization * 0.1 # Add to existing priority, small impact

    return priorities
```
