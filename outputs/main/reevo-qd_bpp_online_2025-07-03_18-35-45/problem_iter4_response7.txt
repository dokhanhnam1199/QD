```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit = (bins_remain_cap - item) >= 0

    # Very high priority for bins that can fit the item
    priorities[can_fit] += 100  # A large base priority for fitting

    # Reward bins that are filled efficiently (higher fill ratio), but only if they fit
    fill_ratio = item / bins_remain_cap[can_fit]
    priorities[can_fit] += fill_ratio * 50  # Significant weight to fill ratio

    # Give a bonus to bins that result in a fill level close to a target
    target_fill = 0.8  # Aim for bins to be about 80% full
    target_proximity = np.abs(fill_ratio - target_fill)
    priorities[can_fit] -= target_proximity * 20  # Moderate penalty for deviation from target

    # Penalize bins with too much remaining capacity after placing the item, but scale the penalty
    remaining_capacity = bins_remain_cap[can_fit] - item
    capacity_penalty = np.clip(remaining_capacity, 0, item) # Penalize only up to item size
    priorities[can_fit] -= capacity_penalty * 10  # Adjust penalty strength

    # Introduce a tie-breaker: slightly prefer bins with lower remaining capacity
    priorities[can_fit] -= bins_remain_cap[can_fit] * 0.1

    # Set priority to -inf for bins that can't fit the item
    cannot_fit = (bins_remain_cap - item) < 0
    priorities[cannot_fit] = -np.inf

    return priorities
```
