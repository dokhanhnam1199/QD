```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item almost perfectly
    can_fit = bins_remain_cap >= item
    almost_full = can_fit & (bins_remain_cap <= item * 1.1) # Within 10% of item size
    
    if np.any(almost_full):
        priorities[almost_full] = 1 / (np.abs(bins_remain_cap[almost_full] - item) + 1e-6) 
    elif np.any(can_fit): #If no almost full bin, select any bin that can fit
        priorities[can_fit] = 1 / (bins_remain_cap[can_fit] + 1e-6) #Prioritize smaller remaining capacity
    
    # Slightly penalize bins that are too large, but only if it can fit.
    too_large = can_fit & ~almost_full
    priorities[too_large] -= (bins_remain_cap[too_large] - item) * 0.001  # Smaller penalty
        
    # Set priority to -inf for bins that can't fit the item
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf
    
    return priorities
```
