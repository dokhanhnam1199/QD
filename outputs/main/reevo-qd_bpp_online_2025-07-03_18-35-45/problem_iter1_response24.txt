```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Eliminate bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Assign lowest priority to infeasible bins

    # 2. Best Fit Criterion: Prefer bins with minimal remaining capacity AFTER placing the item. Avoid fragmentation.
    remaining_capacities_after_placement = bins_remain_cap - item
    
    # Prioritize smaller remaining capacities, but only if they are feasible.
    feasible_mask = ~infeasible_mask
    priorities[feasible_mask] = -np.abs(remaining_capacities_after_placement[feasible_mask]) # Negate for higher priority with smaller remainder. Use absolute value to avoid giving bins with lots of capacity unnecessarily higher values.
    
    # 3. Secondary Criterion: If best-fit is similar among several bins, prioritize partially filled bins to utilize them further.  Helps with even distribution.  This combats the empty-bins problem.
    partially_filled_mask = (bins_remain_cap > 0) & (bins_remain_cap < 1) & feasible_mask #Assume bin capacity is 1. Also needs to be feasible to be considered.
    priorities[partially_filled_mask] += 0.1 # Boost priority slightly.

    # 4. Small item adjustment: If the item is small (less than 0.1 capacity), prefer filling partially filled bins even more
    if item < 0.1:
       priorities[partially_filled_mask] += 0.2

    # 5. Avoid creating almost empty bins. if there is bins with remaining capacity <0.1 and greater than 0, give low priority

    almost_empty_mask = (bins_remain_cap < 0.1) & (bins_remain_cap > 0) & feasible_mask

    priorities[almost_empty_mask] -= 0.05
    
    return priorities
```
