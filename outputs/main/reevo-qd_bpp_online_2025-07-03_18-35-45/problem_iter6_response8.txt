```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility check (most important)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Perfect Fit Bonus
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 20

    # Near-Perfect Fit Bonus
    near_perfect_fit = (np.abs(bins_remain_cap - item) <= 0.05) & (~infeasible)
    priorities[near_perfect_fit] += 15

    # Target Fill Range
    target_fill_min = 0.7
    target_fill_max = 0.95
    target_fill = (bins_remain_cap - item) / np.max([bins_remain_cap, np.ones_like(bins_remain_cap)*1e-9], axis=0) # prevent division by zero if bin is empty
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max) & (~infeasible)
    priorities[target_range] += 10

    # Prioritize bins that minimize waste but are still reasonably full
    waste = bins_remain_cap - item
    feasible = bins_remain_cap >= item
    waste_penalty = waste * 0.1  # Higher waste penalty
    priorities[feasible] -= waste_penalty[feasible]

    # Small penalty for using bins with large remaining capacity to encourage filling smaller bins first
    priorities[feasible] -= bins_remain_cap[feasible] * 0.001

    return priorities
```
