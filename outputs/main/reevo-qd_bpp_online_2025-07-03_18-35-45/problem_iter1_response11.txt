```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Rule out bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority
    
    # 2. Remaining capacity after placement (higher is worse; try to fill bins)
    remaining_after_placement = bins_remain_cap - item
    
    # 3. Avoidance of tiny remaining capacity (fragmentation)
    tiny_remaining = (remaining_after_placement > 0) & (remaining_after_placement < 0.1)
    priorities[tiny_remaining] -= 10 # Penalize fragmentation
    
    # 4. Reward bins closest to completely filled
    fill_ratio = item / bins_remain_cap
    valid_fill_ratio = fill_ratio[~infeasible_bins]
    priorities[~infeasible_bins] = np.clip(valid_fill_ratio * 10, 0, 10)  # Scaled and clipped to avoid extreme values

    # 5. Prioritize bins that are almost full
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 1.1 * item)
    priorities[almost_full] += 5
    
    return priorities
```
