```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item almost perfectly
    can_fit = bins_remain_cap >= item
    almost_full = can_fit & (bins_remain_cap <= item * 1.1) # Up to 10% larger
    priorities[almost_full] = 10 / (bins_remain_cap[almost_full] - item + 1e-6)  # Add a small number to avoid division by zero
    
    # Moderate priority for bins that can fit, but are not close to full
    reasonable_fit = can_fit & ~almost_full
    priorities[reasonable_fit] = 1 / (bins_remain_cap[reasonable_fit] + 1e-6)

    # Penalize bins that are too large, but still usable
    # priorities[can_fit] -= (bins_remain_cap[can_fit] - item) * 0.001

    # Set priority to -inf for bins that can't fit the item
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf
    
    return priorities
```
