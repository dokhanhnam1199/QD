```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount: Infeasible bins get negative infinity.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Target fill level reward: Prioritize bins that result in a good fill.
    target_fill_min = 0.7
    target_fill_max = 0.9
    remaining_after_fit = bins_remain_cap - item
    feasible = bins_remain_cap >= item
    target_range = feasible & (remaining_after_fit / bins_remain_cap >= target_fill_min) & (remaining_after_fit / bins_remain_cap <= target_fill_max)
    priorities[target_range] += 10

    # Near-perfect fit bonus: Even better if it's a near-perfect fit within the target range
    near_perfect_fit_threshold = 0.1
    near_perfect = feasible & (np.abs(remaining_after_fit) <= near_perfect_fit_threshold)
    priorities[near_perfect] += 5

    # Wasted space penalty: Penalize bins with large remaining capacity.  Scale the penalty by remaining capacity
    waste_penalty_factor = 0.05
    waste = remaining_after_fit[feasible]
    priorities[feasible] -= waste * waste_penalty_factor

    # Small bin preference: Preferentially fill smaller bins among those that can fit the item to avoid fragmentation.
    small_bin_bonus_factor = 0.01
    priorities[feasible] += (1 / bins_remain_cap[feasible]) * small_bin_bonus_factor # Slightly favor smaller bins

    return priorities
```
