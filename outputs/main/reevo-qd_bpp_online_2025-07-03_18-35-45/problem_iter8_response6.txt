```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Reward near-perfect fits
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.03  # Even tighter definition of "near"
    priorities[near_perfect_fit] += 30  # Increased reward

    # Target fill level reward (e.g., 75-95% full)
    target_fill_min = 0.75
    target_fill_max = 0.95
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 15  # Slightly higher reward for target fill

    # Soft penalty for larger bins (prefer smaller bins that can still fit)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.001  # Even smaller penalty

    # Wasted space penalty: Penalize bins with large remaining capacity after placement, but only if above a threshold.
    waste = bins_remain_cap - item
    waste_threshold = 0.25  # Increased waste threshold
    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.003  # Even more reduced waste penalty

    # Additional heuristic: Favor bins that are already somewhat full
    already_full_threshold = 0.3  # Bins that are at least 30% full
    already_full = (bins_remain_cap / np.max(bins_remain_cap)) <= (1 - already_full_threshold)  # Assuming all bins have same max capacity (max(bins_remain_cap) = bin_size)
    priorities[already_full & feasible] += 5

    return priorities
```
