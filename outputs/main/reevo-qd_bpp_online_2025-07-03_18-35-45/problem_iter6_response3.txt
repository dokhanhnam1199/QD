```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins
    
    feasible = bins_remain_cap >= item

    if np.any(feasible): # only apply the other rules if there are feasible bins
        # Reward near-perfect fits
        near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.1
        priorities[near_perfect_fit] += 10

        # Target fill level reward (e.g., 70-90% full)
        target_fill_min = 0.7
        target_fill_max = 0.9
        target_fill = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
        priorities[feasible][target_range] += 5

        # Wasted space penalty: Penalize bins with large remaining capacity after placement
        waste = bins_remain_cap[feasible] - item
        waste_penalty = waste * 0.01
        priorities[feasible] -= waste_penalty


        # Soft penalty for larger bins (prefer smaller bins that can still fit)
        priorities[feasible] -= bins_remain_cap[feasible] * 0.005

    return priorities
```
