```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # If the item fits perfectly, assign highest priority
    perfect_fit = bins_remain_cap == item
    priorities[perfect_fit] = np.inf

    # Otherwise, prioritize bins with smallest remaining capacity greater than item
    # This encourages filling bins to near capacity
    non_perfect_fit = (bins_remain_cap > item) & (~perfect_fit)
    priorities[non_perfect_fit] = 1 / (bins_remain_cap[non_perfect_fit] - item)

    # Add a small randomness to break ties, which may allow exploration and prevent local optima
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
