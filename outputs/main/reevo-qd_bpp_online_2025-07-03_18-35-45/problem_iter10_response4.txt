```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Reward near-perfect fits (remaining capacity close to zero)
    near_perfect_fit_threshold = 0.05
    near_perfect_fit = np.abs(bins_remain_cap - item) <= near_perfect_fit_threshold
    priorities[near_perfect_fit] += 30  # Substantial reward

    # Target fill level reward (e.g., 70-95% full)
    target_fill_min = 0.7
    target_fill_max = 0.95
    remaining_capacity = bins_remain_cap - item
    fill_levels = np.where(bins_remain_cap > 0, (bins_remain_cap - remaining_capacity) / bins_remain_cap, 0)  # Avoid division by zero
    target_range = (fill_levels >= target_fill_min) & (fill_levels <= target_fill_max) & (bins_remain_cap >= item) #ensure bin is feasible
    priorities[target_range] += 15  # Moderate reward for target fill

    # Wasted space penalty: Penalize bins with large remaining capacity after placement
    waste_factor = 0.1 #adjust wasted space penalty
    waste = bins_remain_cap - item
    waste_penalty_mask = (waste > 0) & (bins_remain_cap >= item) #ensure bin is feasible

    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * waste_factor

    # Soft penalty for larger bins (prefer smaller bins that can still fit), only when target fill not achieved
    feasible = bins_remain_cap >= item
    larger_bin_penalty_factor = 0.005
    priorities[feasible & ~target_range] -= bins_remain_cap[feasible & ~target_range] * larger_bin_penalty_factor # Smaller penalty if target range is achieved

    return priorities
```
