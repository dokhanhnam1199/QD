```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic-inspired priority
    # Prioritize bins that can accommodate the item without too much waste.
    # Avoid bins that are almost full, and heavily penalize bins that are too small.

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
        else:
            # Calculate the wasted space if we put the item in this bin
            waste = cap - item

            # Assign priority based on waste. Smaller waste is better
            # But prioritize bins that can fit the item relatively well, but not perfectly.
            if waste == 0:
              priorities[i] = 0.5 # perfect fit but slightly lower. avoid filling all bins completely first
            else:
              priorities[i] = 1/(waste + 0.00001) # avoid division by zero
              # Scale the priority based on how much of the bin's capacity the item uses.
              priorities[i] *= (item / cap)

    return priorities
```
