```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for bins that can fit the item almost perfectly.
    # The closer the fit, the higher the priority. Use a reciprocal function.
    can_fit = bins_remain_cap >= item
    almost_perfect = can_fit
    
    fit_diff = bins_remain_cap[almost_perfect] - item
    priorities[almost_perfect] = 1.0 / (fit_diff + 1e-9) #Adding a small number to avoid division by zero
    
    # Penalize larger bins moderately, but only if they can fit the item. The larger, the more penalty.
    too_large = can_fit
    penalty = (bins_remain_cap[too_large] - item) * 0.01
    priorities[too_large] -= penalty
    
    # Exclude bins that cannot fit the item by assigning a very low priority (-inf).
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf
    
    # Normalize to make result more stable.
    max_priority = np.max(priorities[priorities != -np.inf], initial=0)
    if max_priority > 0:
        priorities[priorities != -np.inf] /= max_priority
    
    return priorities
```
