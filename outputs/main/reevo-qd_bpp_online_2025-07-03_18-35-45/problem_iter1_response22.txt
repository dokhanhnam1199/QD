```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is viable if it can fit the item
    viable_bins = bins_remain_cap >= item
    
    # If no bin can fit the item, return an array of -inf, except for the bin with the most remaining capacity, which has a priority of 0.
    if not np.any(viable_bins):
        priorities = np.full_like(bins_remain_cap, -np.inf)
        priorities[np.argmax(bins_remain_cap)] = 0
        return priorities

    # Calculate the waste if the item is placed in each viable bin
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf #set infeasible wastes to inf to penalize

    # Prioritize bins with less waste. Use a negative waste to convert to priority. Add a bonus for being viable
    priorities = -waste + 10 * viable_bins
    

    # Slightly prioritize bins that are closer to full after packing (First-Fit-Decreasing heuristic idea)
    fill_ratio = (item) / (bins_remain_cap + 1e-6) # Avoid division by zero
    priorities = priorities + fill_ratio*10


    # Prioritize bins with a remainder as close as possible to some fraction of the item size to try to set up future packing possibilities
    for fraction in [0.25, 0.5, 0.75]:
        target_remainder = item * fraction
        remainder_diff = np.abs(waste - target_remainder)
        priorities = priorities - remainder_diff * 0.1

    # Very high priority to exact fit
    exact_fit = waste == 0
    priorities = priorities + exact_fit * 100

    return priorities
```
