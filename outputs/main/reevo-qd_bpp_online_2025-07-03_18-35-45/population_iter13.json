[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Very high priority for bins that can fit the item almost perfectly\n    almost_full = (bins_remain_cap - item) >= 0\n    priorities[almost_full] = 1 / np.abs(bins_remain_cap[almost_full] - item + 1e-6)  # Add a small number to avoid division by zero\n    \n    # Slightly penalize bins that are too large\n    too_large = (bins_remain_cap - item) > 0\n    priorities[too_large] -= (bins_remain_cap[too_large] - item) * 0.01  # Smaller penalty\n\n    # Set priority to -inf for bins that can't fit the item\n    cannot_fit = (bins_remain_cap - item) < 0\n    priorities[cannot_fit] = -np.inf\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 126.65973476959637,
    "mi": 83.2375765608911,
    "token_count": 127.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority for bins that can fit the item\n    can_fit = (bins_remain_cap - item) >= 0\n    \n    # Reward bins that are filled efficiently (higher fill ratio)\n    fill_ratio = item / bins_remain_cap[can_fit]\n    priorities[can_fit] = fill_ratio * 10  # Scale the fill ratio to give it significant weight\n\n    # Give a bonus to bins that result in a fill level close to a target\n    target_fill = 0.8  # Aim for bins to be about 80% full\n    target_proximity = np.abs(fill_ratio - target_fill)\n    priorities[can_fit] -= target_proximity * 5 # Subtract a penalty based on deviation from target fill\n\n    # Penalize bins with too much remaining capacity after placing the item\n    remaining_capacity = bins_remain_cap[can_fit] - item\n    priorities[can_fit] -= remaining_capacity * 0.5  # Subtract a penalty proportional to remaining capacity\n\n    # Set priority to -inf for bins that can't fit the item\n    cannot_fit = (bins_remain_cap - item) < 0\n    priorities[cannot_fit] = -np.inf\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 176.46653521143952,
    "mi": 81.96160140668363,
    "token_count": 133.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Constraint: Bin must be able to fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf  # Infeasible assignments get -inf\n\n    # Target-oriented reward: Near-perfect fits get the highest priority\n    almost_perfect = np.abs(bins_remain_cap - item) <= 0.1  # Tolerance of 0.1\n    priorities[almost_perfect & can_fit] = 100  # High reward\n\n    # Reward: Good utilization (but not perfect)\n    good_utilization = can_fit & ~almost_perfect\n    priorities[good_utilization] = (bins_remain_cap[good_utilization] - item) / bins_remain_cap[good_utilization]\n\n    # Penalty: Excessive space is penalized\n    excessive_space = (bins_remain_cap - item) > 0.5\n    priorities[excessive_space & can_fit] -= 0.1 * (bins_remain_cap[excessive_space & can_fit] - item)\n\n    # Penalty: Larger bins are penalized (encourage filling smaller bins first)\n    priorities[can_fit] -= 0.01 * bins_remain_cap[can_fit]\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 280.0,
    "mi": 79.20141546859219,
    "token_count": 172.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Reward near-perfect fits\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.1  # Define \"near\" as within 0.1\n    priorities[near_perfect_fit] += 10  # Substantial reward\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Target fill level reward (e.g., 70-90% full)\n    target_fill_min = 0.7\n    target_fill_max = 0.9\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 5  # Moderate reward for target fill\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.005 # Small penalty relative to bin size\n\n    # Wasted space penalty: Penalize bins with large remaining capacity after placement\n    waste = bins_remain_cap - item\n    waste_penalty_mask = waste > 0\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.01\n\n    return priorities",
    "response_id": 0,
    "obj": 3.1013163143199183,
    "SLOC": 17.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 327.6949375694594,
    "mi": 80.51198731194069,
    "token_count": 194.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response5.txt_stdout.txt",
    "code_path": "problem_iter6_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05  # Tighter definition of \"near\"\n    priorities[near_perfect_fit] += 20  # Substantial reward\n\n    # Target fill level reward (e.g., 70-95% full)\n    target_fill_min = 0.7\n    target_fill_max = 0.95\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 10  # Moderate reward for target fill\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.002 # Smaller penalty relative to bin size\n\n    # Wasted space penalty: Penalize bins with large remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.2  # Only penalize if waste is more than 20% of bin size\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.005  # Reduced waste penalty\n\n    return priorities",
    "response_id": 5,
    "obj": 3.1013163143199183,
    "SLOC": 21.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 334.32368021228314,
    "mi": 81.79898766776473,
    "token_count": 219.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response4.txt_stdout.txt",
    "code_path": "problem_iter7_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05  # Define \"near\" as within 0.05\n    priorities[near_perfect_fit] += 20  # Substantial reward\n\n    # Target fill level reward (e.g., 70-95% full)\n    target_fill_min = 0.7\n    target_fill_max = 0.95\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 10  # Moderate reward for target fill\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.01 # Small penalty relative to bin size\n\n    # Wasted space penalty: Penalize bins with large remaining capacity after placement\n    waste = bins_remain_cap - item\n    waste_penalty_mask = waste > 0\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.02\n\n    return priorities",
    "response_id": 4,
    "obj": 3.1013163143199183,
    "SLOC": 17.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 271.8519998980832,
    "mi": 81.08011105261083,
    "token_count": 179.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05\n    priorities[near_perfect_fit] += 20\n\n    # Target fill level reward (e.g., 70-95% full)\n    target_fill_min = 0.7\n    target_fill_max = 0.95\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 10\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.002\n\n    # Wasted space penalty: Penalize bins with large remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.2\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.005\n\n    # Prioritize bins with smaller remaining capacity among feasible bins\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 / bins_remain_cap[feasible_bins]) * 2  # Inverse of remaining capacity\n\n    return priorities",
    "response_id": 5,
    "obj": 3.1013163143199183,
    "SLOC": 20.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 276.1010283783344,
    "mi": 81.36591679198806,
    "token_count": 218.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response3.txt_stdout.txt",
    "code_path": "problem_iter9_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits (very tight tolerance)\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05  # Define \"near\" as within 0.05\n    priorities[near_perfect_fit] += 20  # Substantial reward\n\n    # Target fill level reward (tighter range, higher reward)\n    target_fill_min = 0.75\n    target_fill_max = 0.85\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 10  # Increased reward for tighter target\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.002  # Reduced penalty\n\n    # Wasted space penalty: Penalize bins with large remaining capacity after placement\n    waste = bins_remain_cap - item\n    waste_penalty_mask = waste > 0\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.015 # Slightly stronger penalty\n    \n    # Very small waste penalty for bins that are just big enough to fit.\n    just_fits = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.1)\n    priorities[just_fits] -= 0.5  # a bit less preferred.\n\n    return priorities",
    "response_id": 3,
    "obj": 3.6298364579178393,
    "SLOC": 21.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 345.1083150578407,
    "mi": 78.4534514077978,
    "token_count": 217.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response8.txt_stdout.txt",
    "code_path": "problem_iter10_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.05\n    priorities[near_perfect_fit] += 20\n\n    # Target fill level reward (broader range)\n    target_fill_min = 0.65\n    target_fill_max = 0.95\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 10\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.002\n\n    # Wasted space penalty: Penalize bins with large *relative* remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.2  # Fraction of bin capacity\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.005\n\n    # Prioritize bins with smaller remaining capacity among feasible bins\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 / bins_remain_cap[feasible_bins]) * 5  # Inverse of remaining capacity, increased weight\n\n    return priorities",
    "response_id": 8,
    "obj": 2.901874750698059,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 235.0,
    "mi": 78.89087384272726,
    "token_count": 188.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response0.txt_stdout.txt",
    "code_path": "problem_iter11_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits (tighter tolerance)\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.02\n    priorities[near_perfect_fit] += 30  # Increased reward\n\n    # Target fill level reward (broader range)\n    target_fill_min = 0.6\n    target_fill_max = 0.97\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 12\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit)\n    feasible = bins_remain_cap >= item\n    priorities[feasible] -= bins_remain_cap[feasible] * 0.001  # Reduced penalty\n\n    # Wasted space penalty: Penalize bins with large *relative* remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.15  # Reduced waste threshold\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.003  # Further reduced waste penalty\n\n    # Prioritize bins with smaller remaining capacity among feasible bins\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 / bins_remain_cap[feasible_bins]) * 7  # Increased weight based on inverse of remaining capacity\n\n    return priorities",
    "response_id": 0,
    "obj": 3.071400079776621,
    "SLOC": 22.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 427.7033415791781,
    "mi": 79.5066857897362,
    "token_count": 238.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response9.txt_stdout.txt",
    "code_path": "problem_iter12_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits (even tighter tolerance)\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.01\n    priorities[near_perfect_fit] += 40  # Increased reward\n\n    # Target fill level reward (even broader range)\n    target_fill_min = 0.55\n    target_fill_max = 0.98\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 14\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit) - removed penalty\n    # feasible = bins_remain_cap >= item\n    # priorities[feasible] -= bins_remain_cap[feasible] * 0.0005\n\n    # Wasted space penalty: Penalize bins with large *relative* remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.10  # Even reduced waste threshold\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.002  # Further reduced waste penalty\n\n    # Prioritize bins with smaller remaining capacity among feasible bins (increased weight)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 / bins_remain_cap[feasible_bins]) * 10  # Increased weight based on inverse of remaining capacity\n\n    # Bonus for almost full bins before adding an item (incentive to close bins)\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 0.2 + item)\n    priorities[almost_full] += 5\n\n    return priorities",
    "response_id": 9,
    "obj": 2.4032708416434123,
    "SLOC": 21.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 444.367108134211,
    "mi": 77.55022209452468,
    "token_count": 241.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter13_response0.txt_stdout.txt",
    "code_path": "problem_iter13_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits (even tighter tolerance)\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.01\n    priorities[near_perfect_fit] += 40  # Increased reward\n\n    # Target fill level reward\n    target_fill_min = 0.6\n    target_fill_max = 0.95\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 15  # Slightly increased reward\n\n    # Wasted space penalty: Penalize bins with large *relative* remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.12  # Increased waste threshold slightly\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.0015  # Reduced waste penalty further\n\n    # Prioritize bins with smaller remaining capacity among feasible bins (increased weight)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 / bins_remain_cap[feasible_bins]) * 12  # Increased weight based on inverse of remaining capacity\n\n    # Bonus for almost full bins before adding an item (incentive to close bins)\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 0.2 + item)\n    priorities[almost_full] += 7 # Increased bonus\n\n    # Add small bonus for bins closer to full\n    fill_ratio = (bins_remain_cap - item) / bins_remain_cap\n    priorities[(bins_remain_cap >= item)] += (1-fill_ratio[(bins_remain_cap >= item)]) * 3\n\n    return priorities",
    "response_id": 0,
    "obj": 3.071400079776621,
    "SLOC": 21.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 444.367108134211,
    "mi": 80.67301748372861,
    "token_count": 230.0,
    "exec_success": true
  }
]