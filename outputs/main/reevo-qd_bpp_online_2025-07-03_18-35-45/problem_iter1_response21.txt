```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing heuristic inspiration: Prefer bins where the item fits best
    fit_scores = bins_remain_cap - item
    
    # Give negative priority to bins that cannot fit the item.
    priorities[fit_scores < 0] = -np.inf 
    
    # Prefer to pack items tightly: maximize remaining capacity *after* placing the item
    fit_scores[fit_scores < 0] = np.inf #to avoid influencing bins that cannot accommodate

    # Give high priority to bins where the remaining space is small after adding the item.
    priorities[fit_scores >= 0] = -fit_scores[fit_scores >= 0]
    
    # A slight boost for bins already partially full to consolidate
    # prioritize partially full bins even more
    partially_full = (bins_remain_cap > 0) & (bins_remain_cap < np.max(bins_remain_cap))
    priorities[partially_full] += 0.1 

    # Additional logic to consider bins that are almost full
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2) #small tolerance factor

    priorities[almost_full] += 0.2

    return priorities
```
