```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Target fill level (e.g., 75%)
    target_fill = 0.75
    bin_capacity = 1.0  # Assuming bin capacity is 1.0.  Important to scale this according to the problem if it's something else.

    # Reward for bins close to target fill level after adding the item
    potential_fill_levels = (bin_capacity - bins_remain_cap + item) / bin_capacity
    target_proximity = np.abs(potential_fill_levels - target_fill)
    
    # High priority for bins that can fit and are close to the target fill
    feasible = bins_remain_cap >= item
    priorities[feasible] += np.exp(-target_proximity[feasible] * 10) # Exponential decay based on proximity to target
    

    # Near-perfect fit reward
    near_perfect = feasible & (bins_remain_cap - item < 0.1 * bin_capacity) # within 10% of perfect fit
    priorities[near_perfect] += 1.0  # Significant bonus for near-perfect fit

    # Soft penalty for larger bins (encourages filling smaller bins first)
    priorities[feasible] -= bins_remain_cap[feasible] * 0.05

    # Penalty for wasted space (but only if the bin is feasible)
    wasted_space = bins_remain_cap[feasible] - item
    priorities[feasible] -= wasted_space * 0.02

    # Infeasible assignment penalty (very harsh)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    return priorities
```
