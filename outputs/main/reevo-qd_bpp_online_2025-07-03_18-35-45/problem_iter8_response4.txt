```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check - crucial, but represented as a strong negative reward instead of -inf
    infeasible = bins_remain_cap < item
    priorities[infeasible] -= 1000  # Very large negative reward

    # Near-perfect fit reward
    near_perfect_fit_tolerance = 0.05  # Tighter tolerance for near-perfect
    near_perfect_fit = np.abs(bins_remain_cap - item) <= near_perfect_fit_tolerance
    priorities[near_perfect_fit] += 50

    # Target fill range reward (e.g., 80-95% full) - higher target
    target_fill_min = 0.8
    target_fill_max = 0.95
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 30

    # Encourage filling smaller bins that can fit (gentle penalty)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.001

    # Wasted space penalty (proportional to waste, but capped)
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    waste_penalty = np.minimum(waste[waste_penalty_mask] * 0.02, 5)  # Cap penalty at 5
    priorities[waste_penalty_mask] -= waste_penalty

    # Bonus for bins that are almost full before adding the item
    almost_full_before = bins_remain_cap < 0.2
    priorities[almost_full_before & feasible] += 10

    return priorities
```
