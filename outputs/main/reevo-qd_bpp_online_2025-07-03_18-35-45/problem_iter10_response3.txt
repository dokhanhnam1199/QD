```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Disqualify bins that can't fit the item
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward bins with remaining capacity close to the item size (near-perfect fit)
    near_perfect_fit_threshold = 0.1
    near_perfect_fit = np.abs(bins_remain_cap - item) <= near_perfect_fit_threshold
    priorities[near_perfect_fit] += 15  # Higher reward for near-perfect fit

    # Target fill level reward (e.g., 70-95% full *after* placing the item)
    target_fill_min = 0.7
    target_fill_max = 0.95
    remaining_after_fill = bins_remain_cap - item
    target_fill = remaining_after_fill / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 10  # Moderate reward for target fill

    # Wasted space penalty: Penalize bins with larger remaining capacity after placement.
    # Only applied to feasible bins.
    feasible = bins_remain_cap >= item
    waste = bins_remain_cap - item
    waste_penalty_mask = feasible & (waste > 0)
    waste_penalty = waste[waste_penalty_mask] * 0.02 # Adjust the penalty magnitude
    priorities[waste_penalty_mask] -= waste_penalty

    # Soft penalty for using larger bins (encourage using smaller feasible bins)
    priorities[feasible] -= bins_remain_cap[feasible] * 0.005  # Smaller penalty relative to bin size

    return priorities
```
