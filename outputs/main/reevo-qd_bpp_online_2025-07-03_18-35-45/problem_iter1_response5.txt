```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large negative value indicates bin is not suitable.
    priorities[bins_remain_cap < item] = -np.inf
    
    # 1. Fill almost full bins first (minimize wasted space)
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1) # or some tolerance
    priorities[almost_full] = 1000 # very high priority

    # 2. Prioritize bins that fit item snugly (reduce fragmentation)
    snug_fit = (bins_remain_cap >= item) 
    priorities[snug_fit] = (bins_remain_cap[snug_fit] - item)**-1 # Inverse of wasted space, higher priority if little space wasted. Add small epsilon to avoid inf

    # 3. Penalize bins that will become too empty
    too_empty = (bins_remain_cap >= item) & (bins_remain_cap - item > 0.7) # or some threshold
    priorities[too_empty] = -1 * (bins_remain_cap[too_empty] - item) # small negative value.

    # 4. If no special case apply, use a default heuristic: FFD-like
    default_bins = (bins_remain_cap >= item) & (priorities == 0)
    priorities[default_bins] = bins_remain_cap[default_bins] # Use remaining capacity as the metric.
    
    return priorities
```
