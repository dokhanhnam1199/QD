```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and leaves minimal waste.
    # But prioritize non-full bins.
    
    fit_mask = remaining_after_add >= 0
    
    if np.any(fit_mask):
      priorities[fit_mask] = bins_remain_cap[fit_mask] - item # Smaller remainders get higher priority
      priorities[fit_mask] = 1 / (priorities[fit_mask] + 1e-9) # Inverse to increase value for smaller values
    
    #If item does not fit, give a very small negative priority to all bins to deprioritize overflowing
    else:
      priorities[:] = -1e-6 # Very small negative priority. Makes the non fit case lowest priority.
        
    #Bonus for almost full bins that are not overflowing. Encourages filling them completely.  Consider avoiding using near-full bins at the very start to prevent early "stuck" bins

    almost_full_mask = (bins_remain_cap > item) & (bins_remain_cap < 2 * item)
    priorities[almost_full_mask] += 0.5
        
    return priorities
```
