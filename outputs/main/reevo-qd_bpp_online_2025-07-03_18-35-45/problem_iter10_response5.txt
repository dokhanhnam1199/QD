```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Reward near-perfect fits (very tight tolerance)
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.02  # Define "near" as within 0.02
    priorities[near_perfect_fit] += 30  # Substantial reward

    # Target fill level reward (tighter range, higher reward)
    target_fill_min = 0.80
    target_fill_max = 0.90
    target_fill = (bins_remain_cap - item) / bins_remain_cap
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[target_range] += 15  # Increased reward for tighter target

    # Soft penalty for larger bins (prefer smaller bins that can still fit)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.001  # Reduced penalty

    # Wasted space penalty: Penalize bins with large remaining capacity after placement
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.02  # Slightly stronger penalty

    # Very small waste penalty for bins that are just big enough to fit.
    just_fits = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.05)
    priorities[just_fits] -= 0.75  # a bit less preferred.

    # Bonus for filling bins completely (or very close to it)
    almost_full = (bins_remain_cap - item) <= 0.001
    priorities[almost_full] += 50  # Very high reward for near-full bins

    return priorities
```
