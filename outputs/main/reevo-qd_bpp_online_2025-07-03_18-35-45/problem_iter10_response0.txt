```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins

    # Target fill level reward (e.g., 70-90% full) - MOST IMPORTANT
    target_fill_min = 0.7
    target_fill_max = 0.9
    remaining_after_placement = bins_remain_cap - item
    target_range = (remaining_after_placement >= 0) & (remaining_after_placement / bins_remain_cap >= target_fill_min) & (remaining_after_placement / bins_remain_cap <= target_fill_max)
    priorities[target_range] += 15  # High reward for target fill

    # Reward near-perfect fits, but less than target fill
    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.1  # Define "near" as within 0.1
    priorities[near_perfect_fit] += 5

    # Wasted space penalty: Penalize bins with large remaining capacity after placement
    waste = bins_remain_cap - item
    waste_penalty_mask = waste > 0
    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.1  # Increased waste penalty

    # Soft penalty for larger bins (prefer smaller bins that can still fit)
    feasible = bins_remain_cap >= item
    priorities[feasible] -= bins_remain_cap[feasible] * 0.005 # Small penalty relative to bin size


    return priorities
```
