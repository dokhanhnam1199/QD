```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Eliminate bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Mark infeasible bins with negative infinity

    # 2. Prioritize bins with smallest remaining capacity AFTER adding the item
    #    (First-Fit Decreasing principle - mimic by prioritizing bins that leave less space)
    remaining_after_fit = bins_remain_cap - item
    # Handle the infeasible bins correctly by setting their remaining cap to a large value to avoid issues in sorting/ranking.
    remaining_after_fit[infeasible_mask] = np.inf
    priorities = -remaining_after_fit # Invert remaining capacity. Larger value = more remaining capacity

    # 3. Bonus for bins that are filled more than half-way after adding the item
    half_filled_mask = (bins_remain_cap - item) <= (1 - item) #check remaining capacity <= to item size means >50% is utilized with current item
    priorities[half_filled_mask] += 1  # Add a bonus to these bins

    #4. slight penalty to fill bin to 100% of the capacity

    almost_full_mask = (bins_remain_cap - item) <= 0.0001 # tolerance to allow some float precision
    priorities[almost_full_mask] -= 0.5

    return priorities
```
