```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility is paramount
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Disqualify infeasible bins
    
    feasible = bins_remain_cap >= item

    if np.any(feasible):  # only compute these if there are feasible bins
        # Reward near-perfect fits relative to item size.
        near_perfect_fit = feasible & (np.abs(bins_remain_cap - item) <= (0.1 * item))
        priorities[near_perfect_fit] += 15  # Substantial reward
    
        # Target fill level reward (e.g., 70-90% full, AFTER placement)
        target_fill_min = 0.7
        target_fill_max = 0.9
        target_fill = np.zeros_like(bins_remain_cap, dtype=float)
        target_fill[feasible] = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        target_range = feasible & ( (target_fill >= target_fill_min) & (target_fill <= target_fill_max) )
        priorities[target_range] += 8  # Moderate reward for target fill
    
        # Soft penalty for larger bins (prefer smaller bins that can still fit), but relative to item size
        priorities[feasible] -= bins_remain_cap[feasible] * (0.002 * item) # Small penalty relative to item and bin size

        # Wasted space penalty: Penalize bins with large remaining capacity after placement, relative to item size
        waste = bins_remain_cap - item
        waste_penalty_mask = feasible & (waste > 0)
        priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * (0.008 * item) # Waste penalty relative to item size
    

    return priorities
```
