```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: First-Fit Decreasing variant
    # Prefer bins where the item fits best (least wasted space)
    fit_check = bins_remain_cap >= item
    
    if np.any(fit_check):
        waste = bins_remain_cap - item
        priorities[fit_check] = 1.0 / (waste[fit_check] + 0.00001)  # Avoid division by zero, smaller waste -> higher priority
    
    # Heuristic 2: Avoid bins that are almost full (to avoid fragmentation)
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < item * 1.2) #Avoid bins where remaining cap is just slightly bigger than item
    priorities[almost_full] = -1.0 # Penalize these bins

    #Heuristic 3: If nothing fits well, select based on remaining capacity (largest cap is better to try fit future larger items.)
    if np.all(priorities <=0):
        priorities = bins_remain_cap

    return priorities
```
