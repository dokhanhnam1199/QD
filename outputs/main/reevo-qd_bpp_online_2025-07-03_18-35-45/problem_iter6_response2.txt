```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Constraint: Bin must be able to fit the item
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Infeasible assignments get -inf

    # Target-oriented reward: Near-perfect fits get the highest priority
    almost_perfect = np.abs(bins_remain_cap - item) <= 0.1  # Tolerance of 0.1
    priorities[almost_perfect & can_fit] = 100  # High reward

    # Reward: Good utilization (but not perfect)
    good_utilization = can_fit & ~almost_perfect
    utilization_ratio = item / bins_remain_cap[good_utilization]
    priorities[good_utilization] = 50 * utilization_ratio  # Scale utilization reward

    # Penalty: Excessive space is penalized, more strongly than before
    excessive_space = (bins_remain_cap - item) > 0.5
    priorities[excessive_space & can_fit] -= 0.5 * (bins_remain_cap[excessive_space & can_fit] - item)

    # Penalty: Larger bins are penalized (encourage filling smaller bins first), but only if other bins are available
    if np.sum(can_fit) > 1:
        priorities[can_fit] -= 0.01 * bins_remain_cap[can_fit]

    # Bonus: Slightly prefer bins that are already somewhat full (helps consolidate items)
    already_full = bins_remain_cap < 1.0  # Assuming bin capacity is greater than 1
    priorities[already_full & can_fit] += 1.0

    return priorities
```
