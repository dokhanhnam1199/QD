```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Constraint: Bin must be able to fit the item
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Infeasible assignments get -inf

    # Target-oriented reward: Near-perfect fits get the highest priority
    almost_perfect = np.abs(bins_remain_cap - item) <= 0.05  # Tolerance of 0.05
    priorities[almost_perfect & can_fit] = 100  # High reward

    # Reward: Good utilization (but not perfect)
    good_utilization = can_fit & ~almost_perfect
    utilization_ratio = item / bins_remain_cap[good_utilization]
    priorities[good_utilization] = 50 * utilization_ratio # Scale utilization

    # Penalty: Excessive space is penalized, more heavily if item is small
    excessive_space = (bins_remain_cap - item) > 0.25
    penalty_factor = np.minimum(item, 0.5)  # Smaller items incur higher penalty
    priorities[excessive_space & can_fit] -= penalty_factor * (bins_remain_cap[excessive_space & can_fit] - item)

    # Encourage filling bins with smallest remaining capacity first
    # This biases towards fewer partially filled bins
    capacity_rank = np.argsort(bins_remain_cap)
    rank_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    rank_bonus[capacity_rank] = np.linspace(0, 10, len(bins_remain_cap))

    priorities += rank_bonus

    return priorities
```
