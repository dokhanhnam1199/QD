{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize feasibility. Reward near-perfect fits and target fills. Penalize wasted space softly with fine-grained tuning, focusing on waste relative to bin size, not absolute bin size. Favor smaller feasible bins.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf  # Disqualify infeasible bins\n\n    # Reward near-perfect fits (even tighter tolerance)\n    near_perfect_fit = np.abs(bins_remain_cap - item) <= 0.01\n    priorities[near_perfect_fit] += 40  # Increased reward\n\n    # Target fill level reward (even broader range)\n    target_fill_min = 0.55\n    target_fill_max = 0.98\n    target_fill = (bins_remain_cap - item) / bins_remain_cap\n    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)\n    priorities[target_range] += 14\n\n    # Soft penalty for larger bins (prefer smaller bins that can still fit) - removed penalty\n    # feasible = bins_remain_cap >= item\n    # priorities[feasible] -= bins_remain_cap[feasible] * 0.0005\n\n    # Wasted space penalty: Penalize bins with large *relative* remaining capacity after placement, but only if above a threshold.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.10  # Even reduced waste threshold\n    waste_penalty_mask = (waste > 0) & (waste / bins_remain_cap > waste_threshold)\n    priorities[waste_penalty_mask] -= waste[waste_penalty_mask] * 0.002  # Further reduced waste penalty\n\n    # Prioritize bins with smaller remaining capacity among feasible bins (increased weight)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 / bins_remain_cap[feasible_bins]) * 10  # Increased weight based on inverse of remaining capacity\n\n    # Bonus for almost full bins before adding an item (incentive to close bins)\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 0.2 + item)\n    priorities[almost_full] += 5\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}