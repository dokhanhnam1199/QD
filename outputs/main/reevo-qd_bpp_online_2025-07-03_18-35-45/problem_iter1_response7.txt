```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible only if its remaining capacity is >= item size.
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no feasible bins, assign all bins equal priority.
        # This could be interpreted as opening a new bin.
        priorities[:] = 1.0
        return priorities

    # Calculate waste if the item is put in each feasible bin
    waste = bins_remain_cap[feasible_bins] - item
    
    # Prioritize bins with smaller waste first (First-Fit Decreasing like). 
    priorities[feasible_bins] = 1.0 / (1e-9 + waste)  # Add a small constant to avoid division by zero.
    
    # Boost bins that fit the item almost perfectly (Best-Fit Decreasing like)
    perfect_fit = np.abs(waste) < 1e-6 # Using tolerance for floating point comparision
    priorities[feasible_bins][perfect_fit] *= 2.0 # Double the priority to encourage it

    # Consider bins that are close to full after inserting item.
    # bins_almost_full = (bins_remain_cap - item) / np.max(bins_remain_cap) <= 0.1

    # Ensure that only feasible bins are prioritized.
    priorities[~feasible_bins] = 0.0  # Infeasible bins have priority of 0
        
    return priorities
```
