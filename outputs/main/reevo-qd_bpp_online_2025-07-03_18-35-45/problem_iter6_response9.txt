```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Infeasible bins get a large negative priority.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward bins that can fit the item
    feasible = bins_remain_cap >= item
    if np.any(feasible):
      priorities[feasible] += 1

    # Target fill level reward: Encourage bins to be filled within a target range.
    target_fill_min = 0.7
    target_fill_max = 0.9
    remaining_after_fit = bins_remain_cap - item
    target_fill = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
    target_range = (target_fill >= target_fill_min) & (target_fill <= target_fill_max)
    priorities[feasible][target_range] += 10

    # Near-perfect fit reward: High reward for bins that are almost full after placing the item.
    near_perfect_tolerance = 0.1
    near_perfect_fit = (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_tolerance)
    priorities[near_perfect_fit] += 15

    # Waste penalty: Penalize bins with large remaining capacity after placement, relative to bin size.
    waste = bins_remain_cap[feasible] - item
    waste_ratio = waste / bins_remain_cap[feasible]
    priorities[feasible] -= waste_ratio * 2  # Scale the penalty (e.g., by 2)

    # Bin size penalty: Soft penalty for larger bins that can still fit.
    priorities[feasible] -= bins_remain_cap[feasible] * 0.005

    return priorities
```
