```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, penalize bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Assign very low priority

    # For feasible bins, prioritize bins with smaller remaining capacity *after* placing the item
    feasible_mask = bins_remain_cap >= item
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_capacity_after_fit # Prefer smaller remaining cap after placement

    # Add a small bonus for bins that can fit the item nearly perfectly
    near_perfect_fit_mask = feasible_mask & (remaining_capacity_after_fit <= 0.1 * item) # Tune threshold 0.1
    priorities[near_perfect_fit_mask] += 1.0  # Give priority boost for near perfect fit

    return priorities
```
