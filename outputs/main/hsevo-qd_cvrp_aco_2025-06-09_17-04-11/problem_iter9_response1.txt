```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Advanced heuristics combining distance, demand, depot proximity,
    angle, customer clustering, adaptive sparsification, and iterative refinement
    based on edge importance and solution feedback.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # 1. Distance Component:
    distance_component = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero

    # 2. Demand Component:
    normalized_demands = demands / capacity
    demand_component = 1 - normalized_demands  # Prefer edges connecting to nodes with lower demand

    # 3. Depot Proximity Component:
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)
    depot_component = 1 - normalized_depot_distances  # Favor edges closer to the depot indirectly.

    # 4. Angle Component (Depot-Aware):
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi
    angle_component = 1 - normalized_angles  # Favor edges with smaller angles relative to the depot

    # 5. Customer Clustering (More robust):
    cluster_assignments = np.zeros(n_nodes, dtype=int)
    num_clusters = min(5, int(np.ceil(np.sum(demands) / capacity)))  # Aim for a few clusters based on total demand

    if num_clusters > 1:
        from sklearn.cluster import KMeans
        kmeans = KMeans(n_clusters=num_clusters, random_state=0, n_init = 'auto') # explicitly declare n_init
        cluster_assignments[1:] = kmeans.fit_predict(coordinates[1:])

    # 6. Edge Importance:
    edge_importance = np.zeros_like(distance_matrix)
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue
            edge_importance[i, j] = (demands[i] + demands[j]) / (distance_matrix[i, j] + 1e-6) #Adding small number to avoid zero division

    # 7. Combining Components with adaptive weights
    alpha_distance = 0.4
    alpha_demand = 0.2
    alpha_depot = 0.1
    alpha_angle = 0.1
    alpha_cluster = 0.2  # Tunable weight

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            cluster_bonus = 1.0
            if num_clusters > 1 and cluster_assignments[i] != 0 and cluster_assignments[j] != 0 and cluster_assignments[i] == cluster_assignments[j]:
                cluster_bonus = 1.3

            heuristic_value = (
                alpha_distance * distance_component[i, j] +
                alpha_demand * demand_component[j] +
                alpha_depot * depot_component[j] +
                alpha_angle * angle_component[i,j]
            ) * cluster_bonus
            heuristic_matrix[i, j] = heuristic_value

    # 8. Adaptive Sparsification (Aggressive):
    mean_importance = np.mean(edge_importance[edge_importance > 0]) if np.any(edge_importance > 0) else 0
    std_importance = np.std(edge_importance[edge_importance > 0]) if np.any(edge_importance > 0) else 0

    threshold = mean_importance - 0.75 * std_importance # More aggressive sparsification

    heuristic_matrix[edge_importance < threshold] = 0

    # 9. Sparsification based on heuristic value itself
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 # more agressive sparsification
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    #Symmetrize the heuristic matrix. This can help some solvers.
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2.0
    return heuristic_matrix
```
