```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This heuristic considers distance, demand, and angle relative to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Depot coordinates
    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                distance = distance_matrix[i, j]

                # Angle penalty/reward: Prefer nodes with smaller angles to the depot, 
                # and also prevent from very small value
                angle = np.arctan2(coordinates[j][1] - depot_y, coordinates[j][0] - depot_x)
                angle_cost = np.abs(angle) # Smaller angle (closer to 0) is better
                # Consider Demand: Heavier loads on shorter connections, light loads on longer connections

                heuristic_matrix[i, j] = (1 / distance) * (1 / (1 + angle_cost)) * (1 + demands[j]/capacity)

    return heuristic_matrix
```
