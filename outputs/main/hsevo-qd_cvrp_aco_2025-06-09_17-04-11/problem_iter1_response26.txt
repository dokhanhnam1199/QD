```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This function generates prior indicators of how promising it is to include each edge in a solution.
    It considers distance, demand, and angular relationships between nodes to guide the search.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of edge inclusion (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters to tune the heuristic
    alpha = 1.0   # Weight for distance
    beta = 1.5    # Weight for demand
    gamma = 0.5   # Weight for angle
    delta = 0.1  # Weight for depot proximity (encourage returns)
    epsilon = 1e-9 # small value for division stability
    # depot_index = 0 # depot is always node 0

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance component: Shorter distances are more promising
                distance_heuristic = (1 / (distance_matrix[i, j] + epsilon))**alpha

                # Demand component: Consider demand of the destination node
                demand_heuristic = (1 / (demands[j] + epsilon))**beta

                # Angle component: Penalize sharp turns by checking the angle i -> j -> 0 (depot)
                # Dot product of vectors (j -> i) and (j -> 0) gives a measure of the angle
                vector_ji = coordinates[i] - coordinates[j]
                vector_j0 = coordinates[0] - coordinates[j]  # depot at index 0

                # Normalize the vectors
                norm_ji = np.linalg.norm(vector_ji)
                norm_j0 = np.linalg.norm(vector_j0)
                if norm_ji > 0 and norm_j0 > 0:
                    cos_angle = np.dot(vector_ji, vector_j0) / (norm_ji * norm_j0 + epsilon)
                    angle_heuristic = (1 - cos_angle)**gamma # Smaller angle -> larger cos -> smaller value

                else:
                    angle_heuristic = 1.0 # if two vectors have norm 0 the penalty is the highest
                # Proximity to depot from current node j, encouraging returns for routes
                depot_proximity_heuristic = (1 / (distance_matrix[j, 0] + epsilon))**delta

                # Combine the heuristics
                heuristic_matrix[i, j] = distance_heuristic * demand_heuristic * angle_heuristic * depot_proximity_heuristic

    return heuristic_matrix
```
