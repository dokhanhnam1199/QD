```python
import numpy as np
from sklearn.cluster import KMeans

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, and clustering.
    Uses adaptive sparsification.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot
    depot_distances = distance_matrix[0, :]
    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances) > 0 else np.zeros_like(depot_distances)

    # Demand Considerations
    normalized_demands = demands / capacity

    # Clustering (K-Means) - Identifying customer groups
    n_clusters = min(5, n_nodes // 2)  # Limit clusters
    kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init = 'auto')
    cluster_labels = kmeans.fit_predict(coordinates)

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            #Cluster bonus if nodes are in same cluster
            cluster_bonus = 1.0 if cluster_labels[i] == cluster_labels[j] else 0.75

            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * cluster_bonus

            heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix - Adaptive threshold
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
