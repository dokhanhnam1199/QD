{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (11th), we see the best heuristic considers distance, demand, and proximity to the depot, while the worst only considers the inverse of the distance.  (2nd) vs (12th) and so on, it's consistently the same. Comparing (1st) vs (2nd), (3rd) vs (4th) ..., there is no difference in the code. Comparing (20th) vs (11th), no difference is found. Overall: The ranking highlights the importance of incorporating multiple factors into the heuristic, specifically demand and proximity to the depot, in addition to distance.  The better heuristics normalize these factors to ensure they are appropriately weighted. The worst heuristics only focus on distance.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current Self-Reflection\" to make it more effective for designing CVRP heuristics. We want actionable insights, not just general guidelines.\n\nHere's a revised approach:\n\n*   **Keywords:** Performance Analysis, Bottleneck Identification, Adaptive Parameter Tuning, Diversity Maintenance.\n*   **Advice:** Rigorously test heuristics on diverse problem instances. Analyze solution quality, runtime, and failure modes to pinpoint weaknesses. Use these insights to guide refinements, focusing on the identified performance bottlenecks. Implement adaptive parameter tuning. Focus on diversity maintence of the solutions.\n*   **Avoid:** Vague notions of \"considering\" factors. Avoid relying solely on intuition without empirical validation. Avoid static parameter settings.\n*   **Explanation:** Move beyond general principles. Emphasize data-driven analysis to uncover specific areas for improvement and guide the development of more robust and effective heuristics. Adaptive tunning to adjust its parameters. Diversity maintence to escape local optimum.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}