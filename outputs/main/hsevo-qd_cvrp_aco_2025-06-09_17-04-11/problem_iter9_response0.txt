```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    customer clustering, adaptive sparsification based on edge importance and iterative refinement.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot (Normalized)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations (Normalized)
    normalized_demands = demands / capacity

    # Angle to Depot
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi

    # Customer Clustering (Agglomerative Clustering)
    cluster_assignments = np.zeros(n_nodes, dtype=int)
    num_clusters = min(4, int(np.ceil(np.sum(demands) / capacity)))  # Target number of clusters

    if num_clusters > 1:
        from sklearn.cluster import AgglomerativeClustering

        clustering = AgglomerativeClustering(n_clusters=num_clusters, linkage='ward')
        cluster_assignments[1:] = clustering.fit_predict(coordinates[1:])  # Cluster based on node coordinates

    # Edge Importance (Adaptive Sparsification)
    edge_importance = np.zeros_like(distance_matrix)

    # Iterate to Refine Heuristic Values
    for iteration in range(2): #Added Iteration
        for i in range(n_nodes):
            for j in range(n_nodes):
                if i == j:
                    continue

                distance = distance_matrix[i, j]
                if distance == 0:
                    continue
                # Demand Feasibility:  Prioritize edges that are more likely to be part of a feasible route
                demand_feasibility = 1.0
                if demands[i] + demands[j] > capacity:
                    demand_feasibility = 0.1  # Significantly penalize edges exceeding capacity

                # Cluster Awareness: Favor edges within the same cluster
                cluster_bonus = 1.0
                if num_clusters > 1 and cluster_assignments[i] != 0 and cluster_assignments[j] != 0 and cluster_assignments[i] == cluster_assignments[j]:
                    cluster_bonus = 1.3  # Increase weight if nodes are in the same cluster

                # Depot proximity bonus: Give higher scores to edges connecting to a node close to depot
                depot_proximity_bonus = (2 - normalized_depot_distances[i] - normalized_depot_distances[j])

                heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * (1 - normalized_angles[i,j]) * cluster_bonus * demand_feasibility * depot_proximity_bonus

                heuristic_matrix[i, j] = heuristic_value
                edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])

        # Adaptive Sparsification
        mean_importance = np.mean(edge_importance[edge_importance > 0]) if np.any(edge_importance > 0) else 0
        std_importance = np.std(edge_importance[edge_importance > 0]) if np.any(edge_importance > 0) else 0

        threshold = mean_importance - 0.5 * std_importance

        heuristic_matrix[edge_importance < threshold] = 0

        # Additional Sparsification based on heuristic value itself
        heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1 if np.any(heuristic_matrix > 0) else 0
        heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    return heuristic_matrix
```
