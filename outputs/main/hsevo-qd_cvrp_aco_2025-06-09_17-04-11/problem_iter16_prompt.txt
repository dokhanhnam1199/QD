{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    CVRP heuristic: Combines distance, demand, depot proximity, and angle to depot.\n    Sparsifies adaptively based on edge importance and instance characteristics.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot (Prioritized)\n    depot_distances = distance_matrix[0, :]\n    max_depot_distance = np.max(depot_distances)\n    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)\n\n    # Demand Considerations (Prioritized)\n    normalized_demands = demands / capacity\n    \n    # Angle to Depot (Encourages radial routes)\n    angles = np.zeros((n_nodes, n_nodes))\n    for i in range(1, n_nodes):\n        for j in range(1, n_nodes):\n            if i != j:\n                vec_i = coordinates[i] - coordinates[0]\n                vec_j = coordinates[j] - coordinates[0]\n                \n                norm_i = np.linalg.norm(vec_i)\n                norm_j = np.linalg.norm(vec_j)\n                \n                if norm_i > 0 and norm_j > 0:\n                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)\n                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip for numerical stability\n                else:\n                    angles[i, j] = np.pi  # Maximum angle if a node is at the depot\n    normalized_angles = angles / np.pi  # Normalize to [0, 1]\n\n    # Edge Importance (Adaptive Sparsification)\n    edge_importance = np.zeros_like(distance_matrix)\n\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            if distance == 0:\n                continue\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * (1 - normalized_angles[i,j])\n\n            heuristic_matrix[i, j] = heuristic_value\n            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])  # Example: inversely proportional to distance, proportional to combined demand\n\n    # Adaptive Sparsification\n    mean_importance = np.mean(edge_importance[edge_importance > 0])\n    std_importance = np.std(edge_importance[edge_importance > 0])\n\n    #Dynamic threshold based on importance\n    threshold = mean_importance - 0.5 * std_importance  # Tune the 0.5 factor based on performance\n\n    heuristic_matrix[edge_importance < threshold] = 0\n    \n    #Further sparsification based on the heuristic value to limit the search space\n    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1\n    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}