{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}