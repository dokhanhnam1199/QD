```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    adaptive sparsification, clustering, and edge diversity with iterative refinement.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot (normalized)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations (normalized)
    normalized_demands = demands / capacity

    # Angle to Depot (normalized)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi

    # Customer Clustering (Simplified - can be enhanced)
    cluster_assignments = np.zeros(n_nodes, dtype=int)
    num_clusters = min(4, int(np.ceil(np.sum(demands) / capacity)))  # Aim for a few clusters based on total demand

    if num_clusters > 1:
        angles_to_depot = np.arctan2(coordinates[1:, 1] - coordinates[0, 1], coordinates[1:, 0] - coordinates[0, 0])
        angles_to_depot = (angles_to_depot + np.pi) % (2 * np.pi)  # Normalize to 0-2pi
        angle_increments = np.linspace(0, 2 * np.pi, num_clusters + 1)

        for i in range(1, n_nodes):
            for k in range(num_clusters):
                if angle_increments[k] <= angles_to_depot[i - 1] < angle_increments[k + 1]:
                    cluster_assignments[i] = k

    # Edge Importance (Adaptive Sparsification)
    edge_importance = np.zeros_like(distance_matrix)

    # Edge Diversity Encouragement
    diversity_bonus = np.ones_like(distance_matrix)

    # Combined Heuristic Factor Weights (Tunable)
    distance_weight = 1.0
    demand_weight = 1.0
    depot_weight = 1.0
    angle_weight = 0.5
    cluster_weight = 1.2
    diversity_weight = 0.8


    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            # Cluster Awareness: Favor edges within the same cluster
            cluster_bonus = 1.0
            if num_clusters > 1 and cluster_assignments[i] != 0 and cluster_assignments[j] != 0 and cluster_assignments[i] == cluster_assignments[j]:
                cluster_bonus = cluster_weight  # Increase weight if nodes are in the same cluster

            # Heuristic Value Calculation with Tunable Weights
            heuristic_value = (distance_weight / distance) * \
                              (1 - demand_weight * normalized_demands[j]) * \
                              (1 - depot_weight * normalized_depot_distances[j]) * \
                              (1 - angle_weight * normalized_angles[i, j]) * \
                              cluster_bonus

            heuristic_matrix[i, j] = heuristic_value
            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])

            # Edge Diversity: Penalize edges that are too similar to other high-value edges
            for k in range(1, n_nodes):
                if k != i and k != j:
                    similarity = np.exp(-0.5 * ((distance_matrix[i, j] - distance_matrix[i, k]) ** 2 + (distance_matrix[j, i] - distance_matrix[k, i]) ** 2))  # Simplified distance similarity
                    diversity_bonus[i, j] *= (1 - diversity_weight * 0.1 * similarity)  # Reduce bonus if too similar to other edges related to node i

    # Adaptive Sparsification
    mean_importance = np.mean(edge_importance[edge_importance > 0])
    std_importance = np.std(edge_importance[edge_importance > 0])

    threshold = mean_importance - 0.5 * std_importance

    heuristic_matrix[edge_importance < threshold] = 0

    # Additional Sparsification based on heuristic value itself, more aggressive
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 #Increased sparsification
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    heuristic_matrix = heuristic_matrix * diversity_bonus  # Apply diversity bonus

    # Iterative Refinement: Boost edges connected to nodes with high demand but few connections
    node_connectivity = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    for i in range(1, n_nodes):
        if demands[i] > 0.7 * np.mean(demands) and node_connectivity[i] < 3:
            for j in range(1, n_nodes):
                if i != j:
                    heuristic_matrix[i, j] *= 1.1 # Boost potential connections


    return heuristic_matrix
```
