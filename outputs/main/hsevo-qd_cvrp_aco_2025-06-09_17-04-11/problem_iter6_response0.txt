```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    and adaptive sparsification with refined edge scoring.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Distance Component (Normalized Inverse)
    max_distance = np.max(distance_matrix)
    normalized_distance = (max_distance - distance_matrix) / max_distance if max_distance > 0 else np.ones_like(distance_matrix)

    # Demand Component (Normalized)
    normalized_demands = demands / capacity

    # Depot Proximity (Normalized Inverse)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_proximity = (max_depot_distance - depot_distances) / max_depot_distance if max_depot_distance > 0 else np.ones_like(depot_distances)

    # Angle to Depot (Cosine Similarity for robustness)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]
                
                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)
                
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = cos_angle  # Using cosine directly
                else:
                    angles[i, j] = -1.0  # Assign minimum similarity
    
    normalized_angles = (angles + 1) / 2  # Scale cosine from [-1, 1] to [0, 1]

    # Edge Scoring
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue
            if distance_matrix[i, j] == 0:
                continue
            
            # Demand factor considers both nodes i and j
            demand_factor = 1 - (normalized_demands[i] + normalized_demands[j]) / 2 

            # Proximity factor now considers distance to depot for both nodes
            proximity_factor = (1 - (normalized_depot_proximity[i] + normalized_depot_proximity[j]) / 2)

            heuristic_value = (
                normalized_distance[i, j]
                * demand_factor
                * proximity_factor
                * normalized_angles[i, j]
            )
            heuristic_matrix[i, j] = heuristic_value

    # Adaptive Sparsification using quantiles
    flat_heuristic = heuristic_matrix[heuristic_matrix > 0].flatten()
    if flat_heuristic.size > 0:  # Check if there are any positive values
        q1 = np.quantile(flat_heuristic, 0.25)
        q2 = np.quantile(flat_heuristic, 0.50)

        # More aggressive thresholding based on quantiles.
        heuristic_matrix[heuristic_matrix < q1] = 0

        # Further sparsification: only keep edges with higher combined importance
        edge_importance = (demands[:, None] + demands[None, :]) * normalized_distance
        importance_threshold = np.quantile(edge_importance[edge_importance > 0], 0.4)
        heuristic_matrix[edge_importance < importance_threshold] = 0
    else:
        heuristic_matrix[:] = 0 #if all values are 0, set all to zero to avoid errors.


    return heuristic_matrix
```
