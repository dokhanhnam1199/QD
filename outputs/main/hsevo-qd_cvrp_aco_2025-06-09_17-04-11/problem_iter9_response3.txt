```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Advanced version combining distance, demand, depot proximity,
    angle, customer clustering, and iterative adaptive sparsification with a
    focus on solution diversity and constraint satisfaction.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # 1. Distance Factor
    distance_factor = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # 2. Demand Factor
    normalized_demands = demands / capacity
    demand_factor = 1 - normalized_demands

    # 3. Depot Proximity Factor
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)
    depot_proximity_factor = 1 - normalized_depot_distances

    # 4. Angle Factor
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi
    angle_factor = 1 - normalized_angles

    # 5. Customer Clustering (K-Means)
    from sklearn.cluster import KMeans
    num_clusters = min(int(np.ceil(np.sum(demands) / capacity)) + 1, n_nodes -1)  #Dynamic cluster number + prevent errors
    if num_clusters > 1 and n_nodes > 2: #make sure kmeans have something to work with
        kmeans = KMeans(n_clusters=num_clusters, random_state=0, n_init = 'auto').fit(coordinates[1:])
        cluster_labels = np.zeros(n_nodes, dtype=int)
        cluster_labels[1:] = kmeans.labels_
    else:
        cluster_labels = np.zeros(n_nodes, dtype=int)


    cluster_factor = np.zeros_like(distance_matrix)
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j and cluster_labels[i] == cluster_labels[j] and cluster_labels[i] != 0:
                cluster_factor[i, j] = 1.2  #Increased weight for same cluster
            else:
                cluster_factor[i, j] = 1.0

    # 6. Combined Heuristic Value
    heuristic_matrix = distance_factor * demand_factor * depot_proximity_factor * angle_factor * cluster_factor

    # 7. Iterative Adaptive Sparsification

    edge_importance = distance_factor * (demands[:, None] + demands[None, :]) #using broadcasting

    for _ in range(2):  # Iterative refinement
        mean_importance = np.mean(edge_importance[edge_importance > 0])
        std_importance = np.std(edge_importance[edge_importance > 0])
        threshold = mean_importance - 0.7 * std_importance  # Adjust threshold dynamically

        heuristic_matrix[edge_importance < threshold] = 0
        edge_importance[heuristic_matrix == 0] = 0 # Update edge importance

    # Additional Sparsification based on heuristic value itself, adjusted threshold
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0


    return heuristic_matrix
```
