{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    CVRP heuristic: Combines distance, demand, depot proximity.\n    Sparsifies by setting low-probability edges to zero.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances)\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            if distance == 0:\n                continue\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    # Sparsify the matrix\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1 #Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0 #set low probability edges to 0.\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates distance, demand, depot proximity, angle, adaptive sparsification, and diversity, while the worst only considers the inverse of distance. (2nd best) vs (second worst) shows the same pattern. Comparing (1st) vs (2nd), we see they are identical. Comparing (3rd) vs (4th), we see the inclusion of a cluster bonus affects performance negligibly in this case. Comparing (second worst) vs (worst), we see they are identical. Overall: The better heuristics incorporate more factors relevant to the CVRP, especially demand, depot proximity, angle to depot, clustering and diversity while also applying adaptive sparsification techniques. Clustering using K-means appears superior to cluster assignments based on angles. Normalization also helps.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a refined take on \"Current Self-Reflection\" designed to boost heuristic design, particularly for CVRP, avoiding common pitfalls:\n\n*   **Keywords:** Multifactorial, Adaptive Sparsification, Iterative Refinement, Diversity, Normalization, Clustering, Edge Importance.\n\n*   **Advice:** Develop heuristics that intelligently combine distance, demand, depot proximity, angles, and customer relationships through clustering. Use adaptive sparsification based on edge importance to focus the search. Normalize inputs and iteratively refine heuristic components based on performance analysis.\n\n*   **Avoid:** Solely relying on single-factor heuristics, neglecting data normalization, and premature convergence.\n\n*   **Explanation:** Combine relevant factors, normalize your inputs and start with a simple algorithm, then iteratively refine components using adaptive sparsification, and diversity to boost performance.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}