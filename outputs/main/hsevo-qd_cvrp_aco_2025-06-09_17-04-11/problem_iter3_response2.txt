```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, and angle.
    Sparsifies by setting low-probability edges to zero. Includes adaptive parameter tuning.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot
    depot_distances = distance_matrix[0, :]
    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances)

    # Demand Considerations
    normalized_demands = demands / capacity

    # Angle from Depot (Encourages more radial routes)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                # Vectors from depot to nodes i and j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]

                # Calculate cosine of the angle between the vectors
                dot_product = np.dot(vector_i, vector_j)
                magnitude_i = np.linalg.norm(vector_i)
                magnitude_j = np.linalg.norm(vector_j)

                if magnitude_i > 0 and magnitude_j > 0:
                    cos_angle = dot_product / (magnitude_i * magnitude_j)
                    # Ensure cos_angle is within the valid range [-1, 1] due to potential floating-point errors
                    cos_angle = np.clip(cos_angle, -1.0, 1.0)

                    # Convert cosine to angle in radians
                    angle = np.arccos(cos_angle)
                    angles[i, j] = angle
                else:
                    angles[i, j] = np.pi  # Maximum angle if a node is at the depot
    normalized_angles = angles / np.max(angles) if np.max(angles)>0 else np.zeros_like(angles)


    # Adaptive Parameter Tuning (example - can be expanded)
    alpha = 0.6  # Weight for distance
    beta = 0.3   # Weight for demand
    gamma = 0.1 # Weight for depot proximity
    delta = 0.0 # weight for angles

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            heuristic_value = (alpha * (1 / distance) +
                               beta * (1 - normalized_demands[j]) +
                               gamma * (1 - normalized_depot_distances[j]) - delta*normalized_angles[i,j])

            heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix using a more aggressive threshold (diversity maintence)
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 # Adjust the factor for different problem settings
    heuristic_matrix[heuristic_matrix < threshold] = 0 #set low probability edges to 0.


    return heuristic_matrix
```
