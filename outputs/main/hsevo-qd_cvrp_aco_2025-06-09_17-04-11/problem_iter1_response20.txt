```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP using a combination of distance, demand, and angular considerations.

    Args:
        distance_matrix: Distance matrix between nodes.
        coordinates: Coordinates of the nodes.
        demands: Demand of each node.
        capacity: Vehicle capacity.

    Returns:
        A matrix of heuristic values for each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Depot location
    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Avoid self-loops
                continue

            distance_factor = 1 / distance_matrix[i, j]

            # Demand consideration: Penalize edges connecting nodes with high demands, if close to full capacity
            demand_factor = 1 / (demands[i] + demands[j] + 1e-6) # added 1e-6 for numerical stability to avoid dividing by zero

            # Angular consideration: Prioritize nodes that are angularly closer (relative to the depot)
            # This encourages more "radial" routes from the depot
            angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)
            angle_diff = np.abs(angle_i - angle_j)
            angular_factor = 1 / (min(angle_diff, 2 * np.pi - angle_diff) + 1e-6) # Avoid division by zero

            # Combine factors
            heuristic_matrix[i, j] = distance_factor * demand_factor * angular_factor

    return heuristic_matrix
```
