```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    adaptive sparsification, clustering, edge diversity, and route shape considerations.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot (normalized and inverse)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)
    depot_proximity_factor = 1 - normalized_depot_distances #closer is better

    # Demand Considerations (normalized and impact on both nodes)
    normalized_demands = demands / capacity

    # Angle to Depot (normalized)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi

    # Customer Clustering
    cluster_assignments = np.zeros(n_nodes, dtype=int)
    num_clusters = min(4, int(np.ceil(np.sum(demands) / capacity)))

    if num_clusters > 1:
        from sklearn.cluster import KMeans
        kmeans = KMeans(n_clusters=num_clusters, random_state=0, n_init=10)
        cluster_assignments[1:] = kmeans.fit_predict(coordinates[1:]) + 1  # Cluster IDs start from 1

    # Edge Importance (Adaptive Sparsification)
    edge_importance = np.zeros_like(distance_matrix)

    # Edge Diversity Encouragement
    diversity_bonus = np.ones_like(distance_matrix)

    # Route Shape Consideration: Penalize sharp turns
    turn_penalty = np.ones_like(distance_matrix)

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue
            
            #Cluster awareness
            cluster_bonus = 1.0
            if num_clusters > 1 and cluster_assignments[i] != 0 and cluster_assignments[j] != 0 and cluster_assignments[i] == cluster_assignments[j]:
                cluster_bonus = 1.3

            #Route shape penalty
            for k in range(1, n_nodes):
                if k != i and k != j:
                    angle = np.arccos(np.clip(
                        (distance_matrix[i,j]**2 + distance_matrix[i,k]**2 - distance_matrix[j,k]**2) / (2 * distance_matrix[i,j] * distance_matrix[i,k]), -1.0, 1.0
                    ))
                    turn_penalty[i,j] *= np.exp(-2 * (abs(angle - np.pi)/np.pi)**2) #sharp turns are penalized


            heuristic_value = (1 / distance) * (1 - normalized_demands[i]) * (1 - normalized_demands[j]) * \
                              depot_proximity_factor[j] * (1 - normalized_angles[i,j]) * cluster_bonus * turn_penalty[i,j]

            heuristic_matrix[i, j] = heuristic_value
            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])

            # Edge Diversity: Encouraging dissimilar edges to node i
            for k in range(1, n_nodes):
                if k != i and k !=j:
                    similarity = np.exp(-0.5 * (distance_matrix[i,j] - distance_matrix[i,k])**2)
                    diversity_bonus[i,j] *= (1 - 0.1 * similarity)


    # Adaptive Sparsification based on edge importance
    mean_importance = np.mean(edge_importance[edge_importance > 0])
    std_importance = np.std(edge_importance[edge_importance > 0])
    threshold = mean_importance - 0.5 * std_importance
    heuristic_matrix[edge_importance < threshold] = 0

    # Sparsification based on heuristic value itself
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    heuristic_matrix = heuristic_matrix * diversity_bonus
    return heuristic_matrix
```
