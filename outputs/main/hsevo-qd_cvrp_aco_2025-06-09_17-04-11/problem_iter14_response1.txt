```python
import numpy as np
from sklearn.cluster import KMeans

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, and clustering.
    Applies adaptive sparsification.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations
    normalized_demands = demands / capacity

    # Clustering
    n_clusters = min(int(np.sqrt(n_nodes)), n_nodes - 1)  # Dynamic number of clusters
    kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init = 'auto')
    cluster_labels = kmeans.fit_predict(coordinates)

    # Edge Importance and Sparsification
    edge_importance = np.zeros_like(distance_matrix)

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            #Heuristic Value
            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])

            #Cluster Bonus: Adds a bonus if nodes are in the same cluster
            if cluster_labels[i] == cluster_labels[j] and i!=0 and j!=0:
                heuristic_value *= 1.2 #Adds 20% when the nodes are in the same cluster.
            heuristic_matrix[i, j] = heuristic_value

            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])

    #Adaptive Sparsification
    mean_importance = np.mean(edge_importance[edge_importance > 0])
    std_importance = np.std(edge_importance[edge_importance > 0])
    threshold = mean_importance - 0.5 * std_importance

    heuristic_matrix[edge_importance < threshold] = 0

    #Additional Sparsification
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    return heuristic_matrix
```
