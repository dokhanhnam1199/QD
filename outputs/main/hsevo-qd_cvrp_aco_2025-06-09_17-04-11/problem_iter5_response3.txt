```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, and adaptive sparsification.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot
    depot_distances = distance_matrix[0, :]
    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances)
    
    # Demand Considerations
    normalized_demands = demands / capacity
    
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])

            heuristic_matrix[i, j] = heuristic_value

    # Adaptive Sparsification based on edge importance
    edge_importances = heuristic_matrix[heuristic_matrix > 0]
    if edge_importances.size > 0:
        threshold = np.mean(edge_importances) + np.std(edge_importances)
        heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
