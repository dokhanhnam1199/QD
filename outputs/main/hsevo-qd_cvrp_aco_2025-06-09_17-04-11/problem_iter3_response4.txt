```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, and angle to depot.
    Sparsifies using a dynamic threshold based on edge density.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot (normalized)
    depot_distances = distance_matrix[0, :]
    max_depot_dist = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_dist if max_depot_dist>0 else np.zeros_like(depot_distances)

    # Demand Considerations (normalized)
    normalized_demands = demands / capacity

    # Angle to Depot (using coordinates)
    depot_x, depot_y = coordinates[0]
    angles = np.zeros(n_nodes)
    for i in range(1, n_nodes):
        x, y = coordinates[i]
        angle = np.arctan2(y - depot_y, x - depot_x)
        angles[i] = angle
    
    #Normalize angles
    angles = (angles - np.min(angles))/(np.max(angles) - np.min(angles)) if (np.max(angles) - np.min(angles)) > 0 else np.zeros_like(angles)

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            # Heuristic value combining various factors
            heuristic_value = (1 / distance) * \
                              (1 - normalized_demands[j]) * \
                              (1 - normalized_depot_distances[j]) * \
                              (1 - abs(angles[i] - angles[j]))  # Penalize edges between nodes with very different angles

            heuristic_matrix[i, j] = heuristic_value

    # Adaptive Sparsification based on Edge Density
    positive_edges = heuristic_matrix[heuristic_matrix > 0]
    if positive_edges.size > 0:
        threshold = np.mean(positive_edges) * 0.2 # Increased sparsification
    else:
        threshold = 0

    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
