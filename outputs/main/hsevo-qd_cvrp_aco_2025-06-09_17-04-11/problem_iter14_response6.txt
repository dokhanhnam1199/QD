```python
import numpy as np
from sklearn.cluster import KMeans

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angles, and clustering.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations
    normalized_demands = demands / capacity

    # Angle to Depot
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi

    # Clustering (Simple k-means for initialization - can be improved)
    kmeans = KMeans(n_clusters=int(np.sqrt(n_nodes)), random_state=0, n_init='auto').fit(coordinates[1:])  # Exclude depot from clustering
    cluster_labels = np.concatenate(([0], kmeans.labels_ + 1))  # Depot assigned to cluster 0
    cluster_connection_bonus = np.zeros_like(distance_matrix)
    for i in range(n_nodes):
      for j in range(n_nodes):
        if i != j:
          if cluster_labels[i] == cluster_labels[j] and cluster_labels[i] != 0:
            cluster_connection_bonus[i,j] = 0.2
          elif cluster_labels[i] != cluster_labels[j]:
            cluster_connection_bonus[i,j] = 0.1

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * (1 - normalized_angles[i,j])

            heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1
    heuristic_matrix[heuristic_matrix < threshold] = 0

    heuristic_matrix = heuristic_matrix * (1+cluster_connection_bonus)

    return heuristic_matrix
```
