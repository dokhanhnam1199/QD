```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    adaptive sparsification, clustering, and diversity to assess edge importance.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations
    normalized_demands = demands / capacity

    # Angle to Depot
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi

    # Edge Importance (Adaptive Sparsification)
    edge_importance = np.zeros_like(distance_matrix)

    # Edge Diversity Encouragement
    diversity_bonus = np.ones_like(distance_matrix)

    # Clustering (Simplified - K-means might be better in practice)
    # Assign each node to a cluster based on proximity to depot.  Nodes close to the depot
    # are in one cluster, nodes far are in another.
    depot_threshold = np.median(depot_distances[1:])  # Ignore depot-to-depot distance
    clusters = np.zeros(n_nodes, dtype=int)
    for i in range(1, n_nodes):
        if depot_distances[i] <= depot_threshold:
            clusters[i] = 0  # Close to depot
        else:
            clusters[i] = 1  # Far from depot


    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue


            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * (1 - normalized_angles[i,j])

            # Cluster affinity:  Encourage connections within the same cluster
            if clusters[i] == clusters[j] and i > 0 and j > 0: #Don't do this for the depot edge
                heuristic_value *= 1.2  # Boost intra-cluster edges


            heuristic_matrix[i, j] = heuristic_value
            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])

            # Edge Diversity: Penalize edges that are too similar to other high-value edges
            # This can be improved with more sophisticated edge feature comparisons.
            for k in range(1, n_nodes):
                if k != i and k!=j:
                    similarity = np.exp(-0.5 * ((distance_matrix[i,j] - distance_matrix[i,k])**2 + (distance_matrix[j,i] - distance_matrix[k,i])**2)) # Simplified distance similarity
                    diversity_bonus[i,j] *= (1-0.1 * similarity) # Reduce bonus if too similar to other edges related to node i

    # Adaptive Sparsification
    mean_importance = np.mean(edge_importance[edge_importance > 0])
    std_importance = np.std(edge_importance[edge_importance > 0])

    threshold = mean_importance - 0.5 * std_importance

    heuristic_matrix[edge_importance < threshold] = 0

    # Additional Sparsification based on heuristic value itself
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    heuristic_matrix = heuristic_matrix * diversity_bonus #Apply diversity bonus

    # Depot Connection Enhancement:  Ensure every node has at least one edge to the depot.
    for i in range(1, n_nodes):
        if np.sum(heuristic_matrix[i,:]) == 0 and np.sum(heuristic_matrix[:,i]) == 0:
            #No edges to depot, strongly encourage one
            heuristic_matrix[i,0] = max(heuristic_matrix[i,0], np.mean(heuristic_matrix[heuristic_matrix > 0]) * 2) #Boost depot connection
            heuristic_matrix[0,i] = max(heuristic_matrix[0,i], np.mean(heuristic_matrix[heuristic_matrix > 0]) * 2) #Boost depot connection

    return heuristic_matrix
```
