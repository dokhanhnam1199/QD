```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    and adaptive sparsification based on edge importance.  Also incorporates
    a clustering coefficient to favor edges within potential clusters.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Distance Component (Normalized)
    max_distance = np.max(distance_matrix)
    normalized_distances = distance_matrix / max_distance if max_distance > 0 else np.zeros_like(distance_matrix)
    distance_component = 1 - normalized_distances  # Prefer shorter distances

    # Demand Component (Normalized)
    normalized_demands = demands / capacity
    demand_matrix = np.tile(normalized_demands, (n_nodes, 1))
    demand_component = 1 - (demand_matrix + demand_matrix.T) / 2  # Penalize edges connecting high-demand nodes

    # Depot Proximity Component (Normalized)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)
    depot_proximity_matrix = np.tile(normalized_depot_distances, (n_nodes, 1))
    depot_proximity_component = 1 - (depot_proximity_matrix + depot_proximity_matrix.T) / 2  # Penalize edges connecting nodes far from the depot

    # Angle to Depot Component (Normalized)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]
                
                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)
                
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi
    angle_component = 1 - normalized_angles

    # Clustering Coefficient Approximation (favoring edges within clusters)
    clustering_component = np.zeros_like(distance_matrix)
    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            # Count common neighbors (excluding the depot)
            common_neighbors = 0
            for k in range(1, n_nodes):
                if k != i and k != j and distance_matrix[i, k] < max_distance/3 and distance_matrix[j, k] < max_distance/3:  #proximity check
                    common_neighbors += 1

            # Assign a higher clustering coefficient if there are common neighbors
            clustering_component[i, j] = common_neighbors
            clustering_component[j, i] = common_neighbors

    max_clustering = np.max(clustering_component)
    if max_clustering > 0:
        clustering_component = clustering_component / max_clustering # Normalize clustering
    
    # Combine Components (weighted sum)
    heuristic_matrix = (
        0.4 * distance_component +
        0.2 * demand_component +
        0.1 * depot_proximity_component +
        0.1 * angle_component +
        0.2 * clustering_component
    )

    # Adaptive Sparsification based on Edge Importance
    edge_importance = (demands[None, :] + demands[:, None]) / (distance_matrix + 1e-6)  # Avoid division by zero

    mean_importance = np.mean(edge_importance[edge_importance > 0])
    std_importance = np.std(edge_importance[edge_importance > 0])
    threshold = mean_importance - 0.5 * std_importance

    heuristic_matrix[edge_importance < threshold] = 0

    #Further Sparsification
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    # Ensure that the heuristic matrix is symmetric and that the diagonal is zero
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
