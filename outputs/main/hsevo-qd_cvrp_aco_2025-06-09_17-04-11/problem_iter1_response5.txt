```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Combines distance, demand, and angular information to create prior indicators for edge inclusion.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate angular cost relative to the depot
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Disallow self-loops
                continue

            distance_cost = distance_matrix[i, j]
            demand_factor = (demands[i] + demands[j]) / capacity  # Demand relative to capacity

            # Angular cost: Penalize large angular jumps, especially near the depot
            angle_diff = np.abs(angles[i] - angles[j])
            angular_cost = min(angle_diff, 2 * np.pi - angle_diff)

            # Combine factors, emphasizing distance but considering demand and angular cost
            heuristic_matrix[i, j] = 1 / (distance_cost * (1 + demand_factor)**2 * (1 + angular_cost)**1.5)


    return heuristic_matrix
```
