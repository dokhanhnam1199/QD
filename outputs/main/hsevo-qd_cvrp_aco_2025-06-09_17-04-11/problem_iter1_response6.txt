```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates distance, demand, and geometric factors to estimate the
    promise of including each edge in a solution.  It prioritizes shorter distances
    between nodes with compatible demands, and also considers node proximity to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                      Same shape as the distance_matrix.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters (tune these!)
    distance_weight = 1.0
    demand_weight = 0.5
    depot_proximity_weight = 0.2
    demand_compatibility_threshold = 0.8 #nodes are compatible if together their demands don't exceed this % of capacity

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops
                # Distance factor: shorter distances are more promising
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor: favor edges between nodes with compatible demands.
                # Demand "compatibility" is higher if the combined demand is small compared to capacity

                demand_compatibility = 1.0 - min(1.0, (demands[i] + demands[j]) / capacity)
                demand_factor = demand_compatibility # Higher value means better compability

                # Depot proximity factor: reward connections to nodes closer to the depot (node 0).
                depot_proximity = (1 / (distance_matrix[0, i] + 1e-9)) + (1 / (distance_matrix[0, j] + 1e-9)) #avoid div 0

                # Combine the factors
                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor +
                    demand_weight * demand_factor +
                    depot_proximity_weight * depot_proximity
                )
            else:
                heuristic_matrix[i, j] = 0.0

    return heuristic_matrix
```
