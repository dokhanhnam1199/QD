import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int,
                   importance_factor: float = 0.833695691040818, heuristic_value_threshold_factor: float = 0.29506950562402073) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, and angle to depot.
    Sparsifies adaptively based on edge importance and instance characteristics.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot (Prioritized)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations (Prioritized)
    normalized_demands = demands / capacity
    
    # Angle to Depot (Encourages radial routes)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]
                
                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)
                
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip for numerical stability
                else:
                    angles[i, j] = np.pi  # Maximum angle if a node is at the depot
    normalized_angles = angles / np.pi  # Normalize to [0, 1]

    # Edge Importance (Adaptive Sparsification)
    edge_importance = np.zeros_like(distance_matrix)

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * (1 - normalized_angles[i,j])

            heuristic_matrix[i, j] = heuristic_value
            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])  # Example: inversely proportional to distance, proportional to combined demand

    # Adaptive Sparsification
    mean_importance = np.mean(edge_importance[edge_importance > 0])
    std_importance = np.std(edge_importance[edge_importance > 0])

    #Dynamic threshold based on importance
    threshold = mean_importance - importance_factor * std_importance  # Tune the factor based on performance

    heuristic_matrix[edge_importance < threshold] = 0
    
    #Further sparsification based on the heuristic value to limit the search space
    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * heuristic_value_threshold_factor
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0

    return heuristic_matrix
