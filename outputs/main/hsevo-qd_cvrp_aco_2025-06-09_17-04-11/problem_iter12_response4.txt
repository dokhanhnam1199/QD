```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    adaptive sparsification, diversity, and clustering influence to assess edge importance.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # 1. Distance Factor (Normalized Inverse Distance)
    max_distance = np.max(distance_matrix)
    normalized_distance = distance_matrix / max_distance
    distance_factor = 1 - normalized_distance

    # 2. Demand Factor (Penalize Edges to High-Demand Nodes)
    normalized_demands = demands / capacity
    demand_factor = np.ones_like(distance_matrix)
    for i in range(n_nodes):
        for j in range(n_nodes):
            demand_factor[i, j] = 1 - (normalized_demands[i] + normalized_demands[j]) / 2 # Average demand influence

    # 3. Depot Proximity Factor (Encourage Connections near the Depot)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)
    depot_proximity_factor = np.ones_like(distance_matrix)
    for i in range(n_nodes):
        for j in range(n_nodes):
            depot_proximity_factor[i, j] = 1 - (normalized_depot_distances[i] + normalized_depot_distances[j]) / 2

    # 4. Angle Factor (Penalize Sharp Turns Away From Depot)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]

                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi
    angle_factor = 1 - normalized_angles

    # 5. Clustering Influence (Encourage edges within clusters - simplified example)
    #  - Simplest clustering is just proximity. A more advanced method would be preferred.

    proximity_clusters = np.zeros((n_nodes, n_nodes))
    for i in range(1,n_nodes):
        for j in range(1,n_nodes):
            if i!=j:
                proximity_clusters[i,j] = np.exp(-distance_matrix[i,j]/ (0.1 * max_distance)) #High values if nodes are close

    clustering_factor = proximity_clusters


    # 6. Edge Diversity Encouragement (Penalize Similar Edges)
    diversity_bonus = np.ones_like(distance_matrix)
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            for k in range(1, n_nodes):
                if k != i and k != j:
                    similarity = np.exp(-0.5 * ((distance_matrix[i, j] - distance_matrix[i, k]) ** 2 + (distance_matrix[j, i] - distance_matrix[k, i]) ** 2) / (max_distance**2)) # distance similarity
                    diversity_bonus[i, j] *= (1 - 0.1 * similarity)  # Reduce bonus if too similar to other edges related to node i

    # Combine all factors
    heuristic_matrix = distance_factor * demand_factor * depot_proximity_factor * angle_factor * clustering_factor * diversity_bonus

    # Adaptive Sparsification (Threshold based on mean and std)
    mean_heuristic = np.mean(heuristic_matrix[heuristic_matrix > 0])
    std_heuristic = np.std(heuristic_matrix[heuristic_matrix > 0])
    threshold = mean_heuristic - 0.5 * std_heuristic
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Further sparsification based on a small percentage of the maximum heuristic value
    heuristic_threshold = np.max(heuristic_matrix) * 0.01
    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0
    return heuristic_matrix
```
