{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 4th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 5th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 6th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 7th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 8th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 9th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 10th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes.\n        coordinates (np.ndarray): Coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances) #Avoid division by zero.\n    \n    # Demand Considerations\n    normalized_demands = demands / capacity\n    \n    # Edge Heuristic Calculation\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n            \n            # Avoid division by zero when distance is zero\n            if distance == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n                \n            # Favor shorter distances and nodes closer to the depot\n            # Penalize higher demand nodes, and those farther away from the depot\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 11th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 14th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}