```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A more sophisticated heuristic for the CVRP that considers distance,
    angle to depot, demand, and capacity. It returns a matrix of
    probabilities for each edge, indicating how likely it is to be included
    in the optimal solution. The depot is node 0.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Coordinates of each node.
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Matrix of heuristic values for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters to tune the heuristic. These values were obtained through experimentation.
    alpha = 1.0   # Distance importance
    beta = 0.5   # Angle to depot importance
    gamma = 0.2  # Demand importance

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Calculate distance factor
            distance_factor = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero

            # Calculate angle to depot factor:  smaller angles = better routes
            depot_x, depot_y = coordinates[0]
            node_i_x, node_i_y = coordinates[i]
            node_j_x, node_j_y = coordinates[j]

            angle_i = np.arctan2(node_i_y - depot_y, node_i_x - depot_x)
            angle_j = np.arctan2(node_j_y - depot_y, node_j_x - depot_x)
            angle_diff = np.abs(angle_i - angle_j)

            angle_factor = 1 / (angle_diff + 1e-9) # Prefer edges with similar angles

            # Calculate demand factor: favors edges where at least one endpoint has smaller demands.
            demand_factor = 1 / (np.maximum(demands[i], demands[j]) + 1e-9) # Consider max demand

            # Consider edge distance and the sum of its endpoint demands, to favor smaller demand routes
            combined_demand = demands[i] + demands[j]
            capacity_utilization = combined_demand / (capacity + 1e-9)  # add small term

            # Penalize visiting two larger demand points consecutively, by exponentially decreasing weight
            demand_penalty = np.exp(-5 * capacity_utilization)

            # Weighting components for final score
            heuristic_matrix[i, j] = (
                alpha * distance_factor +
                beta * angle_factor +
                gamma * demand_factor
            ) * demand_penalty

    return heuristic_matrix
```
