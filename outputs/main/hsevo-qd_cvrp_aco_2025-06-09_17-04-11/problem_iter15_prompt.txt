{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    CVRP heuristic: Combines distance, demand, depot proximity, angle,\n    adaptive sparsification, clustering, and edge diversity.\n    \"\"\"\n    n_nodes = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Node Proximity to Depot (normalized)\n    depot_distances = distance_matrix[0, :]\n    max_depot_distance = np.max(depot_distances)\n    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)\n\n    # Demand Considerations (normalized)\n    normalized_demands = demands / capacity\n\n    # Angle to Depot (normalized)\n    angles = np.zeros((n_nodes, n_nodes))\n    for i in range(1, n_nodes):\n        for j in range(1, n_nodes):\n            if i != j:\n                vec_i = coordinates[i] - coordinates[0]\n                vec_j = coordinates[j] - coordinates[0]\n\n                norm_i = np.linalg.norm(vec_i)\n                norm_j = np.linalg.norm(vec_j)\n\n                if norm_i > 0 and norm_j > 0:\n                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)\n                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))\n                else:\n                    angles[i, j] = np.pi\n    normalized_angles = angles / np.pi\n\n    # Customer Clustering (Simplified - can be enhanced)\n    cluster_assignments = np.zeros(n_nodes, dtype=int)\n    num_clusters = min(4, int(np.ceil(np.sum(demands) / capacity))) # Aim for a few clusters based on total demand\n\n    if num_clusters > 1:\n        angles_to_depot = np.arctan2(coordinates[1:, 1] - coordinates[0, 1], coordinates[1:, 0] - coordinates[0, 0])\n        angles_to_depot = (angles_to_depot + np.pi) % (2 * np.pi)  # Normalize to 0-2pi\n        angle_increments = np.linspace(0, 2 * np.pi, num_clusters + 1)\n\n        for i in range(1, n_nodes):\n            for k in range(num_clusters):\n                if angle_increments[k] <= angles_to_depot[i-1] < angle_increments[k+1]:\n                    cluster_assignments[i] = k\n\n    # Edge Importance (Adaptive Sparsification)\n    edge_importance = np.zeros_like(distance_matrix)\n\n    # Edge Diversity Encouragement\n    diversity_bonus = np.ones_like(distance_matrix)\n\n    for i in range(n_nodes):\n        for j in range(n_nodes):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            if distance == 0:\n                continue\n\n            # Cluster Awareness: Favor edges within the same cluster\n            cluster_bonus = 1.0\n            if num_clusters > 1 and cluster_assignments[i] != 0 and cluster_assignments[j] != 0 and cluster_assignments[i] == cluster_assignments[j]:\n                cluster_bonus = 1.2  # Increase weight if nodes are in the same cluster\n\n            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j]) * (1 - normalized_angles[i,j]) * cluster_bonus\n\n            heuristic_matrix[i, j] = heuristic_value\n            edge_importance[i, j] = (1 / distance) * (demands[i] + demands[j])\n\n            # Edge Diversity: Penalize edges that are too similar to other high-value edges\n            # This can be improved with more sophisticated edge feature comparisons.\n            for k in range(1, n_nodes):\n                if k != i and k!=j:\n                    similarity = np.exp(-0.5 * ((distance_matrix[i,j] - distance_matrix[i,k])**2 + (distance_matrix[j,i] - distance_matrix[k,i])**2)) # Simplified distance similarity\n                    diversity_bonus[i,j] *= (1-0.1 * similarity) # Reduce bonus if too similar to other edges related to node i\n\n    # Adaptive Sparsification\n    mean_importance = np.mean(edge_importance[edge_importance > 0])\n    std_importance = np.std(edge_importance[edge_importance > 0])\n\n    threshold = mean_importance - 0.5 * std_importance\n\n    heuristic_matrix[edge_importance < threshold] = 0\n\n    # Additional Sparsification based on heuristic value itself\n    heuristic_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1\n    heuristic_matrix[heuristic_matrix < heuristic_threshold] = 0\n\n    heuristic_matrix = heuristic_matrix * diversity_bonus #Apply diversity bonus\n\n    return heuristic_matrix\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a refined take on \"Current Self-Reflection\" designed to boost heuristic design, particularly for CVRP, avoiding common pitfalls:\n\n*   **Keywords:** Multifactorial, Adaptive Sparsification, Iterative Refinement, Diversity, Normalization, Clustering, Edge Importance.\n\n*   **Advice:** Develop heuristics that intelligently combine distance, demand, depot proximity, angles, and customer relationships through clustering. Use adaptive sparsification based on edge importance to focus the search. Normalize inputs and iteratively refine heuristic components based on performance analysis.\n\n*   **Avoid:** Solely relying on single-factor heuristics, neglecting data normalization, and premature convergence.\n\n*   **Explanation:** Combine relevant factors, normalize your inputs and start with a simple algorithm, then iteratively refine components using adaptive sparsification, and diversity to boost performance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}