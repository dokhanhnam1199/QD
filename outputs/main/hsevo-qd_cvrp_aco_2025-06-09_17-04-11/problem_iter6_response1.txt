```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, depot proximity, angle,
    and adaptive sparsification based on edge importance, with iterative refinement.
    """
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Node Proximity to Depot (normalized)
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / max_depot_distance if max_depot_distance > 0 else np.zeros_like(depot_distances)

    # Demand Considerations (normalized)
    normalized_demands = demands / capacity
    
    # Angle to Depot (normalized)
    angles = np.zeros((n_nodes, n_nodes))
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]
                
                norm_i = np.linalg.norm(vec_i)
                norm_j = np.linalg.norm(vec_j)
                
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                else:
                    angles[i, j] = np.pi
    normalized_angles = angles / np.pi
    
    # Heuristic combination with adjusted weights
    alpha = 0.5  # Distance weight
    beta = 0.2   # Demand weight
    gamma = 0.1  # Depot proximity weight
    delta = 0.2  # Angle weight

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            heuristic_value = (alpha / distance) + (beta * (1 - normalized_demands[j])) + \
                              (gamma * (1 - normalized_depot_distances[j])) + (delta * (1 - normalized_angles[i, j]))

            heuristic_matrix[i, j] = heuristic_value

    # Adaptive Sparsification based on heuristic values
    mean_heuristic = np.mean(heuristic_matrix[heuristic_matrix > 0]) if np.any(heuristic_matrix > 0) else 0
    std_heuristic = np.std(heuristic_matrix[heuristic_matrix > 0]) if np.any(heuristic_matrix > 0) else 0

    # Dynamic threshold calculation: Aiming for a balance
    threshold = mean_heuristic - 0.7 * std_heuristic  # Adjust 0.7 as needed

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Secondary sparsification based on combined demand of nodes on edge.
    demand_threshold = np.mean(demands) # Dynamic threshold based on average demand

    for i in range(n_nodes):
      for j in range(n_nodes):
        if i!=j and heuristic_matrix[i,j] > 0 and (demands[i] + demands[j] > 2 * demand_threshold): #More aggressively cut when both have high demands.
          heuristic_matrix[i,j] = 0

    return heuristic_matrix
```
