```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Newtonian Heuristics for Capacitated Vehicle Routing Problem (CVRP)

    This function provides prior indicators of how promising it is to include each edge
    in a solution, considering distance, demand, and vehicle capacity.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators (n x n) of edge suitability.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance with Gravity-inspired adjustment
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Avoid division by zero
    # The smaller the distance the bigger value the heuristics

    # 2. Demand-Aware Adjustment
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Scale the heuristic by the inverse of combined demand, making it less
                # attractive to link high-demand nodes together.
                # Apply damping factor to prevent excessive penalization from demands
                combined_demand_penalty = 1 / (demands[i] + demands[j] + 1e-9)  # Avoid div by 0
                heuristic_matrix[i, j] *= combined_demand_penalty # penalize bigger demand links

    # 3. Depot Proximity Bonus
    depot_index = 0  # Assuming depot is at index 0

    for i in range(n):
        if i != depot_index:
           # The nearer the customer to the depot is, the easier this node could
           # make an indirect link to another node via the depot
            heuristic_matrix[depot_index, i] *= 1.2  # slight bonus to depot links, so can make easier return path to the depot
            heuristic_matrix[i, depot_index] *= 1.2 # slight bonus to depot links

    # 4. Capacity Utilization Incentive (depot connection reward when demand far from capacity)
    average_demand = np.mean(demands[1:])  # Ignore depot demand (usually 0)
    capacity_ratio = average_demand / capacity

    for i in range(1, n):  # Exclude depot from this adjustment
        demand_difference = abs(demands[i] - average_demand)
        heuristic_matrix[depot_index, i] += 0.1*(1 - demand_difference / max(average_demand, 1e-9)) #reward when near average demand
        heuristic_matrix[i, depot_index] +=  0.1*(1 - demand_difference / max(average_demand, 1e-9)) #reward when near average demand



    # 5. Normalization and Clipping - keeps values in a reasonable range and avoid too many 0s and large positive numbers
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)  # ensure indicator within [0, 1]
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)

    return heuristic_matrix
```
