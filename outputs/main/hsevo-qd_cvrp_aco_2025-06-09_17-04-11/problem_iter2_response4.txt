```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Combines distance, demand, depot proximity, and sparsification."""
    n_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    depot_distances = distance_matrix[0, :]
    normalized_depot_distances = depot_distances / np.max(depot_distances) if np.max(depot_distances)>0 else np.zeros_like(depot_distances)
    normalized_demands = demands / capacity

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            if distance == 0:
                continue

            heuristic_value = (1 / distance) * (1 - normalized_demands[j]) * (1 - normalized_depot_distances[j])

            heuristic_matrix[i, j] = heuristic_value

    # Sparsify: zero out edges deemed unlikely (long distances, high demand at both ends)
    distance_threshold = np.mean(distance_matrix) + np.std(distance_matrix)
    demand_threshold = 0.8 # Only allow edges to nodes with demand less than 80% capacity.

    for i in range(n_nodes):
        for j in range(n_nodes):
            if distance_matrix[i, j] > distance_threshold or normalized_demands[i] > demand_threshold or normalized_demands[j] > demand_threshold :
                heuristic_matrix[i, j] = 0 # remove edge

    return heuristic_matrix
```
