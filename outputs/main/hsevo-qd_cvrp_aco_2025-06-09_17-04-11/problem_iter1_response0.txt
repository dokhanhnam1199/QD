```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic for the Capacitated Vehicle Routing Problem (CVRP) based on a combination of distance,
    demand, and depot proximity.  It aims to prioritize shorter edges that connect nodes with
    compatible demands and are relatively close to the depot.

    Args:
        distance_matrix (np.ndarray):  A matrix of pairwise distances between nodes.
        coordinates (np.ndarray):  Euclidean coordinates of the nodes.
        demands (np.ndarray):  Demands of each customer node. The depot (node 0) has demand 0.
        capacity (int):  The capacity of each vehicle.

    Returns:
        np.ndarray:  A matrix of heuristic values, the same shape as distance_matrix,
                      indicating the desirability of including each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (can be tuned)
    distance_weight = 1.0  # Controls the importance of distance
    demand_weight = 0.5    # Controls the importance of demand compatibility
    depot_proximity_weight = 0.5  # Controls the importance of depot proximity
    capacity_threshold = 0.8 # Reduce heuristic if remaining capacity less than this

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Distance component: Inverse distance, so shorter edges are preferred
            distance_heuristic = 1 / (distance_matrix[i, j] + 1e-9)  # Add a small constant to avoid division by zero

            # Demand component:  Favor edges that connect nodes whose combined demand
            # is less than the vehicle capacity. If one of the nodes is depot, consider
            # only the demand of the other.
            if i == 0:
                demand_heuristic = 1.0 if demands[j] <= capacity else 0.0
            elif j == 0:
                 demand_heuristic = 1.0 if demands[i] <= capacity else 0.0
            else:
                demand_heuristic = 1.0 if demands[i] + demands[j] <= capacity else 0.0

            #Depot Proximity
            depot_i_distance = distance_matrix[0, i]
            depot_j_distance = distance_matrix[0, j]
            depot_proximity_heuristic = 1 / (depot_i_distance + depot_j_distance + 1e-9)


            heuristic_matrix[i, j] = (distance_weight * distance_heuristic +
                                       demand_weight * demand_heuristic +
                                       depot_proximity_weight * depot_proximity_heuristic)

    return heuristic_matrix
```
