```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improves upon the trivial heuristic by considering distance, demand, and geometric proximity.
    It combines several factors to estimate the desirability of including each edge in a route.

    Args:
        distance_matrix: (n x n) matrix of distances between nodes.
        coordinates: (n x 2) matrix of Euclidean coordinates for each node.
        demands: (n) vector of demands for each node.
        capacity: Vehicle capacity.

    Returns:
        (n x n) matrix of heuristic scores for each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate a demand-based heuristic
    demand_factor = np.outer(demands, demands) / (capacity**2)  # Penalty if both nodes have high demand

    # Geometrical proximity consideration
    centrality = np.linalg.norm(coordinates - coordinates.mean(axis=0), axis=1)
    centrality_factor = np.outer(centrality, centrality)

    # Combined heuristic
    heuristic_matrix = (1 / (distance_matrix + 1e-9)) * (1 - demand_factor) / (centrality_factor + 1e-9)

    # Prioritize edges connected to the depot (node 0)
    heuristic_matrix[0, :] = heuristic_matrix[0, :] * 2  # Increase attractiveness
    heuristic_matrix[:, 0] = heuristic_matrix[:, 0] * 2 # Increase attractiveness

    # Avoid edges between nodes with very high demand in one route.
    for i in range(n):
      for j in range(n):
          if demands[i] + demands[j] > capacity:
              heuristic_matrix[i, j] /= 2

    # Normalize to [0, 1]
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
      heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
      heuristic_matrix = np.ones_like(heuristic_matrix)

    return heuristic_matrix
```
