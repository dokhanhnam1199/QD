{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy prioritizes bins that offer a tight fit (minimizing leftover capacity)\n    while also considering bins that might accommodate future items better by leaving\n    a moderate amount of space. It uses a soft-max like approach to create relative\n    priorities and a small penalty for bins that would be *too* full after packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit, return all zeros\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n\n    # Calculate potential remaining capacities after fitting the item\n    remaining_after_fit = fitting_bins_caps - item\n\n    # Strategy: Prioritize bins that result in a remaining capacity that is \"just right\".\n    # This means not too much space left (avoiding \"First Fit\" tendencies for large remaining capacity)\n    # and not too little space left (avoiding \"Worst Fit\" where there's barely any space).\n    # We can model this using a Gaussian-like function centered around a \"good\" remaining capacity.\n    # A good remaining capacity could be a small fraction of the bin's original capacity,\n    # or a small fixed amount. Let's consider a target remaining capacity.\n    # For simplicity, let's aim for remaining capacity that is small but not zero.\n    # A simple approach: maximize priority when remaining_after_fit is small, but\n    # penalize very small remaining capacities.\n\n    # Option 1: Favor small remaining capacity, but penalize zero or very small remaining.\n    # A log-like function can achieve this: log(1 + x) increases with x, but at a decreasing rate.\n    # We want to minimize remaining_after_fit, so we take the inverse.\n    # To avoid division by zero for remaining_after_fit == 0, we can use 1 + remaining_after_fit.\n    # A small positive remaining capacity is ideal (tightest fit without being *too* tight).\n    # We can penalize bins where remaining_after_fit is very small to avoid \"Worst Fit\" issues.\n    # Let's define a score that is high for small remaining_after_fit, but drops off as it approaches zero.\n    # We can use 1 / (1 + remaining_after_fit) for the \"best fit\" aspect.\n    # To penalize being *too* full (e.g., remaining_after_fit < 1e-6), we can introduce a penalty.\n\n    # Score that favors small remaining capacity. Add a small epsilon to avoid division by zero.\n    base_scores = 1.0 / (1.0 + remaining_after_fit + 1e-6)\n\n    # Penalty for being too full (very small remaining capacity)\n    # This encourages leaving a small but non-zero gap.\n    too_full_penalty = np.zeros_like(fitting_bins_caps)\n    too_full_threshold = 0.05 # e.g., 5% of item size or a small absolute value\n    too_full_mask = remaining_after_fit < too_full_threshold\n    too_full_penalty[too_full_mask] = (too_full_threshold - remaining_after_fit[too_full_mask]) / too_full_threshold\n\n    # Combine scores: high priority for tight fits, with a penalty for being *too* tight.\n    # We want to subtract the penalty from the base score.\n    combined_scores = base_scores - (0.5 * too_full_penalty)\n\n    # A small diversification factor inspired by softmax to create relative differences\n    # Softmax ensures that scores are positive and sum to 1 (or can be scaled to do so).\n    # Using it here can help break ties and introduce some probabilistic selection.\n    # Adding a small constant before softmax to avoid issues with all scores being equal.\n    diversification_scores = np.exp(combined_scores + np.random.normal(0, 0.1, len(combined_scores)))\n    # Normalize to create relative probabilities, could be used directly as priorities\n    normalized_diversification = diversification_scores / np.sum(diversification_scores)\n    # Or, use combined_scores directly and normalize if needed, but raw scores are often fine for priority.\n\n    # Let's assign the combined_scores directly as priorities, possibly scaled.\n    # Scale scores to a reasonable range, e.g., 0-1.\n    # Ensure no negative priorities if penalty was too strong.\n    final_priorities = np.maximum(0, combined_scores)\n\n    # Assign the calculated scores to the corresponding bins\n    priorities[can_fit_mask] = final_priorities\n\n    # Ensure bins that cannot fit have a priority of 0\n    priorities[~can_fit_mask] = 0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy prioritizes bins that offer a \"tight fit\" (minimizing leftover capacity)\n    while also encouraging exploration by giving a slight boost to bins that are not too full,\n    leaving more room for potentially larger future items. It also introduces a mechanism\n    to avoid bins that are *too* close to being full, which might prevent fitting\n    future items of moderate size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit, return all zeros\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n\n    # Strategy 1: Tight Fit - prioritize bins that will have the least remaining capacity.\n    # This aims to minimize waste. We want smaller remaining capacity to get higher scores.\n    # Adding 1.0 to the denominator avoids division by zero and scales scores to be positive.\n    remaining_after_fit = fitting_bins_caps - item\n    tight_fit_scores = 1.0 / (1.0 + remaining_after_fit)\n\n    # Strategy 2: Room for Future Items - prioritize bins that have substantial remaining capacity,\n    # but not so much that they are inefficiently used by this item.\n    # This prevents over-prioritizing bins that are almost empty.\n    # We define \"good room\" as having remaining capacity that is significantly larger than the item,\n    # but not excessively large. A simple heuristic could be remaining capacity in the middle range.\n    # Let's consider bins with remaining capacity greater than item * 2 but less than bin_capacity / 2.\n    # This is a tunable parameter. For simplicity here, let's boost bins that have\n    # a moderate amount of remaining space after fitting.\n    # A bin with remaining capacity = item is the \"tightest\" fit, score = 1.\n    # A bin with remaining capacity = item * 2 is a \"good fit\", score is lower.\n    # We can inversely relate to remaining_after_fit, but ensure it's not too large.\n    # Let's create a score that is higher for intermediate remaining capacities.\n    # For example, a quadratic function peaking at some intermediate remaining capacity.\n    # A simpler approach: slightly boost bins that aren't *just* barely fitting.\n    # Let's give a slight positive score for bins that have remaining_after_fit > 0.\n    # This is to encourage using bins that have some \"slack\".\n    exploration_boost = 0.1  # Small boost for having some remaining space\n    exploration_scores = np.zeros_like(fitting_bins_caps)\n    exploration_scores[remaining_after_fit > 0] = exploration_boost\n\n    # Strategy 3: Avoid Over-filling \"Almost Full\" Bins -\n    # Slightly penalize bins that would become *extremely* full if the item is added,\n    # if they were already very close to capacity.\n    # This is to prevent situations where a bin is filled to 99% with a small item,\n    # making it impossible to fit even a moderately sized future item.\n    # Let's define \"almost full\" as remaining_after_fit < a small epsilon.\n    # The penalty should be proportional to how \"full\" it gets.\n    epsilon = 0.05 # A small threshold for \"almost full\"\n    penalty_factor = 0.5\n    penalty_scores = np.zeros_like(fitting_bins_caps)\n    almost_full_condition = (remaining_after_fit < epsilon) & (fitting_bins_caps > epsilon) # Ensure it's not an empty bin\n    # Penalize more if the remaining capacity after fit is very small\n    penalty_scores[almost_full_condition] = -penalty_factor * (epsilon - remaining_after_fit[almost_full_condition]) / epsilon\n\n\n    # Combine scores. Prioritize tight fits, give a small boost for having room, and penalize very tight fits.\n    # Weights are chosen heuristically.\n    combined_scores = (0.8 * tight_fit_scores) + (0.2 * exploration_scores) + penalty_scores\n\n    # Assign the calculated scores to the corresponding bins\n    priorities[can_fit_mask] = combined_scores\n\n    # Ensure bins that cannot fit have a priority of 0 (already handled by initialization and mask)\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, but penalize being *too* tight. Balance with exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}