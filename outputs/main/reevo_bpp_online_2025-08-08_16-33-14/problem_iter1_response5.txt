```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The priority is higher for bins that are a closer fit to the item's size.
    Specifically, it calculates 1 / (1 + |remaining_capacity - item_size|) for bins
    where remaining_capacity >= item_size. For bins that cannot fit the item,
    the priority is 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Find bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate the difference between remaining capacity and item size for fitting bins
    diffs = bins_remain_cap[can_fit_mask] - item
    
    # Calculate priority using inverse distance: 1 / (1 + absolute difference)
    # Adding 1 to the denominator to avoid division by zero if diff is 0.
    priorities[can_fit_mask] = 1.0 / (1.0 + np.abs(diffs))
    
    return priorities
```
