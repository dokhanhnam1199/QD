```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First strategy prioritizes bins that can accommodate the item
    with the least amount of remaining space after the item is placed. This
    aims to "fill up" bins as much as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the remaining capacity if the item were placed in each bin
    # Only consider bins where the item *can* fit
    potential_remaining_caps = bins_remain_cap - item
    
    # A large negative value means the item doesn't fit in this bin.
    # We want to prioritize bins that leave the *smallest* positive remainder.
    # So, we can assign a very low priority to bins where the item doesn't fit.
    # For bins where it fits, the priority will be related to the negative of
    # the remaining space (or rather, the closeness to zero of the remainder).
    
    # Initialize priorities to a very low value (representing "not a good fit")
    priorities = -np.inf
    
    # Find indices of bins where the item fits
    can_fit_indices = np.where(bins_remain_cap >= item)[0]
    
    # For bins where the item fits, calculate the "tightness" of the fit.
    # A smaller remaining capacity is a higher priority.
    # We want the negative of the remaining capacity, so a smaller positive
    # remaining capacity results in a higher (less negative) priority score.
    if len(can_fit_indices) > 0:
        remaining_after_fit = bins_remain_cap[can_fit_indices] - item
        # We want the exact fit, meaning the smallest remaining capacity.
        # So, we assign a priority based on the negative of this remaining capacity.
        # The bin with the smallest remaining capacity will have the highest (least negative) score.
        priorities[can_fit_indices] = -remaining_after_fit
        
    return priorities
```
