{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize tight fits by minimizing leftover capacity. Explore diverse bin selection strategies. Balance exploiting near-perfect fits with exploring options that leave room for future items. Avoid numerical instability.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy combines the \"Best Fit\" approach (minimizing remaining capacity)\n    with a stochastic element to encourage exploration of less obviously optimal bins.\n    It also prioritizes bins that are \"almost full\" to potentially group smaller items\n    more efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit, return all zeros\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n\n    # Strategy 1: Best Fit - prioritize bins that will have the least remaining capacity\n    # This is a common greedy strategy for BPP.\n    remaining_after_fit = fitting_bins_caps - item\n    # We want to minimize remaining_after_fit, so higher priority for smaller remaining capacity.\n    # Add a small constant to avoid division by zero if remaining_after_fit is 0.\n    best_fit_scores = 1.0 / (1.0 + remaining_after_fit)\n\n    # Strategy 2: \"Almost Full\" bins - prioritize bins that are very close to being full\n    # This can help consolidate smaller items and leave larger capacities open.\n    # We define \"almost full\" as having a remaining capacity between 0 and a small threshold.\n    almost_full_threshold = 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1\n    almost_full_mask_subset = (fitting_bins_caps > 0) & (fitting_bins_caps <= almost_full_threshold)\n    almost_full_scores = np.zeros_like(fitting_bins_caps)\n    almost_full_scores[almost_full_mask_subset] = 0.5 # Assign a moderate priority\n\n    # Strategy 3: Exploration - add a small random component to encourage trying different bins\n    # This is inspired by exploration in reinforcement learning.\n    exploration_factor = 0.1\n    random_scores = np.random.rand(len(fitting_bins_caps)) * exploration_factor\n\n    # Combine scores. A bin is good if it's a good best-fit OR it's almost full.\n    # We use a weighted sum, prioritizing best fit more.\n    combined_scores = (0.7 * best_fit_scores) + (0.3 * almost_full_scores) + random_scores\n\n    # Assign the calculated scores to the corresponding bins\n    priorities[can_fit_mask] = combined_scores\n\n    # Ensure bins that cannot fit have a priority of 0\n    priorities[~can_fit_mask] = 0\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}