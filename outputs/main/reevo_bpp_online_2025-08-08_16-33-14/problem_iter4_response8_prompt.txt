{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy prioritizes bins that offer a \"tight fit\" (minimizing leftover capacity)\n    while also encouraging exploration by giving a slight boost to bins that are not too full,\n    leaving more room for potentially larger future items. It also introduces a mechanism\n    to avoid bins that are *too* close to being full, which might prevent fitting\n    future items of moderate size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit, return all zeros\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n\n    # Strategy 1: Tight Fit - prioritize bins that will have the least remaining capacity.\n    # This aims to minimize waste. We want smaller remaining capacity to get higher scores.\n    # Adding 1.0 to the denominator avoids division by zero and scales scores to be positive.\n    remaining_after_fit = fitting_bins_caps - item\n    tight_fit_scores = 1.0 / (1.0 + remaining_after_fit)\n\n    # Strategy 2: Room for Future Items - prioritize bins that have substantial remaining capacity,\n    # but not so much that they are inefficiently used by this item.\n    # This prevents over-prioritizing bins that are almost empty.\n    # We define \"good room\" as having remaining capacity that is significantly larger than the item,\n    # but not excessively large. A simple heuristic could be remaining capacity in the middle range.\n    # Let's consider bins with remaining capacity greater than item * 2 but less than bin_capacity / 2.\n    # This is a tunable parameter. For simplicity here, let's boost bins that have\n    # a moderate amount of remaining space after fitting.\n    # A bin with remaining capacity = item is the \"tightest\" fit, score = 1.\n    # A bin with remaining capacity = item * 2 is a \"good fit\", score is lower.\n    # We can inversely relate to remaining_after_fit, but ensure it's not too large.\n    # Let's create a score that is higher for intermediate remaining capacities.\n    # For example, a quadratic function peaking at some intermediate remaining capacity.\n    # A simpler approach: slightly boost bins that aren't *just* barely fitting.\n    # Let's give a slight positive score for bins that have remaining_after_fit > 0.\n    # This is to encourage using bins that have some \"slack\".\n    exploration_boost = 0.1  # Small boost for having some remaining space\n    exploration_scores = np.zeros_like(fitting_bins_caps)\n    exploration_scores[remaining_after_fit > 0] = exploration_boost\n\n    # Strategy 3: Avoid Over-filling \"Almost Full\" Bins -\n    # Slightly penalize bins that would become *extremely* full if the item is added,\n    # if they were already very close to capacity.\n    # This is to prevent situations where a bin is filled to 99% with a small item,\n    # making it impossible to fit even a moderately sized future item.\n    # Let's define \"almost full\" as remaining_after_fit < a small epsilon.\n    # The penalty should be proportional to how \"full\" it gets.\n    epsilon = 0.05 # A small threshold for \"almost full\"\n    penalty_factor = 0.5\n    penalty_scores = np.zeros_like(fitting_bins_caps)\n    almost_full_condition = (remaining_after_fit < epsilon) & (fitting_bins_caps > epsilon) # Ensure it's not an empty bin\n    # Penalize more if the remaining capacity after fit is very small\n    penalty_scores[almost_full_condition] = -penalty_factor * (epsilon - remaining_after_fit[almost_full_condition]) / epsilon\n\n\n    # Combine scores. Prioritize tight fits, give a small boost for having room, and penalize very tight fits.\n    # Weights are chosen heuristically.\n    combined_scores = (0.8 * tight_fit_scores) + (0.2 * exploration_scores) + penalty_scores\n\n    # Assign the calculated scores to the corresponding bins\n    priorities[can_fit_mask] = combined_scores\n\n    # Ensure bins that cannot fit have a priority of 0 (already handled by initialization and mask)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy combines the \"Best Fit\" approach (minimizing remaining capacity)\n    with a stochastic element to encourage exploration of less obviously optimal bins.\n    It also prioritizes bins that are \"almost full\" to potentially group smaller items\n    more efficiently.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit, return all zeros\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n\n    # Strategy 1: Best Fit - prioritize bins that will have the least remaining capacity\n    # This is a common greedy strategy for BPP.\n    remaining_after_fit = fitting_bins_caps - item\n    # We want to minimize remaining_after_fit, so higher priority for smaller remaining capacity.\n    # Add a small constant to avoid division by zero if remaining_after_fit is 0.\n    best_fit_scores = 1.0 / (1.0 + remaining_after_fit)\n\n    # Strategy 2: \"Almost Full\" bins - prioritize bins that are very close to being full\n    # This can help consolidate smaller items and leave larger capacities open.\n    # We define \"almost full\" as having a remaining capacity between 0 and a small threshold.\n    almost_full_threshold = 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1\n    almost_full_mask_subset = (fitting_bins_caps > 0) & (fitting_bins_caps <= almost_full_threshold)\n    almost_full_scores = np.zeros_like(fitting_bins_caps)\n    almost_full_scores[almost_full_mask_subset] = 0.5 # Assign a moderate priority\n\n    # Strategy 3: Exploration - add a small random component to encourage trying different bins\n    # This is inspired by exploration in reinforcement learning.\n    exploration_factor = 0.1\n    random_scores = np.random.rand(len(fitting_bins_caps)) * exploration_factor\n\n    # Combine scores. A bin is good if it's a good best-fit OR it's almost full.\n    # We use a weighted sum, prioritizing best fit more.\n    combined_scores = (0.7 * best_fit_scores) + (0.3 * almost_full_scores) + random_scores\n\n    # Assign the calculated scores to the corresponding bins\n    priorities[can_fit_mask] = combined_scores\n\n    # Ensure bins that cannot fit have a priority of 0\n    priorities[~can_fit_mask] = 0\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, encourage exploration, and strategically fill \"almost full\" bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}