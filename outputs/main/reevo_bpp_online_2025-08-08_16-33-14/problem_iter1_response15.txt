```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The strategy prioritizes bins that have a remaining capacity closest to the item's size.
    This aims to "fit" the item snugly into a bin, minimizing wasted space in that specific bin.
    We calculate the absolute difference between the item size and the remaining capacity of each bin.
    The inverse of this difference serves as the priority. A smaller difference (better fit)
    results in a higher priority score. To avoid division by zero if an item perfectly fits,
    we add a small epsilon.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure item fits in the bin, otherwise, it's not a viable option.
    # Bins with remaining capacity less than the item size get a priority of 0.
    viable_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the "closeness" of the remaining capacity to the item size.
    # We want bins where remaining_capacity is close to item_size.
    # A smaller difference is better.
    differences = bins_remain_cap[viable_bins_mask] - item

    # We want to prioritize smaller differences. So, we invert the differences.
    # Add a small epsilon to avoid division by zero when the difference is exactly 0.
    epsilon = 1e-9
    priorities[viable_bins_mask] = 1.0 / (differences + epsilon)

    # Handle cases where no bins are viable.
    if not np.any(viable_bins_mask):
        return np.zeros_like(bins_remain_cap)

    return priorities
```
