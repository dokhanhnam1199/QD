```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit Decreasing-like strategy.

    This heuristic prioritizes bins that can fit the item and, among those,
    prioritizes bins that will have the least remaining capacity *after*
    placing the item. This aims to pack items tightly and minimize wasted space.

    The priority is calculated as: 1 / (1 + remaining_capacity_after_placement).
    This formula gives higher priority to bins where the remaining capacity
    after placing the item is smaller.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for bins that can fit the item
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # To prioritize bins with minimal remaining capacity after placement,
    # we use the inverse of (1 + remaining_capacity_after_placement).
    # Adding 1 ensures the denominator is always at least 1, and the inverse
    # means smaller remaining capacities get higher priorities.
    # Using 1e-9 as a small epsilon to avoid potential issues with very small remaining capacities,
    # though with the '+ 1.0' this might be less critical but still good practice for numerical stability.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[can_fit_mask] = 1.0 / (1.0 + remaining_after_placement + 1e-9)

    return priorities
```
