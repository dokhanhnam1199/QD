```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    In Exact Fit First, we prioritize bins that can exactly fit the item.
    Among bins that can exactly fit, we further prioritize those with less remaining
    capacity to leave larger gaps in other bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can exactly fit the item
    exact_fit_mask = bins_remain_cap == item

    # For bins that can exactly fit, assign a high priority based on *negative* remaining capacity
    # This is because we want the bin with the *smallest* remaining capacity (closest to 0
    # if it's an exact fit) to be prioritized among exact fits.
    # We use negative to ensure that the largest remaining capacity (closest to 0) gets the highest score.
    priorities[exact_fit_mask] = -bins_remain_cap[exact_fit_mask]

    # For bins that cannot exactly fit, assign a lower priority.
    # To further differentiate, we can assign a very small negative number if the item
    # can fit, and an even smaller negative number if it cannot fit at all.
    # This ensures that exact fits are always preferred.
    # If the item *can* fit but not exactly, we assign a score that is lower than
    # the exact fits but potentially higher than bins where it doesn't fit.
    # Here, we'll assign a score that is guaranteed to be less than any exact fit priority.
    can_fit_mask = bins_remain_cap > item
    priorities[can_fit_mask] = -1e9 - bins_remain_cap[can_fit_mask] # Lower priority than exact fits
    priorities[~can_fit_mask] = -1e12 # Very low priority for bins where item doesn't fit

    # The highest priority score will be for an exact fit with the smallest capacity.
    # If there are no exact fits, it will be for a bin that can fit with the smallest
    # capacity among those. If no bin can fit, it will be the least negative score.

    return priorities
```
