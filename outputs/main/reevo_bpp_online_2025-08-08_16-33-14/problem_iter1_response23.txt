```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    Almost Full Fit prioritizes bins that will be "almost full" after placing the item.
    This is achieved by favoring bins where the remaining capacity after placing the item
    is minimized, but still non-negative (meaning the item fits).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score indicates higher priority.
    """
    # Initialize priorities to a very low value (or 0) for bins where the item doesn't fit.
    # This ensures they won't be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can fit
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the "almost full" score.
    # A common way to define "almost full" is to minimize the remaining capacity
    # after placing the item. We can achieve this by taking the negative of the
    # remaining capacity after placing the item, or by minimizing the difference
    # between the bin's capacity and the item's size.
    # Here, we prioritize bins where bins_remain_cap - item is the smallest
    # positive value. This is equivalent to maximizing - (bins_remain_cap - item).
    if np.any(fits_mask):
        # Calculate the remaining capacity if the item is placed in eligible bins
        remaining_capacities_after_fit = bins_remain_cap[fits_mask] - item

        # The priority is the inverse of the remaining capacity (or negative remaining capacity).
        # Smaller remaining capacity = higher priority.
        # We add a small epsilon to avoid division by zero if remaining capacity is 0.
        epsilon = 1e-9
        priorities[fits_mask] = 1.0 / (remaining_capacities_after_fit + epsilon)

    return priorities
```
