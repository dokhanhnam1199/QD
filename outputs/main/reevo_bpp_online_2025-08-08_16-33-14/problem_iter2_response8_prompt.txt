{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Random Fit.\n\n    In Random Fit, we consider all bins that can accommodate the item.\n    We then randomly select one of these bins. This heuristic prioritizes\n    bins that can fit the item and gives them a positive priority.\n    Bins that cannot fit the item receive a zero priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Assign a positive priority to bins that can fit the item.\n    # Since it's Random Fit, any bin that can fit gets an equal chance.\n    # We can represent this by giving them a uniform positive value,\n    # or in this case, simply a value of 1.0. The random selection\n    # logic will then pick among these positive-priority bins.\n    priorities[can_fit_mask] = 1.0\n\n    # For a true random fit, the selection mechanism (outside this function)\n    # would sample from the indices where priority > 0.\n    # This function's role is to identify potential candidates.\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Almost Full Fit strategy.\n\n    The Almost Full Fit strategy prioritizes bins that are almost full,\n    meaning they have a small remaining capacity after accommodating the current item.\n    This aims to leave larger remaining capacities in other bins for potentially\n    larger future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Consider only bins that can fit the item\n    available_bins_mask = bins_remain_cap >= item\n\n    # If no bins can fit the item, return all zeros (or handle as an error/new bin creation)\n    if not np.any(available_bins_mask):\n        return priorities\n\n    # Calculate the remaining capacity *after* placing the item\n    remaining_after_placement = bins_remain_cap[available_bins_mask] - item\n\n    # The priority is inversely proportional to the remaining capacity after placement.\n    # We want bins with smaller remaining capacity (i.e., bins that get *almost full*)\n    # to have higher priority.\n    # To avoid division by zero if remaining capacity is 0, we can add a small epsilon.\n    epsilon = 1e-9\n    priorities[available_bins_mask] = 1.0 / (remaining_after_placement + epsilon)\n\n    # Optionally, we can normalize the priorities to a range like [0, 1]\n    # This can sometimes help if the raw priority values are very large or very small.\n    # For a priority function, raw values are often fine, but normalization can be an option.\n    # if np.max(priorities[available_bins_mask]) > 0:\n    #     priorities[available_bins_mask] /= np.max(priorities[available_bins_mask])\n\n    return priorities\n\n[Reflection]\nPrioritize bins that leave less remaining capacity for future items.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}