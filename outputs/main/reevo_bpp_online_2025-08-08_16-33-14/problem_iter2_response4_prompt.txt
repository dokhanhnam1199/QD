{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Worst Fit strategy.\n\n    The Worst Fit strategy aims to place the item into the bin with the largest remaining capacity,\n    thus leaving smaller capacities for potentially larger items that may arrive later.\n    The priority is higher for bins that have more remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # For bins where the item fits, the priority is its remaining capacity.\n    # For bins where the item does not fit, the priority is 0 (or a very low value).\n    # We want the bin with the LARGEST remaining capacity if it can fit the item.\n    \n    # Create a boolean mask indicating which bins have enough remaining capacity\n    can_fit_mask = bins_remain_cap >= item\n\n    # Initialize priorities with zeros\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # For bins that can fit the item, set their priority to their remaining capacity\n    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.2  # Exploration rate\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit, return all zeros (though in a real scenario, a new bin would be opened)\n    if not np.any(can_fit_mask):\n        return priorities\n\n    # Greedy choice: favor bins with minimal remaining capacity after fitting the item\n    # This is the \"exploitation\" part\n    remaining_caps_after_fit = bins_remain_cap[can_fit_mask] - item\n    # Assign a high priority to bins that leave less remaining capacity\n    greedy_priorities = 1.0 / (1.0 + remaining_caps_after_fit)\n\n    # Epsilon-Greedy: explore by assigning random priorities to some bins\n    # The \"exploration\" part\n    num_to_explore = max(1, int(epsilon * np.sum(can_fit_mask))) # Ensure at least one is explored if possible\n\n    # Randomly select bins to explore\n    explore_indices_in_subset = np.random.choice(\n        np.arange(np.sum(can_fit_mask)),\n        size=num_to_explore,\n        replace=False\n    )\n    # Create random priorities for the explored bins\n    random_priorities = np.random.rand(num_to_explore)\n\n    # Combine greedy and random choices\n    # Initially, all priorities for fitting bins are zero.\n    # We'll assign greedy priorities first, then overwrite with random ones for exploration.\n    priorities[can_fit_mask] = greedy_priorities\n\n    # Replace greedy priorities with random priorities for the selected exploration bins\n    original_indices_to_explore = np.where(can_fit_mask)[0][explore_indices_in_subset]\n    priorities[original_indices_to_explore] = random_priorities\n\n    # Ensure that bins that cannot fit the item have a priority of 0\n    priorities[~can_fit_mask] = 0\n\n    return priorities\n\n[Reflection]\nExplore diverse strategies, balance exploitation and exploration for better performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}