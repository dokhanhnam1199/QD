{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy prioritizes bins that offer a tight fit (minimizing leftover capacity)\n    while also considering bins that might accommodate future items better by leaving\n    a moderate amount of space. It uses a soft-max like approach to create relative\n    priorities and a small penalty for bins that would be *too* full after packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit, return all zeros\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n\n    # Calculate potential remaining capacities after fitting the item\n    remaining_after_fit = fitting_bins_caps - item\n\n    # Strategy: Prioritize bins that result in a remaining capacity that is \"just right\".\n    # This means not too much space left (avoiding \"First Fit\" tendencies for large remaining capacity)\n    # and not too little space left (avoiding \"Worst Fit\" where there's barely any space).\n    # We can model this using a Gaussian-like function centered around a \"good\" remaining capacity.\n    # A good remaining capacity could be a small fraction of the bin's original capacity,\n    # or a small fixed amount. Let's consider a target remaining capacity.\n    # For simplicity, let's aim for remaining capacity that is small but not zero.\n    # A simple approach: maximize priority when remaining_after_fit is small, but\n    # penalize very small remaining capacities.\n\n    # Option 1: Favor small remaining capacity, but penalize zero or very small remaining.\n    # A log-like function can achieve this: log(1 + x) increases with x, but at a decreasing rate.\n    # We want to minimize remaining_after_fit, so we take the inverse.\n    # To avoid division by zero for remaining_after_fit == 0, we can use 1 + remaining_after_fit.\n    # A small positive remaining capacity is ideal (tightest fit without being *too* tight).\n    # We can penalize bins where remaining_after_fit is very small to avoid \"Worst Fit\" issues.\n    # Let's define a score that is high for small remaining_after_fit, but drops off as it approaches zero.\n    # We can use 1 / (1 + remaining_after_fit) for the \"best fit\" aspect.\n    # To penalize being *too* full (e.g., remaining_after_fit < 1e-6), we can introduce a penalty.\n\n    # Score that favors small remaining capacity. Add a small epsilon to avoid division by zero.\n    base_scores = 1.0 / (1.0 + remaining_after_fit + 1e-6)\n\n    # Penalty for being too full (very small remaining capacity)\n    # This encourages leaving a small but non-zero gap.\n    too_full_penalty = np.zeros_like(fitting_bins_caps)\n    too_full_threshold = 0.05 # e.g., 5% of item size or a small absolute value\n    too_full_mask = remaining_after_fit < too_full_threshold\n    too_full_penalty[too_full_mask] = (too_full_threshold - remaining_after_fit[too_full_mask]) / too_full_threshold\n\n    # Combine scores: high priority for tight fits, with a penalty for being *too* tight.\n    # We want to subtract the penalty from the base score.\n    combined_scores = base_scores - (0.5 * too_full_penalty)\n\n    # A small diversification factor inspired by softmax to create relative differences\n    # Softmax ensures that scores are positive and sum to 1 (or can be scaled to do so).\n    # Using it here can help break ties and introduce some probabilistic selection.\n    # Adding a small constant before softmax to avoid issues with all scores being equal.\n    diversification_scores = np.exp(combined_scores + np.random.normal(0, 0.1, len(combined_scores)))\n    # Normalize to create relative probabilities, could be used directly as priorities\n    normalized_diversification = diversification_scores / np.sum(diversification_scores)\n    # Or, use combined_scores directly and normalize if needed, but raw scores are often fine for priority.\n\n    # Let's assign the combined_scores directly as priorities, possibly scaled.\n    # Scale scores to a reasonable range, e.g., 0-1.\n    # Ensure no negative priorities if penalty was too strong.\n    final_priorities = np.maximum(0, combined_scores)\n\n    # Assign the calculated scores to the corresponding bins\n    priorities[can_fit_mask] = final_priorities\n\n    # Ensure bins that cannot fit have a priority of 0\n    priorities[~can_fit_mask] = 0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Implements a hybrid priority function for online Bin Packing Problem.\n    This version refines the scoring by categorizing fits:\n    1. Perfect Fit (zero remaining capacity).\n    2. Tight Fit (remaining capacity <= item size).\n    3. Good Fit (remaining capacity > item size but not excessively large).\n    4. Loose Fit (remaining capacity is very large).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n    remaining_after_fit = fitting_bins_caps - item\n\n    # Define score components based on remaining capacity after fit\n    # We want to prioritize smaller remaining_after_fit.\n    # Add a small epsilon to avoid division by zero for perfect fits.\n    epsilon = 1e-9\n\n    # Scores for different fit categories\n    perfect_fit_scores = np.zeros_like(remaining_after_fit)\n    tight_fit_scores = np.zeros_like(remaining_after_fit)\n    good_fit_scores = np.zeros_like(remaining_after_fit)\n    loose_fit_scores = np.zeros_like(remaining_after_fit)\n\n    # Thresholds for 'good fit' and 'loose fit'\n    # Threshold 1: Maximum remaining capacity for a 'tight' fit (relative to item size)\n    tight_threshold = item\n    # Threshold 2: Maximum remaining capacity for a 'good' fit (relative to item size)\n    # This aims to leave a decent amount of space, e.g., up to 3 times the item size.\n    good_threshold = 3.0 * item\n\n    # Assign scores based on categories\n    # Perfect Fit: highest priority\n    perfect_mask = (remaining_after_fit < epsilon)\n    perfect_fit_scores[perfect_mask] = 10.0\n\n    # Tight Fit: prioritize bins that leave little room but not zero\n    tight_mask = (remaining_after_fit > epsilon) & (remaining_after_fit <= tight_threshold)\n    tight_fit_scores[tight_mask] = 5.0 / (1.0 + remaining_after_fit[tight_mask]) # Scaled best-fit\n\n    # Good Fit: prioritize bins that leave a moderate amount of room\n    # This encourages leaving space for future items.\n    good_mask = (remaining_after_fit > tight_threshold) & (remaining_after_fit <= good_threshold)\n    # For good fits, we want remaining_after_fit to be as small as possible within this range.\n    # We can use a inverse relationship, but scaled differently.\n    good_fit_scores[good_mask] = 2.0 / (1.0 + remaining_after_fit[good_mask])\n\n    # Loose Fit: lowest priority among fitting bins, provide minimal boost for exploration\n    loose_mask = (remaining_after_fit > good_threshold)\n    loose_fit_scores[loose_mask] = 0.5 / (1.0 + remaining_after_fit[loose_mask])\n\n    # Combine scores. Weights are heuristic and can be tuned.\n    # Prioritize perfect > tight > good > loose.\n    combined_scores = (\n        perfect_fit_scores * 1.0 +\n        tight_fit_scores * 0.8 +\n        good_fit_scores * 0.5 +\n        loose_fit_scores * 0.2\n    )\n\n    # Add a small random component for exploration to all fitting bins\n    exploration_factor = 0.1\n    random_scores = np.random.rand(len(fitting_bins_caps)) * exploration_factor\n    combined_scores += random_scores\n\n    # Assign the calculated scores to the corresponding bins in the original priority array\n    priorities[can_fit_mask] = combined_scores\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, penalize very small remaining capacities. Categorize fits for nuanced scoring.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}