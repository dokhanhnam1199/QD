```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the item in the bin with the largest remaining capacity.
    This heuristic is generally not good for minimizing the number of bins, but it's a valid strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # For each bin, if the item can fit, assign a priority equal to the remaining capacity.
    # Otherwise, assign a priority of 0, meaning it cannot be placed in that bin.
    # The higher the remaining capacity, the higher the priority for Worst Fit.
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
