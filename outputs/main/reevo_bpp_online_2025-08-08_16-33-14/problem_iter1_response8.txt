```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.

    This heuristic aims to balance exploration (trying less full bins) and
    exploitation (trying bins that are a good fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.2  # Probability of exploration (adjust as needed)
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate a "goodness" score for each bin: a larger value means a better fit
    # We prioritize bins with just enough space for the item to minimize waste.
    # If an item doesn't fit, its goodness score is 0.
    goodness_scores = np.maximum(0, bins_remain_cap - item)

    # Find the best (most exploited) bin: the one that leaves the least remaining capacity
    # if we place the item in it, among bins that can fit the item.
    # If no bin can fit the item, this will still be a very large number,
    # which will be handled by the epsilon-greedy choice.
    min_remaining_capacity_if_fit = np.inf
    best_bin_index = -1

    for i in range(num_bins):
        if bins_remain_cap[i] >= item:
            remaining = bins_remain_cap[i] - item
            if remaining < min_remaining_capacity_if_fit:
                min_remaining_capacity_if_fit = remaining
                best_bin_index = i

    # Epsilon-Greedy Strategy
    for i in range(num_bins):
        if np.random.rand() < epsilon:
            # Exploration: Randomly choose a bin that can fit the item
            # If no bin can fit, this might pick a bin that's too small,
            # but the bin selection logic will handle it.
            possible_bins = np.where(bins_remain_cap >= item)[0]
            if len(possible_bins) > 0:
                chosen_bin_index = np.random.choice(possible_bins)
                priorities[chosen_bin_index] = 1.0  # Give equal high priority to explored bins
            else:
                # If no bin can fit the item, still assign some low priority
                priorities[i] = 0.1
        else:
            # Exploitation: Choose the bin that provides the best fit (least remaining capacity)
            if best_bin_index != -1:
                priorities[best_bin_index] = 1.0  # Highest priority to the best fit bin
            else:
                # If no bin can fit the item, all priorities remain 0.
                # The item won't be placed in any existing bin.
                pass # All priorities are already 0

    return priorities
```
