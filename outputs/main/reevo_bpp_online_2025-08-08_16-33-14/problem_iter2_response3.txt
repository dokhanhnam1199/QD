```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy.

    This heuristic prioritizes bins that can fit the item and, among those,
    prioritizes bins that will have the least remaining capacity *after*
    placing the item. This aims to pack items tightly, minimizing wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    # We want to prioritize bins where placing the item leaves the LEAST remaining capacity.
    # This means we want to MINIMIZE `bins_remain_cap[i] - item`.
    # To translate minimization into a maximization of priority, we can use the reciprocal
    # of the remaining capacity after placement (plus a small epsilon to avoid division by zero).
    # Smaller remaining capacity after placement -> larger reciprocal -> higher priority.
    
    # Calculate remaining capacity for bins that can fit
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priority: higher priority for smaller remaining capacity after placement.
    # Add a small epsilon to avoid division by zero and ensure positive values for the reciprocal.
    priorities[can_fit_mask] = 1.0 / (remaining_after_placement + 1e-9)

    return priorities
```
