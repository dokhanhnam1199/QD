```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy.

    This strategy prioritizes bins that can accommodate the item and, after placing the item,
    leave the smallest possible remaining capacity. This is a direct implementation of
    favoring tighter fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score indicates a higher priority.
    """
    # Initialize priorities to a very low value (negative infinity) for bins that cannot fit.
    # This ensures they are never selected if any bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can fit the item
    possible_fits_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity *after* placing the item.
    # We want to prioritize bins where this value is smallest (tightest fit).
    # A simple way to assign higher priority to smaller values is to use their reciprocal.
    # To avoid division by zero or extremely large numbers when the remainder is close to zero,
    # we add a small epsilon.
    epsilon = 1e-9
    remaining_capacities_after_fit = bins_remain_cap[possible_fits_mask] - item

    # The priority score is inversely proportional to the remaining capacity.
    # A smaller remaining capacity results in a larger priority score.
    priorities[possible_fits_mask] = 1.0 / (remaining_capacities_after_fit + epsilon)

    return priorities
```
