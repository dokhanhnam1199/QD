{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit-like strategy.\n\n    This heuristic prioritizes bins that can fit the item and, among those,\n    prioritizes bins that will have the least remaining capacity *after*\n    placing the item. This aims to pack items tightly, minimizing wasted space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity after placement.\n    # We want to prioritize bins where placing the item leaves the LEAST remaining capacity.\n    # This means we want to MINIMIZE `bins_remain_cap[i] - item`.\n    # To translate minimization into a maximization of priority, we can use the reciprocal\n    # of the remaining capacity after placement (plus a small epsilon to avoid division by zero).\n    # Smaller remaining capacity after placement -> larger reciprocal -> higher priority.\n    \n    # Calculate remaining capacity for bins that can fit\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priority: higher priority for smaller remaining capacity after placement.\n    # Add a small epsilon to avoid division by zero and ensure positive values for the reciprocal.\n    priorities[can_fit_mask] = 1.0 / (remaining_after_placement + 1e-9)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit Decreasing-like strategy.\n\n    This heuristic prioritizes bins that can fit the item and, among those,\n    prioritizes bins that will have the least remaining capacity *after*\n    placing the item. This aims to pack items tightly and minimize wasted space.\n\n    The priority is calculated as: 1 / (1 + remaining_capacity_after_placement).\n    This formula gives higher priority to bins where the remaining capacity\n    after placing the item is smaller.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity for bins that can fit the item\n    remaining_after_placement = bins_remain_cap[can_fit_mask] - item\n\n    # To prioritize bins with minimal remaining capacity after placement,\n    # we use the inverse of (1 + remaining_capacity_after_placement).\n    # Adding 1 ensures the denominator is always at least 1, and the inverse\n    # means smaller remaining capacities get higher priorities.\n    # Using 1e-9 as a small epsilon to avoid potential issues with very small remaining capacities,\n    # though with the '+ 1.0' this might be less critical but still good practice for numerical stability.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[can_fit_mask] = 1.0 / (1.0 + remaining_after_placement + 1e-9)\n\n    return priorities\n\n[Reflection]\nPrioritize bins with *minimal* remaining capacity after placement, using a scaled inverse.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}