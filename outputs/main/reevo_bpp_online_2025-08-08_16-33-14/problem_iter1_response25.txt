```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The Inverse Distance (Proximity Fit) strategy prioritizes bins that are
    "close" to fitting the current item. A bin is considered a good fit if its
    remaining capacity is just slightly larger than the item's size. This
    minimizes wasted space in the bin.

    The priority is calculated as: 1 / (1 + |remaining_capacity - item_size|).
    This formula gives higher priority to bins where the difference between
    remaining capacity and item size is smaller (closer to zero).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the item size and each bin's remaining capacity.
    # We only consider bins where the item can actually fit.
    fit_mask = bins_remain_cap >= item
    diff = np.abs(bins_remain_cap - item)

    # Calculate priorities. Add a small epsilon to the denominator to avoid division by zero
    # if a bin has exactly the same remaining capacity as the item.
    # The "+ 1" in the denominator ensures that the priority is always less than or equal to 1.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[fit_mask] = 1.0 / (1.0 + diff[fit_mask])

    return priorities
```
