```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    Random Fit prioritizes bins randomly, with a slight bias towards bins that can fit the item.
    A higher priority score means the bin is more preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Assign a base priority to bins that can fit the item
    # We'll add some randomness to make it "Random Fit"
    base_priority = 1.0
    priorities[can_fit_mask] = base_priority

    # Introduce randomness: add a random value between 0 and 0.5
    # This ensures that even if multiple bins can fit, their order might change.
    # The randomness is only applied to bins that *can* fit the item.
    random_noise = np.random.rand(len(bins_remain_cap)) * 0.5
    priorities[can_fit_mask] += random_noise[can_fit_mask]

    # Bins that cannot fit the item get a priority of 0 (or a very low value if needed)
    # For Random Fit, we generally don't consider bins that can't fit, so 0 is appropriate.
    # If we wanted to penalize them, we could assign negative values.

    return priorities
```
