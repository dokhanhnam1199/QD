{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Exact Fit First.\n\n    In Exact Fit First, we prioritize bins that can exactly fit the item.\n    Among bins that can exactly fit, we further prioritize those with less remaining\n    capacity to leave larger gaps in other bins for potentially larger future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that can exactly fit the item\n    exact_fit_mask = bins_remain_cap == item\n\n    # For bins that can exactly fit, assign a high priority based on *negative* remaining capacity\n    # This is because we want the bin with the *smallest* remaining capacity (closest to 0\n    # if it's an exact fit) to be prioritized among exact fits.\n    # We use negative to ensure that the largest remaining capacity (closest to 0) gets the highest score.\n    priorities[exact_fit_mask] = -bins_remain_cap[exact_fit_mask]\n\n    # For bins that cannot exactly fit, assign a lower priority.\n    # To further differentiate, we can assign a very small negative number if the item\n    # can fit, and an even smaller negative number if it cannot fit at all.\n    # This ensures that exact fits are always preferred.\n    # If the item *can* fit but not exactly, we assign a score that is lower than\n    # the exact fits but potentially higher than bins where it doesn't fit.\n    # Here, we'll assign a score that is guaranteed to be less than any exact fit priority.\n    can_fit_mask = bins_remain_cap > item\n    priorities[can_fit_mask] = -1e9 - bins_remain_cap[can_fit_mask] # Lower priority than exact fits\n    priorities[~can_fit_mask] = -1e12 # Very low priority for bins where item doesn't fit\n\n    # The highest priority score will be for an exact fit with the smallest capacity.\n    # If there are no exact fits, it will be for a bin that can fit with the smallest\n    # capacity among those. If no bin can fit, it will be the least negative score.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.\n\n    The priority is higher for bins that have remaining capacity greater than or equal to the item size,\n    and among those, it's higher for bins with less remaining capacity (to promote filling bins).\n    Softmax is applied to these scores to get a probability distribution over the bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize scores to a very small negative number to ensure unfit bins get low softmax scores\n    scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Consider only bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit, assign a score inversely proportional to remaining capacity\n    # This favors bins that are closer to being full, promoting tighter packing.\n    # We add a small epsilon to avoid division by zero if a bin has exactly the item's size.\n    scores[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9)\n\n    # Apply softmax to convert scores into probabilities (priorities)\n    # Subtract the maximum score before exponentiation to prevent numerical overflow\n    exp_scores = np.exp(scores - np.max(scores))\n    priorities = exp_scores / np.sum(exp_scores)\n\n    # Handle cases where no bin can fit the item (e.g., if the item is too large for all bins)\n    # In such a scenario, exp_scores would be all zeros, leading to NaNs from division by zero sum.\n    # We can assign a uniform low priority or signal this condition, but for this function,\n    # returning zeros is a reasonable default indicating no good placement.\n    if np.sum(priorities) == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    return priorities\n\n[Reflection]\nPrioritize fits, then closeness to full. Softmax helps explore options.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}