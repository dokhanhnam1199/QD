{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Implements a refined priority function for online Bin Packing Problem,\n    incorporating stochasticity and explicit penalization of overly large remaining capacities.\n\n    The function categorizes fits and assigns scores:\n    1. Perfect Fit: Highest score, zero remaining capacity.\n    2. Tight Fit: High score, remaining capacity is small but positive and not exceeding item size.\n    3. Good Fit: Moderate score, remaining capacity is larger than item size but not excessively so.\n    4. Overly Loose Fit: Low score, remaining capacity is very large, potentially indicating wasted space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n    remaining_after_fit = fitting_bins_caps - item\n\n    # Define thresholds for categorizing fits. These are relative to the bin's *original* capacity\n    # to better capture \"overly loose\" fits, not just relative to the item.\n    # This approach aims to keep bins that are \"nearly full\" but not \"nearly empty\" after packing.\n\n    # Threshold for 'tight' fit: bin remaining capacity should be very small relative to bin's total capacity.\n    # Let's consider a bin \"tight\" if its remaining capacity after fitting is less than 10% of its *original* capacity.\n    # We need the original capacity. For simplicity in this function, we'll use remaining_after_fit,\n    # but a more robust version might have access to original bin capacities or a constant bin size.\n    # For now, let's stick to thresholds relative to the *item size* but with a clearer distinction for \"overly loose\".\n\n    epsilon = 1e-9 # For perfect fits\n    tight_fit_upper_bound = item * 1.5 # Bin should not have much more than item size left.\n    overly_loose_threshold = item * 5.0 # A bin that has 5x item size left is considered \"overly loose\".\n\n    # Scores for different fit categories\n    perfect_fit_scores = np.zeros_like(remaining_after_fit)\n    tight_fit_scores = np.zeros_like(remaining_after_fit)\n    good_fit_scores = np.zeros_like(remaining_after_fit)\n    overly_loose_scores = np.zeros_like(remaining_after_fit)\n\n    # Assign scores\n    # Perfect Fit: highest priority\n    perfect_mask = (remaining_after_fit < epsilon)\n    perfect_fit_scores[perfect_mask] = 10.0\n\n    # Tight Fit: Prioritize bins that leave little room. Higher score for smaller remaining capacity.\n    tight_mask = (remaining_after_fit > epsilon) & (remaining_after_fit <= tight_fit_upper_bound)\n    # Use inverse of remaining capacity, scaled to avoid very large values for small remaining capacities.\n    tight_fit_scores[tight_mask] = 5.0 / (1.0 + remaining_after_fit[tight_mask] * 0.5)\n\n    # Good Fit: Bins with moderate remaining space.\n    good_mask = (remaining_after_fit > tight_fit_upper_bound) & (remaining_after_fit <= overly_loose_threshold)\n    # Penalize larger remaining capacities within this \"good\" range.\n    good_fit_scores[good_mask] = 2.0 / (1.0 + remaining_after_fit[good_mask] * 0.1)\n\n    # Overly Loose Fit: Penalize bins that leave excessively large remaining capacity.\n    overly_loose_mask = (remaining_after_fit > overly_loose_threshold)\n    # Assign a significantly lower score, possibly negative, or a very small positive one to just indicate it's usable.\n    # We will use a small positive score to differentiate from non-fitting bins but still make them less desirable.\n    overly_loose_scores[overly_loose_mask] = 0.1 / (1.0 + remaining_after_fit[overly_loose_mask] * 0.01)\n\n\n    # Combine scores with weights. Weights reflect preference: Perfect > Tight > Good > Overly Loose.\n    # The weights are heuristic and can be tuned.\n    combined_scores = (\n        perfect_fit_scores * 1.0 +\n        tight_fit_scores * 0.8 +\n        good_fit_scores * 0.5 +\n        overly_loose_scores * 0.1\n    )\n\n    # Add a small stochastic component for exploration to all fitting bins.\n    # This helps in diversifying bin choices and potentially finding better solutions.\n    exploration_factor = 0.15\n    random_scores = np.random.rand(len(fitting_bins_caps)) * exploration_factor * (1.0 + np.log1p(remaining_after_fit))\n    # Scaling random scores slightly with remaining capacity can encourage exploration of less full bins.\n    combined_scores += random_scores\n\n    # Assign the calculated scores to the corresponding bins in the original priority array\n    priorities[can_fit_mask] = combined_scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Implements an improved hybrid priority function for online Bin Packing Problem.\n    This version refines the scoring by prioritizing perfect fits, then tight fits,\n    and then good fits, while still allowing for exploration.\n\n    Categories:\n    1. Perfect Fit: remaining capacity is zero. Highest priority.\n    2. Tight Fit: remaining capacity is small, specifically <= item size. High priority.\n    3. Good Fit: remaining capacity is moderate, specifically > item size but <= 2 * item size. Medium priority.\n    4. Loose Fit: remaining capacity is large, specifically > 2 * item size. Lower priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n\n    if not np.any(can_fit_mask):\n        return priorities  # No bin can fit the item\n\n    fitting_bins_caps = bins_remain_cap[can_fit_mask]\n    remaining_after_fit = fitting_bins_caps - item\n\n    # Define score components based on remaining capacity after fit\n    epsilon = 1e-9  # For handling perfect fits and avoiding division by zero\n\n    # Initialize scores for different fit categories\n    perfect_fit_scores = np.zeros_like(remaining_after_fit)\n    tight_fit_scores = np.zeros_like(remaining_after_fit)\n    good_fit_scores = np.zeros_like(remaining_after_fit)\n    loose_fit_scores = np.zeros_like(remaining_after_fit)\n\n    # Thresholds for categorizing fits (relative to item size)\n    tight_threshold = item\n    good_threshold = 2.0 * item\n\n    # Assign scores based on categories, prioritizing perfect > tight > good > loose\n    # Perfect Fit: Highest score.\n    perfect_mask = (remaining_after_fit < epsilon)\n    perfect_fit_scores[perfect_mask] = 100.0\n\n    # Tight Fit: Prioritize bins that leave little room, scaled inversely with remaining space.\n    tight_mask = (remaining_after_fit > epsilon) & (remaining_after_fit <= tight_threshold)\n    # Score decreases as remaining_after_fit increases within the tight range.\n    tight_fit_scores[tight_mask] = 10.0 / (1.0 + remaining_after_fit[tight_mask])\n\n    # Good Fit: Prioritize bins that leave a moderate amount of room, scaled less aggressively.\n    good_mask = (remaining_after_fit > tight_threshold) & (remaining_after_fit <= good_threshold)\n    # Score decreases as remaining_after_fit increases within the good range.\n    good_fit_scores[good_mask] = 5.0 / (1.0 + remaining_after_fit[good_mask])\n\n    # Loose Fit: Lowest priority among fitting bins, provide minimal boost for exploration.\n    loose_mask = (remaining_after_fit > good_threshold)\n    loose_fit_scores[loose_mask] = 1.0 / (1.0 + remaining_after_fit[loose_mask])\n\n    # Combine scores using weights to reflect the priority order\n    combined_scores = (\n        perfect_fit_scores * 1.0 +\n        tight_fit_scores * 0.7 +\n        good_fit_scores * 0.4 +\n        loose_fit_scores * 0.1\n    )\n\n    # Add a small random component for exploration to all fitting bins\n    # This helps in breaking ties and exploring less obvious choices occasionally.\n    exploration_factor = 0.05\n    random_scores = np.random.rand(len(fitting_bins_caps)) * exploration_factor\n    combined_scores += random_scores\n\n    # Assign the calculated scores to the corresponding bins in the original priority array\n    priorities[can_fit_mask] = combined_scores\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits. Use simpler thresholds. Tune weights and exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}