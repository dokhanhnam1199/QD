```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the item into the bin with the largest remaining capacity,
    thus leaving smaller capacities for potentially larger items that may arrive later.
    The priority is higher for bins that have more remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # For bins where the item fits, the priority is its remaining capacity.
    # For bins where the item does not fit, the priority is 0 (or a very low value).
    # We want the bin with the LARGEST remaining capacity if it can fit the item.
    
    # Create a boolean mask indicating which bins have enough remaining capacity
    can_fit_mask = bins_remain_cap >= item

    # Initialize priorities with zeros
    priorities = np.zeros_like(bins_remain_cap)

    # For bins that can fit the item, set their priority to their remaining capacity
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
