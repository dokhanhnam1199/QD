```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First strategy prioritizes bins where the remaining capacity is
    exactly equal to the item size. If multiple bins have this exact fit,
    it might offer a secondary criterion. For simplicity, this implementation
    gives a high priority (1.0) to exact fits and a lower priority (0.0) otherwise.
    In a more sophisticated version, one could break ties by choosing the bin
    with the smallest remaining capacity among the exact fits, or by considering
    the number of items already in the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Find bins where the remaining capacity is exactly the item size
    exact_fit_indices = np.where(bins_remain_cap == item)[0]

    # Assign a high priority to bins that are an exact fit
    priorities[exact_fit_indices] = 1.0

    # Optional: If there are exact fits, you might want to further refine
    # priorities. For this simple version, we'll just use 1.0 for exact fits.
    # A more advanced strategy might also consider bins that have a very small
    # remaining capacity after placing the item, but still can accommodate it.
    # For pure Exact Fit First, we only care about the exact match.

    return priorities
```
