```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Worst Fit: prioritize bins with the largest remaining capacity that can still fit the item.
    # The intuition is to leave smaller bins for smaller items later.

    # Create a mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Initialize priorities to a very low value (or negative infinity) to ensure that bins
    # that cannot fit the item have the lowest priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # For bins that can fit the item, assign their remaining capacity as the priority.
    # The higher the remaining capacity, the higher the priority for Worst Fit.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
