{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins with remaining capacity closest to the item size\n    while avoiding excessive fragmentation. It incorporates a filling threshold\n    and a bin-selection pressure to consolidate items into fewer bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0\n    item_fits = bins_remain_cap >= item\n\n    # 1. Proximity to item size: Favor bins that are a close fit for the item.\n    #    This reduces fragmentation. Use a quadratic penalty for the difference.\n    fit_difference = bins_remain_cap - item\n    proximity_priority = np.exp(-5 * (fit_difference / bin_capacity)**2) * item_fits\n    priorities += proximity_priority\n\n    # 2. Filling Threshold: Reward bins that, after adding the item, exceed a\n    #    certain fill threshold.  This promotes efficient bin utilization.\n    filling_threshold = 0.8 # aim for 80% fill\n    remaining_after_fit = bins_remain_cap - item\n    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity\n    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 0.75, 0.0)\n    priorities += threshold_bonus\n\n\n    # 3. Bin Selection Pressure: Add a bonus for bins that are already partially full.\n    #    This encourages filling existing bins before opening new ones. The fuller\n    #    the bin, the higher the bonus, up to a point.\n\n    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity\n    bin_pressure_bonus = np.clip(current_fill_level, 0, 0.9) * item_fits * 0.5 # Max bonus of 0.45\n    priorities += bin_pressure_bonus\n\n\n    # 4. Avoidance of bins where item doesn't fit. Ensure priority is strictly zero.\n    priorities[bins_remain_cap < item] = 0.0\n    \n    # 5. Slight preference for non-empty bins\n    non_empty_bonus = np.where(bins_remain_cap < bin_capacity, 0.1, 0.0) * item_fits\n    priorities += non_empty_bonus\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on close fit, target fill, and handles edge cases.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0\n    item_fits = bins_remain_cap >= item\n    \n    # Perfect fit early exit\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit):\n        priorities[perfect_fit] = 10.0\n        return priorities\n\n    # Close fit bonus\n    close_fit = np.abs(bins_remain_cap - item)\n    close_fit_priority = np.exp(-5 * close_fit) * item_fits\n    priorities += close_fit_priority\n\n    # Target fill bonus\n    remaining_after_fit = bins_remain_cap - item\n    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity\n    target_fill = 0.75\n    target_bonus = np.exp(-10.0 * np.abs(fill_level - target_fill)) * item_fits\n    priorities += 0.5 * target_bonus\n\n    # Desperation strategy: If no bin fits, put in smallest\n    if not np.any(item_fits):\n        priorities[:] = -1e9\n        if len(priorities) > 0:\n            priorities[np.argmin(bins_remain_cap)] = 0\n\n    # Normalize priorities\n    if np.any(priorities > 0):\n        priorities /= np.max(priorities)\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st prioritizes minimizing wasted space by exponentially penalizing remaining capacity, while the 20th uses a target fill and fragmentation penalty. The 1st also adds a small bonus for any bin where the item fits. The 20th handles the no-fit case by putting the item in the smallest bin, while the 1st does not explicitly handle this. Comparing (2nd best) vs (second worst), we see that the 2nd incorporates a target fill level, while the second worst also handles no-fit scenarios. Comparing (1st) vs (2nd), we see that the 1st uses wasted space to calculate priorities, while the 2nd version focuses on target fill. (3rd) vs (4th), the 3rd allows parameters while the 4th has fixed hyper parameters. Comparing (second worst) vs (worst), we see the second worst has extra logic to handle a perfect fit and target fill conditions. Overall: The best heuristics generally focus on minimizing wasted space, considering target fill levels, and explicitly handling edge cases like perfect fits and situations where no bin can accommodate the item. Normalization helps. Penalizing fragmentation and considering bin selection pressure also contribute to better performance.\n- \nOkay, here's a refined perspective on self-reflection for designing heuristics, focusing on effectiveness and clarity:\n\n*   **Keywords:** Objective-driven, interpretable, incremental refinement, validated assumptions, parameter impact.\n\n*   **Advice:** Focus on direct optimization objective alignment; validate assumptions thoroughly; prioritize simplicity; evaluate the marginal benefit of added complexity.\n\n*   **Avoid:** Unnecessary complexity; over-parameterization without clear benefit; opaque combinations of factors; neglecting validation.\n\n*   **Explanation:** Heuristics should be built methodically, with each component demonstrably improving performance relative to the core objective, avoid \"black box\" design and prefer solutions you can explain.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}