```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on closeness of fit, fullness, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    # 1. Closeness of fit (exponential decay)
    close_fit = np.abs(bins_remain_cap - item)
    priorities = np.exp(-2 * close_fit)
    priorities[bins_remain_cap < item] = 0

    # 2. Reward nearly full bins after adding the item
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-2 * np.abs(remaining_after_fit))
    priorities += nearly_full

    # 3. Penalize low utilization, encourage fuller bins
    bin_size = np.max(bins_remain_cap)
    utilization = (bin_size - remaining_after_fit) / bin_size
    empty_penalty = np.exp(-5 * (1 - utilization))
    priorities = priorities * empty_penalty
    
    min_utilization_threshold = 0.2
    mask = utilization < min_utilization_threshold
    priorities[mask] = 0

    return priorities
```
