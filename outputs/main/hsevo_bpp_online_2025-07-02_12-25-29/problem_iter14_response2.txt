```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: target fill, fit, fragmentation, desperation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0

    if np.all(bins_remain_cap < item):
        # Desperation: put in largest bin
        priorities[np.argmax(bins_remain_cap)] = 0.001
        return priorities
    
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    
    # Target fill bonus
    target_fill = 0.8
    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits
    priorities += fill_level_priority
    
    # Fragmentation penalty
    fragmentation_threshold = 0.15
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit/bin_capacity < fragmentation_threshold), -0.3, 0.0)
    priorities += fragmentation_penalty
    
    # Larger bin bonus (if item fits)
    priorities[item_fits] += 0.1

    # Prioritize bins with minimal wasted space (closest fit). Use inverse of remaining space.
    epsilon = 1e-6
    close_fit_priority = 0.0
    close_fit_priority = (1.0 / (remaining_after_fit + epsilon)) * item_fits
    priorities += close_fit_priority

    return priorities
```
