```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines target fill, close fit, and fragmentation, with an early exit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0

    if np.all(bins_remain_cap < item): # Early exit when no bin can fit item.
        priorities[np.argmin(bins_remain_cap)] = 0.01  # Desperation strategy: try smallest bin
        return priorities

    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity

    target_fill = 0.8
    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits
    priorities += fill_level_priority

    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    priorities += close_fit_priority * item_fits

    fragmentation_threshold = 0.15
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit/bin_capacity < fragmentation_threshold), -0.3, 0.0)
    priorities += fragmentation_penalty

    priorities[item_fits] += 0.1  # Larger bin bonus if item fits.

    return priorities
```
