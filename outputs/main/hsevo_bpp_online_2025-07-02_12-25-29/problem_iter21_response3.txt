```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version combines closeness-of-fit and fullness with normalization.
    It prioritizes bins where the item fits, aiming for optimal fill levels,
    while explicitly handling edge cases and balancing different criteria.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed

    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item

    # Closeness-of-fit priority (normalized)
    remaining_after_fit = bins_remain_cap - item
    close_fit = np.abs(remaining_after_fit)
    close_fit_priority = np.exp(-5 * close_fit)
    close_fit_priority[~item_fits] = 0  # Zero priority if item doesn't fit
    close_fit_priority = close_fit_priority / np.max(close_fit_priority, initial=1e-9)

    # Fullness priority (normalized)
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    fullness_priority = fill_level * item_fits  # Only consider if item fits
    fullness_priority = fullness_priority / np.max(fullness_priority, initial=1e-9)

    # Combined priority (weighted sum, normalized)
    priorities = 0.6 * close_fit_priority + 0.4 * fullness_priority

    # Encourage filling bins beyond a threshold
    filling_threshold = 0.8
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 0.5, 0.0)
    priorities += threshold_bonus

    # Explicitly handle bins where the item doesn't fit
    priorities[bins_remain_cap < item] = 0.0

    # Small bonus for bins that can fit the item (prioritize packing something)
    priorities[item_fits] += 0.1

    return priorities
```
