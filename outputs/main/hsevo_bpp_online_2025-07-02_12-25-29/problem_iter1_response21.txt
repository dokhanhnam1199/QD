```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by general relativity: maximizing 'gravitational potential' (utilization) while minimizing 'space-time distortion' (fragmentation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # "Gravitational Potential" - How much the item 'fills' the bin relative to its remaining capacity. Maximize this.
            utilization = item / cap

            # "Space-time Distortion" - How much is the remaining space after the item is added. Minimize this. This introduces a "penalty" if the remaining space is too small. A small remainder results in high 'distortion', while large remainders don't add much penalty.
            remainder = cap - item
            distortion = np.exp(-remainder / item) if remainder > 0 else float('inf')  #exponential decay penalty; small remainder -> large distortion, large remainder -> little distortion. 'inf' penalty for remainder <= 0, we do not want to assign bins without capacity.

            # Combine "Gravitational Potential" and inverse of "Space-time Distortion"
            #Prioritizes bins that efficiently accommodate the item while minimizing wasted space. Adding a little epsilon for the edge case of zero distortion to keep values reasonable
            epsilon = 1e-9
            priorities[i] = utilization / (distortion + epsilon)

    return priorities
```
