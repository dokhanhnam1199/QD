```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fill level, close fit, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0

    item_fits = bins_remain_cap >= item

    if not np.any(item_fits):
        priorities[:] = -1e9
        priorities[np.argmin(bins_remain_cap)] = 0
        return priorities

    remaining_after_fit = bins_remain_cap - item
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity

    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 10.0 #High priority for perfect fit
        return priorities
    
    target_fill = 0.8
    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits

    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits

    fragmentation_threshold = 0.2 #Slightly higher threshold
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit < fragmentation_threshold), -0.3, 0.0)

    large_space_threshold = 0.7
    large_space_penalty = np.where(item_fits & (bins_remain_cap > large_space_threshold), -0.1, 0.0)

    priorities = fill_level_priority + close_fit_priority + fragmentation_penalty + large_space_penalty

    return priorities
```
