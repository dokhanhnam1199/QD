```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Whether the item fits.
    2. How much space will be wasted if the item is placed in the bin (lower waste is better).
    3. A bonus for filling the bin close to capacity.
    4. A penalty for bins that would result in very small remaining capacity ("fragmentation").

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Item fits check
    item_fits = bins_remain_cap >= item

    # If no bins fit, return all zeros. Prevents errors and wasted computation
    if not np.any(item_fits):
        return priorities

    # 2. Waste calculation (remaining capacity after placing item)
    remaining_after_fit = bins_remain_cap - item
    waste = np.where(item_fits, remaining_after_fit, np.inf)  # Inf for bins that don't fit

    # 3. Prioritize bins with less waste (more efficient packing)
    # Use inverse of waste, scaled.  Smaller waste => larger priority
    waste_priority = np.where(item_fits, np.exp(-2 * waste), 0) #exponential decay

    priorities += waste_priority

    # 4. Bonus for bins filling up close to capacity
    nearly_full_threshold = 0.1 # how close to full is considered "nearly full"
    nearly_full_bonus = np.where(item_fits & (remaining_after_fit <= nearly_full_threshold), 0.5, 0)
    priorities += nearly_full_bonus
    
    # 5. Penalty for small remaining capacity (fragmentation avoidance)
    fragmentation_threshold = 0.2 # if remaining capacity is less than this, it's considered fragmented.
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit <= fragmentation_threshold), -0.25, 0)
    priorities += fragmentation_penalty
    
    #Ensure non negative priorities
    priorities = np.maximum(priorities, 0)


    return priorities
```
