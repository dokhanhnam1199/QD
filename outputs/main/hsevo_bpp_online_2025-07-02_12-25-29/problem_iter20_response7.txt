```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on close fit and filling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    bin_capacity = 1.0
    
    # Perfect fit early exit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 10.0
        return priorities

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    target_fill = 0.75
    target_bonus = np.exp(-10.0 * np.abs(fill_level - target_fill))
    priorities += 0.5 * target_bonus * item_fits


    #Penalty for large remaining space
    space_left_penalty = np.where(remaining_after_fit > 0.5 * bin_capacity, -0.5, 0.0) * item_fits
    priorities += space_left_penalty

    # Desperation strategy: If no bin fits, put in smallest
    if not np.any(item_fits):
        priorities[:] = -1e9
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    return priorities
```
