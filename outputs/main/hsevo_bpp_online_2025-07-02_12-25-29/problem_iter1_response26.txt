```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Rule 1: Prefer bins where the item fits (avoid fragmentation)
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give these bins a base priority

    # Rule 2: Among bins where it fits, prioritize those with tighter fit (minimize wasted space)
    slack = bins_remain_cap - item
    slack[~fit_mask] = np.inf #ignore the bins that doesn't fit the item.

    # Avoid division by zero in case item == remaining cap
    slack = np.where(slack == 0, 1e-9, slack)

    tightness = 1 / slack
    priorities[fit_mask] += tightness[fit_mask]


    # Rule 3: Give a small bonus to nearly full bins. Black Hole-esque Density bonus
    density = (1 - (bins_remain_cap / np.max(bins_remain_cap))) #relative density compared to maximum remaining cap
    priorities += 0.1 * density

    return priorities
```
