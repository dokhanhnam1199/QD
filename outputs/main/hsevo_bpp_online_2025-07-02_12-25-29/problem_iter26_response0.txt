```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines close fit, target fill, and bin pressure."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item

    # Perfect fit bonus
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 1.0
        return priorities
    
    # Close fit bonus
    fit_difference = np.abs(bins_remain_cap - item)
    proximity_priority = np.exp(-5 * (fit_difference / bin_capacity)**2) * item_fits
    priorities += proximity_priority
    
    # Target fill bonus: target around 75%
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    target_fill = 0.75
    target_bonus = np.exp(-10 * np.abs(fill_level - target_fill)) * item_fits
    priorities += 0.5 * target_bonus
    
    # Bin selection pressure bonus: favour bins almost full
    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    bin_pressure_bonus = np.clip(current_fill_level, 0, 0.9) * item_fits * 0.5
    priorities += bin_pressure_bonus

    # If no bin fits, put in smallest
    if not np.any(item_fits):
        priorities[:] = -1e9
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    # Normalize priorities
    if np.any(priorities > 0):
        priorities /= np.max(priorities)
    
    return priorities
```
