```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space and resulting fullness additively."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf

    # Reward close fits exponentially
    close_fit_reward = np.exp(-wasted_space)

    # Boost priority for bins that are almost full after adding the item
    remaining_capacity = bins_remain_cap - item
    almost_full = (remaining_capacity >=0) & (remaining_capacity < (0.1 * bins_remain_cap))
    close_to_full_boost = np.zeros_like(bins_remain_cap, dtype=float)
    close_to_full_boost[almost_full] = 0.5  # Boost priority

    # Combine rewards
    priorities = close_fit_reward + close_to_full_boost

    return priorities
```
