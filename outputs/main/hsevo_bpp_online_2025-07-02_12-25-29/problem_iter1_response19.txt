```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more sophisticated priority function considering multiple factors:
    1.  Wasted Space: Penalizes bins with remaining capacity close to the item size, promoting better fill.
    2.  Remaining Capacity: Prioritizes bins with enough, but not excessively large, remaining capacity. Avoids creating very empty bins early on.
    3.  Fit Score: Rewards bins where the item fits snugly (small waste), but not bins already close to full.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity < item:
            priorities[i] = -np.inf  # Cannot fit

        else:
            #Wasted Space penalty. lower values are better, exponentially scaled
            waste = capacity - item
            waste_penalty = np.exp(-waste)  # Higher penalty for larger waste, decreasing rapidly

            #remaining capacity reward, peaking at item size, but decreases slower when smaller/ larger than the item
            capacity_reward = np.exp(-np.abs(capacity-item)/item)

            #fit_score. Higher for bins where placing the item leads to nearing 100% fill but not above
            fit_score = 1 - (waste / (item + 0.0001)) # small constant for items close to zero. This also increases score with tighter fits
            if capacity <= 2*item:
                fit_score = fit_score*2 #extra boost to tight fit
            elif capacity >= 3*item: #less desireable fit
                 fit_score = fit_score * 0.5

            #combine these rewards and penalties
            priorities[i] = waste_penalty + capacity_reward + fit_score

    return priorities
```
