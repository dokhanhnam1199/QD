```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version balances fill level targets, close fit, and bin usage efficiency,
    with a focus on avoiding excessive fragmentation and promoting bin completion.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    remaining_after_fit = bins_remain_cap - item
    item_fits = bins_remain_cap >= item

    # Target fill level: Aim for bins close to this fill level after packing
    target_fill = 0.9
    fill_level_after = (bin_capacity - remaining_after_fit) / bin_capacity

    # Priority for bins nearing target fill level
    target_fill_priority = np.exp(-10 * np.abs(fill_level_after - target_fill)) * item_fits
    priorities += 0.8 * target_fill_priority

    # Close fit bonus, stronger than before
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-15 * close_fit) * item_fits
    priorities += close_fit_priority

    # Bonus for filling bins past a minimum threshold, but only if it doesn't exceed the target.
    min_fill = 0.6
    min_fill_bonus = np.where(item_fits & (fill_level_after >= min_fill) & (fill_level_after <= target_fill), 0.5, 0.0)
    priorities += min_fill_bonus

    # Discourage leaving very small gaps (fragmentation)
    small_gap_penalty = np.where(item_fits & (remaining_after_fit > 0) & (remaining_after_fit < 0.1), -0.3, 0.0) # Reduced Penalty
    priorities += small_gap_penalty

    # Prioritize using almost-empty bins if the item is large
    large_item_threshold = 0.7
    almost_empty_bonus = np.where((bins_remain_cap > 0.9) & (item >= large_item_threshold), 0.4, 0.0) # Increased Bonus
    priorities += almost_empty_bonus

    # Set priority to 0 for bins where the item doesn't fit
    priorities[~item_fits] = 0.0

    return priorities
```
