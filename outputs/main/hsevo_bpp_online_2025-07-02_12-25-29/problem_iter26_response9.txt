```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space and target fill."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item

    # No fit: put in smallest bin
    if not np.any(item_fits):
        priorities[:] = -1e9 #make all bins have very low priority
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0
        return priorities
    
    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Cost function based on remaining capacity: penalize wasted space
    waste_penalty = np.exp(-5 * remaining_after_fit) * item_fits
    priorities += waste_penalty

    # Target fill bonus
    target_fill = 0.8
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits
    priorities += fill_level_priority * 0.5 # lower weight target fill

    return priorities
```
