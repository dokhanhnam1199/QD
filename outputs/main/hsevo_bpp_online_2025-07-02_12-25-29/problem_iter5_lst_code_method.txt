{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and resulting fullness, using exponential decay.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf\n\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities[feasible_bins] = np.exp(-close_fit[feasible_bins])\n\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n    nearly_full = np.exp(-np.abs(remaining_after_fit))\n    priorities[feasible_bins] += nearly_full\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space and fullness, using exponential decay.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        priorities[:] = -np.inf\n        return priorities\n\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n\n    # Prioritize bins with smaller waste using exponential decay\n    priorities[feasible_bins] = np.exp(-waste[feasible_bins])\n\n    # Boost priority for bins that are almost full after adding the item\n    remaining_capacity = bins_remain_cap[feasible_bins] - item\n    almost_full = remaining_capacity < (0.1 * bins_remain_cap[feasible_bins]) #within 10%\n    priorities[feasible_bins][almost_full] += 0.5\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. Closeness of fit: Bins where the item fits nearly perfectly get a high priority.\n    2. Resulting fragmentation: Bins that would leave minimal wasted space after adding the item are favored.\n    3. Avoidance of near-empty bins: Penalizes bins that, after adding the item, are still far from full.\n    4. Considers a minimum threshold for bin utilization to avoid extreme fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Closeness of fit: Exponential decay around the perfect fit.\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-2 * close_fit)  # Increased sensitivity to close fit\n\n    # Penalize bins where the item doesn't fit (assign zero priority)\n    priorities[bins_remain_cap < item] = 0\n\n    # 2. Reward bins that become nearly full after adding the item.\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-2 * np.abs(remaining_after_fit)) # Increased sensitivity\n\n    priorities += nearly_full\n\n    # 3. Penalize bins that remain far from full. Encourage utilization.\n    # Avoid adding items to bins that will still be mostly empty\n    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same capacity\n    utilization = (bin_size - remaining_after_fit) / bin_size\n    empty_penalty = np.exp(-5 * (1 - utilization)) # Stronger penalty for low utilization\n    priorities *= empty_penalty # Reduced impact if poorly utilized\n\n\n    # 4. Minimum utilization threshold to reduce extreme fragmentation\n    min_utilization_threshold = 0.2  # e.g., require at least 20% utilization.\n    mask = utilization < min_utilization_threshold\n    priorities[mask] = 0  # Zero out priorities for bins below utilization threshold\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and resulting fullness, using exponential decay.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf\n\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities[feasible_bins] = np.exp(-close_fit[feasible_bins])\n\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n    nearly_full = np.exp(-np.abs(remaining_after_fit))\n    priorities[feasible_bins] += nearly_full\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and fullness using exponential decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    # Reward bins with capacity close to item size\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-close_fit)\n\n    # Penalize bins where the item doesn't fit\n    priorities[~possible_bins] = 0\n\n    # Reward bins that become nearly full\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-np.abs(remaining_after_fit))\n    priorities += nearly_full\n\n    # Add negative infinite priority for invalid bins\n    priorities[~possible_bins] = -np.inf\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. Closeness of fit (how well the item fits in the bin).\n    2. Fill level after adding the item (encourages full bins).\n    3. Avoidance of small remaining capacities (reduces fragmentation).\n    4. A slight preference for bins that are already somewhat full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Closeness of fit (higher priority for bins where the item fits well)\n    fit_difference = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-fit_difference * 2)  # Sharper exponential decay\n\n    # Penalize bins where the item doesn't fit (zero priority)\n    priorities[bins_remain_cap < item] = 0\n\n    # 2. Fill level after adding the item (encourage full bins)\n    remaining_after_fit = bins_remain_cap - item\n    fill_level = 1 - np.abs(remaining_after_fit) / np.max(bins_remain_cap) # Scale to bin size\n    priorities += fill_level * 0.75 # Weigh fill level\n\n    # 3. Avoid small remaining capacities (reduce fragmentation)\n    #   Penalize bins that would have very small remaining capacity.  Apply penalty only if it fits\n    small_capacity_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    small_capacity_threshold = 0.1  # Fraction of max bin capacity\n    small_capacity_penalty[remaining_after_fit > 0 ] = np.exp(-remaining_after_fit[remaining_after_fit > 0 ] / small_capacity_threshold)\n    \n    priorities[remaining_after_fit > 0 ] -= small_capacity_penalty[remaining_after_fit > 0 ]* 0.5\n\n    # 4. Prefer bins that are already somewhat full (helps consolidate items)\n    initial_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)\n    priorities += initial_fullness * 0.25 # Weigh initial fullness less\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Return priority score for each bin.\n    Combines close fit via exponential decay with a fullness reward.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities # all zeros. This should trigger adding new bin in the higher level function\n\n    # Close fit priority\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-close_fit)\n    priorities[~possible_bins] = 0\n\n    # Fullness reward, avoid nearly empty bins\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-np.abs(remaining_after_fit))\n    priorities += nearly_full\n\n    priorities[~possible_bins] = -1000\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. Closeness of fit: Bins where the item fits nearly perfectly get a high priority.\n    2. Resulting fragmentation: Bins that would leave minimal wasted space after adding the item are favored.\n    3. Avoidance of near-empty bins: Penalizes bins that, after adding the item, are still far from full.\n    4. Considers a minimum threshold for bin utilization to avoid extreme fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Closeness of fit: Exponential decay around the perfect fit.\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-2 * close_fit)  # Increased sensitivity to close fit\n\n    # Penalize bins where the item doesn't fit (assign zero priority)\n    priorities[bins_remain_cap < item] = 0\n\n    # 2. Reward bins that become nearly full after adding the item.\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-2 * np.abs(remaining_after_fit)) # Increased sensitivity\n\n    priorities += nearly_full\n\n    # 3. Penalize bins that remain far from full. Encourage utilization.\n    # Avoid adding items to bins that will still be mostly empty\n    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same capacity\n    utilization = (bin_size - remaining_after_fit) / bin_size\n    empty_penalty = np.exp(-5 * (1 - utilization)) # Stronger penalty for low utilization\n    priorities *= empty_penalty # Reduced impact if poorly utilized\n\n\n    # 4. Minimum utilization threshold to reduce extreme fragmentation\n    min_utilization_threshold = 0.2  # e.g., require at least 20% utilization.\n    mask = utilization < min_utilization_threshold\n    priorities[mask] = 0  # Zero out priorities for bins below utilization threshold\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and fullness using exponential decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    # Reward bins with capacity close to item size\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-close_fit)\n\n    # Penalize bins where the item doesn't fit\n    priorities[~possible_bins] = 0\n\n    # Reward bins that become nearly full\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-np.abs(remaining_after_fit))\n    priorities += nearly_full\n\n    # Add negative infinite priority for invalid bins\n    priorities[~possible_bins] = -np.inf\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, close_fit_decay_rate: float = 0.6505133384421425, nearly_full_decay_rate: float = 0.26884864193173436) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and fullness using exponential decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 11th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, close_fit_decay_rate: float = 0.6505133384421425, nearly_full_decay_rate: float = 0.26884864193173436) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and fullness using exponential decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space and fullness, combining ideas.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Exclude bins that cannot fit the item, or make wasted space computation\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward bins with small wasted space (close fit)\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize bins that become nearly full after adding the item\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine reward and penalty\n    priorities = close_fit_reward * nearly_full_penalty\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space and fullness, combining ideas.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Exclude bins that cannot fit the item, or make wasted space computation\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward bins with small wasted space (close fit)\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize bins that become nearly full after adding the item\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine reward and penalty\n    priorities = close_fit_reward * nearly_full_penalty\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on space utilization and remaining capacity.\"\"\"\n\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[~feasible_bins] = -np.inf\n\n    if np.any(feasible_bins):\n        utilization = item / bins_remain_cap[feasible_bins]\n        remaining_capacity = bins_remain_cap[feasible_bins] - item\n        normalized_remaining = remaining_capacity / np.max(bins_remain_cap)\n\n        priorities[feasible_bins] = np.sqrt(utilization) * (1 + normalized_remaining)\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fullness, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Wasted space calculation (exclude infeasible)\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward close fits exponentially\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize nearly full bins exponentially\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine rewards and penalties\n    priorities = close_fit_reward * nearly_full_penalty\n\n    # Encourage filling bins already somewhat full + randomness\n    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fullness, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Wasted space calculation (exclude infeasible)\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward close fits exponentially\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize nearly full bins exponentially\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine rewards and penalties\n    priorities = close_fit_reward * nearly_full_penalty\n\n    # Encourage filling bins already somewhat full + randomness\n    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fullness, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Wasted space calculation (exclude infeasible)\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward close fits exponentially\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize nearly full bins exponentially\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine rewards and penalties\n    priorities = close_fit_reward * nearly_full_penalty\n\n    # Encourage filling bins already somewhat full + randomness\n    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fullness, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Wasted space calculation (exclude infeasible)\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward close fits exponentially\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize nearly full bins exponentially\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine rewards and penalties\n    priorities = close_fit_reward * nearly_full_penalty\n\n    # Encourage filling bins already somewhat full + randomness\n    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fullness, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Wasted space calculation (exclude infeasible)\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward close fits exponentially\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize nearly full bins exponentially\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine rewards and penalties\n    priorities = close_fit_reward * nearly_full_penalty\n\n    # Encourage filling bins already somewhat full + randomness\n    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fullness, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Wasted space calculation (exclude infeasible)\n    wasted_space = bins_remain_cap - item\n    wasted_space[infeasible_mask] = np.inf\n\n    # Reward close fits exponentially\n    close_fit_reward = np.exp(-wasted_space)\n\n    # Penalize nearly full bins exponentially\n    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))\n\n    # Combine rewards and penalties\n    priorities = close_fit_reward * nearly_full_penalty\n\n    # Encourage filling bins already somewhat full + randomness\n    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}