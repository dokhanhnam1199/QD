```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins where the item fits
    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
        # Prioritize bins that are filled most efficiently (minimize wasted space). Avoid very small remaining space to improve the chances of packing a large item later.
        wasted_space = bins_remain_cap[fit_indices] - item
        # Prioritize those with small wasted space and a buffer
        buffer = np.where(wasted_space > 0.1 * item, wasted_space, np.inf)
        best_fit_indices = fit_indices[np.argmin(buffer)] #prefer larger wasted space that exceeds buffer

        priorities[best_fit_indices] = 1.0 + (bins_remain_cap[best_fit_indices] - item)/np.max(bins_remain_cap)  # Normalize based on maximum bin capacity
    else:
        # If the item doesn't fit in any bin, assign low priority. No bin will be selected.
        priorities = np.zeros_like(bins_remain_cap)
    return priorities
```
