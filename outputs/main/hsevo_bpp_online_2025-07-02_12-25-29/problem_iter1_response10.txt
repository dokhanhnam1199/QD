```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins that can fit the item snugly
    fit_indices = remaining_after_add >= 0
    if np.any(fit_indices):
        # Calculate wasted space if item is added
        wasted_space = remaining_after_add[fit_indices]
        
        # Give higher priority to bins where the wasted space is smaller, but not too small.
        # This encourages filling bins effectively without creating extremely small gaps.
        priorities[fit_indices] = 1.0 / (wasted_space + 0.01)  # Adding small value to prevent division by zero
        
        # Boost priority for "almost full" bins a bit more
        almost_full_indices = (wasted_space <= 0.1) & fit_indices[fit_indices]
        priorities[fit_indices][almost_full_indices] += 2
            
    # Slightly penalize bins that cannot fit the item
    else:
        priorities = -1 * np.abs(remaining_after_add)  # Give increasingly negative priority if the fit is really bad
            
    return priorities
```
