```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My design utilizes a multi-faceted approach, blending the concepts
    of space utilization, proximity to perfect fit, and a touch of
    stochasticity to simulate the unpredictable nature of electrical arcs.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Tesla's Coil: Maximize Space Utilization (avoid small bins if possible)
    space_utilization = bins_remain_cap - item
    space_utilization[space_utilization < 0] = -np.inf # Disqualify bins that can't fit

    # Wardenclyffe Tower: Aim for a Perfect Fit (minimize wasted space)
    proximity_to_fit = np.abs(space_utilization)
    proximity_to_fit = -proximity_to_fit # Invert to prioritize smaller waste

    # Tesla's Oscillator: Introduce controlled randomness (avoid local optima)
    random_fluctuations = np.random.rand(len(bins_remain_cap)) * 0.01  # Small random values

    # High-Frequency Current: Favor bins that are already somewhat full
    fullness_factor = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_factor[bins_remain_cap < item] = 0  # Remove if bin is too small

    priorities = space_utilization + proximity_to_fit + random_fluctuations + 0.5 * fullness_factor
    return priorities
```
