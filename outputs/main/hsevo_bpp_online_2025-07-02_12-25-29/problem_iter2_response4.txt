```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space and fullness, using exponential decay."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities[:] = -np.inf
        return priorities

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf

    # Prioritize bins with smaller waste using exponential decay
    priorities[feasible_bins] = np.exp(-waste[feasible_bins])

    # Boost priority for bins that are almost full after adding the item
    remaining_capacity = bins_remain_cap[feasible_bins] - item
    almost_full = remaining_capacity < (0.1 * bins_remain_cap[feasible_bins]) #within 10%
    priorities[feasible_bins][almost_full] += 0.5
    return priorities
```
