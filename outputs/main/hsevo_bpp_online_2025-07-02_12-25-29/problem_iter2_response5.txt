```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on minimizing waste and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for near-perfect fits, minimizing waste.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = np.exp(-5 * waste / item)  # Exponential decay based on waste

        # Penalize bins that are too empty to reduce fragmentation.
        waste_mask = bins_remain_cap > 2 * item
        priorities[waste_mask] -= 0.1 * (bins_remain_cap[waste_mask] - 2 * item) / item

    # Ensure invalid bins are never picked.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf

    return priorities
```
