```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space, fullness, and exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Wasted space calculation (exclude infeasible)
    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf

    # Reward close fits exponentially
    close_fit_reward = np.exp(-wasted_space)

    # Penalize nearly full bins exponentially
    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))

    # Combine rewards and penalties
    priorities = close_fit_reward * nearly_full_penalty

    # Encourage filling bins already somewhat full + randomness
    priorities += bins_remain_cap * 0.01 + np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    return priorities
```
