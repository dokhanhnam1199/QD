```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tight fit, bin utilization and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item

    if not np.any(item_fits):
        return priorities

    feasible_bins = bins_remain_cap[item_fits]
    feasible_indices = np.where(item_fits)[0]

    # Tight fit reward
    remaining_capacity_priority = np.exp(-np.abs(feasible_bins - item))
    priorities[feasible_indices] += remaining_capacity_priority

    # Bin utilization reward
    bin_utilization = 1 - (feasible_bins / np.max(bins_remain_cap))
    priorities[feasible_indices] += 0.5 * bin_utilization

    # Fragmentation penalty
    remaining_after_fit = feasible_bins - item
    fragmentation_penalty = np.where(remaining_after_fit < 0.1, -0.2, 0.0)
    priorities[feasible_indices] += fragmentation_penalty

    priorities = np.maximum(priorities, 0)
    return priorities
```
