```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors,
    including fill level, close fit, and a penalty for creating small
    fragments. It also incorporates an early exit condition to improve
    efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    
    # Early exit if no bin can accommodate the item
    if np.all(bins_remain_cap < item):
        return priorities

    # Filling threshold: aim for bins that get reasonably full
    filling_threshold = 0.8
    
    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item
    
    # Calculate fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    
    # Bonus for bins that meet filling threshold after item placement
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus

    # Close fit priority: higher priority if the item almost perfectly fits
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits  # Exponential decay
    priorities += close_fit_priority
    
    # Fragmentation penalty: penalize bins that leave small remaining space
    fragmentation_threshold = 0.2  # Maximum small fragment size
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit > 0) & (remaining_after_fit <= fragmentation_threshold), -0.5, 0.0)
    priorities += fragmentation_penalty

    # Slightly prioritize bins already with content to consolidate fills.
    already_used = bins_remain_cap < bin_capacity
    priorities += 0.05 * already_used * item_fits

    # Zero out priorities for bins where the item doesn't fit
    priorities[bins_remain_cap < item] = 0.0

    return priorities
```
