{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on close fit and target fill, with early exit.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities\n\n    # Close fit priority (higher is better)\n    close_fit = np.abs(bins_remain_cap - item)\n    close_fit_priority = np.exp(-7.0 * close_fit)  # Tuned exponent\n\n    priorities += close_fit_priority * feasible_bins\n\n    # Target fill bonus\n    remaining_after_fit = bins_remain_cap - item\n    fill_level = 1.0 - (remaining_after_fit / 1.56) # Assuming bin capacity 1.56\n    target_fill = 0.8\n    target_bonus = np.exp(-10.0 * np.abs(fill_level - target_fill)) # Tuned exponent\n\n    priorities += 0.5 * target_bonus * feasible_bins #Tunned weight\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on close-to-full, reasonable fit, and size difference.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    item_fits = bins_remain_cap >= item\n\n    if np.any(bins_remain_cap < 0):\n        raise ValueError(\"Negative bin capacity detected.\")\n\n    if not np.any(item_fits):\n        if len(priorities) > 0:\n            priorities[:] = -1e9\n            priorities[np.argmin(bins_remain_cap)] = 0\n        return priorities\n    \n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-15 * np.abs(remaining_after_fit)) * item_fits\n    priorities += 2.0 * nearly_full\n\n    reasonable_fit = item_fits & (remaining_after_fit > 0.05)\n    priorities += 0.8 * reasonable_fit\n\n    larger_bins = (bins_remain_cap >= item)\n    size_difference = bins_remain_cap - item\n    larger_bin_bonus = np.sqrt(np.maximum(0, 1 - size_difference)) * larger_bins\n    priorities += 0.3 * larger_bin_bonus\n    \n    priorities[bins_remain_cap < item] = -1e9\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of \"nearly full,\" \"reasonable fit,\" and \"size difference,\" along with handling the case where no item fits by assigning a large negative priority except to the bin with the smallest capacity. The worst focuses on similar concepts but is less refined. (2nd) is identical to (1st) which is a perfect clone so no differences. Comparing (1st) vs (3rd), (1st) uses a \"nearly full\" bonus with an exponential decay based on the absolute difference between remaining capacity and zero, while (3rd) uses a target fill bonus and avoids tiny fragments, adding a desperation strategy when no item fits. Comparing (3rd) vs (4th), the main difference is that (4th) is heavily parameterized, allowing for fine-tuning but potentially overfitting, while (3rd) uses hardcoded values. (15th) focuses on waste calculation, near-full bonus, and fragmentation penalty, ensuring non-negative priorities, whilst many other heuristics are similar but the weighting and combination of factors vary significantly. Comparing (16th) vs (17th), we observe similar priorities for close fit, filling target, and fragmentation, but (17th) explicitly handles the case where no items fit using an early exit strategy. Comparing (second worst) vs (worst), the difference lies in the explicit `ValueError` check for negative bin capacities and the more refined bonus/penalty calculations in the second worst. Overall: better heuristics seem to involve a combination of close-fit rewards, target fill bonuses, fragmentation penalties, and careful consideration of edge cases where no items fit or negative bin capacities exist. The weighting of these factors and the use of exponential decay functions appear to influence performance significantly.\n- \nOkay, let's redefine \"Current self-reflection\" to design better bin packing heuristics, focusing on avoiding the pitfalls of \"Ineffective self-reflection.\"\n\nHere's a revised approach to self-reflection, designed for actionable improvements:\n\n*   **Keywords:** Objective alignment, Component Interaction, Early Exit, Parameter control.\n*   **Advice:** Focus on the *interaction* of combined factors (close-fit, fill). Iteratively refine these interactions and early exits based on *empirical performance*.\n*   **Avoid:** Vague considerations (e.g., \"handle fragmentation\" without a specific implementation). Over-parameterization without demonstrable benefit.\n*   **Explanation:** Prioritize strategies grounded in data & experimentation. Don't get lost in general considerations; test specific ideas and measure the effect on performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}