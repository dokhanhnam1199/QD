```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill level, close fit, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0

    item_fits = bins_remain_cap >= item
    if not np.any(item_fits):
        return priorities # Early exit if no bin fits

    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Target fill, adjust based on item size
    target_fill = 0.8 + 0.1 * min(item, 0.2)
    fill_diff = np.abs(fill_level - target_fill)
    fill_priority = np.exp(-5 * fill_diff) * item_fits
    priorities += fill_priority

    # Close fit, sensitive to item size
    close_fit_sensitivity = 5 + 2 * item
    close_fit = np.abs(remaining_after_fit)
    close_fit_priority = np.exp(-close_fit_sensitivity * close_fit) * item_fits
    priorities += close_fit_priority

    # Fragmentation penalty
    frag_penalty = np.where((remaining_after_fit > 0) & (remaining_after_fit < 0.15), -0.3, 0)
    priorities += frag_penalty * item_fits

    priorities[~item_fits] = -np.inf # Never select non-fitting bins

    return priorities
```
