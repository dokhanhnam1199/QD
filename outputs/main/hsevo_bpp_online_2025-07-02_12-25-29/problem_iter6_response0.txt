```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Closeness of fit: Bins with remaining capacity close to the item size get higher priority.
    2. Fill percentage: Bins that become nearly full after adding the item are also prioritized.
    3. Avoidance of small remaining capacity: Bins that would leave very small remaining capacity
       are penalized to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins where the item doesn't fit (assign zero priority)
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = 0

    # Reward bins where the item almost fits perfectly
    close_fit = np.abs(bins_remain_cap - item)
    priorities += np.exp(-2 * close_fit)  # Sharper exponential decay for close fit

    # Reward bins that become nearly full after adding the item
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-5 * np.abs(remaining_after_fit))  # Stronger weight on nearly full
    priorities += nearly_full

    # Penalize bins that would leave a very small remaining capacity (fragmentation)
    small_remaining = remaining_after_fit < 0.1  # Define "small" as less than 0.1
    priorities[~cannot_fit & small_remaining] -= 0.5  # Reduce priority for small remaining

    # Prioritize bins with higher utilization after placement
    utilization = (bins_remain_cap - item) / 1.0  # Calculate utilization (assuming bin size of 1.0)
    priorities += np.clip(1 - np.abs(utilization),0,1) #Linear reward to bins almost full after packing.
    
    return priorities
```
