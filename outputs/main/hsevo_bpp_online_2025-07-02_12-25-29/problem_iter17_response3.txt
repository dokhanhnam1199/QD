```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering close fit, target fill, and fragmentation.
    Combines early exit with adjusted penalties.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item

    # Early exit for bins where item does not fit
    priorities[~item_fits] = -1e9  # Large penalty

    # Calculate remaining capacity and fill level
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Target Fill Level Priority
    target_fill = 0.9
    fill_diff = np.abs(fill_level - target_fill)
    fill_priority = np.exp(-10 * fill_diff) * item_fits
    priorities += fill_priority

    # Close Fit Priority
    close_fit = np.abs(remaining_after_fit)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits
    priorities += close_fit_priority

    # Avoid Small Remaining Space
    small_space_penalty = np.where((remaining_after_fit > 0) & (remaining_after_fit < 0.1), -0.5, 0)
    priorities += small_space_penalty * item_fits

    # Perfect Fit Early Exit
    perfect_fit_bins = np.abs(remaining_after_fit) < 1e-6
    if np.any(perfect_fit_bins):
        priorities[:] = -1e9
        priorities[perfect_fit_bins] = 1e9 # Huge bonus for perfect fit
        return priorities
    
    # Normalize priorities (handle the case where all priorities are the same)
    if np.max(priorities) == np.min(priorities):
        return priorities # or return np.zeros_like(priorities), depending on desired behavior
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)

    return priorities
```
