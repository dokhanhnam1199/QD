```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and fullness, using exponential decay and inf for infeasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    if not np.any(feasible_bins):
        return priorities

    close_fit = np.abs(bins_remain_cap[feasible_bins] - item)
    priorities[feasible_bins] = np.exp(-close_fit)

    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    nearly_full = np.exp(-np.abs(remaining_after_fit))
    priorities[feasible_bins] += nearly_full

    # Add a bonus for bins that will be almost full after placing the item
    almost_full_bonus = np.exp(-np.abs(remaining_after_fit - 0.1)) # Target 0.1 remaining
    priorities[feasible_bins] += almost_full_bonus * 0.5

    return priorities
```
