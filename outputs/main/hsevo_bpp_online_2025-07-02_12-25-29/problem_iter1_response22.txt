```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small negative value to avoid selecting infeasible bins.
    priorities = -np.inf * np.ones_like(bins_remain_cap)

    # Find feasible bins (bins with enough remaining capacity).
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, all remain -inf

    # Calculate the wasted space after placing the item in each feasible bin.
    wasted_space = bins_remain_cap[feasible_bins] - item

    # Prioritize bins with less wasted space (First-Fit Decreasing-like behavior).
    # But also add a slight preference for bins that are already somewhat full (to encourage packing).
    fullness_factor = bins_remain_cap[feasible_bins] / np.sum(bins_remain_cap)

    priorities[feasible_bins] = -wasted_space + 0.1 * fullness_factor # Trade-off between wasted space and already-filled bins

    # Add a bonus for bins that would become exactly full after adding the item
    exact_fit = wasted_space == 0
    priorities[feasible_bins][exact_fit] += 1.0 # large number to prefer perfect fit

    return priorities
```
