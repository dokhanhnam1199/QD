```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines proximity to item size, filling threshold, and bin pressure."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item

    # Proximity to item size
    fit_difference = bins_remain_cap - item
    proximity_priority = np.exp(-5 * (fit_difference)**2) * item_fits
    priorities += proximity_priority

    # Filling Threshold
    filling_threshold = 0.8
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 0.75, 0.0)
    priorities += threshold_bonus

    # Bin Selection Pressure
    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    bin_pressure_bonus = np.clip(current_fill_level, 0, 0.9) * item_fits * 0.5
    priorities += bin_pressure_bonus

    # Ensure zero priority if item doesn't fit
    priorities[bins_remain_cap < item] = 0.0
    
    # Small preference for non-empty bins
    non_empty_bonus = np.where(bins_remain_cap < bin_capacity, 0.1, 0.0) * item_fits
    priorities += non_empty_bonus

    return priorities
```
