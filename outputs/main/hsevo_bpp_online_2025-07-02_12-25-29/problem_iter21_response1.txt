```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version focuses on a normalized combination of fill level and closeness-of-fit,
    explicitly handling edge cases and prioritizing a simple, direct approach.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed

    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item

    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item

    # Calculate fill level after adding the item (only for bins where it fits)
    fill_level = np.where(item_fits, (bin_capacity - remaining_after_fit) / bin_capacity, 0.0)

    # Normalize fill level
    normalized_fill = fill_level  # Already between 0 and 1

    # Closeness-of-fit priority (only for bins where it fits)
    close_fit = np.abs(bins_remain_cap - item)
    normalized_close_fit = np.where(item_fits, np.exp(-5 * close_fit), 0.0)  # Exponential decay

    # Combine fill level and closeness-of-fit (only for bins where it fits)
    priorities = normalized_fill + normalized_close_fit

    # Ensure bins where the item doesn't fit have zero priority
    priorities[bins_remain_cap < item] = 0.0

    # Small bias toward using any available space when possible
    priorities = np.where(item_fits, priorities + 0.01, priorities)

    return priorities
```
