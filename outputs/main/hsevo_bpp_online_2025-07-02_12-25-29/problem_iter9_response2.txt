```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and a filling threshold.
    It prioritizes bins where the item fits, leading to a fill level above a certain threshold,
    while also considering bins that offer a close fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    item_fits = bins_remain_cap >= item

    # If no bin can fit item, return all zeros
    if not np.any(item_fits):
        return priorities
        
    # Filling threshold after adding the item
    filling_threshold = 0.75
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Bonus for bins meeting filling threshold
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus

    # Close fit priority (exponential decay)
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    priorities += close_fit_priority * item_fits

    # Near full priority (exponential decay)
    nearly_full = np.exp(-10 * np.abs(remaining_after_fit)) * item_fits
    priorities += 0.5 * nearly_full

    # Prioritize bins with smallest remaining capacity among feasible bins
    smallest_remaining = np.where(item_fits, -bins_remain_cap, 0) #Negate to make smallest *most* desirable
    priorities += smallest_remaining

    # Sanity check: Ensure no negative priorities.
    priorities = np.maximum(priorities, 0)

    return priorities
```
