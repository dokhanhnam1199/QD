```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version focuses on a balance between tight packing and avoiding excessive fragmentation.
    It prioritizes bins where the item fits, with a preference for bins that result in a
    remaining capacity close to a target residual.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0
    
    # Item fits mask
    item_fits = bins_remain_cap >= item
    
    # If no bin fits, return all zeros
    if not np.any(item_fits):
        return priorities
    
    # Target residual capacity (e.g., aiming for ~20% empty space)
    target_residual = 0.2 * bin_capacity
    
    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Prioritize bins with remaining capacity closest to target_residual
    residual_priority = np.exp(-5 * np.abs(remaining_after_fit - target_residual)) * item_fits # Exponential decay around target
    priorities += residual_priority
    
    # Bonus for bins that result in a high fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    high_fill_bonus = np.where(item_fits & (fill_level > 0.8), 0.5, 0.0)
    priorities += high_fill_bonus

    # Add a small penalty for bins that are left with very little space after the item is added
    # helps to balance fragmentation
    small_residual_penalty = np.where(item_fits & (remaining_after_fit < 0.1), -0.2, 0.0)
    priorities += small_residual_penalty
    
    # Ensure non-fitting bins have zero priority
    priorities[bins_remain_cap < item] = 0.0

    # Normalize priorities to make sure they are in a reasonable range
    if np.any(priorities > 0):
      priorities = priorities / np.max(priorities)

    return priorities
```
