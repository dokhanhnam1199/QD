```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits best, aiming for high fill rates
    while avoiding excessive fragmentation.  It uses a simpler, more focused approach
    than v1, emphasizing close fits and avoiding penalties for bins that don't fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item

    # 1. Prioritize bins with the smallest remaining capacity AFTER adding the item.
    #    This encourages filling bins as much as possible.  We only consider bins
    #    where the item *can* fit. Smaller remaining capacity -> higher priority.
    remaining_after_fit = bins_remain_cap - item
    fit_quality = np.where(item_fits, np.exp(-5 * remaining_after_fit), 0)  # Exponential decay of priority as remaining cap increases.  Only active if item fits.
    priorities += fit_quality

    # 2. Bonus for bins that are filled above a threshold after placing the item
    filling_threshold = 0.8  # Slightly higher threshold
    bin_capacity = 1.0
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 0.5, 0.0) #Reduced bonus strength
    priorities += threshold_bonus

    # 3. Avoid extreme fragmentation: Slightly penalize bins where there's a significant amount of space left.
    #   This is a weaker penalty than previous versions, aiming for balance. Only apply if item fits
    large_waste = np.where(item_fits & (remaining_after_fit > 0.5), -0.1, 0)  # Reduced penalty value
    priorities += large_waste

    # No penalty for bins where item doesn't fit.
    # No bonus for larger bins

    return priorities
```
