```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by Feynman's path integral formulation, we consider all possible "paths" (bins) and weight them based on a "quantum action."
    The "action" here is related to how well the item fits into the bin's remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Give zero priority to bins that cannot fit the item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, return all zeros

    # Action: How much space is wasted if we place the item in this bin
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf # Penalize infeasible bins very heavily (infinity)

    # "Quantum amplitude": e^(-action)  (More negative waste means better fit)
    amplitudes = np.exp(-waste)

    # Normalize amplitudes (to get a probability-like distribution, Feynman-style)
    amplitudes[~feasible_bins] = 0 #ensure that we only consider feasible bins
    if np.sum(amplitudes) > 0:
      amplitudes = amplitudes / np.sum(amplitudes)
    else:
      amplitudes = np.ones_like(amplitudes) / len(amplitudes) #if they are all zero, then just divide them evenly

    priorities = amplitudes # Assign probability/priority according to quantum amplitudes
    return priorities
```
