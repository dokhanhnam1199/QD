```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, fullness, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Closeness of fit (higher priority for bins where the item fits well)
    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf  #avoid error on infeasible bins

    close_fit_reward = np.exp(-np.abs(wasted_space)*2)
    priorities += close_fit_reward

    # Fill level after adding the item (encourage full bins)
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[infeasible_mask] = np.inf
    fill_level = 1 - np.abs(remaining_after_fit) / np.max(bins_remain_cap) # Scale to bin size
    priorities += fill_level * 0.75 # Weigh fill level

    # Avoid small remaining capacities (reduce fragmentation)
    small_capacity_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    small_capacity_threshold = 0.1  # Fraction of max bin capacity
    
    valid_indices = (remaining_after_fit > 0) & (remaining_after_fit != np.inf)
    small_capacity_penalty[valid_indices] = np.exp(-remaining_after_fit[valid_indices] / small_capacity_threshold)
    priorities[valid_indices] -= small_capacity_penalty[valid_indices]* 0.5

    return priorities
```
