import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                perfect_fit_priority: float = 13.556919412817864,
                close_fit_decay: float = 5.270019163379718,
                target_fill: float = 0.5637630362051927,
                target_decay: float = 11.176467046483916,
                target_bonus_weight: float = 0.7501524389088134,
                large_space_threshold: float = 0.8140183795907998,
                large_space_penalty: float = -0.04730562726573784,
                no_fit_penalty: float = -1734196378.6695838,
                bin_capacity: float = 0.5526032728171091) -> np.ndarray:
    """Prioritizes bins based on close fit and filling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    
    # Perfect fit early exit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = perfect_fit_priority
        return priorities

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-close_fit_decay * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    target_bonus = np.exp(-target_decay * np.abs(fill_level - target_fill))
    priorities += target_bonus_weight * target_bonus * item_fits


    #Penalty for large remaining space
    space_left_penalty = np.where(remaining_after_fit > large_space_threshold * bin_capacity, large_space_penalty, 0.0) * item_fits
    priorities += space_left_penalty

    # Desperation strategy: If no bin fits, put in smallest
    if not np.any(item_fits):
        priorities[:] = no_fit_penalty
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    return priorities
