```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version combines closeness-of-fit and fullness, with normalization
    to balance the factors. It focuses on bins where the item fits and
    prioritizes those that result in high fill levels or close-to-perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed

    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item

    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item

    # Calculate fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Closeness-of-fit priority (normalized)
    close_fit = np.abs(remaining_after_fit)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits
    close_fit_priority = close_fit_priority / np.max(close_fit_priority, initial=1e-9) # Normalize

    # Fullness priority (normalized) - prioritize higher fill levels
    fullness_priority = fill_level * item_fits
    fullness_priority = fullness_priority / np.max(fullness_priority, initial=1e-9) # Normalize

    # Combine priorities (direct combination)
    priorities = 0.6 * close_fit_priority + 0.4 * fullness_priority  # Weighted average

    # Ensure bins where item doesn't fit have zero priority
    priorities[bins_remain_cap < item] = 0

    # Small bonus for using any available space
    priorities[item_fits] += 0.05
    
    return priorities
```
