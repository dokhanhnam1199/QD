```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and a slight preference
    for bins that are already somewhat full. It also introduces a more nuanced
    penalty for bins that would result in very small remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Perfect Fit: Highest priority to bins where the item almost fits perfectly
    close_fit = np.abs(bins_remain_cap - item)
    priorities = np.exp(-close_fit * 2)  # Sharper exponential decay

    # 2. Item Doesn't Fit: Zero priority
    priorities[bins_remain_cap < item] = 0

    # 3. Nearly Full: Reward bins that become nearly full after adding the item
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-np.abs(remaining_after_fit) * 2) # Sharper decay
    priorities += nearly_full * 0.8 # Reduced weight compared to perfect fit

    # 4. Existing Fill Level: Slight preference for bins that are already somewhat full
    #    This encourages filling existing bins before starting new ones.
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity
    priorities += existing_fill * 0.2  # Small contribution

    # 5. Fragmentation Penalty: Penalize bins that would result in very small remaining capacities.
    #    This aims to avoid creating many bins with tiny amounts of space left.
    very_small_remaining = remaining_after_fit < 0.1 #tuneable parameter
    priorities[very_small_remaining] *= 0.5  # Reduce priority if fragmentation is high

    return priorities
```
