```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Prioritizes bins based on close fit, target fill, and avoids fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    if not np.any(item_fits):
        priorities[:] = -1e9
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0
        return priorities

    # Close fit bonus (higher priority for less waste)
    close_fit_priority = np.exp(-2 * (bins_remain_cap - item)) * item_fits
    priorities += close_fit_priority

    # Target fill bonus (reward bins close to full after packing)
    fill_threshold = 0.9
    nearly_full_bonus = np.where(item_fits & (1 - remaining_after_fit/bin_capacity >= fill_threshold), 0.5, 0)
    priorities += nearly_full_bonus

    # Fragmentation penalty (avoid small remaining space)
    fragmentation_threshold = 0.1
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit/bin_capacity <= fragmentation_threshold), -0.25, 0)
    priorities += fragmentation_penalty

    return priorities
```
