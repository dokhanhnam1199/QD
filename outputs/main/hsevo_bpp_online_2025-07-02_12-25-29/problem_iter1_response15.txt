```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A good bin should have enough capacity to fit the item but not too much,
    avoiding excessive waste. Also, favor bins that are already somewhat full.
    

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a very low priority to bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # For feasible bins, calculate the fill ratio after adding the item
    feasible_mask = ~infeasible_mask
    remaining_capacity_after_packing = bins_remain_cap[feasible_mask] - item
    
    #Calculate waste after packing.
    waste_ratio = remaining_capacity_after_packing / 1.0 #Assumes bin capacity = 1
    
    
    #Priority function.
    #Penalize high waste
    priorities[feasible_mask] = -waste_ratio 

    # Also prioritize bins that are already partially full (Avoid creating new bins)
    # original_fill_ratio = (1.0 - bins_remain_cap[feasible_mask]) #bin capacity = 1 assumed
    priorities[feasible_mask] += (1.0 - bins_remain_cap[feasible_mask]) #prioritizes usage of partially filled bins
   
    return priorities
```
