```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a quantum-inspired approach.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)

    for i in range(n_bins):
        remaining_capacity = bins_remain_cap[i]
        if remaining_capacity >= item:
            # 'Quantum' probability of fitting (sigmoid function)
            probability = 1 / (1 + np.exp(-10 * (remaining_capacity - item)))  # steep sigmoid around item size

            # Preference for bins that are not too empty (avoid fragmentation)
            # Higher fill rate gets higher score, but not if the item doesn't fit!
            fill_rate_penalty = np.exp(-5 * (item/remaining_capacity-1))

            # Encourages a certain "energy level" or bin utilization (parabola)
            ideal_utilization = 0.75 # aiming for around 75% fill rate
            utilization = 1 - remaining_capacity  # Assuming bin size is 1, higher value when capacity lower
            energy_term = -10*(utilization - ideal_utilization)**2
            
            priorities[i] = probability * fill_rate_penalty + energy_term
        else:
            priorities[i] = -np.inf  # Item does not fit; assign a very low priority.

    return priorities
```
