{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version considers both space utilization (how full the bin would become)\n    and fragmentation (how much space would be wasted if the item is added).\n    Bins with capacity closest to the item size get the highest priority,\n    followed by bins that would be filled close to full if the item were added.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Give high priority to bins where the item almost fits perfectly\n    close_fit = np.abs(bins_remain_cap - item)\n    priorities = np.exp(-close_fit)  # Exponential decay around perfect fit\n\n    # Penalize bins where the item doesn't fit (assign zero priority)\n    priorities[bins_remain_cap < item] = 0\n\n    # Also reward bins that become nearly full after adding the item\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = np.exp(-np.abs(remaining_after_fit) )\n\n    priorities += nearly_full\n    # Prioritize bins with higher utilization after placement\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a refined definition of \"Current self-reflection\" to guide heuristic design, focusing on effectiveness:\n\n*   **Keywords:** Objective-alignment, iterative refinement, evaluation, interpretable rules, reward/penalty system, constraint handling.\n\n*   **Advice:** Explicitly link heuristic components to specific objectives. Measure the impact of each design choice on performance and interpretability. Prioritize constraint satisfaction.\n\n*   **Avoid:** Premature complexity, uninterpretable rules, neglecting objective alignment, insufficient evaluation.\n\n*   **Explanation:** Focus on creating heuristics that directly optimize the target objective, adding complexity only when demonstrably beneficial and always evaluating their impact. Consider constraints early.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}