```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines close fit, target fill, and fragmentation avoidance."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # Perfect fit early exit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 10.0
        return priorities

    # No fit: put in smallest bin
    if not np.any(item_fits):
        priorities[np.argmin(bins_remain_cap)] = 0.1
        return priorities

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    target_fill = 0.8
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits
    priorities += fill_level_priority

    # Fragmentation penalty
    fragmentation_threshold = 0.15
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit/bin_capacity < fragmentation_threshold), -0.3, 0.0)
    priorities += fragmentation_penalty
    
    return priorities
```
