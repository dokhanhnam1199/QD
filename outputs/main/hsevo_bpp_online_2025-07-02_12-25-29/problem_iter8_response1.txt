```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines close fit, utilization, fragmentation, and validation for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility Handling:
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities # No feasible bins, return zero priorities

    # 1. Close Fit Priority:
    close_fit_diff = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-2 * close_fit_diff)
    priorities += close_fit_priority

    # 2. High Utilization Priority:
    remaining_after_fit = bins_remain_cap - item
    nearly_full_priority = np.exp(-2 * np.abs(remaining_after_fit))
    priorities += nearly_full_priority

    # 3. Fragmentation Penalty:
    fragmentation_penalty = np.exp(-0.5 * remaining_after_fit)
    priorities += fragmentation_penalty

    # Apply mask AFTER calculating other priorities to avoid influencing calculations
    priorities[~feasible_bins] = 0

    # Scaling to rank feasible bins, avoid division by zero
    priorities[feasible_bins] *= (bins_remain_cap[feasible_bins] - item + 1e-9) / (bins_remain_cap[feasible_bins] + 1e-9)

    return priorities
```
