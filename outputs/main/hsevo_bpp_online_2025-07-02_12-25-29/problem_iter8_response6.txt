```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on closeness of fit and utilization.
    Addresses infeasibility and potential division-by-zero errors.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    # 1. Closeness of fit
    close_fit_diff = np.abs(bins_remain_cap - item)
    priorities = np.exp(-2 * close_fit_diff)
    priorities[bins_remain_cap < item] = 0

    # 2. High Utilization
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-2 * np.abs(remaining_after_fit))
    priorities += nearly_full

    # 3. Scale based on remaining capacity after fit
    priorities[bins_remain_cap >= item] *= (bins_remain_cap[bins_remain_cap >= item] - item + 0.0001) / (bins_remain_cap[bins_remain_cap >= item] + 0.0001)

    return priorities
```
