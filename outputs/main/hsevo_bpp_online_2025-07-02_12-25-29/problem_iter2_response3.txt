```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space minimization with fullness consideration."""

    priorities = -np.inf * np.ones_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    wasted_space = bins_remain_cap[feasible_bins] - item
    close_fit_reward = np.exp(-wasted_space)

    # Penalize bins becoming nearly full, avoid division by zero
    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))

    priorities[feasible_bins] = close_fit_reward * nearly_full_penalty

    # Bonus for exact fit
    exact_fit = wasted_space == 0
    priorities[feasible_bins][exact_fit] += 1.0

    return priorities
```
