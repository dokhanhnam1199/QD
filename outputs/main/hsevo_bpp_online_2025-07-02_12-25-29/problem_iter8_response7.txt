```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering filling threshold, close fit, and error handling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    filling_threshold = 0.75
    bin_capacity = 1.0

    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus

    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    priorities += close_fit_priority * item_fits

    priorities[bins_remain_cap < item] = 0

    nearly_full = np.exp(-10 * np.abs(remaining_after_fit)) * item_fits
    priorities += 0.5 * nearly_full

    larger_bins = (bins_remain_cap >= item)
    priorities += 0.1 * larger_bins
    
    # Penalize bins that would leave a very small remaining capacity (fragmentation)
    small_remaining = remaining_after_fit < 0.1
    priorities[item_fits & small_remaining] -= 0.25 

    return priorities
```
