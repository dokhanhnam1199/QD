```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space and resulting fullness additively."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate wasted space if item were placed in each bin
    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf  # Avoid errors later

    # Reward close fit (small wasted space)
    close_fit_reward = np.exp(-wasted_space)

    # Reward bins that will be nearly full
    nearly_full_reward = np.exp(-1 / (wasted_space + 1e-9))

    # Additively combine the rewards for final priority
    priorities = close_fit_reward + nearly_full_reward

    return priorities
```
