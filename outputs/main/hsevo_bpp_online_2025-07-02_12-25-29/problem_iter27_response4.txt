```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1.  Whether the item fits.
    2.  How much space is left after placing the item (lower is better, indicating tighter packing).
    3.  A penalty for excessive fragmentation (very small remaining space).
    4.  Bonus for approaching a target fill level.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    target_fill = 0.9  # Aim for bins to be around 90% full
    min_fill = 0.5

    # Check if item fits in each bin
    item_fits = bins_remain_cap >= item

    # Remaining capacity after adding the item (only for bins where it fits)
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~item_fits] = np.inf  # effectively ignore bins where item doesn't fit

    # 1. Prioritize fitting the item:
    priorities[item_fits] += 1.0

    # 2. Reward bins with less remaining space after fitting (tighter packing)
    # Use an exponential to heavily favor bins with small remaining space,
    # but only if the item fits.
    packing_efficiency = np.exp(-5 * remaining_after_fit)
    priorities[item_fits] += packing_efficiency[item_fits]

    # 3. Penalize bins that will result in excessive fragmentation.  Avoid making
    #    bins with very small remaining space, if possible.
    fragmentation_penalty = np.where(remaining_after_fit < 0.1, -0.5, 0) #big penalty for tiny space
    priorities += fragmentation_penalty

    # 4. Give a bonus for bins that approach the target fill level
    # Calculate current fill level after adding item (only where it fits)
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Bonus for approaching target fill level.
    target_bonus = np.exp(-5 * np.abs(fill_level - target_fill))
    priorities[item_fits] += 0.75 * target_bonus[item_fits]

    #Add small bonus if fill_level after adding is higher than min_fill
    min_fill_bonus = np.where(fill_level > min_fill, 0.25, 0)
    priorities[item_fits] += min_fill_bonus[item_fits]
    
    return priorities
```
