```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item without excessive wasted space.
    It combines several heuristics:
    1.  Bins that can't fit the item get a very low priority.
    2.  Bins with a remaining capacity close to the item's size get higher priority (first-fit-decreasing style).
    3.  Bins with small remaining capacity gets a small penalty to avoid small fragmentation
    4.  Empty bins get a penalty
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Bins that can't fit the item get a very low priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Bins that can fit get a base priority inversely proportional to the wasted space.  Also, adding 1 avoids division by zero.

    feasible_mask = bins_remain_cap >= item
    wasted_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = 1.0 / (wasted_space + 0.01) # Smaller wasted space is better

    # Add a bonus to bins with remaining capacity that is closest to item size to prioritize first fit
    diff_abs = np.abs(bins_remain_cap - item)
    priorities = priorities + 1.0/(diff_abs+0.1)

    # Penalize bins with very small remaining capacity to reduce small waste creation
    small_cap_mask = bins_remain_cap < 0.15 #tunable hyperparameter
    priorities[small_cap_mask] = priorities[small_cap_mask] * 0.5


    #Empty bin penality, tunable hyperparameter

    empty_bin_mask = bins_remain_cap == 1.0 # Assuming bin cap of 1.0

    priorities[empty_bin_mask] = priorities[empty_bin_mask] * 0.75 #Tunable

    return priorities
```
