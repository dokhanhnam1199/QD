```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    - Ability to fit the item.
    - Closeness to a target fill level (around 90%).
    - Avoiding excessive fragmentation (remaining space).
    - A tie-breaker for the fullest bin so far.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed

    # Check which bins can accommodate the item
    item_fits = bins_remain_cap >= item

    # If no bin can fit the item, return an array of zeros.
    if not np.any(item_fits):
        return priorities
        

    # 1. Target Fill Level: Prioritize bins that will be close to 90% full.
    target_fill = 0.9
    remaining_after_fit = bins_remain_cap - item
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    
    # Calculate deviation from target fill; smaller deviation is better
    deviation_from_target = np.abs(fill_level_after_fit - target_fill)
    
    # Give higher priority to bins closer to the target fill
    target_priority = np.exp(-5 * deviation_from_target) * item_fits
    priorities += target_priority

    # 2. Fragmentation Penalty: Penalize bins that leave too much empty space.
    fragmentation_penalty = np.exp(-2 * remaining_after_fit) * item_fits # Smaller remaining is better
    priorities += fragmentation_penalty

    # 3. Tie-breaker: Prioritize the fullest bin (smallest remaining cap) if multiple bins are suitable
    # This encourages filling bins completely before starting new ones. Only apply to viable bins.
    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.1 * current_fill_level * item_fits  # Small bonus for current fill.


    # Ensure priorities for bins that don't fit the item are zero.
    priorities[bins_remain_cap < item] = 0.0
    
    return priorities
```
