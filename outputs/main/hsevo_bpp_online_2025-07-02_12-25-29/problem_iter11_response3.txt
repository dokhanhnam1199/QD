```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on close-to-full, reasonable fit, and size difference."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item

    if np.any(bins_remain_cap < 0):
        raise ValueError("Negative bin capacity detected.")

    if not np.any(item_fits):
        if len(priorities) > 0:
            priorities[:] = -1e9
            priorities[np.argmin(bins_remain_cap)] = 0
        return priorities
    
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-15 * np.abs(remaining_after_fit)) * item_fits
    priorities += 2.0 * nearly_full

    reasonable_fit = item_fits & (remaining_after_fit > 0.05)
    priorities += 0.8 * reasonable_fit

    larger_bins = (bins_remain_cap >= item)
    size_difference = bins_remain_cap - item
    larger_bin_bonus = np.sqrt(np.maximum(0, 1 - size_difference)) * larger_bins
    priorities += 0.3 * larger_bin_bonus
    
    priorities[bins_remain_cap < item] = -1e9
    
    return priorities
```
