```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Whether the item fits in the bin.
    2. The remaining capacity after adding the item (favoring smaller remaining capacity).
    3. A penalty for high fragmentation (large remaining capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Check if the item fits
    item_fits = bins_remain_cap >= item
    
    # If the item doesn't fit, the priority is 0
    priorities[~item_fits] = 0.0
    
    # Consider only bins where item fits for calculating priorities
    valid_bins = bins_remain_cap[item_fits]
    
    if len(valid_bins) > 0:
        # 2. Reward bins with small remaining capacity after adding the item
        remaining_capacity_after_fit = valid_bins - item
        
        # Use inverse of remaining capacity as a reward (higher value means smaller remaining capacity)
        # Add a small constant to avoid division by zero
        capacity_priority = 1.0 / (remaining_capacity_after_fit + 0.01)
        
        # Normalize capacity priority to be between 0 and 1
        capacity_priority = (capacity_priority - np.min(capacity_priority)) / (np.max(capacity_priority) - np.min(capacity_priority))
        
        # 3. Penalize bins with large remaining capacity
        fragmentation_penalty = valid_bins # Direct fragmentation penalty
        
        # Scale the fragmentation penalty to a reasonable range
        fragmentation_penalty = (fragmentation_penalty - np.min(fragmentation_penalty)) / (np.max(fragmentation_penalty) - np.min(fragmentation_penalty))
        
        # Combine the priorities with weights
        combined_priority = 0.7 * capacity_priority - 0.3 * fragmentation_penalty
        
        # Assign the priorities to the original array, where the item fits
        priorities[item_fits] = combined_priority

    return priorities
```
