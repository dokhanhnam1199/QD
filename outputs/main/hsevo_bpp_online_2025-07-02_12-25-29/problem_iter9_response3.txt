```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1.  Best Fit: Prioritizes bins with the smallest remaining capacity after adding the item.
    2.  Filling Threshold: Provides a bonus for bins that reach a desired fill level.
    3.  Avoidance of Fragmentation: Discourages placing items in bins where it leaves
        a small unused space.
    4. Prevents selecting Infeasible bins.
    5. Validates feasibility during runtime.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0

    # Feasibility check: Ensure item fits in the bin
    item_fits = bins_remain_cap >= item

    # If no bin can accommodate the item, return all zeros immediately
    if not np.any(item_fits):
        return priorities
    
    # Best Fit Priority: reward small remaining capacity.
    remaining_after_fit = bins_remain_cap - item
    best_fit_priority = np.where(item_fits, bin_capacity - remaining_after_fit, 0.0)  # Use remaining capacity directly
    priorities += best_fit_priority

    # Filling Threshold Priority: reward bins close to full.
    filling_threshold = 0.75
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level_after_fit >= filling_threshold), 0.5, 0.0)  # Scale the bonus
    priorities += threshold_bonus

    # Fragmentation Avoidance: Penality for leaving tiny gaps.
    fragmentation_threshold = 0.1  # Tune this parameter
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit > 0) & (remaining_after_fit < fragmentation_threshold), -0.2, 0.0)  # Penalize, but not too harshly
    priorities += fragmentation_penalty

    # Infeasible Bin Handling: Explicitly set priority to zero
    priorities[bins_remain_cap < item] = 0.0

    # Validation: Check for negative priorities and cap at zero. (defensive programming)
    priorities = np.maximum(priorities, 0.0)
    
    # Final Scaling: Ensure meaningful values
    priorities = priorities/np.max(priorities) if np.max(priorities) > 0 else priorities # Scale between zero and one.

    return priorities
```
