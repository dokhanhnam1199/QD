```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that result in a fill level closest to a target fill level
    after adding the item. It also considers the absolute remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    target_fill_level = 0.9  # Aim for bins that are nearly full

    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item

    # Calculate remaining capacity after placing the item
    remaining_after_fit = bins_remain_cap - item

    # Calculate fill level after placing the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Prioritize bins with fill level closest to target
    fill_level_diff = np.abs(fill_level - target_fill_level)
    fill_priority = np.exp(-5 * fill_level_diff) * item_fits  # Exponential decay around target

    priorities += fill_priority

    # Penalize bins where the item doesn't fit
    priorities[bins_remain_cap < item] = 0

    # Add a bonus proportional to remaining capacity *only if* the item fits. Larger free bins are less preferable
    # This avoids completely filling small bins when bigger bins are available and a near-perfect fit is not available.
    priorities -= 0.1 * bins_remain_cap * item_fits

    return priorities
```
