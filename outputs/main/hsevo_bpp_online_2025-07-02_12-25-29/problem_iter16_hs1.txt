import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                bin_capacity: float = 0.6165581944340314,
                filling_threshold: float = 0.6919183468614337,
                close_fit_exponent: float = 7.949613651911917,
                threshold_bonus_amount: float = 0.602450238208245,
                min_fragment_size: float = 0.11753491605676179,
                reasonable_fit_weight: float = 0.7587856270865683,
                penalty_for_not_fit: float = 4449990674.607216) -> np.ndarray:
    """Prioritizes bins, considering close fit, target fill, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-close_fit_exponent * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), threshold_bonus_amount, 0.0)
    priorities += threshold_bonus
    
    # Avoid tiny fragments
    reasonable_fit = item_fits & (remaining_after_fit > min_fragment_size)
    priorities += reasonable_fit_weight * reasonable_fit
    
    priorities[bins_remain_cap < item] = -penalty_for_not_fit

    # Desperation strategy
    if not np.any(item_fits):
        priorities[:] = -penalty_for_not_fit
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    return priorities
