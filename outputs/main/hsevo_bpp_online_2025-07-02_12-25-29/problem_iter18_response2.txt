```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Whether the item fits in the bin.
    2. How much space is left after placing the item (lower is better).
    3. A bonus for filling bins to a certain level.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Check if the item fits
    item_fits = bins_remain_cap >= item

    # If no bins can accommodate the item, return all zeros to avoid errors later.
    if not np.any(item_fits):
        return priorities

    # 2. Remaining space after placing the item
    remaining_space = bins_remain_cap - item
    remaining_space[~item_fits] = np.inf  # Assign infinite remaining space to bins where the item doesn't fit to deprioritize

    # 3. Prioritize based on the remaining space (smaller is better)
    # Use inverse of remaining space, add a small constant to avoid division by zero, and scale.
    priorities = 1.0 / (remaining_space + 0.001) * item_fits

    # 4. Bonus for bins that reach a certain filling threshold after placing the item
    bin_capacity = 1.0
    filling_threshold = 0.8  # e.g., 80% full
    fill_level = (bin_capacity - (bins_remain_cap - item)) / bin_capacity
    threshold_bonus = np.where((item_fits) & (fill_level >= filling_threshold), 1.0, 0.0)

    priorities += threshold_bonus

    # 5. Give a slight bonus to bins that are already quite full
    already_full_bonus = np.where(bins_remain_cap < 0.5, 0.2 * (0.5 - bins_remain_cap) * item_fits, 0.0)
    priorities += already_full_bonus
    

    return priorities
```
