```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Whether the item fits.
    2. How much free space would be left after placing the item (minimize wasted space).
    3. A fill-level target (attempt to fill bins close to a desired level).

    It aims to balance packing items effectively while minimizing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0

    # 1. Item Fit:  Prioritize bins where the item fits.
    item_fits = bins_remain_cap >= item
    priorities[~item_fits] = -1  # Very low priority if it doesn't fit

    # 2. Minimize Wasted Space: Prioritize bins that leave minimal remaining space.
    remaining_after_fit = bins_remain_cap - item
    waste_penalty = np.abs(remaining_after_fit)  # Closer to zero is better

    # Scale and invert the waste penalty to create a priority boost.  We want lower waste to have higher priority.
    waste_priority = np.exp(-5 * waste_penalty) * item_fits
    priorities += waste_priority

    # 3. Fill Level Target: Encourage bins to reach a target fill level.
    target_fill_level = 0.8  # Aim for bins to be around 80% full
    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    future_fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    
    # Calculate how close the future fill level is to the target.
    fill_level_diff = np.abs(future_fill_level - target_fill_level)

    # Boost priority for bins that get closer to the target fill level.
    fill_level_priority = np.exp(-5 * fill_level_diff) * item_fits
    priorities += 0.7 * fill_level_priority

    # Small bonus for larger bins that have enough room
    priorities += 0.05 * item_fits
    

    return priorities
```
