```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, target fullness, and wasted space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_after_fit = bins_remain_cap - item
    target_remaining = 0.1 # Target remaining capacity after packing

    # Bonus for bins meeting target fullness
    almost_full_bonus = np.exp(-np.abs(remaining_after_fit - target_remaining))
    priorities += almost_full_bonus * feasible_bins

    # Close fit priority with wasted space penalty
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    wasted_space_penalty = np.exp(10* remaining_after_fit) # Penalize bins with small remaining capacity
    priorities += close_fit_priority * feasible_bins - 0.1* wasted_space_penalty*feasible_bins

    return priorities
```
