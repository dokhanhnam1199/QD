```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Whether the item fits.
    2. Remaining capacity after placing the item (favoring tighter fits).
    3. A filling threshold to encourage bins to reach a desirable fill level.
    4. A penalty for excessive fragmentation.
    5. A bonus for almost filling up the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item

    # If no bins can fit, return all zeros.
    if not np.any(item_fits):
        return priorities

    # 1. Feasibility check: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap[item_fits]
    feasible_indices = np.where(item_fits)[0]

    # 2. Remaining capacity priority: Higher priority to bins that leave less space.
    remaining_capacity_priority = 1 - (feasible_bins - item) / bin_capacity
    priorities[feasible_indices] += remaining_capacity_priority

    # 3. Filling threshold: Reward bins that cross a certain threshold after placement.
    filling_threshold = 0.75
    remaining_after_fit = feasible_bins - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(fill_level >= filling_threshold, 0.5, 0.0)  # Adjusted bonus
    priorities[feasible_indices] += threshold_bonus

    # 4. Fragmentation penalty: Penalize bins that would leave very small remaining space.
    fragmentation_penalty = np.where(remaining_after_fit < 0.1, -0.2, 0.0) #Adjusted penalty and threshold
    priorities[feasible_indices] += fragmentation_penalty

    # 5. Nearly Full Bonus : Give bins a boost if they are almost full.
    almost_full_bonus = np.where(remaining_after_fit <= 0.05, 0.3, 0.0) #Adjusted threshold and bonus
    priorities[feasible_indices] += almost_full_bonus

    # Validation: Ensure priorities are non-negative.  Important to keep
    # for heuristics where we subtract factors.
    priorities = np.maximum(priorities, 0)

    return priorities
```
