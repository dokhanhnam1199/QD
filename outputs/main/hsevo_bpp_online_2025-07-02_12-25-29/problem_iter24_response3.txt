```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a few key factors:
    1. Whether the item fits.
    2. How well the item fills the bin (space utilization).
    3. A penalty for leaving too little space (fragmentation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Item fits check
    item_fits = bins_remain_cap >= item

    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item

    # Calculate fill ratio if the item were placed in the bin.
    fill_ratio = (bins_remain_cap - remaining_after_fit) / 1.0  # Assuming bin capacity is 1.0

    # Prioritize bins where the item fits
    priorities[item_fits] = 1.0

    # Reward better fill ratios.  Use a scaled fill ratio to avoid extreme values.
    priorities[item_fits] += fill_ratio[item_fits] * 0.5

    # Penalize leaving very small remaining space (fragmentation).
    # Experiment with the threshold and penalty factor.
    fragmentation_threshold = 0.1  # e.g., don't leave less than 10% of the bin
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit < fragmentation_threshold), -0.75, 0)
    priorities += fragmentation_penalty


    return priorities
```
