```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines filling threshold and close-fit reward for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get zero priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = 0

    # Close-fit reward using exponential decay
    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf
    close_fit_reward = np.exp(-5*np.abs(wasted_space))
    priorities += close_fit_reward * (bins_remain_cap >= item)

    # Filling threshold bonus.
    filling_threshold = 0.75
    bin_capacity = 1.0
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where((bins_remain_cap >= item) & (fill_level >= filling_threshold), 0.5, 0.0)
    priorities += threshold_bonus
    
    # Small bonus for larger bins that fit item.
    larger_bins = bins_remain_cap >= item
    priorities += 0.1 * larger_bins

    return priorities
```
