```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Calculate remaining capacity after placing the item (only for valid bins)
        remaining_capacity = bins_remain_cap[valid_bins] - item
        
        # Prioritize bins where the remaining capacity is small, but not zero (almost full)
        priorities[valid_bins] = 1 / (remaining_capacity + 1e-9) # Avoid division by zero

        # Slightly boost priority for bins where item fills more than half of the bin's capacity
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += (fill_ratio > 0.5) * 0.5

        # Penalize bins with remaining capacity close to the item size 
        # to encourage packing more than one item into a bin (prevent fragmentation)
        close_to_item_size = np.abs(remaining_capacity - item)
        priorities[valid_bins] -= np.exp(-close_to_item_size) * 0.2
    else:
        #If no bin can fit the item, assign lowest priority to all bins.
        priorities[:] = -np.inf
        
    return priorities
```
