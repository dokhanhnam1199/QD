import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                filling_threshold: float = 0.5098515190189981,
                close_fit_exponent: float = 7.499739405930524,
                nearly_full_exponent: float = 2.701874827700684,
                nearly_full_weight: float = 0.386408681478866,
                larger_bins_weight: float = 0.1633407907361229,
                bin_capacity: float = 1.3827944931927165) -> np.ndarray:
    """Combines filling threshold, close fit, and wasted space considerations."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    remaining_after_fit = bins_remain_cap - item
    item_fits = bins_remain_cap >= item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus

    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-close_fit_exponent * close_fit)
    priorities += close_fit_priority * item_fits

    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = 0  # Set priority to 0 rather than -inf

    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf

    nearly_full = np.exp(-nearly_full_exponent * np.abs(remaining_after_fit)) * item_fits
    priorities += nearly_full_weight * nearly_full

    larger_bins = (bins_remain_cap >= item)
    priorities += larger_bins_weight * larger_bins

    return priorities
