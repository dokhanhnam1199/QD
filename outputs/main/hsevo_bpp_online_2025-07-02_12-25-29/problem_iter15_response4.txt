```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1.  Target Fill Level: Aims for a specific fill level (e.g., 90%) after adding the item.
    2.  Close Fit: Prioritizes bins where the item fits snugly, minimizing wasted space.
    3.  Avoidance of Small Remaining Space: Discourages leaving very small spaces in bins.
    4. Early exit for bins where item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    item_fits = bins_remain_cap >= item

    #Early exit for bins where the item does not fit
    priorities[~item_fits] = -1  # Assign lowest priority to bins where item doesn't fit
    
    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Calculate fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # 1. Target Fill Level Priority:  Aim for a fill level close to 90%
    target_fill = 0.9
    fill_diff = np.abs(fill_level - target_fill)
    fill_priority = np.exp(-10 * fill_diff) * item_fits #Higher the fill higher priority
    priorities += fill_priority

    # 2. Close Fit Priority: Exponential decay around a perfect fit.
    close_fit = np.abs(remaining_after_fit)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits # the closer the fit the higher the priority
    priorities += close_fit_priority

    # 3. Avoid Small Remaining Space: Penalize bins that result in very small remaining space
    small_space_penalty = np.where((remaining_after_fit > 0) & (remaining_after_fit < 0.1), -0.5, 0) #Penalize if less than 0.1
    priorities += small_space_penalty * item_fits
    
    # Normalize priorities to avoid overflow.
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)
    priorities[~item_fits] = 0

    return priorities
```
