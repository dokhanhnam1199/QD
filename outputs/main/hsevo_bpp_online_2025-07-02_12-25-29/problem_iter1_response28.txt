```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can fit the item reasonably well
    (avoiding near-empty bins if better options exist). It considers both
    the remaining capacity and how much of the bin would be filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a base priority based on whether the item fits
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    # Adjust priorities for bins that can fit, favoring better fits:
    fitting_bins_indices = np.where(can_fit)[0]
    for i in fitting_bins_indices:
        # Calculate the fill ratio after adding the item
        fill_ratio = item / bins_remain_cap[i]

        #Give a bonus for good fills. Aim for something close to filling the bin without overfilling

        priorities[i] += (1-np.abs(fill_ratio - 0.7)).clip(0,1)
        priorities[i] += (1-bins_remain_cap[i]).clip(0,1) #Bins with low capacity remaining are better, this prevents adding to almost empty bins

    #Bins that can't fit get very low priorities
    priorities[~can_fit] = -1000

    return priorities
```
