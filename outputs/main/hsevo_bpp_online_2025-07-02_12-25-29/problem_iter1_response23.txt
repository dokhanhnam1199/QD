```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very high priority to bins that can fit the item almost perfectly
    fit_threshold = 0.95
    perfect_fit_mask = (bins_remain_cap >= item) & (item / bins_remain_cap >= fit_threshold)
    priorities[perfect_fit_mask] += 100  # Large bonus for near-perfect fit

    # Reward bins that can fit the item (First-Fit Decreasing heuristic influence)
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] += bins_remain_cap[can_fit_mask] - item # Favor bins with smaller waste

    # Penalize bins that cannot fit the item to 0, this will effectively remove them from consideration
    cannot_fit_mask = bins_remain_cap < item
    priorities[cannot_fit_mask] = -np.inf  # Large penalty for overflow

    # Bonus for bins with higher remaining capacity (encourages using more full bins first, less fragmentation)
    priorities += bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 # Normalise the remaining capacity
    
    return priorities
```
