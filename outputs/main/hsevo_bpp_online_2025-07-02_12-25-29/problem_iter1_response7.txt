```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics:
    1. Reward bins that can *almost* perfectly fit the item (minimize wasted space).
    2. Penalize bins that would become nearly full (risk of wasted capacity).
    3. Exclude bins that cannot accommodate the item.
    4. Add a small randomness for exploration

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exclude bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate wasted space if item were added to each bin
    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf #effectively exclude those bins

    # Reward bins with small wasted space (close fit)
    close_fit_reward = np.exp(-wasted_space) # Exponential decay. Closer fit is exponentially better

    # Penalize bins that become nearly full after adding the item
    nearly_full_penalty = np.exp( - 1 / (wasted_space + 1e-9))  # Avoid division by zero

    # Combine reward and penalty
    priorities = close_fit_reward * nearly_full_penalty

    # Add small randomness for exploration (Gaussian noise)
    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape) #consider making magnitude of noise item-size dependent.
    priorities += noise

    return priorities
```
