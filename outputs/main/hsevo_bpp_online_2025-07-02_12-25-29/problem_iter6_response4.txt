```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and bin fill level
    after item placement. It prioritizes bins that provide a close fit and lead
    to high bin utilization while minimizing wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Close Fit Priority:
    # Prioritize bins where item size is close to remaining capacity.
    close_fit_diff = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-2 * close_fit_diff)  # Sharper decay for better fit
    priorities += close_fit_priority

    # 2. High Utilization Priority:
    # Prioritize bins that become nearly full after adding the item.
    remaining_after_fit = bins_remain_cap - item
    nearly_full_priority = np.exp(-2 * np.abs(remaining_after_fit)) # Sharper decay
    priorities += nearly_full_priority

    # 3. Fragmentation Penalty:
    # Penalize bins that would leave significant wasted space after adding the item.
    fragmentation_penalty = np.exp(-0.5 * remaining_after_fit)  # Larger remaining gets larger penalty. The decay is smaller, such that we still account for this factor.
    priorities += fragmentation_penalty

    # 4. Infeasibility Handling:
    # Set priority to zero for bins where the item doesn't fit.
    priorities[bins_remain_cap < item] = 0

    # 5. Scale to better rank feasible candidates.
    priorities[bins_remain_cap >= item] *= (bins_remain_cap[bins_remain_cap >= item] - item + 0.0001) / (bins_remain_cap[bins_remain_cap >= item] + 0.0001)

    return priorities
```
