```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on close fit, target fill and early exit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    bin_capacity = 1.0

    if not np.any(feasible_bins):
        priorities[np.argmin(bins_remain_cap)] = 0.01
        return priorities

    # Close fit priority
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-7.0 * close_fit)
    priorities += close_fit_priority * feasible_bins

    # Target fill priority
    remaining_after_fit = bins_remain_cap - item
    fill_level = 1.0 - (remaining_after_fit / bin_capacity)
    target_fill = 0.8
    target_bonus = np.exp(-10.0 * np.abs(fill_level - target_fill))

    priorities += 0.5 * target_bonus * feasible_bins
    priorities[feasible_bins] += 0.1 # Bonus if the item fits in the bin.

    #Fragmentation penalty
    fragmentation_threshold = 0.15
    fragmentation_penalty = np.where(feasible_bins & (remaining_after_fit/bin_capacity < fragmentation_threshold), -0.3, 0.0)
    priorities += fragmentation_penalty


    return priorities
```
