```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Closeness of fit (how well the item fits in the bin).
    2. Fill level after adding the item (encourages full bins).
    3. Avoidance of small remaining capacities (reduces fragmentation).
    4. A slight preference for bins that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Closeness of fit (higher priority for bins where the item fits well)
    fit_difference = np.abs(bins_remain_cap - item)
    priorities = np.exp(-fit_difference * 2)  # Sharper exponential decay

    # Penalize bins where the item doesn't fit (zero priority)
    priorities[bins_remain_cap < item] = 0

    # 2. Fill level after adding the item (encourage full bins)
    remaining_after_fit = bins_remain_cap - item
    fill_level = 1 - np.abs(remaining_after_fit) / np.max(bins_remain_cap) # Scale to bin size
    priorities += fill_level * 0.75 # Weigh fill level

    # 3. Avoid small remaining capacities (reduce fragmentation)
    #   Penalize bins that would have very small remaining capacity.  Apply penalty only if it fits
    small_capacity_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    small_capacity_threshold = 0.1  # Fraction of max bin capacity
    small_capacity_penalty[remaining_after_fit > 0 ] = np.exp(-remaining_after_fit[remaining_after_fit > 0 ] / small_capacity_threshold)
    
    priorities[remaining_after_fit > 0 ] -= small_capacity_penalty[remaining_after_fit > 0 ]* 0.5

    # 4. Prefer bins that are already somewhat full (helps consolidate items)
    initial_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)
    priorities += initial_fullness * 0.25 # Weigh initial fullness less
    return priorities
```
