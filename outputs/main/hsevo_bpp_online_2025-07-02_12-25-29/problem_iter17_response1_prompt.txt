{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines target fill, close fit, and fragmentation, with an early exit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0\n\n    if np.all(bins_remain_cap < item): # Early exit when no bin can fit item.\n        priorities[np.argmin(bins_remain_cap)] = 0.01  # Desperation strategy: try smallest bin\n        return priorities\n\n    item_fits = bins_remain_cap >= item\n    remaining_after_fit = bins_remain_cap - item\n    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity\n\n    target_fill = 0.8\n    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits\n    priorities += fill_level_priority\n\n    close_fit = np.abs(bins_remain_cap - item)\n    close_fit_priority = np.exp(-5 * close_fit)\n    priorities += close_fit_priority * item_fits\n\n    fragmentation_threshold = 0.15\n    fragmentation_penalty = np.where(item_fits & (remaining_after_fit/bin_capacity < fragmentation_threshold), -0.3, 0.0)\n    priorities += fragmentation_penalty\n\n    priorities[item_fits] += 0.1  # Larger bin bonus if item fits.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins: close fit, target fill, and no fit handling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    item_fits = bins_remain_cap >= item\n\n    if not np.any(item_fits):\n        priorities[:] = -1e9\n        priorities[np.argmin(bins_remain_cap)] = 0\n        return priorities\n\n    remaining_after_fit = bins_remain_cap - item\n    # Close fit (nearly full)\n    nearly_full = np.exp(-15 * np.abs(remaining_after_fit)) * item_fits\n    priorities += 2.0 * nearly_full\n\n    #Target fill.  Bin capacity is assumed 1.56 here\n    fill_level = 1.0 - (remaining_after_fit / 1.56)\n    target_fill = 0.8\n    target_bonus = np.exp(-10.0 * np.abs(fill_level - target_fill))\n    priorities += 0.5 * target_bonus * item_fits\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the first heuristic is simpler, focusing on close fit, target fill, and fragmentation avoidance with fixed parameters, while the 20th dynamically adjusts parameters based on item size, offering potentially better adaptability but at the cost of increased complexity.\nComparing (2nd) vs (19th), the second heuristic gives bonus to bins larger than the item while the 19th adds early exit when perfectly fit bin is found. The 19th also has a stronger penalty for bins with large remaining space.\nComparing (3rd) vs (4th), these two heuristics are identical.\nComparing (19th) vs (20th), we see the 19th heuristic has early exit when perfectly fit bin is found while 20th heuristic has early exit if no bins can fit the item. The 20th dynamically adjusts parameters. Also, the 20th heuristic assigns -inf penalty to bins where item doesn't fit. Overall: The better heuristics prioritize a balance of simplicity and effectiveness, using targeted bonuses and penalties related to fill level, fit, and fragmentation. Early exits and handling of edge cases (like no fitting bins) are also helpful. More complex, dynamic approaches might offer benefits, but increase the risk of overfitting or computational overhead.\n- \nOkay, let's refine \"current self-reflection\" to guide better heuristic design, steering clear of the pitfalls of \"ineffective self-reflection.\"\n\nHere's a revised breakdown:\n\n*   **Keywords:** Clarity, directness, balance, adaptability, edge case handling, interpretability, evaluation, validation, parameterization.\n\n*   **Advice:** Prioritize clear, direct combinations of relevant factors; validate inputs early; explicitly handle edge cases (e.g., infeasibility); use parameterization judiciously for flexibility, but maintain interpretability.\n\n*   **Avoid:** Unnecessary complexity, multiplicative combinations, opaque calculations, unchecked randomness, overlooking the objective function, over-parameterization.\n\n*   **Explanation:** Focus on simplicity, directness, and validation. Design clear, interpretable rules, address edge cases effectively, and prioritize comprehensive evaluation to assess the impact of each change.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}