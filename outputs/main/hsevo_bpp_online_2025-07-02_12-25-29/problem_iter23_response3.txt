```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on close fit, target fill, avoids fragmentation, and handles edge cases."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    if not np.any(item_fits):
        priorities[:] = -1e9
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0  #desperation strategy: put in smallest bin
        return priorities

    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 1e9
        return priorities
    
    # Close fit bonus
    close_fit_priority = np.exp(-2 * (bins_remain_cap - item)) * item_fits

    # Target fill bonus
    fill_threshold = 0.9
    nearly_full_bonus = np.where(item_fits & (1 - remaining_after_fit/bin_capacity >= fill_threshold), 0.5, 0)
    
    # Fragmentation penalty
    fragmentation_threshold = 0.1
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit/bin_capacity <= fragmentation_threshold), -0.25, 0)
    
    priorities = close_fit_priority + nearly_full_bonus + fragmentation_penalty

    return priorities
```
