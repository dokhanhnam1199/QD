```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities considering fit, fill threshold, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get zero priority
    item_fits = bins_remain_cap >= item
    priorities[~item_fits] = 0.0

    # Filling threshold bonus
    filling_threshold = 0.75
    bin_capacity = 1.0
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus
    
    # Close fit reward
    wasted_space = bins_remain_cap - item
    close_fit_reward = np.exp(-np.abs(wasted_space)*2)
    priorities += close_fit_reward * item_fits

    # Fragmentation penalty: Avoid small remaining capacities
    small_capacity_threshold = 0.1
    small_capacity_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    valid_indices = (remaining_after_fit > 0) & item_fits
    small_capacity_penalty[valid_indices] = np.exp(-remaining_after_fit[valid_indices] / small_capacity_threshold)
    priorities[valid_indices] -= small_capacity_penalty[valid_indices]* 0.5

    # Small bonus to larger bins that can fit the item
    larger_bins_bonus = item_fits * 0.1
    priorities += larger_bins_bonus
    
    return priorities
```
