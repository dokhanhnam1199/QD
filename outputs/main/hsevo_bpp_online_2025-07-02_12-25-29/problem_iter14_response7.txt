```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, nearly-full bonus, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item

    if not np.any(item_fits):
        if len(priorities) > 0:
            priorities[:] = -1e9
            priorities[np.argmin(bins_remain_cap)] = 0
        return priorities
    
    remaining_after_fit = bins_remain_cap - item
    waste = np.where(item_fits, remaining_after_fit, np.inf)
    waste_priority = np.where(item_fits, np.exp(-2 * waste), 0)
    priorities += waste_priority

    nearly_full_threshold = 0.1
    nearly_full_bonus = np.where(item_fits & (remaining_after_fit <= nearly_full_threshold), 0.5, 0)
    priorities += nearly_full_bonus
    
    fragmentation_threshold = 0.2
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit <= fragmentation_threshold), -0.25, 0)
    priorities += fragmentation_penalty

    return priorities
```
