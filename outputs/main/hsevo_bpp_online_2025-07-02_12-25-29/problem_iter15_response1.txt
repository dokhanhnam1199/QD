```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with a close fit and a preference for filling bins past a threshold,
    while incorporating a penalty for leaving too much empty space and an early exit condition.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    filling_threshold = 0.75
    remaining_after_fit = bins_remain_cap - item
    item_fits = bins_remain_cap >= item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Early exit: If there's a bin that fits the item perfectly, prioritize it highly
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 10.0  # High priority for perfect fit
        return priorities

    # Threshold bonus for bins exceeding fill threshold after item placement
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus

    # Close-fit priority with increased sensitivity
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-10 * close_fit)  # Sharper decay for close fits
    priorities += close_fit_priority * item_fits

    # Moderate penalty for leaving too much space
    space_left_penalty = np.where(remaining_after_fit > 0.5 * bin_capacity, -0.5, 0.0) * item_fits
    priorities += space_left_penalty

    # A slight incentive to use any bin that can fit the item
    priorities += 0.1 * item_fits

    # Zero out priorities for bins that cannot fit the item
    priorities[bins_remain_cap < item] = 0.0

    return priorities
```
