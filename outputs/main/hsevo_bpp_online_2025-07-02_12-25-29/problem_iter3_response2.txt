```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Closeness of fit: Bins where the item fits nearly perfectly get a high priority.
    2. Resulting fragmentation: Bins that would leave minimal wasted space after adding the item are favored.
    3. Avoidance of near-empty bins: Penalizes bins that, after adding the item, are still far from full.
    4. Considers a minimum threshold for bin utilization to avoid extreme fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Closeness of fit: Exponential decay around the perfect fit.
    close_fit = np.abs(bins_remain_cap - item)
    priorities = np.exp(-2 * close_fit)  # Increased sensitivity to close fit

    # Penalize bins where the item doesn't fit (assign zero priority)
    priorities[bins_remain_cap < item] = 0

    # 2. Reward bins that become nearly full after adding the item.
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-2 * np.abs(remaining_after_fit)) # Increased sensitivity

    priorities += nearly_full

    # 3. Penalize bins that remain far from full. Encourage utilization.
    # Avoid adding items to bins that will still be mostly empty
    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same capacity
    utilization = (bin_size - remaining_after_fit) / bin_size
    empty_penalty = np.exp(-5 * (1 - utilization)) # Stronger penalty for low utilization
    priorities *= empty_penalty # Reduced impact if poorly utilized


    # 4. Minimum utilization threshold to reduce extreme fragmentation
    min_utilization_threshold = 0.2  # e.g., require at least 20% utilization.
    mask = utilization < min_utilization_threshold
    priorities[mask] = 0  # Zero out priorities for bins below utilization threshold

    return priorities
```
