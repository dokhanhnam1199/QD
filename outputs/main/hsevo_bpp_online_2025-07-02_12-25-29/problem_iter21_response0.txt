```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version combines closeness-of-fit and fullness after packing, with normalization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0

    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item

    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item

    # Closeness-of-fit priority (normalized)
    close_fit = np.abs(remaining_after_fit)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits
    
    # Fullness after packing priority (normalized)
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    fullness_priority = fill_level * item_fits

    # Combine and normalize the priorities
    combined_priority = close_fit_priority + fullness_priority
    
    # Normalize priorities to a 0-1 range to avoid domination by either factor.
    max_priority = np.max(combined_priority)
    if max_priority > 0:
        normalized_priority = combined_priority / max_priority
    else:
        normalized_priority = combined_priority # All zeros, no normalization needed
    
    priorities = normalized_priority

    # Penalize bins where the item doesn't fit by assigning zero priority
    priorities[bins_remain_cap < item] = 0.0
    
    return priorities
```
