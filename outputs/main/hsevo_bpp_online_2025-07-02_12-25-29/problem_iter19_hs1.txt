import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, perfect_fit_priority: float = 6.898889624063759,
                close_fit_decay: float = 6.72718620543335, filling_threshold: float = 0.5370568740669939,
                threshold_bonus_value: float = 0.3113388098192353, min_fragment: float = 0.027470181510691243,
                reasonable_fit_weight: float = 0.7009675210667551, large_space_threshold: float = 0.6051564579290349,
                large_space_penalty: float = -0.5125153406371424, impossible_priority: float = -4361071245.22406,
                bin_capacity: float = 1.1314215963432501) -> np.ndarray:
    """Prioritizes bins based on close fit and filling, avoids fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # Perfect fit early exit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = perfect_fit_priority
        return priorities

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-close_fit_decay * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), threshold_bonus_value, 0.0)
    priorities += threshold_bonus

    # Avoid tiny fragments
    reasonable_fit = item_fits & (remaining_after_fit > min_fragment)
    priorities += reasonable_fit_weight * reasonable_fit
    
    #Penalty for large remaining space
    space_left_penalty = np.where(remaining_after_fit > large_space_threshold * bin_capacity, large_space_penalty, 0.0) * item_fits
    priorities += space_left_penalty

    priorities[bins_remain_cap < item] = impossible_priority

    # Desperation strategy
    if not np.any(item_fits):
        priorities[:] = impossible_priority
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    return priorities
