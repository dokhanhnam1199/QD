```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version emphasizes a balance between fill level, avoiding fragmentation, and bin utilization.
    It prioritizes bins where the item fits best, aiming for high fill levels without excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0

    # 1. Feasibility: Only consider bins where the item fits
    item_fits = bins_remain_cap >= item
    priorities[~item_fits] = -np.inf  # Disqualify bins where the item doesn't fit

    # 2. Fill Level: Reward bins with higher fill levels *after* adding the item
    remaining_after_fit = bins_remain_cap - item
    fill_level_after = (bin_capacity - remaining_after_fit) / bin_capacity
    priorities += fill_level_after * item_fits  # Directly reward fill level, only if item fits

    # 3. Fragmentation Penalty: Penalize bins that will have small remaining space
    #    after adding the item.  A small remaining space means more fragmentation
    fragmentation = np.abs(remaining_after_fit)
    fragmentation_penalty = np.exp(-5 * fragmentation) * item_fits
    priorities -= 0.3 * fragmentation_penalty # Subtract from priority

    # 4. Bin Utilization Reward: Give a smaller bonus to bins that have been used before. This aims to consolidate items into fewer bins,
    # potentially freeing up other bins for larger items later.  Bins that have been untouched have initial capacity of 1.0.
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.1 * bin_utilization * item_fits

    # 5. Emphasize nearly full bins after placement
    nearly_full_bonus = np.exp(-10 * np.abs(remaining_after_fit)) * item_fits
    priorities += 0.2 * nearly_full_bonus

    return priorities
```
