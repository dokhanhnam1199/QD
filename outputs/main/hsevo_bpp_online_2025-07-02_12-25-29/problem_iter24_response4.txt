```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a simple best-fit approach with
    added considerations for fill level and bin usage.  It avoids complex
    multiplicative combinations and focuses on clear, interpretable rules.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0

    # 1. Item Fits: Filter out bins where the item doesn't fit immediately.
    item_fits = bins_remain_cap >= item
    
    #If item doesn't fit in any bins, return zero priorities to avoid errors
    if not np.any(item_fits):
        return priorities
    
    # 2. Best Fit: Prioritize bins with the smallest remaining space after placing the item.
    remaining_after_fit = bins_remain_cap - item
    best_fit_priority = -remaining_after_fit  # Smaller remaining = higher priority
    best_fit_priority[remaining_after_fit < 0] = -np.inf  # Remove non-fitting bins explicitly

    # 3. Fill Level Incentive:  Give a bonus for filling the bin reasonably well.
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    fill_threshold = 0.7
    fill_bonus = np.where((fill_level >= fill_threshold) & item_fits, 0.5, 0.0)

    # 4. Use Bins: Provide a small constant bonus for any bin the item fits into.
    bin_usage_bonus = np.where(item_fits, 0.1, 0.0)
    
    # Combine Priorities
    priorities = best_fit_priority + fill_bonus + bin_usage_bonus
    
    # Set priority to 0 where item doesn't fit, just to be explicit.
    priorities[bins_remain_cap < item] = 0
    
    return priorities
```
