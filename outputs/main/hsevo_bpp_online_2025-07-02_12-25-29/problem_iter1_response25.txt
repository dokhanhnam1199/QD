```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My new function is inspired by the dance of planets - where there is harmony in placing new object.
    I've incorporated the golden ratio & penalize almost-full bins, preventing over-concentration!
    In this version, the 'fullness' of a bin (i.e., how much space would be left if the item were placed)
    plays a significant role. Bins that would be left with a very small amount of space are penalized,
    simulating a 'resistance' to being filled almost completely. Bins with enough remaining space are given more
    priority to promote balanced utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    phi = 1.618  # Golden ratio, for optimal balancing
    epsilon = 1e-6  # To prevent division by zero & log of zero issues

    remaining_after_placement = bins_remain_cap - item
    priorities = np.zeros_like(bins_remain_cap)

    # Penalize bins where placement results in very little space remaining
    # High penalty where remaining is small (less than item size)
    penalty = np.where(remaining_after_placement > 0,
                       np.exp(-phi * remaining_after_placement / (item + epsilon)), # Exp Decay for remaining >0
                       -np.inf) # Bin is either full, overfilled, or small capacity
    # Reward Bins where Items can be packed i.e cap is sufficient:
    sufficient_cap = np.where(bins_remain_cap > item,
                       np.power(bins_remain_cap, 0.333), 0)

    priorities = sufficient_cap + penalty
    return priorities
```
