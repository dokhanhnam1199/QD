```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins, combining close fit, target fill, and fragmentation avoidance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item
    bin_capacity = 1.0
    filling_threshold = 0.75

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus
    
    # Avoid tiny fragments
    reasonable_fit = item_fits & (remaining_after_fit > 0.05)
    priorities += 0.8 * reasonable_fit

    priorities[bins_remain_cap < item] = -1e9

    # Desperation
    if not np.any(item_fits):
        priorities[:] = -1e9
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    return priorities
```
