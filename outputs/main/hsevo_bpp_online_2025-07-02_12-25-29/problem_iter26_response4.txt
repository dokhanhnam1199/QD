```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: close fit, target fill, and bin pressure."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    bin_capacity = 1.0

    # 1. Close Fit Priority: Exponentially favor bins close to item size.
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits
    priorities += close_fit_priority

    # 2. Target Fill Bonus: Reward bins approaching a target fill level.
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    target_fill = 0.75
    target_bonus = np.exp(-10.0 * np.abs(fill_level - target_fill)) * item_fits
    priorities += 0.5*target_bonus

    # 3. Bin Selection Pressure: Encourage filling existing bins.
    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    bin_pressure_bonus = np.clip(current_fill_level, 0, 0.9) * item_fits * 0.3
    priorities += bin_pressure_bonus


    # 4.  Slight bonus for non-empty bins
    non_empty_bonus = np.where(bins_remain_cap < bin_capacity, 0.1, 0.0) * item_fits
    priorities += non_empty_bonus


    # No fit handling : Put item into the bin with largest remain capcity.
    if not np.any(item_fits):
        priorities[:] = -1e9
        if len(priorities) > 0:
            priorities[np.argmax(bins_remain_cap)] = 0

    return priorities
```
