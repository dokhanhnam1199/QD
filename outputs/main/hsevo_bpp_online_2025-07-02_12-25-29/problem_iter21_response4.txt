```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of remaining capacity after placement,
    the filling threshold, and normalization to balance these factors. It uses a more direct
    and understandable approach than v1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    
    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item
    
    if not np.any(item_fits):
        return priorities # no bin can contain the item

    # Remaining capacity after adding the item.  Use clipping to avoid negative values
    remaining_after_fit = np.clip(bins_remain_cap - item, 0, bin_capacity)  # Ensure no negative values

    # Fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Prioritize bins based on closeness of fit (lower remaining capacity is better)
    # Use inverse of remaining capacity + a small constant for stability.  Normalize.
    fit_priority = 1.0 / (remaining_after_fit + 0.01)  # Avoid division by zero
    fit_priority[~item_fits] = 0  # Only consider bins where the item fits
    fit_priority /= np.sum(fit_priority) + 1e-9 # Normalize to avoid single bin dominance

    # Prioritize bins that reach a filling threshold (e.g., 80%)
    filling_threshold = 0.8
    threshold_priority = np.where(fill_level >= filling_threshold, 1.0, 0.0)
    threshold_priority[~item_fits] = 0
    threshold_priority /= np.sum(threshold_priority) + 1e-9 # Normalize

    # Combine fit and threshold priorities. Give slightly more weight to fit.
    priorities = 0.6 * fit_priority + 0.4 * threshold_priority

    # Small bonus to use bins that can at least fit an item, avoiding empty bins
    larger_bins_bonus = 0.05 * item_fits / (np.sum(item_fits)+ 1e-9)
    priorities += larger_bins_bonus

    return priorities
```
