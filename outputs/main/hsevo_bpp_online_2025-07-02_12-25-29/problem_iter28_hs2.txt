import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                bin_capacity: float = 1.4325996893783204,
                target_utilization: float = 0.5425741749735441,
                perfect_fit_priority: float = 5.4824788786919605,
                initial_fit_priority: float = 1.1074504958416602,
                utilization_decay: float = 2.634060391221519,
                wasted_space_decay: float = 5.42480213376952,
                larger_bins_bonus: float = 0.1463979161841633) -> np.ndarray:
    """Prioritizes bins based on wasted space and target fill."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # High priority for perfect fit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = perfect_fit_priority
        return priorities

    # Prioritize bins where the item fits initially
    priorities[item_fits] += initial_fit_priority

    # Target utilization bonus with exponential decay
    utilization = (bin_capacity - remaining_after_fit) / bin_capacity
    utilization_diff = np.abs(utilization - target_utilization)
    utilization_bonus = np.exp(-utilization_decay * utilization_diff) * item_fits
    priorities += utilization_bonus

    # Minimize wasted space by penalizing larger gaps, exponentially
    wasted_space = np.abs(remaining_after_fit) * item_fits
    wasted_space_penalty = np.exp(-wasted_space_decay * wasted_space) * item_fits
    priorities += wasted_space_penalty

    # Add a small bonus for bins which are larger than the item
    larger_bins = (bins_remain_cap >= item)
    priorities += larger_bins_bonus * larger_bins

    return priorities
