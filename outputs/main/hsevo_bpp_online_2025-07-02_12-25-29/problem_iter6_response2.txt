```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and a bin-selection pressure.
    It prioritizes bins where the item almost fits perfectly and bins that would be filled close to full if the item were added.
    A bin-selection pressure is added to encourage using bins that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins where the item almost fits perfectly
    close_fit = np.abs(bins_remain_cap - item)
    priorities = np.exp(-close_fit)  # Exponential decay around perfect fit

    # Penalize bins where the item doesn't fit (assign zero priority)
    priorities[bins_remain_cap < item] = 0

    # Also reward bins that become nearly full after adding the item
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-np.abs(remaining_after_fit))
    priorities += nearly_full

    # Add a bin-selection pressure: encourage using bins that are already somewhat full.
    # This helps to consolidate items and potentially reduce the overall number of bins used.
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) #Normalize remaining capacity

    priorities += 0.5 * bin_utilization #Scale utilization so it doesn't dominate

    return priorities
```
