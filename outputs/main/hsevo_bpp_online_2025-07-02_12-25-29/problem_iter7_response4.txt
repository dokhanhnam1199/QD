import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                filling_threshold: float = 0.14782311169523432,
                bin_capacity: float = 1.0629656588874241,
                close_fit_decay: float = 2.8475120871896142,
                nearly_full_decay: float = 5.540676542743097,
                nearly_full_weight: float = 0.765566963492371,
                larger_bins_bonus: float = 0.15179315910879554,
                threshold_bonus_weight: float = 0.793789645841072) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and a filling threshold.
    It prioritizes bins where the item fits, leading to a fill level above a certain threshold,
    while also considering bins that offer a close fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        filling_threshold: The filling threshold (e.g., 75% full) after adding the item.
        bin_capacity: The capacity of the bin.
        close_fit_decay: Exponential decay factor for close fit priority.
        nearly_full_decay: Exponential decay factor for nearly full reward.
        nearly_full_weight: Weight of the nearly full reward.
        larger_bins_bonus: Small bonus for bins larger than the item.
        threshold_bonus_weight: Weight of the threshold bonus.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item
    
    # Calculate fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    
    # Give a bonus to bins that meet the filling threshold after item placement
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), threshold_bonus_weight, 0.0)
    priorities += threshold_bonus

    # Give high priority to bins where the item almost fits perfectly
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-close_fit_decay * close_fit)  # Exponential decay around perfect fit
    priorities += close_fit_priority * item_fits  # Only consider if the item fits

    # Penalize bins where the item doesn't fit (assign zero priority)
    priorities[bins_remain_cap < item] = 0

    # Reward bins that become nearly full after adding the item, but less aggressively
    nearly_full = np.exp(-nearly_full_decay * np.abs(remaining_after_fit)) * item_fits
    priorities += nearly_full_weight * nearly_full
    
    # Add a small bonus for bins which are larger than the item, to prioritize packing
    # something rather than nothing.
    larger_bins = (bins_remain_cap >= item)
    priorities += larger_bins_bonus * larger_bins


    return priorities
