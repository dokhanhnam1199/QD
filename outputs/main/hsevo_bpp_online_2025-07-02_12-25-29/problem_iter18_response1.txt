```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. Whether the item fits.
    2. How full the bin would be after adding the item (target utilization).
    3. Remaining capacity, penalizing bins with extremely low remaining capacity after placing the item.
    4. A bonus for bins that are close to being filled to a specified target.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    target_utilization = 0.9  # Aim for 90% full
    min_remaining_cap = 0.05  # Avoid bins with less than 5% capacity remaining

    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # Prioritize bins where the item fits
    priorities[item_fits] += 1.0

    # Target utilization bonus: reward bins that get close to the target
    utilization = (bin_capacity - remaining_after_fit) / bin_capacity
    utilization_diff = np.abs(utilization - target_utilization)
    utilization_bonus = np.exp(-5 * utilization_diff) * item_fits  # Exponential decay
    priorities += utilization_bonus

    # Penalize small remaining capacity
    low_capacity_penalty = np.where(remaining_after_fit < min_remaining_cap, -1.0, 0.0)
    priorities += low_capacity_penalty

    # Encourage filling, but not too aggressively.
    filling_incentive = (1 - remaining_after_fit) * item_fits * 0.2
    priorities += filling_incentive
    
    # If no bin can fit item, return a array of -infinity, to ensure a new bin is used.
    if not np.any(item_fits):
        priorities = np.full_like(priorities, -np.inf) #Ensures that a new bin is opened

    return priorities
```
