```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    - Whether the item fits.
    - How much space is left after adding the item (lower is better, but not zero).
    - A filling ratio target to encourage bins to reach a target fill level.
    - Avoidance of bins that would become too empty after the addition of item
      (promotes consolidation over fragmentation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0
    target_fill_ratio = 0.9
    min_rem_cap = 0.1

    # 1. Item fits constraint:  Bins where the item doesn't fit get zero priority
    item_fits = bins_remain_cap >= item
    priorities[~item_fits] = 0
    
    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item

    # 2. Prioritize bins which will have remaining capacity above min_rem_cap, otherwise de-prioritize them.
    valid_rem_cap = remaining_after_fit > min_rem_cap
    priorities[~valid_rem_cap & item_fits] *= 0.5 # Reduce the priorities.
    
    # 3. Remaining capacity after fit: smaller is better, but avoid zero
    # Use an exponential function to heavily prioritize bins with small remaining capacity
    remaining_priority = np.exp(-5 * remaining_after_fit) * item_fits
    priorities += remaining_priority

    # 4. Target fill ratio:  Reward bins approaching the target fill ratio
    current_fill_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    fill_ratio_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity

    #Calculate difference between fill ratio and target fill ratio
    fill_diff = np.abs(fill_ratio_after_fit - target_fill_ratio)
    target_priority = np.exp(-5 * fill_diff) * item_fits
    priorities += target_priority
    
    return priorities
```
