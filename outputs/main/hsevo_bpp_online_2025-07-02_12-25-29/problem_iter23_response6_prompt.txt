{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on close fit and target utilization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0\n    target_utilization = 0.9\n    min_remaining_cap = 0.05\n\n    item_fits = bins_remain_cap >= item\n    remaining_after_fit = bins_remain_cap - item\n\n    # Perfect fit early exit\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit):\n        priorities[perfect_fit] = 2.0  # High priority for perfect fit\n        return priorities\n\n    # Prioritize bins where the item fits\n    priorities[item_fits] += 1.0\n\n    # Target utilization bonus\n    utilization = (bin_capacity - remaining_after_fit) / bin_capacity\n    utilization_diff = np.abs(utilization - target_utilization)\n    utilization_bonus = np.exp(-5 * utilization_diff) * item_fits\n    priorities += utilization_bonus\n\n    # Penalize small remaining capacity\n    low_capacity_penalty = np.where(remaining_after_fit < min_remaining_cap, -1.0, 0.0)\n    priorities += low_capacity_penalty\n\n    filling_incentive = (1 - remaining_after_fit) * item_fits * 0.2\n    priorities += filling_incentive\n\n    # If no bin can fit item, return a array of -infinity\n    if not np.any(item_fits):\n        priorities = np.full_like(priorities, -np.inf)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                perfect_fit_priority: float = 7.465168841650064,\n                close_fit_decay: float = 6.792870535909392,\n                target_fill: float = 0.5792050207302496,\n                target_decay: float = 9.97324957051447,\n                target_bonus_weight: float = 0.21483526019194793,\n                large_space_threshold: float = 0.7261569880180845,\n                large_space_penalty: float = -0.5653813421940123,\n                no_fit_penalty: float = -8824463787.539772,\n                bin_capacity: float = 1.0680776423324565) -> np.ndarray:\n    \"\"\"Prioritizes bins based on close fit and filling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    item_fits = bins_remain_cap >= item\n    \n    # Perfect fit early exit\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit):\n        priorities[perfect_fit] = perfect_fit_priority\n        return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st heuristic uses a simpler, more direct approach with clear priorities, while the 20th introduces many hyperparameters and external libraries (scipy, torch) without a clear justification, making it less understandable and potentially over-engineered. (2nd) vs (19th): Similar to above, the 2nd heuristic is simpler and more readable than the 19th.\n\nComparing (1st) vs (2nd), we see the 1st heuristic focuses on fragmentation by filling above a threshold and close fit, while 2nd adds a desperation strategy of placing items in the smallest bin if it doesn't fit, and a penalty for large remaining space. (3rd) vs (4th) - no difference. Comparing (second worst) vs (worst), we see they are identical, indicating a lack of unique strategies in the worst-performing heuristics.\n\nComparing (7th) vs (8th), (9th) vs (10th): Normalization is present in some top heuristics but absent in the later heuristics. The top heuristics make use of normalization to ensure combined factors contribute evenly.\n\nOverall: The best heuristics prioritize simplicity, clarity, and normalization of factors considered. They address fragmentation and target fill levels effectively. The worst heuristics suffer from over-parameterization, unnecessary complexity, and lack of a clear strategy. Early exits for the perfect fit are beneficial. Normalization helps in balancing the effects of different parameters. Edge case handling (no bin fits) is important.\n- \nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, focusing on actionable insights and avoiding common pitfalls.\n\n**Keywords:** Clarity, Directness, Iterative Refinement, Objective-Driven.\n\n**Advice:** Design heuristics with easily understandable rules directly linked to improving the objective function (e.g., minimizing wasted space). Start with a simple baseline heuristic and iteratively add complexity based on performance evaluation.\n\n**Avoid:** Over-parameterization, multiplicative combinations of factors without strong justification, premature optimization, and complex calculations that obscure the heuristic's core logic.\n\n**Explanation:** Focus on interpretable rules that directly contribute to the objective. Build incrementally, measuring the impact of each addition. Prioritize understanding over complex parameter tuning. Handle edge cases and invalid scenarios explicitly but simply.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}