```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Consider only bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if not np.any(valid_bins):
        # If no bin can fit, prioritize the fullest one to minimise waste when a new bin is eventually used.
        priorities = bins_remain_cap  #Prioritise higher remaining capacity for the item, acting like First Fit Decreasing.
        return priorities
    else:
        # Heuristic 2: First fit considering fill ratio, otherwise 0 priority

        fill_ratios = item / bins_remain_cap
        fill_ratios[~valid_bins] = -1  # Set to negative if it doesn't fit to exclude

        # Heuristic 3: Prioritize bins with fill ratios close to optimal, but above a threshold.
        optimal_fill_ratio = 0.9  # Aim for a 90% filled bin
        priority_boost = np.exp(-np.abs(fill_ratios - optimal_fill_ratio) * 10) # Penalise strongly deviation from the optima

        priorities[valid_bins] = priority_boost[valid_bins] # Only valid bins get a priority

    return priorities
```
