```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on target fill and close fit, with fragmentation penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bin capacity is 1

    item_fits = bins_remain_cap >= item

    if not np.any(item_fits): # Handle edge case: item doesn't fit in any bin
        priorities[:] = -1e9 # Very low priority
        priorities[np.argmin(bins_remain_cap)] = 0  # Put in the least full bin if it doesn't fit
        return priorities

    remaining_after_fit = bins_remain_cap - item
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity

    target_fill = 0.8
    fill_level_priority = np.exp(-5 * np.abs(fill_level_after_fit - target_fill)) * item_fits #Target fill.

    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits  # Close fit

    fragmentation_threshold = 0.15
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit < fragmentation_threshold), -0.3, 0.0)

    priorities = fill_level_priority + close_fit_priority + fragmentation_penalty #Sum up the priorities
    return priorities
```
