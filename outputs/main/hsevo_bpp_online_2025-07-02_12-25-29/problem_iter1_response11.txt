```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Einstein's Intuition:
    # Maximize space utilization while preventing near-empty bins.
    # Employ a non-linear combination of factors to balance exploration and exploitation.

    # 1. Feasibility: Disqualify bins that are too small.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~feasible_bins] = -np.inf  # Assign lowest priority if not feasible

    # 2. Space Utilization Factor:
    # How much of the bin's capacity will be used.
    utilization = item / bins_remain_cap[feasible_bins]

    # 3. Remaining Capacity Factor:
    # We prefer bins where there will still be some capacity left.
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item
    normalized_remaining = remaining_capacity_after_fit / np.max(bins_remain_cap)  # Normalize to [0,1]


    # 4. Einsteinian Blend: A non-linear combination.
    # Emphasis on near full, without penalizing more filled bins too much
    # Balance utilization (avoiding waste) with leaving some room for future items.
    # The square root adds a damping effect. Small changes when bin near full

    # Avoiding small values for remaining cap which could have caused instability:
    priorities[feasible_bins] = np.sqrt(utilization) * (1 + normalized_remaining)

    return priorities
```
