```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on close fit, fullness, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    # Close fit priority (sharper decay)
    close_fit = np.abs(bins_remain_cap - item)
    priorities = np.exp(-2 * close_fit)
    priorities[~possible_bins] = 0  # Infeasible bins get zero priority

    # Fullness reward (sharper decay)
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-2 * np.abs(remaining_after_fit))
    priorities += nearly_full

    # Already Occupied preference (reduced coefficient)
    already_occupied = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities += 0.5 * already_occupied

    # Fragmentation penalty (fragments smaller than 0.1)
    small_fragment_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    small_fragment_indices = np.where((bins_remain_cap >= item) & (remaining_after_fit > 0) & (remaining_after_fit < 0.1))
    small_fragment_penalty[small_fragment_indices] = -1
    priorities += small_fragment_penalty

    return priorities
```
