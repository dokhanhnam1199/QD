```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1.  Whether the item fits.
    2.  The remaining capacity after adding the item (favoring tighter fits).
    3.  A filling threshold to encourage bins to be filled above a certain level.
    4.  Penalizing bins that are already too full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed
    filling_threshold = 0.75

    # 1. Check if the item fits
    item_fits = bins_remain_cap >= item

    if not np.any(item_fits):
        return priorities  # No bin can accommodate item, return zero priorities

    # 2. Remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item

    # 3. Calculate fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # 4. Give a bonus to bins that meet the filling threshold
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 0.8, 0.0)  # Reduced bonus
    priorities += threshold_bonus

    # 5. Prioritize tighter fits (smaller remaining capacity)
    # But only if the item fits.  Also avoid taking log of zero.
    fit_priority = np.where(item_fits & (remaining_after_fit > 0), np.exp(-5 * remaining_after_fit), 0.0)

    priorities += fit_priority


    # 6. Penalize bins where the item doesn't fit at all.
    priorities[bins_remain_cap < item] = 0

    # 7. Add a small incentive to using non-empty bins if possible.  This
    #    addresses an edge case where if all bins are empty, the algorithm
    #    doesn't prefer one over the other.
    larger_bins = (bins_remain_cap >= item)
    priorities += 0.05 * larger_bins  # Even smaller bonus

    return priorities
```
