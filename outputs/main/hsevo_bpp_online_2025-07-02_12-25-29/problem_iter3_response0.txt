```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version refines the priority calculation by explicitly considering
    the wasted space ratio and introducing a saturation mechanism to prevent
    over-emphasis on nearly-full bins. It also adds a small bonus for bins
    that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Perfect Fit:  Prioritize bins where the item fits almost perfectly.
    close_fit = np.abs(bins_remain_cap - item)
    priorities = np.exp(-close_fit * 5)  # Sharper exponential decay

    # 2. Constraint Handling: Zero priority if the item doesn't fit.
    priorities[bins_remain_cap < item] = 0

    # 3. Near-Full Reward (with Saturation): Reward bins that become nearly full,
    #    but with diminishing returns as they get closer to completely full.
    remaining_after_fit = bins_remain_cap - item
    utilization = (bins_remain_cap - remaining_after_fit) / bins_remain_cap
    nearly_full = np.exp(-np.abs(remaining_after_fit) * 2) * (1 - utilization)**0.5 # Soft saturation

    priorities += nearly_full

    # 4. Wasted Space Penalty:  Penalize bins based on the proportion of space wasted.
    wasted_space_ratio = np.abs(remaining_after_fit) / bins_remain_cap
    priorities -= wasted_space_ratio * 0.5 # Moderate penalty

    # 5. Initial fullness Bonus
    initial_fullness = (1 - bins_remain_cap)
    priorities += initial_fullness *0.1

    return priorities
```
