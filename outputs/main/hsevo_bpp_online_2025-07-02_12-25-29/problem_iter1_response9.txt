```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins that can accommodate the item snugly
    # (i.e., the remaining capacity is close to the item size).

    # Also, avoid bins that are too full (remaining capacity close to 0).
    # Consider available bins and only compute the ratio for those
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        capacity_differences = bins_remain_cap[available_bins] - item
        # Use squared differences to emphasize smaller gaps
        priorities[available_bins] = np.exp(-10 * (capacity_differences / bins_remain_cap[available_bins])**2)
        # Penalize almost full bins by adding a small penalty
        almost_full = (bins_remain_cap[available_bins] < 1.2 * item) & (bins_remain_cap[available_bins] > item)
        priorities[available_bins][almost_full] *= 0.9
    else:
        #if no bins are available return all zeros
        return priorities

    return priorities
```
