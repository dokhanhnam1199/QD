```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill target, close fit, avoids fragmentation, normalizes."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    filling_threshold = 0.75

    item_fits = bins_remain_cap >= item
    if not np.any(item_fits):
        return priorities

    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Target fill bonus
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 0.8, 0.0)
    priorities += threshold_bonus

    # Close fit priority
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits
    priorities += close_fit_priority

    # Penalize bins where the item doesn't fit
    priorities[bins_remain_cap < item] = 0

    # Normalize priorities.  Important for balancing factors.
    if np.any(priorities > 0):
        priorities /= np.max(priorities)

    return priorities
```
