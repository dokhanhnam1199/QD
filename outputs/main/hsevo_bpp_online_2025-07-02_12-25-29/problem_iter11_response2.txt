```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and filling target."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item

    if not np.any(item_fits):
        return priorities

    feasible_bins = bins_remain_cap[item_fits]
    feasible_indices = np.where(item_fits)[0]
    remaining_after_fit = feasible_bins - item

    # Close fit bonus
    priorities[feasible_indices] += np.exp(-2 * np.abs(remaining_after_fit))

    # Filling target bonus (0.75 of bin capacity)
    filling_threshold = 0.75
    fill_level = 1 - remaining_after_fit
    threshold_bonus = np.where(fill_level >= filling_threshold, 0.5, 0.0)
    priorities[feasible_indices] += threshold_bonus

    # Fragmentation penalty
    frag_penalty = np.where(remaining_after_fit < 0.1, -0.2, 0.0)
    priorities[feasible_indices] += frag_penalty
    priorities = np.maximum(priorities, 0) # Ensure non-negative

    return priorities
```
