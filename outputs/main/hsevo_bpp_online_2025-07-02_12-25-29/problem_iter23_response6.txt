```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on close fit, target utilization, and penalizes large remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    target_utilization = 0.9
    min_remaining_cap = 0.05

    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # Perfect fit early exit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 10.0  # High priority for perfect fit
        return priorities

    # Prioritize bins where the item fits
    priorities[item_fits] += 1.0

    # Target utilization bonus
    utilization = (bin_capacity - remaining_after_fit) / bin_capacity
    utilization_diff = np.abs(utilization - target_utilization)
    utilization_bonus = np.exp(-5 * utilization_diff) * item_fits
    priorities += utilization_bonus

    # Penalize small remaining capacity
    low_capacity_penalty = np.where(remaining_after_fit < min_remaining_cap, -2.0, 0.0)
    priorities += low_capacity_penalty

    # Filling incentive, normalized by item size to avoid bias towards small items
    filling_incentive = (1 - remaining_after_fit) * item_fits * 0.2 * item
    priorities += filling_incentive

    # If no bin can fit item, return a array of -infinity
    if not np.any(item_fits):
        priorities = np.full_like(priorities, -np.inf)

    return priorities
```
