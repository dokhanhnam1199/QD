```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best fit, filling threshold, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    item_fits = bins_remain_cap >= item

    if not np.any(item_fits):
        return priorities

    remaining_after_fit = bins_remain_cap - item
    best_fit_priority = np.exp(-5 * np.abs(remaining_after_fit)) * item_fits
    priorities += best_fit_priority

    filling_threshold = 0.75
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level_after_fit >= filling_threshold), 0.5, 0.0)
    priorities += threshold_bonus

    fragmentation_threshold = 0.1
    fragmentation_penalty = np.where(item_fits & (remaining_after_fit > 0) & (remaining_after_fit < fragmentation_threshold), -0.25, 0.0)
    priorities += fragmentation_penalty

    priorities[bins_remain_cap < item] = 0.0

    return priorities
```
