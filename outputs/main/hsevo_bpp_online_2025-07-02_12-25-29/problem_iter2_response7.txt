```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space and fullness, combining ideas."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exclude bins that cannot fit the item, or make wasted space computation
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    wasted_space = bins_remain_cap - item
    wasted_space[infeasible_mask] = np.inf

    # Reward bins with small wasted space (close fit)
    close_fit_reward = np.exp(-wasted_space)

    # Penalize bins that become nearly full after adding the item
    nearly_full_penalty = np.exp(-1 / (wasted_space + 1e-9))

    # Combine reward and penalty
    priorities = close_fit_reward * nearly_full_penalty

    return priorities
```
