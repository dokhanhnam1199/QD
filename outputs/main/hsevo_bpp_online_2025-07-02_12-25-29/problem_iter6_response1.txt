```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and a filling threshold.
    It prioritizes bins where the item fits, leading to a fill level above a certain threshold,
    while also considering bins that offer a close fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Define a filling threshold (e.g., 75% full) after adding the item
    filling_threshold = 0.75
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, modify as needed

    # Calculate remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Identify bins where the item fits
    item_fits = bins_remain_cap >= item
    
    # Calculate fill level after adding the item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    
    # Give a bonus to bins that meet the filling threshold after item placement
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus

    # Give high priority to bins where the item almost fits perfectly
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit)  # Exponential decay around perfect fit
    priorities += close_fit_priority * item_fits  # Only consider if the item fits

    # Penalize bins where the item doesn't fit (assign zero priority)
    priorities[bins_remain_cap < item] = 0

    # Reward bins that become nearly full after adding the item, but less aggressively
    nearly_full = np.exp(-10 * np.abs(remaining_after_fit)) * item_fits
    priorities += 0.5 * nearly_full
    
    # Add a small bonus for bins which are larger than the item, to prioritize packing
    # something rather than nothing.
    larger_bins = (bins_remain_cap >= item)
    priorities += 0.1 * larger_bins


    return priorities
```
