```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill target and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    bin_capacity = 1.0

    if not np.any(item_fits):
        return priorities

    # Target Fill Level
    target_fill = 0.9
    remaining_after_fit = bins_remain_cap - item
    fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
    deviation_from_target = np.abs(fill_level_after_fit - target_fill)
    priorities += np.exp(-5 * deviation_from_target) * item_fits

    # Fragmentation Penalty
    fragmentation_penalty = np.exp(-2 * remaining_after_fit) * item_fits
    priorities += fragmentation_penalty

    # Fullest bin tie-breaker
    current_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.1 * current_fill_level * item_fits

    # Perfect fit early exit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] = 1.0
        return priorities
    
    priorities[bins_remain_cap < item] = 0.0
    return priorities
```
