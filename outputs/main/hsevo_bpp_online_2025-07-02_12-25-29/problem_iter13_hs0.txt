import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.4461045260475642, filling_threshold: float = 0.6310140286995914, close_fit_decay: float = 9.738349081961763, fragment_threshold: float = 0.16493822274224826, reasonable_fit_weight: float = 0.9881414813574442, penalty: float = -6313646821.280941) -> np.ndarray:
    """Prioritizes bins, combining close fit, target fill, and fragmentation avoidance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item

    # Close fit bonus
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-close_fit_decay * close_fit)
    priorities += close_fit_priority * item_fits

    # Target fill bonus
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity
    threshold_bonus = np.where(item_fits & (fill_level >= filling_threshold), 1.0, 0.0)
    priorities += threshold_bonus
    
    # Avoid tiny fragments
    reasonable_fit = item_fits & (remaining_after_fit > fragment_threshold)
    priorities += reasonable_fit_weight * reasonable_fit

    priorities[bins_remain_cap < item] = penalty

    # Desperation
    if not np.any(item_fits):
        priorities[:] = penalty
        if len(priorities) > 0:
            priorities[np.argmin(bins_remain_cap)] = 0

    return priorities
