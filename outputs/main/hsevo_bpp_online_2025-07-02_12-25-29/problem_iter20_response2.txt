```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on target fill, close fit, and avoids fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0
    target_fill_level = 0.9

    item_fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_after_fit) / bin_capacity

    # Target Fill Priority
    fill_level_diff = np.abs(fill_level - target_fill_level)
    fill_priority = np.exp(-5 * fill_level_diff) * item_fits
    priorities += fill_priority

    # Close Fit Priority
    close_fit = np.abs(bins_remain_cap - item)
    close_fit_priority = np.exp(-5 * close_fit) * item_fits
    priorities += close_fit_priority

    priorities[bins_remain_cap < item] = 0  # Infeasible bins

    # Fragmentation Penalty
    priorities -= 0.1 * bins_remain_cap * item_fits

    return priorities
```
