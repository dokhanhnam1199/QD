```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins that can accommodate the item
    # with minimal remaining capacity. This aims to fill bins efficiently.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        remaining_after_fit = bins_remain_cap[available_bins] - item
        priorities[available_bins] = 1.0 / (remaining_after_fit + 0.0001)  # Add small value to avoid division by zero
        # Additionally, penalize bins that are too large to avoid wasting space drastically.
        large_bins = remaining_after_fit > (2 * item) # Threshold dynamically adapts. Maybe this value could depend on bins_remain_cap.mean()?
        priorities[available_bins][large_bins] *= 0.1 # Further reduce priorities if it's a very large bin
    else:
      #If the item is larger than all available bins, add it to the one with the greatest capacity so we at least reduce the item count.
      priorities = bins_remain_cap/np.sum(bins_remain_cap)

    return priorities
```
