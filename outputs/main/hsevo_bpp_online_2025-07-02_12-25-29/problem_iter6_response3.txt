```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers space utilization, fragmentation, and a slight preference
    for bins that are already somewhat full. It also adds a penalty for creating
    very small fragments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Close Fit: Prioritize bins where the item almost fits perfectly.
    close_fit = np.abs(bins_remain_cap - item)
    priorities += np.exp(-2 * close_fit)  # Sharper exponential decay

    # 2. Infeasibility: Penalize bins where the item doesn't fit (assign zero priority).
    priorities[bins_remain_cap < item] = 0

    # 3. Nearly Full: Reward bins that become nearly full after adding the item.
    remaining_after_fit = bins_remain_cap - item
    nearly_full = np.exp(-2 * np.abs(remaining_after_fit)) # Sharper decay
    priorities += nearly_full

    # 4. Already Occupied: Slight preference for bins that are already somewhat full.
    #    This encourages filling existing bins before opening new ones.
    already_occupied = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalized remaining capacity
    priorities += 0.5 * already_occupied # Reduced coefficient

    # 5. Fragmentation Penalty: Penalize bins where the item would leave a very small fragment.
    small_fragment_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    small_fragment_indices = np.where((bins_remain_cap >= item) & (remaining_after_fit > 0) & (remaining_after_fit < 0.1)) # Fragments smaller than 0.1
    small_fragment_penalty[small_fragment_indices] = -1 # Penalty 
    priorities += small_fragment_penalty


    return priorities
```
