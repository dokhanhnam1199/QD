```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    taking into account the item-bin capacity ratio, tight packing, and weighted scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the item-bin capacity ratio for each bin
    capacity_ratio = bins_remain_cap / item
    
    # Set all ratios to zero where the bin cannot hold the item
    capacity_ratio[bins_remain_cap < item] = 0
    
    # Calculate the priority score based on the capacity ratio
    # Favor bins with a ratio close to 1 (i.e., just enough capacity to pack the item)
    priority_scores = np.where(capacity_ratio > 0, 1 / (np.abs(capacity_ratio - 1) + 1e-9), 0)
    
    # Add a weighted scoring bonus for bins with more remaining capacity
    weighted_bonus = bins_remain_cap / (np.sum(bins_remain_cap) + 1e-9)
    priority_scores *= (1 + weighted_bonus)
    
    return priority_scores
```
