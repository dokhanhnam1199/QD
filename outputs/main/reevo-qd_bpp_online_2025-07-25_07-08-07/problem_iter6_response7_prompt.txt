{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the least remaining capacity that can still accommodate the item.\n    This helps in minimizing the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Find bins that can accommodate the item\n    valid_bins = bins_remain_cap >= item\n    \n    # If no valid bins, return zeros\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    # Calculate the priority scores for valid bins\n    # Prioritize bins with the least remaining capacity\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = 1 / (bins_remain_cap[valid_bins] + 1)  # add 1 to avoid division by zero\n    \n    # Normalize the priority scores\n    priorities = priorities / np.sum(priorities)\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on minimizing waste ratio.\n    The goal is to pack items as tightly as possible to minimize waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_adding_item = np.maximum(bins_remain_cap - item, 0)\n\n    # Bins with less capacity than the item get zero priority\n    valid_bins = bins_remain_cap >= item\n\n    # Calculate the waste ratio for each bin\n    waste_ratio = np.where(valid_bins, remaining_cap_after_adding_item / item, np.inf)\n\n    # Invert the waste ratio to get the priority score, use a small value to avoid division by zero\n    priority_score = np.where(valid_bins, 1 / (waste_ratio + 1e-9), -np.inf)\n\n    # Ensure bins with less capacity than the item get the lowest priority\n    priority_score = np.where(valid_bins, priority_score, -np.inf)\n\n    return priority_score\n\n[Reflection]\nMinimize waste ratio for tighter packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}