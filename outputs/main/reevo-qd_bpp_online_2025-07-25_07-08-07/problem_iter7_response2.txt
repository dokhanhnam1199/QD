```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    while also considering the remaining capacity of each bin to minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Set all capacity differences where the bin cannot hold the item to infinity
    capacity_diff[bins_remain_cap < item] = np.inf
    
    # Calculate the priority score as the inverse of the capacity difference
    # A smaller capacity difference results in a higher priority score
    priority_scores_diff = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero
    
    # Calculate a bonus based on the remaining capacity of each bin
    max_capacity = np.max(bins_remain_cap)
    bonus = bins_remain_cap / (max_capacity + 1e-9)  # Avoid division by zero
    
    # Combine the priority scores with adjustable weights
    weight_diff = 0.7
    weight_bonus = 0.3
    priority_scores = weight_diff * priority_scores_diff + weight_bonus * bonus
    
    return priority_scores
```
