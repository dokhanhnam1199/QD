```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on tight packing and favors bins with more remaining capacity.
    The goal is to minimize the number of bins used by packing items as tightly as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = bins_remain_cap - item
    
    # Set all negative differences to infinity, as these bins cannot hold the item
    capacity_diff = np.where(capacity_diff < 0, np.inf, capacity_diff)
    
    # Calculate the priority score as the inverse of the capacity difference
    # A smaller capacity difference results in a higher priority score
    priority_scores = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero
    
    # Favor bins with more remaining capacity relative to other bins by adding a bonus to the priority score
    bonus = bins_remain_cap / (np.sum(bins_remain_cap) + 1e-9)  # Avoid division by zero
    priority_scores *= (1 + bonus)
    
    return priority_scores
```
