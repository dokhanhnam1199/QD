{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins based on multiple factors:\n    - how well the item fits into each bin (fit_score)\n    - the remaining capacity of each bin (capacity_score)\n    - the bin's fullness, prioritizing bins that are more full (fullness_score)\n    \n    The weights of these factors can be adjusted based on specific problem requirements.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        weights: Dictionary with keys 'fit_score', 'capacity_score', 'fullness_score' to specify weights.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    if weights is None:\n        weights = {'fit_score': 0.3, 'capacity_score': 0.2, 'fullness_score': 0.5}\n\n    # Calculate a score based on how well the item fits into each bin\n    # A lower score is preferred as it means the item fits better\n    fit_score = np.abs(bins_remain_cap - item) / item\n    \n    # Calculate a score based on the remaining capacity of each bin\n    # A lower remaining capacity is preferred as it means the bin is more full\n    capacity_score = -bins_remain_cap / np.max(bins_remain_cap)\n    \n    # Calculate a score based on the bin's fullness\n    # A higher fullness score is preferred as it means the bin is more full\n    fullness_score = bins_remain_cap / (bins_remain_cap + item)\n    \n    # Calculate the final priority score as the combination of fit_score and capacity_score\n    # Weights can be adjusted based on specific problem requirements\n    priority_score = (weights['fit_score'] * fit_score + \n                      weights['capacity_score'] * capacity_score + \n                      weights['fullness_score'] * fullness_score)\n    \n    # Ensure that bins with negative remaining capacity have a high penalty\n    priority_score[bins_remain_cap < item] = -np.inf\n    \n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to pack the item,\n    exact fits, and minimize waste ratio, combining multiple scores with adjustable weights.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = bins_remain_cap - item\n    \n    # Set all negative differences to zero, as these bins cannot hold the item\n    capacity_diff = np.maximum(capacity_diff, 0)\n    \n    # Calculate the priority score as the inverse of the capacity difference\n    # A smaller capacity difference results in a higher priority score\n    tight_packing_score = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero\n    \n    # Favor bins with exact fits\n    exact_fit_score = np.where((capacity_diff == 0), 1, 0)\n    \n    # Calculate the waste ratio for each bin\n    waste_ratio = capacity_diff / (bins_remain_cap + 1e-9)  # Add a small value to avoid division by zero\n    \n    # Favor bins with lower waste ratios\n    waste_ratio_score = 1 - waste_ratio\n    \n    # Combine the scores with adjustable weights\n    w_tight_packing = 0.5\n    w_exact_fit = 0.3\n    w_waste_ratio = 0.2\n    priority_scores = w_tight_packing * tight_packing_score + w_exact_fit * exact_fit_score + w_waste_ratio * waste_ratio_score\n    \n    return priority_scores\n\n[Reflection]\nPrioritize tight packing and exact fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}