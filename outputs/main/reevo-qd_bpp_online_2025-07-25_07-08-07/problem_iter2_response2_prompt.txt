{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has just enough capacity to hold the item, it gets the highest priority.\n    Bins with less capacity than the item get zero priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # If the item size is zero, we can add it to any bin without any effect\n    if item == 0:\n        return np.ones_like(bins_remain_cap)\n    \n    # Calculate the ratio of remaining capacity to item size\n    capacity_ratio = bins_remain_cap / item\n    \n    # Bins with less capacity than the item get zero priority\n    priority = np.where(capacity_ratio >= 1, capacity_ratio, 0)\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to pack the item.\n    The goal is to minimize the number of bins used by packing items as tightly as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_adding_item = np.maximum(bins_remain_cap - item, 0)\n\n    # Calculate the ratio of remaining capacity after adding the item to the remaining capacity before adding the item\n    # This ratio is used as the priority score; bins with lower ratios are preferred\n    ratio = np.where(bins_remain_cap > 0, remaining_cap_after_adding_item / bins_remain_cap, np.inf)\n\n    # The priority score is the inverse of the ratio; higher priority scores indicate lower ratios\n    priority_score = np.where(ratio > 0, 1 / ratio, np.inf)\n\n    return priority_score\n\n[Reflection]\nPrioritize tight packing, minimize waste.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}