{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins that have just enough capacity to accommodate the item.\n    It tries to minimize the number of bins used by trying to fill the bins as much as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the \"best fit\" score for each bin, where best fit is defined as the minimum difference between the bin's remaining capacity and the item's size\n    best_fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n\n    # Calculate the \"ensation\" score for each bin, where ensation is defined as the ratio of the item's size to the bin's remaining capacity\n    ensation_scores = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)\n\n    # Calculate the final priority score for each bin, which combines the best fit and ensation scores\n    priority_scores = np.where(best_fit_scores > -np.inf, best_fit_scores + ensation_scores, -np.inf)\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins that have just enough capacity to pack the item,\n    minimizing waste of space. If no such bin exists, it prioritizes bins with the least remaining capacity,\n    encouraging efficient use of space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the minimum remaining capacity required to pack the item\n    min_required_cap = item\n    \n    # Identify bins that have just enough capacity to pack the item\n    exact_fit_bins = bins_remain_cap >= min_required_cap\n    \n    # Prioritize bins with the least remaining capacity if no exact fit is found\n    priority = np.where(exact_fit_bins, 1 / (bins_remain_cap - item + 1), 1 / bins_remain_cap)\n    \n    # If there are exact fit bins, boost their priority to 1 and scale others down\n    if np.sum(exact_fit_bins) > 0:\n        priority = np.where(exact_fit_bins, 1, priority / (1 + np.sum(priority)))\n        priority = np.where(exact_fit_bins, 1, priority)\n    \n    return priority\n\n[Reflection]\nPrioritize exact fits, then minimize remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}