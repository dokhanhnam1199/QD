```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on how tightly they can pack the item.
    The goal is to minimize waste by packing items as tightly as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_adding_item = np.maximum(bins_remain_cap - item, 0)

    # Bins with less capacity than the item get zero priority
    valid_bins = bins_remain_cap >= item

    # Calculate the ratio of remaining capacity after adding the item to the item size
    # This ratio represents how much waste will be left after packing the item
    waste_ratio = np.where(valid_bins, remaining_cap_after_adding_item / item, np.inf)

    # Calculate the inverse of the waste ratio; higher priority scores indicate lower waste ratios
    priority_score = np.where(waste_ratio > 0, 1 / waste_ratio, np.inf)

    # Ensure bins with less capacity than the item get zero priority
    priority_score = np.where(valid_bins, priority_score, 0)

    return priority_score
```
