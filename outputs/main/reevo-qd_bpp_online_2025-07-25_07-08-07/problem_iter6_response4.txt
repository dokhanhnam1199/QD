```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes tight packing and exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = bins_remain_cap - item
    
    # Set all negative differences to zero, as these bins cannot hold the item
    capacity_diff = np.maximum(capacity_diff, 0)
    
    # Calculate the priority score as the inverse of the capacity difference
    # A smaller capacity difference results in a higher priority score
    tight_packing_score = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero
    
    # Favor bins with exact fits
    exact_fit_score = np.where((capacity_diff == 0), 1, 0)
    
    # Combine the scores with adjustable weights
    w_tight_packing = 0.7
    w_exact_fit = 0.3
    priority_scores = w_tight_packing * tight_packing_score + w_exact_fit * exact_fit_score
    
    # Ensure that bins with negative remaining capacity have a high penalty
    priority_scores[bins_remain_cap < item] = -np.inf
    
    return priority_scores
```
