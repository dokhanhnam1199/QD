```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on minimizing waste ratio.
    The goal is to pack items as tightly as possible to minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_adding_item = np.maximum(bins_remain_cap - item, 0)

    # Bins with less capacity than the item get zero priority
    valid_bins = bins_remain_cap >= item

    # Calculate the waste ratio for each bin
    waste_ratio = np.where(valid_bins, remaining_cap_after_adding_item / item, np.inf)

    # Invert the waste ratio to get the priority score, use a small value to avoid division by zero
    priority_score = np.where(valid_bins, 1 / (waste_ratio + 1e-9), -np.inf)

    # Ensure bins with less capacity than the item get the lowest priority
    priority_score = np.where(valid_bins, priority_score, -np.inf)

    return priority_score
```
