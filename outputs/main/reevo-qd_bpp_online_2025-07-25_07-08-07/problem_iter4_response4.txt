```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, weights: dict = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize bins based on multiple factors:
    - how well the item fits into each bin (fit_score)
    - the remaining capacity of each bin (capacity_score)
    - the bin's fullness, prioritizing bins that are more full (fullness_score)
    
    The weights of these factors can be adjusted based on specific problem requirements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        weights: Dictionary with keys 'fit_score', 'capacity_score', 'fullness_score' to specify weights.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if weights is None:
        weights = {'fit_score': 0.3, 'capacity_score': 0.2, 'fullness_score': 0.5}

    # Calculate a score based on how well the item fits into each bin
    # A lower score is preferred as it means the item fits better
    fit_score = np.abs(bins_remain_cap - item) / item
    
    # Calculate a score based on the remaining capacity of each bin
    # A lower remaining capacity is preferred as it means the bin is more full
    capacity_score = -bins_remain_cap / np.max(bins_remain_cap)
    
    # Calculate a score based on the bin's fullness
    # A higher fullness score is preferred as it means the bin is more full
    fullness_score = bins_remain_cap / (bins_remain_cap + item)
    
    # Calculate the final priority score as the combination of fit_score and capacity_score
    # Weights can be adjusted based on specific problem requirements
    priority_score = (weights['fit_score'] * fit_score + 
                      weights['capacity_score'] * capacity_score + 
                      weights['fullness_score'] * fullness_score)
    
    # Ensure that bins with negative remaining capacity have a high penalty
    priority_score[bins_remain_cap < item] = -np.inf
    
    return priority_score
```
