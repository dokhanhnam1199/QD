```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    exact matches, and minimize waste by combining scores with adjustable weights.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = bins_remain_cap - item
    
    # Set all negative differences to zero, as these bins cannot hold the item
    capacity_diff = np.maximum(capacity_diff, 0)
    
    # Calculate the priority score as the inverse of the capacity difference
    # A smaller capacity difference results in a higher priority score
    capacity_priority = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero
    
    # Favor exact matches by adding a bonus to the priority score
    exact_match_bonus = (capacity_diff == 0).astype(float)
    
    # Favor bins with more remaining capacity by adding a bonus to the priority score
    remaining_capacity_bonus = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Combine the priority scores with adjustable weights
    priority_scores = 0.6 * capacity_priority + 0.2 * exact_match_bonus + 0.2 * remaining_capacity_bonus
    
    return priority_scores
```
