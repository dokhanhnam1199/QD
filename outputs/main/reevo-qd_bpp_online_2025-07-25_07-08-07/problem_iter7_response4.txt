```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    while also considering the remaining capacity of each bin to minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the tight fit score as the inverse of the capacity difference
    # A smaller capacity difference results in a higher tight fit score
    tight_fit_scores = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero
    
    # Calculate the exact match score
    # Bins with remaining capacity equal to the item size get a high exact match score
    exact_match_scores = np.where(np.isclose(bins_remain_cap, item, atol=1e-9), 1e6, 0)
    
    # Calculate the remaining capacity score
    # Bins with more remaining capacity get a lower remaining capacity score to minimize waste
    remaining_cap_scores = 1 - (bins_remain_cap / np.sum(bins_remain_cap))
    
    # Combine the scores with adjustable weights
    # Tight fit and exact match scores are more important than remaining capacity score
    weights = np.array([0.6, 0.3, 0.1])  # Adjustable weights
    priority_scores = weights[0] * tight_fit_scores + weights[1] * exact_match_scores + weights[2] * remaining_cap_scores
    
    # Favor bins with more remaining capacity by adding a bonus to the priority score
    bonus = bins_remain_cap / np.sum(bins_remain_cap)
    priority_scores *= (1 + 0.1 * bonus)  # Adjustable bonus weight
    
    return priority_scores
```
