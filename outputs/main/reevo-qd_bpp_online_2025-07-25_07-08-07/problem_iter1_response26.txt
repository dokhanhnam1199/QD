```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to 
    hold the item, to avoid splitting the item across multiple bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Create an array to store the priority scores
    priority_scores = np.zeros_like(bins_remain_cap, dtype=np.float64)

    # Iterate over each bin
    for i in range(len(bins_remain_cap)):
        # Calculate the priority score based on how well the item fits in the bin
        # A higher priority is given to bins that are closer to being full
        if bins_remain_cap[i] >= item:
            priority_scores[i] = 1 - (bins_remain_cap[i] - item) / bins_remain_cap[i]
        else:
            # Assign a low priority score to bins that are too small to hold the item
            priority_scores[i] = -1

    return priority_scores
```
