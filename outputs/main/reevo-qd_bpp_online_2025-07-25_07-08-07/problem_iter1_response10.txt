```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item.
    The goal is to minimize the number of bins used by packing items as tightly as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_adding_item = np.maximum(bins_remain_cap - item, 0)

    # Calculate the ratio of remaining capacity after adding the item to the remaining capacity before adding the item
    # This ratio is used as the priority score; bins with lower ratios are preferred
    ratio = np.where(bins_remain_cap > 0, remaining_cap_after_adding_item / bins_remain_cap, np.inf)

    # The priority score is the inverse of the ratio; higher priority scores indicate lower ratios
    priority_score = np.where(ratio > 0, 1 / ratio, np.inf)

    return priority_score
```
