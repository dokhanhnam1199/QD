```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have enough capacity to hold the item and 
    penalize bins that would be overfilled. If multiple bins have enough capacity, it favors the one 
    with the least remaining capacity to minimize the number of partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the feasibility of each bin (i.e., does the bin have enough capacity to hold the item)
    feasibility = bins_remain_cap >= item
    
    # If a bin is feasible, its priority is inversely proportional to the remaining capacity
    # This encourages the use of bins that are almost full to minimize the number of partially filled bins
    priorities = np.where(feasibility, 1 / bins_remain_cap, 0)
    
    # Set priority to -np.inf for bins that would be overfilled
    priorities_non_feasible = -np.inf * np.ones_like(bins_remain_cap)
    priorities_non_feasible[feasibility] = 0
    
    return priorities
```
