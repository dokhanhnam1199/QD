```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # bins that have enough capacity to hold the item
    valid_bins = (bins_remain_cap >= item)
    
    # set priority of invalid bins to 0
    priority = np.where(valid_bins, (bins_remain_cap - item) / (bins_remain_cap + 1e-9), 0)
    
    # to break ties (when multiple bins have the same remaining capacity), prioritize the bin with the most remaining capacity
    priority += np.maximum(0, np.where(valid_bins, bins_remain_cap - np.max(bins_remain_cap[valid_bins]) + 1e-9, 0))
    
    return priority
```
