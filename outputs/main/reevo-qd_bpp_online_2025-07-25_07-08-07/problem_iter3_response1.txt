```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    prioritizing tight packing and weighted scoring based on the item-bin capacity ratio.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of the item size to the remaining capacity of each bin
    capacity_ratios = item / (bins_remain_cap + 1e-9)  # Add a small value to avoid division by zero
    
    # Calculate the priority score as the weighted sum of the capacity ratio and the inverse of the capacity difference
    capacity_diff = bins_remain_cap - item
    capacity_diff = np.maximum(capacity_diff, 0)
    priority_scores = capacity_ratios * (1 / (capacity_diff + 1e-9))
    
    # Favor bins with a higher capacity ratio and a smaller capacity difference
    priority_scores = priority_scores / np.sum(priority_scores) if np.sum(priority_scores) > 0 else np.ones_like(priority_scores)
    
    return priority_scores
```
