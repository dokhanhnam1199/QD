{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins that have just enough capacity to pack the item, \n    minimizing waste of space. If no such bin exists, it prioritizes bins with the least remaining capacity, \n    encouraging efficient use of space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the minimum remaining capacity required to pack the item\n    min_required_cap = item\n    \n    # Identify bins that have just enough capacity to pack the item\n    exact_fit_bins = bins_remain_cap >= min_required_cap\n    \n    # Calculate the priority scores\n    # Exact fit bins get a high priority score (1)\n    # Other bins get a priority score based on their remaining capacity (lower remaining capacity gets higher priority)\n    priority = np.where(exact_fit_bins, 1, 1 / bins_remain_cap)\n    \n    # If there are no exact fit bins, make sure the priorities sum up to 1\n    if np.sum(exact_fit_bins) == 0:\n        priority = priority / np.sum(priority)\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize bins based on how well the item fits into each bin\n    and the remaining capacity of each bin. It encourages the packing of items into bins where the item \n    size is as close as possible to the remaining capacity, while also keeping the number of bins used \n    as low as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate a score based on how well the item fits into each bin\n    # A lower score is preferred as it means the item fits better\n    fit_score = np.abs(bins_remain_cap - item)\n    \n    # Calculate a score based on the remaining capacity of each bin\n    # A lower remaining capacity is preferred as it means the bin is more full\n    capacity_score = -bins_remain_cap\n    \n    # Calculate the final priority score as the combination of fit_score and capacity_score\n    # Weights can be adjusted based on specific problem requirements\n    priority_score = 0.7 * capacity_score - 0.3 * (fit_score / item)\n    \n    # Ensure that bins with negative remaining capacity have a high penalty\n    priority_score[bins_remain_cap < item] = -np.inf\n    \n    return priority_score\n\n[Reflection]\nCombine fit and capacity scores with adjustable weights.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}