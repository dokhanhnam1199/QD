```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # If the item size is zero, we can add it to any bin without decreasing the remaining capacity
    if item == 0:
        return np.ones_like(bins_remain_cap)
    
    # Calculate the ratio of the remaining capacity and the item size for each bin
    ratios = np.where(bins_remain_cap >= item, np.abs(bins_remain_cap / item - 1), np.inf)
    
    # Prioritize bins with ratios closest to 0 (i.e., with just enough capacity to hold the item)
    return -ratios

# Test the function
item = 10.0
bins_remain_cap = np.array([5.0, 10.0, 15.0, 20.0])
priority_scores = priority_v2(item, bins_remain_cap)
print(priority_scores)
```
