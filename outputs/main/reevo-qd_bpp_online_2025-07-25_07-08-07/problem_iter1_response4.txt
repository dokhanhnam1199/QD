```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, we calculate the ratio of the remaining capacity and the item size.
    # We add a small value to the denominator to avoid division by zero.
    ratio = bins_remain_cap / (item + 1e-8)

    # If a bin has less capacity than the item, we set its priority to zero.
    ratio[bins_remain_cap < item] = 0

    # We use the ratio as the priority score.
    # Since we want to prioritize bins with just enough capacity, we use the inverse of the ratio.
    score = np.where(ratio > 0, 1 / ratio, 0)

    # If all bins have less capacity than the item, we return all zeros.
    # This is equivalent to starting a new bin for the item.
    if np.all(score == 0):
        return np.zeros_like(bins_remain_cap)
    else:
        return score
```
