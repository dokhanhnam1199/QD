```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    minimizing waste of space. If no such bin exists, it favors bins with the least remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the capacity difference between each bin and the item
    diff = bins_remain_cap - item
    
    # For bins that can contain the item, favor those with the least remaining capacity
    can_contain = diff >= 0
    priority = np.where(can_contain, -diff, -1000)  # use -1000 to ensure bins that cannot contain have a very low priority
    
    # If there are multiple bins with the same minimum remaining capacity, use a secondary priority to favor bins with larger capacity
    secondary_priority = np.where(can_contain, bins_remain_cap, 0)
    return np.where(priority == np.max(priority), secondary_priority, priority)
```
