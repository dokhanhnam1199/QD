```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    taking into account the item-bin capacity ratio, tight packing, and weighted scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the item-bin capacity ratio for each bin
    capacity_ratio = bins_remain_cap / item
    
    # Set all ratios to zero for bins that cannot hold the item
    capacity_ratio = np.where(bins_remain_cap < item, 0, capacity_ratio)
    
    # Calculate the tight packing score as the inverse of the capacity ratio
    # A smaller capacity ratio results in a higher priority score
    tight_packing_score = 1 / (capacity_ratio + 1e-9)  # Add a small value to avoid division by zero
    
    # Calculate the weighted scoring based on the remaining capacity of each bin
    # Favor bins with more remaining capacity by adding a bonus to the priority score
    bonus = bins_remain_cap / np.sum(bins_remain_cap)
    weighted_score = tight_packing_score * (1 + bonus)
    
    # Calculate the final priority score as a weighted sum of the tight packing score and the weighted score
    priority_scores = 0.7 * tight_packing_score + 0.3 * weighted_score
    
    return priority_scores
```
