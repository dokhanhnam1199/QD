```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    exact fits, and minimize waste ratio, combining multiple scores with adjustable weights.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = bins_remain_cap - item
    
    # Set all negative differences to zero, as these bins cannot hold the item
    capacity_diff = np.maximum(capacity_diff, 0)
    
    # Calculate the priority score as the inverse of the capacity difference
    # A smaller capacity difference results in a higher priority score
    tight_packing_score = 1 / (capacity_diff + 1e-9)  # Add a small value to avoid division by zero
    
    # Calculate exact fit score
    exact_fit_score = np.where(capacity_diff == 0, 1, 0)
    
    # Calculate waste ratio score
    waste_ratio_score = 1 - (capacity_diff / (bins_remain_cap + 1e-9))  # Avoid division by zero
    
    # Combine multiple scores with adjustable weights
    weights = np.array([0.4, 0.3, 0.3])  # Adjust weights according to problem requirements
    priority_scores = weights[0] * tight_packing_score + weights[1] * exact_fit_score + weights[2] * waste_ratio_score
    
    # Favor bins with more remaining capacity by adding a bonus to the priority score
    bonus = bins_remain_cap / np.sum(bins_remain_cap)
    priority_scores *= (1 + 0.1 * bonus)  # Adjust bonus weight according to problem requirements
    
    return priority_scores
```
