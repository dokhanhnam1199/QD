```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    while also considering the remaining capacity of each bin to minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Set all capacity differences to a minimum value to avoid division by zero
    capacity_diff = np.maximum(capacity_diff, 1e-9)
    
    # Calculate the priority score based on the capacity difference
    priority_scores = 1 / capacity_diff
    
    # Calculate a bonus score based on the remaining capacity of each bin
    bonus_scores = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Calculate a tight fit score based on the capacity difference
    tight_fit_scores = 1 / (1 + capacity_diff)
    
    # Combine the priority scores with adjustable weights
    alpha = 0.6  # weight for capacity difference
    beta = 0.3   # weight for remaining capacity
    gamma = 0.1  # weight for tight fit
    priority_scores = alpha * priority_scores + beta * bonus_scores + gamma * tight_fit_scores
    
    return priority_scores
```
