```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to pack the item,
    taking into account the item-bin capacity ratio, tight packing, and weighted scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the item-bin capacity ratio for each bin
    ratio = item / (bins_remain_cap + 1e-9)  # Add a small value to avoid division by zero
    
    # Calculate the weighted scoring based on the ratio
    weighted_score = 1 / (1 + np.abs(ratio - 1))  # Favor bins with a ratio close to 1
    
    # Calculate the tight packing score based on the remaining capacity of each bin
    tight_packing_score = bins_remain_cap / np.sum(bins_remain_cap)  # Favor bins with more remaining capacity
    
    # Calculate the final priority score by combining the weighted scoring and tight packing score
    priority_scores = weighted_score * (1 + tight_packing_score)
    
    # Set all negative differences to zero, as these bins cannot hold the item
    priority_scores[bins_remain_cap - item < 0] = 0
    
    return priority_scores
```
