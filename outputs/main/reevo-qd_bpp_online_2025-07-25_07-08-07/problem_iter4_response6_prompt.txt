{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on minimizing waste of space and efficient use of space.\n    It favors bins where the item size is closest to the remaining capacity, and then considers the remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Set the priority score to negative infinity for bins that cannot hold the item\n    valid_bins = bins_remain_cap >= item\n    priority = np.where(valid_bins, \n                         1 / (diff + 1) + bins_remain_cap / (np.max(bins_remain_cap) + 1), \n                         -np.inf)\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on how tightly they can pack the item.\n    The goal is to minimize waste by packing items as tightly as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_adding_item = np.maximum(bins_remain_cap - item, 0)\n\n    # Bins with less capacity than the item get zero priority\n    valid_bins = bins_remain_cap >= item\n\n    # Calculate the ratio of remaining capacity after adding the item to the item size\n    # This ratio represents how much waste will be left after packing the item\n    waste_ratio = np.where(valid_bins, remaining_cap_after_adding_item / item, np.inf)\n\n    # Calculate the inverse of the waste ratio; higher priority scores indicate lower waste ratios\n    priority_score = np.where(waste_ratio > 0, 1 / waste_ratio, np.inf)\n\n    # Ensure bins with less capacity than the item get zero priority\n    priority_score = np.where(valid_bins, priority_score, 0)\n\n    return priority_score\n\n[Reflection]\nFocus on minimizing waste ratio for better heuristics.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}