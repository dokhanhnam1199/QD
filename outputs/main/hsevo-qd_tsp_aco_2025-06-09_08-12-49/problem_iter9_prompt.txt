{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Newtonian attraction with inverse distance for TSP edge prioritization.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    safe_distance_matrix = distance_matrix + epsilon\n\n    # Newtonian attraction component\n    attraction = 1 / (safe_distance_matrix**2)\n    mass = np.sum(1 / safe_distance_matrix, axis=1)\n    M = np.outer(mass, mass)\n    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)\n    newtonian = (attraction * M) / potential_energy\n\n    # Inverse distance component\n    inverse_distance = 1 / safe_distance_matrix\n\n    # Combine the two components\n    heuristics = attraction_weight * newtonian + inverse_distance_weight * inverse_distance\n\n    # Normalize\n    min_heuristic = np.min(heuristics)\n    max_heuristic = np.max(heuristics)\n    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)\n\n    return heuristics\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I'm ready to refine \"Current Self-Reflection\" for better heuristic design. Let's focus on actionable improvements, not just general reminders.\n\n*   **Keywords:** Feature Engineering, Analogy, Evaluation Rigor, Code Clarity\n*   **Advice:** Emphasize creating novel features through insightful combinations (especially physical analogies). Design robust testing procedures to truly compare heuristic effectiveness.\n*   **Avoid:** Vague statements like \"consider combining factors.\" Instead, focus on *how* to combine them creatively and meaningfully.\n*   **Explanation:** Move beyond general principles. We need concrete techniques for feature creation, rigorous evaluation, and maintainable code, not just the awareness of their importance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}