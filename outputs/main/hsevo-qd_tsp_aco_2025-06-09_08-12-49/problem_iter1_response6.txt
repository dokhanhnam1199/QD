```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Hawking's TSP Heuristic: Black Hole Inspired Edge Prioritization

    This heuristic aims to prioritize edges in the TSP graph based on a combination of
    distance, a 'gravitational' attraction between nodes (inversely proportional to
    distance squared), and a random perturbation to introduce exploration.  Edges
    connecting to nodes with shorter average distances to all other nodes are
    given higher priority, mimicking a black hole's gravitational pull on nearby objects.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                        between all nodes in the TSP.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing
                    the prior probability (or desirability) of including each edge
                    in the optimal TSP tour. Higher values indicate higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate average distance from each node to all others (simulated gravitational mass)
    node_masses = np.sum(distance_matrix, axis=1) / (n - 1)
    node_masses = 1 / (node_masses + 1e-6)  # Invert to represent 'gravitational pull', prevent division by zero

    for i in range(n):
        for j in range(n):
            if i != j:
                # Edge priority is a combination of:
                # 1. Inverse distance (shorter edges are better)
                # 2. "Gravitational" attraction of connected nodes (nodes with short avg. distances attract edges)
                # 3. Random perturbation (to encourage exploration and escape local optima)

                distance_term = 1 / (distance_matrix[i, j] + 1e-6)  # Prevent division by zero
                gravity_term = node_masses[i] + node_masses[j]  # Sum of masses attracts edges
                random_term = np.random.uniform(0, 0.1)  # Small random perturbation

                heuristics[i, j] = distance_term * gravity_term + random_term
            else:
                heuristics[i, j] = 0  # No self-loops

    return heuristics
```
