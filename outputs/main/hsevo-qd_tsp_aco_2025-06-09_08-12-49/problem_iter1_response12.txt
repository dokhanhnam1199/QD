```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem based on distance,
    a 'gravitational' attraction score, and simulated annealing principles.

    Inspired by my laws of motion and universal gravitation.  The closer nodes
    are more attractive, but we must also avoid getting stuck in local minima.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                     represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                      element represents a heuristic score for including the
                      corresponding edge in a solution. Higher scores indicate
                      more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Avoid division by zero and self-loops: set diagonal to infinity for calculations
    temp_matrix = distance_matrix + np.eye(n) * np.inf

    # Inverse distance: Closer nodes are generally better connected in TSP solutions.
    inverse_distance = 1 / temp_matrix

    # "Gravitational Attraction": Nodes strongly attracted to many other nodes are more central and useful.
    attraction = np.sum(inverse_distance, axis=1, keepdims=True) * np.sum(inverse_distance, axis=0, keepdims=False)
    # Enhance shortest connections
    min_dist = np.min(distance_matrix[distance_matrix > 0]) # Find minimum non-zero distance
    shortest_connection_mask = distance_matrix == min_dist
    attraction[shortest_connection_mask] *= 2

    # Combine inverse distance and "gravitational attraction".  Normalize to avoid extreme values.
    heuristics = inverse_distance * attraction

    # Prevent infinite heuristic values (from dividing by near-zero distances). Limit maximum influence.
    heuristics[np.isinf(heuristics)] = np.max(heuristics[~np.isinf(heuristics)]) if np.any(~np.isinf(heuristics)) else 0

    return heuristics

```
