```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines Newtonian attraction, inverse distance, and degree for TSP."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian attraction component
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse distance component
    inverse_distance = 1 / safe_distance_matrix

    # Node degree component (encourage exploration)
    degree = np.sum(distance_matrix > 0, axis=1) # number of neighbors with distance > 0
    degree_matrix = np.outer(degree, degree)
    degree_normalized = degree_matrix / np.max(degree_matrix) if np.max(degree_matrix) > 0 else np.zeros_like(degree_matrix)

    # Combine the components
    heuristics = 0.6 * newtonian + 0.3 * inverse_distance + 0.1 * degree_normalized

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Sparsify (optional - can improve performance by removing less promising edges)
    threshold = np.quantile(heuristics, 0.2) # Keep top 80%
    heuristics[heuristics < threshold] = 0

    return heuristics
```
