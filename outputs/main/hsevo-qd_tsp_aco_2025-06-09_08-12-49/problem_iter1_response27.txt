```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Richard Feynman's heuristic for TSP. Combines inverse distance with
    a stochastic element inspired by quantum path integrals and simulated
    annealing. Edges are assigned higher probabilities if they are short,
    but also if they randomly appear in better 'sampled' paths.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                        is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing
                    prior indicators of how promising it is to include each edge.
                    Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]

    # Basic inverse distance heuristic
    heuristic = 1.0 / (distance_matrix + 1e-9)  # Adding small value to prevent division by zero

    # Simulate stochastic path sampling:  "Many Paths, One Solution"
    num_samples = n * 2  # Adjust for problem size
    temperature = np.std(distance_matrix) # Adjust temperature

    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    for _ in range(num_samples):
        # Generate a random path starting from a random node
        start_node = np.random.randint(n)
        path = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        current_node = start_node
        while unvisited:
            # Probabilistically choose the next node based on distance
            probabilities = np.array([heuristic[current_node, next_node] for next_node in unvisited])
            probabilities = np.exp(probabilities / temperature)
            probabilities /= np.sum(probabilities)
            next_node = np.random.choice(list(unvisited), p=probabilities)

            path.append(next_node)
            unvisited.remove(next_node)
            edge_counts[current_node, next_node] += 1
            edge_counts[next_node, current_node] += 1  # Symmetric TSP
            current_node = next_node
            
        #Close the loop
        edge_counts[current_node, start_node] +=1
        edge_counts[start_node, current_node] +=1

    # Normalize edge counts
    edge_counts /= num_samples

    # Combine inverse distance and sampled path information
    heuristic = 0.7 * heuristic + 0.3 * edge_counts  # Adjust weights
    return heuristic
```
