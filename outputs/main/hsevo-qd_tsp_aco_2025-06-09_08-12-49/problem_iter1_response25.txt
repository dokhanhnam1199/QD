```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Generates heuristics for the Traveling Salesman Problem (TSP) based on a combination
    of distance, a "gravity" score derived from node degree, and a penalty for
    edges connecting nodes that are already "close" in the solution space. This design
    attempts to balance exploitation of short distances with exploration of less obvious edges.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the pairwise distances
                                     between nodes. distance_matrix[i, j] gives the distance
                                     between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                    indicates the desirability of including the corresponding edge in a TSP tour.
                    Higher values indicate more desirable edges.

    """
    num_nodes = distance_matrix.shape[0]

    # 1. Inverse Distance: Closer nodes are generally better.
    heuristic_matrix = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node Degree "Gravity": Nodes with fewer connections should be prioritized.
    #    This encourages the solver to explore less-traveled parts of the graph.
    #    We approximate node degree by looking at the sum of inverse distances. Higher
    #    sums imply the node is close to many other nodes, meaning a higher "degree".
    node_strengths = np.sum(heuristic_matrix, axis=0)  # Sum of desirability of each node's connections.
    gravity_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            gravity_matrix[i, j] = node_strengths[i] * node_strengths[j] # Multiply the gravity for edge strength

    # Normalize gravity matrix
    gravity_matrix = gravity_matrix / np.max(gravity_matrix)

    heuristic_matrix = heuristic_matrix * gravity_matrix # Weight by node popularity.

    # Make the heuristic zero at the diagonal
    for i in range(num_nodes):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
