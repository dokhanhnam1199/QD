```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Einstein's heuristic for TSP edge promise indication.
    Combines inverse distance with node centrality and dispersion.
    """
    n = distance_matrix.shape[0]

    # Inverse distance: closer is generally better (but not always!)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Avoid division by zero

    # Node centrality: prioritize edges connected to less connected nodes.
    # The intuition is that less central nodes may be harder to "fit" in a tour,
    # so prioritizing edges to them might lead to a better initial exploration.
    node_degrees = np.sum(distance_matrix > 0, axis=0) # or 1/ sum(distance_matrix), experiment
    centrality_boost = np.tile(node_degrees, (n, 1)) + np.tile(node_degrees, (n, 1)).T
    centrality_boost = 1 / (centrality_boost + 1e-9)

    # Dispersion: Encourage links that creates longer links between clusters/nodes
    mean_distance = np.mean(distance_matrix)
    dispersion_factor = np.exp(distance_matrix / mean_distance)

    # Combine the heuristics using a weighted sum. The weights can be tuned.
    alpha = 0.6  # Weight for inverse distance
    beta = 0.2  # Weight for centrality
    gamma = 0.2  # Weight for dispersion

    heuristic_matrix = alpha * inverse_distance + beta * centrality_boost + gamma * dispersion_factor

    return heuristic_matrix
```
