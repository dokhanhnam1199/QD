```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian attraction, inverse distance, and sparsification
    with parameter tuning.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-6
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian attraction
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse distance
    inverse_distance = 1 / safe_distance_matrix

    # Node degree component (prioritize edges connecting low-degree nodes)
    degree = np.sum(distance_matrix > 0, axis=1)  # Count neighbors
    degree_matrix = np.outer(degree, degree)
    degree_heuristic = 1 / (degree_matrix + epsilon)

    # Combine components with weights
    attraction_weight = 0.5  # Tunable parameter
    inverse_distance_weight = 0.3  # Tunable parameter
    degree_weight = 0.2 # Tunable parameter
    heuristics = (attraction_weight * newtonian +
                  inverse_distance_weight * inverse_distance +
                  degree_weight * degree_heuristic)

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Sparsification
    threshold_percentile = 20 # Tunable parameter
    threshold = np.percentile(heuristics, threshold_percentile)  # Keep top edges
    heuristics[heuristics < threshold] = 0.0

    return heuristics
```
