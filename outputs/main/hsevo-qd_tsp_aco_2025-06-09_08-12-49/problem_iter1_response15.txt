```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on a combination of inverse distance and
    a measure of node "centrality".

    This heuristic aims to favor shorter edges connecting to more centrally located nodes.
    The centrality measure approximates how close a node is to other nodes on average.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate a measure of node centrality: average distance to other nodes
    node_centrality = np.mean(distance_matrix, axis=1, keepdims=True)

    for i in range(n):
        for j in range(n):
            if i != j:
                #Inverse of Distance to penalize further apart cities
                inverse_distance = 1 / distance_matrix[i, j]

                #Combined centrality score of two end cities
                centrality_score = 1 / (node_centrality[i] + node_centrality[j])

                # Combine the inverse distance and centrality to get the heuristic value.
                heuristics[i, j] = inverse_distance * centrality_score
            else:
                heuristics[i, j] = 0  # Avoid self-loops

    return heuristics
```
