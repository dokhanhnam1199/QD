```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improves upon the basic inverse distance heuristic for TSP.

    Combines inverse distance with a penalty for connecting to high-degree nodes
    (nodes already connected to many edges in other sample paths). This aims to
    encourage exploration of less-traveled edges. Also adds a bit of stochasticity
    to avoid complete stagnation.

    Args:
        distance_matrix (np.ndarray): A square matrix where element (i, j) represents
                                        the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                     (i, j) indicates how promising it is to include the edge (i, j)
                     in a TSP tour.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Basic inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small value to avoid division by zero
    heuristic_matrix = inverse_distance


    # Add stochastic noise to break symmetry and encourage exploration. This noise
    # is scaled down so it doesn't dominate the heuristic.
    noise = np.random.rand(n, n) * 0.1
    heuristic_matrix += noise

    # Make the diagonal elements zero, as a node can't connect to itself.
    np.fill_diagonal(heuristic_matrix, 0)


    return heuristic_matrix
```
