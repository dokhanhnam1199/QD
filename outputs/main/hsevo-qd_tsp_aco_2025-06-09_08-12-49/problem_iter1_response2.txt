```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on a combination of inverse distance and savings heuristic principles,
    inspired by gravitational potential energy and shortest path considerations.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                      distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the desirability of including each edge in the TSP tour.
                      Higher values indicate a more desirable edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate inverse distance (similar to gravitational potential - closer is better)
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))  # Add identity matrix to avoid division by zero on diagonal
    # Add a small value (e.g., 1e-9) to prevent infinite values when distance is 0.

    # Calculate savings heuristic component
    savings_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                # savings[i, j] = dist(0, i) + dist(0, j) - dist(i, j) - where city 0 is considered as a base city. Here, we avoid assigning base
                #  city and calculate savings for all pair of cities which is better than only base city calculation in the original saving algorithm, which avoids premature close the tour
                savings_matrix[i, j] = 0.0
                for k in range(n):
                    if k!=i and k!=j:
                        savings_matrix[i,j] = savings_matrix[i,j] + (distance_matrix[k, i] + distance_matrix[k, j] - distance_matrix[i, j])

    # Combine inverse distance and savings heuristic
    heuristic_matrix = inverse_distance + 0.1*savings_matrix # the constance 0.1 helps to make two part more balanced

    return heuristic_matrix
```
