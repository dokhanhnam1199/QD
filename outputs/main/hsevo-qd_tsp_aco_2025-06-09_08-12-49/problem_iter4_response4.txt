import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, attraction_weight: float = 0.8162168050555542, inverse_distance_weight: float = 0.0736102270350989, epsilon: float = 3.34146206369555e-09) -> np.ndarray:
    """
    Combines Newtonian attraction with inverse distance for TSP edge prioritization.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian attraction component
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse distance component
    inverse_distance = 1 / safe_distance_matrix

    # Combine the two components
    heuristics = attraction_weight * newtonian + inverse_distance_weight * inverse_distance

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
