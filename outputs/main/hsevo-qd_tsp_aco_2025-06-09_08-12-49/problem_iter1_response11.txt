```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on a combination of
    distance, node degree, and randomness to encourage exploration.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
                                       matrix between cities. distance_matrix[i, j]
                                       is the distance between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                      representing the heuristic values for each edge. Higher
                      values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Node degree heuristic (prioritize edges connected to less-connected nodes)
    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                 degree_heuristic[i,j] = 1/(np.sum(inverse_distance[i,:]) + np.sum(inverse_distance[:,j]) + 1e-9) # smaller value, more connected. 1/x will make it prioritize less connected

    # Combine heuristics with a weighted sum, introducing randomness
    alpha = 0.7  # Weight for inverse distance
    beta = 0.3  # Weight for degree heuristic

    heuristics = alpha * inverse_distance + beta * degree_heuristic + 0.01 * np.random.rand(n, n)  #Add tiny bit of randomness

    # Ensure no self-loops are considered (set heuristic value to 0) and no impossible paths.
    for i in range(n):
        heuristics[i, i] = 0.0
        for j in range(n):
            if distance_matrix[i,j] == 0:
              heuristics[i,j] = 0.0  #Prevent edge between a node and itself.
    return heuristics
```
