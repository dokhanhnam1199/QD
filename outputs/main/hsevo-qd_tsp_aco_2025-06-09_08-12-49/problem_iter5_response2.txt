```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian attraction, inverse distance, and node degree for TSP.
    Sparsifies the result and normalizes for stability.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian attraction component
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse distance component
    inverse_distance = 1 / safe_distance_matrix

    # Node degree as additional mass
    degree = np.sum(distance_matrix < np.mean(distance_matrix), axis=1) # consider neighbors in short distance
    degree_matrix = np.outer(degree, degree)
    degree_component = degree_matrix/ np.mean(degree_matrix)


    # Combine the components - Tunable parameters
    attraction_weight = 0.5
    inverse_distance_weight = 0.3
    degree_weight = 0.2 # new factor

    heuristics = attraction_weight * newtonian + inverse_distance_weight * inverse_distance + degree_weight * degree_component


    # Sparsify (set low values to zero)
    threshold = np.percentile(heuristics, 20)  # Only keep top 80% edges, could also be a parameter
    heuristics[heuristics < threshold] = 0

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    if max_heuristic > min_heuristic: # prevent division by zero if all elements are the same
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
