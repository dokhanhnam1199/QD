```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian attraction, inverse distance, node degree, and sparsification.
    Uses a parameter to sparsify heuristic.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    # 1. Newtonian Attraction
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # 2. Inverse Distance
    inverse_distance = 1 / safe_distance_matrix

    # 3. Node Degree: Favor edges connecting to nodes with fewer connections
    degree = np.sum(distance_matrix < np.mean(distance_matrix), axis=1)
    degree_matrix = np.outer(degree, degree)
    degree_factor = 1 / (degree_matrix + epsilon)

    # 4. Combine Components
    heuristics = 0.5 * newtonian + 0.3 * inverse_distance + 0.2 * degree_factor

    # 5. Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # 6. Sparsification: Dynamic threshold
    sparsification_factor = 20 # Parameter
    threshold = np.percentile(heuristics, sparsification_factor)
    heuristics[heuristics < threshold] = 0

    # Ensure diagonal is zero.
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
