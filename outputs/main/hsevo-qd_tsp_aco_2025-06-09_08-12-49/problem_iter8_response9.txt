```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  newtonian_weight: float = 0.6,
                  inverse_distance_weight: float = 0.4,
                  degree_factor_weight: float = 0.1,
                  sparsification_percentile: float = 20.0,
                  epsilon: float = 1e-8) -> np.ndarray:
    """Combines attraction, inverse distance, degree, normalizes and sparsifies."""

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian Attraction
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse Distance
    inverse_distance = 1 / safe_distance_matrix

    # Node Degree
    degree = np.sum(distance_matrix > 0, axis=1)
    degree_matrix = np.outer(degree, degree)
    degree_factor = 1 / (degree_matrix + epsilon)

    # Combine Components
    heuristics = (newtonian_weight * newtonian +
                  inverse_distance_weight * inverse_distance +
                  degree_factor_weight * degree_factor)

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Sparsification
    threshold = np.percentile(heuristics, sparsification_percentile)
    heuristics[heuristics < threshold] = 0.0

    return heuristics
```
