```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    TSP heuristics based on a combination of distance, node degree, and
    a randomized component to encourage exploration.

    Args:
        distance_matrix (np.ndarray): Distance matrix of the TSP problem.

    Returns:
        np.ndarray: Heuristic matrix of the same shape as distance_matrix,
                      representing the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Inverse distance: Closer nodes are generally better
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add small constant to avoid division by zero

    # Node degree: Prefer nodes with fewer connections (encourages tour completion)
    degree_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = (n - 1) / np.sum(inverse_distance[i, :] > 0)

    # Randomness: Introduce some randomness for exploration
    random_component = np.random.rand(n, n) * 0.1  # Scale randomness to be smaller

    # Combine heuristics
    heuristic_matrix = inverse_distance + 0.5 * degree_heuristic + random_component

    # Normalize the heuristic values to be between 0 and 1 (optional, but can be helpful)
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)

    return heuristic_matrix
```
