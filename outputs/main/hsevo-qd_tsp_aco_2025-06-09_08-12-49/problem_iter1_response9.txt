```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that provides
    prior indicators of how promising it is to include each edge in a solution.
    This version combines distance information with a simple measure of node
    connectivity based on inverse distance.  The goal is to prioritize
    edges connecting nodes that are relatively close to each other and also
    nodes that have more relatively close neighbors.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the
                                        pairwise distances between nodes.
                                        distance_matrix[i, j] is the distance
                                        between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    where each element [i, j] represents the heuristic
                    value for including the edge between node i and node j
                    in a TSP tour.  Higher values indicate more promising
                    edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Basic inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero on diagonal

    # Node connectivity measure: sum of inverse distances to other nodes.
    # Nodes with high connectivity are desirable to visit early in a tour.
    node_connectivity = np.sum(inverse_distance, axis=1)

    # Combine inverse distance and node connectivity
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = inverse_distance[i, j] * (node_connectivity[i] + node_connectivity[j])
            else:
                heuristic_matrix[i,j] = 0  #ignore the diagonal
                

    return heuristic_matrix
```
