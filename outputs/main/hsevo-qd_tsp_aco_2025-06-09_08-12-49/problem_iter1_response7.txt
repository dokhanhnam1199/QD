```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on a combination of distance,
    nearest neighbor considerations, and some "quantum" inspired randomness.

    This function aims to provide prior indicators of how promising it is to include each
    edge in a TSP solution, favoring shorter distances and connections to less-visited nodes.
    It introduces a bit of stochasticity to allow for exploration beyond the most obvious choices.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                       distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents
                      the heuristic value for including the corresponding edge in the solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are generally more desirable
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Avoid division by zero

    # 2. Nearest Neighbor Consideration:
    #    For each node, find its nearest neighbors and boost the heuristic value
    nearest_neighbors_boost = np.zeros((n, n))
    for i in range(n):
        # Find the indices of the nearest neighbors (excluding itself)
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:min(4,n)] # top 3 nearest
        for j in nearest_neighbors:
             nearest_neighbors_boost[i,j] = 1.0
             nearest_neighbors_boost[j,i] = 1.0


    # 3. Stochastic Exploration (Quantum Inspiration):
    #    Introduce some randomness to explore less obvious edges
    random_factor = np.random.rand(n, n) * 0.1  # Small random values

    # 4. Combine the factors:
    heuristic_matrix = inverse_distance + nearest_neighbors_boost + random_factor


    # Normalize the heuristic matrix to ensure values are within a reasonable range
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)

    return heuristic_matrix
```
