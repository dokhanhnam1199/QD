```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP)
    based on a combination of inverse distance and savings heuristic principles.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                        between cities. distance_matrix[i][j] is the
                                        distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing
                      the desirability of including each edge in the TSP tour.
                      Higher values indicate a more desirable edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Inverse distance component (cities closer are generally preferred)
    inverse_distance = 1 / (distance_matrix + np.eye(n))  # Adding identity avoids division by zero

    # Savings heuristic component (combining nodes reduces overall distance)
    savings = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                savings[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]

    # Combination of both heuristics, scaled and shifted.
    # This ensures neither component dominates and avoids negative values.
    heuristics = 0.5 * (inverse_distance / np.max(inverse_distance)) + 0.5 * (savings / np.max(savings))


    #Further Boost Short Edges and Reduce Self-Loops
    heuristics = heuristics * (1 - np.eye(n)) #Set Diagonal entries to 0

    return heuristics
```
