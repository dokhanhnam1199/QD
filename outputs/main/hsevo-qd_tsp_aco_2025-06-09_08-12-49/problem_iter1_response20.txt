```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, node degree, and a bit of randomness.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing
        the prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse of distance, plus a small constant to avoid division by zero
    heuristics = 1 / (distance_matrix + 1e-9)

    # Encourage edges connected to nodes with high average distance
    # This promotes exploring diverse routes and avoiding getting stuck in local minima.
    avg_distances = np.mean(distance_matrix, axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] *= (avg_distances[i] + avg_distances[j]) / 2

    # Add a small amount of randomness to encourage exploration
    randomness = np.random.rand(n, n) * 0.1
    heuristics += randomness

    # Make diagonal elements zero as they don't represent edges
    for i in range(n):
        heuristics[i, i] = 0

    # Normalize to be between 0 and 1, approximately
    heuristics = heuristics / np.max(heuristics)

    return heuristics
```
