```python
import numpy as np

epsilon = 1e-6  # Small constant to avoid division by zero
attraction_weight = 0.5
inverse_distance_weight = 0.5
sparsification_threshold = 0.1


def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian attraction with inverse distance and sparsification for TSP edge prioritization.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian attraction component
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse distance component
    inverse_distance = 1 / safe_distance_matrix

    # Combined heuristic
    heuristics = attraction_weight * newtonian + inverse_distance_weight * inverse_distance

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Sparsification
    mean_heuristic = np.mean(heuristics)
    heuristics[heuristics < sparsification_threshold * mean_heuristic] = 0  # More aggressive sparsification

    #Ensure diagonal is zero
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
