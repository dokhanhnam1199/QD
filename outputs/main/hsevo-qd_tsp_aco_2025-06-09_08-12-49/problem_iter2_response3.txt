```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines Newtonian attraction with inverse distance, sparsifying unpromising edges."""

    n = distance_matrix.shape[0]
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)

    heuristics = (attraction * M) / potential_energy  # Newtonian part

    heuristics = heuristics + (1 / safe_distance_matrix) #combine inverse distance.

    # Normalization
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Sparsification: zero out edges with values below threshold (adaptive)
    threshold = np.mean(heuristics) * 0.5
    heuristics[heuristics < threshold] = 0.0

    return heuristics
```
