```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines Newtonian attraction with inverse distance.

    Favors shorter edges and edges between nodes with high centrality.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy
    inverse_distance = 1 / safe_distance_matrix
    heuristics = 0.5 * newtonian + 0.5 * inverse_distance
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    return heuristics
```
