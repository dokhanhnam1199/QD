```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Generates heuristic indicators for the Traveling Salesman Problem (TSP)
    based on a combination of distance and node degree considerations.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between nodes. distance_matrix[i][j] gives the distance
            between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            containing heuristic indicators for each edge. Higher values
            indicate a more promising edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Closer nodes are generally more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree Preference: Nodes with fewer close neighbors are more likely
    #    to be connected to relatively distant nodes in the optimal solution.
    #    This encourages exploration and prevents getting stuck in local optima.
    node_degrees = np.sum(inverse_distance, axis=1)  # Sum of inverse distances for each node
    degree_matrix = np.outer(node_degrees, node_degrees)  # Create a matrix of node degree products
    degree_factor = 1.0 / (degree_matrix + 1e-9)
    # 3. Combination of Inverse Distance and Node Degree
    heuristic_matrix = inverse_distance * degree_factor
    # Ensure no self-loops are preferred
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
