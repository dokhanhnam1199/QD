```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines Newtonian attraction, inverse distance, and sparsification for TSP."""

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian attraction
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Inverse distance
    inverse_distance = 1 / safe_distance_matrix

    # Combine
    heuristics = 0.6 * newtonian + 0.4 * inverse_distance

    # Sparsification: remove edges with very low heuristic values.
    threshold = np.mean(heuristics) * 0.2  # Dynamic threshold
    heuristics[heuristics < threshold] = 0

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    if max_heuristic - min_heuristic > 1e-9: #avoid division by zero
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)


    return heuristics
```
