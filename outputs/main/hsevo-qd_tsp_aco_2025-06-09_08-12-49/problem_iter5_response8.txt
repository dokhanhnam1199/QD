```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Enhanced heuristic: Combines gravitational attraction with degree centrality and sparsification."""

    n = distance_matrix.shape[0]
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)

    heuristics = (attraction * M) / potential_energy

    # Sparsification: zero out less promising edges
    threshold = np.percentile(heuristics, 20) # Only keep top 80% edges
    heuristics[heuristics < threshold] = 0

    # Normalize. Avoid normalizing if all values are 0.
    if np.max(heuristics) > 0:
        min_heuristic = np.min(heuristics[heuristics > 0]) if np.any(heuristics > 0) else 0
        max_heuristic = np.max(heuristics)
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        pass # heuristics are all 0 anyway.

    return heuristics
```
