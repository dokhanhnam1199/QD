```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines Newtonian attraction with inverse distance, sparsifying unpromising edges."""
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Combine with inverse distance
    inverse_distance = 1 / safe_distance_matrix
    combined = newtonian + inverse_distance

    # Normalize
    min_heuristic = np.min(combined)
    max_heuristic = np.max(combined)
    combined = (combined - min_heuristic) / (max_heuristic - min_heuristic)

    #Sparsify: zero out edges with promise below the mean
    mean_promise = np.mean(combined)
    combined[combined < mean_promise] = 0

    return combined
```
