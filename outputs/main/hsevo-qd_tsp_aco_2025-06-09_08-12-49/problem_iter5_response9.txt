```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines Newtonian attraction, node degree, and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    safe_distance_matrix = distance_matrix + epsilon

    # Newtonian Attraction
    attraction = 1 / (safe_distance_matrix**2)
    mass = np.sum(1 / safe_distance_matrix, axis=1)
    M = np.outer(mass, mass)
    potential_energy = safe_distance_matrix / np.mean(safe_distance_matrix)
    newtonian = (attraction * M) / potential_energy

    # Node Degree Consideration
    degree = np.sum(distance_matrix < np.mean(distance_matrix), axis=1)
    degree_matrix = np.outer(degree, degree)
    degree_factor = 1 / (degree_matrix + epsilon)

    # Combine Components
    heuristics = 0.7 * newtonian + 0.3 * degree_factor

    # Normalize
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Sparsification
    threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < threshold] = 0

    np.fill_diagonal(heuristics, 0)

    return heuristics
```
