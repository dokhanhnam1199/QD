```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and bin fullness for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_indices = bins_remain_cap >= item
    
    if np.any(fit_indices):
        remaining_capacity = bins_remain_cap[fit_indices] - item
        #Prioritize bins with smaller remaining capacity and fuller.
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / np.sum(bins_remain_cap)) / (remaining_capacity + 1e-9)
        
        #Normalize priorities to ensure proper selection
        priorities[fit_indices] = priorities[fit_indices] / np.sum(priorities[fit_indices])

    #Very low priority when items doesn't fit
    priorities[bins_remain_cap < item] = -1e9

    return priorities
```
