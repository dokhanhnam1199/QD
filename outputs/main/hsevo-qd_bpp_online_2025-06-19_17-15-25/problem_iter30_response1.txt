```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a multi-faceted approach: fit, fullness, item-size aware scaling,
    controlled randomness, and robust normalization with edge case handling.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # 1. Fullness Factor: Prioritize bins that are already relatively full.
        fullness = bins_remain_cap[fit_indices] / bins_remain_cap.max() if bins_remain_cap.max() > 0 else np.zeros_like(bins_remain_cap[fit_indices])

        # 2. Remaining Capacity Factor: Favor bins with smaller remaining capacity after packing.
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)  # Avoid division by zero

        # 3. Item-Size Aware Scaling: Adapt the priority based on the item's size relative to bin capacity.
        scale = item / bins_remain_cap[fit_indices].mean() if bins_remain_cap[fit_indices].size > 0 else 0.5  # Handle empty fit_indices, bin capacity = 0

        # 4. Combined Priority: Weighted sum of factors.  Adaptive weights can be added.
        combined_priority = 0.6 * fullness + 0.4 * remaining_cap_priority

        priorities[fit_indices] = combined_priority * (1 + scale)

        # 5. Controlled Randomness (Exploration):  Item-size dependent exploration.
        exploration_strength = min(0.1, item / bins_remain_cap.max() if bins_remain_cap.max() >0 else 0.05) # Scale to bin size
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    else:
        # No suitable bin found: return negative infinity to avoid selection
        priorities = np.full_like(priorities, -np.inf)  # Using -np.inf ensures it is always the least preferred.
        return priorities

    # 6. Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -np.inf

    # 7. Normalization
    if np.isinf(priorities).all():  # Handle the case where all priorities are -inf
      return np.zeros_like(priorities)
    
    max_priority = np.max(priorities[priorities != -np.inf])
    if max_priority != -np.inf and max_priority != 0:
      priorities[priorities != -np.inf] /= max_priority # Scale to [0,1]

    return priorities
```
