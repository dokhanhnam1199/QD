```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, fullness, remaining capacity, adaptive scaling, and controlled randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9)
        fullness_priority = fullness

        # Remaining capacity factor
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)

        # Combined priority
        combined_priority = fullness_priority + remaining_cap_priority

        # Adaptive scaling based on item size and remaining capacity
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        scaled_priority = combined_priority / scale
        priorities[fit_indices] = scaled_priority

        # Controlled randomness (exploration)
        exploration_strength = min(0.1, item)  # Smaller items get more exploration
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
