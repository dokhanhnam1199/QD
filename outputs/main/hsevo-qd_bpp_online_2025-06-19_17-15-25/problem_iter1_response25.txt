```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Encourage filling bins that can almost fit the item completely
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap < 1.2 * item)
    priorities[almost_fit] += 10  # Give a higher base priority to almost fitting bins

    # Give bins with capacity just greater than the item a very high priority
    just_fit = (bins_remain_cap >= item)
    just_fit_margin = bins_remain_cap[just_fit] - item
    priorities[just_fit] += np.exp(-10 * just_fit_margin) # higher priority if margin is smaller
    
    # Penalize bins where item doesn't fit at all
    does_not_fit = (bins_remain_cap < item)
    priorities[does_not_fit] -= 100  # Significant penalty

    # Favor bins with smaller remaining capacity relative to bin size if the item can fit. Heuristically penalize large empty bins.
    can_fit = (bins_remain_cap >= item)
    remaining_ratio = bins_remain_cap[can_fit] / np.max(bins_remain_cap) if np.any(can_fit) else np.array([]) # Normalize to largest existing bin to avoid favoring small bins alone.
    if remaining_ratio.size > 0:
        priorities[can_fit] += -1 * remaining_ratio #Smaller ratio means less "empty", higher prioirty.

    return priorities
```
