```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, adaptively weighted."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Calculate fullness: higher value for fuller bins
        fullness = bins_remain_cap[fit_indices] / np.max(bins_remain_cap)  # Normalize fullness
        fullness_priority = fullness

        # Calculate remaining capacity priority: prefer smaller remaining space
        remaining_priority = 1 / (remaining_capacity[fit_indices] + 0.01)  # Avoid division by zero

        # Combine fullness and remaining capacity, with adaptive weights
        alpha = 0.7  # Fullness weight
        beta = 0.3  # Remaining capacity weight
        combined_priority = alpha * fullness_priority + beta * remaining_priority

        priorities[fit_indices] = combined_priority

        # Introduce guided randomness, scaling with item size and remaining capacity variance
        exploration_factor = 0.001 * item * np.std(bins_remain_cap[fit_indices])
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
