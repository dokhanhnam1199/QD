```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins for item placement, balancing fit and fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Check if item fits in bin.
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0
    
    if np.any(fit_indices):
        # Prioritize bins with smaller remaining capacity after placement.
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)
        
        # Prioritize fuller bins. Add bonus to bins with small remain cap.
        fullness_factor = bins_remain_cap[fit_indices] / np.max(bins_remain_cap)
        priorities[fit_indices] += fullness_factor

    # Assign large negative value to bins where item does not fit.
    priorities[remaining_capacity < 0] = -1e9
    
    # Normalize priorities.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)

    return priorities
```
