```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors:
    - Fit: Prioritizes bins where the item fits.
    - Remaining Capacity: Prioritizes bins with smaller remaining capacity after fitting.
    - Fullness: Prioritizes bins that are already relatively full.
    - Exploration: Adds a small random factor for exploration.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit score: Higher if the item fits
        fit_score = np.zeros_like(bins_remain_cap, dtype=float)
        fit_score[fit_indices] = 1.0

        # Remaining Capacity Score: Lower remaining capacity is better.  Scale it.
        remaining_cap_score = np.zeros_like(bins_remain_cap, dtype=float)
        remaining_cap_score[fit_indices] = 1.0 - (remaining_capacity[fit_indices] / np.max(bins_remain_cap)) # Scale to [0, 1]

        # Fullness Score: Higher if the bin is already relatively full. Scale it.
        fullness_score = bins_remain_cap / np.max(bins_remain_cap) # Scale to [0, 1]

        fullness_score[remaining_capacity < 0] = 0  # Ensure only valid bins have fullness score
        
        # Combine the scores: Adjust weights based on what you find works best
        combined_score = (
            1.0 * fit_score[fit_indices] + # Ensure it fits
            2.0 * remaining_cap_score[fit_indices] +  # Minimize remaining capacity
            0.5 * fullness_score[fit_indices]   # Prefer fuller bins (but less important)
        )

        priorities[fit_indices] = combined_score

        # Exploration factor: Add some randomness
        exploration_factor = 0.05
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit (ensure they are very low priority)
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)


    return priorities
```
