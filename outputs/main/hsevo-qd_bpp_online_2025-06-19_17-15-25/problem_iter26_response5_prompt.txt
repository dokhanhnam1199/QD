{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                fit_priority_scale: float = 4.456751880260094,\n                no_fit_priority: float = -6273020216.245163,\n                avoid_zero_division: float = 9.372769307564907e-09,\n                priority_initial_value: float = 0.7634367741311676,\n                priority_normalization_threshold_positive: float = 0.8300987155255392,\n                priority_normalization_threshold_negative: float = -0.7175872942225637) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_priority_scale: Scaling factor for the priority of bins where the item fits.\n        no_fit_priority: Priority given to bins where the item doesn't fit.\n        avoid_zero_division: Small value to avoid division by zero.\n        priority_initial_value: Initial value for the priority array.\n        priority_normalization_threshold_positive: Threshold for positive priority normalization.\n        priority_normalization_threshold_negative: Threshold for negative priority normalization.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, priority_initial_value, dtype=float)\n    \n    # Calculate remaining capacity after adding the item.\n    remaining_capacity = bins_remain_cap - item\n    \n    # Give high priority to bins where the item fits and leaves minimal waste.\n    fit_indices = remaining_capacity >= 0\n    if np.any(fit_indices):\n        priorities[fit_indices] = fit_priority_scale / (remaining_capacity[fit_indices] + avoid_zero_division)  # Avoid division by zero\n    \n    # Give a very low priority (or negative) to bins where the item doesn't fit.\n    priorities[remaining_capacity < 0] = no_fit_priority  # Large negative value\n        \n    # Normalize the priorities\n    if np.sum(priorities) > priority_normalization_threshold_positive:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < priority_normalization_threshold_negative:\n      priorities = priorities - np.min(priorities)\n      priorities = priorities / np.sum(priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates fullness, remaining capacity, adaptive scaling based on item size, and a refined exploration strategy using randomness, along with normalization. The worst heuristic only calculates a ratio of item size to remaining capacity and takes the negative logarithm. (2nd best) vs (second worst), the second worst only use log ratios. Comparing (1st) vs (2nd), we see the code is identical, implying their performance is extremely close, maybe identical. (3rd) vs (4th), these are also identical, suggesting the ranking might be based on subtle differences not apparent in the code itself or is incorrect. Comparing (second worst) vs (worst), both use log ratios, but the worst lacks any handling of edge cases or normalization. Comparing (1st) vs (11th), the 1st one uses fullness factor, Remaining capacity factor, combined priority, Adaptive scaling based on item size and Refined exploration strategy. The 11th one just calculates the remaining capacity and applies a simple priority based on it. Overall: The better heuristics prioritize a combination of factors like fullness, remaining capacity, and adaptive scaling, use a bit of randomness for exploration and normalization of priorities, while penalizing invalid placements. The weaker heuristics rely on simpler metrics or fail to normalize, potentially leading to suboptimal solutions.\n- \nOkay, let's refine \"Current Self-Reflection\" to be more effective in guiding heuristic design.\n\n*   **Keywords:** Multi-factor, adaptive, robust, experimental.\n*   **Advice:** Focus on creating heuristics that are adaptable to specific problem instance characteristics. Experiment to find the best parameters.\n*   **Avoid:** Oversimplification and over-complication. Avoid prematurely fixing parameters.\n*   **Explanation:** Prioritize a balanced approach to heuristic design that considers fit, fullness, randomness, normalization, and penalty. Make your heuristics more dynamic.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}