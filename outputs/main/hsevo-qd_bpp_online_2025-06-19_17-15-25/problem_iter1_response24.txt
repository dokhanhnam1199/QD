```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space,
    while also discouraging very tight fits (to allow for future items). It also adds a small
    bonus to bins that are nearly full, encouraging their closure.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin.
    wasted_space = bins_remain_cap - item

    # Give a high priority to bins that can fit the item.
    fit_indices = wasted_space >= 0
    priorities[fit_indices] = (bins_remain_cap[fit_indices] * item) / (wasted_space[fit_indices] + 0.000001)  # Avoid division by zero. Also, maximize the product of bins_remain_cap and item, but reduce it by the wasted space.


    # Penalize very tight fits (wasted_space close to zero).
    tight_fit_indices = (wasted_space > 0) & (wasted_space < 0.1)
    priorities[tight_fit_indices] *= 0.5  # Reduce priority by half if tight fit


    # Give a bonus to bins that are nearly full (e.g., remaining capacity < 10% of bin size).
    nearly_full_indices = bins_remain_cap < (bins_remain_cap.max() * 0.1) # relative scale
    priorities[nearly_full_indices] += 1

    # If no bins can fit the item, assign some minimal priority based on how CLOSE they are to fitting.
    no_fit_indices = wasted_space < 0
    priorities[no_fit_indices] = -np.abs(wasted_space[no_fit_indices]) # prefer bins closer to fitting.
    return priorities
```
