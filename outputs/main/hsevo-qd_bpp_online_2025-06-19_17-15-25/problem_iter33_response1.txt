```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, balance, and exploration with adaptive scaling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Waste Factor: Prioritize bins with minimal remaining capacity after packing.
        waste = remaining_capacity[fit_indices]
        waste_priority = 1 / (waste + 0.01)  # Smaller waste is better

        # Balance Factor: Encourages even distribution by penalizing bins that are already too full
        fullness = 1 - (bins_remain_cap[fit_indices] / bins_remain_cap.max())  # Bins nearly full have high fullness
        balance_priority = 1 - fullness # Lower fullness (less full) bins get higher priority

        # Adaptive Scaling: dynamically adjust importance based on item size and bin availability.
        scale = item / (np.mean(bins_remain_cap[fit_indices]) + 1e-9) #avoid divide by zero

        # Combined Priority: weighted sum of waste, balance, and adaptive scaling.
        combined_priority = (waste_priority + balance_priority) * scale

        priorities[fit_indices] = combined_priority

        # Exploration: Add controlled randomness to escape local optima.
        exploration_strength = min(0.05, item/2) # Reduced exploration strength
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities  # No suitable bin

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalization with robust handling for empty or negative sums
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)


    return priorities
```
