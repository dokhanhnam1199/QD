```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, remaining capacity, item size, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize bins that are already relatively full
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9)
        fullness_priority = fullness

        # Remaining capacity factor: Prefer bins with tighter fits
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)

        # Combine fullness and remaining capacity
        combined_priority = fullness_priority + remaining_cap_priority

        # Adaptive scaling based on item size relative to average remaining capacity
        scale = np.mean(bins_remain_cap[fit_indices])
        item_size_priority = item / (scale + 1e-9)

        # Combine all priorities
        alpha, beta, gamma = 0.5, 0.3, 0.2
        priorities[fit_indices] = alpha * combined_priority + beta * item_size_priority

        # Exploration: Item-size aware decaying randomness
        exploration_strength = min(0.1, item)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
