```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of remaining capacity, item fit,
    normalized fullness, and adaptive exploration. Aims to improve upon v1."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Calculate fullness (normalized remaining capacity)
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        fullness = np.clip(fullness, 0, 1)  # Ensure fullness is within [0, 1]

        # Priority based on fullness, favoring bins that are already somewhat full
        priorities[fit_indices] += fullness

        # Fit score: Higher if the item fits well (less remaining space)
        fit_score = (item / bins_remain_cap[fit_indices])
        priorities[fit_indices] += fit_score

        # Adaptive scaling based on the average item size and bin capacity
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        adaptive_scale = item / scale
        priorities[fit_indices] += adaptive_scale

        # Exploration factor, adaptively scaled based on the number of available bins
        exploration_factor = min(0.1, 0.05 / (np.sum(fit_indices) + 1e-9))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where the item doesn't fit harshly
    priorities[remaining_capacity < 0] = -1e9

    # If no bins can accept the item return equal priority
    if np.all(remaining_capacity < 0):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)
    else:
        # Normalize priorities to ensure they sum to 1 (if possible)
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
        elif np.sum(priorities) < 0:
            priorities = priorities - np.min(priorities)
            priorities = priorities / np.sum(priorities)

    return priorities
```
