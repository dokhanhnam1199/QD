```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fit, fullness, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9) # Avoid divide by zero

        # Remaining capacity factor
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01) # small remaining get high priority

        # Combine fullness and remaining capacity.
        combined_priority = fullness + remaining_cap_priority

        # Adaptive scaling based on item size and remaining capacity
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = combined_priority / scale

        # Exploration strategy: item-size aware randomness
        exploration_strength = min(0.1, item)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities
    

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
