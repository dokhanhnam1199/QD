```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, adaptive scaling, and exploration.
    Combines best features from v0 and adaptively scales randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness: 1 - (remaining capacity / original capacity)
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        fullness = np.clip(fullness, 0, 1)
        priorities[fit_indices] += fullness

        # Fit score: Item size relative to bin capacity
        fit_score = item / bins_remain_cap[fit_indices]
        priorities[fit_indices] += fit_score

        # Adaptive scaling
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        adaptive_scale = item / scale
        priorities[fit_indices] += adaptive_scale

        # Adaptive exploration:  Scaled by available bins & item size
        exploration_factor = min(0.1, 0.05 / (np.sum(fit_indices) + 1e-9)) * item / np.mean(bins_remain_cap)
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Handle cases where no bins fit the item
    if np.all(remaining_capacity < 0):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)
    else:
        # Normalize to ensure sum is 1 or handles negative values
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
        elif np.sum(priorities) < 0:
            priorities = priorities - np.min(priorities)
            priorities = priorities / np.sum(priorities)

    return priorities
```
