```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness, remaining capacity, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        fullness = np.clip(fullness, 0, 1)
        priorities[fit_indices] += fullness

        # Fit score:
        fit_score = item / bins_remain_cap[fit_indices]
        priorities[fit_indices] += fit_score

        # Adaptive scaling: item size relative to bin capacity
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        adaptive_scale = item / scale
        priorities[fit_indices] += adaptive_scale

        # Refined exploration: smaller items get more exploration
        exploration_strength = min(0.1, item)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where the item doesn't fit harshly
    priorities[remaining_capacity < 0] = -1e9

    # Handle edge case where no bins can accept the item
    if np.all(remaining_capacity < 0):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)
    else:
        # Normalize priorities
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
        elif np.sum(priorities) < 0:
            min_priority = np.min(priorities)
            priorities = priorities - min_priority
            priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
