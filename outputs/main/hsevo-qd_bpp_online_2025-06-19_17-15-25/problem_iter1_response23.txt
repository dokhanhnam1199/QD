```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of remaining capacity and the fit ratio to
    prioritize bins. A better fit (smaller waste) leads to higher priority,
    and bins with sufficient remaining capacity are also prioritized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a negative infinite priority if bin cannot contain the item
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining capacity AFTER adding the item
    remaining_after = bins_remain_cap - item

    # Fit ratio: how much of the bin's remaining capacity is used by the item?
    fit_ratio = item / bins_remain_cap

    # Prioritize bins where the item fits well (high fit_ratio, close to 1, but never greater than 1)
    # and also prioritize bins with more capacity to accomodate potential future items (remaining_after)
    # Adjust the weights to influence the relative importance of each factor.

    # Option 1: Log scale to balance the effects of large and small values
    # priorities[bins_remain_cap >= item] = np.log(fit_ratio[bins_remain_cap >= item]) + np.log(remaining_after[bins_remain_cap >= item] + 1e-9) # add small num to avoid log(0)
    # Option 2: Linear scaling
    capacity_weight = 0.5
    fit_weight = 0.5
    priorities[bins_remain_cap >= item] = fit_weight * (1 - np.abs(1 - fit_ratio[bins_remain_cap >= item])) + capacity_weight * remaining_after[bins_remain_cap >= item] / np.max(bins_remain_cap)  # Normalize remaining capacity

    # Option 3: hybrid approach with penalty for near-full bins (risk of leaving little room for subsequent items)
    # waste_ratio = remaining_after / bins_remain_cap
    # priorities[bins_remain_cap >= item] = fit_ratio[bins_remain_cap >= item] - 0.1 * (1 - waste_ratio[bins_remain_cap >= item])
    return priorities
```
