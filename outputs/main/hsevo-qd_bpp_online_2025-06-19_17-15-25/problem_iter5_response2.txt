```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and remaining capacity, adaptively."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit check & waste minimization
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Prioritize bins with smaller waste
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Adaptive element: Boost priority if bin is already relatively full
        fullness_factor = (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))
        priorities[fit_indices] += fullness_factor * 0.1 #Scale down, so not overshadow the waste.
        
    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
