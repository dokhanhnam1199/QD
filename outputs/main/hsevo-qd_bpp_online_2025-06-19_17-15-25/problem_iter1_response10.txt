```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Give high priority to bins that can fit the item
    fit_mask = new_remain_cap >= 0
    
    # Prioritize bins that fit the item best (smallest remaining space)
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item
    
    # Avoid bins that cause high waste.
    waste_threshold = 0.1  # Adjust this threshold as needed
    high_waste_mask = (new_remain_cap > 0) & (new_remain_cap / bins_remain_cap > waste_threshold)
    priorities[high_waste_mask] = -1e9 # give super low priority to avoid such assignments

    
    # Give low priority to bins that cannot fit the item, to prevent unnecessary sorting
    priorities[~fit_mask] = -1e6
    
    return priorities
```
