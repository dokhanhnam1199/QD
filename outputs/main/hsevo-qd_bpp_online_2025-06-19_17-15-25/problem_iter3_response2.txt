```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are already relatively full, aiming to consolidate items
    and free up bins for larger, later items. It also incorporates a small random factor to break ties
    and explore the solution space more broadly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item

    # Give high priority to bins where the item fits and leaves minimal waste,
    # but also considers how full the bin already is.  A bin that's almost full
    # gets even *more* priority if the item fits.
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins that are fuller (smaller remaining capacity), but avoid division by zero.
        # Also, add a penalty related to the waste.
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / (np.sum(bins_remain_cap) + 1e-9)) + (1 / (remaining_capacity[fit_indices] + 1e-9))


    # Give a very low priority (or negative) to bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9  # Large negative value

    # Add a small amount of random noise to break ties and encourage exploration.
    priorities += np.random.normal(0, 1e-6, size=priorities.shape)

    # Normalize the priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
      priorities = priorities - np.min(priorities)
      priorities = priorities / np.sum(priorities)

    return priorities
```
