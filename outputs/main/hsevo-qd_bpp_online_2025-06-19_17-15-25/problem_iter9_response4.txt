```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, emphasizing fit, fullness,
    adaptive scaling, and strategic exploration. Aims to improve bin utilization
    and reduce the number of bins used.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Calculate the fill ratio for bins where the item fits. Higher fill ratio is better.
        fill_ratio = item / bins_remain_cap[fit_indices]
        
        # Prioritize bins that result in higher fill ratios.
        priorities[fit_indices] = fill_ratio

        # Adaptive scaling based on the standard deviation of remaining capacities.
        # Bins closer to the "average" are penalized slightly to encourage use of both very full and almost full bins
        scale = np.std(bins_remain_cap[fit_indices]) + 1e-9 # Avoid division by zero
        scaled_remaining = np.abs(bins_remain_cap[fit_indices] - np.mean(bins_remain_cap[fit_indices])) / scale
        priorities[fit_indices] /= (scaled_remaining + 1)

        # Strategic exploration: Introduce randomness, but reduce it as bins fill up
        exploration_factor = np.exp(-np.mean(bins_remain_cap) / np.max(bins_remain_cap)) # Scale randomness according to average bin emptiness
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.1 * exploration_factor

        # Penalize bins with very little remaining capacity *after* placing the item.  This can help the algorithm choose bins that will be more likely to be filled by future small items.
        very_small_remaining = remaining_capacity[fit_indices] < (np.mean(bins_remain_cap) / 5) # if remaining capacity is less than 20% of average
        priorities[fit_indices][very_small_remaining] /= 2

    # Extremely low priority for bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize only if positive priorities exist after the above transformations
    if np.any(priorities > 0):
        priorities[priorities < 0] = 0
        priorities = priorities / np.sum(priorities)
    elif np.any(priorities < 0):
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    else:
        #All priorities are effectively zero, which can happen when no bins can fit. Return uniform distribution
        priorities = np.ones_like(priorities) / len(priorities)

    return priorities
```
