```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fit, fullness, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: How full would the bin be *after* placing the item?
        post_fill_levels = bins_remain_cap[fit_indices] - item
        fullness = 1 - (post_fill_levels / bins_remain_cap[fit_indices].max())
        fullness = np.clip(fullness, 0, 1) # Ensure it's between 0 and 1


        # Remaining capacity factor: Prioritize bins with *less* remaining capacity *after* placing the item.
        remaining_cap_priority = 1 / (post_fill_levels + 0.01) # small remaining get high priority

        # Combine fullness and remaining capacity. More weight on fullness.
        combined_priority = 0.7 * fullness + 0.3 * remaining_cap_priority # Adjusted weights

        # Adaptive scaling based on item size and remaining capacity. Scale based on variance
        scale = np.var(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = combined_priority / (scale + 1e-9)  # Avoid divide by zero

        # Exploration strategy: item-size aware randomness, scaled to variance of bin capacities
        exploration_strength = min(0.05, item) * np.std(bins_remain_cap)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

        # Encourage bins that are close to full.
        near_full_bonus = np.where(post_fill_levels < 0.1 * bins_remain_cap[fit_indices].max(), 0.2, 0)
        priorities[fit_indices] += near_full_bonus

    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities
    

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases. Using softmax to create a probability distribution
    exp_priorities = np.exp(priorities - np.max(priorities))  # Subtract max for numerical stability
    priorities = exp_priorities / np.sum(exp_priorities) if np.sum(exp_priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
