```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, occupancy, item size, and exploration with adaptive scaling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit priority: encourage tight fit.
        fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Occupancy priority: consolidate existing packings.
        occupancy_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9)

        # Item size priority: Larger items favor almost full bins. Adaptive scaling
        scale = np.mean(bins_remain_cap[fit_indices])
        item_size_priority = (item / (scale + 1e-9))

        # Combine priorities with weights.
        alpha, beta, gamma = 0.6, 0.3, 0.1
        priorities[fit_indices] = alpha * fit_priority + beta * occupancy_priority + gamma * item_size_priority

        # Exploration: Add noise only to promising bins.
        exploration_noise = np.random.rand(np.sum(fit_indices)) * 0.01
        priorities[fit_indices] += exploration_noise

    # Penalize bins where item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
