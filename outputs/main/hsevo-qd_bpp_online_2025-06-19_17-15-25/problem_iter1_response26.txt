```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics:

    1.  **Almost Full Bins:** Prioritizes bins that are already relatively full (but can still accommodate the item) to consolidate existing items.
    2.  **Avoid Fragmentation:** Deters placing the item in bins that would result in significant wasted space (large residual capacity).
    3.  **Smallest Possible Fit:** Favors the bins that will lead to the least amount of wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No valid bins, all priorities remain 0

    # Almost Full Bin Prioritization
    almost_full_threshold = 0.2  # Adjust as needed, defines when a bin is "almost full"

    almost_full_bins = (bins_remain_cap >= item) & (bins_remain_cap <= (item + almost_full_threshold))
    priorities[almost_full_bins] += 5.0  # Higher priority for almost full bins

    # Wasted Space Penalty (Avoid Fragmentation)
    wasted_space = bins_remain_cap - item
    large_wasted_space_penalty = -1.0 * np.exp(wasted_space / item) #Penalize large wastes relative to item size

    priorities += large_wasted_space_penalty

    # Smallest Possible Fit bonus
    remaining_space_after_fit = bins_remain_cap - item
    fit_indices = remaining_space_after_fit >=0

    if np.any(fit_indices):
      smallest_fit_bonus = -remaining_space_after_fit
      priorities[fit_indices] += smallest_fit_bonus[fit_indices]

    # Invalidate bins that cannot accommodate the item.
    priorities[~valid_bins] = -np.inf  # Mark invalid bins with negative infinity

    return priorities
```
