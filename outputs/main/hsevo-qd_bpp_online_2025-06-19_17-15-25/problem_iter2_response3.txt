```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, feasibility check, and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)
        priorities[fit_indices] = priorities[fit_indices] / np.sum(priorities[fit_indices]) # Normalize only fitted bins

    priorities[remaining_capacity < 0] = -1e9

    if np.sum(priorities) > 0:
        pass # Already normalized fitted bins
    elif np.sum(priorities) < 0: # If nothing fits
        priorities = priorities - np.min(priorities)  # Shift to positive
        priorities = priorities / np.sum(priorities) # Normalize

    return priorities
```
