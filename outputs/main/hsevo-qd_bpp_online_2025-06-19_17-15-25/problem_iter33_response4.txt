```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, a bin-usage factor, exploration, and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Waste Factor (lower is better)
        waste = remaining_capacity[fit_indices]
        waste_priority = 1 / (waste + 0.01)

        # Bin Usage Factor (prefer bins that are already somewhat full)
        bin_usage = 1 - (bins_remain_cap[fit_indices] / bins_remain_cap.max())
        bin_usage_priority = bin_usage

        # Combined Priority
        combined_priority = waste_priority + bin_usage_priority

        # Adaptive Scaling based on item size and avg bin capacity
        scale = np.mean(bins_remain_cap) + item
        priorities[fit_indices] = combined_priority / scale

        # Exploration: smaller items get slightly larger exploration bonuses.
        exploration_strength = min(0.05, 0.1/ (item + 0.01)) # Inverse relationship
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Improved Normalization
    if np.any(priorities > 0):
        priorities = priorities / np.sum(priorities[priorities > 0])  # Normalize only positive values
    elif np.any(priorities < 0) and not np.all(priorities < 0): # there are some valid bins but all priorities are negative.
        min_priority = np.min(priorities[priorities > -1e9])
        priorities[priorities > -1e9] = priorities[priorities > -1e9] - min_priority
        priorities = priorities / np.sum(priorities[priorities > 0]) if np.any(priorities > 0) else np.zeros_like(priorities)
    else:
         priorities = np.zeros_like(priorities)
    return priorities
```
