```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, adaptively adjusting weights.
    Includes strategies for both fitting and non-fitting scenarios, and manages exploration/exploitation balance.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    n_bins = len(bins_remain_cap)
    avg_capacity = np.mean(bins_remain_cap) if n_bins > 0 else 0

    # Fit Scenario: prioritize based on remaining capacity, bin fullness, and a capacity ratio.
    if np.any(fit_indices):
        # Focus on fullness (lower remaining capacity is better)
        fullness_priority = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])

        # Capacity ratio: a measure of how well the item fits relative to average bin capacity
        capacity_ratio = item / avg_capacity if avg_capacity > 0 else 0

        # Combine the priorities with adaptive weights. The weights could be tuned or learned.
        # For now, let's prioritize fullness with secondary consideration for capacity fit.

        priorities[fit_indices] = (0.7 * fullness_priority + 0.3 * capacity_ratio)

        # Add a small exploration component.
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.005  # Reduced exploration

    # Non-Fit Scenario: Encourage opening new bins only if no suitable bins exist
    # Penalize partially full bins more than nearly empty bins.

    if not np.any(fit_indices):
       # Prioritize bins that are nearly empty as a last resort (to encourage new bin usage).
       # Give a slight preference to bins with more remaining capacity when no fit is possible

        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)
        priorities = priorities * 0.001 #very small value so we don't pick these unless necessary

        # Penalize existing bins heavily, particularly those which are relatively full
        # Since we're penalizing, use a negative value. We want to *avoid* these bins
        # These are the bins that are likely to be problematic later

        fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        priorities = priorities - (fullness * 10)

    # Normalization with a check for all negative values
    if np.any(priorities > 0):
        priorities = priorities / np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0):
        min_val = np.min(priorities)
        priorities = priorities - min_val # shift to non-negative
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.full_like(priorities, 1/len(priorities))
    else:
        priorities = np.ones_like(priorities) / len(priorities) # all bins equal

    return priorities
```
