```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, fullness, waste, item size, and controlled randomness.

    This version enhances priority_v1 by focusing on minimizing waste, adapting
    the exploration strength to item size and bin capacity, and handling normalization
    more robustly. It avoids division by zero and handles edge cases explicitly.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor (Encourage filling bins)
        fullness = bins_remain_cap[fit_indices] / bins_remain_cap.max() if bins_remain_cap.max() > 0 else np.zeros_like(bins_remain_cap[fit_indices])  # Avoid division by zero

        # Waste factor (Minimize wasted space)
        waste = remaining_capacity[fit_indices]
        waste_priority = 1.0 / (waste + 0.01)  # Higher priority for smaller waste

        # Item size factor (Prefer bins closer to item size)
        item_size_ratio = item / bins_remain_cap[fit_indices]
        item_size_priority = np.exp(-0.5 * (item_size_ratio - 1)**2) #Gaussian-like. Prefer bins that are close to the item size.

        # Combined priority
        combined_priority = fullness + waste_priority + item_size_priority

        # Adaptive scaling (accounts for item size and remaining capacity)
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = combined_priority / (scale + 1e-9)  # Avoid division by zero

        # Controlled randomness (exploration)
        exploration_strength = min(0.05, item / bins_remain_cap.max() if bins_remain_cap.max() > 0 else 0.05)  # Adjust exploration based on item and bin size
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities
    

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Robust normalization (Handles all-zero priorities)
    if np.max(priorities) - np.min(priorities) > 1e-9:  # Avoid division by zero for constant arrays
        priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))
    else:
        priorities = np.ones_like(priorities) / len(priorities) if len(priorities) > 0 else priorities # Assign equal priority if all values are same

    return priorities
```
