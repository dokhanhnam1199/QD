```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces a combination of best-fit and worst-fit principles,
    along with a penalty for creating bins with very small remaining capacity
    (to encourage more balanced packing). It also attempts to adapt the priority
    based on the number of available bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-fit component: Higher priority for bins with minimal waste
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Worst-fit component: Slightly prioritize bins with more space if we have many bins
        # This encourages using up bins when there are plenty available.
        num_bins = len(bins_remain_cap)
        if num_bins > 5: # Adjust threshold as needed
            priorities[fit_indices] += bins_remain_cap[fit_indices] / np.max(bins_remain_cap) * 0.1
            
        # Penalty for small remaining capacity: Avoid creating very small fragments.
        small_capacity_indices = (remaining_capacity > 0) & (remaining_capacity < 0.1)  #Adjust range as needed
        priorities[small_capacity_indices] -= 0.5 # or some other appropriate penalty

    # Large negative priority for bins that can't fit the item
    priorities[remaining_capacity < 0] = -1e9

    # Normalize the priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
