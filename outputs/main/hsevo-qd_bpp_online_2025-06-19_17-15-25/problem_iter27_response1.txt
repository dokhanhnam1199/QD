```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, fullness, remaining capacity, item size, and adaptive exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize fuller bins
        fullness = bins_remain_cap[fit_indices] / bins_remain_cap.max() if bins_remain_cap.max() > 0 else np.zeros_like(bins_remain_cap[fit_indices])
        fullness_priority = fullness

        # Remaining capacity factor: Smaller remaining capacity gets higher priority. Add a small constant to avoid inf.
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.001)

        # Item size factor: Favor bins that the item fills up well
        item_fit_priority = (item / bins_remain_cap[fit_indices])

        # Combine the factors
        combined_priority = fullness_priority + remaining_cap_priority + item_fit_priority

        # Adaptive scaling: Adjust based on the mean remaining capacity.
        scale = np.mean(bins_remain_cap[fit_indices]) if len(bins_remain_cap[fit_indices]) > 0 else 1
        priorities[fit_indices] = combined_priority / (scale + 0.1) # avoid division by zero

        # Adaptive Exploration: Adjust exploration strength based on item and bin sizes
        exploration_strength = min(0.1, item / np.mean(bins_remain_cap)) if np.mean(bins_remain_cap) >0 else 0.1 # if bins are empty, set exploration strength to max value
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases:
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.full_like(priorities, 1/len(priorities))


    return priorities
```
