```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including fit, fullness,
    remaining capacity ratio, and exploration, with adaptive scaling and normalization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit score: Higher if the item fits
        priorities[fit_indices] += 1.0

        # Fullness score: Higher if the bin is already relatively full
        fullness_score = (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))
        priorities[fit_indices] += (1 - fullness_score)

        # Remaining Capacity Ratio: Prefer bins where the item utilizes the most space
        capacity_ratio = item / bins_remain_cap[fit_indices]
        priorities[fit_indices] += capacity_ratio

        # Adaptive Scaling: Scale the priorities based on the item size and bin capacities
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] *= (bins_remain_cap[fit_indices] / scale)

        # Exploration: Add a small amount of randomness to encourage exploration
        exploration_factor = min(0.05, 0.005 * np.sum(fit_indices))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize the priorities to be between 0 and 1
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    else:
        # All priorities are zero.  Assign a uniform small priority to available bins to avoid div by zero and allow for a random choice.
        fit_count = np.sum(fit_indices)
        if fit_count > 0:
          priorities[fit_indices] = 1 / fit_count

    return priorities
```
