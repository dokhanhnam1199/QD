```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considers the "almost full" and "avoid fragmentation" principles.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Prioritize bins that can fit the item. Give a default priority of 0 if not possible.
    fit_mask = bins_remain_cap >= item
    
    if not np.any(fit_mask): # if no bin can fit, return 0.
        return priorities
    
    
    # 2. "Almost Full" bonus: Bins that have capacity close to the item's size get a boost.
    almost_full_bonus = np.exp(-np.abs(bins_remain_cap - item) / (0.1 * item)) * fit_mask # Gaussian shape
    

    # 3. "Avoid Fragmentation" penalty: Bins with very large remaining capacity get a penalty.
    #    This encourages filling bins that are already partially full, rather than creating many almost empty bins.
    fragmentation_penalty = (1 - np.exp(-bins_remain_cap / (2 * item)))* fit_mask #Sigmoid type
    
    priorities = (almost_full_bonus - fragmentation_penalty) * fit_mask

    #4. Normalize Priorities

    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)
    return priorities
```
