```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities to a small value to avoid division by zero or log of zero issues.
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9
    
    # Calculate feasible bins, that is bins that can accept the current item.
    feasible_bins = bins_remain_cap >= item
    
    # Give zero priority if no bins can accept this item. This handles cases where item does not fit in any existing bin.
    if not np.any(feasible_bins):
        return priorities

    # Give high priority to bins where the item fills a significant portion of the remaining capacity.
    # We use a ratio and add a logarithmic term to penalize using bins that are much larger than the item.

    fill_ratios = item / bins_remain_cap[feasible_bins]  # Ratio of item size to bin capacity
    # Use a logarithmic term to penalize bins where item is small
    log_penalty = np.log(bins_remain_cap[feasible_bins]) # Larger bins have larger penalty.

    # Combine fill ratio and log penalty. Larger ratio is better and larger bin is worse.
    priorities[feasible_bins] = fill_ratios - 0.1 * log_penalty # Adjusted priority function

    # Give very high priority to bins where item fits almost perfectly. To force algorithm to use these bins first.
    almost_full = np.logical_and(feasible_bins, (bins_remain_cap - item) <= 0.1) # Check bins almost perfectly filled.
    priorities[almost_full] += 100 # Add constant to bins that fit perfectly.

    return priorities
```
