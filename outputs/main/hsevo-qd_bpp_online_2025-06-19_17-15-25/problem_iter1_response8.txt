```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small negative value to avoid favoring bins that can't fit the item
    priorities = np.full_like(bins_remain_cap, -1e9)

    # Identify bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins): # Only consider valid bins, rest are very low priority.

        # Calculate the waste if the item is placed in each valid bin
        waste = bins_remain_cap[valid_bins] - item

        # Prioritize bins with less waste (First-Fit Decreasing heuristic inspired)
        # and also consider bins that are relatively full (avoid creating too many almost-empty bins)

        #Normalize waste for stable priority scores
        normalized_waste = waste / bins_remain_cap[valid_bins]
        
        priorities[valid_bins] = (1 - normalized_waste) + (bins_remain_cap[valid_bins] / np.sum(bins_remain_cap)) #Avoid overfitting, make sure to consider total cap

        # Apply a small bonus for bins that are almost full, to encourage filling them
        almost_full = (bins_remain_cap[valid_bins] > item) & (bins_remain_cap[valid_bins] <= (item * 1.25))  # A magic number 1.25. Can be tuned.
        priorities[valid_bins][almost_full] += 0.1
    

    return priorities
```
