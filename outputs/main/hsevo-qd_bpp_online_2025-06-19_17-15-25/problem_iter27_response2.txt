```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a dynamic combination of factors, adaptive scaling, and robust exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize bins that are already relatively full
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9) # Avoid division by zero
        fullness_priority = fullness

        # Remaining capacity factor: Prefer bins with tighter fits but avoid nearly full bins
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01) # Avoid division by zero

        # Dynamic combination of fullness and remaining capacity based on item size
        item_size_ratio = item / bins_remain_cap.mean() if bins_remain_cap.mean() > 0 else 0 #Item size to the average bin size
        alpha = np.clip(item_size_ratio, 0.2, 0.8)  # Adjust the alpha range
        combined_priority = alpha * fullness_priority + (1 - alpha) * remaining_cap_priority

        # Adaptive scaling based on the standard deviation of remaining capacities
        scale = np.std(bins_remain_cap[fit_indices]) + 0.1 #Standard Deviation Based Scaling
        priorities[fit_indices] = combined_priority / (scale + 0.01)  # Avoid division by zero
        
        # Refined exploration strategy: Item-size aware and decaying randomness
        exploration_strength = min(0.15, item * (1-item_size_ratio))  #Smaller items into emptier bins get more exploration
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    total_priority = np.sum(priorities)
    if total_priority > 0:
        priorities = priorities / total_priority
    elif total_priority < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        total_priority = np.sum(priorities) #Recalculate after shift
        if total_priority > 0:
            priorities = priorities / total_priority
        else:
            priorities = np.zeros_like(priorities)  # Handle the case where all priorities are very negative

    return priorities
```
