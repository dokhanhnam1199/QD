```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of remaining capacity, fullness, and adaptive scaling with exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Calculate fullness: how much of the bin would be used after packing the item
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])

        # Prioritize bins that would be relatively full after packing.
        priorities[fit_indices] = fullness

        # Adaptive scaling based on the item size relative to the available bin capacities.
        scale = np.mean(bins_remain_cap[fit_indices])
        adaptive_priority = (item / scale)

        # Combine fullness and adaptive scaling
        priorities[fit_indices] = 0.7 * priorities[fit_indices] + 0.3 * adaptive_priority

        # Add a bit of randomness, but reduce overall randomness and focus only on bins that fit.
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.005

    # Strongly discourage placing in bins where the item does not fit.
    priorities[remaining_capacity < 0] = -1e9

    # Prioritize bins with the least remaining capacity among fitting bins to achieve better space utilization
    if np.any(fit_indices):
        min_remaining = np.min(remaining_capacity[fit_indices])
        least_remaining_indices = remaining_capacity == min_remaining
        priorities[least_remaining_indices] += 0.1  # Give a small bonus

    # Normalize priorities. Important to renormalize after adding bonuses.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)


    return priorities
```
