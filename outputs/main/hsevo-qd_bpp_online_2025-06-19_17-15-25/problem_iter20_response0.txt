```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, fullness, and adaptive exploration for BPP."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit priority: Smaller remaining capacity is better
        fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness priority: Higher fullness is better
        fullness_priority = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]

        # Adaptive scaling based on item size and average bin capacity
        scale = item / (np.mean(bins_remain_cap[fit_indices]) + 1e-9)

        # Combine fit and fullness
        priorities[fit_indices] = (fit_priority * scale + fullness_priority)

        # Dynamic exploration factor
        exploration_factor = min(0.1, 0.01 * np.sum(fit_indices) * item)
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
