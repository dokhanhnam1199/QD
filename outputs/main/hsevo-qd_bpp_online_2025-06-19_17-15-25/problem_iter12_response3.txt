```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including best fit,
    fullness, and adaptive scaling, with a focus on balancing exploration and exploitation.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit component: Prioritize bins where the remaining capacity is smallest.
        best_fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness component: Prioritize bins that are already relatively full.
        fullness_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max()+1e-9)

        # Adaptive Scaling: Scale based on item size.  Larger items favor tighter fits.
        scale = item / bins_remain_cap[fit_indices].mean() if bins_remain_cap[fit_indices].mean() > 0 else item
        adaptive_priority = scale * best_fit_priority  # Scale best-fit

        # Combine priorities. Use a weighted average to balance fit and fullness.
        priorities[fit_indices] = 0.6 * adaptive_priority + 0.4 * fullness_priority

        # Introduce more strategic randomness (exploration) proportional to remaining space.
        exploration_factor = np.random.rand(np.sum(fit_indices)) * (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices].max()) * 0.1
        priorities[fit_indices] += exploration_factor

    # Bins where the item doesn't fit get a very low priority.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize only if positive priorities exist
    if np.any(priorities > 0):
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0) and np.all(priorities <=0):
        priorities = priorities - np.min(priorities)
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
    #Else do nothing: all zeroes or all negative
    return priorities
```
