{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on adaptive scaling, fit, fullness, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_capacity = bins_remain_cap - item\n    fit_indices = remaining_capacity >= 0\n\n    if np.any(fit_indices):\n        # Adaptive scaling based on remaining capacity\n        scale = np.mean(bins_remain_cap[fit_indices]) \n        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + 1e-9) # Fullness / remaining, scaled\n\n        # Introduce randomness, scaled by item size to prevent excessive exploration for large items\n        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01 * (item + 0.1) # Scale explore\n\n    # Very low priority to bins where item doesn't fit\n    priorities[remaining_capacity < 0] = -1e9\n\n    # Normalize\n    if np.sum(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < 0:\n        priorities = priorities - np.min(priorities)\n        priorities = priorities / np.sum(priorities)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine our approach to self-reflection for designing better heuristics, focusing on practical application and avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Multi-faceted Evaluation, Adaptive Prioritization, Guided Randomness, Robustness Testing.\n\n*   **Advice:** Quantify the impact of each factor (fullness, fit, etc.) via performance metrics and use that to inform adaptive prioritization. Test robustness by generating diverse edge cases.\n\n*   **Avoid:** Vague \"considerations\" or \"balance\" without specific implementation details. Avoid over-parameterization without validation on a diverse test suite.\n\n*   **Explanation:** Move beyond simply listing factors. The goal is to design a process of *quantifying* their impact and *dynamically* adjusting the heuristic. Focus on rigorous testing, especially around constraints.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}