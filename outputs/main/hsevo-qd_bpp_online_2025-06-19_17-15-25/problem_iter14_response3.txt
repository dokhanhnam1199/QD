```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, adaptive scaling, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Adaptive scaling based on item size and remaining capacity.
        scale = np.mean(bins_remain_cap[fit_indices])
        priorities[fit_indices] = (item / (bins_remain_cap[fit_indices] + 1e-9)) + (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + 1e-9)

        # Introduce randomness, scaling with the number of suitable bins.
        num_suitable_bins = np.sum(fit_indices)
        exploration_factor = min(0.1, 0.01 * num_suitable_bins)
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to ensure they sum to 1.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
