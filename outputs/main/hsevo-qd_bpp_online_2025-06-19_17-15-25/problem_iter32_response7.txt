```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fullness, remaining capacity, adaptive scaling and calibrated exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit component
        best_fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness component
        fullness_priority = bins_remain_cap[fit_indices] / bins_remain_cap.max()  # Scale to [0, 1]

        # Adaptive Scaling: weight based on item size
        scale = item
        adaptive_priority = scale * best_fit_priority

        # Combine fit and fullness
        combined_priority = 0.7 * adaptive_priority + 0.3 * fullness_priority  # Weighted average
        priorities[fit_indices] = combined_priority

        # Calibrated exploration, scaling down randomness as bins get fuller
        exploration_factor = np.random.rand(np.sum(fit_indices)) * (bins_remain_cap[fit_indices] / bins_remain_cap.max()) * 0.1
        priorities[fit_indices] += exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize
    if np.any(priorities > 0):
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0) and np.all(priorities <= 0):
        priorities = priorities - np.min(priorities)
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)

    return priorities
```
