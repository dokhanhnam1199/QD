```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on multiple factors: fit, fullness, item-aware scaling,
    remaining capacity, and controlled randomness. Includes comprehensive normalization
    and edge case handling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor, scaled by remaining capacity
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9)
        fullness_priority = fullness * (1 - remaining_capacity[fit_indices] / (bins_remain_cap[fit_indices].max() + 1e-9)) # Scale by available space

        # Remaining capacity factor with dynamic scaling based on item size
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)
        remaining_cap_priority = remaining_cap_priority * item # Scale by item size. Larger items prioritize tighter fits

        # Combine fullness and remaining capacity, adaptively scaled
        combined_priority = fullness_priority + remaining_cap_priority
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        adaptive_priority = combined_priority / scale

        priorities[fit_indices] = adaptive_priority

        # Controlled randomness for exploration, scaled to remaining space
        exploration_strength = min(0.1, item) * (bins_remain_cap[fit_indices] / bins_remain_cap[fit_indices].max()) # Scale randomness
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    else:
        # No bin can fit, assigning very low priority to force new bin usage.
        priorities = np.full_like(priorities, -1e9)
        return priorities

    # Penalize bins where the item doesn't fit with a very low priority
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to ensure proper distribution
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
         min_priority = np.min(priorities)
         priorities = priorities - min_priority
         priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)


    return priorities
```
