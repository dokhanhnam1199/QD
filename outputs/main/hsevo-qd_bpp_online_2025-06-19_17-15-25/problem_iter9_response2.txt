```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including fit,
    remaining capacity, and a dynamic exploration strategy. Aims to improve
    upon v1 by adaptively adjusting exploration and exploitation based on
    available bins and item size.

    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Prioritize bins where the item fits.  Base priority on remaining capacity.
        priorities[fit_indices] = bins_remain_cap[fit_indices] / np.sum(bins_remain_cap[fit_indices])

        # Introduce exploration based on the number of viable bins and the item size.
        # If there are many bins where the item fits or the item is small relative to bin capacity,
        # increase exploration.  If the item nearly fills a bin, reduce exploration.
        num_fit = np.sum(fit_indices)
        avg_bin_cap = np.mean(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0
        exploration_factor = 0.01 * (num_fit / len(bins_remain_cap)) * (item / avg_bin_cap)
        exploration = np.random.rand(num_fit) * exploration_factor
        priorities[fit_indices] += exploration

        # Favor bins that are close to being full *after* adding the item. This helps
        # consolidate items.
        priorities[fit_indices] += (1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices]))

    # Significantly penalize bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling potential negative values gracefully.
    min_priority = np.min(priorities)
    if min_priority < 0:
        priorities -= min_priority  # Shift to make all values non-negative

    total_priority = np.sum(priorities)
    if total_priority > 0:
        priorities /= total_priority  # Normalize
    else:
        # Handle the case where all priorities are zero (or very close). This might happen
        # if all bins are full.  Distribute priorities evenly among feasible bins.
        if np.any(fit_indices):
            priorities[fit_indices] = 1.0 / np.sum(fit_indices)

    return priorities
```
