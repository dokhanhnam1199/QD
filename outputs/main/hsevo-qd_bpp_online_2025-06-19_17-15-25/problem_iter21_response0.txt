```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, adaptively weighted."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Calculate fullness (percentage of bin filled)
        fullness = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]

        # Adaptive weighting based on item size: Favor fullness for smaller items, remaining capacity for larger items
        item_size_factor = np.clip(item, 0.1, 0.9)  # Normalize item size

        fullness_weight = 1 - item_size_factor
        remaining_capacity_weight = item_size_factor

        # Prioritize bins: weighted sum of fullness and remaining capacity
        priorities[fit_indices] = (fullness_weight * fullness) + (remaining_capacity_weight * (bins_remain_cap[fit_indices] / np.max(bins_remain_cap)))

        # Introduce guided randomness (exploration), scaled and biased
        exploration_factor = 0.01
        exploration_noise = np.random.rand(np.sum(fit_indices)) * exploration_factor * (1 - fullness)

        priorities[fit_indices] += exploration_noise

    # Penalize bins where the item does not fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to ensure a valid probability distribution
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
