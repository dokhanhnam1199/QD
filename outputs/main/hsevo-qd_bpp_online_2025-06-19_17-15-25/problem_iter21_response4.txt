```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, a scaled item fit score,
    and a controlled exploration factor, with robustness enhancements."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit Score: How much of the item fits relative to bin size
        fit_score = (item / bins_remain_cap[fit_indices])

        # Remaining Capacity Score: scaled inverse of remaining capacity, higher is better
        remaining_score = 1 / (remaining_capacity[fit_indices] + 1e-9)
        
        # Combine fit and remaining capacity, scaled
        priorities[fit_indices] = (0.7 * fit_score + 0.3 * remaining_score)

        # Exploration: Introduce randomness proportional to *unused* capacity
        exploration_factor = np.random.rand(np.sum(fit_indices)) * 0.005 * (bins_remain_cap[fit_indices] - item + 0.1)
        priorities[fit_indices] += exploration_factor
    else:
        # No fitting bins. Give a small penalty (but not -inf), so we can still choose to open a new bin
        priorities = np.full_like(priorities, -0.001)


    # Ensure bins without fit get very low priority, without using -inf which can cause issues in normalization.
    priorities[remaining_capacity < 0] = -1.0 # significant penalty

    # Normalize to ensure valid probability distribution
    if np.sum(priorities) > 0:
        priorities /= np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities -= np.min(priorities) # shift all values to be positive
        priorities /= np.sum(priorities)

    return priorities
```
