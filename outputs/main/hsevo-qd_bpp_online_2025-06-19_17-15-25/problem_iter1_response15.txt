```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a heuristic inspired by celestial mechanics - favoring bins
    where the item represents a significant, yet stable, fraction
    of the remaining capacity (like a planet's pull on a star).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # A measure of "gravitational attraction" - closer sizes attract more.
            attraction = (item / cap)  # Fraction of capacity used. Closer to 1 is better
            
            # Dampen scores for bins that are ALMOST full after addition
            # Like orbits that are too close - they lead to instability!
            remaining_after_add = cap - item
            stability_factor = np.clip(remaining_after_add / item, 0.01, 1.0) #Avoid zero division, penalize nearing zero capacity

            priorities[i] = attraction * stability_factor # Net priority.
        else:
            priorities[i] = -np.inf  # Item too large - no priority.

    return priorities
```
