```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, a dynamic adaptive scaling,
    exploration encouragement, and bin diversity encouragement.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Dynamic scaling based on remaining capacity, adaptive to item size
        scale = np.mean(bins_remain_cap[fit_indices])
        # Encourage packing into bins that are a bit larger than the item
        capacity_ratio = bins_remain_cap[fit_indices] / item
        
        priorities[fit_indices] = (capacity_ratio / (remaining_capacity[fit_indices] + 1e-9)) * (bins_remain_cap[fit_indices]/scale)

        # Encourage exploration by adding randomness, scaled by item size
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01 * item

        # Encourage diversity (use variance of bin levels as a factor)
        bin_level_variance = np.var(bins_remain_cap) + 1e-9  # Avoid zero variance
        priorities[fit_indices] += (1 / bin_level_variance) * 0.001
        

    # Very low priority to bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9
    

    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
