```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fit and fullness, avoids infeasible bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0
    
    if np.any(fit_indices):
        # Prioritize bins with smaller remaining capacity after placing the item (fullness).
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)
        # Scale priorities based on original remaining capacity to favor bins that were already relatively full.
        priorities[fit_indices] *= (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))
        priorities[fit_indices] = priorities[fit_indices] / np.sum(priorities[fit_indices]) # Normalize
    
    priorities[remaining_capacity < 0] = -1e9 # Penalize infeasible bins
    return priorities
```
