```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are a good fit for the item,
    while also discouraging overfilling (leaving too little space).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Base priority: Favor bins that can fit the item
            priority = 1.0

            # Adjust priority based on how well the item fits.
            # A good fit leaves some space, but not too much.
            remaining_after_fit = capacity - item

            # Linear reward for good fit (remaining between 10% and 50% of bin capacity)
            if 0.1 * capacity <= remaining_after_fit <= 0.5 * capacity:
                priority += 0.5 * (0.5 * capacity - abs(remaining_after_fit - 0.3 * capacity)) / (0.5 * capacity) # Quadratic Reward near optimal packing. Center is .3 optimal capacity
            elif remaining_after_fit > 0.5 * capacity:
              priority -= (remaining_after_fit - 0.5 * capacity) / (0.5 * capacity) # Penalty for leaving too much space
            elif remaining_after_fit < 0.1 * capacity:
              priority -= (0.1* capacity - remaining_after_fit) / (0.1 * capacity) # Penalty for almost filling the bin fully

            priorities[i] = priority
        else:
            # Negative priority if the item doesn't fit
            priorities[i] = -1.0

    return priorities
```
