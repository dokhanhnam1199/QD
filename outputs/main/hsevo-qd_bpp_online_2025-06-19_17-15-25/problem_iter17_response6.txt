```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness, fit score, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness: fraction of bin occupied if item is placed
        fullness = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]
        priorities[fit_indices] += fullness

        # Fit score: How well item fits relative to bin size
        fit_score = item / bins_remain_cap[fit_indices]
        priorities[fit_indices] += fit_score

        # Adaptive scaling based on average remaining capacity
        scale = np.mean(bins_remain_cap[fit_indices])
        adaptive_scale = item / (scale + 1e-9)  # Avoid division by zero
        priorities[fit_indices] += adaptive_scale

        # Exploration: Add small random noise
        exploration_factor = min(0.1, 0.05 / (np.sum(fit_indices) + 1e-9))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Harsh penalty for bins that can't fit the item
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, ensuring they sum to 1
    if np.all(remaining_capacity < 0):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)
    else:
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
        elif np.sum(priorities) < 0:
            priorities = priorities - np.min(priorities)
            priorities = priorities / np.sum(priorities)

    return priorities
```
