```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by combining fullness, remaining capacity, adaptive scaling, and calibrated randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9)
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)
        combined_priority = fullness + remaining_cap_priority
        bin_capacity_mean = np.mean(bins_remain_cap[fit_indices])
        item_scale = min(1.0, item / bin_capacity_mean)
        scale = bin_capacity_mean * (1 - 0.5 * item_scale)
        priorities[fit_indices] = combined_priority / (scale + 1e-9)
        exploration_strength = min(0.1, item / bin_capacity_mean)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    priorities[remaining_capacity < 0] = -1e9

    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
