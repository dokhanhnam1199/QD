import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_number: float = 1.728022305307063e-09, exploration_rate: float = 0.014441970969055126, max_exploration: float = 0.06527447266242109, penalty: float = -4287657854.9521856) -> np.ndarray:
    """Prioritizes bins with adaptive scaling, fullness, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Adaptive scaling based on remaining capacity and item size
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + small_number)

        # Dynamic exploration factor
        exploration_factor = min(max_exploration, exploration_rate * np.sum(fit_indices))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = penalty

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
