```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on multiple factors:
    - Fit: Does the item fit in the bin?
    - Fullness: How full is the bin after placing the item?
    - Waste: How much space is wasted if the item is placed in the bin?
    - Exploration: Add some randomness to encourage exploration.
    - Adaptive Scaling: Scales the fullness and waste components adaptively.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness: Prioritize bins that become fuller after placing the item
        fullness = bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]
        fullness_normalized = fullness / bins_remain_cap[fit_indices] # Normalize

        # Waste: Penalize bins with a lot of wasted space
        waste = remaining_capacity[fit_indices]
        waste_normalized = waste / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else waste # Normalize
       
        # Adaptive Scaling
        scale_fullness = np.mean(bins_remain_cap[fit_indices]) # Scale based on average capacity
        scale_waste = item

        priorities[fit_indices] = (fullness_normalized / (scale_fullness+ 1e-9)) - (waste_normalized / (scale_waste+ 1e-9))
        
        # Exploration: Add some randomness
        exploration_factor = min(0.05, 0.005 * np.sum(fit_indices))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
