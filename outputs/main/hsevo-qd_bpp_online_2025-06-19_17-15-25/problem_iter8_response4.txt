```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_random_component_weight: float = 0.01, not_fit_priority: float = -1e9, division_eps: float = 1e-9) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, and introduces randomness. Combines ideas from previous heuristics with enhancements."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize fuller bins where the item fits
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices] + 1 / (remaining_capacity[fit_indices] + division_eps)

        # Add randomness for exploration
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * small_random_component_weight

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = not_fit_priority

    # Normalize to ensure probabilities (if needed) and handle edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
