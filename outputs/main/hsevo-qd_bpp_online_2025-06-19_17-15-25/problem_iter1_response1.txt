```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates a more sophisticated heuristic based on:
    1.  **Remaining Capacity Ratio**: Favor bins where the item size is a
        significant but not overwhelming portion of the remaining capacity.
    2.  **Bin Utilization**: Reward bins that are already somewhat full
        (penalizing empty bins initially), promoting efficient bin usage.
    3.  **Waste Minimization**: Strongly discourage choices that leave very
        small gaps in bins after packing the current item ("perfect fit").

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # small constant to avoid division by zero and log(0)

    # 1. Remaining Capacity Ratio: Higher score if item fits well (not too small, not too large)
    capacity_ratios = item / (bins_remain_cap + epsilon)  # Add epsilon to avoid div by zero
    capacity_priority = np.exp(-np.abs(capacity_ratios - 0.75))  # Ideal ratio around 0.75

    # 2. Bin Utilization: Higher score for bins that are already somewhat full
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # max(bins_remain_cap) approximates the bin_size, avoiding division by 0. if all bins are empty
    utilization_priority = utilization**2  # Emphasize already full bins slightly

    # 3. Waste Minimization: Large penalty for leaving very small gaps
    waste = bins_remain_cap - item
    near_perfect_fit = np.exp(-np.abs(waste - 0) / (item + epsilon) * 10) # High penalty around waste = 0
    waste_penalty = 1 - near_perfect_fit

    # Combine priorities:  Balance capacity, utilization, and minimizing waste
    priorities = capacity_priority * utilization_priority * waste_penalty
    return priorities
```
