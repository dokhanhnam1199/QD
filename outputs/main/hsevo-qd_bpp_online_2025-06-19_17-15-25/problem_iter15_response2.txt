```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, balance, and adaptive exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit score: Favor bins where item fits
        fit_score = np.zeros_like(bins_remain_cap, dtype=float)
        fit_score[fit_indices] = 1.0

        # Waste score: Penalize bins with high remaining capacity after packing
        waste_score = np.zeros_like(bins_remain_cap, dtype=float)
        waste_score[fit_indices] = 1.0 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])

        # Balance score: Prefer bins with lower initial remaining capacity (attempt to balance bin fullness)
        balance_score = np.zeros_like(bins_remain_cap, dtype=float)
        balance_score[fit_indices] = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / bins_remain_cap[fit_indices].max()

        # Adaptive scaling based on item size relative to average bin capacity
        scale_factor = item / np.mean(bins_remain_cap[fit_indices]) if np.mean(bins_remain_cap[fit_indices]) > 0 else 1.0
        scale_factor = np.clip(scale_factor, 0.1, 10.0)  # Limit the scaling effect

        # Combine scores with adaptive scaling
        priorities[fit_indices] = (0.5 * fit_score[fit_indices] + 0.3 * waste_score[fit_indices] + 0.2 * balance_score[fit_indices]) * scale_factor


        # Exploration: Introduce controlled randomness
        exploration_factor = min(0.1, 0.05 * np.sum(fit_indices))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit harshly
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities (handle cases where all priorities are negative)
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.any(priorities > 0):
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
         priorities = priorities - np.min(priorities)
         if np.sum(priorities) > 0: #Ensure sum is positive before normalizing.
            priorities = priorities / np.sum(priorities)

    return priorities
```
