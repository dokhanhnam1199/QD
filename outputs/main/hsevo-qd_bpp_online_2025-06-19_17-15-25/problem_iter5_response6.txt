```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and fullness, adaptively."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins that fit the item and are relatively full
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        priorities[fit_indices] = fullness + 1e-9 # Avoid zero division
        
        # Normalize priorities
        priorities[fit_indices] = priorities[fit_indices] / np.sum(priorities[fit_indices])
        
    priorities[remaining_capacity < 0] = -1e9 # Punish bins that don't fit

    return priorities
```
