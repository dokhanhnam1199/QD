{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins with adaptive scaling, fullness, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_capacity = bins_remain_cap - item\n    fit_indices = remaining_capacity >= 0\n\n    if np.any(fit_indices):\n        # Adaptive scaling based on remaining capacity and item size\n        scale = np.mean(bins_remain_cap[fit_indices]) + item\n        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + small_number)\n\n        # Dynamic exploration factor\n        exploration_factor = min(max_exploration, exploration_rate * np.sum(fit_indices))\n        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor\n\n    # Penalize bins where item doesn't fit\n    priorities[remaining_capacity < 0] = penalty\n\n    # Normalize priorities\n    if np.sum(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < 0:\n        priorities = priorities - np.min(priorities)\n        priorities = priorities / np.sum(priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins with adaptive scaling, fullness, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_capacity = bins_remain_cap - item\n    fit_indices = remaining_capacity >= 0\n\n    if np.any(fit_indices):\n        # Adaptive scaling based on remaining capacity and item size\n        scale = np.mean(bins_remain_cap[fit_indices]) + item\n        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + 1e-9)\n\n        # Dynamic exploration factor\n        exploration_factor = min(0.1, 0.01 * np.sum(fit_indices))\n        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor\n\n    # Penalize bins where item doesn't fit\n    priorities[remaining_capacity < 0] = -1e9\n\n    # Normalize priorities\n    if np.sum(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < 0:\n        priorities = priorities - np.min(priorities)\n        priorities = priorities / np.sum(priorities)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of fullness, remaining capacity, adaptive scaling, and exploration, while the worst primarily focuses on scaling based on remaining capacity with a fixed exploration. The best includes adaptive weighting of fullness and remaining capacity based on item size, encouraging larger items to favor fuller bins. The worst only considers fit and penalizes non-fit.\n\nComparing (2nd) vs (19th), we see (2nd) uses a combination of fullness and remaining capacity, and adaptive scaling based on item size, while (19th) prioritizes bins based on remaining capacity, fit, item size, and bin occupancy, with adaptive scaling and exploration. The difference is (19th) incorporates occupancy priority and dynamic weight adjustment, making it more sophisticated.\n\nComparing (1st) vs (2nd), we see the first one adaptively scales weights for fullness and remaining capacity based on item size, giving larger items higher weight to fullness.  It also has exploration strength that scales with item size, while the second scales exploration with the inverse.\n\nComparing (3rd) vs (4th), we see (4th) introduces data-driven scaling based on item and bin characteristics which is a significant improvement, while (3rd) uses adaptive scaling based on item size. (4th) also has calibrated randomness using bin capacity awareness.\n\nComparing (second worst) vs (worst), we see (second worst) uses slightly more contextual information, but both are relatively basic. (20th) is the worst as it only uses scaling factor, fit priority and a no-fit penalty.\n\nOverall: The best heuristics incorporate multiple factors such as fullness, remaining capacity, adaptive scaling, and exploration. They adapt weights and scaling based on item size and bin characteristics. Also, they include more sophisticated exploration strategies. Normalization is also crucial.\n- \nOkay, here's a redefined \"Current Self-Reflection\" distilled into actionable advice for heuristic design, along with what to avoid, and a rationale:\n\n*   **Keywords:** Multi-factor, Adaptive Scaling, Exploration, Normalization, Edge Cases, Validation.\n*   **Advice:** Integrate multiple relevant factors using adaptive scaling to dynamically adjust priorities, incorporate controlled randomness for exploration, and rigorously handle edge cases. Validate through testing.\n*   **Avoid:** Oversimplification (raw ratios), over-complication (too many unvalidated dynamic weights), fixed constants, ignoring constraints/edge cases.\n*   **Explanation:** Combine diverse criteria for a comprehensive evaluation. Adaptive scaling adjusts to problem characteristics. Exploration prevents getting stuck in local optima. Normalization ensures consistent probability-based selection. Robust edge case handling guarantees reliability. Thorough validation is critical for effectiveness.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}