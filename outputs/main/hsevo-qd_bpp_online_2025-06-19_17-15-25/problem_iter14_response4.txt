```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, fullness, adaptive scaling, and dynamic exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness: prioritize fuller bins where item fits
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]

        # Adaptive Scaling: adjust for average remaining capacity, avoid zero division
        scale = np.mean(bins_remain_cap[fit_indices])
        priorities[fit_indices] += 1 / (remaining_capacity[fit_indices] / scale + 1e-9)

        # Dynamic Exploration: more bins = more explore
        num_fit = np.sum(fit_indices)
        exploration_weight = min(0.1, 0.01 * num_fit) # adaptive weight
        priorities[fit_indices] += np.random.rand(num_fit) * exploration_weight

    # Penalize no-fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize positive and negative separately
    if np.sum(priorities[priorities > 0]) > 0:
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])

    if np.sum(priorities[priorities < 0]) < 0:
         min_neg = np.min(priorities[priorities < 0])
         priorities[priorities < 0] -= min_neg
         priorities[priorities < 0] /= np.sum(priorities[priorities < 0])

    return priorities
```
