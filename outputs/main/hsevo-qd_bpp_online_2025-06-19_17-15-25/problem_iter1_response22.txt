```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through each bin and compute its priority
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:  # Only consider bins that can fit the item
            # Calculate the waste if the item is placed in the bin
            waste = remaining_capacity - item

            # Higher priority for bins with less waste. Using an exponential term penalizes large wastes severely.
            # Bins with larger remaining capacities get penalized
            priorities[i] = np.exp(-waste) / (remaining_capacity + 1e-9) #avoid zero div

    return priorities
```
