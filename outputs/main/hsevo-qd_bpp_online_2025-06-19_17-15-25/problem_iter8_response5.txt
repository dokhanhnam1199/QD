```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Prioritize bins with tighter fit
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]

        # Add a small amount of randomness to encourage exploration
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01
    else:
        priorities[:] = -1e9
    return priorities
```
