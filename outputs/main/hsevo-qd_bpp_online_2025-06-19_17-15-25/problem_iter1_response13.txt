```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Initialize priorities to -inf if item doesn't fit.  This acts as a filter
    priorities[bins_remain_cap < item] = -np.inf
    
    # First-fit-decreasing heuristic: Prioritize bins with sufficient capacity closest to the item size.
    # We prioritize bins that offer tight packing, leaving less wasted space.
    # Also, add some random "jiggling" via small randomness for avoiding always deterministic choice

    
    sufficient_bins_mask = bins_remain_cap >= item
    if np.any(sufficient_bins_mask):
        capacity_diff = bins_remain_cap[sufficient_bins_mask] - item
        priorities[sufficient_bins_mask] = -capacity_diff + np.random.rand(np.sum(sufficient_bins_mask)) * 0.001 #Prioritize smallest space

    
    return priorities
```
