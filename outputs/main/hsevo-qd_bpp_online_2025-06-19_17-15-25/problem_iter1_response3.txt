```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins that can fit the item without excessive waste.
    # Give a high priority to bins where the remaining capacity after
    # adding the item is small, but still non-negative.

    remaining_after_fit = bins_remain_cap - item
    priorities = np.zeros_like(bins_remain_cap)

    # Give zero priority to bins that cannot fit the item.
    priorities[remaining_after_fit < 0] = -np.inf

    # Calculate a score based on remaining capacity. Smaller remaining
    # capacity (but still positive) is better. We use a reciprocal
    # relationship for a decaying priority.
    valid_bins = remaining_after_fit >= 0
    priorities[valid_bins] = 1.0 / (1e-6 + remaining_after_fit[valid_bins]) # Add epsilon to avoid division by zero

    # Add bonus for bins that are nearly full before the item is added
    # Helps in making the bins tightly packed and reducing overall waste.
    nearly_full = bins_remain_cap > 0.0  # Handle cases where capacity is 0 initially

    priorities[nearly_full] += np.clip(1 - bins_remain_cap[nearly_full], 0.0, 1.0)  # Scales with existing capacity
    
    return priorities
```
