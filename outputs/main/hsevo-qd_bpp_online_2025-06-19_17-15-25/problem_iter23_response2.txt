```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, fullness, adaptive scaling, and calibrated exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit component: Prioritize smaller remaining capacities.
        best_fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness component: Prioritize fuller bins.
        fullness_priority = bins_remain_cap[fit_indices] / bins_remain_cap.max() if bins_remain_cap.max() > 0 else np.zeros_like(bins_remain_cap[fit_indices])

        # Adaptive Scaling: Scale based on item size and remaining bin capacity.
        scale = item / (bins_remain_cap[fit_indices].mean() + 1e-9)
        adaptive_priority = scale * best_fit_priority

        # Combined priority with adaptive weighting.
        alpha = min(item, 0.5)  # Adjust weight based on item size
        priorities[fit_indices] = alpha * adaptive_priority + (1 - alpha) * fullness_priority

        # Calibrated Exploration: Randomness proportional to item size and remaining space.
        exploration_factor = np.random.rand(np.sum(fit_indices)) * (item / (bins_remain_cap[fit_indices].max() + 1e-9)) * 0.05
        priorities[fit_indices] += exploration_factor

    priorities[remaining_capacity < 0] = -1e9

    # Normalize positive priorities
    if np.any(priorities > 0):
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0) and np.all(priorities <= 0):  # Handle only negative case.
        priorities = priorities - np.min(priorities) # shift to be all non-negative.
        if np.sum(priorities) > 0:  #Check again after shift.
            priorities = priorities / np.sum(priorities)

    return priorities
```
