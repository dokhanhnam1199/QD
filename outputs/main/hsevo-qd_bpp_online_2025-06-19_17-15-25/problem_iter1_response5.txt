```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can fit the item well without
    leaving too much space, but also avoids bins that are too tight.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a base priority based on whether the item fits
    fits = bins_remain_cap >= item
    priorities[fits] = 1.0

    # Adjust priority based on remaining space
    remaining_space = bins_remain_cap - item
    
    # Penalize if item doesn't fit
    priorities[~fits] = -1e9 # effectively remove them

    # Add reward proportional to the remaining space if within range
    # Goal is to find the sweet spot of not too little or too much space remaining.
    # A good range is item/5 < remaining_space < item*2
    good_fit = (remaining_space > item/5) & (remaining_space < item*2)
    priorities[good_fit] += 0.5 + (item - np.abs(remaining_space[good_fit] - item)) / (item + 1e-9) # reward less if remaining space further away

    # Slightly reduce reward if the bin is very close to being full
    too_tight = (remaining_space > 0) & (remaining_space <= item/5) # allow values very very small that remain_space > 0
    priorities[too_tight] -= 0.2 # or use other value to penalize them

    return priorities
```
