```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, adaptive scaling, and item-aware exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit priority
        best_fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness priority
        fullness_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max()+1e-9)

        # Adaptive scaling based on item size and bin capacity.
        scale = item / bins_remain_cap[fit_indices].mean() if bins_remain_cap[fit_indices].mean() > 0 else item
        adaptive_priority = scale * best_fit_priority

        # Combine priorities with adaptive weights.
        weight_fit = 0.5 + 0.5 * (item / np.max(bins_remain_cap)) # Larger items favor fit more
        priorities[fit_indices] = weight_fit * adaptive_priority + (1 - weight_fit) * fullness_priority

        # Strategic exploration based on remaining capacity and item size.
        exploration_factor = np.random.rand(np.sum(fit_indices)) * (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices].max()) * (item / np.max(bins_remain_cap)) * 0.1
        priorities[fit_indices] += exploration_factor

    # Very low priority for bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.any(priorities > 0):
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0) and np.all(priorities <=0):
        priorities = priorities - np.min(priorities)
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)

    return priorities
```
