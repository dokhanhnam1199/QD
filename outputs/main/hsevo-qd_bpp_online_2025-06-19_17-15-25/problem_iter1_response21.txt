```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics inspired by physics:

    1.  **Inverse Gap:** Larger the remaining capacity after adding the item, the better. This is weighted more if the gap is close to the item size.
    2.  **Relative Fullness Preference:**  Bins that are already somewhat full are preferred (attraction force). This is a scaled logistic function.
    3.  **Fit Threshold:**  Bins where the item cannot fit receive a very low priority (large negative number). This prevents useless calculations and biases the algorithm towards feasible solutions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible Bin Penalty
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -1e9  # Extremely low priority for infeasible bins

    # Heuristics for feasible bins
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        feasible_caps = bins_remain_cap[feasible_mask]
        
        #Inverse Gap, emphasizing gaps near item size
        remaining_gap = feasible_caps - item
        gap_priority = (remaining_gap + 1e-9) / (np.abs(remaining_gap - item) + 1e-9)

        # Fullness Preference (Scaled Logistic)
        fullness = 1 - feasible_caps / np.max(bins_remain_cap) # Scaled between 0 and 1. Assuming the bins are of the same size.
        fullness_priority = 1 / (1 + np.exp(-10 * (fullness - 0.5)))  # Logistic function, prefers mid-fullness

        #Combined Priority
        priorities[feasible_mask] = gap_priority + fullness_priority

    return priorities
```
