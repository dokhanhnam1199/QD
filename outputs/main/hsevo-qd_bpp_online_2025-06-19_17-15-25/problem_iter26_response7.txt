```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, fullness, scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit component
        best_fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness component
        fullness_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max()+1e-9)

        # Adaptive Scaling based on item size
        scale = item / bins_remain_cap[fit_indices].mean() if bins_remain_cap[fit_indices].mean() > 0 else item
        adaptive_priority = scale * best_fit_priority

        # Combine priorities.
        priorities[fit_indices] = 0.6 * adaptive_priority + 0.4 * fullness_priority

        # Refined exploration based on remaining capacity
        exploration_strength = min(0.1, item)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices].max()) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.any(priorities > 0):
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0) and np.all(priorities <=0):
        priorities = priorities - np.min(priorities)
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
    return priorities
```
