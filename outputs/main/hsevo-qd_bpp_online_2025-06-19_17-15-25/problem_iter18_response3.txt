```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of remaining capacity, fit score,
    fullness, and a dynamically adjusted exploration factor. Includes robust
    handling of edge cases and normalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit score: Closer to full capacity after placement = higher score
        fit_score = bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]

        # Fullness score: How full the bin is currently
        fullness_score = 1 - bins_remain_cap[fit_indices] / np.max(bins_remain_cap)

        # Adaptive scaling based on item size and average remaining capacity
        scale = item + np.mean(bins_remain_cap[fit_indices]) if np.any(fit_indices) else item + np.mean(bins_remain_cap) if np.any(bins_remain_cap) else item + 1e-9

        # Combine scores with weighted factors. Tunable parameters.
        weight_fit = 0.5
        weight_fullness = 0.3
        weight_capacity = 0.2

        priorities[fit_indices] = (weight_fit * fit_score / scale) + \
                                  (weight_fullness * fullness_score) + \
                                  (weight_capacity * (bins_remain_cap[fit_indices] / scale))
        
        # Dynamic exploration factor
        num_fit = np.sum(fit_indices)
        exploration_factor = min(0.1, 0.05 * num_fit) if num_fit > 0 else 0.01 # Avoids zero division

        priorities[fit_indices] += np.random.rand(num_fit) * exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to ensure consistent selection probability
    priority_sum = np.sum(priorities)

    if priority_sum > 0:
        priorities = priorities / priority_sum
    elif priority_sum < 0:  # Handle negative priorities after penalization
        min_priority = np.min(priorities)
        priorities = priorities - min_priority  # Shift to non-negative
        priority_sum = np.sum(priorities)
        if priority_sum > 0:
             priorities = priorities / priority_sum #Normalize again
    else:
        # All priorities are zero - distribute equally among feasible bins or
        # if no feasible bin, set all to zero.
        if np.any(fit_indices):
            priorities[fit_indices] = 1.0 / np.sum(fit_indices)
        else:
            pass # Leave priorities as zero, signaling no suitable bin

    return priorities
```
