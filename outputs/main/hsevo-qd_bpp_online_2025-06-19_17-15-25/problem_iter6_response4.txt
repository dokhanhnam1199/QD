```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, remaining capacity, and bin diversity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Focus on bins with adequate remaining capacity
        # Scale based on the inverse of remaining capacity, prioritizing tighter fits
        priorities[fit_indices] = (bins_remain_cap[fit_indices]**2) / (remaining_capacity[fit_indices] + 1e-9)

        # Introduce a diversity component: prioritize bins that are less similar to others.
        # Encourage a broader exploration of the solution space by favoring bins
        # that have different remaining capacities compared to other bins.
        diversity_scores = np.zeros_like(bins_remain_cap)
        for i in range(len(bins_remain_cap)):
            if fit_indices[i]:
                # Calculate the average difference between the remaining capacity of this bin
                # and the remaining capacities of all other bins.
                diffs = np.abs(bins_remain_cap[i] - bins_remain_cap[fit_indices])
                diversity_scores[i] = np.mean(diffs)
        priorities[fit_indices] += diversity_scores[fit_indices] * 0.1

        # Small random perturbation for exploration
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.001
    else:
        # If no bins can fit, set all priorities to negative infinity. Prevents assignment.
        priorities[:] = -np.inf
        return priorities

    # Bins that cannot fit get a very low priority.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize, but handle edge cases more robustly.
    total_priority = np.sum(priorities)
    if total_priority > 0:
        priorities = priorities / total_priority
    elif total_priority < 0:  # Handle negative priorities by shifting and normalizing
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    else:
        # If all priorities are zero, distribute evenly among valid bins.
        if np.any(fit_indices):
            priorities[fit_indices] = 1.0 / np.sum(fit_indices)

    return priorities
```
