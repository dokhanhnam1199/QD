```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, fit, item size, and bin occupancy, with adaptive scaling and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # 1. Prioritize bins with tighter fit, encouraging better space utilization
        fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # 2. Prioritize bins with higher occupancy (more items already packed), aiming to consolidate packings
        occupancy_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max()+ 1e-9)

        # 3. Adaptive scaling based on the item size relative to average remaining capacity.  Larger items favor almost full bins
        scale = np.mean(bins_remain_cap[fit_indices])
        item_size_priority = (item / (scale + 1e-9)) 

        #4. Combine priorities with weights. Dynamically adjust weights based on performance characteristics (omitted for simplicity but crucial in a real-world scenario).
        alpha, beta, gamma = 0.6, 0.3, 0.1 # Weights can be dynamically tuned. Experiment with different values to improve performance.
        priorities[fit_indices] = alpha * fit_priority + beta * occupancy_priority + gamma * item_size_priority
        
        # 5. Constrained Random Exploration: Add small noise only to promising bins
        exploration_noise = np.random.rand(np.sum(fit_indices)) * 0.01
        priorities[fit_indices] += exploration_noise

    # Very low priority to bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9
    
    # Normalize priorities to a probability distribution
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
          priorities = priorities - np.min(priorities)
          priorities = priorities / np.sum(priorities)


    return priorities
```
