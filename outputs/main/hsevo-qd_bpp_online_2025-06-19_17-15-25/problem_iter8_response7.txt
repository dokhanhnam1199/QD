```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness, fit, and adaptive scaling with slight randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins that fit the item, scaled by inverse remaining capacity.
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)
        # Adaptive scaling to encourage exploration (small random component).
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.1
    else:
        # Very negative for bins that can't fit, but slightly different based on waste.
        priorities[remaining_capacity < 0] = remaining_capacity[remaining_capacity < 0] * 1e3

    # Normalize to ensure proper scaling.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
      priorities = priorities - np.min(priorities)
      priorities = priorities / np.sum(priorities)

    return priorities
```
