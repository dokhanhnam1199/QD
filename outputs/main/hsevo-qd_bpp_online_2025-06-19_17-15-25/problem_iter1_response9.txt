```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with remaining capacity slightly larger than the item
    and penalizes bins that are either too small or too large. We want to utilize each bin as efficiently as possible

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is suitable if remaining capacity >= item size
    suitable_bins = bins_remain_cap >= item

    # Calculate the wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the wasted space is small, but not too small
    # We want some buffer in each bin. This uses Gaussian to award better score
    # We also want wasted space to be positive. Assign lowest priority when wasted space is negative
    priorities[suitable_bins] = np.exp(-(wasted_space[suitable_bins] - np.mean(wasted_space[suitable_bins]))**2 / (2 * np.std(wasted_space[suitable_bins])**2))
    # Penalize bins that are too small
    priorities[bins_remain_cap < item] = -1.0  # Give low priority, do not choose

    # Small Adjustment
    # Remove extremely small items that should not be packed at all, can lead to numerical unstability
    priorities[bins_remain_cap < 0.00001] = -100.0

    return priorities
```
