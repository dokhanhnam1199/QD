```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness, fit, scaled item size, and exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Scale item size relative to remaining capacity
        scaled_item = item / np.mean(bins_remain_cap[fit_indices]) if np.mean(bins_remain_cap[fit_indices]) > 0 else item
        
        # Prioritize based on fullness and scaled item size
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices] + (1 / (scaled_item + 1e-9))  #fullness + inverse of scaled item
        
        # Add randomness, scaled by the item size
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01 * item

    priorities[remaining_capacity < 0] = -1e9

    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    return priorities
```
