```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a dynamic combination of factors,
    including remaining capacity, fullness, item size, and adaptive randomness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize fuller bins, but scale by remaining capacity.
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-6) # Avoid zero division
        fullness_priority = fullness / (bins_remain_cap[fit_indices] + 0.1)  # Fuller bins with smaller remaining cap get higher priority

        # Remaining capacity factor: Prioritize tighter fits. Inverse relationship.
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.001)  # Avoid division by zero

        # Item size factor: Adapt priorities based on item size. Larger items favor fuller bins.
        item_size_factor = item / bins_remain_cap[fit_indices].max()
        item_size_priority = fullness * item_size_factor # larger item encourages choosing fuller bins

        # Combine factors with dynamic weights.
        combined_priority = 0.4 * fullness_priority + 0.5 * remaining_cap_priority + 0.1 * item_size_priority
        priorities[fit_indices] = combined_priority

        # Adaptive randomness: Introduce randomness proportional to item size and remaining capacity variance
        capacity_std = np.std(bins_remain_cap[fit_indices])
        exploration_strength = min(0.2, item * capacity_std)  # Increase randomness for bigger items or high cap variance
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
