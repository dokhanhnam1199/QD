```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best fit, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0
    n_bins = len(bins_remain_cap)

    if np.any(fit_indices):
        # Best Fit Emphasis
        priorities[fit_indices] = 1.0 / (remaining_capacity[fit_indices] + 1e-9)

        # Adaptive Scaling based on remaining capacity
        scale = np.mean(bins_remain_cap[fit_indices]) if np.any(fit_indices) else 1.0
        priorities[fit_indices] *= (bins_remain_cap[fit_indices] / scale)

        # Dynamic Exploration
        exploration_factor = 0.1 * (1 - (np.sum(fit_indices) / n_bins))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    else:
        # If no bins fit, prioritize the bin with the least remaining capacity
        closest_bin_index = np.argmin(bins_remain_cap)
        priorities[closest_bin_index] = 0.0001

    # Very low priority to bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    priority_sum = np.sum(priorities)
    if priority_sum > 0:
        priorities = priorities / priority_sum
    elif priority_sum < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.full_like(priorities, 1/len(priorities))

    return priorities
```
