```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_priority_scale: float = 1.0, no_fit_priority: float = -1000.0, cap_scale: float = 1.0) -> np.ndarray:
    """Combines fit-based priority with capacity-based scaling for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits.
    fit_indices = bins_remain_cap >= item
    if np.any(fit_indices):
        priorities[fit_indices] = fit_priority_scale * (bins_remain_cap[fit_indices] - item)
    
    # Penalize bins where the item doesn't fit.
    priorities[~fit_indices] = no_fit_priority
        
    # Scale priority by bin capacity (prioritize fuller bins).
    priorities = priorities + cap_scale * (1 - bins_remain_cap / np.max(bins_remain_cap))

    # Normalize priorities
    if np.sum(priorities) > 0:
      priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
      priorities = priorities - np.min(priorities)
      priorities = priorities / np.sum(priorities)

    return priorities
```
