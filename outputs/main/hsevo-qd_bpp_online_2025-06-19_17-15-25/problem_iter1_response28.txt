```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item. Larger rem_cap gets lower priority
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Remaining capacity after adding the item (favor smaller remaining space)

    # Penalize bins that cannot fit the item to a moderate degree.
    # Make sure they aren't completely avoided, especially early in the process.
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -1.0 * (item - bins_remain_cap[no_fit_mask]) # Negative priorities for bins that cannot fit.

    return priorities
```
