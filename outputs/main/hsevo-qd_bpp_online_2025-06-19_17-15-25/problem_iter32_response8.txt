```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, fullness, adaptive scaling, and calibrated exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor (prioritize fuller bins)
        fullness = bins_remain_cap[fit_indices] / bins_remain_cap.max()
        fullness_priority = 1.0 - fullness

        # Remaining capacity factor (prioritize tighter fits)
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)

        # Adaptive weighting based on item size
        weight_fullness = min(item, 0.75)
        weight_remaining = 1.0 - weight_fullness
        combined_priority = weight_fullness * fullness_priority + weight_remaining * remaining_cap_priority

        # Data-driven adaptive scaling
        bin_capacity_mean = np.mean(bins_remain_cap)
        item_scale = min(1.0, item / bin_capacity_mean)
        scale = bin_capacity_mean * (1 - 0.5 * item_scale)
        priorities[fit_indices] = combined_priority / (scale + 1e-9)

        # Calibrated exploration: smaller items relative to bin capacity get more
        exploration_strength = min(0.1, item / bin_capacity_mean)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities

    priorities[remaining_capacity < 0] = -1e9

    if np.any(priorities > 0):
        sum_priorities = np.sum(priorities[priorities > 0])
        if sum_priorities > 0:
            priorities = priorities / sum_priorities
        else:
            priorities = np.zeros_like(priorities)
    elif np.any(priorities < 0) and np.all(priorities <= 0):
         priorities = np.zeros_like(priorities)
    else:
         priorities = np.zeros_like(priorities)

    return priorities
```
