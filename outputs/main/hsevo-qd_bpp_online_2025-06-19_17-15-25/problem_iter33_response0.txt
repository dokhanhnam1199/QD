```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fit, fullness, remaining capacity, item size, and exploration with adaptive scaling and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor (higher is better - bin is more full)
        fullness = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / (np.max(bins_remain_cap) + 1e-9)

        # Remaining capacity factor (lower is better)
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01) # small remaining get high priority

        # Item size factor (smaller items get higher priority to leave room for larger ones later)
        item_size_factor = 1 - item  # Scale to be between 0 and 1.

        # Combine factors with adaptive scaling
        combined_priority = (fullness + remaining_cap_priority) * item_size_factor

        # Adaptive scaling based on mean remaining capacity in fitting bins
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = combined_priority / scale

        # Exploration strategy: item-size aware randomness
        exploration_strength = min(0.1, item)
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
    else:
        # No bin fits. Mark the bins as very undesirable
        priorities = np.full_like(priorities, -1e9)
        return priorities

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases.  Important for stable selection probabilities.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)
    elif np.all(priorities == 0): # Handle the case where all priorities are zero
        priorities = np.ones_like(priorities) / len(priorities)


    return priorities
```
