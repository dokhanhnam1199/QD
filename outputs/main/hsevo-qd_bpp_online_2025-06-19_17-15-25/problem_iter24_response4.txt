```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a refined set of factors, including fit, fullness,
    remaining capacity, data-driven scaling, and calibrated randomness.

    This version incorporates data-driven adaptation and contextual scaling to improve
    performance compared to the original.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize bins that are relatively full
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / bins_remain_cap[fit_indices].max()
        fullness_priority = fullness

        # Remaining capacity factor: Prefer bins with tighter fits but avoid nearly full bins
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)  # Avoid division by zero. small remaining get high priority

        # Combined priority
        combined_priority = fullness_priority + remaining_cap_priority

        # Data-driven Scaling: Adjust priority based on the distribution of item sizes and bin capacities
        # Scale by the median remaining capacity of the available bins and the item size.
        scale = np.median(bins_remain_cap[fit_indices]) * item
        priorities[fit_indices] = combined_priority / (scale + 1e-6)  # Adding small constant avoid zero div

        # Calibrated Randomness: Adjust exploration based on item size relative to bin capacity.
        # Smaller items in larger bins get more exploration.
        relative_size = item / np.mean(bins_remain_cap[fit_indices]) if np.mean(bins_remain_cap[fit_indices]) > 0 else 0
        exploration_strength = min(0.2, 1 - relative_size)  # Ensure exploration_strength is between 0 and 0.2
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus


    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Robust Handling: Normalize priorities, handling edge cases and negative values more robustly
    if np.any(priorities > 0): # Only normalize if there are positive priorities
        priorities = priorities / np.sum(priorities[priorities > 0]) if np.sum(priorities[priorities > 0]) > 0 else priorities
    elif np.any(priorities < 0): # If only negative, normalize negative
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities) # Handle case where all priorities are very negative after shift



    return priorities
```
