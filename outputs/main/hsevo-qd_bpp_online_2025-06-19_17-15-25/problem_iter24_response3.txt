```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on multiple factors including fit, fullness, remaining capacity, and a refined exploration strategy.
    Includes dynamic scaling and adaptive exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize bins that are already relatively full
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / bins_remain_cap[fit_indices].max()
        fullness_priority = fullness

        # Remaining capacity factor: Prefer bins with tighter fits but avoid nearly full bins
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)  # Avoid division by zero. small remaining get high priority
        
        # Combine fullness and remaining capacity.
        combined_priority = fullness_priority + remaining_cap_priority

        # Adaptive scaling based on item size and bin capacity distribution
        capacity_mean = np.mean(bins_remain_cap[fit_indices])
        capacity_std = np.std(bins_remain_cap[fit_indices])
        scale = item / (capacity_mean + capacity_std + 1e-6) # Ensure not dividing by zero, account for variance
        priorities[fit_indices] = combined_priority * scale


        # Refined exploration strategy: Item-size aware and dynamically adjusted randomness
        exploration_strength = min(0.1, item) # Smaller items get more exploration
        # Reduce exploration as bins become fuller.
        fullness_level = np.mean(1 - (bins_remain_cap[fit_indices] / bins_remain_cap.max())) if bins_remain_cap.max() > 0 else 0
        exploration_strength *= (1 - fullness_level) #Less exploration when bins are mostly full
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus


    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Robust normalization to handle edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.full_like(priorities, 1/len(priorities)) # Handle case where all priorities are very negative after shift; distribute evenly

    else: # all zeros. equally likely to select any bin
        priorities = np.full_like(priorities, 1/len(priorities))
    

    return priorities
```
