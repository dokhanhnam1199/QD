```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, and bin fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit and waste: High priority if item fits, inversely proportional to waste
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)

    # Penalize if item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Encourage filling bins, boosting priority for fuller bins.
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities += fullness * 0.1 # weight of fullness

    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
      priorities = priorities - np.min(priorities)
      priorities = priorities / np.sum(priorities)
    return priorities
```
