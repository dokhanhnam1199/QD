```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more sophisticated priority function considering several factors:
    1. Space utilization: How much of the bin will be filled.
    2. Fragmentation penalty: Penalizes bins that would leave small, unusable space.
    3. Item fit: Strong preference for bins where the item almost perfectly fits,
       as this minimizes wasted space overall in the long run.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Ensure bins_remain_cap is a numpy array to avoid errors with conditional assignment
    bins_remain_cap = np.array(bins_remain_cap)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Only consider bins that have enough capacity. Avoids ZeroDivisionError, nan, etc.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities # All zero priorities if no bin can fit. Force new bin.

    # Calculate the space utilization ratio for valid bins
    space_utilization = item / bins_remain_cap[valid_bins]

    # Fragmentation penalty: heavier penalty for small leftover spaces. Exponentially reduce score.
    leftover_space = bins_remain_cap[valid_bins] - item
    fragmentation_penalty = np.exp(-5 * leftover_space)  # Higher number means high penalty.

    # Item fit bonus: give a strong preference for nearly perfectly fitting the bin.  Peaks priority if (1 - space_utilization) approaches zero (bin nearly full)
    item_fit_bonus = np.exp(-20 * np.abs(leftover_space) ) # Strongest fit bonus when leftover space close to zero


    # Combine factors into a single priority score: space utilization minus fragmentation penalty
    priorities[valid_bins] = space_utilization + item_fit_bonus - 0.5*fragmentation_penalty

    return priorities
```
