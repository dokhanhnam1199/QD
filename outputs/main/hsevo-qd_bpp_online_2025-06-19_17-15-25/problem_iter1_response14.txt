```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Prioritizes bins that have remaining capacity slightly larger than the item size,
    but penalizes bins that are too full or too empty.  Also adds a small
    random factor to break ties and encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-6  # Small constant to avoid division by zero and log(0)

    # Calculate how well the item "fits" into each bin.
    fit_scores = np.exp(-np.abs(bins_remain_cap - item) / item)

    # Penalize bins that are too full (remaining capacity is very close to 0)
    # or almost empty (remaining capacity is far greater than the item size).
    capacity_penalty = np.exp(-bins_remain_cap / (item + epsilon)) * np.exp(-(item + epsilon) / bins_remain_cap) #Modified penalty to use exponential, for more robust penalties.

    # Add a small random factor to encourage exploration.
    random_factor = np.random.rand(len(bins_remain_cap)) * 0.01

    # Combine the scores and penalties to get the final priority.
    priorities = fit_scores * capacity_penalty + random_factor

    return priorities
```
