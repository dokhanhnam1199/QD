```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits well (not too much wasted space, not too little).
    It incorporates a 'sweet spot' based on the golden ratio and uses the remaining capacity
    to dynamically adjust priorities. We want to pack bins as full as possible without overflowing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    golden_ratio = (1 + np.sqrt(5)) / 2
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the fullness ratio after packing
            fullness_ratio = item / cap

            # Prioritize bins closer to an ideal fill ratio.
            # Using a modified golden ratio, prioritizing fills close to 1/golden_ratio for balance.
            ideal_ratio = 1/golden_ratio

            # Gaussian-like penalty for deviation from the ideal_ratio, using inverse variance as a heuristic
            # This encourages packing bins so they become ideally filled.
            deviation = abs(fullness_ratio - ideal_ratio)
            priority = np.exp(-deviation**2 * 5)  # Heuristic scaling for 'tightness' of the Gaussian

            # Small bonus for utilizing a significant portion of remaining capacity. This addresses items that may always
            # create nearly ideal fills because they are tiny, but we want to try pack bigger items.
            priority += np.clip(item / np.mean(bins_remain_cap) / 10, 0, 0.1)  # Clip to avoid overwhelming effect

            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority

    return priorities
```
