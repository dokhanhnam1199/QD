```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, with adaptive scaling and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize bins that are already relatively full
        fullness = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / bins_remain_cap[fit_indices].max()
        fullness_priority = fullness

        # Remaining capacity factor: Prefer bins with tighter fits
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.001)  # Avoid division by zero

        # Combine fullness and remaining capacity with adaptive weights
        alpha = min(1.0, item)  # Item size influences the balance
        combined_priority = alpha * fullness_priority + (1 - alpha) * remaining_cap_priority

        # Adaptive scaling based on bin utilization
        bin_utilization = 1.0 - bins_remain_cap[fit_indices] / bins_remain_cap.max() if bins_remain_cap.max() > 0 else np.zeros_like(bins_remain_cap[fit_indices])
        scale = np.mean(bin_utilization) if bin_utilization.size > 0 else 1.0
        priorities[fit_indices] = combined_priority * scale

        # Exploration strategy: decaying randomness based on item count and size
        num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max()) #Crude approximation since we don't have global state
        exploration_strength = max(0.0, 0.1 - num_items_packed * 0.001) * item # Decay exploration with number of items
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
    

    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)  # Handle case where all priorities are very negative after shift

    return priorities
```
