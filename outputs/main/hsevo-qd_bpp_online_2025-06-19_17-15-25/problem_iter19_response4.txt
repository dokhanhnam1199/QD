import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float, bins_remain_cap: np.ndarray, small_random_component_weight: float = 0.04849867002587613, not_fit_priority: float = -3862735374.801298, division_eps: float = 7.740148904675446e-09, fit_priority_increase_factor: float = 0.547370633207146) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are already relatively full, to reduce fragmentation.
    It also includes a small random component to encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        small_random_component_weight: Weight of the small random component. Default is 0.01.
        not_fit_priority: Priority given to bins where the item doesn't fit. Default is -1e9.
        division_eps: Epsilon value to avoid division by zero. Default is 1e-9.
        fit_priority_increase_factor: Factor to increase priority of bins where item fits. Default is 1.0.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and leaves minimal waste.
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins that are already relatively full.  We want to minimize fragmentation.
        # The smaller the remaining capacity after adding the item, the higher the priority.
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices] + fit_priority_increase_factor / (remaining_capacity[fit_indices] + division_eps) # (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]   # Avoid division by zero
        
        # Add a small random component to encourage exploration and escape local optima
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * small_random_component_weight
    
    # Give a very low priority (or negative) to bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = not_fit_priority  # Large negative value
    
    # Normalize the priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    
    return priorities
