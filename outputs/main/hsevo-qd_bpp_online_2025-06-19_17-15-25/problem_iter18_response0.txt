```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, fullness, and exploration with adaptive scaling and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Waste-oriented priority: Smaller waste is better
        waste = remaining_capacity[fit_indices]
        waste_priority = 1 / (waste + 1e-9)  # Avoid division by zero

        # Fullness priority: More full is better
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        fullness_priority = fullness

        # Adaptive scaling based on item size and remaining bin capacity
        scale = item + np.mean(bins_remain_cap[fit_indices])
        adaptive_priority = bins_remain_cap[fit_indices] / scale

        # Combine priorities with configurable weights
        waste_weight = 0.4
        fullness_weight = 0.4
        adaptive_weight = 0.2

        priorities[fit_indices] = (
            waste_weight * waste_priority +
            fullness_weight * fullness_priority +
            adaptive_weight * adaptive_priority
        )

        # Exploration: Add randomness to escape local optima
        exploration_factor = min(0.1, 0.01 * np.sum(fit_indices))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where the item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to ensure consistent selection probabilities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
