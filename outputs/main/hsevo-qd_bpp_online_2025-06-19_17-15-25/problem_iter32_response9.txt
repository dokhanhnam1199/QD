```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fullness, remaining capacity, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0
    small_number = 1e-9
    exploration_rate = 0.01
    max_exploration = 0.1
    penalty = -1e9


    if np.any(fit_indices):
        # Adaptive scaling based on remaining capacity and item size
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        # Prioritize based on fullness and remaining capacity, adaptively scaled
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + small_number)

        # Dynamic exploration factor, scaled by the number of viable bins
        exploration_factor = min(max_exploration, exploration_rate * np.sum(fit_indices))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor


    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = penalty

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)


    return priorities
```
