```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including remaining capacity,
    fit score, and bin utilization, with adaptive scaling and exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # 1. Fit Score: Prioritize bins with tighter fit.
        fit_score = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # 2. Utilization Score: Prioritize bins that are already relatively full.
        utilization_score = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices])/(bins_remain_cap[fit_indices].max()-bins_remain_cap[fit_indices].min() + 1e-9)
       
        # 3. Adaptive Scaling: Dynamically adjust the influence of fit and utilization.
        #    Bins with lower item-fit capacity should have higher priority.
        # scale = np.mean(bins_remain_cap[fit_indices])
        # scale = np.median(bins_remain_cap[fit_indices]) #can also use meadian instead of mean to avoid the influence of outliner.
        scale = item #scale the bin based on the item size

        priorities[fit_indices] = (fit_score * scale + utilization_score)

        # 4. Exploration: Add randomness to encourage exploring different bin placements.
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01

    # 5. Infeasible Bins: Assign very low priority to bins that cannot fit the item.
    priorities[remaining_capacity < 0] = -1e9

    # 6. Priority Normalization: Normalize priorities to ensure they sum to 1 (or handle negative priorities).
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
