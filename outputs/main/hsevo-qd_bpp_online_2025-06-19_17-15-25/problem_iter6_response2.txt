```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, a dynamic exploration factor, and bin diversity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness: Prioritize bins that are already relatively full
        fullness_priority = (1 - (bins_remain_cap[fit_indices] / np.max(bins_remain_cap)))
        
        # Fit: How well the item fits relative to the remaining capacity. Smaller remaining capacity is better.
        fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Combine fullness and fit
        priorities[fit_indices] = fullness_priority * fit_priority
        
        # Dynamic exploration factor: Adjust exploration based on the number of suitable bins.
        num_suitable_bins = np.sum(fit_indices)
        exploration_factor = 0.05 if num_suitable_bins > 5 else 0.15  # More exploration when fewer options

        # Add randomness for exploration, scaled by the exploration factor.
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor
        
        # Bin Diversity: Slightly favor bins that are different from the average fill level. This can prevent clustering.
        bin_diversity = np.abs(bins_remain_cap[fit_indices] - np.mean(bins_remain_cap)) / np.max(bins_remain_cap)
        priorities[fit_indices] += bin_diversity * 0.01
        

    # Very low priority to bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to ensure they sum to 1.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    return priorities
```
