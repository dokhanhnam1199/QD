```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, focusing on best fit,
    penalizing near misses, and adaptively scaling based on item size.  Includes a
    dynamically adjusted exploration factor.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0
    n_bins = len(bins_remain_cap)

    if np.any(fit_indices):
        # 1. Best Fit Emphasis: Prioritize bins where the item fits best (smallest waste).
        priorities[fit_indices] = 1.0 / (remaining_capacity[fit_indices] + 1e-9)

        # 2. Penalize Near Misses (Bins that are just too small): Soft constraint handling.
        near_miss_indices = (remaining_capacity < 0) & (bins_remain_cap >= (item - 0.1 * item)) # within 10% of fitting
        priorities[near_miss_indices] = -0.5 # Small negative priority; consider if other options exist

        # 3. Adaptive Scaling Based on Item Size: Adjust priority scaling based on the item's relative size.
        item_size_ratio = item / np.mean(bins_remain_cap[fit_indices]) if np.any(fit_indices) else 0.5  #Ratio of the current item size to average bin capacity.
        scale_factor = max(0.1, min(1.0, item_size_ratio))  # Clamp to [0.1, 1] to avoid extreme scaling
        priorities[fit_indices] *= scale_factor

        # 4. Dynamic Exploration:  Introduce randomness that *decreases* as more bins become suitable.
        #    Fewer suitable bins = more exploration needed.
        exploration_factor = 0.1 * (1 - (np.sum(fit_indices) / n_bins))  # Scale randomness based on fit ratio
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    else:
        # If NO bins fit, give a very small non-zero chance to bins which are closest to the required size.
        closest_bin_index = np.argmin(bins_remain_cap)
        priorities[closest_bin_index] = 0.0001

    # 5. Bins where the item doesn't fit at all get a very negative priority (unless we're *forced* to use them).
    priorities[remaining_capacity < 0] = np.where(priorities[remaining_capacity < 0] != -0.5, -1e9, priorities[remaining_capacity < 0])

    # Normalize priorities to ensure they sum to 1 (or handle negative priorities).
    priority_sum = np.sum(priorities)
    if priority_sum > 0:
        priorities = priorities / priority_sum
    elif priority_sum < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.full_like(priorities, 1/len(priorities))

    return priorities
```
