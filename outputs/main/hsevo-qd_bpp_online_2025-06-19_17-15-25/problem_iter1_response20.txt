```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give higher priority to bins that can fit the item closely
            priority = (cap - item) / cap  # Remaining space ratio
            priorities[i] = 1 - priority # Smaller remaining space is preferrable

            #Boost if the item fills more than half the bin
            if item / cap > 0.5:
              priorities[i] += 0.2

            # Add small constant bias to encourage filling bins
            priorities[i] += 0.1


        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
