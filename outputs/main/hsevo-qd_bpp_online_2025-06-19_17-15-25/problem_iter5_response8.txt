```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive bin priority heuristic.

    Prioritizes near-full bins that can fit item. Add adaptive parameter 
    for exploration based on bin utilization rate.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Prioritize near-full bins
        utilization_rate = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices]
        priorities[fit_indices] = utilization_rate + 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Adaptive exploration: more exploration for less utilized bins
        exploration_factor = np.mean(1 - utilization_rate) * 0.01
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    priorities[remaining_capacity < 0] = -1e9

    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
