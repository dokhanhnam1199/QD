```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the path integral formulation, let's consider all possible "paths" (bins).
    Each path has a "weight" (priority) associated with it.
    The best bin is the one with the highest "probability amplitude" of being selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Remove bins that are too small for the item
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
      return np.full(bins_remain_cap.shape, -np.inf)

    # Calculate the "energy" required to add the item to each bin (remaining space as potential energy)
    energy = bins_remain_cap

    # Introduce a "temperature" parameter to control exploration vs. exploitation
    temperature = np.std(bins_remain_cap[valid_bins]) # use the standard deviation of the valid bins
    if temperature == 0:
      temperature = 1.0  # Avoid division by zero if all valid bins have same remain_cap

    # Calculate Boltzmann-like probabilities (weights) for each bin
    probabilities = np.exp(-energy / temperature)

    # Normalize probabilities (only over the bins where the item can fit)
    normalized_probabilities = np.zeros_like(bins_remain_cap, dtype=float)
    normalized_probabilities[valid_bins] = probabilities[valid_bins] / np.sum(probabilities[valid_bins])
    
    # Penalize bins that are filled too much (approaching full capacity) to avoid creating small fragmented spaces
    fill_ratios = (bins_remain_cap - item) / bins_remain_cap
    penalty = np.zeros_like(fill_ratios, dtype=float)

    # Apply the penalty only to valid bins that can contain the item AND result in the fill ratio near to zero.
    valid_fill_ratios = fill_ratios > 0
    near_full = (fill_ratios < 0.1) & valid_bins & valid_fill_ratios

    penalty[near_full] = -10.0 # Significantly penalize nearly full bins

    return normalized_probabilities + penalty
```
