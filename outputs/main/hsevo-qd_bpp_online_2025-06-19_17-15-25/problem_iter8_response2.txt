```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_random_component_weight:float = 0.01, not_fit_priority:float = -1e9, division_eps:float = 1e-9) -> np.ndarray:
    """Combines fullness, fit, adaptive scaling, and randomness for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fit Priority: Prefer tighter fits
        fit_priority = 1 / (remaining_capacity[fit_indices] + division_eps)

        # Occupancy Priority: Prefer fuller bins
        occupancy_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + division_eps)

        # Adaptive Item Size Priority: Scale based on item size vs. avg capacity
        scale = np.mean(bins_remain_cap[fit_indices])
        item_size_priority = (item / (scale + division_eps))

        # Combine Priorities with weights
        alpha, beta, gamma = 0.5, 0.3, 0.2
        priorities[fit_indices] = alpha * fit_priority + beta * occupancy_priority + gamma * item_size_priority

        # Add constrained random exploration
        exploration_noise = np.random.rand(np.sum(fit_indices)) * small_random_component_weight
        priorities[fit_indices] += exploration_noise

    priorities[remaining_capacity < 0] = not_fit_priority

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
