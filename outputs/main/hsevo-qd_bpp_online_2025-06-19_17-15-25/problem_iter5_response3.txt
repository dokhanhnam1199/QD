```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_priority_scale: float = 1.0, no_fit_priority: float = -1000.0, waste_priority_scale: float = 0.1) -> np.ndarray:
    """Combines waste minimization with penalty for bins that don't fit."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        priorities[fit_indices] = fit_priority_scale * (bins_remain_cap[fit_indices] / (remaining_capacity[fit_indices] + 1e-9)) + waste_priority_scale * bins_remain_cap[fit_indices]
    priorities[remaining_capacity < 0] = no_fit_priority
    
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    return priorities
```
