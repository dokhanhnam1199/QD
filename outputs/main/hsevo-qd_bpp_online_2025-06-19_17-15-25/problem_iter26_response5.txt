```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fullness and remaining capacity for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item
    
    # Give high priority to bins where the item fits.
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Combine remaining capacity and fullness.
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        priorities[fit_indices] = fullness / (remaining_capacity[fit_indices] + 1e-9) # Avoid division by zero

    # Penalize bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities to improve exploration.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    
    return priorities
```
