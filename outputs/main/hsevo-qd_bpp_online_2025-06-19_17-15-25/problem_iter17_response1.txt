```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, and adaptive exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness-based priority.
        fullness = 1 - (remaining_capacity[fit_indices] / bins_remain_cap[fit_indices])
        priorities[fit_indices] += fullness

        # Fit score priority
        fit_score = (item / bins_remain_cap[fit_indices])
        priorities[fit_indices] += fit_score

        # Adaptive exploration.
        exploration_factor = min(0.1, 0.05 / (np.sum(fit_indices) + 1e-9))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities or provide equal probability for infeasible cases.
    if np.all(remaining_capacity < 0):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)
    else:
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
        elif np.sum(priorities) < 0:
            priorities = priorities - np.min(priorities)
            priorities = priorities / np.sum(priorities)

    return priorities
```
