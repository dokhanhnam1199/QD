```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on adaptive scaling, fit, fullness, and exploration, with improved handling of edge cases and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness score: Prioritize bins that are already relatively full
        fullness_score = (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))
        priorities[fit_indices] += fullness_score

        # Remaining capacity score: Prioritize bins where the item fits best (smallest waste)
        remaining_cap_score = 1.0 / (remaining_capacity[fit_indices] + 0.0001)  # Avoid division by zero
        priorities[fit_indices] += remaining_cap_score

        #Adaptive scaling based on item size and bin size
        scale = np.mean(bins_remain_cap[fit_indices])
        adaptive_scale = (item / scale + 0.1) if scale >0 else 0.1
        
        # Exploration factor
        exploration_noise = np.random.rand(np.sum(fit_indices)) * 0.01 * adaptive_scale
        priorities[fit_indices] += exploration_noise
    else:
        #If item does not fit any of the bins, find the best fit (least negative) bin and add some noise
        min_waste = np.max(remaining_capacity)
        best_fit_idx = np.argmax(remaining_capacity)

        exploration_noise = np.random.rand(1) * 0.001*item
        priorities[best_fit_idx]= exploration_noise-abs(min_waste) # Give the *least* negative bin a slight preference, encourage a new bin if it almost fits
    

    # Very low priority to bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Robust normalization
    total_priority = np.sum(priorities)
    if total_priority > 1e-6:  # Avoid division by very small number
        priorities = priorities / total_priority
    elif total_priority < -1e-6:
        priorities = priorities / abs(total_priority)
    else:
        #If all priorities are near zero give a tiny random preference to available bins
        priorities[fit_indices] = np.random.rand(np.sum(fit_indices))*1e-6
        
    return priorities
```
