```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly, 
    avoiding both nearly full bins and bins with excessive remaining capacity.
    It uses a combination of factors:
    1. Fit: 1 if the item fits, 0 otherwise.
    2. Remaining Capacity Ratio: (remaining capacity - item size) / bin size, if the item fits. Negative if item does not fit
    3. Bin Usage Ratio: item_size / (bin size) or 0 if item cannot fit. Capped to make not fitting a bin yield -1 instead of infinite negativity
    4. Capacity utilization = (binsize - binremcap) / binsize
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bin_size = 1 # Assume bin size is normalized to 1
    priorities = np.zeros_like(bins_remain_cap)
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        if item <= remaining_cap:
            remaining_capacity_ratio = (remaining_cap - item) / bin_size
            bin_usage_ratio = item / bin_size
            capacity_utilization = (bin_size-remaining_cap)/bin_size

            # Combine factors to create a priority score. Experimentally determined weights
            priorities[i] = (
                1 # Fit
                + 0.5*(1-remaining_capacity_ratio)  # prefer less remaining capacity
                + 0.3*bin_usage_ratio #Use up more bin space
                - 0.1 * abs(0.5 - capacity_utilization) #Try to fill half full bins

            )
        else:
            priorities[i] = -1 # Negative priority if the item doesn't fit

    return priorities
```
