```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
      return priorities # No valid bin

    # First Fit Decreasing-esque heuristic.  Prefer almost-full bins
    priorities[valid_bins] = (bins_remain_cap[valid_bins] - item)**2 # Smaller means more full after insertion
    priorities[valid_bins] = 1.0 / (priorities[valid_bins] + 0.00001)  # Invert to prioritize nearly full

    # Penalize bins that are too close to fitting the item perfectly
    near_fit = np.abs(bins_remain_cap - item) < 0.1 # Tolerance
    priorities[near_fit] *= 0.5  # Dampen priority of near fits

    # Slightly reward bins with more remaining capacity, so not to fill very small bins first
    priorities += bins_remain_cap / (np.max(bins_remain_cap) + 0.00001) * 0.1
    return priorities
```
