```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Best Fit heuristic component (maximize space utilization).
    # Give higher priority to bins where the item fits best (smallest remaining space).
    space_left = bins_remain_cap - item
    best_fit_priority = -np.abs(space_left)
    best_fit_priority[space_left < 0] = -np.inf  # Impossible fits have lowest priority

    # Avoid Fragmentation Heuristic: prefer partially filled bins.
    # Avoid filling an empty bin unless necessary (last resort).
    # If a bin is empty give it the worst priority unless nothing else fits.
    empty_bin_penalty = -1000  # a sufficiently large negative number
    empty_bin_mask = bins_remain_cap == bins_remain_cap.max()  # assume the max capacity represents a new bin

    # Consider bin filling ratio
    filling_ratio = item / bins_remain_cap
    filling_ratio_priority = filling_ratio

    # Combine the priorities
    priorities = best_fit_priority + filling_ratio_priority

    # Apply empty bin penalty, ONLY if an item doesn't fit in any other bin:
    if np.all(space_left < 0):
        priorities[empty_bin_mask] = 0  # give empty bins a chance in desperate situations
    else:
        priorities[empty_bin_mask] = empty_bin_penalty
        
    return priorities
```
