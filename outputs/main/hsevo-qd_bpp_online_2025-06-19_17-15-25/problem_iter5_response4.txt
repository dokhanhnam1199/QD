```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item

    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins with smaller remaining capacity (best fit)
        priorities[fit_indices] = bins_remain_cap[fit_indices] / (remaining_capacity[fit_indices] + 1e-9)


    # Penalize bins where the item doesn't fit severely.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)

    return priorities
```
