```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value for infeasible bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities # Return all -inf if no bin can fit the item.

    # Calculate the waste if the item is placed in the bin.
    waste = bins_remain_cap[feasible_bins] - item

    # Prioritize bins with minimal waste, but also consider the original remaining capacity.
    # Aim to find bins that are a "good fit" without leaving excessive space.
    priorities[feasible_bins] = -waste + bins_remain_cap[feasible_bins] # Maximize the original cap to reward high occupancy bin.

    # Introduce a scaling factor to amplify differences in the lower range of waste.
    # Adjust these hyperparameters to fine-tune the algorithm.
    waste_scaling = 1.0  # Emphasize bins that use more of available space
    # Modify waste based on some sort of exponential decay or other suitable function
    # This aims at rewarding the case where the bin almost filled (waste->0).
    priorities[feasible_bins] += waste_scaling * np.exp(-waste) # smaller the waste higher the score.
    # Additional terms can be incorporated to address the bin remaining capacity.

    return priorities
```
