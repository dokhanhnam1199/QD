import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                fit_priority_scale: float = 4.456751880260094,
                no_fit_priority: float = -7771961326.087052,
                avoid_zero_division: float = 1.1450049454118587e-10,
                priority_initial_value: float = 0.12086195688202928,
                priority_normalization_threshold_positive: float = 0.9170209195088542,
                priority_normalization_threshold_negative: float = -0.29134929024335954) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        fit_priority_scale: Scaling factor for the priority of bins where the item fits.
        no_fit_priority: Priority given to bins where the item doesn't fit.
        avoid_zero_division: Small value to avoid division by zero.
        priority_initial_value: Initial value for the priority array.
        priority_normalization_threshold_positive: Threshold for positive priority normalization.
        priority_normalization_threshold_negative: Threshold for negative priority normalization.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, priority_initial_value, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and leaves minimal waste.
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        priorities[fit_indices] = fit_priority_scale / (remaining_capacity[fit_indices] + avoid_zero_division)  # Avoid division by zero
    
    # Give a very low priority (or negative) to bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = no_fit_priority  # Large negative value
        
    # Normalize the priorities
    if np.sum(priorities) > priority_normalization_threshold_positive:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < priority_normalization_threshold_negative:
      priorities = priorities - np.min(priorities)
      priorities = priorities / np.sum(priorities)

    return priorities
