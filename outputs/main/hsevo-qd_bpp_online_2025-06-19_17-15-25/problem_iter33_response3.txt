```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, balance, and exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Waste Factor: Prioritize bins that minimize remaining space after packing.
        waste = remaining_capacity[fit_indices]
        waste_priority = 1.0 / (waste + 0.001)  # Avoid division by zero

        # Balance Factor: Penalize bins that are already too full (try to distribute items).
        bin_utilization = 1.0 - (bins_remain_cap[fit_indices] / bins_remain_cap.max()) # Assuming bins_remain_cap.max() is the bin size
        balance_penalty = np.clip(bin_utilization**2, 0, 1)  # Square it to emphasize higher utilization
        balance_priority = 1.0 - balance_penalty # high remaining capacity is favored

        # Combine waste and balance
        combined_priority = waste_priority * balance_priority
        

        # Adaptive Scaling
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = combined_priority / (scale + 0.01) # Avoid division by zero

        # Exploration: Add a small random bonus based on item size.
        exploration_strength = min(0.1, item) # Smaller items get more exploration
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
        
    else:
        priorities = np.full_like(priorities, -1e9)
        return priorities

    # Penalize bins where the item doesn't fit harshly
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(priorities)

    return priorities
```
