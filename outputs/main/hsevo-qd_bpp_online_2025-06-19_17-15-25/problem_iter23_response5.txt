```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using fit, scaled fullness, and item-aware exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Scale based on item size and remaining capacity mean
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + 1e-9)

        # Item-aware randomness, less for larger items, decaying over time
        randomness = 0.01 * np.exp(-item) #Smaller item, higher randomness
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * randomness

    priorities[remaining_capacity < 0] = -1e9

    # Robust Normalization
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.any(priorities < 0):
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
