```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several factors to determine priority:
    1.  Space Utilization: Encourages filling bins more completely by prioritizing bins where the item fits snugly.
    2.  Waste Avoidance: Discourages creating small remaining spaces that are unlikely to be filled later.
    3.  Number of Free Bins: To minimize number of used bins, add a penalty if the item doesn't fit to the current bin,

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # To avoid division by zero and log of zero.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Space Utilization: Prefer bins where the item fits well, but doesn't leave too much waste.
            fill_ratio = item / cap
            waste = cap - item

            # This term prioritizes bins where the fill ratio is high (item nearly fills the bin)
            #  but also penalizes large waste. The waste is penalized more if it is greater than the item size
            priorities[i] = fill_ratio - np.clip(waste/item, a_min=0.0, a_max=1.0)

            # A quadratic bonus for near-perfect fits. This further refines the fill_ratio preference
            #  by giving an extra bump for bins where the waste is extremely small relative to the item size.
            near_perfect_fit_bonus = np.exp(-waste / (item + epsilon))  # Exponential decay based on waste ratio
            priorities[i] += near_perfect_fit_bonus

            #Waste Avoidance penalty, the penalty is lower when the waste can perfectly fit another similar item
            waste_penalty = np.abs(waste - item) / (item+epsilon)
            priorities[i] -= waste_penalty


        else:
            # Penalty if item doesn't fit.

            priorities[i] = -1.0 # Very negative priority to avoid selecting this bin if possible

    return priorities
```
