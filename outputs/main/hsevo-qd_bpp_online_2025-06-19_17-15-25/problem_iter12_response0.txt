```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of best-fit, worst-fit considerations,
    capacity utilization, and adaptive scaling to balance exploration/exploitation.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit component: prioritize bins where the item fits most snugly
        best_fit_priority = 1.0 / (remaining_capacity[fit_indices] + 1e-9)
        
        # Worst-Fit component: prioritize bins with the most remaining capacity
        worst_fit_priority = bins_remain_cap[fit_indices] / np.max(bins_remain_cap) # Scale based on max capacity
        
        # Capacity utilization component
        capacity_utilization = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices])/ bins_remain_cap[fit_indices]
        
        #Adaptive Scaling: adjust the weights based on a simple metric - the number of available bins
        num_fit_bins = np.sum(fit_indices)
        best_fit_weight = 0.6 if num_fit_bins > 3 else 0.8  # More best-fit when fewer bins are available
        worst_fit_weight = 0.2 if num_fit_bins > 3 else 0.1 # Less worst-fit when fewer bins available
        utilization_weight = 0.2
        
        
        priorities[fit_indices] = (best_fit_weight * best_fit_priority +
                                   worst_fit_weight * worst_fit_priority +
                                   utilization_weight * capacity_utilization)

        # Introduce a small amount of randomness
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.005

    # Very low priority to bins where item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Normalization
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
