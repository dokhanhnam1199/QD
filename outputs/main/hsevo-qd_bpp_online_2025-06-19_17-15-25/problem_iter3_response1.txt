```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item

    # Give high priority to bins where the item fits and leaves minimal waste.
    fit_indices = remaining_capacity >= 0
    
    if np.any(fit_indices):
        # Prioritize bins with tighter fit, but also consider fragmentation risk.
        # A balance is achieved by considering both remaining capacity and a penalty.
        priorities[fit_indices] = (1 / (remaining_capacity[fit_indices] + 1e-9)) - (0.1 * (remaining_capacity[fit_indices]**2)) # added squared term as penalty.

    # Give a very low priority (or negative) to bins where the item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9  # Large negative value

    # Introduce a bin-filling target.  Try to target bins that are around 70-80% full after the item is added.
    target_fill_level = 0.75
    ideal_remaining = bins_remain_cap * (1 - target_fill_level)

    # Penalize bins whose remaining capacity is far from the target remaining.
    if np.any(fit_indices):
          priorities[fit_indices] -= np.abs(remaining_capacity[fit_indices] - ideal_remaining[fit_indices]) * 0.01 # Adjusted magnitude to 0.01

    # Normalize the priorities
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
