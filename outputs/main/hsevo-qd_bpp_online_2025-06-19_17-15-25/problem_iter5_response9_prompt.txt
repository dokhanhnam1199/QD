{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining capacity after adding the item.\n    remaining_capacity = bins_remain_cap - item\n    \n    # Give high priority to bins where the item fits and leaves minimal waste.\n    fit_indices = remaining_capacity >= 0\n    if np.any(fit_indices):\n        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)  # Avoid division by zero\n    \n    # Give a very low priority (or negative) to bins where the item doesn't fit.\n    priorities[remaining_capacity < 0] = -1e9  # Large negative value\n        \n    # Normalize the priorities\n    if np.sum(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < 0:\n      priorities = priorities - np.min(priorities)\n      priorities = priorities / np.sum(priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- *   Comparing (1st) vs (11th), we see the first one considers whether the item fits into the bin and prioritizes based on remaining capacity, while the last one uses the log of the ratio of item size to remaining capacity, without explicit handling of bins where the item doesn't fit.\n*   (2nd) vs (12th) is similar to above with configurable parameters in the 2nd.\n*   (6th) vs (11th), the 6th prioritizes bins that are already relatively full and adds randomness, while the 11th uses log ratios without considering fullness or randomness.\n*   Comparing (1st) vs (2nd), we see that the 2nd one has configurable parameters while first one does not.\n*   (3rd) vs (4th) is similar to above.\n*   Comparing (second worst) vs (worst), we see that they're identical.\n*   Overall: The better heuristics explicitly consider the fit of the item into the bin and prioritize minimizing waste. They often include normalization and handle cases where the item doesn't fit. Adding randomness and prioritizing fuller bins are also potentially beneficial strategies. Worse heuristics focus solely on ratios without these considerations. The introduction of configurable parameters improved the results.\n- \nOkay, let's refine \"Current Self-Reflection\" to design better bin packing heuristics, focusing on actionable strategies while avoiding common pitfalls.\n\nHere's a redefined self-reflection framework:\n\n*   **Keywords:** Adaptive tuning, constrained exploration, performance profiling, solution landscape.\n\n*   **Advice:** Implement adaptive parameter tuning based on real-time performance profiling during the search. Explore the solution landscape by intelligently perturbing promising solutions, respecting bin capacity constraints.\n\n*   **Avoid:** Blindly applying penalties without understanding their impact on the search trajectory. Relying on fixed parameter settings without empirical validation.\n\n*   **Explanation:** Adaptive tuning allows heuristics to learn and improve during execution. Constrained exploration prevents wasting computational effort on infeasible solutions while still searching for better packings. Performance profiling guides optimization efforts.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}