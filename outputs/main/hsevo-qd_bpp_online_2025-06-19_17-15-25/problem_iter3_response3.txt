```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    - How well the item fits (minimize wasted space).
    - The current fill level of the bin (encouraging filling bins evenly).
    - A penalty for bins that the item doesn't fit into.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0] + item #assume all bins of the same capacity initially.

    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item

    # High priority to bins where the item fits.
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize based on how close the fit is (smaller remaining capacity is better).
        fit_priorities = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Encourage filling bins that are already relatively full.
        fill_levels = (bin_capacity - bins_remain_cap[fit_indices]) / bin_capacity
        fill_priorities = fill_levels # Linear weight based on fill level

        # Combine the fit and fill priorities.  Experiment with different weights.
        combined_priorities = fit_priorities + fill_priorities #Equal weights to start
        priorities[fit_indices] = combined_priorities

    # Large negative priority for bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities (optional, but can help with convergence)
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
