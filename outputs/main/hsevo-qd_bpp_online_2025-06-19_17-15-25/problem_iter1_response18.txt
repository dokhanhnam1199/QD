```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Prioritizes bins with sufficient capacity but not overly large.
       Also discourages creating very small remaining capacity after packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after packing if possible
    remaining_cap_after_pack = bins_remain_cap - item

    # Give a negative priority if item cannot fit
    priorities[remaining_cap_after_pack < 0] = -np.inf

    # Base priority: fill the bin somewhat
    priorities[remaining_cap_after_pack >= 0] = bins_remain_cap[remaining_cap_after_pack >= 0] / np.sum(bins_remain_cap)

    # Penalize small remaining capacities to prevent excessive fragmentation
    small_capacity_penalty = -np.exp(-remaining_cap_after_pack)
    priorities += small_capacity_penalty

    # Add a bonus to bins close to fitting but not too close
    close_fit_bonus = np.exp(-np.abs(remaining_cap_after_pack - item) / np.mean(bins_remain_cap))
    priorities += close_fit_bonus

    return priorities
```
