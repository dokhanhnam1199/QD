```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including fit, fullness,
    remaining capacity, item size, and adaptive exploration.  Designed to be robust
    and adaptable to different problem instances.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor: Prioritize bins that are already relatively full
        fullness = bins_remain_cap[fit_indices] / bins_remain_cap.max() if bins_remain_cap.max() > 0 else np.zeros_like(bins_remain_cap[fit_indices])
        fullness_priority = fullness

        # Remaining capacity factor: Prefer bins with tighter fits but avoid excessively tight fits.
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)

        # Item size consideration: Adjust priority based on item size
        item_size_factor = item / bins_remain_cap.max() if bins_remain_cap.max() > 0 else 0 # Normalize item size
        item_size_priority = 1 - item_size_factor  # Smaller items prefer fuller bins

        # Adaptive combination of factors: Dynamically adjust weights based on fullness
        fullness_weight = 0.5 + 0.5 * np.mean(fullness) # weight is in [0.5, 1.0]  Bins more full, fullness is weighted more heavily.
        remaining_weight = 1 - fullness_weight
        
        combined_priority = fullness_weight * fullness_priority + remaining_weight * remaining_cap_priority + item_size_priority

        # Apply combined priority
        priorities[fit_indices] = combined_priority

        # Adaptive exploration strategy: Adjust exploration strength based on item size and bin variance
        bin_variance = np.var(bins_remain_cap[fit_indices]) if len(bins_remain_cap[fit_indices]) > 1 else 0
        exploration_strength = min(0.2, item * (1 - bin_variance))  # Larger item or low variance gets more exploration.
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus
        
    # Penalize bins where the item doesn't fit heavily
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.any(priorities > 0):
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        min_priority = np.min(priorities)
        priorities = priorities - min_priority
        priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.full_like(priorities, 1.0/len(priorities)) #handle edge cases where all priorities are very negative after shift
    else:
        priorities = np.full_like(priorities, 1.0/len(priorities))
    

    return priorities
```
