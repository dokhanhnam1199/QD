```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, fullness, and adaptive scaling for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Best-Fit
        best_fit_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)

        # Fullness
        fullness_priority = (bins_remain_cap[fit_indices].max() - bins_remain_cap[fit_indices]) / (bins_remain_cap[fit_indices].max() + 1e-9)

        # Adaptive Scaling
        scale = item / (bins_remain_cap[fit_indices].mean() + 1e-9)
        adaptive_priority = scale * best_fit_priority

        # Combined priority
        priorities[fit_indices] = 0.5 * adaptive_priority + 0.5 * fullness_priority

        # Exploration
        exploration_factor = np.random.rand(np.sum(fit_indices)) * (remaining_capacity[fit_indices] / (bins_remain_cap[fit_indices].max() + 1e-9)) * 0.1
        priorities[fit_indices] += exploration_factor

    priorities[remaining_capacity < 0] = -1e9

    # Normalize
    if np.any(priorities > 0):
        priorities[priorities > 0] /= np.sum(priorities[priorities > 0])
    elif np.any(priorities < 0) and np.all(priorities <= 0):
        priorities = priorities - np.min(priorities)
        if np.sum(priorities) > 0:
            priorities = priorities / np.sum(priorities)
    return priorities
```
