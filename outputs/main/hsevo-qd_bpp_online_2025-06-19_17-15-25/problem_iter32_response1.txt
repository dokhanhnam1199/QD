```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, remaining capacity with calibrated randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Scale fullness by item size and remaining cap.
        scale = np.mean(bins_remain_cap[fit_indices]) + item
        fullness_priority = (bins_remain_cap[fit_indices] / scale)

        # Prioritize bins that fit the item using the ratio of remaining capacity.
        remaining_priority = 1 / (remaining_capacity[fit_indices] + 1e-9)
        
        # Weighted combination: Favor fuller bins for larger items.
        priorities[fit_indices] = (fullness_priority + remaining_priority)

        # Calibrated exploration: more randomness for smaller bins
        exploration_factor = min(0.1, 0.01 / (np.mean(bins_remain_cap[fit_indices]) + 1e-9))
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity < 0] = -1e9

    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
