```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority for each bin, considering fullness and remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    remaining_capacity = bins_remain_cap - item
    
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins that are already relatively full, but adaptively scale based on item size.
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - remaining_capacity[fit_indices]) / bins_remain_cap[fit_indices] + 1.0 / (remaining_capacity[fit_indices] + 1e-9)
        
        # Add randomness, scaled by item size to encourage exploration.
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01 * item

    priorities[remaining_capacity < 0] = -1e9

    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    
    return priorities
```
