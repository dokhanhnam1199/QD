```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fullness, fit, adaptive scaling, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Adaptive scaling based on average remaining capacity
        scale = np.mean(bins_remain_cap[fit_indices])
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + 1e-9)

        # Penalize near misses
        near_miss_indices = (remaining_capacity > -0.1) & (remaining_capacity < 0)
        priorities[near_miss_indices] -= 0.5  # Reduce priority if it's a near miss

        # Introduce randomness, scale based on # suitable bins.
        num_suitable_bins = np.sum(fit_indices)
        exploration_factor = 0.01 / (num_suitable_bins + 1)  # Dynamic exploration
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Very low priority to bins where item doesn't fit.
    priorities[remaining_capacity < 0] = -1e9

    # Fallback: if no bins fit, prioritize least full bin.
    if not np.any(fit_indices) and len(bins_remain_cap) > 0:
        priorities = bins_remain_cap / np.max(bins_remain_cap) # Prioritize smaller values

    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)

    return priorities
```
