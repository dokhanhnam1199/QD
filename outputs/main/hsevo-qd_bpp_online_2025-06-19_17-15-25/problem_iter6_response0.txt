```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, with adaptive tuning."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # 1. Capacity Utilization: Favor bins that maximize capacity utilization *after* placing the item.
        utilization = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]

        # 2. Remaining Capacity Score: Prioritize bins with remaining capacity closest to a target value.
        #    This helps to avoid creating many very small gaps. Dynamically adjust target.
        target_capacity = np.mean(bins_remain_cap[fit_indices]) * 0.5  # e.g., aim for bins being half-full
        capacity_score = np.exp(-((bins_remain_cap[fit_indices] - item - target_capacity) ** 2) / (2 * (target_capacity/2) ** 2)) # Gaussian-like score.

        # 3. Balance: Give a slight boost to bins with *more* remaining capacity to distribute items.
        balance_score = bins_remain_cap[fit_indices] / np.max(bins_remain_cap)

        # Combine the scores with weights.  Adapt these weights based on performance.
        # This simplified version uses fixed weights, but in a real adaptive version,
        # these would be dynamically adjusted.

        weight_utilization = 0.4
        weight_capacity = 0.4
        weight_balance = 0.2

        priorities[fit_indices] = (
            weight_utilization * utilization +
            weight_capacity * capacity_score +
            weight_balance * balance_score
        )

        # Introduce small random variation for exploration. Reduce over time.
        exploration_factor = 0.005  # Start with this; adaptive tuning would adjust this.
        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * exploration_factor

    # Penalize bins where the item doesn't fit *heavily*.
    priorities[remaining_capacity < 0] = -1e9

    # Normalize.  Handle edge cases robustly.
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
        priorities = priorities - np.min(priorities)
        priorities = priorities / np.sum(priorities)
    return priorities
```
