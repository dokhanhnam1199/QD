{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on adaptive scaling, fit, fullness, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_capacity = bins_remain_cap - item\n    fit_indices = remaining_capacity >= 0\n\n    if np.any(fit_indices):\n        # Adaptive scaling based on remaining capacity\n        scale = np.mean(bins_remain_cap[fit_indices]) \n        priorities[fit_indices] = (bins_remain_cap[fit_indices] / scale) / (remaining_capacity[fit_indices] + 1e-9) # Fullness / remaining, scaled\n\n        # Introduce randomness, scaled by item size to prevent excessive exploration for large items\n        priorities[fit_indices] += np.random.rand(np.sum(fit_indices)) * 0.01 * (item + 0.1) # Scale explore\n\n    # Very low priority to bins where item doesn't fit\n    priorities[remaining_capacity < 0] = -1e9\n\n    # Normalize\n    if np.sum(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < 0:\n        priorities = priorities - np.min(priorities)\n        priorities = priorities / np.sum(priorities)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                fit_priority_scale: float = 7.682424551077083,\n                no_fit_priority: float = -5901544632.397996,\n                avoid_zero_division: float = 7.329912700727891e-09,\n                priority_initial_value: float = 0.40093602976369525) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_priority_scale: Scaling factor for the priority of bins where the item fits.\n        no_fit_priority: Priority given to bins where the item doesn't fit.\n        avoid_zero_division: Small value to avoid division by zero.\n        priority_initial_value: Initial value for the priority array.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, priority_initial_value, dtype=float)\n    \n    # Calculate remaining capacity after adding the item.\n    remaining_capacity = bins_remain_cap - item\n    \n    # Give high priority to bins where the item fits and leaves minimal waste.\n    fit_indices = remaining_capacity >= 0\n    if np.any(fit_indices):\n        priorities[fit_indices] = fit_priority_scale / (remaining_capacity[fit_indices] + avoid_zero_division)  # Avoid division by zero\n    \n    # Give a very low priority (or negative) to bins where the item doesn't fit.\n    priorities[remaining_capacity < 0] = no_fit_priority  # Large negative value\n        \n    # Normalize the priorities\n    if np.sum(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    elif np.sum(priorities) < 0:\n      priorities = priorities - np.min(priorities)\n      priorities = priorities / np.sum(priorities)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of fullness, remaining capacity, adaptive scaling, and a refined exploration strategy, while the worst heavily relies on pre-defined constants and lacks dynamic adaptation. (2nd best) vs (second worst), adaptive scaling is present in both, but the weighting and randomness are different. Comparing (1st) vs (2nd), the first incorporates a more refined exploration strategy that is item-size aware and uses decaying randomness. Comparing (3rd) vs (4th), these heuristics are nearly identical, highlighting the sensitivity of the ranking and potential for minor variations to have a significant impact. Comparing (second worst) vs (worst), both use predefined constants, but the 19th uses slightly more descriptive variable names. Overall: The best heuristics prioritize a nuanced combination of factors including best fit, fullness, adaptive scaling based on item size and remaining capacity, and strategic exploration. They dynamically adjust parameters based on item characteristics and available bin capacities, and handle edge cases robustly. Worse heuristics over-rely on constants, are less adaptive, and have less sophisticated exploration. Normalization methods are consistently applied to ensure probabilities sum to 1.\n- \nHere's a redefined approach to self-reflection for heuristic design, focusing on actionable improvements:\n\n*   **Keywords:** Data-driven adaptation, contextual scaling, robust handling, calibrated randomness.\n*   **Advice:** Design heuristics that learn from problem instance data, dynamically adjusting parameters based on context (item sizes, bin capacities, constraints) rather than relying on static values.\n*   **Avoid:** Generic considerations of \"all constraints\" or \"normalization.\" Instead, focus on specific, measurable improvements derived from problem data.\n*   **Explanation:** Move beyond simply acknowledging factors to implementing data-informed adjustments. Shift from static weighting to dynamic, context-aware scaling. Prioritize measurable robustness enhancements.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}