```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, feasibility check, and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    
    fit_indices = remaining_capacity >= 0
    if np.any(fit_indices):
        # Prioritize bins where item fits, smaller remain better
        priorities[fit_indices] = 1 / (remaining_capacity[fit_indices] + 1e-9)
        
    # Bad fit
    priorities[remaining_capacity < 0] = -1e9
        
    # Normalize
    if np.sum(priorities) > 0:
        priorities = priorities / np.sum(priorities)
    elif np.sum(priorities) < 0:
      priorities = priorities - np.min(priorities)
      priorities = priorities / np.sum(priorities)
    return priorities
```
