```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fit, fullness, adaptive scaling, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacity = bins_remain_cap - item
    fit_indices = remaining_capacity >= 0

    if np.any(fit_indices):
        # Fullness factor, prioritize almost full bins
        fullness = bins_remain_cap[fit_indices] / bins_remain_cap.max()
        fullness_priority = 1.0 - fullness # smaller remaining -> higher priority

        # Remaining capacity factor, prioritize small remaining capacity
        remaining_cap_priority = 1.0 / (remaining_capacity[fit_indices] + 0.01)

        # Combined priority: weighted sum of fullness and remaining capacity.
        # Adapt weights based on item size; larger items favor fullness.
        weight_fullness = min(item, 0.75)  # Weight increases with item size, up to 0.75
        weight_remaining = 1.0 - weight_fullness
        combined_priority = weight_fullness * fullness_priority + weight_remaining * remaining_cap_priority

        # Adaptive scaling based on average remaining capacity and item size
        scale = np.mean(bins_remain_cap) + item
        priorities[fit_indices] = combined_priority / (scale + 1e-9)

        # Exploration strategy:
        exploration_strength = min(0.05, item / 5)  # Exploration scales with item size
        exploration_bonus = np.random.rand(np.sum(fit_indices)) * exploration_strength
        priorities[fit_indices] += exploration_bonus

    else:
        # If no bin fits, give a negative priority to discourage this action.
        priorities = np.full_like(priorities, -1e9)
        return priorities

    # Penalize bins where the item doesn't fit by setting priority to a very low value
    priorities[remaining_capacity < 0] = -1e9

    # Normalize priorities, handling edge cases.
    # Apply only if there's a positive priority.
    if np.any(priorities > 0):
        sum_priorities = np.sum(priorities[priorities > 0])
        if sum_priorities > 0:
            priorities = priorities / sum_priorities
        else:
            priorities = np.zeros_like(priorities)  # all priorities are 0
    elif np.any(priorities < 0) and np.all(priorities <= 0): #all negative
         priorities = np.zeros_like(priorities)  # all priorities are 0
    else:
         priorities = np.zeros_like(priorities)

    return priorities
```
