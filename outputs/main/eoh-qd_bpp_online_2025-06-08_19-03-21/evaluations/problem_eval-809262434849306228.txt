def priority_v3(item, bins_remain_cap):
    """{This algorithm calculates priority scores for each bin based on the percentage of remaining capacity utilized if the item is placed in the bin, rewarding higher utilization and penalizing insufficient capacity.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(item / cap)  # Prioritize bins with higher utilization
        else:
            priority.append(-1000)  # Penalize bins that cannot fit the item
    return priority
