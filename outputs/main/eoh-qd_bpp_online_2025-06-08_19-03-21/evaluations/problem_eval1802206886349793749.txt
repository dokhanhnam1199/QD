def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins primarily based on the remaining capacity fit, but adds a small bonus to bins that are at least half full, aiming for a balance between tight fits and bin utilization.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fit_score = 1 / (cap - item + 0.0001)  # Higher score for tighter fit
            if cap <= 50: #100 is the bin capacity, considering bins that are at least half full
                fullness_bonus = 0.1  # Small bonus for bins at least half full
            else:
                fullness_bonus = 0
            priority_score = fit_score + fullness_bonus
        else:
            priority_score = -1  # Assign -1 for bins that cannot fit the item
        priority.append(priority_score)
    return priority
