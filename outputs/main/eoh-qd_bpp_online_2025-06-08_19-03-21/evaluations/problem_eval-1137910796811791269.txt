def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority based on the wasted space after packing, favoring bins that minimize waste relative to the item size and penalizing near-full bins and those that cannot accommodate the item.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap < item:
      priorities.append(-1)
    else:
      wasted_space = cap - item
      waste_ratio = wasted_space / item  # Waste relative to item size
      near_full_penalty = 0 if cap > 5 else 1  # Avoid almost full bins (e.g., cap <= 5)
      priority = -waste_ratio - near_full_penalty # Minimize waste, avoid near full
      priorities.append(priority)
  return priority
