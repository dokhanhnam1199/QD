def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority to each bin based on the remaining capacity, favoring bins with capacity closest to the item size without being smaller, and also considering the overall fullness of the bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority.append(1 / (cap - item + 0.0001) + (1 - cap / sum(bins_remain_cap)))  # Higher priority for closer fit and fuller bins
    else:
      priority.append(-1000)  # Very low priority if bin is too small
  return priority
