def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on the ratio of item size to remaining bin capacity, favoring bins that are neither too full nor too empty, with added bonuses for utilization close to a target utilization percentage.}"""
  priorities = []
  target_utilization = 0.75  # Aim for 75% utilization

  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / cap
      # Calculate deviation from target utilization
      deviation = abs(utilization - target_utilization)

      # Base priority: Inverse of deviation (closer to target is better)
      base_priority = 1 - deviation

      # Bonus for avoiding near-full or near-empty bins
      if utilization > 0.9 or utilization < 0.1:
        base_priority -= 0.2  # Penalize extreme utilizations

      priorities.append(base_priority)
    else:
      priorities.append(-1)
  return priority
