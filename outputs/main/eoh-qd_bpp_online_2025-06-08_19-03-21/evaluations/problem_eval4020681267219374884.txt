def priority_v3(item, bins_remain_cap):
    """{This algorithm assigns a priority score to each bin based on how much of the bin's remaining capacity the item will fill, giving preference to bins that are filled more completely without overflowing, and adds a penalty for large unused space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap
            penalty = (cap - item) / 10  # Penalty for unused space
            priority_score = fill_ratio - penalty
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
