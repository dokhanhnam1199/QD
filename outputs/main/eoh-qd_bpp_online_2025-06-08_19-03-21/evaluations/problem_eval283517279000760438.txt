def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin by considering the fill rate and penalizing bins with remaining capacity close to the item size or very large remaining capacity.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap < item:
      priority.append(-1)
    else:
      fill_rate = item / cap
      remaining_capacity_penalty = abs(cap - item - item) / 100 + (cap / 1000 if cap > 50 else 0)
      priority_score = fill_rate - remaining_capacity_penalty
      priority.append(priority_score)
  return priority
