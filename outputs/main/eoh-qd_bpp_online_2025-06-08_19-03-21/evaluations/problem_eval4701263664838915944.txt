def priority_v3(item, bins_remain_cap):
    """{This algorithm calculates priority scores based on the ratio of item size to remaining bin capacity, favoring bins where the item fills a significant portion of the remaining space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(item / (cap + 0.0001))  # Prioritize bins where the item fills a large portion of remaining space
        else:
            priority.append(-1000)  # Penalize bins that cannot fit the item
    return priority
