def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering the ratio of item size to remaining capacity, favoring bins where the item fills a large proportion of the remaining space, but also penalizing bins that are too full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap
            # Penalize bins that are too close to full, which might lead to fragmentation later
            fullness_penalty = max(0, (cap / 100 - 0.9)) * 10  # Assuming bin capacity is 100
            priority_score = fill_ratio - fullness_penalty
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
