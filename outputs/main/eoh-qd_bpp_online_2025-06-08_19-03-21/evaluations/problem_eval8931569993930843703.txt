def priority_v3(item, bins_remain_cap):
  """{This algorithm assigns priority based on the ratio of item size to remaining capacity, favoring bins where the item fills a significant portion of the bin, while penalizing bins that are too full or too empty relative to the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      bin_fullness_penalty = abs(fill_ratio - 0.75) # Penalize bins that are far from 75% full after placing item
      priority.append(fill_ratio - bin_fullness_penalty)
    else:
      priority.append(-1000)
  return priority
