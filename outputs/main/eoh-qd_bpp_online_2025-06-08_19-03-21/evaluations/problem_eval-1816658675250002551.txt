def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the percentage of remaining capacity utilized if the item is placed in that bin, adjusted by a bin occupancy factor to favor more occupied bins.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      utilization_percentage = item / (cap + 0.0001) # Avoid div by zero
      occupancy_factor = 1 - (cap / 100) # Assuming bin size is 100. Larger occupancy_factor means it is more occupied
      priority_score = utilization_percentage * (1+occupancy_factor)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
