def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on remaining capacity and a penalty proportional to the absolute difference between remaining capacity and item size, normalized by bin size.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Base priority: Use the ratio of item size to bin capacity.
      base_priority = item / cap

      # Calculate penalty based on absolute difference, normalized.
      penalty = abs(cap - item) / 100 # Linear penalty.
      adjusted_priority = base_priority - penalty
      priority.append(adjusted_priority)
    else:
      priority.append(-1)  # Bin is not suitable.

  return priority
