def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores for each bin based on remaining capacity and item size, favoring bins that can accommodate the item with minimal wasted space and penalizing those with insufficient space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(1 / (cap - item + 0.0001))  # Prioritize bins with minimal wasted space
        else:
            priority.append(-1000)  # Penalize bins that cannot fit the item
    return priority
