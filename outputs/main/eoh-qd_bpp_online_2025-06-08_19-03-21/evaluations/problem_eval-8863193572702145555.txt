def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on how much the item fills the bin (higher fill is better) and penalizes bins that would be overfilled or remain mostly empty after packing (to encourage even distribution).}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap < item:
      priorities.append(-1)  # Cannot fit
    else:
      fill_ratio = item / cap
      remaining_ratio = (cap - item) / 100 if (cap - item) > 0 else 0 # Scale to avoid excessive penalization
      priority = fill_ratio - remaining_ratio
      priorities.append(priority)
  return priority
