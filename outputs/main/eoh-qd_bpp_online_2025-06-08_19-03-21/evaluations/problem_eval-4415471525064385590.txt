def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on remaining capacity and attempts to balance bin utilization, favoring bins that are neither too empty nor too full after packing the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            utilization = (cap - waste) / cap if cap > 0 else 0
            if waste == 0:
                priorities.append(100)  # Perfect fit
            elif utilization >= 0.5 and utilization <= 0.9:
                priorities.append(70 + utilization*10)  # Good utilization
            else:
                priorities.append(50 - abs(0.7 - utilization)*50)  # Penalize under or over utilization
        else:
            priorities.append(-1)  # Cannot fit
    return priority
