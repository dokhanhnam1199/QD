def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on a penalty system considering wasted space and bin utilization, penalizing bins with large remaining capacity or poor item fit.}"""
    priority = []
    total_capacity = sum(bins_remain_cap)
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space_penalty = (cap - item) / total_capacity # Larger wasted space -> higher penalty
            utilization_score = item / cap # Closer to 1 is better utilization
            priority_score = utilization_score - wasted_space_penalty # Higher is better
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
