def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based primarily on how closely the item's size matches the bin's remaining capacity, with a small penalty for bins that are already quite full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fit_score = 1 / (abs(cap - item) + 0.0001)  # Higher score for closer fit
            fullness_penalty = (1 - (cap / 100)) # 100 is the bin capacity. larger penalty if it is full
            priority_score = fit_score - 0.1 * fullness_penalty
        else:
            priority_score = -1  # Assign -1 for bins that cannot fit the item
        priority.append(priority_score)
    return priority
