def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and how well the item fits, penalizing bins that are nearly full but still able to accommodate the item, and favoring bins that are relatively empty.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization_ratio = item / 100 #Assume bin capacity of 100
            priority_score = cap/100 - utilization_ratio #Prioritize bins that are relatively empty
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
