def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity and the closeness of the item size to a fraction of the remaining capacity, favoring bins that are neither too full nor too empty after packing.}"""
    
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate a score based on how well the item fits, favoring bins that aren't left too empty
            fit_score = (item / cap)**0.5

            # Calculate a score based on the remaining capacity after packing
            remaining_cap_score = (1 - (cap - item) / sum(bins_remain_cap))**0.5
            
            priority = fit_score * remaining_cap_score 
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign -1 priority if the item doesn't fit

    return priority
