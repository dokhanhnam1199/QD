def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin by considering both the percentage of the bin that the item would fill and the absolute remaining space after packing, favoring bins that can accommodate a significant portion of the item's size without leaving excessive unused space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_percentage = item / 100  # Percentage of bin filled by the item (assuming bin size 100)
            remaining_space = cap - item
            # Combine fill percentage and remaining space, penalizing large remaining space.
            priority_score = fill_percentage - (remaining_space / 100)**2 #Square to penalize the remaining space
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
