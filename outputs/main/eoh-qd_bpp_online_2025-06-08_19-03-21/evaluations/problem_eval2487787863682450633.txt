def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering the waste space if the item is placed in the bin, penalizing bins that would lead to significant wasted capacity.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            # Calculate a penalty based on the proportion of waste relative to bin capacity.
            waste_penalty = (waste / 100)**2
            priority_score = 1 - waste_penalty  # Higher score for less waste.
        else:
            priority_score = -1  # Assign -1 for bins that cannot fit the item
        priority.append(priority_score)
    return priority
