def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on a combination of remaining capacity fit and a bonus for bins that are already nearly full, normalized by bin capacity.}"""
    priority = []
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the fill ratio after placing the item
            fill_ratio = (cap - item) / cap
            # Assign a higher priority to bins that are already more full
            priority_score = 1 - fill_ratio # Higher value means bin is more full.
        else:
            priority_score = -1 # Assign a low priority to bins that cannot accommodate the item
        priority.append(priority_score)
    return priority
