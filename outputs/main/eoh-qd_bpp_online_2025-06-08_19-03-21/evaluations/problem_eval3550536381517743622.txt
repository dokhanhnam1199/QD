def priority_v2(item, bins_remain_cap):
    """
    {This algorithm prioritizes bins by considering the ratio of item size to remaining capacity, penalizing bins with much larger or smaller capacity compared to the item size, while favoring bins where the item fills a significant portion of the remaining capacity.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            ratio = float(item) / cap
            # Penalize ratios far from 1, favor ratios closer to 1 (item fills a significant portion of the bin)
            priority_score = 1 - abs(1 - ratio)  
        else:
            priority_score = -1  # Item doesn't fit
        priority.append(priority_score)
    return priority
