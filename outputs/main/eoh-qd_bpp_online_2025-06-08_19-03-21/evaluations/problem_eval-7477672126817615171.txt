def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how closely the item size matches the bin's remaining capacity, with a bonus for bins that can accommodate the item perfectly and a penalty for those with significant wasted space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      if wasted_space == 0:
        priority_score = float('inf')  # Perfect fit, highest priority
      else:
        priority_score = 1.0 / (abs(cap - 2*item) + 0.001) #Prioritize bins where remaining capacity is close to twice the item size, avoid division by zero
    else:
      priority_score = -1  # Disqualify bins with insufficient capacity
    priority.append(priority_score)
  return priority
