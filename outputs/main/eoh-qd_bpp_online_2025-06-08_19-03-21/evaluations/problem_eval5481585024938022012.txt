def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on how well the item fills the bin, with bonuses for near-perfect fits and penalties for near-overflows.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap

      if fill_ratio > 0.95:  # Bonus for almost filling the bin
        priority_score = 1 + (fill_ratio - 0.95) * 10
      elif fill_ratio < 0.05: # large gap is penalized.
          priority_score = -100
      else:
        priority_score = fill_ratio

      #Penalty for near overflows.
      if (cap - item) < 0.01:
          priority_score = priority_score - 10
      priority.append(priority_score)

    else:
      priority.append(-1)
  return priority
