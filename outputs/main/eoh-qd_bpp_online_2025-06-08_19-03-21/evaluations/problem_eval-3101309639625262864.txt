def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority score to each bin based on how close its remaining capacity is to the item size, penalizing bins that are either too full or have excessive space left after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      space_utilization = item / 100.0  # Assuming bin capacity is 100
      capacity_utilization = (100 - cap + item) / 100.0
      priority_score = -abs(space_utilization - capacity_utilization) # Minimize the difference
    else:
      priority_score = -1 
    priority.append(priority_score)
  return priority
