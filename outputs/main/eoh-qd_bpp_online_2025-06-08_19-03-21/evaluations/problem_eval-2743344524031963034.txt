def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on the ratio of item size to remaining capacity, enhanced by a bonus proportional to the bin's utilization, thus rewarding near-full bins that can efficiently accommodate the new item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = (100 - cap) / 100  # Bin's utilization (0 to 1)
            fit_ratio = item / cap  # Ratio of item size to remaining capacity (0 to 1)
            priority_score = fit_ratio + (0.5 * utilization)  # Combine fit ratio and utilization bonus
        else:
            priority_score = -1  # Cannot fit
        priority.append(priority_score)
    return priority
