def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on the ratio of item size to remaining capacity, exponentially penalizing bins that are nearly full or have a very large remaining capacity.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fit_ratio = item / cap
            # Penalize bins that are nearly full (cap close to item) or have very large capacity.
            near_full_penalty = 0 if cap > item else 1 *  (1-fit_ratio)**2  # Square to make penalty steeper.
            large_cap_penalty =  0 if cap>item else (cap/item) * ((cap - item) / cap)**2
            priority_score = fit_ratio - near_full_penalty - large_cap_penalty
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
