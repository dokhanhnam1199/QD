def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on how full the bin would be after packing the item, favoring bins that would be filled closest to a target utilization level (e.g., 75%).}"""
  priority = []
  target_utilization = 0.75
  bin_capacity = 1.0  # Assuming bins have capacity 1.0; adjust if different
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      current_utilization = (bin_capacity - remaining_cap) / bin_capacity
      diff_from_target = abs(current_utilization - target_utilization)
      priority.append(1 / (diff_from_target + 0.0001))
    else:
      priority.append(-1)
  return priority
