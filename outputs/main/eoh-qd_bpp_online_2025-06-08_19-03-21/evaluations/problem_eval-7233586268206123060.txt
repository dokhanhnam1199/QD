def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores by considering the ratio of item size to remaining capacity, favoring bins where the item fills a significant portion of the remaining space but also penalizing bins that become too full after packing the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap #The portion the item is going to fill up
            if fill_ratio > 0.8: # High fill ratio but not completely full
                priority = fill_ratio - (1- fill_ratio) # fill_ratio minus remaining space ratio
            else:
                priority = fill_ratio * 0.5 # low fill ratio
            priorities.append(priority)
        else:
            priorities.append(-1)
    return priority
