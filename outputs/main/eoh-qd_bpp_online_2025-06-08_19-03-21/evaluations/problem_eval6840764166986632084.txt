def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of how full the bin would be after packing the item and a penalty for bins that are already very full.}"""
    
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate how full the bin will be
            fullness = (item / cap)

            # Calculate a penalty based on how full the bin already is.  Bins that are close to full are penalized more.
            preexisting_fullness = 1 - (cap / sum(bins_remain_cap)) if sum(bins_remain_cap) > 0 else 0
            penalty = preexisting_fullness**2 

            priority = fullness * (1 - penalty)
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign -1 priority if the item doesn't fit

    return priority
