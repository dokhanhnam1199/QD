def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity and waste minimization, giving higher priority to bins that can accommodate the item with minimal wasted space and lower priority to bins that would be nearly filled or leave significant wasted space.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            if waste == 0:
                priorities.append(100)  # Perfect fit
            elif waste <= cap * 0.2:
                priorities.append(80 - waste)  # Good fit, low waste
            else:
                priorities.append(50 - waste)   # Fit, but significant waste
        else:
            priorities.append(-1)  # Cannot fit
    return priority
