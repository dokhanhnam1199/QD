def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering both the wasted space if the item is placed in the bin and the relative fullness of the bin, giving preference to bins that minimize wasted space while also being relatively full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            fullness = 1 - (cap / 100)  # Assuming bin capacity is 100
            priority_score = (1 / (wasted_space + 0.0001)) + fullness # Prioritize less wasted space & more fullness
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
