def priority_v2(item, bins_remain_cap):
    """{This algorithm scores bins based on a combined metric of capacity utilization after packing the item and a bonus for bins already partially filled, while also factoring in a small penalty for bins that lead to high fragmentation.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = item / 100 # 100 is the bin capacity
            post_fill_level = (100 - cap + item)/100
            fill_bonus = post_fill_level**2
            fragmentation_penalty = ((cap - item)/100)**3
            priority_score = utilization + fill_bonus - fragmentation_penalty
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
