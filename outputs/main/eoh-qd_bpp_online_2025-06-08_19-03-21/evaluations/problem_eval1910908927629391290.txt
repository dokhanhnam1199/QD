def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priorities based on a bin's suitability to hold the item relative to the average remaining capacity, favoring bins closer to this average if they can accommodate the item.}"""
    priority = []
    avg_capacity = sum(bins_remain_cap) / len(bins_remain_cap) if bins_remain_cap else 0
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate a score based on how close the bin's capacity is to the average, scaled by how well the item fits
            proximity_score = 1 - abs(cap - avg_capacity) / avg_capacity if avg_capacity > 0 else 1
            fit_score = item / cap  # Ratio of item size to bin capacity
            p = 50 * proximity_score + 50 * fit_score
        else:
            p = -1
        priority.append(p)
    return priority
