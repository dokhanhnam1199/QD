def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns a priority score to each bin based on the degree to which the item fills the bin relative to the item size, adding a bonus for bins with a certain level of utilization, and penalizing bins that are too empty or cannot fit the item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / 100 # item size relative to bin capacity 
            utilization = (100 - cap) / 100 # degree of bin utilization 
            priority_score = fill_ratio * (utilization + 0.1)  # Favor bins that are relatively full

            if cap - item > 50: # If after packing, remaining capacity is too high, penalize
                priority_score -= 0.5

            
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
