def priority_v2(item, bins_remain_cap):
    """
    {This algorithm assigns a priority score to each bin based on the ratio of item size to remaining capacity, penalizing bins with much larger or smaller remaining capacities compared to the item size and awarding a bonus for near-perfect fits.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining = cap - item
            ratio = item / (cap + 0.0001)  # Ratio of item size to bin capacity (avoid division by zero)
            priority_score = (1 - abs(ratio - 1))  # Score based on how close the ratio is to 1 (ideal fit)
            if remaining <= 0.1: #near perfect fit bonus
              priority_score+=0.5
        else:
            priority_score = -1  # Assign negative priority if item doesn't fit
        priority.append(priority_score)
    return priority
