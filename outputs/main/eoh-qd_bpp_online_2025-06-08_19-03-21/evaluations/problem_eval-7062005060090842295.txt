def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item fits, using a ratio of item size to remaining capacity and adding a bonus for bins whose remaining capacity is close to a target utilization level.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Base priority: Ratio of item size to remaining capacity.
      base_priority = item / cap

      # Calculate utilization. Target utilization is 75%.
      utilization = item / cap

      # Calculate distance from target utilization (0.75).
      distance = abs(utilization - 0.75)

      # Bonus for being close to target utilization.  Higher bonus for being closer. Subtract distance from 1 to get bonus. The closer it is, the larger the number.
      bonus = max(0, 1 - distance)

      # Add bonus to base priority.
      adjusted_priority = base_priority + bonus
      priority.append(adjusted_priority)
    else:
      priority.append(-1)  # Bin is not suitable.

  return priority
