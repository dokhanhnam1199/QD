def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins that can accommodate the item, giving higher scores to bins with a remaining capacity closer to the item size but also considering the overall percentage of bin utilization.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = item / (cap + 0.0001)  # Percentage of bin utilization
            priority.append(utilization * (1 / (cap - item + 0.0001)))  # Combine utilization and wasted space
        else:
            priority.append(-1000)  # Penalize bins that cannot fit the item
    return priority
