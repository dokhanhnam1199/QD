def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on the percentage of space utilization after placing the item, giving higher priority to bins that achieve higher utilization while still leaving a small amount of buffer.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            utilization = (item / cap) * 100
            if utilization >= 95:
                priorities.append(70)  # High utilization, but risky
            elif utilization >= 70:
                priorities.append(80 + (utilization - 70)) # Good utilization
            else:
                priorities.append(50 + utilization/20) # Lower utilization
        else:
            priorities.append(-1)  # Cannot fit
    return priority
