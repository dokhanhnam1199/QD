def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score based on a weighted combination of bin utilization after packing the item and the potential imbalance created by packing, favoring balanced utilization across bins.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = (100 - cap + item) / 100 # Bin utilization after packing.
            imbalance_penalty = abs(utilization - 0.5) # Penalty for bins far from half-full (more balanced)
            priority = utilization - 0.75*imbalance_penalty  # Prioritize high utilization and balanced use
            priorities.append(priority)
        else:
            priorities.append(-1)  # Invalid bin
    return priority
