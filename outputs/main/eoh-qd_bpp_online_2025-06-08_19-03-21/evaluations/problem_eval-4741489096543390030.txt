def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of the ratio of item size to remaining capacity and a penalty for bins that are already nearly full.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            capacity_ratio = item / cap
            fullness_penalty = (cap / 100)**2 # Higher penalty for nearly full bins
            priority = capacity_ratio - fullness_penalty
            priorities.append(priority)
        else:
            priorities.append(-1)
    return priority
