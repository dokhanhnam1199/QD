def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the ratio of item size to remaining capacity, adjusted by a bonus if the remaining capacity falls within a target range.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      ratio = item / cap  # Item size as a proportion of remaining capacity.

      # Target a "sweet spot" for remaining capacity. Reward bins that are not too full and not too empty
      if item <= cap <= 2 * item:  # Example target range: remaining capacity between item size and twice item size.
        bonus = 0.2  # Add a bonus to the priority if within the target range.
      else:
        bonus = 0

      priority.append(ratio + bonus)
    else:
      priority.append(-1)  # Bin is not suitable

  return priority
