def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by balancing remaining capacity fit with a dynamically adjusted penalty based on the average fullness of all bins.}"""
    priority = []
    average_fullness = sum([(1 - (cap / 100)) for cap in bins_remain_cap])/ len(bins_remain_cap)
    for cap in bins_remain_cap:
        if cap >= item:
            fit_score = 100 / (cap - item + 0.0001)
            fullness_penalty = (average_fullness - (1- (cap/100)))**2 #Penalize difference between bin's fullness and average fullness.
            priority_score = fit_score - fullness_penalty
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
