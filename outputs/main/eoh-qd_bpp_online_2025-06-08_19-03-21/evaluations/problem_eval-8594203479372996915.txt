def priority_v3(item, bins_remain_cap):
    """
    {This algorithm assigns a priority score to each bin based on the percentage of bin utilization after placing the item, rewarding higher utilization while still ensuring the item fits, and adding a bonus for bins that were previously empty.}
    """
    priority = []
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining = cap - item
            utilization = (item / (cap+0.0001)) #ratio of how well item can fill this bin
            priority_score = utilization
            if cap == 1:  # Assuming bin size is 1, implying previously empty
                priority_score += 5 #adding bonus if previously empty
            
        else:
            priority_score = -1  # Assign negative priority if item doesn't fit
        priority.append(priority_score)
    return priority
