def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the ratio of item size to remaining capacity, scaled by a penalty factor related to how full the bin would be after packing the item, favoring bins that result in a high fill ratio without being overly full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      post_fill = (cap - item) / sum(bins_remain_cap) if sum(bins_remain_cap) > 0 else 0
      penalty = 1 - post_fill
      priority.append(fill_ratio * penalty)
    else:
      priority.append(-1000)
  return priority
