def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering the absolute and relative wasted space, favoring bins that result in moderate remaining capacity after placing the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            relative_waste = waste / cap if cap > 0 else 0
            
            priority = 0
            if waste == 0:
                priority = 100  # Perfect fit
            elif relative_waste <= 0.1:
                priority = 90 - (relative_waste * 100) # Excellent fit, very little waste
            elif relative_waste <= 0.3:
                priority = 70 - (relative_waste * 100) # Good fit, acceptable waste
            elif relative_waste <= 0.6:
                priority = 50 - (relative_waste * 100) # Moderate waste, still acceptable
            else:
                priority = 30 - (relative_waste * 100) # High waste

            priorities.append(priority)
        else:
            priorities.append(-1)  # Cannot fit
    return priority
