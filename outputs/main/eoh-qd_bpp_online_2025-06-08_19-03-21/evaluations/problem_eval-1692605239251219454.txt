def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on how full they would be after placing the item, favoring bins that are close to being completely full but not overfilled, while also considering the current fill level of the bins.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            rem_cap = cap - item
            bin_size = sum(bins_remain_cap) / len(bins_remain_cap)  # Approximate bin size
            fill_ratio = (bin_size - rem_cap) / bin_size
            priority = fill_ratio - abs(fill_ratio - 1) # Favor high fill ratio but penalize overfilling
            priorities.append(priority)
        else:
            priorities.append(-float('inf'))
    return priority
