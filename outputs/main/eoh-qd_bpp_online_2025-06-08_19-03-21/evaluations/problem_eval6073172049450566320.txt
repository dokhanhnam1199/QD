def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores for each bin based on how well the item's size aligns with the bin's remaining capacity, rewarding bins that have a remaining capacity close to a multiple of the item's size, while penalizing bins that cannot fit the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            ideal_fit = round(cap / item) * item
            priority = -abs(cap - ideal_fit)
            priorities.append(priority)
        else:
            priorities.append(-float('inf'))
    return priority
