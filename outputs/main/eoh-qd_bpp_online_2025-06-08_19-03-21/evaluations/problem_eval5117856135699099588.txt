def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and a penalty for bins that would become too full after packing the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority = cap - item  # Remaining capacity after packing. Prefer bins with less remaining capacity.
            if cap - item < item: #Penalty for bins that would be more than half full after packing
                priority -= 0.5*(item - (cap - item))
            priorities.append(priority)
        else:
            priorities.append(-1)  # Invalid bin
    return priority
