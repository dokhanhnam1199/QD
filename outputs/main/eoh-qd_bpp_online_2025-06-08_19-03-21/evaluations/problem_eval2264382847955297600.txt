def priority_v2(item, bins_remain_cap):
  """{This algorithm uses a cost-benefit analysis, rewarding bins with a high ratio of item size to remaining capacity while penalizing bins with small absolute remaining capacity.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Benefit: How much of the bin's capacity will be utilized.
      benefit = item / cap

      # Cost: Inverse of remaining capacity - penalizes bins that will be nearly full. Adding 0.0001 prevents division by zero.
      cost = 1 / (cap + 0.0001)

      # Priority = Benefit - Cost
      priority.append(benefit - cost)
    else:
      priority.append(-1000)  # Very low priority if bin is too small
  return priority
