def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on remaining capacity and penalizes bins that are too empty or too full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fit_score = 1 / (cap + 0.0001)  # Higher score for smaller remaining capacity
            #Penalty for empty bins + penalty for almost full bins
            empty_penalty = (cap / 100)**2 
            full_penalty = max(0, (1- cap/item)**2 if item > 0 else 0)

            priority_score = fit_score - empty_penalty - full_penalty
        else:
            priority_score = -1  # Assign -1 for bins that cannot fit the item
        priority.append(priority_score)
    return priority
