def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of the wasted space after packing and the utilization rate of the bin, favoring bins that minimize waste and maximize utilization.}"""
    
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate wasted space after packing
            wasted_space = cap - item

            # Calculate utilization rate of the bin after packing
            utilization_rate = item / cap
            
            # Assign a priority score based on wasted space and utilization
            priority = utilization_rate / (1 + wasted_space)
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign -1 priority if the item doesn't fit

    return priority
