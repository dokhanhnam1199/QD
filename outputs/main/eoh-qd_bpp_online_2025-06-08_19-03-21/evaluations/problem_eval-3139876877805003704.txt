def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on the ratio of item size to remaining capacity, favoring bins where the item fills a significant portion of the remaining space without overflowing, and also considers the absolute remaining capacity.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            ratio = item / cap
            priority_score = ratio * (1 / (cap + 0.0001)) #Consider both the ratio and the absolute remaining capacity
        else:
            priority_score = -1000  # Penalize bins that cannot fit the item
        priority.append(priority_score)
    return priority
