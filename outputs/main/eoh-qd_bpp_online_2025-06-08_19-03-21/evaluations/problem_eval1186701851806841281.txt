def priority_v2(item, bins_remain_cap):
    """
    {This algorithm assigns a priority score to each bin based on the wasted space after placing the item, favoring bins that minimize the wasted space relative to the item size while avoiding overflow, and adds a bonus if the remaining capacity is greater than half of item.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining = cap - item
            priority_score = 1 - (remaining / (item + 0.0001))  # Favor less wasted space relative to item size
            if remaining > item / 2:
                priority_score += 0.5  # Bonus for leaving at least half the item size as free space.
        else:
            priority_score = -1  # Assign negative priority if item doesn't fit
        priority.append(priority_score)
    return priority
