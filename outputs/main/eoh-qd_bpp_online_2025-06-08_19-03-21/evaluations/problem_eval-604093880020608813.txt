def priority_v2(item, bins_remain_cap):
    """
    {This algorithm assigns a priority score to each bin based on the remaining capacity after placing the item, favoring bins with closer remaining capacity to the item size while avoiding overflow, and adds a bonus if the item fits perfectly.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining = cap - item
            priority_score = 1 / (remaining + 0.0001)  # Avoid division by zero and favor smaller remaining capacity
            if remaining == 0:
                priority_score += 10  # Bonus for perfect fit
        else:
            priority_score = -1  # Assign negative priority if item doesn't fit
        priority.append(priority_score)
    return priority
