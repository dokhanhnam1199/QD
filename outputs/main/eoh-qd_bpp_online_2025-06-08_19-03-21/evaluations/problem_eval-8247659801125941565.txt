def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin, favoring bins with remaining capacity close to the item size and penalizing both near-empty and near-full bins using a combined ratio and difference approach.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      capacity_ratio = float(item) / cap
      capacity_diff = cap - item
      priority_score = capacity_ratio - (capacity_diff / (cap + 0.001))
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
