def priority_v2(item, bins_remain_cap):
    """{This algorithm combines fill ratio and balance, prioritizing bins that offer a good fit relative to the item size while simultaneously considering the overall balance of bin utilization across all bins.}"""
    priorities = []
    total_capacity = sum(bins_remain_cap)
    num_bins = len(bins_remain_cap)
    average_fill = (total_capacity - sum(bins_remain_cap)) / num_bins if num_bins > 0 else 0

    for cap in bins_remain_cap:
        if cap < item:
            priorities.append(-float('inf'))
        else:
            fill_ratio = item / (cap + item) #Consider the item size in comparison
            balance_factor = abs((cap - item) - average_fill) / (total_capacity / num_bins + 1e-9) #Penalize deviation from average
            priority = fill_ratio - balance_factor
            priorities.append(priority)
    return priority
