{
     "algorithm": "This algorithm assigns priority based on a combination of remaining capacity after packing the item and the absolute difference between remaining capacity and item size, favoring bins that result in a small remaining capacity and a close fit.",
     "code": "def priority_v2(item, bins_remain_cap):\n  \"\"\"{This algorithm assigns priority based on a combination of remaining capacity after packing the item and the absolute difference between remaining capacity and item size, favoring bins that result in a small remaining capacity and a close fit.}\"\"\"\n  priority = []\n  for cap in bins_remain_cap:\n    if cap >= item:\n      remaining_cap = cap - item\n      diff = abs(remaining_cap - item)\n      priority.append(1 / (remaining_cap + 0.0001) + 1 / (diff + 0.0001))\n    else:\n      priority.append(-1)\n  return priority",
     "objective": 3.18109,
     "other_inf": null,
     "SLOC": 14.0,
     "cyclomatic_complexity": 5.0,
     "halstead": 89.85848369899593
}