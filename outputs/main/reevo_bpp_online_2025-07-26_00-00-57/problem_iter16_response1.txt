```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on feasible bins and uses quadratic penalties for gaps
    to prioritize nearly full bins while ensuring simplicity in logic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasible bins (bins with less capacity than the item) with -inf
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate the gap between remaining capacity and item size for feasible bins
    gap = bins_remain_cap - item

    # Apply quadratic penalty to gaps for feasible bins to prioritize nearly full bins
    gap_penalty = - (gap ** 2) * 0.01

    # Combine penalty for infeasibility and the quadratic gap penalty
    priority_score = penalty + gap_penalty

    return priority_score
```
