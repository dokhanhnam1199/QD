[
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response1.txt_stdout.txt",
    "code_path": "problem_iter20_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that offer a close fit to the item, penalizes bins\n    with significantly underutilized space, and ensures that only feasible bins (those that\n    can accommodate the item) are considered.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins with remaining capacity close to item size\n    base_priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)\n\n    # Penalize underused bins to avoid creating bins that are too small and leftover bins\n    usage_discount = ((bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()) ** 2 * 0.01\n\n    # Combine base priority and usage discount into a final score\n    priority_score = base_priority - usage_discount\n\n    # Ensure only feasible bins have a non-negative score\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response2.txt_stdout.txt",
    "code_path": "problem_iter20_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response3.txt_stdout.txt",
    "code_path": "problem_iter20_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = (1 - normalized_cap) ** 2 * 0.01\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins by reducing their priority inversely with remaining capacity\n    underuse_penalty = (max_cap - bins_remain_cap) * 0.005\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty - underuse_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 3,
    "obj": 149.30195452732352,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response4.txt_stdout.txt",
    "code_path": "problem_iter20_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full with a quadratic gap penalty,\n    strongly penalizes infeasibility, and inversely reduces the priority of underused bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Quadratic decreasing priority based on remaining capacity gap\n    capacity_gap = bins_remain_cap - item\n    base_priority = np.where(capacity_gap >= 0, -capacity_gap**2, -np.inf)\n\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Inversely reduce the priority of underused bins, avoid division by zero\n    max_cap = bins_remain_cap.max()\n    usage_discount = np.where(capacity_gap >= 0, 1 / (max_cap - bins_remain_cap + 1e-6), 0)\n\n    # Combine base priority and usage discount into a final score\n    priority_score = base_priority - usage_discount\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response5.txt_stdout.txt",
    "code_path": "problem_iter20_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (max_cap - bins_remain_cap) ** 2 * 0.01, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins by reducing their priority inversely with remaining capacity\n    underuse_penalty = np.where(bins_remain_cap >= item, (max_cap - bins_remain_cap) * 0.005, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty - underuse_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response6.txt_stdout.txt",
    "code_path": "problem_iter20_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (bins_remain_cap - item) ** 2, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins by reducing their priority inversely with remaining capacity\n    underuse_penalty = (max_cap - bins_remain_cap) * 0.005\n\n    # Calculate final priority score\n    priority_score = normalized_cap - gap_penalty - underuse_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response7.txt_stdout.txt",
    "code_path": "problem_iter20_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (max_cap - bins_remain_cap) ** 2 * 0.01, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins by reducing their priority inversely with remaining capacity\n    underuse_penalty = np.where(bins_remain_cap >= item, (max_cap - bins_remain_cap) * 0.005, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty - underuse_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response8.txt_stdout.txt",
    "code_path": "problem_iter20_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = (1 - normalized_cap) ** 2 * 0.01\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins by reducing their priority inversely with remaining capacity\n    underuse_penalty = (max_cap - bins_remain_cap) * 0.005\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty - underuse_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 8,
    "obj": 149.30195452732352,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response9.txt_stdout.txt",
    "code_path": "problem_iter20_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (max_cap - bins_remain_cap) ** 2 * 0.01, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins by reducing their priority inversely with remaining capacity\n    underuse_penalty = np.where(bins_remain_cap >= item, (max_cap - bins_remain_cap) * 0.005, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty - underuse_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response0.txt_stdout.txt",
    "code_path": "problem_iter21_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Quadratic penalty for bins that are underused relative to the largest bin\n    usage_penalty = (1 - normalized_cap) ** 2\n\n    # Penalty for bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Combine penalties and benefits to form the priority score\n    priority_score = infeasibility_penalty + usage_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response1.txt_stdout.txt",
    "code_path": "problem_iter21_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Quadratic penalty for bins that have less remaining capacity than the item\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Inverse priority for underused bins (quadratic reduction)\n    underuse_penalty = (1 - normalized_cap)**2 * 100\n\n    # Base priority is the normalized remaining capacity\n    base_priority = normalized_cap\n\n    # Combine base priority and penalties into a final score\n    priority_score = base_priority + penalty - underuse_penalty\n\n    return priority_score",
    "response_id": 1,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response2.txt_stdout.txt",
    "code_path": "problem_iter21_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority,\n    focusing on feasible solutions and avoiding unnecessary normalizations.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Linear decreasing priority based on remaining capacity\n    base_priority = (normalized_cap - item / max_cap)\n\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = (normalized_cap.min() - normalized_cap)**2 * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority - usage_discount\n\n    return priority_score + penalty",
    "response_id": 2,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response3.txt_stdout.txt",
    "code_path": "problem_iter21_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the capacities, applies quadratic penalties for \n    infeasible bins, and inversely reduces underused bins' priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap == 0:\n        normalized_capacities = bins_remain_cap  # Avoid division by zero\n    else:\n        normalized_capacities = bins_remain_cap / max_cap\n\n    # Base priority is proportional to the remaining capacity\n    base_priority = normalized_capacities\n\n    # Penalize bins that have less capacity than the item itself (quadratic penalty)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -((item - bins_remain_cap) / max_cap) ** 2, 0)\n\n    # Penalize underused bins inversely (quadratic reduction of priority)\n    underuse_discount = (1 - normalized_capacities) ** 2 * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority + infeasibility_penalty - underuse_discount\n\n    # Ensure infeasible bins get a very low priority\n    priority_score[bins_remain_cap < item] = -np.inf\n\n    return priority_score",
    "response_id": 3,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response4.txt_stdout.txt",
    "code_path": "problem_iter21_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Quadratic penalty for bins that are underused (capacity much larger than item)\n    quadratic_discount = (normalized_cap - item / bins_remain_cap.max())**2 * 0.1\n\n    # Strict penalty for infeasible bins (bins that cannot accommodate the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Combine normalization, quadratic discount, and infeasibility penalty\n    priority_score = normalized_cap - quadratic_discount + infeasibility_penalty\n\n    return priority_score",
    "response_id": 4,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]