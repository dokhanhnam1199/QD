{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full with a quadratic gap penalty,\n    strongly penalizes infeasibility, and inversely reduces the priority of underused bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Quadratic decreasing priority based on remaining capacity gap\n    capacity_gap = bins_remain_cap - item\n    base_priority = np.where(capacity_gap >= 0, -capacity_gap**2, -np.inf)\n\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Inversely reduce the priority of underused bins\n    max_cap = bins_remain_cap.max()\n    usage_discount = np.where(capacity_gap >= 0, (max_cap - bins_remain_cap)**2 * 0.01, 0)\n\n    # Combine base priority and usage discount into a final score\n    priority_score = base_priority - usage_discount\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that offer a close fit to the item, penalizes bins\n    with significantly underutilized space, and ensures that only feasible bins (those that\n    can accommodate the item) are considered.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins with remaining capacity close to item size\n    base_priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)\n\n    # Penalize underused bins to avoid creating bins that are too small and leftover bins\n    usage_discount = ((bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()) ** 2 * 0.01\n\n    # Combine base priority and usage discount into a final score\n    priority_score = base_priority - usage_discount\n\n    # Ensure only feasible bins have a non-negative score\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)\n\n[Reflection]\nPrioritize close fits, penalize underuse, enforce feasibility via large penalties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}