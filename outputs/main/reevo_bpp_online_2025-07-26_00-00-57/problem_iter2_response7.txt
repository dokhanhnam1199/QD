```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation gives a high priority to bins that are closer to being full
    while ensuring that bins where the item cannot fit receive a very low priority.
    The priority score is calculated based on the remaining capacity relative to the
    original capacity of the bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Original bin capacities, assuming all bins start with the same capacity
    bins_original_cap = np.max(bins_remain_cap)
    
    # Penalty for bins with less remaining capacity than the item (can't fit the item)
    penalties = (bins_remain_cap < item) * -np.inf
    
    # Calculate priority: moving closer to full has a priority proportional to the fullness
    priority = 1 - (bins_remain_cap / bins_original_cap)
    
    # Apply penalties to bins where the item can't be placed
    priority += penalties
    
    # Invert so that bins closer to full but feasible get the highest priority
    priority = -priority
    
    return priority
```
