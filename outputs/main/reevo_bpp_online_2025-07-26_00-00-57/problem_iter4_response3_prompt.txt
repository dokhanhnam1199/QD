{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. It focuses on filling\n    bins with the second smallest gap first to encourage less fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority with remaining capacity relative to item size\n    priority = np.maximum(0, bins_remain_cap - item) / item\n    \n    # Penalize bins that cannot fit the item\n    priority[bins_remain_cap < item] -= 2\n    \n    # Encourage filling the bin with the second smallest gap\n    valid_gaps = bins_remain_cap - item\n    valid_gaps_indices = np.argsort(valid_gaps)\n    \n    # Check if there's a valid second smallest gap\n    if len(valid_gaps_indices) > 1:\n        second_smallest_gap_index = valid_gaps_indices[1]\n        priority[second_smallest_gap_index] += 3  # can be tuned\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used, using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. It also penalizes gaps and normalizes capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Normalize the remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Base priority is higher for bins with less remaining capacity (closer to being full)\n    base_priority = (1 - normalized_cap)\n\n    # Penalize bins that have less capacity than the item itself (make them infeasible)\n    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize bins with large gaps after adding the item\n    gap_penalty = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / max_cap, 0)\n\n    # Combine penalties and base priority into a final score\n    priority_score = base_priority - gap_penalty + feasibility_penalty\n\n    return priority_score\n\n[Reflection]\nNormalize capacities, penalize gaps, and ensure feasibility explicitly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}