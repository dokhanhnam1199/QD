{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It strongly penalizes infeasible bins and\n    aims to balance usage to avoid leftover bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: Favor bins that are near full, but not less than item size\n    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority - usage_discount\n\n    # Ensure infeasible bins have the lowest priority\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full, and penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate feasible gaps and find the second smallest gap\n    feasible_gaps = bins_remain_cap - item\n    feasible_gaps = feasible_gaps[feasible_gaps >= 0]\n    if len(feasible_gaps) > 1:\n        second_smallest_gap = np.partition(feasible_gaps, 1)[1]\n    else:\n        second_smallest_gap = feasible_gaps[0] if len(feasible_gaps) > 0 else np.inf\n\n    # Favor bins with gaps close to the second smallest gap\n    gap_penalty = np.where(feasible_gaps >= 0, (bins_remain_cap - item - second_smallest_gap) ** 2 * -0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + gap_penalty + penalty_infeasibility\n\n    return priority_score\n\n[Reflection]\nNormalize capacities, penalize infeasibility, favor close gaps; avoid overly complex discounts.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}