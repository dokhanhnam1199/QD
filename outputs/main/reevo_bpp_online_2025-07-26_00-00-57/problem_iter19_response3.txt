```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full with a quadratic gap penalty,
    strongly penalizes infeasibility, and inversely reduces the priority of underused bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Quadratic gap penalty for bins that are closer to being full
    gap_penalty = (1 - bins_remain_cap / bins_remain_cap.max())**2

    # Penalize bins that have less capacity than the item itself
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Inversely reduce priority for underused bins
    underused_bin_penalty = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.01

    # Combine gap penalty, infeasibility penalty, and underused bin penalty into a final score
    priority_score = (gap_penalty - underused_bin_penalty) + infeasibility_penalty

    return priority_score
```
