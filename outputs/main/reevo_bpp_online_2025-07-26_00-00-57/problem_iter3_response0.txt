```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are near full, penalizes infeasible fits,
    and normalizes the capacity gaps. It aims to efficiently use bin space while avoiding
    underutilization and ensuring that items are placed in feasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins where the item cannot fit
    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Base priority: prioritize bins that are near full
    base_priority = (bins_remain_cap - item) / bins_remain_cap.max()

    # Penalize bins that are far from being full (larger gaps)
    gap_penalty = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max() * 0.2

    # Combine base priority and penalties into a final score
    priority_score = base_priority - gap_penalty

    # Ensure infeasible bins have the lowest priority
    priority_score = priority_score + infeasible_penalty

    return priority_score
```
