```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and penalizes infeasible
    fits, gaps, and underused bins while maintaining readability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate a base priority, with a higher score for bins closer to being full
    base_priority = (bins_remain_cap - item) / bins_remain_cap

    # Penalize bins with larger remaining capacity to avoid gaps
    gap_penalty = bins_remain_cap * 0.01

    # Combine penalties and base priority to get final score
    priority_score = base_priority - gap_penalty + infeasible_penalty

    return priority_score
```
