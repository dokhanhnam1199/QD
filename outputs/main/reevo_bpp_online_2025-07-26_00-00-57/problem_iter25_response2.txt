```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gap penalties, strictly penalizes
    infeasibility, and simplifies logic. Bins that are closer to being full get
    higher priority, but the priority is strictly reduced for bins that cannot
    accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    base_priority = bins_remain_cap / bins_remain_cap.max()

    # Penalize bins that have less capacity than the item itself to -inf
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic penalty for bins that are far from being full, scaled by item size
    gap_penalty = ((bins_remain_cap - item) / bins_remain_cap.max()) ** 2

    # Combine base priority, infeasibility penalty, and quadratic gap penalty
    priority_score = base_priority - gap_penalty

    return priority_score + infeasibility_penalty
```
