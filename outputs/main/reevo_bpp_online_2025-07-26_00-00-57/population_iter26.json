[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes capacities, and penalizes small bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Normalize remaining capacities relative to the maximum remaining capacity\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize small bins to avoid creating bins that are too small\n    small_bin_penalty = np.where(normalized_cap < 0.25, -0.1, 0)\n\n    # Combine penalties and quadratic gap into a final score\n    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation strictly penalizes infeasibility and uses negative\n    quadratic gap penalties to prioritize bins with less remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign -inf priority to bins that cannot accommodate the item\n    infeasible_mask = bins_remain_cap < item\n    priority_score = np.where(infeasible_mask, -np.inf, 0)\n\n    # Calculate negative quadratic gap penalty for feasible bins\n    feasible_remain_cap = bins_remain_cap[~infeasible_mask]\n    gap_penalty = -(feasible_remain_cap - item) ** 2\n\n    # Combine gap penalty into final score for feasible bins\n    priority_score[~infeasible_mask] = gap_penalty\n\n    return priority_score",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes capacities, and penalizes small bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Normalize remaining capacities relative to the maximum remaining capacity\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize small bins to avoid creating bins that are too small\n    small_bin_penalty = np.where(normalized_cap < 0.25, -0.1, 0)\n\n    # Combine penalties and quadratic gap into a final score\n    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty\n\n    return priority_score",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims for a balanced scoring system that considers the remaining\n    capacity and bin usage, with judicious penalties to avoid excessive bin usage and\n    underutilization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the base priority based on the remaining capacity\n    base_priority = bins_remain_cap - item\n\n    # Penalize bins that have less capacity than the item itself heavily\n    item_size_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Encourage bins that are closer to being full\n    fill_factor_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.005\n\n    # Combine the base priority with penalties and discounts\n    priority_score = base_priority - fill_factor_discount\n\n    # Return the final priority score with consideration for bins that cannot fit the item\n    return priority_score + item_size_penalty",
    "response_id": 3,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation strictly penalizes infeasibility and prefers bins that are\n    closer to being full using a quadratic gap penalty. It simplifies the logic by\n    focusing on feasibility and gap penalties.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign -inf priority to bins that cannot accommodate the item\n    infeasible_mask = bins_remain_cap < item\n    priority_score = np.where(infeasible_mask, -np.inf, 0)\n\n    # Calculate quadratic gap penalties for feasible bins\n    feasible_remain_cap = bins_remain_cap[~infeasible_mask]\n    gap_penalties = (item - feasible_remain_cap)**2\n\n    # Update priority scores with negative gap penalties (higher score is better)\n    priority_score[~infeasible_mask] = -gap_penalties\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself heavily\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for bins that can hold the item but with a gap\n    gap_penalty = np.where(bins_remain_cap >= item, -(bins_remain_cap - item) ** 2, 0)\n\n    # Combine base priority (favoring bins with more remaining capacity) and penalties\n    priority_score = bins_remain_cap + gap_penalty + penalty\n\n    return priority_score",
    "response_id": 5,
    "obj": 4.11846828879138,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation strictly penalizes infeasibility and applies quadratic penalties only for feasible bins,\n    using negative scoring for gap minimization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -(capacity_gap ** 2), 0)\n\n    # Calculate final priority score\n    priority_score = infeasibility_penalty + quadratic_gap_penalty\n\n    return priority_score",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign -inf priority to bins that cannot accommodate the item\n    infeasible_mask = bins_remain_cap < item\n    priority_score = np.where(infeasible_mask, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    feasible_remain_cap = bins_remain_cap[~infeasible_mask]\n    gap_penalty = (item - feasible_remain_cap) ** 2\n\n    # Combine gap penalty into final score for feasible bins\n    priority_score[~infeasible_mask] = -gap_penalty\n\n    return priority_score",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -(capacity_gap ** 2), 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]