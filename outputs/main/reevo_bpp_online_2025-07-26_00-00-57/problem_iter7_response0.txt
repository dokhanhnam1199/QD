```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins that are nearly full, while
    avoiding infeasibility by penalizing bins with less capacity than the item.
    It also slightly favors bins with smaller gaps, aiming for a balanced logic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasibility strictly for bins that cannot fit the item
    infeasibility_penalty = -np.inf * (bins_remain_cap < item)

    # Base priority: prioritize bins that are nearly full
    base_priority = bins_remain_cap / bins_remain_cap.max()

    # Penalize large gaps quadratically
    gap_penalty = -(bins_remain_cap - item) ** 2

    # Combine base priority and penalties into a final score
    priority_score = base_priority + gap_penalty

    # Ensure infeasible bins have the lowest priority
    priority_score = np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)

    return priority_score
```
