```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation simplifies the penalty structure, focuses on feasible bins,
    and uses effective prioritization with quadratic penalties to favor bins that
    are nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasible bins (bins with remaining capacity less than the item size)
    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Calculate the gap between the remaining capacity and the item size
    gap = bins_remain_cap - item
    
    # Apply quadratic penalty to gaps to prioritize bins with smaller gaps
    # The penalty is zero for infeasible bins as they are already penalized with -np.inf
    quadratic_penalty = - (gap ** 2) * 0.01
    
    # Combine the infeasibility penalty and the quadratic gap penalty
    priority_score = infeasible_penalty + quadratic_penalty
    
    return priority_score
```
