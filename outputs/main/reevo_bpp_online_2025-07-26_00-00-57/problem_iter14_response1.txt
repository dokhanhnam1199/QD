```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that can accommodate the item with a higher
    remaining capacity. It heavily penalizes bins that cannot accommodate the item.
    Quadratic penalties are used to discourage over-penalty for underused bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear priority based on remaining capacity
    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Quadratic penalty for underused bins to discourage leftover space
    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.01

    # Heavily penalize infeasible bins
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Combine base priority and usage discount
    priority_score = base_priority - usage_discount + penalty

    return priority_score
```
