{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on normalizing capacities, prioritizing nearly full bins,\n    applying quadratic gap penalties, strictly penalizing infeasibility, favoring minimal gaps,\n    simplifying scoring, and avoiding excessive calculations.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Base priority: prioritize nearly full bins\n    base_priority = (1 - normalized_cap) * (bins_remain_cap >= item)\n\n    # Quadratic gap penalty for underused bins\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) ** 2 * 0.01\n\n    # Strictly penalize infeasibility (bins where item cannot fit)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Combine scores\n    priority_score = base_priority - usage_discount + infeasibility_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins based on how full they are, while also\n    penalizing bins that have less capacity than the item itself to avoid\n    infeasibility. It aims to balance the usage of bins and avoid suboptimal gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining_after_item = bins_remain_cap - item\n\n    # Set a high negative score for infeasible bins\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate priority based on remaining capacity after placing the item\n    # This will make bins with less remaining capacity (closer to being full) have higher priority\n    priority_from_capacity = remaining_after_item\n\n    # Penalize bins that are overfilled by a small amount to avoid suboptimal gaps\n    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)\n\n    # Combine the priority from capacity and smooth penalty into a final score\n    priority_score = priority_from_capacity + smooth_penalty + infeasibility_penalty\n\n    return priority_score\n\n[Reflection]\nFocus on normalized remaining capacity, penalize infeasibility, smoothly penalize gaps, simplify calculations, and use quadratic discount.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}