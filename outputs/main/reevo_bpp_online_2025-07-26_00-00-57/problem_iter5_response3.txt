```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, normalizes capacities,
    prioritizes bins that are near full, penalizes infeasibility, and balances
    priorities while favoring the second smallest gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Priority for bins that can fit the item: penalize infeasibility
    feasible = bins_remain_cap >= item
    penalty_infeasibility = np.where(feasible, 0, -np.inf)

    # Calculate gaps if the item is added to each bin
    gaps = np.where(feasible, bins_remain_cap - item, np.inf)

    # Favor the second smallest gap
    sorted_gaps = np.sort(gaps[gaps < np.inf])
    second_smallest_gap = sorted_gaps[1] if len(sorted_gaps) > 1 else sorted_gaps[0]
    favor_second_smallest = np.where(gaps == second_smallest_gap, 0.1, 0)

    # Combine normalized capacity, penalty for infeasibility, and favor for second smallest gap
    priority_score = normalized_cap + penalty_infeasibility + favor_second_smallest

    return priority_score
```
