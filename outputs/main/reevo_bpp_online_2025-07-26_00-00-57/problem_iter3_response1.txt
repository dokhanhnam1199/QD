```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and penalizes bins that are
    infeasible for the item. Bins that are closer to being full get higher priority,
    but bins with less remaining capacity than the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority is highest for bins with remaining capacity closest to the item size
    base_priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)

    # Penalize gaps by reducing priority for bins with significantly more remaining capacity than the item
    gap_penalty = np.where(bins_remain_cap > 2 * item, -(bins_remain_cap - 2 * item) / bins_remain_cap.max(), 0)

    # Combine base priority and gap penalty into a final score
    priority_score = base_priority + gap_penalty

    return priority_score
```
