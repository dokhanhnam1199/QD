[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full while avoiding the smallest gap strategy which might lead to fragmentation,\n    and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap > 0:\n        normalized_cap = bins_remain_cap / max_cap\n    else:\n        normalized_cap = bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate feasible gaps\n    feasible_gaps = bins_remain_cap - item\n    feasible_gaps = feasible_gaps[feasible_gaps >= 0]\n\n    # Favor bins with gaps close to the average gap (to avoid fragmentation without overly filling bins)\n    if len(feasible_gaps) > 0:\n        avg_gap = feasible_gaps.mean()\n        gap_penalty = -((bins_remain_cap - item - avg_gap) ** 2) * 0.01\n    else:\n        gap_penalty = np.zeros_like(bins_remain_cap)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + gap_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 0,
    "obj": 61.46788990825689,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, penalizes infeasibility,\n    and prioritizes bins with nearly full capacity by penalizing larger gaps. It also\n    adjusts weights for better balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap == 0:\n        normalized_cap = np.zeros_like(bins_remain_cap)\n    else:\n        normalized_cap = bins_remain_cap / max_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -0.01 * gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = 2 * normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 1,
    "obj": 4.4674910251296325,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps quadratically.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps quadratically, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -0.01 * gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps quadratically.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps quadratically, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -gaps**2 * 0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It slightly favors bins with smaller gaps but avoids excessive calculations and\n    normalizes the base priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = (bins_remain_cap - item) / bins_remain_cap.max()\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Normalize base priority to be in the range [0, 1]\n    normalized_base_priority = (base_priority - base_priority.min()) / (base_priority.max() - base_priority.min())\n\n    # Combine penalties and priorities, infeasibility overrides others\n    priority_score = normalized_base_priority + small_gap_favor\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)",
    "response_id": 4,
    "obj": 4.427602712405275,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -gaps**2 * 0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by heavily penalizing bins with less capacity than the item.\n    It also uses quadratic gap penalties to favor bins with smaller gaps, aiming for a balanced logic.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly for bins that cannot fit the item\n    infeasibility_penalty = -np.inf * (bins_remain_cap < item)\n\n    # Base priority: prioritize bins that are nearly full\n    base_priority = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize large gaps quadratically\n    gap_penalty = -(bins_remain_cap - item) ** 2\n\n    # Combine base priority and penalties into a final score\n    priority_score = base_priority + gap_penalty\n\n    # Ensure infeasible bins have the lowest priority\n    priority_score = np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)\n\n    return priority_score",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    penalizes infeasibility, and favors gaps close to the smallest gap.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate feasible gaps and find the smallest gap\n    feasible_gaps = bins_remain_cap - item\n    feasible_gaps = feasible_gaps[feasible_gaps >= 0]\n    smallest_gap = feasible_gaps.min() if len(feasible_gaps) > 0 else np.inf\n\n    # Favor bins with gaps close to the smallest gap\n    gap_penalty = np.where(feasible_gaps >= 0, (bins_remain_cap - item - smallest_gap) ** 2 * -0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + gap_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 7,
    "obj": 4.098524132429212,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins based on how full they are, while also\n    penalizing bins that have less capacity than the item itself to avoid\n    infeasibility. It aims to balance the usage of bins and avoid suboptimal gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining_after_item = bins_remain_cap - item\n\n    # Set a high negative score for infeasible bins\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate priority based on remaining capacity after placing the item\n    # This will make bins with less remaining capacity (closer to being full) have higher priority\n    priority_from_capacity = remaining_after_item\n\n    # Penalize bins that are overfilled by a small amount to avoid suboptimal gaps\n    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)\n\n    # Combine the priority from capacity and smooth penalty into a final score\n    priority_score = priority_from_capacity + smooth_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 8,
    "obj": 76.4260071798963,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    strictly penalizes infeasibility, favors smaller gaps directly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalty for infeasibility: strictly penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap >= item, 0, -np.inf)\n\n    # Calculate gaps if the item is added to each bin\n    gaps = bins_remain_cap - item\n\n    # Favor smaller gaps: penalize larger gaps\n    # Smaller gaps get higher priority (less penalty)\n    gap_penalty = gaps / max_cap if max_cap > 0 else gaps\n\n    # Combine normalized capacity, penalty for infeasibility, and gap penalty\n    priority_score = normalized_cap + penalty_infeasibility - gap_penalty\n\n    return priority_score",
    "response_id": 9,
    "obj": 6.471878739529327,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  }
]