{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Quadratic penalty for bins that have less remaining capacity than the item\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Inverse priority for underused bins (quadratic reduction)\n    underuse_penalty = (1 - normalized_cap)**2 * 100\n\n    # Base priority is the normalized remaining capacity\n    base_priority = normalized_cap\n\n    # Combine base priority and penalties into a final score\n    priority_score = base_priority + penalty - underuse_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Quadratic penalty for bins that are underused relative to the largest bin\n    usage_penalty = (1 - normalized_cap) ** 2\n\n    # Penalty for bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Combine penalties and benefits to form the priority score\n    priority_score = infeasibility_penalty + usage_penalty\n\n    return priority_score\n\n[Reflection]\nReduce complexity, focus penalties, normalize consistently, and enhance feasibility prioritization.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}