```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    basic_priority = bins_remain_cap - item
    
    # Assign a large negative score to bins where the item won't fit
    basic_priority[basic_priority < 0] = -np.inf
    
    # Normalize scores to be between 0 and 1
    min_priority = np.min(basic_priority)
    max_priority = np.max(basic_priority)
    if max_priority != min_priority:
        norm_priority = (basic_priority - min_priority) / (max_priority - min_priority)
    else:
        norm_priority = basic_priority  # If all scores are the same (e.g., all bins are full), no normalization is needed
    
    # Penalty for bins which are nearing reachability for overpacking, to avoid penalty for insufficient space
    space_penalty = np.where(bins_remain_cap > item, bins_remain_cap - item, 0)
    max_space_penalty = np.max(space_penalty)
    if max_space_penalty > 0:
        space_penalty = space_penalty / max_space_penalty
    
    # Combine linear priority with a tapering function of the utilisation level and a corrective term towards fragmentation
    lambda_.fix = 0.2  # Hyperparameter keeping space-efficient ( chóng biên) tendencies towards fragmentation expectation
    combined_priority = norm_priority * np.exp(-lambda_fix * space_penalty)
    
    return combined_priority
```
