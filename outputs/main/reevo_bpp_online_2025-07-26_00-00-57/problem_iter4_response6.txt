```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on balancing remaining capacity, usage of bins, and penalties.
    Bins that can accommodate the item with less remaining capacity (closer to being full) receive
    higher priority, while bins that cannot fit the item receive an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself with a very low priority
    feasibility_mask = bins_remain_cap >= item

    # Calculate base priority: higher for bins with less remaining capacity
    base_priority = np.where(feasibility_mask, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), 0)

    # Penalize underused bins to avoid leftover bins, scaled by the difference from maximum capacity
    usage_discount = np.where(feasibility_mask, (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max(), 0) * 0.1

    # Combine base priority and usage discount
    priority_score = base_priority - usage_discount

    # Assign very low priority (-np.inf) to infeasible bins
    priority_score[~feasibility_mask] = -np.inf

    return priority_score
```
