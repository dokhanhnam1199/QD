```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used. Bins that are closer to being full get higher priority, but with
    quadratic penalties for large gaps and strict penalties for infeasibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins with remaining capacity close to item size
    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Quadratic penalty for the gap between remaining capacity and item size
    gap_penalty = -((bins_remain_cap - item) ** 2) * 0.1

    # Final priority score: sum of base priority and gap penalty
    priority_score = base_priority + gap_penalty

    # Penalize infeasibility: if an item cannot fit in a bin, assign -inf priority
    return np.where(bins_remain_cap < item, -np.inf, priority_score)
```
