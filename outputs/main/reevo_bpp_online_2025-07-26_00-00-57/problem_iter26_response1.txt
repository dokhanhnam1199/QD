```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation strictly penalizes infeasibility and uses negative
    quadratic gap penalties to prioritize bins with less remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Assign -inf priority to bins that cannot accommodate the item
    infeasible_mask = bins_remain_cap < item
    priority_score = np.where(infeasible_mask, -np.inf, 0)

    # Calculate negative quadratic gap penalty for feasible bins
    feasible_remain_cap = bins_remain_cap[~infeasible_mask]
    gap_penalty = -(feasible_remain_cap - item) ** 2

    # Combine gap penalty into final score for feasible bins
    priority_score[~infeasible_mask] = gap_penalty

    return priority_score
```
