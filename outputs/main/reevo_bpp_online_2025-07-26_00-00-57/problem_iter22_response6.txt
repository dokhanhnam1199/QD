```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, applies quadratic penalties,
    strictly penalizes infeasibility, and inversely reduces underused binsâ€™ priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Penalty for bins that cannot fit the item
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic penalty for bins that are underused relative to the largest bin
    usage_penalty = (1 - normalized_cap) ** 2

    # Combine penalties to form the priority score
    # Higher priority for bins with more remaining capacity that can fit the item
    priority_score = infeasibility_penalty - usage_penalty

    return priority_score
```
