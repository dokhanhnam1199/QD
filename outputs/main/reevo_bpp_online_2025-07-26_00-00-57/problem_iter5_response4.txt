```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers normalized capacities, prioritizes bins near full,
    penalizes infeasibility, gaps, balances priorities, and favors second smallest gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Base priority: Favor bins that are near full
    base_priority = normalized_cap

    # Penalize bins that have less capacity than the item itself (infeasible)
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate gaps between item and bin capacity
    gaps = bins_remain_cap - item

    # Penalty for gaps: Smaller gaps are better, but favor the second smallest gap
    sorted_gaps = np.sort(gaps[gaps >= 0])
    second_smallest_gap_penalty = np.where(gaps == sorted_gaps[1], -0.05, 0) if len(sorted_gaps) > 1 else 0

    # Combine base priority, infeasibility penalty, and gap penalties into a final score
    priority_score = base_priority + infeasibility_penalty + second_smallest_gap_penalty

    return priority_score
```
