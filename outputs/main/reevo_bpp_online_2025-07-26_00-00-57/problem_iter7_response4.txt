```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin to place the given item.

    This implementation focuses on prioritizing nearly full bins while penalizing
    infeasibility strictly and favoring bins with smaller gaps.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Base priority: closer to being full gets higher priority
    base_priority = (bins_remain_cap - item) / bins_remain_cap

    # Penalize infeasibility: if item cannot fit, assign a large negative score
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Favor smaller gaps: penalize larger gaps with a quadratic term
    gap_penalty = (bins_remain_cap - item) ** 2 * 0.01

    # Combine base priority, penalties into a final score
    priority_score = base_priority + penalty - gap_penalty

    return priority_score
```
