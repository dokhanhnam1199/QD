```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on normalized remaining capacity, penalizes infeasibility,
    and smoothly penalizes gaps to balance the usage of bins effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after placing the item
    remaining_after_item = bins_remain_cap - item

    # Set a high negative score for infeasible bins
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap

    # Base priority: prioritize nearly full bins
    base_priority = (1 - normalized_cap) * (bins_remain_cap >= item)

    # Smooth penalty for remaining gaps to avoid suboptimal gaps
    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)

    # Combine the base priority and smooth penalty into a final score
    priority_score = base_priority + smooth_penalty + infeasibility_penalty

    return priority_score
```
