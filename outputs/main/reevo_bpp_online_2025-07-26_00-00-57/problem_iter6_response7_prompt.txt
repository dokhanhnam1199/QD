{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers normalized capacities, prioritizes bins near full,\n    penalizes infeasibility, gaps, balances priorities, and favors second smallest gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Base priority: Favor bins that are near full\n    base_priority = normalized_cap\n\n    # Penalize bins that have less capacity than the item itself (infeasible)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps between item and bin capacity\n    gaps = bins_remain_cap - item\n\n    # Penalty for gaps: Smaller gaps are better, but favor the second smallest gap\n    sorted_gaps = np.sort(gaps[gaps >= 0])\n    second_smallest_gap_penalty = np.where(gaps == sorted_gaps[1], -0.05, 0) if len(sorted_gaps) > 1 else 0\n\n    # Combine base priority, infeasibility penalty, and gap penalties into a final score\n    priority_score = base_priority + infeasibility_penalty + second_smallest_gap_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full, penalizes infeasibility, and balances\n    priorities while favoring the second smallest gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps and find the second smallest gap\n    gaps = np.sort(bins_remain_cap - item)\n    gaps = gaps[gaps >= 0]  # only consider feasible gaps\n    second_smallest_gap = gaps[1] if len(gaps) > 1 else gaps[0]\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = (bins_remain_cap - item - second_smallest_gap)**2 * -0.01\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score\n\n[Reflection]\nSimplify gap handling, use squared penalties, and avoid unnecessary sorts for better performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}