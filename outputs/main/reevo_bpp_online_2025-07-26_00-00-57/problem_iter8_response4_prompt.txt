{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin to place the given item.\n\n    This implementation focuses on prioritizing nearly full bins while penalizing\n    infeasibility strictly and favoring bins with smaller gaps.\n\n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Base priority: closer to being full gets higher priority\n    base_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize infeasibility: if item cannot fit, assign a large negative score\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Favor smaller gaps: penalize larger gaps with a quadratic term\n    gap_penalty = (bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine base priority, penalties into a final score\n    priority_score = base_priority + penalty - gap_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It also slightly favors bins with smaller gaps but avoids excessive calculations.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = (bins_remain_cap - item) / bins_remain_cap.max()\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties and priorities, infeasibility overrides others\n    priority_score = base_priority + small_gap_favor\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)\n\n[Reflection]\nAvoid excessive penalties, normalize base priority, and ensure infeasible bins are strictly penalized.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}