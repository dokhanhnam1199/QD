```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remaining_capacity = bins_remain_cap - item
    normalized_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else remaining_capacity

    # Calculate the number of bins used (penalty for higher number of bins)
    bins_used = np.sum(bins_remain_cap < item) / len(bins_remain_cap)

    # Calculate priority score for each bin
    priority_score = normalized_capacity - bins_used

    # Set bins where item doesn't fit to have the lowest priority
    priority_score[bins_remain_cap < item] = -np.inf

    return priority_score
```
