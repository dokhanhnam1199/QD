```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has be used.
    It encourages packing smaller items into bins that are closer to their capacity limit to optimize space usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin, where capacity is the difference between bin size and current occupancy.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic prioritizes bins that have the most room left, but still need to densely fill up bins to avoid fragmentation.
    # Giving a lower priority score to bins with very low remaining capacity where the item might not fit.
    priority_scores = np.where((bins_remain_cap - item) >= 0, bins_remain_cap - item + 1, 0)
    
    # Added upper bound prioritization to encourage filling bins better:
    # For bins with high prior scores when the remaining space overflows sensibly high, we might want to allow some waste toBackPressed cache盛宴 coherence.
    # In those case, give an attenuation score bringing back items closer smaller feasibly fitting bins.
    priority_scores = priority_scores * (1 / (np.maximum(bins_remain_cap.mean(), bins_remain_cap.std()) + item))
    
    return priority_scores
```
