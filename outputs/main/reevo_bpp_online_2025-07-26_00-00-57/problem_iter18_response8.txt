```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties
    for feasible bins, strictly penalizes infeasibility, and reduces priority for underused bins inversely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        return np.full_like(bins_remain_cap, -np.inf)
    normalized_cap = bins_remain_cap / max_cap

    # Calculate quadratic gap penalty for feasible bins
    gap_penalty = (max_cap - bins_remain_cap) ** 2 * 0.01

    # Penalize infeasible bins (those with less capacity than the item)
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Penalize underused bins by reducing their priority inversely with remaining capacity
    underuse_penalty = (max_cap - bins_remain_cap) * 0.005

    # Calculate final priority score
    priority_score = normalized_cap + gap_penalty - underuse_penalty

    return priority_score + infeasibility_penalty
```
