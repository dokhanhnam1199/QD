```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, normalizes capacities,
    strictly penalizes infeasibility, favors smaller gaps directly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap

    # Penalty for infeasibility: -np.inf for bins that cannot fit the item
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Favor smaller gaps directly by penalizing larger gaps
    gaps = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    gap_penalty = -gaps / max_cap if max_cap > 0 else -gaps

    # Combine normalized capacity, penalty for infeasibility, and gap penalty
    priority_score = normalized_cap + penalty_infeasibility + gap_penalty

    return priority_score
```
