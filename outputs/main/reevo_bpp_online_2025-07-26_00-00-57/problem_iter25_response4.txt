```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gap penalties, strictly penalizes
    infeasibility, and simplifies logic. Avoids unnecessary normalization;
    prioritizes feasible bins without underuse penalties. Scales by bin capacity
    for clarity and effectiveness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasibility strictly
    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap penalty for remaining capacity
    gap_penalty = (bins_remain_cap - item) ** 2 * 0.01

    # Combine penalties into a final score, ensuring infeasible bins are heavily penalized
    priority_score = infeasible_penalty + gap_penalty

    return priority_score
```
