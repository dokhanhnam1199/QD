{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins based on how full they are, while also\n    penalizing bins that have less capacity than the item itself to avoid\n    infeasibility. It aims to balance the usage of bins and avoid suboptimal gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining_after_item = bins_remain_cap - item\n\n    # Set a high negative score for infeasible bins\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate priority based on remaining capacity after placing the item\n    # This will make bins with less remaining capacity (closer to being full) have higher priority\n    priority_from_capacity = remaining_after_item\n\n    # Penalize bins that are overfilled by a small amount to avoid suboptimal gaps\n    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)\n\n    # Combine the priority from capacity and smooth penalty into a final score\n    priority_score = priority_from_capacity + smooth_penalty + infeasibility_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It slightly favors bins with smaller gaps but avoids excessive calculations and\n    normalizes the base priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = (bins_remain_cap - item) / bins_remain_cap.max()\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Normalize base priority to be in the range [0, 1]\n    normalized_base_priority = (base_priority - base_priority.min()) / (base_priority.max() - base_priority.min())\n\n    # Combine penalties and priorities, infeasibility overrides others\n    priority_score = normalized_base_priority + small_gap_favor\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)\n\n[Reflection]\nNormalize priorities, penalize infeasibility strictly, and favor smaller gaps for better online BPP solutions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}