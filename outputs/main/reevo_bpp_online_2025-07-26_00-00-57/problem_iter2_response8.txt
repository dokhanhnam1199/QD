```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on scaling, penalizing underuse, and clear item capacity checks.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    base_priority = (bins_remain_cap - item) / bins_remain_cap

    # Penalize bins that have less capacity than the item itself
    penalty_for_small_bins = np.where(bins_remain_cap < item, -2.0, 0)

    # Penalize underused bins to avoid creating bins too small and leftover bins
    # This penalty increases the more the bin is under-used compared to the largest bin
    usage_discount = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = base_priority - usage_discount + penalty_for_small_bins

    # Ensure bins without enough space are not considered
    priority_score[bins_remain_cap < item] = -np.inf

    return priority_score
```
