```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,
    prioritizes nearly full bins, normalizes selectively, penalizes small bins,
    avoids underuse penalties, and enhances conditional penalties for feasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasibility strictly
    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap penalty for nearly full bins
    quadratic_gap_penalty = (bins_remain_cap - item)**2

    # Penalize small bins to avoid creating bins too small and leftover bins
    small_bin_penalty = (bins_remain_cap.max() - bins_remain_cap) * 0.01

    # Base priority for bins that can fit the item
    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Combine all components into a final score
    priority_score = base_priority - quadratic_gap_penalty - small_bin_penalty

    # Ensure infeasible bins have the lowest priority
    return feasibility_penalty + priority_score
```
