```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes capacities, prioritizes nearly full bins using a quadratic gap function,
    and strictly penalizes infeasibility to ensure balance and feasibility in online BPP.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap

    # Calculate quadratic gap penalty for nearly full bins
    gap_penalty = (1 - normalized_cap) ** 2

    # Penalize bins that have less capacity than the item itself
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Combine gap penalty and infeasibility penalty into a final score
    priority_score = gap_penalty + infeasibility_penalty

    return priority_score
```
