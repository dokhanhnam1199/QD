```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and penalizes bins that are
    infeasible for the item. Bins that are closer to being full get higher priority,
    but bins with less remaining capacity than the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority based on remaining capacity
    base_priority = bins_remain_cap - item

    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Priority score is the base priority plus the penalty
    priority_score = base_priority + penalty

    # Normalize the priority score to ensure clearer logic and readability
    max_priority = np.max(priority_score)
    min_priority = np.min(priority_score[priority_score != -np.inf])
    priority_score = (priority_score - min_priority) / (max_priority - min_priority)

    # Assign -np.inf to bins that cannot fit the item
    priority_score[bins_remain_cap < item] = -np.inf

    return priority_score
```
