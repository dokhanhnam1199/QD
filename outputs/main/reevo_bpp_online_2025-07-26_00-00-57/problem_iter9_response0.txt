```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used. It prioritizes bins that are closer to being full with a quadratic
    gap penalty and strictly penalizes infeasibility. It favors minimal gaps and
    simplifies scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    base_priority = bins_remain_cap / bins_remain_cap.max()

    # Penalize bins that have less capacity than the item itself (strict penalty)
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic penalty for larger gaps to favor nearly full bins
    gap_penalty = ((bins_remain_cap - item) / bins_remain_cap.max()) ** 2 * -0.5

    # Combine base priority, infeasibility penalty, and quadratic gap penalty
    priority_score = base_priority + infeasibility_penalty + gap_penalty

    return priority_score
```
