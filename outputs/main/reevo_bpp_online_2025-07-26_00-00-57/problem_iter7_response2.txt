```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin to place the given item.

    This implementation focuses on prioritizing nearly full bins while penalizing
    infeasibility strictly and favoring bins with smaller gaps.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Calculate the gap between remaining capacity and the item size
    gap = bins_remain_cap - item

    # Penalize infeasibility strictly (bins where item cannot fit)
    penalty_infeasibility = np.where(gap < 0, -np.inf, 0)

    # Penalize bins with larger gaps, favoring bins with smaller gaps
    penalty_gap = gap**2 * -0.01  # Squared gap difference with a small multiplier

    # Prioritize nearly full bins
    priority_fullness = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()

    # Combine penalties and priorities into a final score
    priority_score = priority_fullness + penalty_gap + penalty_infeasibility

    return priority_score
```
