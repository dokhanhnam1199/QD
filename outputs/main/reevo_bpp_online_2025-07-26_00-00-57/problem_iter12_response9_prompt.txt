{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used. Bins that are closer to being full get higher priority, but with\n    quadratic penalties for large gaps and strict penalties for infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins with remaining capacity close to item size\n    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n\n    # Quadratic penalty for the gap between remaining capacity and item size\n    gap_penalty = -((bins_remain_cap - item) ** 2) * 0.1\n\n    # Final priority score: sum of base priority and gap penalty\n    priority_score = base_priority + gap_penalty\n\n    # Penalize infeasibility: if an item cannot fit in a bin, assign -inf priority\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies normalization, focuses on feasible bins, and uses\n    quadratic penalties to prioritize nearly full bins effectively.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gap between remaining capacity and item size\n    gap = bins_remain_cap - item\n\n    # Use quadratic penalty for gaps to prioritize nearly full bins\n    gap_penalty = - (gap ** 2) * 0.01 * np.where(gap >= 0, 1, 0)\n\n    # Combine quadratic gap penalty into priority score\n    priority_score = gap_penalty\n\n    # Combine penalties and priority score, ensuring infeasible bins are strictly penalized\n    final_score = priority_score + penalty\n\n    return final_score\n\n[Reflection]\nSimplify penalty structures, focus on feasible bins, use effective prioritization with quadratic penalties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}