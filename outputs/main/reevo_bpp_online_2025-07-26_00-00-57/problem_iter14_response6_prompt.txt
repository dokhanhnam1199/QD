{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes capacities, prioritizes nearly full bins, penalizes gaps\n    quadratically, enforces feasibility strictly, simplifies scoring, and balances usage penalties.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Base priority: higher for bins almost full but feasible\n    base_priority = np.where(bins_remain_cap >= item, normalized_cap, -np.inf)\n\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize gaps quadratically to balance usage\n    usage_penalty = (1 - normalized_cap) ** 2\n\n    # Combine base priority, usage penalty, and penalties into a final score\n    priority_score = base_priority - usage_penalty\n\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies the penalty structure, focuses on feasible bins,\n    and uses effective prioritization with quadratic penalties to favor bins that\n    are nearly full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasible bins (bins with remaining capacity less than the item size)\n    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n    \n    # Calculate the gap between the remaining capacity and the item size\n    gap = bins_remain_cap - item\n    \n    # Apply quadratic penalty to gaps to prioritize bins with smaller gaps\n    # The penalty is zero for infeasible bins as they are already penalized with -np.inf\n    quadratic_penalty = - (gap ** 2) * 0.01\n    \n    # Combine the infeasibility penalty and the quadratic gap penalty\n    priority_score = infeasible_penalty + quadratic_penalty\n    \n    return priority_score\n\n[Reflection]\nSimplify penalties, focus on feasible bins, use quadratic gaps.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}