```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It gives a clear preference to bins that can
    fit the item and tries to fill bins that are closer to being full to reduce
    fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and ensure feasibility
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Give a clear preference to bins that can fit the item at all
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] -= 2  # Strict penalty for non-fitting bins
    
    # Boost smaller gaps to reduce fragmentation
    if np.any(can_fit_item_mask):
        # Find the second smallest gap that can fit the item
        priority_after_check = bins_remain_cap[can_fit_item_mask] - item
        second_smallest_gap = np.partition(priority_after_check, 1)[1] if len(priority_after_check) > 1 else 0
        if second_smallest_gap > 0:
            # Boost bins that have this second smallest gap
            second_smallest_indices = np.where(np.isclose(priority_after_check, second_smallest_gap))[0]
            for idx in second_smallest_indices:
                priority[can_fit_item_mask][idx] += 1  # Boost priority for these bins

    return priority
```
