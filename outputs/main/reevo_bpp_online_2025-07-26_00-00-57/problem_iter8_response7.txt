```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, normalizes capacities,
    penalizes infeasibility, and favors gaps close to the smallest gap.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Penalize bins that have less capacity than the item itself
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate feasible gaps and find the smallest gap
    feasible_gaps = bins_remain_cap - item
    feasible_gaps = feasible_gaps[feasible_gaps >= 0]
    smallest_gap = feasible_gaps.min() if len(feasible_gaps) > 0 else np.inf

    # Favor bins with gaps close to the smallest gap
    gap_penalty = np.where(feasible_gaps >= 0, (bins_remain_cap - item - smallest_gap) ** 2 * -0.01, 0)

    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score
    priority_score = normalized_cap + gap_penalty + penalty_infeasibility

    return priority_score
```
