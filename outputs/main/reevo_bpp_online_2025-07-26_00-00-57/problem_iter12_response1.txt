```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on minimizing the gap between the remaining
    capacity and the item size while strongly penalizing infeasibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasibility: if an item cannot fit in a bin, assign -inf priority
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Base priority based on remaining capacity after placing the item
    base_priority = bins_remain_cap - item

    # Penalty for the gap between remaining capacity and item size
    gap_penalty = -(bins_remain_cap - item) * 0.1

    # Final priority score: sum of base priority and gap penalty, with infeasibility penalty
    priority_score = base_priority + gap_penalty + infeasibility_penalty

    return priority_score
```
