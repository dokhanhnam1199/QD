```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Prioritizes bins that are near full but can
    still fit the item, penalizes bins that cannot fit the item, and boosts bins
    that have a close-to-subtle gap which encourages less fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority = np.zeros_like(bins_remain_cap)
    
    # Calculate the remaining capacity after placing the item in each bin
    remaining_capacity = bins_remain_cap - item
    
    # Mark bins that can fit the item
    can_fit_item_mask = remaining_capacity >= 0
    
    # Assign high priority to bins that can fit the item, scaled by remaining capacity
    priority[can_fit_item_mask] = remaining_capacity[can_fit_item_mask] / item
    
    # Penalize bins that cannot fit the item
    priority[~can_fit_item_mask] -= 2
    
    # Boost bins that have a close-to-subtle gap to reduce fragmentation
    if np.any(can_fit_item_mask):
        sorted_remaining = np.sort(remaining_capacity[can_fit_item_mask])
        if len(sorted_remaining) > 1:
            subtle_gap = sorted_remaining[1]  # Second smallest gap
        else:
            subtle_gap = sorted_remaining[0]  # Only one option if only one bin can fit the item
        
        # Boost bins that have this subtle gap
        subtle_gap_indices = np.where(np.isclose(remaining_capacity, subtle_gap))[0]
        priority[subtle_gap_indices] += 1
    
    return priority
```
