```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on filling bins that have the second smallest gap
    after placing the item, penalizing bins that cannot fit the item, and using
    relative remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    import numpy as np

    # Initialize priority with remaining capacity relative to item size
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Penalize bins that cannot fit the item
    priority[bins_remain_cap < item] -= 2
    
    # Encourage filling the bin with the second smallest gap
    valid_gaps = bins_remain_cap - item
    valid_gaps[valid_gaps < 0] = np.inf  # Ignore infeasible gaps
    sorted_gaps_indices = np.argsort(valid_gaps)
    
    # Check if there's a valid second smallest gap
    if len(sorted_gaps_indices) > 1:
        second_smallest_gap_index = sorted_gaps_indices[1]
        priority[second_smallest_gap_index] += 3  # can be tuned

    return priority
```
