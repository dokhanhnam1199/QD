```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes gaps, prioritizes bins that are closer to being full,
    and ensures item feasibility. It aims to reduce fragmentation and avoid underutilized bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Normalize the remaining capacities
    max_cap = bins_remain_cap.max()
    if max_cap == 0:
        normalized_cap = bins_remain_cap  # To handle edge case where all bins are full
    else:
        normalized_cap = bins_remain_cap / max_cap

    # Base priority is higher for bins with less remaining capacity (closer to being full)
    base_priority = (1 - normalized_cap)

    # Penalize bins that have less capacity than the item itself (make them infeasible)
    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Penalize bins with large gaps after adding the item
    gap_penalty = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / max_cap, 0)

    # Combine penalties and base priority into a final score
    priority_score = base_priority - gap_penalty + feasibility_penalty

    return priority_score
```
