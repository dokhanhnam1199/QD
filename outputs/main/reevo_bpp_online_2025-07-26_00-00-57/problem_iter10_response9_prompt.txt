{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full while avoiding the smallest gap strategy which might lead to fragmentation,\n    and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap > 0:\n        normalized_cap = bins_remain_cap / max_cap\n    else:\n        normalized_cap = bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate feasible gaps\n    feasible_gaps = bins_remain_cap - item\n    feasible_gaps = feasible_gaps[feasible_gaps >= 0]\n\n    # Favor bins with gaps close to the average gap (to avoid fragmentation without overly filling bins)\n    if len(feasible_gaps) > 0:\n        avg_gap = feasible_gaps.mean()\n        gap_penalty = -((bins_remain_cap - item - avg_gap) ** 2) * 0.01\n    else:\n        gap_penalty = np.zeros_like(bins_remain_cap)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + gap_penalty + penalty_infeasibility\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used, prioritizing nearly full bins while strictly penalizing infeasibility\n    and favoring minimal gaps. The scoring is simplified and avoids excessive calculations.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority for feasible bins: higher priority for bins with less remaining capacity\n    base_priority = -bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself (strict infeasibility)\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty to favor bins that reduce the gap more\n    gap_penalty = (bins_remain_cap - item) ** 2\n\n    # Combine base priority, penalties, and simplify scoring\n    priority_score = base_priority - gap_penalty\n\n    # Apply penalty for strictly infeasible bins\n    priority_score = priority_score + penalty\n\n    return priority_score\n\n[Reflection]\nSimplify scoring, prioritize nearly full bins, penalize gaps strictly, and avoid excessive normalization.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}