```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used, prioritizing nearly full bins while strictly penalizing infeasibility
    and favoring minimal gaps. The scoring is simplified and avoids excessive calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority for feasible bins: higher priority for bins with less remaining capacity
    base_priority = -bins_remain_cap

    # Penalize bins that have less capacity than the item itself (strict infeasibility)
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap penalty to favor bins that reduce the gap more
    gap_penalty = (bins_remain_cap - item) ** 2

    # Combine base priority, penalties, and simplify scoring
    priority_score = base_priority - gap_penalty

    # Apply penalty for strictly infeasible bins
    priority_score = priority_score + penalty

    return priority_score
```
