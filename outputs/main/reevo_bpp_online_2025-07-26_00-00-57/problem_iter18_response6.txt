```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that offer a close fit to the item, penalizes bins
    with significantly underutilized space, and ensures that only feasible bins (those that
    can accommodate the item) are considered.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins with remaining capacity close to item size
    base_priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)

    # Penalize underused bins to avoid creating bins that are too small and leftover bins
    usage_discount = ((bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()) ** 2 * 0.01

    # Combine base priority and usage discount into a final score
    priority_score = base_priority - usage_discount

    # Ensure only feasible bins have a non-negative score
    return np.where(bins_remain_cap < item, -np.inf, priority_score)
```
