```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,
    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids
    underuse penalties, and enhances conditional penalties for feasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasibility
    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap penalty for bins that have less remaining capacity than the item
    gap_penalty = np.where(bins_remain_cap < item, -((bins_remain_cap - item) ** 2), 0)

    # Prioritize nearly full bins
    priority_score = (bins_remain_cap - item) ** 2

    # Penalize small bins by normalizing based on max capacity in bins
    max_cap = bins_remain_cap.max()
    if max_cap > 0:
        priority_score /= max_cap

    # Combine feasibility penalty and gap penalty with priority score
    final_score = priority_score + feasibility_penalty + gap_penalty

    return final_score
```
