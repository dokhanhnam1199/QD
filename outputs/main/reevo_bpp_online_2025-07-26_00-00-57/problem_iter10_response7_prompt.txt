{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    strictly penalizes infeasibility, favors smaller gaps directly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalty for infeasibility: strictly penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap >= item, 0, -np.inf)\n\n    # Calculate gaps if the item is added to each bin\n    gaps = bins_remain_cap - item\n\n    # Favor smaller gaps: penalize larger gaps\n    # Smaller gaps get higher priority (less penalty)\n    gap_penalty = gaps / max_cap if max_cap > 0 else gaps\n\n    # Combine normalized capacity, penalty for infeasibility, and gap penalty\n    priority_score = normalized_cap + penalty_infeasibility - gap_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps quadratically.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps quadratically, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -0.01 * gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score\n\n[Reflection]\nPrioritize near-full bins by quadratically penalizing larger gaps to reduce fragmentation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}