```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on maximizing the usage of bins while
    penalizing infeasibility. It uses remaining capacity as the primary
    criterion and adds a penalty for bins that cannot accommodate the item.
    Additionally, it includes a term to discourage fragmentation by slightly
    preferring bins that are near their full capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Base priority based on remaining capacity after placing the item
    base_priority = bins_remain_cap - item

    # Disincentivize fragmentation by slightly favoring bins with less remaining capacity
    # This is a heuristic to keep bins as full as possible, reducing the chance of leftover bins
    fullness_discount = bins_remain_cap.max() - bins_remain_cap

    # Combine base priority, fullness discount, and infeasibility penalty into a final score
    priority_score = base_priority - fullness_discount * 0.1 + penalty_infeasibility

    return priority_score
```
