```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on normalizing capacities, prioritizing nearly full bins,
    applying quadratic gap penalties, strictly penalizing infeasibility, favoring minimal gaps,
    simplifying scoring, and avoiding excessive calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap

    # Base priority: prioritize nearly full bins
    base_priority = (1 - normalized_cap) * (bins_remain_cap >= item)

    # Quadratic gap penalty for underused bins
    usage_discount = (bins_remain_cap.max() - bins_remain_cap) ** 2 * 0.01

    # Strictly penalize infeasibility (bins where item cannot fit)
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Combine scores
    priority_score = base_priority - usage_discount + infeasibility_penalty

    return priority_score
```
