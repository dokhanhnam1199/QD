```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins based on how full they are, while also
    penalizing bins that have less capacity than the item itself to avoid
    infeasibility. It aims to balance the usage of bins and avoid suboptimal gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after placing the item
    remaining_after_item = bins_remain_cap - item

    # Set a high negative score for infeasible bins
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate priority based on remaining capacity after placing the item
    # This will make bins with less remaining capacity (closer to being full) have higher priority
    priority_from_capacity = remaining_after_item

    # Penalize bins that are overfilled by a small amount to avoid suboptimal gaps
    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)

    # Combine the priority from capacity and smooth penalty into a final score
    priority_score = priority_from_capacity + smooth_penalty + infeasibility_penalty

    return priority_score
```
