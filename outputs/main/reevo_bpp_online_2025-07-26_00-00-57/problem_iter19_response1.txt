```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full with a quadratic gap penalty,
    strongly penalizes infeasibility, and inversely reduces the priority of underused bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Quadratic decreasing priority based on remaining capacity gap
    base_priority = (bins_remain_cap.max() - bins_remain_cap + item)**2 * 0.1

    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -1.0, 0)  # Strong penalty for infeasibility

    # Penalize underused bins to avoid creating bins too small and leftover bins
    usage_discount = (bins_remain_cap - bins_remain_cap.max())**2 * 0.001

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = base_priority + usage_discount + penalty

    return np.where(bins_remain_cap < item, -np.inf, priority_score)
```
