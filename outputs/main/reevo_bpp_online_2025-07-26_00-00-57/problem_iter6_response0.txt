```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full, strictly penalizes
    infeasible bins (those with less capacity than the item), and balances the
    usage across bins to avoid creating bins that are too small and leftover bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Priority based on remaining capacity (nearly full bins get higher priority)
    remaining_capacity_priority = (bins_remain_cap - item) / bins_remain_cap

    # Penalize underused bins to avoid creating bins too small and leftover bins
    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = remaining_capacity_priority - usage_discount + infeasibility_penalty

    return priority_score
```
