{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers normalized remaining capacity, prioritizes bins\n    near full, penalizes infeasibility, penalizes gaps, balances priorities, and\n    favors second smallest gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    min_cap = bins_remain_cap.min()\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize infeasibility (bins too small for the item)\n    infeasibility_penalty = np.where(gaps < 0, -np.inf, 0)\n\n    # Favor bins near full (high priority for bins with small gaps)\n    # Penalize bins that have significantly more remaining capacity than the item\n    gap_penalty = np.where(gaps > 0, gaps / max_cap, 0)\n\n    # Favor second smallest gaps to avoid packing items into the smallest gaps first\n    sorted_gaps = np.sort(gaps[gaps >= 0])\n    second_smallest_gap = sorted_gaps[1] if len(sorted_gaps) > 1 else 0\n    gap_favor = np.where(gaps == second_smallest_gap, 0.1, 0)\n\n    # Combine all factors into a final priority score\n    priority_score = normalized_cap - gap_penalty + infeasibility_penalty + gap_favor\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full, penalizes infeasibility, and balances\n    priorities while favoring the second smallest gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps and find the second smallest gap\n    gaps = np.sort(bins_remain_cap - item)\n    gaps = gaps[gaps >= 0]  # only consider feasible gaps\n    second_smallest_gap = gaps[1] if len(gaps) > 1 else gaps[0]\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = (bins_remain_cap - item - second_smallest_gap)**2 * -0.01\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score\n\n[Reflection]\nFocus on normalization, infeasibility penalties, and prioritizing small gaps. Simplify calculations and balances.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}