```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the capacities, applies quadratic penalties for 
    infeasible bins, and inversely reduces underused bins' priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    if max_cap == 0:
        normalized_capacities = bins_remain_cap  # Avoid division by zero
    else:
        normalized_capacities = bins_remain_cap / max_cap

    # Base priority is proportional to the remaining capacity
    base_priority = normalized_capacities

    # Penalize bins that have less capacity than the item itself (quadratic penalty)
    infeasibility_penalty = np.where(bins_remain_cap < item, -((item - bins_remain_cap) / max_cap) ** 2, 0)

    # Penalize underused bins inversely (quadratic reduction of priority)
    underuse_discount = (1 - normalized_capacities) ** 2 * 0.01

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = base_priority + infeasibility_penalty - underuse_discount

    # Ensure infeasible bins get a very low priority
    priority_score[bins_remain_cap < item] = -np.inf

    return priority_score
```
