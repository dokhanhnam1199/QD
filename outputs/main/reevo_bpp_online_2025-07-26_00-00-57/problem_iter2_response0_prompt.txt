{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of times a bin has be used.\n    It encourages packing smaller items into bins that are closer to their capacity limit to optimize space usage.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin, where capacity is the difference between bin size and current occupancy.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Heuristic prioritizes bins that have the most room left, but still need to densely fill up bins to avoid fragmentation.\n    # Giving a lower priority score to bins with very low remaining capacity where the item might not fit.\n    priority_scores = np.where((bins_remain_cap - item) >= 0, bins_remain_cap - item + 1, 0)\n    \n    # Added upper bound prioritization to encourage filling bins better:\n    # For bins with high prior scores when the remaining space overflows sensibly high, we might want to allow some waste toBackPressed cache\u76db\u5bb4 coherence.\n    # In those case, give an attenuation score bringing back items closer smaller feasibly fitting bins.\n    priority_scores = priority_scores * (1 / (np.maximum(bins_remain_cap.mean(), bins_remain_cap.std()) + item))\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item itself (setting them to a very low priority), and further\n    reduced if they are more full relative to their initial capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Original bin capacities\n    bins_original_cap = np.full_like(bins_remain_cap, bins_remain_cap.max() + 1)\n    \n    # Penalty for bins with less remaining capacity than the item (can't fit the item)\n    penalties = (bins_remain_cap < item) * -np.inf\n    \n    # Calculate priority: moving closer to full has a priority proportional to the fullness\n    priority = 1 - (bins_remain_cap / bins_original_cap)\n    \n    # Apply penalties to bins where the item can't be placed\n    priority += penalties\n    \n    # Inverse so that closer to full but feasible slots get highest prio\n    priority = -priority\n    \n    return priority\n\n[Reflection]\nPrioritize bins closer to full, penalize infeasible fits, normalize capacities, invert priorities.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}