```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses sorting to prioritize bins with the second smallest gaps,
    encouraging less fragmentation while ensuring items that cannot fit are penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority with linear decreasing score based on remaining capacity
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] -= 2
    
    # Identify the second smallest gap for items that can fit
    potential_gaps = bins_remain_cap - item
    valid_gaps = potential_gaps[can_fit_item_mask]
    
    if valid_gaps.size > 1:
        second_smallest_gap = np.partition(valid_gaps, 1)[1]
        second_smallest_indices = np.where(np.isclose(potential_gaps, second_smallest_gap))[0]
        priority[second_smallest_indices] += 3  # Boost priority for bins with the second smallest gap

    return priority
```
