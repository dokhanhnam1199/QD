```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on normalizing capacities, prioritizing nearly full bins,
    applying quadratic gap penalties, strictly penalizing infeasibility, favoring minimal gaps,
    simplifying scoring, and avoiding excessive calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap

    # Base priority: prioritize bins that are nearly full
    base_priority = (1 - normalized_cap)

    # Strict penalty for infeasibility (bins with remaining capacity less than the item size)
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic penalty for bins with large remaining gaps after adding the item
    gap_penalty = np.where(bins_remain_cap >= item, (bins_remain_cap - item) ** 2, 0) * 0.01

    # Combine scores
    priority_score = base_priority - gap_penalty + infeasibility_penalty

    return priority_score
```
