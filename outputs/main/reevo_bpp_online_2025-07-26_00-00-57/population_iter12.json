[
  {
    "stdout_filepath": "problem_iter12_response0.txt_stdout.txt",
    "code_path": "problem_iter12_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, penalizes infeasibility,\n    and prioritizes bins with nearly full capacity by penalizing larger gaps with a quadratic decay.\n    It also adjusts weights for better balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap == 0:\n        normalized_cap = np.zeros_like(bins_remain_cap)\n    else:\n        normalized_cap = bins_remain_cap / max_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins with quadratic decay\n    penalty_gap = np.where(gaps >= 0, -gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = 3 * normalized_cap + 2 * penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response1.txt_stdout.txt",
    "code_path": "problem_iter12_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on minimizing the gap between the remaining\n    capacity and the item size while strongly penalizing infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility: if an item cannot fit in a bin, assign -inf priority\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority based on remaining capacity after placing the item\n    base_priority = bins_remain_cap - item\n\n    # Penalty for the gap between remaining capacity and item size\n    gap_penalty = -(bins_remain_cap - item) * 0.1\n\n    # Final priority score: sum of base priority and gap penalty, with infeasibility penalty\n    priority_score = base_priority + gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 1,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response2.txt_stdout.txt",
    "code_path": "problem_iter12_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility strictly. It normalizes the base priority and applies\n    a slight penalty for bins with large remaining capacity compared to the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = 1 - (bins_remain_cap - item) / bins_remain_cap.max()\n\n    # Normalize base priority to be in the range [0, 1]\n    # Avoid division by zero in case base_priority.max() == base_priority.min()\n    normalized_base_priority = (base_priority - base_priority.min()) / (base_priority.max() - base_priority.min() if base_priority.max() != base_priority.min() else 1)\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties and priorities, infeasibility overrides others\n    priority_score = normalized_base_priority + small_gap_favor\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response3.txt_stdout.txt",
    "code_path": "problem_iter12_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps quadratically.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps quadratically, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -0.01 * gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response4.txt_stdout.txt",
    "code_path": "problem_iter12_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies a quadratic penalty\n    for gaps to prevent fragmentation, and strictly penalizes bins that cannot fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority for feasible bins: higher priority for bins with less remaining capacity\n    base_priority = -bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself (strict infeasibility)\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty to favor bins that reduce the gap more\n    gap_penalty = (bins_remain_cap - item) ** 2\n\n    # Combine base priority, gap penalty, and infeasibility penalty into a final score\n    priority_score = base_priority - gap_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response5.txt_stdout.txt",
    "code_path": "problem_iter12_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies the penalty structure, focuses on feasible bins,\n    and uses effective prioritization with quadratic penalties to favor bins that\n    are nearly full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasible bins (bins with remaining capacity less than the item size)\n    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n    \n    # Calculate the gap between the remaining capacity and the item size\n    gap = bins_remain_cap - item\n    \n    # Apply quadratic penalty to gaps to prioritize bins with smaller gaps\n    # The penalty is zero for infeasible bins as they are already penalized with -np.inf\n    quadratic_penalty = - (gap ** 2) * 0.01\n    \n    # Combine the infeasibility penalty and the quadratic gap penalty\n    priority_score = infeasible_penalty + quadratic_penalty\n    \n    return priority_score",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response6.txt_stdout.txt",
    "code_path": "problem_iter12_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Prioritizes bins with a close fit, penalizes\n    bins that are underused, and ensures feasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins with remaining capacity close to item size\n    base_priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / bins_remain_cap.max(), -np.inf)\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_for_small_bins = np.where(bins_remain_cap < item, -0.25, 0)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = ((bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()) ** 2 * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority + usage_discount + penalty_for_small_bins\n\n    # Ensure feasibility\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response7.txt_stdout.txt",
    "code_path": "problem_iter12_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. Normalization is applied\n    to ensure fair comparison.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Strict infeasibility check\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = bins_remain_cap - item\n\n    # Penalize underused bins by considering the gap from the maximum capacity seen so far\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Safeguard division by zero and normalize base priority to be in the range [0, 1]\n    feasible_base_priority = np.where(bins_remain_cap >= item, base_priority, -np.inf)\n    max_priority = np.max(feasible_base_priority) if np.isfinite(np.max(feasible_base_priority)) else 0\n    min_priority = np.min(feasible_base_priority) if np.isfinite(np.min(feasible_base_priority)) else 0\n\n    # Normalize base priority\n    normalized_base_priority = np.where(\n        bins_remain_cap >= item,\n        (feasible_base_priority - min_priority) / (max_priority - min_priority) if max_priority > min_priority else 1,\n        0\n    )\n\n    # Combine normalized base priority with usage discount and infeasibility penalties\n    priority_score = normalized_base_priority - usage_discount\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)",
    "response_id": 7,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response8.txt_stdout.txt",
    "code_path": "problem_iter12_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on normalized remaining capacity, penalizes infeasibility,\n    and smoothly penalizes gaps to balance the usage of bins effectively.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining_after_item = bins_remain_cap - item\n\n    # Set a high negative score for infeasible bins\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap > 0:\n        normalized_cap = bins_remain_cap / max_cap\n    else:\n        normalized_cap = bins_remain_cap\n\n    # Base priority: prioritize nearly full bins\n    base_priority = (1 - normalized_cap) * (bins_remain_cap >= item)\n\n    # Smooth penalty for remaining gaps to avoid suboptimal gaps\n    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)\n\n    # Combine the base priority and smooth penalty into a final score\n    priority_score = base_priority + smooth_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response9.txt_stdout.txt",
    "code_path": "problem_iter12_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies the penalty structure, focuses on feasible bins,\n    and uses effective prioritization with quadratic penalties to favor bins that\n    are nearly full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasible bins (bins with less capacity than the item) with -inf\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate the gap between remaining capacity and item size\n    gap = bins_remain_cap - item\n\n    # Apply quadratic penalty to gaps for feasible bins to prioritize nearly full bins\n    gap_penalty = - (gap ** 2) * 0.01\n\n    # Combine penalty for infeasibility and the quadratic gap penalty\n    priority_score = penalty + gap_penalty\n\n    return priority_score",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]