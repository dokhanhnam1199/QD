```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins that are nearly full, while
    avoiding infeasibility by penalizing bins with less capacity than the item.
    It also slightly favors bins with smaller gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate the gap between the item and the remaining capacity
    gap = bins_remain_cap - item

    # Calculate the priority score based on a combination of gap and remaining capacity
    priority_score = np.where(gap >= 0, gap / bins_remain_cap, -np.inf)

    # Penalize larger gaps to favor bins with smaller gaps
    gap_discount = (gap**2) * 0.01
    priority_score -= np.where(gap >= 0, gap_discount, 0)

    return priority_score
```
