```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Prioritizes bins that are near full, penalizes
    bins that cannot fit the item, and boosts bins that have a close-to-subtle gap.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    priority = (bins_remain_cap - item) / item

    # Penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] = -np.inf

    # Boost bins that have a close-to-subtle gap to encourage less fragmentation
    if np.any(can_fit_item_mask):
        remaining_capacities = bins_remain_cap[can_fit_item_mask] - item
        second_smallest_gap = np.partition(remaining_capacities, 2)[:3]  # Get top 3 smallest gaps
        if len(second_smallest_gap) > 1:
            second_smallest = second_smallest_gap[1]  # This is the smallest gap after 0
            priority[bins_remain_cap - item == second_smallest] += 0.5

    return priority
```
