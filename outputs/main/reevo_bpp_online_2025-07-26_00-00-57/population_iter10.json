[
  {
    "stdout_filepath": "problem_iter10_response0.txt_stdout.txt",
    "code_path": "problem_iter10_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on normalized remaining capacity, penalizes infeasibility,\n    and smoothly penalizes gaps to balance the usage of bins effectively.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining_after_item = bins_remain_cap - item\n\n    # Set a high negative score for infeasible bins\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Base priority: prioritize nearly full bins\n    base_priority = (1 - normalized_cap) * (bins_remain_cap >= item)\n\n    # Smooth penalty for remaining gaps to avoid suboptimal gaps\n    smooth_penalty = np.where(remaining_after_item > 0, remaining_after_item ** 2 * -0.01, 0)\n\n    # Combine the base priority and smooth penalty into a final score\n    priority_score = base_priority + smooth_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response1.txt_stdout.txt",
    "code_path": "problem_iter10_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies normalization, focuses on feasible bins, and uses\n    quadratic penalties to prioritize nearly full bins effectively.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gap between remaining capacity and item size\n    gap = bins_remain_cap - item\n\n    # Use quadratic penalty for gaps to prioritize nearly full bins\n    gap_penalty = - (gap ** 2) * 0.01 * np.where(gap >= 0, 1, 0)\n\n    # Combine quadratic gap penalty into priority score\n    priority_score = gap_penalty\n\n    # Combine penalties and priority score, ensuring infeasible bins are strictly penalized\n    final_score = priority_score + penalty\n\n    return final_score",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response2.txt_stdout.txt",
    "code_path": "problem_iter10_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on maximizing the usage of bins while\n    penalizing infeasibility. It uses remaining capacity as the primary\n    criterion and adds a penalty for bins that cannot accommodate the item.\n    Additionally, it includes a term to discourage fragmentation by slightly\n    preferring bins that are near their full capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority based on remaining capacity after placing the item\n    base_priority = bins_remain_cap - item\n\n    # Disincentivize fragmentation by slightly favoring bins with less remaining capacity\n    # This is a heuristic to keep bins as full as possible, reducing the chance of leftover bins\n    fullness_discount = bins_remain_cap.max() - bins_remain_cap\n\n    # Combine base priority, fullness discount, and infeasibility penalty into a final score\n    priority_score = base_priority - fullness_discount * 0.1 + penalty_infeasibility\n\n    return priority_score",
    "response_id": 2,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response3.txt_stdout.txt",
    "code_path": "problem_iter10_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, penalizes gaps quadratically,\n    and strictly penalizes infeasibility, favoring bins that are nearly full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap == 0:\n        normalized_cap = np.zeros_like(bins_remain_cap)\n    else:\n        normalized_cap = bins_remain_cap / max_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -gaps**2 * 0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response4.txt_stdout.txt",
    "code_path": "problem_iter10_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It slightly favors bins with smaller gaps but avoids excessive calculations and\n    normalizes the base priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = 1 - (bins_remain_cap - item) / bins_remain_cap.max()\n\n    # Normalize base priority to be in the range [0, 1]\n    normalized_base_priority = (base_priority - base_priority.min()) / (base_priority.max() - base_priority.min())\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties and priorities, infeasibility overrides others\n    priority_score = normalized_base_priority + small_gap_favor\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response5.txt_stdout.txt",
    "code_path": "problem_iter10_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, penalizes infeasibility,\n    and prioritizes bins with nearly full capacity by penalizing larger gaps with a quadratic decay.\n    It also adjusts weights for better balance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap == 0:\n        normalized_cap = np.zeros_like(bins_remain_cap)\n    else:\n        normalized_cap = bins_remain_cap / max_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins with quadratic decay\n    penalty_gap = np.where(gaps >= 0, -gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = 2 * normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response6.txt_stdout.txt",
    "code_path": "problem_iter10_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin to add the given item.\n\n    This implementation focuses on:\n    - Prioritizing bins with less remaining capacity (almost full bins).\n    - Strictly penalizing bins where the item cannot fit.\n    - Penalizing larger gaps quadratically to favor bins that minimize the gap.\n\n    Args:\n        item: Size of the item to be added.\n        bins_remain_cap: Array of remaining capacities of each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Base priority: higher for bins with less remaining capacity\n    base_priority = -bins_remain_cap\n\n    # Penalize infeasible bins (where the item cannot fit)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Penalize larger gaps quadratically to favor bins that minimize the gap\n    gap_penalty = (bins_remain_cap - item) ** 2\n\n    # Combine scores to get final priority\n    priority_score = base_priority - gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response7.txt_stdout.txt",
    "code_path": "problem_iter10_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps quadratically.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps quadratically, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -0.01 * gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response8.txt_stdout.txt",
    "code_path": "problem_iter10_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by strictly penalizing bins with less capacity than the item.\n    It slightly favors bins with smaller gaps and normalizes the base priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = bins_remain_cap - item\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties and priorities, infeasibility overrides others\n    # Ensure only feasible bins are considered for normalization\n    feasible_base_priority = np.where(bins_remain_cap >= item, base_priority, -np.inf)\n    max_priority = np.max(feasible_base_priority) if np.isfinite(np.max(feasible_base_priority)) else 0\n    min_priority = np.min(feasible_base_priority) if np.isfinite(np.min(feasible_base_priority)) else 0\n\n    # Normalize base priority to be in the range [0, 1]\n    normalized_base_priority = np.where(\n        bins_remain_cap >= item,\n        (feasible_base_priority - min_priority) / (max_priority - min_priority) if max_priority > min_priority else 1,\n        0\n    )\n\n    # Combine normalized base priority with small gap favor\n    priority_score = normalized_base_priority + small_gap_favor\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)",
    "response_id": 8,
    "obj": 4.427602712405275,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response9.txt_stdout.txt",
    "code_path": "problem_iter10_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins with less remaining capacity (nearly full bins),\n    strictly penalizes gaps to avoid fragmentation, and ensures items that do not fit are infeasible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority for feasible bins: higher priority for bins with less remaining capacity\n    base_priority = -bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself (strict infeasibility)\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty to favor bins that reduce the gap more\n    gap_penalty = (bins_remain_cap - item) ** 2\n\n    # Combine base priority, gap penalty, and infeasibility penalty into a final score\n    priority_score = base_priority - gap_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]