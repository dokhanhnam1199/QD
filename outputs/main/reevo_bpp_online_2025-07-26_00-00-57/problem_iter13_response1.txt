```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes capacities, prioritizes nearly full bins, penalizes gaps
    quadratically, enforces feasibility strictly, simplifies scoring, and balances usage penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap

    # Base priority: higher for bins almost full but feasible
    base_priority = np.where(bins_remain_cap >= item, normalized_cap, -np.inf)

    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Penalize gaps quadratically to balance usage
    usage_penalty = (1 - normalized_cap) ** 2

    # Combine base priority, usage penalty, and penalties into a final score
    priority_score = base_priority - usage_penalty

    return np.where(bins_remain_cap < item, -np.inf, priority_score)
```
