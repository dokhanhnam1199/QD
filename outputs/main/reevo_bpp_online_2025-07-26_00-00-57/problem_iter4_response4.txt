```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are closer to being full but ensures
    that items are only placed into bins where they can fit. It penalizes bins that
    cannot fit the item and normalizes the priorities based on the original bin capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalty for bins with less remaining capacity than the item (can't fit the item)
    penalties = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Calculate priority: moving closer to full has a priority proportional to the fullness
    priority = 1 - (bins_remain_cap / bins_remain_cap.max())
    
    # Apply penalties to bins where the item can't be placed
    priority += penalties
    
    # Inverse so that closer to full but feasible slots get highest priority
    priority = -priority
    
    return priority
```
