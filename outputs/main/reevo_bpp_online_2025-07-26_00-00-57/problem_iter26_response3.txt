```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a balanced scoring system that considers the remaining
    capacity and bin usage, with judicious penalties to avoid excessive bin usage and
    underutilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the base priority based on the remaining capacity
    base_priority = bins_remain_cap - item

    # Penalize bins that have less capacity than the item itself heavily
    item_size_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Encourage bins that are closer to being full
    fill_factor_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.005

    # Combine the base priority with penalties and discounts
    priority_score = base_priority - fill_factor_discount

    # Return the final priority score with consideration for bins that cannot fit the item
    return priority_score + item_size_penalty
```
