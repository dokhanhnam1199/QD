[
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, strictly penalizes\n    infeasible bins (those with less capacity than the item), and balances the\n    usage across bins to avoid creating bins that are too small and leftover bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Priority based on remaining capacity (nearly full bins get higher priority)\n    remaining_capacity_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = remaining_capacity_priority - usage_discount + infeasibility_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It strongly penalizes infeasible bins and\n    aims to balance usage to avoid leftover bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: Favor bins that are near full, but not less than item size\n    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority - usage_discount\n\n    # Ensure infeasible bins have the lowest priority\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)",
    "response_id": 1,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It strongly penalizes infeasible bins and\n    aims to balance usage to avoid leftover bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: Favor bins that are near full, but not less than item size\n    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority - usage_discount\n\n    # Ensure infeasible bins have the lowest priority\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)",
    "response_id": 2,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full, and penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate feasible gaps and find the second smallest gap\n    feasible_gaps = bins_remain_cap - item\n    feasible_gaps = feasible_gaps[feasible_gaps >= 0]\n    if len(feasible_gaps) > 1:\n        second_smallest_gap = np.partition(feasible_gaps, 1)[1]\n    else:\n        second_smallest_gap = feasible_gaps[0] if len(feasible_gaps) > 0 else np.inf\n\n    # Favor bins with gaps close to the second smallest gap\n    gap_penalty = np.where(feasible_gaps >= 0, (bins_remain_cap - item - second_smallest_gap) ** 2 * -0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + gap_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 3,
    "obj": 5.963302752293574,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -gaps**2 * 0.01, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response5.txt_stdout.txt",
    "code_path": "problem_iter6_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full, and penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate feasible gaps and find the second smallest gap\n    feasible_gaps = bins_remain_cap - item\n    feasible_gaps = feasible_gaps[feasible_gaps >= 0]\n    if len(feasible_gaps) > 1:\n        second_smallest_gap = np.partition(feasible_gaps, 1)[1]\n    else:\n        second_smallest_gap = feasible_gaps[0] if len(feasible_gaps) > 0 else np.inf\n\n    # Favor bins with gaps close to the second smallest gap\n    gap_penalty = np.where(feasible_gaps >= 0, (bins_remain_cap - item - second_smallest_gap) ** 2, 0) * -0.01\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + gap_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 5,
    "obj": 5.963302752293574,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response6.txt_stdout.txt",
    "code_path": "problem_iter6_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes infeasibility,\n    and prioritizes bins with near full capacity by penalizing larger gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps\n    gaps = bins_remain_cap - item\n\n    # Penalize larger gaps, favoring nearly full bins\n    penalty_gap = np.where(gaps >= 0, -0.01 * gaps**2, 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response7.txt_stdout.txt",
    "code_path": "problem_iter6_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    prioritizes bins that are near full, and penalizes infeasibility using\n    squared penalties for gaps, thus favoring nearly full bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself (infeasible)\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate gaps and apply squared penalty, favoring nearly full bins\n    gaps = bins_remain_cap - item\n    penalty_gap = np.where(gaps >= 0, -0.01 * (gaps ** 2), 0)\n\n    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score\n    priority_score = normalized_cap + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response8.txt_stdout.txt",
    "code_path": "problem_iter6_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    strictly penalizes infeasibility, favors smaller gaps directly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalty for infeasibility: -np.inf for bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Favor smaller gaps directly by penalizing larger gaps\n    gaps = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n    gap_penalty = -gaps / max_cap if max_cap > 0 else -gaps\n\n    # Combine normalized capacity, penalty for infeasibility, and gap penalty\n    priority_score = normalized_cap + penalty_infeasibility + gap_penalty\n\n    return priority_score",
    "response_id": 8,
    "obj": 6.471878739529327,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response9.txt_stdout.txt",
    "code_path": "problem_iter6_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity, normalizes capacities,\n    strictly penalizes infeasibility, favors smaller gaps directly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap\n\n    # Penalty for infeasibility: strictly penalize bins that cannot fit the item\n    penalty_infeasibility = np.where(bins_remain_cap >= item, 0, -np.inf)\n\n    # Calculate gaps if the item is added to each bin\n    gaps = bins_remain_cap - item\n\n    # Favor smaller gaps: penalize larger gaps\n    # Smaller gaps get higher priority (less penalty)\n    gap_penalty = gaps / max_cap if max_cap > 0 else gaps\n\n    # Combine normalized capacity, penalty for infeasibility, and gap penalty\n    priority_score = normalized_cap + penalty_infeasibility - gap_penalty\n\n    return priority_score",
    "response_id": 9,
    "obj": 6.471878739529327,
    "SLOC": 8.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It also slightly favors bins with smaller gaps, aiming for a balanced logic.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly for bins that cannot fit the item\n    infeasibility_penalty = -np.inf * (bins_remain_cap < item)\n\n    # Base priority: prioritize bins that are nearly full\n    base_priority = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize large gaps quadratically\n    gap_penalty = -(bins_remain_cap - item) ** 2\n\n    # Combine base priority and penalties into a final score\n    priority_score = base_priority + gap_penalty\n\n    # Ensure infeasible bins have the lowest priority\n    priority_score = np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response1.txt_stdout.txt",
    "code_path": "problem_iter7_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It also slightly favors bins with smaller gaps but avoids excessive calculations.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = (bins_remain_cap - item) / bins_remain_cap.max()\n\n    # Slight penalty for bins with large remaining capacity compared to the item\n    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties and priorities, infeasibility overrides others\n    priority_score = base_priority + small_gap_favor\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)",
    "response_id": 1,
    "obj": 4.11846828879138,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response2.txt_stdout.txt",
    "code_path": "problem_iter7_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin to place the given item.\n\n    This implementation focuses on prioritizing nearly full bins while penalizing\n    infeasibility strictly and favoring bins with smaller gaps.\n\n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Calculate the gap between remaining capacity and the item size\n    gap = bins_remain_cap - item\n\n    # Penalize infeasibility strictly (bins where item cannot fit)\n    penalty_infeasibility = np.where(gap < 0, -np.inf, 0)\n\n    # Penalize bins with larger gaps, favoring bins with smaller gaps\n    penalty_gap = gap**2 * -0.01  # Squared gap difference with a small multiplier\n\n    # Prioritize nearly full bins\n    priority_fullness = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()\n\n    # Combine penalties and priorities into a final score\n    priority_score = priority_fullness + penalty_gap + penalty_infeasibility\n\n    return priority_score",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response3.txt_stdout.txt",
    "code_path": "problem_iter7_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full, while\n    avoiding infeasibility by penalizing bins with less capacity than the item.\n    It also slightly favors bins with smaller gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate the gap between the item and the remaining capacity\n    gap = bins_remain_cap - item\n\n    # Calculate the priority score based on a combination of gap and remaining capacity\n    priority_score = np.where(gap >= 0, gap / bins_remain_cap, -np.inf)\n\n    # Penalize larger gaps to favor bins with smaller gaps\n    gap_discount = (gap**2) * 0.01\n    priority_score -= np.where(gap >= 0, gap_discount, 0)\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.96609493418428,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response4.txt_stdout.txt",
    "code_path": "problem_iter7_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin to place the given item.\n\n    This implementation focuses on prioritizing nearly full bins while penalizing\n    infeasibility strictly and favoring bins with smaller gaps.\n\n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Base priority: closer to being full gets higher priority\n    base_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize infeasibility: if item cannot fit, assign a large negative score\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Favor smaller gaps: penalize larger gaps with a quadratic term\n    gap_penalty = (bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine base priority, penalties into a final score\n    priority_score = base_priority + penalty - gap_penalty\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.96609493418428,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]