{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Avoids unnecessary normalization;\n    prioritizes feasible bins without underuse penalties. Scales by bin capacity\n    for clarity and effectiveness.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly\n    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for remaining capacity\n    gap_penalty = (bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties into a final score, ensuring infeasible bins are heavily penalized\n    priority_score = infeasible_penalty + gap_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign -inf priority to bins that cannot accommodate the item\n    infeasible_mask = bins_remain_cap < item\n    priority_score = np.where(infeasible_mask, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    feasible_remain_cap = bins_remain_cap[~infeasible_mask]\n    gap_penalty = (item - feasible_remain_cap) ** 2\n\n    # Combine gap penalty into final score for feasible bins\n    priority_score[~infeasible_mask] = -gap_penalty\n\n    return priority_score\n\n[Reflection]\nUse negative gap penalties for feasible bins, prioritize bins with less remaining capacity, and strictly penalize infeasible bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}