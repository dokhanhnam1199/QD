[
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response1.txt_stdout.txt",
    "code_path": "problem_iter22_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (bins_remain_cap - item) ** 2 * 0.01, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 1,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response2.txt_stdout.txt",
    "code_path": "problem_iter22_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (1 - normalized_cap) ** 2 * 0.01, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 2,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response3.txt_stdout.txt",
    "code_path": "problem_iter22_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response4.txt_stdout.txt",
    "code_path": "problem_iter22_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -(capacity_gap ** 2), 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response5.txt_stdout.txt",
    "code_path": "problem_iter22_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. Small bins are penalized more.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Linear increasing priority based on remaining capacity minus item size\n    base_priority = (bins_remain_cap - item)\n\n    # Penalize underused bins more by reducing their priority score\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.1\n\n    # Combine base priority and penalties into a final score\n    priority_score = base_priority - usage_discount\n\n    return priority_score + penalty",
    "response_id": 5,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response6.txt_stdout.txt",
    "code_path": "problem_iter22_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacities, applies quadratic penalties,\n    strictly penalizes infeasibility, and inversely reduces underused bins\u2019 priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalty for bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic penalty for bins that are underused relative to the largest bin\n    usage_penalty = (1 - normalized_cap) ** 2\n\n    # Combine penalties to form the priority score\n    # Higher priority for bins with more remaining capacity that can fit the item\n    priority_score = infeasibility_penalty - usage_penalty\n\n    return priority_score",
    "response_id": 6,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response7.txt_stdout.txt",
    "code_path": "problem_iter22_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic penalties for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response8.txt_stdout.txt",
    "code_path": "problem_iter22_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 8,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response9.txt_stdout.txt",
    "code_path": "problem_iter22_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies quadratic gap penalties\n    for feasible bins, and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate quadratic gap penalty for feasible bins\n    gap_penalty = np.where(bins_remain_cap >= item, (1 - normalized_cap) ** 2 * 0.01, 0)\n\n    # Penalize infeasible bins (those with less capacity than the item)\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap + gap_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 9,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids\n    underuse penalties, and enhances conditional penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility\n    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for bins that have less remaining capacity than the item\n    gap_penalty = np.where(bins_remain_cap < item, -((bins_remain_cap - item) ** 2), 0)\n\n    # Prioritize nearly full bins\n    priority_score = (bins_remain_cap - item) ** 2\n\n    # Penalize small bins by normalizing based on max capacity in bins\n    max_cap = bins_remain_cap.max()\n    if max_cap > 0:\n        priority_score /= max_cap\n\n    # Combine feasibility penalty and gap penalty with priority score\n    final_score = priority_score + feasibility_penalty + gap_penalty\n\n    return final_score",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids\n    underuse penalties, and enhances conditional penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Penalize small bins to avoid creating bins that are too small\n    small_bin_penalty = np.where(bins_remain_cap < 0.1 * np.max(bins_remain_cap), -0.5, 0)\n\n    # Combine penalties and quadratic gap into a final score, with high penalties for infeasibility\n    priority_score = quadratic_gap + small_bin_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes selectively, penalizes small bins,\n    avoids underuse penalties, and enhances conditional penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly\n    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for nearly full bins\n    quadratic_gap_penalty = (bins_remain_cap - item)**2\n\n    # Penalize small bins to avoid creating bins too small and leftover bins\n    small_bin_penalty = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Base priority for bins that can fit the item\n    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)\n\n    # Combine all components into a final score\n    priority_score = base_priority - quadratic_gap_penalty - small_bin_penalty\n\n    # Ensure infeasible bins have the lowest priority\n    return feasibility_penalty + priority_score",
    "response_id": 2,
    "obj": 4.427602712405275,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids\n    underuse penalties, and enhances conditional penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Penalize small bins to avoid creating bins that are too small\n    small_bin_penalty = np.where(bins_remain_cap < 0.25 * bins_remain_cap.max(), -0.1, 0)\n\n    # Combine penalties and quadratic gap into a final score\n    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids\n    underuse penalties, and enhances conditional penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = np.where(bins_remain_cap >= item, (bins_remain_cap - item)**2, 0)\n\n    # Penalize small bins to avoid underutilization\n    small_bin_penalty = np.where(bins_remain_cap < 0.1, -1, 0)\n\n    # Combine penalties and quadratic gap into a final score\n    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty\n\n    return priority_score",
    "response_id": 4,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]