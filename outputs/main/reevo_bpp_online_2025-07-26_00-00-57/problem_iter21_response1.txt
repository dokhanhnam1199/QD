```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, applies quadratic penalties,
    strictly penalizes infeasibility, and inversely reduces underused binsâ€™ priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Quadratic penalty for bins that have less remaining capacity than the item
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Inverse priority for underused bins (quadratic reduction)
    underuse_penalty = (1 - normalized_cap)**2 * 100

    # Base priority is the normalized remaining capacity
    base_priority = normalized_cap

    # Combine base priority and penalties into a final score
    priority_score = base_priority + penalty - underuse_penalty

    return priority_score
```
