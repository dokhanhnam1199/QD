```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full, applies a quadratic gap penalty
    for gaps to prevent fragmentation, and severely penalizes bins that cannot fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority for feasible bins: higher priority for bins with less remaining capacity
    base_priority = -bins_remain_cap

    # Penalize bins that have less capacity than the item itself (strict infeasibility)
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap penalty to favor bins that reduce the gap more
    gap_penalty = (bins_remain_cap - item) ** 2

    # Combine base priority, gap penalty, and infeasibility penalty into a final score
    priority_score = base_priority - gap_penalty + penalty_infeasibility

    return priority_score
```
