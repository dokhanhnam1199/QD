```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It strongly penalizes bins that cannot fit the item,
    boosts bins with the smallest gaps, and is sensitive to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    priority = np.maximum(0, bins_remain_cap - item) / item

    # Strongly penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] -= 10  # Strong penalty for bins that cannot fit the item

    # Boost bins with the smallest gaps after placing the item
    if np.any(can_fit_item_mask):
        gaps = bins_remain_cap[can_fit_item_mask] - item
        if len(gaps) > 1:
            smallest_two_gaps = np.partition(gaps, 1)[:2]
            smallest_gap = smallest_two_gaps[0]
            second_smallest_gap = smallest_two_gaps[1]
            smallest_idx = np.where(np.isclose(gaps, smallest_gap))[0]
            second_smallest_idx = np.where(np.isclose(gaps, second_smallest_gap))[0]
            for idx in smallest_idx:
                priority[can_fit_item_mask][idx] += 2  # Boost for the smallest gap
            for idx in second_smallest_idx:
                priority[can_fit_item_mask][idx] += 1  # Lesser boost for the second smallest gap

    return priority
```
