```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes infeasibility,
    and prioritizes bins with nearly full capacity by penalizing larger gaps with a quadratic decay.
    It also adjusts weights for better balance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    if max_cap == 0:
        normalized_cap = np.zeros_like(bins_remain_cap)
    else:
        normalized_cap = bins_remain_cap / max_cap

    # Penalize bins that have less capacity than the item itself
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate gaps
    gaps = bins_remain_cap - item

    # Penalize larger gaps, favoring nearly full bins with quadratic decay
    penalty_gap = np.where(gaps >= 0, -gaps**2, 0)

    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score
    priority_score = 3 * normalized_cap + 2 * penalty_gap + penalty_infeasibility

    return priority_score
```
