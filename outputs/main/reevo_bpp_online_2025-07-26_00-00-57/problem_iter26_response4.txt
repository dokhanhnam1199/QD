```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation strictly penalizes infeasibility and prefers bins that are
    closer to being full using a quadratic gap penalty. It simplifies the logic by
    focusing on feasibility and gap penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Assign -inf priority to bins that cannot accommodate the item
    infeasible_mask = bins_remain_cap < item
    priority_score = np.where(infeasible_mask, -np.inf, 0)

    # Calculate quadratic gap penalties for feasible bins
    feasible_remain_cap = bins_remain_cap[~infeasible_mask]
    gap_penalties = (item - feasible_remain_cap)**2

    # Update priority scores with negative gap penalties (higher score is better)
    priority_score[~infeasible_mask] = -gap_penalties

    return priority_score
```
