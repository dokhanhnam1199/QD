{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. Normalization is applied\n    to ensure fair comparison.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Strict infeasibility check\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority: higher for bins with less remaining capacity (nearly full)\n    base_priority = bins_remain_cap - item\n\n    # Penalize underused bins by considering the gap from the maximum capacity seen so far\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01\n\n    # Safeguard division by zero and normalize base priority to be in the range [0, 1]\n    feasible_base_priority = np.where(bins_remain_cap >= item, base_priority, -np.inf)\n    max_priority = np.max(feasible_base_priority) if np.isfinite(np.max(feasible_base_priority)) else 0\n    min_priority = np.min(feasible_base_priority) if np.isfinite(np.min(feasible_base_priority)) else 0\n\n    # Normalize base priority\n    normalized_base_priority = np.where(\n        bins_remain_cap >= item,\n        (feasible_base_priority - min_priority) / (max_priority - min_priority) if max_priority > min_priority else 1,\n        0\n    )\n\n    # Combine normalized base priority with usage discount and infeasibility penalties\n    priority_score = normalized_base_priority - usage_discount\n\n    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    # Scale the priority score to avoid items being stuck in too small spaces\n    base_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -0.25, 0)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.01\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority + usage_discount + penalty\n\n    return np.where(bins_remain_cap < item, -np.inf, priority_score)\n\n[Reflection]\nFocus on simpler, more intuitive priority adjustments; penalize infeasibility heavily; use quadratic penalties to discourage over-penalty.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}