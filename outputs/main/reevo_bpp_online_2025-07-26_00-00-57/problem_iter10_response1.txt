```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation simplifies normalization, focuses on feasible bins, and uses
    quadratic penalties to prioritize nearly full bins effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate gap between remaining capacity and item size
    gap = bins_remain_cap - item

    # Use quadratic penalty for gaps to prioritize nearly full bins
    gap_penalty = - (gap ** 2) * 0.01 * np.where(gap >= 0, 1, 0)

    # Combine quadratic gap penalty into priority score
    priority_score = gap_penalty

    # Combine penalties and priority score, ensuring infeasible bins are strictly penalized
    final_score = priority_score + penalty

    return final_score
```
