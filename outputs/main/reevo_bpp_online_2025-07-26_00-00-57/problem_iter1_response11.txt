```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item itself (setting them to a very low priority), and further
    reduced if they are more full relative to their initial capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Original bin capacities
    bins_original_cap = np.full_like(bins_remain_cap, bins_remain_cap.max() + 1)
    
    # Penalty for bins with less remaining capacity than the item (can't fit the item)
    penalties = (bins_remain_cap < item) * -np.inf
    
    # Calculate priority: moving closer to full has a priority proportional to the fullness
    priority = 1 - (bins_remain_cap / bins_original_cap)
    
    # Apply penalties to bins where the item can't be placed
    priority += penalties
    
    # Inverse so that closer to full but feasible slots get highest prio
    priority = -priority
    
    return priority
```
