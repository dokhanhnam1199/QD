[
  {
    "stdout_filepath": "problem_iter24_response0.txt_stdout.txt",
    "code_path": "problem_iter24_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic penalties for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response1.txt_stdout.txt",
    "code_path": "problem_iter24_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,\n    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids\n    underuse penalties, and enhances conditional penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Normalize remaining capacities relative to the maximum remaining capacity\n    normalized_cap = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize small bins to avoid creating bins that are too small\n    small_bin_penalty = np.where(normalized_cap < 0.25, -0.1, 0)\n\n    # Combine penalties and quadratic gap into a final score\n    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty\n\n    return priority_score",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps to prioritize nearly full bins,\n    strictly penalizes infeasibility, penalizes small bins to avoid underuse,\n    and avoids underuse penalties for feasible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Penalize small bins to avoid creating bins that are too small\n    small_bin_penalty = np.where(bins_remain_cap < 0.1 * np.max(bins_remain_cap), -0.5, 0)\n\n    # Combine penalties and quadratic gap into a final score, with high penalties for infeasibility\n    priority_score = quadratic_gap + small_bin_penalty + penalty_infeasibility\n\n    return priority_score",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -(capacity_gap ** 2), 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response4.txt_stdout.txt",
    "code_path": "problem_iter24_code4.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic penalties for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response5.txt_stdout.txt",
    "code_path": "problem_iter24_code5.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps to prioritize nearly full bins,\n    strictly penalizes infeasibility, avoids underuse penalties, and includes\n    a penalty for bins that are significantly smaller than the maximum bin capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap prioritization for nearly full bins\n    quadratic_gap = -(bins_remain_cap - item) ** 2\n\n    # Penalize bins that are significantly smaller than the maximum bin capacity\n    small_bin_penalty = np.where(bins_remain_cap < 0.2 * bins_remain_cap.max(), -0.5, 0)\n\n    # Combine penalties and quadratic gap into a final score\n    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty\n\n    return priority_score",
    "response_id": 5,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response6.txt_stdout.txt",
    "code_path": "problem_iter24_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -(capacity_gap ** 2), 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 6,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response7.txt_stdout.txt",
    "code_path": "problem_iter24_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response8.txt_stdout.txt",
    "code_path": "problem_iter24_code8.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It scales the priority by bin capacity, reduces penalties,\n    and prefers bins that match the item size closely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Linear decreasing priority based on remaining capacity, scaled by bin capacity\n    base_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    # Reduced penalty factor compared to previous versions\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.005\n\n    # Prefer bins that match the item size closely by adding a bonus factor\n    match_bonus = np.where(bins_remain_cap == item, 0.5, 0)\n\n    # Combine base priority, usage discount, penalties, and match bonus into a final score\n    priority_score = base_priority - usage_discount + match_bonus\n\n    return priority_score + penalty",
    "response_id": 8,
    "obj": 149.2022337455126,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response9.txt_stdout.txt",
    "code_path": "problem_iter24_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    capacity_gap = bins_remain_cap - item\n    quadratic_gap_penalty = np.where(capacity_gap >= 0, -capacity_gap**2, 0)\n\n    # Calculate final priority score\n    priority_score = quadratic_gap_penalty + infeasibility_penalty\n\n    return priority_score",
    "response_id": 9,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response0.txt_stdout.txt",
    "code_path": "problem_iter25_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign -inf priority to bins that cannot accommodate the item\n    infeasible_mask = bins_remain_cap < item\n    priority_score = np.where(infeasible_mask, -np.inf, 0)\n\n    # Calculate quadratic gap penalties for feasible bins\n    feasible_remain_cap = bins_remain_cap[~infeasible_mask]\n    gap_penalties = (item - feasible_remain_cap)**2\n\n    # Update priority scores with gap penalties\n    priority_score[~infeasible_mask] = -gap_penalties\n\n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response1.txt_stdout.txt",
    "code_path": "problem_iter25_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    base_priority = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself heavily\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for bins that can hold the item but with a gap\n    gap_penalty = np.where(bins_remain_cap >= item, -(bins_remain_cap - item) ** 2, 0)\n\n    # Combine base priority, gap penalty, and infeasibility penalty\n    priority_score = base_priority + gap_penalty + penalty\n\n    return priority_score",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response2.txt_stdout.txt",
    "code_path": "problem_iter25_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    base_priority = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself to -inf\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic penalty for bins that are far from being full, scaled by item size\n    gap_penalty = ((bins_remain_cap - item) / bins_remain_cap.max()) ** 2\n\n    # Combine base priority, infeasibility penalty, and quadratic gap penalty\n    priority_score = base_priority - gap_penalty\n\n    return priority_score + infeasibility_penalty",
    "response_id": 2,
    "obj": 76.73514160351017,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response3.txt_stdout.txt",
    "code_path": "problem_iter25_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign -inf priority to bins that cannot accommodate the item\n    infeasible_mask = bins_remain_cap < item\n    priority_score = np.where(infeasible_mask, -np.inf, 0)\n\n    # Calculate quadratic gap penalty for feasible bins\n    feasible_remain_cap = bins_remain_cap[~infeasible_mask]\n    gap_penalty = (item - feasible_remain_cap) ** 2\n\n    # Combine gap penalty into final score for feasible bins\n    priority_score[~infeasible_mask] = -gap_penalty\n\n    return priority_score",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response4.txt_stdout.txt",
    "code_path": "problem_iter25_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Avoids unnecessary normalization;\n    prioritizes feasible bins without underuse penalties. Scales by bin capacity\n    for clarity and effectiveness.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility strictly\n    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for remaining capacity\n    gap_penalty = (bins_remain_cap - item) ** 2 * 0.01\n\n    # Combine penalties into a final score, ensuring infeasible bins are heavily penalized\n    priority_score = infeasible_penalty + gap_penalty\n\n    return priority_score",
    "response_id": 4,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]