```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, normalizes capacities,
    prioritizes bins that are near full while avoiding the smallest gap strategy which might lead to fragmentation,
    and strictly penalizes infeasibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    if max_cap > 0:
        normalized_cap = bins_remain_cap / max_cap
    else:
        normalized_cap = bins_remain_cap

    # Penalize bins that have less capacity than the item itself
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate feasible gaps
    feasible_gaps = bins_remain_cap - item
    feasible_gaps = feasible_gaps[feasible_gaps >= 0]

    # Favor bins with gaps close to the average gap (to avoid fragmentation without overly filling bins)
    if len(feasible_gaps) > 0:
        avg_gap = feasible_gaps.mean()
        gap_penalty = -((bins_remain_cap - item - avg_gap) ** 2) * 0.01
    else:
        gap_penalty = np.zeros_like(bins_remain_cap)

    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score
    priority_score = normalized_cap + gap_penalty + penalty_infeasibility

    return priority_score
```
