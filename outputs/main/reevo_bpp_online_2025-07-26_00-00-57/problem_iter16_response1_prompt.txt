{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes capacities, prioritizes nearly full bins using a quadratic gap\n    penalty, and strictly penalizes infeasibility to ensure balance and feasibility in online BPP.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = bins_remain_cap.max()\n    if max_cap == 0:\n        return np.full_like(bins_remain_cap, -np.inf)\n    normalized_cap = bins_remain_cap / max_cap\n\n    # Calculate gap penalty for nearly full bins\n    gap_penalty = (1 - normalized_cap)**2\n\n    # Penalize bins that cannot fit the item\n    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate final priority score\n    priority_score = normalized_cap - gap_penalty + feasibility_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on feasible bins and uses quadratic penalties for gaps\n    to prioritize nearly full bins while ensuring simplicity in logic.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasible bins (bins with less capacity than the item) with -inf\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Calculate the gap between remaining capacity and item size for feasible bins\n    gap = np.maximum(bins_remain_cap - item, 0)\n\n    # Apply quadratic penalty to gaps for feasible bins to prioritize nearly full bins\n    gap_penalty = - (gap ** 2) * 0.01\n\n    # Combine penalty for infeasibility and the quadratic gap penalty\n    priority_score = penalty + gap_penalty\n\n    return priority_score\n\n[Reflection]\nFocus on feasible bins, use quadratic penalties for gaps, simplify logic, prioritize nearly full bins effectively.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}