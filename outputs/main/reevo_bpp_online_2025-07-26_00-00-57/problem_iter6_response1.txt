```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It strongly penalizes infeasible bins and
    aims to balance usage to avoid leftover bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Base priority: Favor bins that are near full, but not less than item size
    base_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Penalize underused bins to avoid creating bins too small and leftover bins
    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = base_priority - usage_discount

    # Ensure infeasible bins have the lowest priority
    return np.where(bins_remain_cap < item, -np.inf, priority_score)
```
