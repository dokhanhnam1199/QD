```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. Normalization is applied
    to ensure fair comparison.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Strict infeasibility check
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Base priority: higher for bins with less remaining capacity (nearly full)
    base_priority = bins_remain_cap - item

    # Penalize underused bins by considering the gap from the maximum capacity seen so far
    usage_discount = (bins_remain_cap.max() - bins_remain_cap) * 0.01

    # Safeguard division by zero and normalize base priority to be in the range [0, 1]
    feasible_base_priority = np.where(bins_remain_cap >= item, base_priority, -np.inf)
    max_priority = np.max(feasible_base_priority) if np.isfinite(np.max(feasible_base_priority)) else 0
    min_priority = np.min(feasible_base_priority) if np.isfinite(np.min(feasible_base_priority)) else 0

    # Normalize base priority
    normalized_base_priority = np.where(
        bins_remain_cap >= item,
        (feasible_base_priority - min_priority) / (max_priority - min_priority) if max_priority > min_priority else 1,
        0
    )

    # Combine normalized base priority with usage discount and infeasibility penalties
    priority_score = normalized_base_priority - usage_discount

    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)
```
