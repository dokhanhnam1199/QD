```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins with the second smallest gap after
    accounting for the item size, penalizes bins that cannot fit the item directly,
    and normalizes the priority scores by the item size to ensure consistency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority with remaining capacity relative to item size
    priority = (bins_remain_cap - item) / item
    
    # Penalize bins that cannot fit the item
    priority[bins_remain_cap < item] = -np.inf
    
    # Encourage filling the bin with the second smallest gap
    valid_gaps = bins_remain_cap - item
    valid_gaps_indices = valid_gaps.argsort()
    
    # Check if there's a valid second smallest gap
    if len(valid_gaps_indices) > 1:
        second_smallest_gap_index = valid_gaps_indices[1]
        priority[second_smallest_gap_index] += 3  # can be tuned

    return priority
```
