```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers normalized remaining capacity, prioritizes bins
    near full, penalizes infeasibility, penalizes gaps, balances priorities, and
    favors second smallest gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    min_cap = bins_remain_cap.min()
    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap)

    # Calculate gaps
    gaps = bins_remain_cap - item

    # Penalize infeasibility (bins too small for the item)
    infeasibility_penalty = np.where(gaps < 0, -np.inf, 0)

    # Favor bins near full (high priority for bins with small gaps)
    # Penalize bins that have significantly more remaining capacity than the item
    gap_penalty = np.where(gaps > 0, gaps / max_cap, 0)

    # Favor second smallest gaps to avoid packing items into the smallest gaps first
    sorted_gaps = np.sort(gaps[gaps >= 0])
    second_smallest_gap = sorted_gaps[1] if len(sorted_gaps) > 1 else 0
    gap_favor = np.where(gaps == second_smallest_gap, 0.1, 0)

    # Combine all factors into a final priority score
    priority_score = normalized_cap - gap_penalty + infeasibility_penalty + gap_favor

    return priority_score
```
