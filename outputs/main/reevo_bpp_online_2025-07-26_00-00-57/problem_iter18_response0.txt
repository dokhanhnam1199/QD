```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gaps for nearly full bins and strictly penalizes infeasibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that cannot fit the item
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate quadratic gap penalty for feasible bins
    max_cap = bins_remain_cap.max()
    if max_cap > 0:
        normalized_cap = bins_remain_cap / max_cap
        quadratic_gap_penalty = (1 - normalized_cap) ** 2
    else:
        quadratic_gap_penalty = np.zeros_like(bins_remain_cap)

    # Calculate final priority score
    priority_score = quadratic_gap_penalty + infeasibility_penalty

    return priority_score
```
