```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. It uses quadratic gap
    penalties, normalized capacities, and strictly penalizes infeasibility using -âˆž.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities
    total_capacity = bins_remain_cap.sum()
    if total_capacity == 0:
        total_capacity = 1  # Avoid division by zero
    normalized_cap = bins_remain_cap / total_capacity

    # Quadratic penalty for deviation from full capacity
    gap_penalty = (1 - normalized_cap) ** 2 * 100  # Higher penalty for nearly empty bins

    # Strict infeasibility penalty
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Enhance nearly full bins
    enhancement_bonus = np.where((bins_remain_cap - item) >= 0, (bins_remain_cap - item) / bins_remain_cap, 0)

    # Combine penalties and bonuses into a final score
    priority_score = enhancement_bonus + gap_penalty + infeasibility_penalty

    return priority_score
```
