```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. Small bins are penalized more.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Linear increasing priority based on remaining capacity minus item size
    base_priority = (bins_remain_cap - item)

    # Penalize underused bins more by reducing their priority score
    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.1

    # Combine base priority and penalties into a final score
    priority_score = base_priority - usage_discount

    return priority_score + penalty
```
