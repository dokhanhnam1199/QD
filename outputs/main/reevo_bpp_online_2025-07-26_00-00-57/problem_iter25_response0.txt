```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gap penalties, strictly penalizes
    infeasibility, and simplifies logic. Bins that are closer to being full get
    higher priority, but the priority is strictly reduced for bins that cannot
    accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Assign -inf priority to bins that cannot accommodate the item
    infeasible_mask = bins_remain_cap < item
    priority_score = np.where(infeasible_mask, -np.inf, 0)

    # Calculate quadratic gap penalties for feasible bins
    feasible_remain_cap = bins_remain_cap[~infeasible_mask]
    gap_penalties = (item - feasible_remain_cap)**2

    # Update priority scores with gap penalties
    priority_score[~infeasible_mask] = -gap_penalties

    return priority_score
```
