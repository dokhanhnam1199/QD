{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It scales the priority by bin capacity, reduces penalties,\n    and prefers bins that match the item size closely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that have less capacity than the item itself\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Linear decreasing priority based on remaining capacity, scaled by bin capacity\n    base_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    # Reduced penalty factor compared to previous versions\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.005\n\n    # Prefer bins that match the item size closely by adding a bonus factor\n    match_bonus = np.where(bins_remain_cap == item, 0.5, 0)\n\n    # Combine base priority, usage discount, penalties, and match bonus into a final score\n    priority_score = base_priority - usage_discount + match_bonus\n\n    return priority_score + penalty\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on quadratic gap penalties, strictly penalizes\n    infeasibility, and simplifies logic. Bins that are closer to being full get\n    higher priority, but the priority is strictly reduced for bins that cannot\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    base_priority = bins_remain_cap / bins_remain_cap.max()\n\n    # Penalize bins that have less capacity than the item itself heavily\n    penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty for bins that can hold the item but with a gap\n    gap_penalty = np.where(bins_remain_cap >= item, -(bins_remain_cap - item) ** 2, 0)\n\n    # Combine base priority, gap penalty, and infeasibility penalty\n    priority_score = base_priority + gap_penalty + penalty\n\n    return priority_score\n\n[Reflection]\nSimplify logic, focus on quadratic penalties, and penalize gaps and infeasibility heavily.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}