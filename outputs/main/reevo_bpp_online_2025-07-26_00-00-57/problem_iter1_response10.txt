```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Apply a penalty to bins where the remaining capacity is less than the item size
    penalty_mask = bins_remain_cap < item
    priority = bins_remain_cap - item
    priority[priority_mask] = -priority[priority_mask]  # Penalize too small bins
    return priority

# Example usage
# item_size = 10
# bin_capacities = np.array([20, 30, 15])
# remaining_caps = np.array([15, 25, 12])
# priorities = priority_v2(item_size, remaining_caps)
# print(priorities)  # Output should reflect the priority given to each bin
```
