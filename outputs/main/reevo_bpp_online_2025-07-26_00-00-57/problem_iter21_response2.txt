```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, applies quadratic penalties,
    strictly penalizes infeasibility, and inversely reduces underused binsâ€™ priority,
    focusing on feasible solutions and avoiding unnecessary normalizations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap

    # Linear decreasing priority based on remaining capacity
    base_priority = (normalized_cap - item / max_cap)

    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Penalize underused bins to avoid creating bins too small and leftover bins
    usage_discount = (normalized_cap.min() - normalized_cap)**2 * 0.01

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = base_priority - usage_discount

    return priority_score + penalty
```
