```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, normalizes capacities,
    prioritizes bins that are near full, penalizes infeasibility, gaps, and
    balances priorities while favoring the second smallest gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Base priority based on remaining normalized capacity
    base_priority = normalized_cap

    # Penalize bins that have less capacity than the item itself
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate gaps for second smallest gaps
    sorted_gaps = np.sort(bins_remain_cap - item)
    second_smallest_gap = sorted_gaps[1] if len(sorted_gaps) > 1 else np.inf
    gap_penalty = 1 - np.where(bins_remain_cap - item == second_smallest_gap, 0, 0.1)

    # Combine base priority, infeasibility penalty, and gap penalty
    priority_score = base_priority + infeasibility_penalty + gap_penalty

    return priority_score
```
