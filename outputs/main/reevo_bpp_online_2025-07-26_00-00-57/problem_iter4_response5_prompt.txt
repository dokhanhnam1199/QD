{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on scaling, penalizing underuse, and clear item capacity checks.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    base_priority = (bins_remain_cap - item) / bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself\n    penalty_for_small_bins = np.where(bins_remain_cap < item, -2.0, 0)\n\n    # Penalize underused bins to avoid creating bins too small and leftover bins\n    # This penalty increases the more the bin is under-used compared to the largest bin\n    usage_discount = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()\n\n    # Combine base priority, usage discount, and penalties into a final score\n    priority_score = base_priority - usage_discount + penalty_for_small_bins\n\n    # Ensure bins without enough space are not considered\n    priority_score[bins_remain_cap < item] = -np.inf\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Prioritizes bins that are near full but can\n    still fit the item, penalizes bins that cannot fit the item, and boosts bins\n    that have a close-to-subtle gap which encourages less fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority scores\n    priority = np.zeros_like(bins_remain_cap)\n    \n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_capacity = bins_remain_cap - item\n    \n    # Mark bins that can fit the item\n    can_fit_item_mask = remaining_capacity >= 0\n    \n    # Assign high priority to bins that can fit the item, scaled by remaining capacity\n    priority[can_fit_item_mask] = remaining_capacity[can_fit_item_mask] / item\n    \n    # Penalize bins that cannot fit the item\n    priority[~can_fit_item_mask] -= 2\n    \n    # Boost bins that have a close-to-subtle gap to reduce fragmentation\n    if np.any(can_fit_item_mask):\n        sorted_remaining = np.sort(remaining_capacity[can_fit_item_mask])\n        if len(sorted_remaining) > 1:\n            subtle_gap = sorted_remaining[1]  # Second smallest gap\n        else:\n            subtle_gap = sorted_remaining[0]  # Only one option if only one bin can fit the item\n        \n        # Boost bins that have this subtle gap\n        subtle_gap_indices = np.where(np.isclose(remaining_capacity, subtle_gap))[0]\n        priority[subtle_gap_indices] += 1\n    \n    return priority\n\n[Reflection]\nFocus on item fit, prioritize near-full bins, reduce fragmentation through subtle gaps.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}