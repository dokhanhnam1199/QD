```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation normalizes capacities, uses normalized capacity differences for gap penalties,
    and strictly penalizes infeasibility to ensure balance and feasibility in online BPP.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    normalized_cap = bins_remain_cap / max_cap if max_cap > 0 else bins_remain_cap

    # Calculate gap penalty for normalized capacity differences
    gap_penalty = (normalized_cap - (item / max_cap))**2 * -1

    # Penalize bins that cannot fit the item
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate final priority score
    priority_score = gap_penalty + infeasibility_penalty

    return priority_score
```
