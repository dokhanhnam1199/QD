```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins that are nearly full, while
    avoiding infeasibility strictly. It normalizes the base priority and applies
    a slight penalty for bins with large remaining capacity compared to the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize infeasibility strictly: if item doesn't fit, set score to -inf
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Base priority: higher for bins with less remaining capacity (nearly full)
    base_priority = 1 - (bins_remain_cap - item) / bins_remain_cap.max()

    # Normalize base priority to be in the range [0, 1]
    # Avoid division by zero in case base_priority.max() == base_priority.min()
    normalized_base_priority = (base_priority - base_priority.min()) / (base_priority.max() - base_priority.min() if base_priority.max() != base_priority.min() else 1)

    # Slight penalty for bins with large remaining capacity compared to the item
    small_gap_favor = -(bins_remain_cap - item) ** 2 * 0.01

    # Combine penalties and priorities, infeasibility overrides others
    priority_score = normalized_base_priority + small_gap_favor

    return np.where(bins_remain_cap < item, infeasibility_penalty, priority_score)
```
