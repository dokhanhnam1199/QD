```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full with a quadratic gap penalty,
    strongly penalizes infeasibility, and inversely reduces the priority of underused bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Quadratic decreasing priority based on remaining capacity gap
    capacity_gap = bins_remain_cap - item
    base_priority = np.where(capacity_gap >= 0, -capacity_gap**2, -np.inf)

    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Inversely reduce the priority of underused bins
    max_cap = bins_remain_cap.max()
    usage_discount = np.where(capacity_gap >= 0, (max_cap - bins_remain_cap)**2 * 0.01, 0)

    # Combine base priority and usage discount into a final score
    priority_score = base_priority - usage_discount

    return priority_score
```
