```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is significantly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. Quadratic gap penalties are
    introduced to penalize bins that are far from being full, and normalization is applied.
    Infeasibility is strictly penalized using -∞.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    base_priority = bins_remain_cap / bins_remain_cap.max()

    # Penalize bins that have less capacity than the item itself with -∞
    infeasible_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap penalties for bins that have significant unused space
    gap_penalty = ((bins_remain_cap.max() - bins_remain_cap) ** 2) * 0.001

    # Combine base priority, gap penalty, and infeasibility penalties into a final score
    priority_score = base_priority - gap_penalty + infeasible_penalty

    return priority_score
```
