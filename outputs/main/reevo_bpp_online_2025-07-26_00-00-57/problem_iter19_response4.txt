```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full with a quadratic gap penalty,
    strongly penalizes infeasibility, and inversely reduces the priority of underused bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Quadratic decreasing priority based on remaining capacity gap
    base_priority = (bins_remain_cap.max() - (bins_remain_cap - item))**2

    # Penalize bins that have less capacity than the item itself strongly
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Reduce priority for underused bins inversely
    usage_discount = 1 / (bins_remain_cap.max() - bins_remain_cap + 1e-6)

    # Combine base priority, usage discount, and penalties into a final score
    priority_score = base_priority - usage_discount

    return priority_score * (bins_remain_cap >= item) + penalty
```
