```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It scales the priority by bin capacity, reduces penalties,
    and prefers bins that match the item size closely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Linear decreasing priority based on remaining capacity, scaled by bin capacity
    base_priority = (bins_remain_cap - item) / bins_remain_cap

    # Penalize underused bins to avoid creating bins too small and leftover bins
    # Reduced penalty factor compared to previous versions
    usage_discount = (bins_remain_cap.max() - bins_remain_cap)**2 * 0.005

    # Prefer bins that match the item size closely by adding a bonus factor
    match_bonus = np.where(bins_remain_cap == item, 0.5, 0)

    # Combine base priority, usage discount, penalties, and match bonus into a final score
    priority_score = base_priority - usage_discount + match_bonus

    return priority_score + penalty
```
