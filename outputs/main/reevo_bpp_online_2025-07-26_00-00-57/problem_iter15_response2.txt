```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes capacities, prioritizes nearly full bins using a quadratic gap
    penalty, and strictly penalizes infeasibility to ensure balance and feasibility in online BPP.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = bins_remain_cap.max()
    if max_cap == 0:
        return np.full_like(bins_remain_cap, -np.inf)
    normalized_cap = bins_remain_cap / max_cap

    # Calculate gap penalty for nearly full bins
    gap_penalty = (1 - normalized_cap)**2

    # Penalize bins that cannot fit the item
    feasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate final priority score
    priority_score = normalized_cap - gap_penalty + feasibility_penalty

    return priority_score
```
