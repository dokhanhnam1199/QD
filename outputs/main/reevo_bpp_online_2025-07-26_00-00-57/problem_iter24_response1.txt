```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on quadratic gaps, strictly penalizes infeasibility,
    prioritizes nearly full bins, normalizes selectively, penalizes small bins, avoids
    underuse penalties, and enhances conditional penalties for feasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Quadratic gap prioritization for nearly full bins
    quadratic_gap = -(bins_remain_cap - item) ** 2

    # Normalize remaining capacities relative to the maximum remaining capacity
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Penalize small bins to avoid creating bins that are too small
    small_bin_penalty = np.where(normalized_cap < 0.25, -0.1, 0)

    # Combine penalties and quadratic gap into a final score
    priority_score = quadratic_gap + penalty_infeasibility + small_bin_penalty

    return priority_score
```
