```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are closer to being full while ensuring
    that bins where the item cannot fit receive a very low priority. The priority score
    is calculated based on the remaining capacity relative to the original capacity of the bins.
    It also boosts bins with the smallest gaps after placing the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Original bin capacities, assuming all bins start with the same capacity
    bins_original_cap = np.max(bins_remain_cap)
    
    # Penalty for bins with less remaining capacity than the item (can't fit the item)
    penalties = (bins_remain_cap < item) * -np.inf
    
    # Calculate priority: moving closer to full has a priority proportional to the fullness
    priority = 1 - (bins_remain_cap / bins_original_cap)
    
    # Apply penalties to bins where the item can't be placed
    priority += penalties
    
    # Invert so that bins closer to full but feasible get the highest priority
    priority = -priority
    
    # Boost bins with the smallest gaps after placing the item
    feasible_caps = bins_remain_cap[bins_remain_cap >= item]
    if len(feasible_caps) > 0:
        gaps = feasible_caps - item
        smallest_two_gaps = np.partition(gaps, 1)[:2]
        smallest_gap = smallest_two_gaps[0]
        second_smallest_gap = smallest_two_gaps[1]
        smallest_indices = np.where(np.isclose(bins_remain_cap - item, smallest_gap))[0]
        second_smallest_indices = np.where(np.isclose(bins_remain_cap - item, second_smallest_gap))[0]
        priority[smallest_indices] += 2  # Boost for the smallest gap
        priority[second_smallest_indices] += 1  # Lesser boost for the second smallest gap

    return priority
```
