{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on minimizing the gap between the remaining\n    capacity and the item size while strongly penalizing infeasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize infeasibility: if an item cannot fit in a bin, assign -inf priority\n    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Base priority based on remaining capacity after placing the item\n    base_priority = bins_remain_cap - item\n\n    # Penalty for the gap between remaining capacity and item size\n    gap_penalty = -(bins_remain_cap - item) * 0.1\n\n    # Final priority score: sum of base priority and gap penalty, with infeasibility penalty\n    priority_score = base_priority + gap_penalty + infeasibility_penalty\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are nearly full, applies a quadratic penalty\n    for gaps to prevent fragmentation, and strictly penalizes bins that cannot fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority for feasible bins: higher priority for bins with less remaining capacity\n    base_priority = -bins_remain_cap\n\n    # Penalize bins that have less capacity than the item itself (strict infeasibility)\n    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)\n\n    # Quadratic gap penalty to favor bins that reduce the gap more\n    gap_penalty = (bins_remain_cap - item) ** 2\n\n    # Combine base priority, gap penalty, and infeasibility penalty into a final score\n    priority_score = base_priority - gap_penalty + penalty_infeasibility\n\n    return priority_score\n\n[Reflection]\nFavor nearly full bins, use quadratic gap penalties, and severely penalize infeasibility.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}