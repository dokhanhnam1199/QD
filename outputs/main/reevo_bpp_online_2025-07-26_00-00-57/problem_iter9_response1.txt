```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used, prioritizing nearly full bins while strictly penalizing infeasibility
    and favoring minimal gaps. The scoring is simplified and avoids excessive calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that have less capacity than the item itself
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate normalized gap between remaining capacity and item size
    gap = bins_remain_cap - item
    normalized_gap = (gap / bins_remain_cap) * np.where(gap >= 0, 1, 0)

    # Use quadratic penalty for gaps to prioritize nearly full bins
    gap_penalty = - (gap ** 2) * 0.01

    # Combine normalized gap and quadratic gap penalty into priority score
    priority_score = normalized_gap + gap_penalty

    # Combine penalties and priority score, ensuring infeasible bins are strictly penalized
    final_score = priority_score + penalty

    return final_score
```
