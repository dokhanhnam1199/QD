```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and ensure feasibility
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Give a clear preference to bins that can fit the item at all
    can_fit_item_mask = bins_remain_cap >= item
    priority[np.where(~can_fit_item_mask)] -= 2
    
    # Inverse number of items means that the previously heavier used bin has lower priority
    # Adjust weights to ensure that)e target college more accurately, adjusting weights in
    # priority computation
    # Normalize priority before adjust to ensure it's between 0 and 1
    priority -= np.min(priority)
    priority /= (np.max(priority) - np.min(priority))
    
    # Penalize bins that are close to being empty (as they probably didn't hurt overall packing before)
    priority += (bins_remain_cap / np.min(bins_remain_cap if np.min(bins_remain_cap) > 0 else [1]))
    
    return priority
```
