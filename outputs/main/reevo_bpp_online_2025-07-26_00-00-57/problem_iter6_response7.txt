```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, normalizes capacities,
    prioritizes bins that are near full, and penalizes infeasibility using
    squared penalties for gaps, thus favoring nearly full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    normalized_cap = bins_remain_cap / bins_remain_cap.max()

    # Penalize bins that have less capacity than the item itself (infeasible)
    penalty_infeasibility = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate gaps and apply squared penalty, favoring nearly full bins
    gaps = bins_remain_cap - item
    penalty_gap = np.where(gaps >= 0, -0.01 * (gaps ** 2), 0)

    # Combine normalized capacity, gap penalty, and infeasibility penalty into a final score
    priority_score = normalized_cap + penalty_gap + penalty_infeasibility

    return priority_score
```
