```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin to add the given item.

    This implementation focuses on:
    - Prioritizing bins with less remaining capacity (almost full bins).
    - Strictly penalizing bins where the item cannot fit.
    - Penalizing larger gaps quadratically to favor bins that minimize the gap.

    Args:
        item: Size of the item to be added.
        bins_remain_cap: Array of remaining capacities of each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Base priority: higher for bins with less remaining capacity
    base_priority = -bins_remain_cap

    # Penalize infeasible bins (where the item cannot fit)
    infeasibility_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Penalize larger gaps quadratically to favor bins that minimize the gap
    gap_penalty = (bins_remain_cap - item) ** 2

    # Combine scores to get final priority
    priority_score = base_priority - gap_penalty + infeasibility_penalty

    return priority_score
```
