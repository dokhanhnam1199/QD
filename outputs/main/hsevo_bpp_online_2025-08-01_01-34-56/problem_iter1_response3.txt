```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    employing a Best Fit-like strategy.

    Just as one carefully handles precious radioactive materials, we must
    optimize the use of our storage containers. This function calculates
    a priority score for each bin, aiming to select the one that will be
    most 'snugly' filled by the incoming item, leaving the smallest
    possible unoccupied space. This minimizes waste and ensures our bins
    are as efficient as possible.

    Args:
        item: Size of the new item, analogous to a quantity of a substance.
        bins_remain_cap: Array of the current unoccupied capacities of each
                         available storage bin.

    Return:
        Array of the same size as bins_remain_cap, where each element
        represents the priority score for its corresponding bin. The bin
        with the highest score is the preferred choice for the item.
    """
    # First, calculate the theoretical remaining capacity for each bin
    # if the current item were placed within it.
    # A smaller positive remainder indicates a better, 'snugger' fit.
    theoretical_remainders = bins_remain_cap - item

    # Initialize all priorities to a very low value (negative infinity).
    # This ensures that bins where the item simply does not fit are never chosen.
    # We must never attempt to force a quantity where it does not belong,
    # for that would be an unstable state.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can actually be accommodated.
    # Only consider those where 'theoretical_remainders' is non-negative.
    feasible_bins_mask = theoretical_remainders >= 0

    # For the bins that can accommodate the item, we assign a priority.
    # To maximize a 'snugness' score, we take the negative of the
    # remaining space. A smaller positive remainder (e.g., 0.1) will
    # result in a larger (less negative) priority score (-0.1),
    # while a perfect fit (remainder 0.0) yields the highest score (0.0).
    # This reflects our commitment to precision and minimizing any void.
    priorities[feasible_bins_mask] = -theoretical_remainders[feasible_bins_mask]

    return priorities
```
