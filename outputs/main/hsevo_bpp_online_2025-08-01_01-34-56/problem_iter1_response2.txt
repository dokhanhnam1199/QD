```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    From the perspective of minimizing wasted space, much like a body seeking
    the lowest potential energy state, we endeavor to place the item into
    a bin such that the remaining capacity within that bin is as small as
    possible, yet still positive. This method, akin to what some call the
    'Best Fit' heuristic, seeks to fill bins as completely as possible, thereby
    reserving larger capacities in other bins for future, potentially larger,
    items or indicating that a bin is nearing its full state.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot accommodate the item receive an exceedingly low (negative infinity)
        priority score. For bins that can fit the item, the priority is higher
        for those that would result in the smallest positive remaining capacity.
    """
    # Calculate the remaining capacity for each bin if the current item were placed within it.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize all priority scores to a profoundly low value.
    # This ensures that bins incapable of holding the item are never chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can indeed be accommodated.
    # These are the bins where the potential remaining capacity is non-negative.
    fitting_bins_mask = potential_remaining_cap >= 0

    # For the bins that can fit the item, we desire to select the one that leaves
    # the smallest *positive* remainder. This translates to maximizing the negative
    # of the potential remaining capacity. A perfect fit (0 remainder) yields the
    # highest possible score (0), while larger remainders yield progressively
    # lower (more negative) scores.
    priority_scores[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priority_scores
```
