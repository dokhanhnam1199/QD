```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the meticulous work of revealing DNA's structure, this
    priority function aims for a 'tight fit' for each item. It prioritizes
    placing the item into the bin that, after insertion, leaves the least
    amount of remaining space. This strategy, akin to precisely fitting
    molecules together, minimizes wasted capacity and encourages bins to
    become 'full' or 'complete' as efficiently as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more preferred bin. Bins where the item
        does not fit will receive a very low (negative infinity) priority.
    """
    # Initialize all priorities to a very low value. This ensures bins
    # where the item cannot fit are never considered.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # This prevents calculations for invalid bins and ensures we only
    # consider feasible placements.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item fits, calculate the remaining capacity
    # *after* placing the item.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores to the bins where the item fits.
    # We want to maximize the 'tightness' of the fit, meaning we prefer
    # bins that leave the smallest amount of space after placement.
    # By taking the negative of 'remaining_after_placement', a smaller
    # positive value (closer to a perfect fit) results in a larger
    # (less negative, or zero for a perfect fit) priority score.
    # A perfect fit (remaining_after_placement == 0) will yield the highest priority of 0.
    priorities[can_fit_mask] = -remaining_after_placement

    return priorities
```
