```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements a Best Fit (BF) heuristic for online bin packing.
    It prioritizes bins that, if the item were placed in them, would leave the
    smallest positive remaining capacity (i.e., the "tightest" fit).
    Bins that cannot accommodate the item receive a very low priority (-np.inf).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Calculate the remaining capacity if the item is placed in each bin
    # Note: This might result in negative values for bins that cannot fit the item
    potential_remaining = bins_remain_cap - item

    # Initialize priority scores.
    # Bins that cannot fit the item should have an extremely low priority (e.g., negative infinity)
    # to ensure they are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # For bins that can fit the item (bins_remain_cap >= item),
    # we want to maximize the 'tightness' of the fit.
    # A smaller 'potential_remaining' (but positive) is better.
    # To achieve this with a maximization priority, we use the negative of 'potential_remaining'.
    # Example:
    #   If potential_remaining = 0.1, score = -0.1 (good)
    #   If potential_remaining = 0.5, score = -0.5 (less good)
    #   The smallest positive remaining capacity will yield the highest (least negative) score.
    
    # Use np.where to apply different logic based on whether the item fits
    priorities = np.where(bins_remain_cap >= item, -potential_remaining, -np.inf)

    return priorities
```
