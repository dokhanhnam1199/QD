```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    
    Inspired by the principle of efficient space-time curvature –
    or rather, efficient space-capacity utilization – this heuristic 
    seeks to "fill" existing bins as densely as possible before considering 
    new spatial configurations. It aims for a "Best Fit" approach:
    prioritizing the bin that, if chosen, would leave the smallest 
    remaining capacity. This minimizes wasted space and compacts items, 
    much like matter seeks to occupy the most stable, dense state.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more preferred bin. Bins that cannot fit 
        the item will have a very low (negative infinity) priority.
    """
    
    # Initialize priorities to a state of profound improbability (negative infinity)
    # for all bins. This ensures that any bin incapable of fitting the item
    # will never be selected unless no other option exists (leading to a new bin).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Ascertain which bins possess sufficient capacity for the new item.
    # These are our "valid candidates" in the manifold of bins.
    can_fit_mask = bins_remain_cap >= item

    # For the valid candidates, we compute a "compactness score".
    # The ideal is a perfect fit, where remaining capacity is zero.
    # A smaller remaining capacity signifies a "denser" packing for that bin,
    # thus a higher priority. We achieve this by taking the negative of the
    # remaining space:
    #   - If remaining_cap - item = 0 (perfect fit), score is 0. (Highest)
    #   - If remaining_cap - item = 1 (small remainder), score is -1.
    #   - If remaining_cap - item = N (large remainder), score is -N.
    # The maximum of these scores will yield the bin with the smallest positive remainder.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
