```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, guided by the principle of gravitational collapse.

    This heuristic prioritizes bins that, upon receiving the item, will approach
    a state of maximum density, minimizing the 'entropy' of wasted space.
    It's a "Best Fit" approach, favoring a more complete 'collapse' into a compact state.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the 'potential remaining capacity' if the item were to be added to each bin.
    # This is akin to assessing the final state of a spacetime region after an accretion event.
    potential_remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores. Default to zero, but we'll refine them.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # For bins where the item does not fit, it's an impossible "collapse" scenario.
    # Such bins lie beyond the 'event horizon' of our item's capacity, thus they receive
    # an infinitely low priority, effectively removing them from consideration.
    priority_scores[potential_remaining_after_placement < 0] = -np.inf

    # For bins where the item does fit, we prioritize those that result in the smallest
    # 'potential remaining capacity'. This is our drive for maximum compaction, like a
    # body collapsing into the most dense possible state.
    # A smaller remaining space implies a more "dense" and "complete" bin,
    # thus a higher (less negative) priority.
    # This translates to minimizing the remaining positive space: - (remaining_space).
    priority_scores[potential_remaining_after_placement >= 0] = \
        -potential_remaining_after_placement[potential_remaining_after_placement >= 0]

    return priority_scores
```
