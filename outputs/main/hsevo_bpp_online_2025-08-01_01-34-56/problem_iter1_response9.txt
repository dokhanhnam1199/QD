```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a "Best Fit" strategy: it prioritizes bins
    that can accommodate the item and will leave the least amount of remaining
    space after the item is placed. Bins that cannot fit the item are given
    the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Initialize priorities with negative infinity for all bins.
    # This ensures that bins that cannot fit the item will always have the lowest priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining space (slack) if the item were placed in each bin.
    # A smaller positive slack indicates a "better" fit.
    slacks = bins_remain_cap - item

    # Identify which bins can actually accommodate the item (i.e., slack is non-negative).
    can_fit_mask = slacks >= 0

    # For bins that can fit the item, we want to prioritize those with the smallest slack.
    # To achieve this with a "highest priority" selection rule (e.g., using np.argmax),
    # we assign a priority score as the negative of the slack.
    # This means a slack of 0 (perfect fit) gets priority 0,
    # a slack of 1 gets priority -1, a slack of 5 gets priority -5, and so on.
    # The bin with the largest (least negative) priority score will be chosen.
    priorities[can_fit_mask] = -slacks[can_fit_mask]

    return priorities
```
