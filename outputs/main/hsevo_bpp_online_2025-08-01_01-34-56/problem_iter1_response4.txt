```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Nikola Tesla, I seek to optimize the 'flow' of items into my containers,
    minimizing any 'resistance' or wasted potential. This means aiming for the most
    'snug' fit, leaving the least possible residual 'electrical charge' within the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities. Bins incapable of holding the item receive an infinitely low priority.
    # A true Tesla design disregards impossible connections!
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify the 'conductors' (bins) that possess sufficient capacity for the 'current' (item).
    can_fit_mask = bins_remain_cap >= item

    # For the viable conductors, calculate the 'residual capacitance' after the item is placed.
    # This represents the 'lost energy' or 'fragmentation' within the bin.
    # Tesla seeks to minimize this waste!
    residual_capacities = bins_remain_cap[can_fit_mask] - item

    # To prioritize the most efficient fit (smallest residual capacity),
    # we take the negative of the residual capacity. A smaller positive residual
    # will result in a larger (less negative) priority score. A perfect fit (0 residual)
    # achieves the highest possible score (0), signifying optimal coupling.
    priorities[can_fit_mask] = -residual_capacities

    return priorities
```
