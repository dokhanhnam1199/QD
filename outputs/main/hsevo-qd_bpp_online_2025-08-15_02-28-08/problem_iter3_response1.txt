```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a "Best Fit" inspired approach.

    This heuristic prioritizes bins that have just enough remaining capacity to fit the item,
    aiming to leave larger remaining capacities in other bins for potentially larger future items.
    It assigns a higher priority to bins where the remaining capacity is closest to the item size,
    but still large enough to accommodate it.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Only consider bins where the item can fit
    # For bins where it can fit, the priority is inversely proportional to the difference.
    # A smaller difference means the bin is a tighter fit, which is preferred.
    # We use a large constant for valid fits and 0 for invalid fits.
    # The priority is scaled by the inverse of the difference + epsilon to favor tighter fits.
    epsilon = 1e-9
    priorities = np.where(diff >= 0, 1.0 / (diff + epsilon), 0)

    return priorities
```
