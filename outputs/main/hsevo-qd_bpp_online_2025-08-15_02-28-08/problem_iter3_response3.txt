```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a strategy that prioritizes bins with minimal remaining capacity that can still fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Only consider bins where the item can fit.
    # For bins that can fit, the priority is inversely proportional to the remaining capacity.
    # Bins with less remaining capacity (closer to fitting the item exactly) get higher priority.
    # A small epsilon is added to avoid division by zero and to ensure that bins with exactly 0 remaining capacity after packing
    # (i.e., diff = 0) are still assigned a high, but not infinite, priority.
    epsilon = 1e-9
    priorities = np.where(diff >= 0, 1.0 / (bins_remain_cap + epsilon), 0)

    return priorities
```
