```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size > 0:
        # Almost Full Fit: prioritize bins that will be almost full after placing the item.
        # A higher priority is given to bins where (remaining_capacity - item_size) is minimized.
        # We invert this difference and add 1 to avoid division by zero or zero priorities,
        # and to ensure that smaller remaining capacities (closer to zero after placement) get higher priority.
        almost_full_scores = 1.0 / (valid_bins_remain_cap - item + 1e-9)
        priorities[valid_bins_indices] = almost_full_scores

    return priorities
```
