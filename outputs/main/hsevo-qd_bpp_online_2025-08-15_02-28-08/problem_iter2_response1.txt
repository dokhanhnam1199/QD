```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by favoring exact fits, then closest fits, using a smooth scoring.

    Combines Exact Fit First and Inverse Distance strategies:
    1. High priority for bins where remaining_capacity == item.
    2. Medium priority for bins where remaining_capacity > item, inversely
       proportional to the difference (remaining_capacity - item).
    3. Zero priority for bins where remaining_capacity < item.
    """
    priorities = np.zeros_like(bins_remain_cap)
    can_fit_mask = bins_remain_cap >= item

    fitting_bins_cap = bins_remain_cap[can_fit_mask]
    fitting_bins_indices = np.where(can_fit_mask)[0]

    if len(fitting_bins_cap) > 0:
        # Prioritize exact fits with a high score
        exact_fit_mask = fitting_bins_cap == item
        priorities[fitting_bins_indices[exact_fit_mask]] = 2.0  # Highest priority

        # For bins that are not exact fits, calculate priority based on how close they are
        non_exact_fitting_bins_cap = fitting_bins_cap[~exact_fit_mask]
        non_exact_fitting_bins_indices = fitting_bins_indices[~exact_fit_mask]

        if len(non_exact_fitting_bins_cap) > 0:
            # Calculate the difference (space after placing the item)
            space_after_placement = non_exact_fitting_bins_cap - item

            # Normalize these differences to a [0, 1] range for scoring.
            # Smaller difference means higher priority.
            min_diff = np.min(space_after_placement)
            max_diff = np.max(space_after_placement)

            if max_diff - min_diff > 1e-9: # Avoid division by zero if all differences are the same
                normalized_diff = (space_after_placement - min_diff) / (max_diff - min_diff)
            else:
                normalized_diff = np.zeros_like(space_after_placement)
            
            # Assign priorities: inverse relationship with normalized difference, scaled down.
            # This gives medium priority, lower than exact fits.
            # Add a small offset to ensure it's greater than 0 for fitting bins.
            priorities[non_exact_fitting_bins_indices] = 1.0 - normalized_diff + 0.1

    return priorities
```
