```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Only consider bins where the item can fit
    # For bins where it can fit, the priority is 1 / (difference + epsilon)
    # Epsilon is added to avoid division by zero. A small epsilon can be used.
    epsilon = 1e-9
    priorities = np.where(diff >= 0, 1 / (diff + epsilon), 0)

    return priorities
```
