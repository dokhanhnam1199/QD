```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes exact fits with a high score, then uses scaled inverse
    excess capacity for close fits, ensuring a clear preference hierarchy.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Scores for bins that can fit
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]
    
    # Exact fit priority: highest score
    exact_fit_mask_local = (eligible_bins_remain_cap == item)
    
    # Close fit priority: scaled inverse of normalized excess capacity
    close_fit_mask_local = ~exact_fit_mask_local
    
    # Assign highest priority to exact fits
    if np.any(exact_fit_mask_local):
        priorities[can_fit_mask][exact_fit_mask_local] = 1.0
        
    # Assign scores to close fits: higher score for less excess capacity
    if np.any(close_fit_mask_local):
        excess_capacities = eligible_bins_remain_cap[close_fit_mask_local] - item
        
        # Normalize excess capacities to [0, 1]
        min_excess = 0.0
        max_excess = np.max(excess_capacities)
        
        if max_excess > min_excess:
            normalized_excess = (excess_capacities - min_excess) / (max_excess - min_excess)
        else:
            normalized_excess = np.zeros_like(excess_capacities)
            
        # Scale scores to [0.5, 0.95] to be less than exact fits but prioritize tightness
        close_fit_scores = 0.5 + 0.45 * (1.0 / (normalized_excess + 1e-9))
        
        # Ensure close fit scores do not exceed exact fit priority
        priorities[can_fit_mask][close_fit_mask_local] = np.minimum(close_fit_scores, 0.99)

    return priorities
```
