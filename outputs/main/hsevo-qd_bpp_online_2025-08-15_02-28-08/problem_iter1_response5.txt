```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity and the item size
    # This is the remaining space *after* placing the item.
    space_after_placement = bins_remain_cap - item

    # We want bins where the remaining capacity is just enough or slightly more than the item.
    # A smaller positive difference is preferred.
    # Bins with negative difference (item doesn't fit) should have very low priority.
    # Inverse distance: smaller difference -> higher priority.
    # Add a small epsilon to avoid division by zero if space_after_placement is exactly zero.
    epsilon = 1e-9
    priorities = 1 / (space_after_placement + epsilon)

    # Set priority to a very low value for bins where the item does not fit
    priorities[space_after_placement < 0] = -np.inf

    return priorities
```
