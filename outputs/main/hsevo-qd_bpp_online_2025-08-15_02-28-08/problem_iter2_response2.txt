```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Exact Fit First with Inverse Distance for robust bin packing.

    Prioritizes exact fits, then falls back to the closest fit to minimize waste.
    This hybrid approach balances ideal packing with practical close fits.
    """
    priorities = np.zeros_like(bins_remain_cap)
    epsilon = 1e-9

    # Calculate exact fit priority: highest for bins where remaining capacity equals item size.
    exact_fit_mask = np.abs(bins_remain_cap - item) < epsilon
    priorities[exact_fit_mask] = 1.0

    # Calculate inverse distance priority for bins that can fit the item and are not exact fits.
    can_fit_mask = bins_remain_cap >= item
    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask

    if np.any(non_exact_fit_mask):
        space_after_placement = bins_remain_cap[non_exact_fit_mask] - item
        # Prioritize bins with smaller positive difference (less wasted space).
        # Use a scaled inverse to ensure these priorities are lower than exact fits.
        inverse_distance_scores = 1.0 / (space_after_placement + epsilon)
        
        # Normalize these scores to a range lower than 1.0, e.g., [0.5, 0.99]
        # This ensures exact fits are still preferred.
        min_norm = 0.5
        max_norm = 0.99
        
        # Scale scores to [0, 1] based on their distribution, then shift to [0.5, 0.99]
        if inverse_distance_scores.size > 1:
            normalized_scores = (inverse_distance_scores - np.min(inverse_distance_scores)) / (np.max(inverse_distance_scores) - np.min(inverse_distance_scores) + epsilon)
            scaled_scores = min_norm + normalized_scores * (max_norm - min_norm)
        else:
            # If only one bin, assign the midpoint of the secondary range
            scaled_scores = (min_norm + max_norm) / 2.0

        priorities[non_exact_fit_mask] = scaled_scores
        
    # Bins that cannot fit the item retain their default priority of 0.

    return priorities
```
