```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines exact fit priority with a normalized inverse gap for other fits."""
    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    eligible_bins_cap = bins_remain_cap[can_fit_mask]
    eligible_bins_indices = np.where(can_fit_mask)[0]

    if len(eligible_bins_cap) == 0:
        return priorities # No bins can fit the item

    # Assign highest priority (1.0) to bins with an exact fit
    exact_fit_mask = eligible_bins_cap == item
    priorities[eligible_bins_indices[exact_fit_mask]] = 1.0

    # For bins that are not an exact fit, prioritize those with the smallest remaining capacity after packing
    non_exact_fitting_bins_cap = eligible_bins_cap[~exact_fit_mask]
    non_exact_fitting_bins_indices = eligible_bins_indices[~exact_fit_mask]

    if len(non_exact_fitting_bins_cap) > 0:
        # Calculate the gap (remaining capacity after placing the item)
        gaps = non_exact_fitting_bins_cap - item
        
        # Normalize gaps to give higher scores to smaller gaps.
        # We use 1 / (gap + epsilon) to emphasize smaller gaps.
        # A small epsilon is added to avoid division by zero.
        normalized_scores = 1.0 / (gaps + 1e-9)
        
        # Scale these scores to a range below the exact fit priority, e.g., [0.1, 0.9]
        min_score = np.min(normalized_scores)
        max_score = np.max(normalized_scores)
        
        if max_score - min_score > 1e-9:
            scaled_scores = 0.9 * (normalized_scores - min_score) / (max_score - min_score) + 0.1
        else:
            scaled_scores = np.full_like(normalized_scores, 0.5) # Assign a neutral score if all are the same

        priorities[non_exact_fitting_bins_indices] = scaled_scores
        
    # Ensure exact fits retain their higher priority if scores overlap
    # Re-apply exact fit priority in case scaling overwrote it (though unlikely with current scaling)
    priorities[eligible_bins_indices[exact_fit_mask]] = 1.0

    return priorities
```
