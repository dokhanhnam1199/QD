```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Exact Fit First with a scaled inverse of remaining space for non-exact fits.

    Prioritizes exact fits, then favors bins with the least space after placement,
    scaled to ensure they are lower than exact fit scores.
    """
    priorities = np.zeros_like(bins_remain_cap)
    epsilon = 1e-9

    # Exact fit has the highest priority
    exact_fit_mask = np.abs(bins_remain_cap - item) < epsilon
    priorities[exact_fit_mask] = 1.0

    # For bins that can fit but are not exact fits
    can_fit_mask = bins_remain_cap >= item
    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask

    if np.any(non_exact_fit_mask):
        space_after_placement = bins_remain_cap[non_exact_fit_mask] - item
        
        # Use inverse of space_after_placement to favor smaller remaining space
        # Scale these scores to be less than 1.0 to ensure exact fits are always preferred.
        # A simple inverse without scaling might result in scores higher than 1.0 if the difference is small.
        # We map the inverse scores to a range [0.5, 0.99]
        min_secondary_priority = 0.5
        max_secondary_priority = 0.99

        # Calculate inverse scores for non-exact fits
        inverse_scores = 1.0 / (space_after_placement + epsilon)

        # Normalize these inverse scores to [0, 1]
        if inverse_scores.size > 1:
            normalized_inverse_scores = (inverse_scores - np.min(inverse_scores)) / (np.max(inverse_scores) - np.min(inverse_scores) + epsilon)
        else:
            normalized_inverse_scores = np.ones_like(inverse_scores) # If only one non-exact bin, it gets max secondary score

        # Scale normalized scores to the desired secondary priority range
        scaled_secondary_scores = min_secondary_priority + normalized_inverse_scores * (max_secondary_priority - min_secondary_priority)
        
        priorities[non_exact_fit_mask] = scaled_secondary_scores
        
    return priorities
```
