```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined 'Best Fit' like strategy.

    This heuristic prioritizes bins that leave the least remaining capacity after packing the item,
    aiming to minimize wasted space. It also favors bins that have sufficient capacity,
    assigning a lower priority to bins that are too small.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item is placed in each bin
    remaining_after_packing = bins_remain_cap - item

    # Assign a priority score.
    # For bins where the item fits (remaining_after_packing >= 0):
    # Higher priority is given to bins with smaller remaining capacity after packing.
    # This is achieved by using the negative of the remaining capacity (so smaller positive numbers are prioritized).
    # We add a small epsilon to ensure that bins with zero remaining capacity after packing
    # (i.e., perfect fit) have a very high priority (close to 0 when negated and scaled).
    # For bins where the item does not fit, assign a very low priority (negative infinity conceptually).
    epsilon = 1e-9
    priorities = np.where(
        remaining_after_packing >= 0,
        -remaining_after_packing,
        -np.inf
    )

    # Normalize priorities to be non-negative and to give a higher score to bins that are a better fit.
    # Shifting by adding the maximum negative value (or minimum positive value) ensures all priorities are >= 0.
    # The 'best fit' bins (closest to 0 remaining capacity) will have the highest scores.
    min_priority = np.min(priorities[priorities != -np.inf]) if np.any(priorities != -np.inf) else 0
    priorities = np.where(
        priorities == -np.inf,
        0,  # Bins where item doesn't fit get 0 priority
        priorities - min_priority + epsilon # Shift to make all priorities non-negative and prioritize smallest remaining capacity
    )

    return priorities
```
