import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.08580190032161414) -> np.ndarray:
    """Prioritizes bins with exact or near-exact fits using a ratio-based score.

    This heuristic favors bins where the remaining capacity is as close as possible to
    the item size, assigning higher scores to tighter fits.
    """
    
    # Initialize priorities to zero for all bins
    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate the difference between remaining capacity and item size for fitting bins
    diff = bins_remain_cap[can_fit_mask] - item
    
    # Calculate scores for bins where the item fits.
    # The score is `bins_remain_cap / (diff + epsilon)`.
    # This ratio emphasizes bins where `diff` is small (tight fits).
    # For an exact fit (diff=0), the score becomes `bins_remain_cap / epsilon`, which is very high.
    # For larger differences, the ratio tends to be smaller.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask] / (diff + epsilon)
    
    return priorities
