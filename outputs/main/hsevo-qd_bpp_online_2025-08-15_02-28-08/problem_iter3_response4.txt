```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a modified Best Fit strategy.

    This heuristic prioritizes bins that have the smallest remaining capacity after
    packing the current item, aiming to minimize wasted space. It also ensures
    that the item can actually fit into the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Calculate the remaining capacity if the item is placed in each bin
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a low value (or zero)
    priorities = np.zeros_like(bins_remain_cap)

    # Only consider bins where the item can fit
    can_fit_mask = potential_remaining_cap >= 0

    # For bins where the item fits, assign a priority inversely proportional to
    # the remaining capacity after packing. This encourages filling bins more tightly.
    # We use the negative of the potential remaining capacity because we want to
    # prioritize bins with *less* remaining capacity (i.e., more negative values are better).
    # Adding a small constant ensures that the highest priority (least remaining space)
    # gets a positive score, while still maintaining the ranking.
    # A larger negative number (more full bin) will result in a larger positive score.
    priorities[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    # A small offset could be added if we want to ensure that fitting bins always have a
    # positive priority even if the remaining capacity is 0, but the negative value
    # itself already ranks them correctly from most full to least full.
    # For example:
    # epsilon = 1e-9
    # priorities[can_fit_mask] = -potential_remaining_cap[can_fit_mask] + epsilon

    return priorities
```
