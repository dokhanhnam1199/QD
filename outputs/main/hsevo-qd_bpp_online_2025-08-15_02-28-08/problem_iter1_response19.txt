```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            fit_scores[i] = capacity - item
        else:
            fit_scores[i] = -np.inf

    # Softmax-based priority: higher fit_score means lower priority (less remaining space)
    # We want to favor bins with less remaining space to pack them tightly.
    # So, we invert the fit_scores to make smaller differences (tighter fits) have higher "utility".
    # A small positive value is added to avoid log(0) or exp(-inf).
    utility_scores = -fit_scores + 1e-9

    # Applying Softmax
    exp_scores = np.exp(utility_scores - np.max(utility_scores))
    probabilities = exp_scores / np.sum(exp_scores)

    # Prioritize bins that can fit the item
    priorities = np.where(bins_remain_cap >= item, probabilities, 0)
    
    return priorities
```
