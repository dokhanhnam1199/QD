```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Exact Fit preference with a Best Fit fallback.
    Prioritizes bins that exactly fit the item, then bins with minimal excess capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        available_bins_cap = bins_remain_cap[can_fit_mask]
        
        # Calculate the exact fit score (highest priority)
        exact_fit_mask = available_bins_cap == item
        if np.any(exact_fit_mask):
            priorities[can_fit_mask][exact_fit_mask] = 1.0
            
        # Calculate the best fit score for remaining bins (secondary priority)
        non_exact_fit_mask = ~exact_fit_mask
        if np.any(non_exact_fit_mask):
            remaining_available_bins_cap = available_bins_cap[non_exact_fit_mask]
            
            # Prioritize bins with the least remaining capacity after placing the item
            # Higher priority for smaller remaining space (closer fit)
            # We invert (remaining_capacity - item) to make smaller values higher priorities
            space_after_placement = remaining_available_bins_cap - item
            
            # Avoid division by zero and normalize to avoid extreme values
            inverted_space = 1.0 / (space_after_placement + 1e-9) 
            
            min_inv_space = np.min(inverted_space)
            max_inv_space = np.max(inverted_space)
            
            if max_inv_space - min_inv_space > 1e-9:
                normalized_priorities = (inverted_space - min_inv_space) / (max_inv_space - min_inv_space)
            else:
                normalized_priorities = np.ones_like(inverted_space) * 0.5 # Uniform if all same

            # Add a small base priority to non-exact fits so they are considered after exact fits
            # but only if they have higher priority than non-fitting bins (which is always 0)
            priorities[can_fit_mask][non_exact_fit_mask] = normalized_priorities * 0.9
            
    return priorities
```
