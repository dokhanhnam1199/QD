{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Softmax-Based Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, capacity in enumerate(bins_remain_cap):\n        if capacity >= item:\n            fit_scores[i] = capacity - item\n        else:\n            fit_scores[i] = -np.inf\n\n    # Softmax-based priority: higher fit_score means lower priority (less remaining space)\n    # We want to favor bins with less remaining space to pack them tightly.\n    # So, we invert the fit_scores to make smaller differences (tighter fits) have higher \"utility\".\n    # A small positive value is added to avoid log(0) or exp(-inf).\n    utility_scores = -fit_scores + 1e-9\n\n    # Applying Softmax\n    exp_scores = np.exp(utility_scores - np.max(utility_scores))\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Prioritize bins that can fit the item\n    priorities = np.where(bins_remain_cap >= item, probabilities, 0)\n    \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}