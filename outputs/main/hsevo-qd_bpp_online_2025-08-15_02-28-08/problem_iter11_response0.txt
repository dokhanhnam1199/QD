```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Exact Fit with a tiered Best Fit strategy.
    Exact fits get top priority, followed by bins with minimal normalized excess capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities

    eligible_bins_cap = bins_remain_cap[can_fit_mask]
    eligible_indices = np.where(can_fit_mask)[0]

    # Assign highest priority (2.0) to exact fits
    exact_fit_mask_local = (eligible_bins_cap == item)
    if np.any(exact_fit_mask_local):
        priorities[eligible_indices[exact_fit_mask_local]] = 2.0

    # For non-exact fits, assign a lower priority band (0.1 to 1.0)
    non_exact_fit_mask_local = ~exact_fit_mask_local
    if np.any(non_exact_fit_mask_local):
        non_exact_bins_cap = eligible_bins_cap[non_exact_fit_mask_local]
        
        # Calculate excess capacity for non-exact fits
        excess_capacities = non_exact_bins_cap - item
        
        # Use normalized inverse excess capacity to score best fits.
        # Higher score for smaller excess capacity relative to the minimum.
        # Adding 1 to min_excess_capacity for stability and to ensure 0 excess gets a higher score.
        normalized_scores = 1.0 / (excess_capacities - np.min(excess_capacities) + 1.0)
        
        # Scale these scores to a range like [0.1, 1.0]
        min_norm_score = np.min(normalized_scores)
        max_norm_score = np.max(normalized_scores)
        
        if max_norm_score - min_norm_score > 1e-9:
            scaled_scores = 0.9 * (normalized_scores - min_norm_score) / (max_norm_score - min_norm_score) + 0.1
        else:
            scaled_scores = np.ones_like(normalized_scores) * 0.5 # Uniform score if all are the same

        priorities[eligible_indices[non_exact_fit_mask_local]] = scaled_scores
            
    return priorities
```
