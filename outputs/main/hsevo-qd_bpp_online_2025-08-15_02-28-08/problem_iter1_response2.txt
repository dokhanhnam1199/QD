```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] = bins_remain_cap[i] - item
        else:
            priorities[i] = -np.inf
    
    max_priority = np.max(priorities)
    normalized_priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)
    
    return normalized_priorities
```
