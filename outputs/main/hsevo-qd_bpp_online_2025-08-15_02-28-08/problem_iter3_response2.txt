```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a strategy
    that prioritizes bins with just enough remaining capacity, while also
    considering bins that can fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Initialize priorities to zero
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins where the item can fit
    can_fit_mask = diff >= 0

    # For bins where the item can fit, calculate priority:
    # Prioritize bins with the smallest positive difference (closest fit)
    # Use a large value for a perfect fit (difference is 0)
    # Use a decreasing priority for larger differences to favor less empty space
    epsilon = 1e-9
    positive_diffs = diff[can_fit_mask]

    # A score that is high for small differences and decreases as difference grows.
    # We want to find bins that are "just right".
    # The smaller the positive difference, the higher the priority.
    # A large negative difference (item too big) gets 0 priority.
    # A difference of 0 (perfect fit) should have the highest priority.
    
    # Let's define a scoring that:
    # 1. Gives a very high score for a perfect fit (diff == 0).
    # 2. Gives a high score for small positive differences.
    # 3. Gives a moderate score for larger positive differences.
    # 4. Gives zero score if the item doesn't fit.

    # A simple way to achieve this is to use the inverse of (difference + 1)
    # and boost the score for perfect fits.
    
    # Boost for perfect fit (diff = 0)
    perfect_fit_boost = 1e6 
    
    # Base priority: 1 / (diff + 1) to make it monotonic decreasing with diff
    # Add epsilon to avoid division by zero for diff=0 before boosting.
    priorities[can_fit_mask] = 1.0 / (positive_diffs + 1.0)

    # Apply boost for perfect fits
    perfect_fit_mask = np.isclose(positive_diffs, 0, atol=epsilon)
    priorities[can_fit_mask][perfect_fit_mask] = perfect_fit_boost

    return priorities
```
