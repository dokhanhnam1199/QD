```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a sigmoid fit score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bin_capacities = bins_remain_cap - item
    suitable_bins_mask = bin_capacities >= 0
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if np.any(suitable_bins_mask):
        suitable_capacities = bin_capacities[suitable_bins_mask]
        
        mean_suitable_capacity = np.mean(suitable_capacities)
        
        raw_scores = suitable_capacities - mean_suitable_capacity
        
        # Apply sigmoid to compress scores and ensure values between 0 and 1
        # Centering the sigmoid around 0 helps differentiate between bins
        # that are slightly larger or smaller than the mean suitable capacity.
        # A steepness factor (e.g., 1.0) can be adjusted.
        k = 1.0  # Steepness factor
        priorities[suitable_bins_mask] = 1 / (1 + np.exp(-k * raw_scores))
        
        # Normalize priorities to be within a more comparable range if needed,
        # or to ensure the best bin gets a high score.
        # For instance, scale by the maximum priority or by a constant.
        # Here, we'll just use the sigmoid output directly, as higher is better.
        
        # Optional: Add a small preference for bins that are very close to fitting the item
        # to encourage tighter packing initially, but let sigmoid handle the general preference.
        # small_margin_bonus = 0.05
        # priorities[suitable_bins_mask] += np.where(np.abs(raw_scores) < 0.1, small_margin_bonus, 0)
        
    return priorities
```
