```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Lower remaining capacity is better for "fit"
    # We want to prioritize bins that are closer to being full, but can still accommodate the item.
    # To use softmax, we want higher values to represent higher priority.
    # So, if a bin has low remaining capacity (good fit), we want its score to be high.
    # We can achieve this by taking the negative of the remaining capacity.
    # Add a small epsilon to avoid log(0) issues if we were to use log later,
    # or to prevent all scores from being zero if all remaining capacities were equal.
    # Or, a simpler approach for fitting: we want smaller remaining capacities to have higher priority.
    # Let's consider the "slack" which is remaining_capacity - item_size. Smaller slack is better.
    # So, we want to maximize the negative slack.
    
    slack = valid_bins_remain_cap - item
    # To use softmax, we need scores that are not all the same.
    # A common approach is to use negative slack directly, or some function of it.
    # Let's try the negative of the slack. Higher negative slack means lower slack, which is better.
    scores = -slack

    # Apply softmax
    exp_scores = np.exp(scores - np.max(scores)) # For numerical stability
    probabilities = exp_scores / np.sum(exp_scores)

    # Map probabilities back to the original bins array
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[valid_bins_mask] = probabilities

    return priorities
```
