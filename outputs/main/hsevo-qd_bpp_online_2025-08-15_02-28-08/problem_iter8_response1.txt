```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Hybrid heuristic prioritizing exact fits and then closest fits using normalized scores.

    Combines the strengths of exact-fit strategies with a nuanced approach to close fits,
    prioritizing bins that perfectly accommodate the item, then favoring those with the
    least excess capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities # No bins can fit the item

    fitting_bins_cap = bins_remain_cap[can_fit_mask]

    # Calculate excess capacity for bins that can fit the item
    excess_capacity = fitting_bins_cap - item

    # Exact fit: Assign highest priority (e.g., 1.0)
    exact_fit_mask = np.abs(excess_capacity) < epsilon
    priorities[can_fit_mask][exact_fit_mask] = 1.0

    # Closest fit for non-exact fits: Prioritize smaller excess capacity
    non_exact_fit_indices = can_fit_mask.copy()
    non_exact_fit_indices[can_fit_mask] = ~exact_fit_mask

    if np.any(non_exact_fit_indices):
        non_exact_fitting_bins_cap = bins_remain_cap[non_exact_fit_indices]
        non_exact_excess_capacity = non_exact_fitting_bins_cap - item

        # Use inverse of (excess + 1) to prioritize smaller excesses, scaling from 0.1 to 0.9
        # Adding 1 prevents division by zero for excess=0 and ensures a reasonable range.
        # Normalizing ensures relative ranking among non-exact fits.
        inverted_scores = 1.0 / (non_exact_excess_capacity + 1.0)
        
        min_score = np.min(inverted_scores)
        max_score = np.max(inverted_scores)
        
        if max_score - min_score > epsilon:
            normalized_scores = (inverted_scores - min_score) / (max_score - min_score)
        else:
            normalized_scores = np.ones_like(inverted_scores) * 0.5 # Uniform if all same

        # Scale normalized scores to a range lower than exact fits, e.g., [0.1, 0.9]
        scaled_priorities = 0.1 + normalized_scores * 0.8
        
        priorities[non_exact_fit_indices] = scaled_priorities

    return priorities
```
