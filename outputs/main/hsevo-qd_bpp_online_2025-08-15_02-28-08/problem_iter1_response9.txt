```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic: Prioritize bins that have just enough space for the item
    # This tries to avoid leaving small, unusable spaces.
    # If an item fits, its "preference" is inversely proportional to the remaining space after packing.
    # A small remaining space is preferred.
    # We add a small epsilon to avoid division by zero if a bin is perfectly filled.
    # Bins where the item does not fit get a very low (negative) priority.

    fit_mask = bins_remain_cap >= item
    preferred_spaces = bins_remain_cap[fit_mask] - item + 1e-9  # Add epsilon for stability

    # Higher priority for smaller remaining space
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[fit_mask] = 1.0 / preferred_spaces

    # Softmax to convert scores to probabilities (priorities)
    # We can optionally apply softmax to these raw scores to get a distribution,
    # but for a direct priority selection, raw scores are often sufficient.
    # If we wanted a probabilistic selection, we would do:
    # exp_priorities = np.exp(priorities)
    # return exp_priorities / np.sum(exp_priorities)

    # For this heuristic, we simply return the raw scores, higher means more priority.
    return priorities
```
