```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes exact fits, then uses scaled inverse difference for closest fits.

    Assigns a very high score for exact fits and a scaled score inversely
    proportional to excess capacity for other fitting bins.
    """
    epsilon = 1e-9
    exact_fit_score = 1e9  # Very high score for exact fits

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Separate bins into exact fits and close fits
    exact_fit_mask = np.abs(bins_remain_cap - item) < epsilon
    close_fit_mask = can_fit_mask & ~exact_fit_mask

    # Assign the highest priority to exact fits
    priorities[exact_fit_mask] = exact_fit_score

    # For close fits, calculate a score based on the inverse of the excess capacity.
    # We want to prioritize bins with less excess capacity (smaller positive difference).
    # The score `bins_remain_cap / (diff + epsilon)` provides a good ranking for close fits.
    # We scale these scores to be less than `exact_fit_score` to maintain hierarchy.
    if np.any(close_fit_mask):
        diff_close_fits = bins_remain_cap[close_fit_mask] - item
        # Calculate raw scores prioritizing smaller positive differences
        raw_scores = bins_remain_cap[close_fit_mask] / (diff_close_fits + epsilon)

        # Scale these scores to be in a range below `exact_fit_score`, e.g., [0, exact_fit_score * 0.9]
        # This maintains the relative order of close fits while ensuring they are distinct from exact fits.
        if raw_scores.size > 0:
            max_raw_score = np.max(raw_scores)
            if max_raw_score > epsilon: # Avoid division by zero if all raw scores are near zero
                scaled_scores = (raw_scores / max_raw_score) * (exact_fit_score * 0.9)
                priorities[close_fit_mask] = scaled_scores
            else:
                # If all raw scores are effectively zero, assign a small constant score
                priorities[close_fit_mask] = 1.0 # A small positive score

    # Bins that cannot fit the item retain their default priority of 0.
    return priorities
```
