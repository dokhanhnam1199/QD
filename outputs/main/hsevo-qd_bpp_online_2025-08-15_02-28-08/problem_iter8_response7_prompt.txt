{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit strategy.\n\n    In First Fit, the item is placed in the first bin that has enough remaining capacity.\n    This heuristic prioritizes bins that can accommodate the item and gives higher\n    priority to bins that have just enough capacity to avoid fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Assign a high priority to bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    priorities[can_fit_mask] = 1.0\n\n    # Among those that can fit, prioritize bins that have just enough capacity.\n    # This is a greedy approach to minimize wasted space in the selected bin.\n    # We can use the inverse of the remaining capacity minus the item size as a measure\n    # of how \"tight\" the fit is. Smaller difference means higher priority.\n    tight_fit_scores = np.where(can_fit_mask, bins_remain_cap - item, np.inf)\n    \n    # Normalize the tight fit scores to avoid overly large or small values.\n    # Add a small epsilon to avoid division by zero if all differences are the same.\n    min_tight_fit = np.min(tight_fit_scores[tight_fit_scores != np.inf]) if np.any(tight_fit_scores != np.inf) else 0\n    max_tight_fit = np.max(tight_fit_scores[tight_fit_scores != np.inf]) if np.any(tight_fit_scores != np.inf) else 1\n    \n    if max_tight_fit - min_tight_fit > 1e-9: # Avoid division by zero if all are the same\n        normalized_tight_fit = (tight_fit_scores - min_tight_fit) / (max_tight_fit - min_tight_fit)\n    else:\n        normalized_tight_fit = np.zeros_like(tight_fit_scores)\n    \n    # Invert to give higher priority to smaller differences (tighter fits)\n    inverted_normalized_tight_fit = 1.0 - normalized_tight_fit\n    \n    # Combine the \"can fit\" priority with the \"tight fit\" priority.\n    # We want to boost bins that fit and then order them by tightness.\n    # The \"+ 0.1\" ensures that bins that can fit are always prioritized over those that cannot,\n    # even if their tight fit score is very high (which shouldn't happen if they can't fit).\n    priorities = np.where(can_fit_mask, 1.0 + inverted_normalized_tight_fit * 0.1, 0)\n    \n    # Ensure that bins that cannot fit have a priority of 0\n    priorities[~can_fit_mask] = 0\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins by favoring exact fits, then closest fits, using a smooth scoring.\n\n    Combines Exact Fit First and Inverse Distance strategies:\n    1. High priority for bins where remaining_capacity == item.\n    2. Medium priority for bins where remaining_capacity > item, inversely\n       proportional to the difference (remaining_capacity - item).\n    3. Zero priority for bins where remaining_capacity < item.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    can_fit_mask = bins_remain_cap >= item\n\n    fitting_bins_cap = bins_remain_cap[can_fit_mask]\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n\n    if len(fitting_bins_cap) > 0:\n        # Prioritize exact fits with a high score\n        exact_fit_mask = fitting_bins_cap == item\n        priorities[fitting_bins_indices[exact_fit_mask]] = 2.0  # Highest priority\n\n        # For bins that are not exact fits, calculate priority based on how close they are\n        non_exact_fitting_bins_cap = fitting_bins_cap[~exact_fit_mask]\n        non_exact_fitting_bins_indices = fitting_bins_indices[~exact_fit_mask]\n\n        if len(non_exact_fitting_bins_cap) > 0:\n            # Calculate the difference (space after placing the item)\n            space_after_placement = non_exact_fitting_bins_cap - item\n\n            # Normalize these differences to a [0, 1] range for scoring.\n            # Smaller difference means higher priority.\n            min_diff = np.min(space_after_placement)\n            max_diff = np.max(space_after_placement)\n\n            if max_diff - min_diff > 1e-9: # Avoid division by zero if all differences are the same\n                normalized_diff = (space_after_placement - min_diff) / (max_diff - min_diff)\n            else:\n                normalized_diff = np.zeros_like(space_after_placement)\n            \n            # Assign priorities: inverse relationship with normalized difference, scaled down.\n            # This gives medium priority, lower than exact fits.\n            # Add a small offset to ensure it's greater than 0 for fitting bins.\n            priorities[non_exact_fitting_bins_indices] = 1.0 - normalized_diff + 0.1\n\n    return priorities\n\n### Analyze & experience\n- *   **Heuristics 1st vs. 9th:** The 1st heuristic (`bins_remain_cap / (diff + epsilon)`) directly prioritizes bins where the remaining capacity is closest to the item size. The 9th heuristic attempts a similar goal but uses a more complex normalization and weighting scheme (`1.0 + inverted_normalized_tight_fit * 0.1`) which might overcomplicate the priority assignment without a clear performance gain. The 1st heuristic is more direct and likely more effective for its intended purpose.\n\n*   **Heuristics 2nd vs. 4th:** The 2nd heuristic seems to be a duplicate of the 1st heuristic in terms of its core logic (`bins_remain_cap / (diff + epsilon)`). The 4th heuristic (`1.0 / (available_bins_cap + 1e-9)`) and its normalized version gives higher priority to bins with *less* remaining capacity, which is a valid approach for favoring tighter fits. However, the 1st/2nd heuristic's score is `remaining_capacity / (remaining_capacity - item + epsilon)`, which can be interpreted as `(item + diff) / (diff + epsilon)`. This score is inherently higher when `diff` is smaller, effectively favoring tighter fits more strongly and potentially providing a better distinction between bins.\n\n*   **Heuristics 3rd vs. 11th/12th/14th/15th/16th/17th/18th/19th/20th:** These heuristics focus on an \"Exact Fit First\" strategy, which is a good principle.\n    *   Heuristics 3rd, 11th, 12th, 14th, 17th, 18th, 19th, 20th implement a hybrid approach: exact fits get the highest priority (e.g., 1.0 or 2.0), and then other fitting bins are prioritized based on their \"closeness\" (minimal excess capacity).\n    *   The normalization and scaling in these hybrids vary:\n        *   Heuristics 3rd and 11th/12th/14th use a form of `1 / (excess - min_excess + epsilon)` or similar to rank closer fits higher, scaling them to a specific range (e.g., `[0.5, 0.99]` or `[0.1, 0.9]`).\n        *   Heuristics 15th and 16th use `1.0 - normalized_diff + 0.1` which is a decreasing function of normalized difference, and assign a base priority of 2.0 to exact fits.\n        *   Heuristics 17th, 18th, 19th, 20th combine exact fit (priority 1.0) with a normalized proximity score that attempts to stay below 1.0. Heuristic 20th, for example, uses `1.0 / (space_after_placement + 1e-9)` and then ranks these, mapping them to `[0.1, 0.9]`.\n    *   The primary difference between these hybrid heuristics lies in the specific scoring and scaling of \"close fits\" and how strictly they enforce the hierarchy over exact fits. Heuristics 11th/12th/14th have a clear separation by using `[0.5, 0.99]` for close fits and `1.0` for exact fits. Heuristics 15th/16th assign `2.0` to exact fits, which is a stronger hierarchy. Heuristic 1st/2nd's score `bins_remain_cap / (diff + epsilon)` is a more direct approach to prioritizing close fits without explicit exact-fit separation, potentially making it more adaptable if an exact fit isn't always available.\n\n*   **Heuristics 5th vs. 7th:** These appear to be identical to Heuristic 4th, using a normalized inverse of available capacity.\n\n*   **Heuristics 6th:** This heuristic calculates `1.0 / (available_bins_remain_cap - item + 1e-9)` which is similar to the 1st/2nd heuristic's core idea, but then it applies `np.argsort(np.argsort(...))`. This effectively ranks the bins based on their proximity scores, assigning ranks from 0 to N-1. This means it prioritizes bins with smaller excesses, but the absolute priority values are just ranks, which might be less sensitive to the magnitude of differences compared to direct scores.\n\n*   **Heuristics 9th vs. 13th:** Heuristic 13th is a simple loop-based implementation of `1.0 / (bins_remain_cap[i] - item + 1e-9)` for fitting bins, which is the core logic of the \"inverse difference\" or \"best fit\" strategy. Heuristic 9th attempts a more complex normalization and weighting, which isn't clearly better than the direct inverse difference. Heuristic 13th is simpler but might suffer from non-vectorized operations if the list of bins is very large.\n\n*   **Overall:** The first heuristic (`bins_remain_cap / (diff + epsilon)`) seems to offer a good balance of simplicity and effectiveness by directly prioritizing bins where the remaining capacity is closest to the item size. Hybrid approaches (like 3rd, 11th, 15th) that explicitly handle exact fits first are also strong contenders. The \"normalized inverse remaining capacity\" (4th, 5th, 7th) is a reasonable heuristic for promoting tighter fits but might not distinguish as well between very close fits as the `bins_remain_cap / diff` approach. The ranking-based approach (6th) is also viable but potentially less nuanced.\n- \nHere's a refined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Interpretability, Vectorization, Hybridization, Simplicity.\n*   **Advice:** Focus on direct, well-scaled scoring functions that clearly represent the heuristic's objective. Combine exact matches with robust \"close fit\" metrics, normalizing differences appropriately. Leverage vectorized operations extensively.\n*   **Avoid:** Overly complex, non-linear scoring functions that demand extensive tuning. Unnecessary array manipulations or obscure code that hinders clarity.\n*   **Explanation:** Prioritizing interpretable scores and vectorization ensures efficiency and maintainability, while a hybrid approach offers robustness by balancing exact solutions with practical approximations, directly informing heuristic design for better performance and adaptability.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}