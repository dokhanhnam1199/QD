```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Exact Fit First with inverse difference for close fits.

    Prioritizes bins that perfectly fit the item, then favors bins with minimal remaining capacity.
    This hybrid approach ensures ideal fits and then selects the best available alternative.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Separate exact fits
    exact_fit_mask = np.abs(bins_remain_cap - item) < epsilon

    # Assign highest priority to exact fits
    priorities[exact_fit_mask] = 1.0

    # For bins that can fit but are not exact fits
    close_fit_mask = can_fit_mask & ~exact_fit_mask
    
    if np.any(close_fit_mask):
        available_close_bins_remain_cap = bins_remain_cap[close_fit_mask]
        # Calculate inverse difference for close fits: higher for smaller remaining capacity
        # Scale to be less than 1.0 to ensure exact fits are always preferred
        inverse_diff_scores = 1.0 / (available_close_bins_remain_cap - item + epsilon)
        
        # Normalize scores to a range that is lower than exact fits (e.g., 0.1 to 0.9)
        if inverse_diff_scores.size > 0:
            min_score = np.min(inverse_diff_scores)
            max_score = np.max(inverse_diff_scores)
            
            if max_score - min_score > epsilon:
                normalized_scores = (inverse_diff_scores - min_score) / (max_score - min_score)
            else:
                # If all scores are the same, assign a neutral value
                normalized_scores = np.full_like(inverse_diff_scores, 0.5)
            
            # Scale to [0.1, 0.9] to ensure they are lower than exact fits (priority 1.0)
            priorities[close_fit_mask] = 0.1 + normalized_scores * 0.8
        else:
            # If only one close fit, assign a mid-range priority
            priorities[close_fit_mask] = 0.5

    return priorities
```
