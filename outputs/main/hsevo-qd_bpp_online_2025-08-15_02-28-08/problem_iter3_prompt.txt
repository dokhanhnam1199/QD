{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between remaining capacity and item size\n    diff = bins_remain_cap - item\n\n    # Only consider bins where the item can fit\n    # For bins where it can fit, the priority is 1 / (difference + epsilon)\n    # Epsilon is added to avoid division by zero. A small epsilon can be used.\n    epsilon = 1e-9\n    priorities = np.where(diff >= 0, 1 / (diff + epsilon), 0)\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Simplicity, Intuitiveness, Measurability, Robustness.\n*   **Advice:** Focus on simple, linear or monotonic relationships that directly address core problem objectives. Ensure your heuristic's behavior is easily understood and its impact on key metrics can be directly measured. Prioritize solutions that are less sensitive to parameter tuning and edge cases.\n*   **Avoid:** Overly complex, non-monotonic, or \"black box\" logic. Unnecessary algorithmic overhead. Heuristics that require extensive data fitting or are brittle to slight input variations.\n*   **Explanation:** Effective heuristics are transparent and predictable. By favoring straightforward logic and clear objectives, you create more robust and maintainable solutions that are easier to debug and improve over time, ultimately leading to better optimization outcomes.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}