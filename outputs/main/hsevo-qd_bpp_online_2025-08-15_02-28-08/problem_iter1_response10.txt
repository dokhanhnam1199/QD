```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit Decreasing like heuristic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    available_bins_indices = np.where(bins_remain_cap >= item)[0]
    
    if available_bins_indices.size > 0:
        remaining_capacities_of_available_bins = bins_remain_cap[available_bins_indices]
        
        # Assign higher priority to bins that have just enough capacity or slightly more
        # This is a greedy approach aiming to keep larger capacities available for potentially larger future items
        # Lower difference means higher priority
        differences = remaining_capacities_of_available_bins - item
        
        # We want to sort by difference in ascending order (smaller difference = higher priority)
        # To turn this into a 'higher score is better' priority system, we can invert the differences
        # or use a transformation that makes smaller differences result in larger scores.
        # A simple way is to use the inverse of (difference + epsilon) to avoid division by zero,
        # or a function like exp(-difference)
        
        # Let's try a simple approach: prioritize bins with less remaining capacity after packing
        # This encourages filling bins more completely.
        # A higher priority score means we prefer this bin.
        
        # Bins that can fit the item get a positive priority based on their remaining capacity AFTER packing
        # The idea is to prioritize bins that will have LESS remaining space after packing the current item.
        # This is akin to "Best Fit" within the "First Fit" framework.
        
        priorities[available_bins_indices] = 1.0 / (remaining_capacities_of_available_bins - item + 1e-9)

    return priorities
```
