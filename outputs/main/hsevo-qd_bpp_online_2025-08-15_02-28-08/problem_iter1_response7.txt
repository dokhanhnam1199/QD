```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements a Random Fit strategy for the online Bin Packing Problem.
    Prioritizes bins that can fit the item. A higher priority is given
    to bins with less remaining capacity that can still fit the item,
    encouraging tighter packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    if np.any(can_fit_mask):
        available_bins_cap = bins_remain_cap[can_fit_mask]
        
        # Assign priority based on how full the bin would become
        # Smaller remaining capacity (i.e., larger fraction filled) gets higher priority
        # We invert the remaining capacity to make smaller values larger priorities
        inverted_cap = 1.0 / (available_bins_cap + 1e-9) # Add epsilon to avoid division by zero
        
        # Normalize priorities to be between 0 and 1
        min_p = np.min(inverted_cap)
        max_p = np.max(inverted_cap)
        
        if max_p - min_p > 1e-9:
            normalized_priorities = (inverted_cap - min_p) / (max_p - min_p)
        else:
            normalized_priorities = np.ones_like(inverted_cap) * 0.5 # Uniform priority if all capacities are the same
        
        priorities[can_fit_mask] = normalized_priorities
    
    return priorities
```
