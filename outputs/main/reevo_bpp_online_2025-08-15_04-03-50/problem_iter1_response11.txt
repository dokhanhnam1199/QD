```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Best Fit strategy aims to place the item in the bin that leaves the minimum
    # remaining capacity. This often leads to better packing.
    # We can achieve this by prioritizing bins where (remaining_capacity - item_size)
    # is minimized, but only for bins that can actually fit the item.

    # Initialize priorities to a very low value (or negative infinity) for bins
    # that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that have enough capacity to fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placing the item.
    # The "priority" is the negative of this remaining capacity, so smaller remaining
    # capacities result in higher (less negative) priority scores.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
