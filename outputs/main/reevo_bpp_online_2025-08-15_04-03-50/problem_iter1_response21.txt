```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements the Best Fit heuristic for the online Bin Packing Problem.
    The priority is higher for bins that have just enough remaining capacity to fit the item,
    effectively aiming to "fill up" bins before opening new ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that can fit the item will have a priority score related to the
        "tightness" of the fit (closer remaining capacity to item size).
        Bins that cannot fit the item will have a priority score of 0.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate priority based on how tightly they fit.
    # A higher priority is given to bins where the remaining capacity is closest to the item size.
    # This is achieved by using the inverse of the difference, effectively minimizing the wasted space.
    # We add a small epsilon to the denominator to avoid division by zero if a bin has exactly 'item' remaining capacity.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9)

    return priorities
```
