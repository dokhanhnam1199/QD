{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.\n\n    The Inverse Distance (Proximity Fit) strategy prioritizes bins that have a remaining capacity\n    closest to the item's size, but still large enough to fit the item. A higher score\n    means a better fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Consider only bins that can fit the item\n    eligible_bins_mask = bins_remain_cap >= item\n    eligible_bins_capacities = bins_remain_cap[eligible_bins_mask]\n\n    if np.sum(eligible_bins_mask) > 0:\n        # Calculate the difference between bin capacity and item size\n        # We want this difference to be small (i.e., a tight fit)\n        differences = eligible_bins_capacities - item\n        \n        # Invert the differences to get priority. Smaller differences should have higher priority.\n        # Add a small epsilon to avoid division by zero if a bin's remaining capacity\n        # is exactly equal to the item's size.\n        epsilon = 1e-9\n        priorities[eligible_bins_mask] = 1.0 / (differences + epsilon)\n        \n        # Normalize priorities to have a maximum of 1 (optional, but can help in some scenarios)\n        # max_priority = np.max(priorities[eligible_bins_mask])\n        # if max_priority > 0:\n        #     priorities[eligible_bins_mask] /= max_priority\n            \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.1  # Probability of exploring (choosing a random bin)\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    fittable_bins_mask = bins_remain_cap >= item\n\n    if np.any(fittable_bins_mask):\n        # Greedy part: Calculate priority for fittable bins\n        # Prioritize bins with less remaining capacity that can still fit the item.\n        # This is a \"best fit\" approach for the greedy choice.\n        fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]\n        \n        # To prioritize bins with less remaining capacity, we want higher scores\n        # for smaller remaining capacities. We can use the inverse of remaining capacity.\n        # To avoid division by zero or very small numbers, we add a small constant.\n        # A higher score means higher priority.\n        priorities[fittable_bins_mask] = 1.0 / (fittable_bins_remain_cap - item + 1e-6)\n        \n        # Normalize priorities so they sum to 1 for the fittable bins\n        if np.sum(priorities[fittable_bins_mask]) > 0:\n            priorities[fittable_bins_mask] /= np.sum(priorities[fittable_bins_mask])\n\n        # Epsilon-Greedy: With probability epsilon, choose a random fittable bin\n        if np.random.rand() < epsilon:\n            random_bin_index = np.random.choice(np.where(fittable_bins_mask)[0])\n            # Set the priority of the random bin to 1 and others to 0 for selection\n            priorities = np.zeros_like(bins_remain_cap, dtype=float)\n            priorities[random_bin_index] = 1.0\n    else:\n        # If no bin can fit the item, all priorities remain 0 (or you might want\n        # to signal that a new bin is needed, but for priority scoring, 0 is fine).\n        pass\n\n    return priorities\n\n[Reflection]\nExplore diverse strategies; blend greedy choices with random exploration for robustness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}