```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First strategy aims to find a bin where the item fits perfectly,
    or if no perfect fit exists, it picks the bin with the smallest remaining
    capacity that can still accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher priority means a better fit.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # If there are bins that can fit the item
    if np.any(can_fit_mask):
        # Calculate the "tightness" of the fit. A smaller remaining capacity
        # after adding the item means a tighter fit.
        # We add a small epsilon to the item to avoid division by zero if
        # item itself is zero, and also to ensure that a perfect fit (remaining_cap - item == 0)
        # gets a very high priority (effectively infinity from the perspective of 1/remaining).
        # However, a direct calculation of remaining_cap - item can be problematic
        # as it might be negative for bins that don't fit.
        # Instead, we'll assign priority based on how close the remaining capacity is to the item size.

        # Priority for exact fits: Very high value
        exact_fit_mask = (bins_remain_cap == item)
        priorities[exact_fit_mask] = 1e10  # Assign a very high priority for exact fits

        # Priority for non-exact fits: Higher priority for smaller remaining capacity
        # that is still greater than or equal to the item size.
        # We can use the negative of the remaining capacity to sort ascendingly
        # or 1/remaining capacity. Using 1/(remaining_cap - item + epsilon) might be better
        # to give higher score to smaller remaining capacity after fit.
        # However, the problem states Exact Fit *First*, so we want to prioritize bins
        # that *exactly* fit. If none exist, then we want the *best* fit among the rest.

        # Let's refine the strategy:
        # 1. Perfect fits get the highest priority.
        # 2. Among bins that are not perfect fits but can accommodate the item,
        #    the one with the smallest remaining capacity *after* placing the item
        #    gets the next highest priority. This means bins with `remaining_cap - item` being smallest positive.
        #    Equivalently, we want to maximize `item / remaining_cap` among those that fit,
        #    but this doesn't capture the "exact fit" aspect as well as
        #    minimizing `remaining_cap - item`.

        # Let's assign priorities such that perfect fits are highest,
        # then bins with the smallest `remaining_cap - item` (positive values).

        # Filter out bins that can fit the item and are not exact fits
        non_exact_fits_mask = can_fit_mask & ~exact_fit_mask

        if np.any(non_exact_fits_mask):
            remaining_capacities_for_fit = bins_remain_cap[non_exact_fits_mask]
            # Calculate the difference (how much space is left after putting the item)
            diffs = remaining_capacities_for_fit - item

            # We want to prioritize bins where this difference is smallest and positive.
            # Assign priorities inversely proportional to the difference, but
            # scaled down from exact fits.
            # A simple approach: use 1 / (diff + epsilon) and scale it.
            # Or, simply sort them and assign ranks.
            # Let's try to create a scoring mechanism where smaller positive differences get higher scores.
            # For example, priorities can be `1 / (diff + small_constant)` or directly related to rank.

            # A more robust approach is to assign priorities based on their rank after filtering.
            # Get the remaining capacities for bins that can fit and are not exact fits.
            suitable_bins_caps = bins_remain_cap[non_exact_fits_mask]
            # Calculate the leftover space in these bins
            leftovers = suitable_bins_caps - item

            # Sort these leftover spaces in ascending order
            sorted_indices_of_leftovers = np.argsort(leftovers)

            # Assign priorities to these bins. The bin with the smallest leftover
            # gets the highest priority among this group.
            # We assign priorities decreasingly from a slightly lower value than perfect fits.
            current_priority = 1e9 # Start just below perfect fits

            for i in sorted_indices_of_leftovers:
                # Find the original index of this suitable bin
                original_index = np.where(non_exact_fits_mask)[0][i]
                priorities[original_index] = current_priority
                current_priority -= 1 # Decrease priority for the next best fit

    # Bins that cannot fit the item will have a priority of 0 (as initialized)
    return priorities
```
