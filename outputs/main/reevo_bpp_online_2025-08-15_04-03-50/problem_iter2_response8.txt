```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined Sigmoid Fit Score.

    This version prioritizes bins that have a remaining capacity that is just
    slightly larger than the item size. This aims to minimize wasted space in
    the selected bin, leaving larger contiguous free spaces in other bins for
    potentially larger future items.

    The priority is calculated using a sigmoid function applied to the difference
    between the bin's remaining capacity and the item's size. A smaller
    positive difference (a tighter fit) results in a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority of 0.
    """
    # Initialize priorities to 0 for all bins. Bins that cannot fit the item will retain this score.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that have enough capacity to fit the item.
    fittable_bins_mask = bins_remain_cap >= item

    # For bins that can fit the item:
    if np.any(fittable_bins_mask):
        fittable_bins_capacities = bins_remain_cap[fittable_bins_mask]

        # Calculate the "slack" or "wasted space" if the item is placed in the bin.
        # slack = remaining_capacity - item_size
        # We want slack to be as close to zero as possible (but non-negative).
        slack = fittable_bins_capacities - item

        # Use a sigmoid-like function to map slack to a priority score.
        # A common form that peaks at slack=0 is `1 / (1 + exp(k * slack))`.
        # As slack increases (larger gaps), the priority decreases.
        # A higher `k` makes the preference for tight fits more pronounced.
        k = 5.0  # Sensitivity parameter: higher k means tighter fits are more strongly preferred.
        priorities[fittable_bins_mask] = 1.0 / (1.0 + np.exp(k * slack))

        # An alternative could be to use a Gaussian-like function, which would also peak at slack=0:
        # sigma = 1.0 # Controls the spread of the Gaussian.
        # priorities[fittable_bins_mask] = np.exp(-(slack**2) / (2 * sigma**2))

        # Ensure that if all fittable bins have infinite slack (e.g., if item is 0 and bins are large),
        # they still get some non-zero priority. The current sigmoid handles this.
        # Also, if all fittable bins have exactly zero slack, they all get priority 1.

    return priorities
```
