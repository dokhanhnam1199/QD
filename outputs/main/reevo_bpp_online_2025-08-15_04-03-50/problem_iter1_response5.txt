```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance (Proximity Fit) strategy prioritizes bins that have
    a remaining capacity closest to the item's size. This aims to minimize
    wasted space in bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a higher priority. Bins that cannot fit the item
        will have a priority of 0.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Find bins that can accommodate the item
    available_bins_mask = bins_remain_cap >= item
    
    # For available bins, calculate priority based on inverse distance
    # Inverse distance = 1 / (remaining_capacity - item_size + epsilon)
    # Adding epsilon to avoid division by zero if remaining_capacity == item_size
    epsilon = 1e-9
    available_bins_remain_cap = bins_remain_cap[available_bins_mask]
    
    # Calculate the difference between remaining capacity and item size
    differences = available_bins_remain_cap - item
    
    # Calculate inverse distance. Higher difference (more wasted space) means lower priority.
    # We want bins closer to fitting the item, so smaller differences are better.
    # A simple inverse relationship might be 1 / (difference + epsilon).
    # However, to prioritize bins *closest* to fitting, we want the smallest positive difference.
    # A larger (remaining_cap - item) means more wasted space.
    # Thus, the "distance" to a perfect fit is (remaining_cap - item).
    # We want to minimize this distance. The inverse distance heuristic means
    # a smaller positive difference should yield a higher score.
    
    # For proximity fit, we want the bin where remaining_capacity is closest to item size.
    # This means (remaining_capacity - item_size) should be minimized and non-negative.
    # The "distance" to the perfect fit is (remaining_capacity - item_size).
    # We want to prioritize bins with small positive distances.
    # A simple inverse distance would be 1 / (distance + epsilon).
    # If distance is 0, priority is 1/epsilon (very high).
    # If distance is large, priority is small.
    
    # Let's use a simple inverse: 1 / (distance + small_value)
    priorities[available_bins_mask] = 1.0 / (differences + epsilon)
    
    return priorities
```
