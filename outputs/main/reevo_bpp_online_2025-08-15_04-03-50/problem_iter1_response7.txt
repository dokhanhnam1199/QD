```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.

    In the Random Fit strategy for online bin packing, an item is placed into a
    randomly chosen bin that has sufficient capacity. The "priority" here reflects
    the desirability of a bin, and for Random Fit, any bin with enough capacity
    is equally desirable (or undesirable). We can simulate this randomness by
    assigning a random priority score to bins that can fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority of -1.
        Bins that can fit the item will have a random priority score.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with -1 (cannot fit)

    # Find bins that have enough remaining capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # Assign a random priority to the bins that can fit the item
    # The range of random numbers doesn't strictly matter for Random Fit as
    # selection is purely random among viable bins. We use [0, 1) for simplicity.
    priorities[can_fit_mask] = np.random.rand(np.sum(can_fit_mask))

    return priorities
```
