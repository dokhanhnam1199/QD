```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    The strategy prioritizes bins that have just enough capacity to fit the item,
    with a preference for bins that will have less remaining capacity after the item is added.
    This aims to fill bins more tightly, potentially reducing the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity if the item is placed in each bin
    potential_remaining_cap = bins_remain_cap - item

    # We only consider bins where the item can actually fit
    # For bins that cannot fit the item, their priority will remain 0 (or be set to a very low value if we wanted to explicitly exclude them)
    fit_mask = bins_remain_cap >= item

    # The "Almost Full Fit" strategy prioritizes bins that will be "almost full" after packing.
    # This means bins with the smallest remaining capacity after placing the item.
    # We can approximate this by penalizing bins with larger remaining capacity.
    # A simple approach is to use the negative of the remaining capacity as a priority score.
    # We want higher scores for bins that become "more full", meaning smaller remaining capacity.

    # Let's also introduce a small bias towards bins that have *just* enough space,
    # but not so much that they are "too empty".
    # The idea is to pick bins that are "tight fits" for the current item.
    # We can achieve this by looking at the 'slack' (bins_remain_cap - item).
    # Smaller slack is better for 'almost full fit'.

    # We can combine these ideas. A bin that fits the item should have a positive priority.
    # The primary driver is minimizing the remaining capacity after adding the item.
    # Therefore, bins with smaller `potential_remaining_cap` should have higher priority.
    # So, we can use `-potential_remaining_cap` for bins that fit.

    # To ensure that bins that *barely* fit (small slack) are preferred over bins
    # that have a lot of extra space but could still fit the item, we can also consider
    # the slack. A bin that has exactly `item` remaining capacity (slack = 0) is ideal.
    # Bins with very small positive slack are also good candidates.

    # Let's try a scoring mechanism:
    # Score = (MaxPossibleSlack - Slack)
    # where MaxPossibleSlack is the maximum slack among all bins that can fit the item.
    # This would give higher scores to bins with less slack.
    # If multiple bins have the same minimum slack, we can break ties by
    # choosing the bin that has more remaining capacity overall (a slightly less full bin)
    # to potentially save some very tight fits for later. This latter part is a bit counter-intuitive
    # to pure "almost full fit" but can be a useful heuristic.

    # A more direct interpretation of "Almost Full Fit" prioritizes bins that, after placing the item,
    # have the smallest remaining capacity. So, we directly use the negative of the remaining capacity
    # as a priority.

    # If a bin can fit the item, its priority is the inverse of the remaining capacity after insertion.
    # Lower remaining capacity (closer to zero) should yield a higher priority.
    # So, we use `-potential_remaining_cap`.
    # We only assign priorities to bins that can fit the item.
    priorities[fit_mask] = -potential_remaining_cap[fit_mask]

    # Optionally, to further refine for "almost full" and avoid very large bins being chosen
    # if they happen to have a similar negative remaining capacity, we could also factor in
    # the original remaining capacity or the "slack" (bins_remain_cap - item).
    # For a pure "almost full" feeling, bins that will have capacity 0 or very close to 0 are best.

    # A common way to implement "Almost Full Fit" is to prioritize bins
    # that have the minimum remaining capacity *after* the item is placed,
    # provided the item fits.
    # So, we want to maximize `-(bins_remain_cap - item)` for valid bins.

    # To make it robust, we can ensure very large capacities that would fit don't get a high priority
    # unless they become "almost full" relative to other bins.
    # A simple approach that captures "almost full" is to use the remaining capacity as the priority value.
    # However, this would prioritize bins that are *already* almost full and might not fit the item well.

    # The prompt suggests "the bin with the highest priority score will be selected".
    # So, if we want bins that become *most* full, we want the smallest `potential_remaining_cap`.
    # This translates to maximizing `-potential_remaining_cap`.

    # Let's reconsider the "Almost Full Fit" strategy's intent:
    # "Prioritize bins that will be 'almost full' after packing."
    # This implies we want `potential_remaining_cap` to be small.
    # If we use `potential_remaining_cap` directly, we'd pick the bin that ends up *most* empty (highest remaining capacity).
    # If we use `-potential_remaining_cap`, we'd pick the bin that ends up *most* full (lowest remaining capacity).
    # This seems to align with the goal.

    # However, let's also consider what might happen if `potential_remaining_cap` is negative
    # (i.e., item doesn't fit). These bins should have very low priority.
    # Our `fit_mask` handles this by not assigning positive priorities.
    # But what if multiple bins *can* fit the item, but one results in `-0.1` remaining
    # and another results in `-5` remaining? The `-5` bin is more "almost full".

    # A common way to interpret "Almost Full Fit" is to look at bins where
    # `bins_remain_cap - item` is small and non-negative.
    # If `bins_remain_cap - item` is negative, the item doesn't fit, so priority is 0.
    # If `bins_remain_cap - item` is 0, it's a perfect fit.
    # If `bins_remain_cap - item` is small and positive, it's an "almost full" fit.
    # We want to prioritize smaller non-negative `bins_remain_cap - item` values.
    # So, we can assign priority as `1.0 / (1 + (bins_remain_cap - item))` for bins that fit,
    # where `bins_remain_cap - item` is non-negative.
    # This way, a slack of 0 gives a priority of 1.0, a slack of 1 gives 0.5, a slack of 10 gives ~0.09.
    # This favors smaller slacks.

    # Let's use a strategy that directly reflects "almost full".
    # We want to minimize `bins_remain_cap - item` for valid bins.
    # The priority should be inversely related to this value.
    # Higher priority for smaller non-negative `bins_remain_cap - item`.

    # Calculate slack for bins where the item fits
    slack = bins_remain_cap[fit_mask] - item

    # Assign priority: Higher priority for smaller slack (closer to 0).
    # We add a small epsilon to avoid division by zero if slack is exactly 0,
    # though `1 / (1 + slack)` naturally handles slack=0 as 1.
    # The `1 +` in the denominator ensures we don't get infinite priority for perfect fits
    # and also that priorities are positive and bounded.
    # A bin with slack 0 gets priority 1.0.
    # A bin with slack 1 gets priority 1/2 = 0.5.
    # A bin with slack 10 gets priority 1/11 ~ 0.09.
    priorities[fit_mask] = 1.0 / (1.0 + slack)

    # To make it more "almost full" focused, we could slightly boost
    # bins that have *very little* remaining capacity after insertion,
    # even if that remaining capacity is negative (i.e., the item doesn't fit perfectly).
    # However, the prompt is about selecting a bin for an item, so items that don't fit
    # should naturally have no priority.
    # The current implementation focuses on minimizing slack for fitting bins.

    # An alternative interpretation of "Almost Full Fit":
    # Prioritize bins that, after fitting the item, leave the *least* amount of remaining capacity.
    # This means we want to maximize `-potential_remaining_cap`.
    # Let's stick to the idea of prioritizing smaller non-negative slacks.

    # Final Check:
    # If item fits in bins A and B:
    # Bin A: bins_remain_cap=5, item=3  => slack=2, priority = 1/(1+2) = 0.33
    # Bin B: bins_remain_cap=4, item=3  => slack=1, priority = 1/(1+1) = 0.5
    # Bin C: bins_remain_cap=3, item=3  => slack=0, priority = 1/(1+0) = 1.0
    # Bin D: bins_remain_cap=2, item=3  => does not fit, priority = 0
    # Bin E: bins_remain_cap=6, item=3  => slack=3, priority = 1/(1+3) = 0.25

    # This heuristic favors bins that have minimal unused space after packing the item.
    # This is a reasonable implementation of "Almost Full Fit".

    return priorities
```
