```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Exploration parameter
    num_bins = len(bins_remain_cap)
    priorities = np.zeros(num_bins)

    # Identify bins that can fit the item
    suitable_bins_indices = np.where(bins_remain_cap >= item)[0]

    if len(suitable_bins_indices) == 0:
        # If no bin can fit the item, return all zeros (or handle as an error)
        return priorities

    # Greedy part: favor bins with less remaining capacity (best fit)
    # We use a negative value so that a higher value (less remaining capacity) results in a higher priority score
    greedy_scores = -bins_remain_cap[suitable_bins_indices]

    # Exploration part: with probability epsilon, choose a random suitable bin
    # We want to assign a high, uniform priority to these bins
    exploration_scores = np.ones(len(suitable_bins_indices)) * 1e9  # Arbitrarily high score

    # Combine greedy and exploration
    # With probability 1-epsilon, use greedy scores
    # With probability epsilon, use exploration scores
    # We can achieve this by generating a random number for each suitable bin and comparing with epsilon

    rand_nums = np.random.rand(len(suitable_bins_indices))
    combined_scores = np.where(rand_nums < epsilon, exploration_scores, greedy_scores)

    # Assign the calculated scores to the correct bins in the priorities array
    priorities[suitable_bins_indices] = combined_scores

    return priorities
```
