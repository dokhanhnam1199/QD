{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using an improved Almost Full Fit strategy.\n\n    The strategy prioritizes bins that have minimal remaining capacity after the item is added.\n    This aims to fill bins more tightly. To ensure robustness and avoid getting stuck in local optima\n    due to overly aggressive \"tight fits\", a small amount of randomness or exploration can be beneficial.\n    This version prioritizes bins with smaller slacks (bins_remain_cap - item) but also adds a small\n    random perturbation to the priority to encourage exploration of slightly less optimal bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins where the item can fit\n    fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the slack (remaining capacity after packing)\n    # Slack = bins_remain_cap - item\n    # We want to prioritize bins with minimal slack.\n    slack = bins_remain_cap[fit_mask] - item\n\n    # Assign priorities: higher priority for smaller slack.\n    # Using 1 / (1 + slack) gives higher values for smaller slack.\n    # A slack of 0 (perfect fit) gives priority 1.0.\n    # A slack of 1 gives priority 0.5.\n    # A slack of 10 gives priority ~0.09.\n    # This naturally favors bins that become \"almost full\".\n    base_priorities = 1.0 / (1.0 + slack)\n\n    # Introduce a small random perturbation to encourage exploration.\n    # This helps to avoid always picking the absolute tightest fit, which might\n    # leave slightly larger bins in a state where they are harder to fill later.\n    # The perturbation should be small enough not to override the primary heuristic.\n    # We generate random numbers between 0 and a small fraction of the range of base_priorities.\n    # For example, a perturbation scaled by 10% of the average priority.\n    if len(base_priorities) > 0:\n        max_priority = np.max(base_priorities)\n        perturbation_scale = max_priority * 0.1  # Scale perturbation by a fraction of the max priority\n        random_perturbation = np.random.uniform(-perturbation_scale, perturbation_scale, size=slack.shape)\n        priorities[fit_mask] = base_priorities + random_perturbation\n        # Ensure priorities don't become negative due to perturbation, and clip if necessary\n        # (though with 1/(1+slack) base, this is unlikely unless slack is very large and perturbation negative)\n        priorities[fit_mask] = np.maximum(priorities[fit_mask], 0.0)\n    else:\n        # If no bins fit, priorities remain 0.\n        pass\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a refined Sigmoid Fit Score.\n\n    This version prioritizes bins that have a remaining capacity that is just\n    slightly larger than the item size. This aims to minimize wasted space in\n    the selected bin, leaving larger contiguous free spaces in other bins for\n    potentially larger future items.\n\n    The priority is calculated using a sigmoid function applied to the difference\n    between the bin's remaining capacity and the item's size. A smaller\n    positive difference (a tighter fit) results in a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority of 0.\n    \"\"\"\n    # Initialize priorities to 0 for all bins. Bins that cannot fit the item will retain this score.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that have enough capacity to fit the item.\n    fittable_bins_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item:\n    if np.any(fittable_bins_mask):\n        fittable_bins_capacities = bins_remain_cap[fittable_bins_mask]\n\n        # Calculate the \"slack\" or \"wasted space\" if the item is placed in the bin.\n        # slack = remaining_capacity - item_size\n        # We want slack to be as close to zero as possible (but non-negative).\n        slack = fittable_bins_capacities - item\n\n        # Use a sigmoid-like function to map slack to a priority score.\n        # A common form that peaks at slack=0 is `1 / (1 + exp(k * slack))`.\n        # As slack increases (larger gaps), the priority decreases.\n        # A higher `k` makes the preference for tight fits more pronounced.\n        k = 5.0  # Sensitivity parameter: higher k means tighter fits are more strongly preferred.\n        priorities[fittable_bins_mask] = 1.0 / (1.0 + np.exp(k * slack))\n\n        # An alternative could be to use a Gaussian-like function, which would also peak at slack=0:\n        # sigma = 1.0 # Controls the spread of the Gaussian.\n        # priorities[fittable_bins_mask] = np.exp(-(slack**2) / (2 * sigma**2))\n\n        # Ensure that if all fittable bins have infinite slack (e.g., if item is 0 and bins are large),\n        # they still get some non-zero priority. The current sigmoid handles this.\n        # Also, if all fittable bins have exactly zero slack, they all get priority 1.\n\n    return priorities\n\n[Reflection]\nFavor tight fits, but explore slightly larger gaps for flexibility.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}