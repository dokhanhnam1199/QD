```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Probability of exploring (choosing a random bin)
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    fittable_bins_mask = bins_remain_cap >= item

    if np.any(fittable_bins_mask):
        # Greedy part: Calculate priority for fittable bins
        # Prioritize bins with less remaining capacity that can still fit the item.
        # This is a "best fit" approach for the greedy choice.
        fittable_bins_remain_cap = bins_remain_cap[fittable_bins_mask]
        
        # To prioritize bins with less remaining capacity, we want higher scores
        # for smaller remaining capacities. We can use the inverse of remaining capacity.
        # To avoid division by zero or very small numbers, we add a small constant.
        # A higher score means higher priority.
        priorities[fittable_bins_mask] = 1.0 / (fittable_bins_remain_cap - item + 1e-6)
        
        # Normalize priorities so they sum to 1 for the fittable bins
        if np.sum(priorities[fittable_bins_mask]) > 0:
            priorities[fittable_bins_mask] /= np.sum(priorities[fittable_bins_mask])

        # Epsilon-Greedy: With probability epsilon, choose a random fittable bin
        if np.random.rand() < epsilon:
            random_bin_index = np.random.choice(np.where(fittable_bins_mask)[0])
            # Set the priority of the random bin to 1 and others to 0 for selection
            priorities = np.zeros_like(bins_remain_cap, dtype=float)
            priorities[random_bin_index] = 1.0
    else:
        # If no bin can fit the item, all priorities remain 0 (or you might want
        # to signal that a new bin is needed, but for priority scoring, 0 is fine).
        pass

    return priorities
```
