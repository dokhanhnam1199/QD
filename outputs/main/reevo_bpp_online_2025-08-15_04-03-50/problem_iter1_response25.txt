```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The priority is higher for bins that have a remaining capacity closer to the item size.
    Specifically, it calculates 1 / (1 + |remaining_capacity - item_size|) for each bin.
    A small epsilon is added to the denominator to avoid division by zero if remaining_capacity == item_size.
    Bins that cannot fit the item have a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Initialize priorities to zero for all bins
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate priorities only for bins that can fit the item
    if np.any(can_fit_mask):
        # Calculate the difference between remaining capacity and item size
        diff = bins_remain_cap[can_fit_mask] - item

        # The priority is the inverse of the distance (plus a small epsilon to avoid division by zero)
        # Higher priority for smaller absolute differences, meaning the bin is a closer fit.
        # We use 1 + abs(diff) because we want smaller differences to result in higher priorities.
        # The '+ 1' is to ensure that a perfect fit (diff=0) still has a non-zero priority,
        # and also avoids division by zero if diff is 0.
        priorities[can_fit_mask] = 1.0 / (1.0 + np.abs(diff))

    return priorities
```
