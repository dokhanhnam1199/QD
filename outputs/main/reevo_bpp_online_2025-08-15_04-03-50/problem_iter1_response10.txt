```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit strategy with a preference for fuller bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Create a boolean mask for bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit the item, calculate priority
    # The priority is inversely related to the remaining capacity.
    # Bins with less remaining capacity (i.e., are fuller) get higher priority.
    # Add a small epsilon to avoid division by zero if a bin has exactly 'item' remaining capacity.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9)
    
    # Bins that cannot fit the item get a priority of 0 (or a very low negative number if desired for clear distinction)
    # For this implementation, 0 is sufficient as it will not be chosen over any bin that can fit.
    
    return priorities
```
