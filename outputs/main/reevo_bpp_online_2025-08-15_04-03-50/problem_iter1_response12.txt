```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy prioritizes bins that have the largest remaining capacity,
    as this aims to leave smaller remaining capacities in more bins, potentially
    accommodating future smaller items. If an item fits into a bin, its priority
    is its remaining capacity. If it doesn't fit, its priority is 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # A bin is only considered if the item fits into it.
    # For bins where the item fits, the priority is the remaining capacity.
    # Worst Fit prefers the bin with the largest remaining capacity.
    fits_mask = bins_remain_cap >= item
    priorities[fits_mask] = bins_remain_cap[fits_mask]
    return priorities
```
