{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy combines a \"Best Fit\" approach (prioritizing bins that leave minimal\n    remaining capacity after packing) with a \"Worst Fit\" element (prioritizing bins\n    with more remaining capacity to encourage spreading items). It also incorporates\n    a small probability of choosing a random bin to escape local optima.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    exploration_prob = 0.05  # Probability of exploring (choosing a random fittable bin)\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    fittable_bins_mask = bins_remain_cap >= item\n\n    if not np.any(fittable_bins_mask):\n        # If no bin can fit the item, return all zeros.\n        return priorities\n\n    # Calculate scores for fittable bins\n    fittable_bins_indices = np.where(fittable_bins_mask)[0]\n    fittable_bins_capacities = bins_remain_cap[fittable_bins_mask]\n\n    # Hybrid scoring:\n    # 1. Best Fit component: Prioritize bins where (capacity - item) is minimized.\n    #    We use 1 / (difference + epsilon) for this.\n    epsilon = 1e-9\n    best_fit_scores = 1.0 / (fittable_bins_capacities - item + epsilon)\n\n    # 2. Worst Fit component: Prioritize bins with larger remaining capacity.\n    #    We can use the capacity itself or a scaled version. Here, we'll use\n    #    the capacity directly as a secondary scoring factor.\n    worst_fit_scores = fittable_bins_capacities\n\n    # Combine scores: A simple linear combination. You can tune weights.\n    # Here, we give slightly more weight to the \"best fit\" aspect.\n    combined_scores = 0.7 * best_fit_scores + 0.3 * worst_fit_scores\n\n    # Assign combined scores to priorities for fittable bins\n    priorities[fittable_bins_mask] = combined_scores\n\n    # Apply exploration: With a small probability, pick a random fittable bin.\n    if np.random.rand() < exploration_prob:\n        random_fittable_index_in_fittable_array = np.random.randint(len(fittable_bins_indices))\n        chosen_bin_global_index = fittable_bins_indices[random_fittable_index_in_fittable_array]\n\n        # Reset priorities and set the randomly chosen bin's priority to 1\n        priorities = np.zeros_like(bins_remain_cap, dtype=float)\n        priorities[chosen_bin_global_index] = 1.0\n    else:\n        # Normalize priorities to sum to 1 if we are not exploring randomly\n        if np.sum(priorities[fittable_bins_mask]) > 0:\n            priorities[fittable_bins_mask] /= np.sum(priorities[fittable_bins_mask])\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit strategy with a slight random perturbation.\n\n    The Best Fit strategy aims to minimize wasted space by selecting the bin that\n    has the least remaining capacity after the item is placed. To encourage\n    exploration and avoid getting stuck in local optima, a small random value is\n    added to the priority of eligible bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Identify bins that can accommodate the item\n    eligible_bins_mask = bins_remain_cap >= item\n\n    # Initialize priorities to a very low value (or zero) for bins that cannot accommodate the item\n    # This ensures they are never chosen.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if np.any(eligible_bins_mask):\n        # For eligible bins, calculate a priority based on the remaining capacity.\n        # We want to favor bins with less remaining capacity (closer to fitting the item perfectly).\n        # So, we use the negative of the remaining capacity.\n        # A small random value is added to break ties and encourage exploration.\n        priorities[eligible_bins_mask] = -(bins_remain_cap[eligible_bins_mask] - item) + np.random.rand(np.sum(eligible_bins_mask)) * 0.01\n\n    return priorities\n\n[Reflection]\nPrioritize minimal waste, add slight random noise for exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}