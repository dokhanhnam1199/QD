```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First strategy prioritizes bins that have just enough remaining
    capacity to fit the current item. This aims to minimize wasted space by
    filling bins as precisely as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the "exact fit" value. This is the remaining capacity
    # that would perfectly fit the item. A value of 0 indicates an exact fit.
    # We add a small epsilon to avoid division by zero and to slightly penalize
    # bins that are exactly full before considering other factors.
    exact_fit_diff = bins_remain_cap - item

    # The priority is inversely proportional to the remaining capacity after
    # placing the item, but only for bins where the item fits.
    # A smaller remaining capacity after placement indicates a better fit.
    # We use a large number (1000) as a base priority for fitting bins,
    # and subtract the remaining capacity to prioritize smaller remainders.
    # We also add a penalty for bins that are too small to fit the item.
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            # Prioritize bins that result in less remaining capacity
            # This means the bin is filled more "exactly"
            priorities[i] = 1000 - exact_fit_diff[i]
        else:
            # Heavily penalize bins that cannot fit the item
            priorities[i] = -1

    return priorities
```
