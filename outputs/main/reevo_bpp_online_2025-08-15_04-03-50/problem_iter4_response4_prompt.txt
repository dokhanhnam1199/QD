{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy.\n\n    This strategy combines a \"Best Fit\" approach (prioritizing bins that leave minimal\n    remaining capacity after packing) with a \"Worst Fit\" element (prioritizing bins\n    with more remaining capacity to encourage spreading items). It also incorporates\n    a small probability of choosing a random bin to escape local optima.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    exploration_prob = 0.05  # Probability of exploring (choosing a random fittable bin)\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    fittable_bins_mask = bins_remain_cap >= item\n\n    if not np.any(fittable_bins_mask):\n        # If no bin can fit the item, return all zeros.\n        return priorities\n\n    # Calculate scores for fittable bins\n    fittable_bins_indices = np.where(fittable_bins_mask)[0]\n    fittable_bins_capacities = bins_remain_cap[fittable_bins_mask]\n\n    # Hybrid scoring:\n    # 1. Best Fit component: Prioritize bins where (capacity - item) is minimized.\n    #    We use 1 / (difference + epsilon) for this.\n    epsilon = 1e-9\n    best_fit_scores = 1.0 / (fittable_bins_capacities - item + epsilon)\n\n    # 2. Worst Fit component: Prioritize bins with larger remaining capacity.\n    #    We can use the capacity itself or a scaled version. Here, we'll use\n    #    the capacity directly as a secondary scoring factor.\n    worst_fit_scores = fittable_bins_capacities\n\n    # Combine scores: A simple linear combination. You can tune weights.\n    # Here, we give slightly more weight to the \"best fit\" aspect.\n    combined_scores = 0.7 * best_fit_scores + 0.3 * worst_fit_scores\n\n    # Assign combined scores to priorities for fittable bins\n    priorities[fittable_bins_mask] = combined_scores\n\n    # Apply exploration: With a small probability, pick a random fittable bin.\n    if np.random.rand() < exploration_prob:\n        random_fittable_index_in_fittable_array = np.random.randint(len(fittable_bins_indices))\n        chosen_bin_global_index = fittable_bins_indices[random_fittable_index_in_fittable_array]\n\n        # Reset priorities and set the randomly chosen bin's priority to 1\n        priorities = np.zeros_like(bins_remain_cap, dtype=float)\n        priorities[chosen_bin_global_index] = 1.0\n    else:\n        # Normalize priorities to sum to 1 if we are not exploring randomly\n        if np.sum(priorities[fittable_bins_mask]) > 0:\n            priorities[fittable_bins_mask] /= np.sum(priorities[fittable_bins_mask])\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a refined Sigmoid Fit Score.\n\n    This version prioritizes bins that have a remaining capacity that is just\n    slightly larger than the item size. This aims to minimize wasted space in\n    the selected bin, leaving larger contiguous free spaces in other bins for\n    potentially larger future items.\n\n    The priority is calculated using a sigmoid function applied to the difference\n    between the bin's remaining capacity and the item's size. A smaller\n    positive difference (a tighter fit) results in a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority of 0.\n    \"\"\"\n    # Initialize priorities to 0 for all bins. Bins that cannot fit the item will retain this score.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that have enough capacity to fit the item.\n    fittable_bins_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item:\n    if np.any(fittable_bins_mask):\n        fittable_bins_capacities = bins_remain_cap[fittable_bins_mask]\n\n        # Calculate the \"slack\" or \"wasted space\" if the item is placed in the bin.\n        # slack = remaining_capacity - item_size\n        # We want slack to be as close to zero as possible (but non-negative).\n        slack = fittable_bins_capacities - item\n\n        # Use a sigmoid-like function to map slack to a priority score.\n        # A common form that peaks at slack=0 is `1 / (1 + exp(k * slack))`.\n        # As slack increases (larger gaps), the priority decreases.\n        # A higher `k` makes the preference for tight fits more pronounced.\n        k = 5.0  # Sensitivity parameter: higher k means tighter fits are more strongly preferred.\n        priorities[fittable_bins_mask] = 1.0 / (1.0 + np.exp(k * slack))\n\n        # An alternative could be to use a Gaussian-like function, which would also peak at slack=0:\n        # sigma = 1.0 # Controls the spread of the Gaussian.\n        # priorities[fittable_bins_mask] = np.exp(-(slack**2) / (2 * sigma**2))\n\n        # Ensure that if all fittable bins have infinite slack (e.g., if item is 0 and bins are large),\n        # they still get some non-zero priority. The current sigmoid handles this.\n        # Also, if all fittable bins have exactly zero slack, they all get priority 1.\n\n    return priorities\n\n[Reflection]\nFocus on tighter fits, penalize large remaining capacities, and explore solutions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}