{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Random Fit.\n\n    In Random Fit, we consider all bins that can accommodate the item.\n    Then, we assign a random priority to these eligible bins.\n    The higher the priority, the more likely it is to be chosen.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Identify bins that can accommodate the item\n    eligible_bins_mask = bins_remain_cap >= item\n\n    # Initialize priorities to zero\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Assign random priorities to eligible bins\n    # We use a large number (e.g., 1000) to ensure that eligible bins have\n    # non-zero and distinct priorities in most practical scenarios.\n    num_eligible_bins = np.sum(eligible_bins_mask)\n    if num_eligible_bins > 0:\n        random_priorities = np.random.rand(num_eligible_bins) * 1000\n        priorities[eligible_bins_mask] = random_priorities\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Random Fit strategy.\n\n    The Random Fit strategy assigns a random priority to each bin that can accommodate the item.\n    This encourages exploration of different bin assignments.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Assign random priorities to bins that can fit the item\n    # A positive random number ensures these bins are preferred over those that can't fit (priority 0)\n    priorities[can_fit_mask] = np.random.rand(np.sum(can_fit_mask))\n    \n    return priorities\n\n[Reflection]\nRandomness for exploration is good, but don't over-prioritize it without considering item-bin fit.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}