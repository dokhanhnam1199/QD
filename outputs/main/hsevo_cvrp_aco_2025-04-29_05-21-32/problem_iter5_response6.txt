```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines inverse distance, demand, depot proximity, k-NN, sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)
    heuristics += inverse_distance

    # Demand consideration
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            if i == depot_index and j != depot_index:
                remaining_capacity_after_visit = capacity - demands[j]
                if remaining_capacity_after_visit < 0:
                    demand_factor[i, j] = 0
                else:
                    demand_factor[i, j] = 0.7
            else:
                demand_factor[i, j] = 1 / (demands[j] + 1e-9)

    heuristics += demand_factor

    # Depot proximity
    depot_proximity_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i == depot_index or j == depot_index:
                depot_proximity_factor[i,j] = 0.6
    heuristics += depot_proximity_factor

    # k-Nearest Neighbors
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1]

        for nn in neighbors_idx:
            heuristics[i,nn] +=  0.3

    # Sparsification
    threshold = np.quantile(heuristics[heuristics > 0], 0.2)
    heuristics[heuristics < threshold] = 0

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic

    return heuristics
```
