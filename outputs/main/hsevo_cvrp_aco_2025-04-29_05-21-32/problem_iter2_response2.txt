```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic combining distance, demand, and angle for CVRP.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    distance_importance = 1.0
    demand_importance = 0.5
    angle_importance = 0.2

    depot_index = 0

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
                continue

            distance_heuristic = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0

            demand_heuristic = 1 - (demands[j] / capacity) if demands[j] < capacity else 0

            vector_ij = coordinates[j] - coordinates[i]
            vector_dj = coordinates[j] - coordinates[depot_index]

            norm_ij = np.linalg.norm(vector_ij)
            norm_dj = np.linalg.norm(vector_dj)

            if norm_ij > 0 and norm_dj > 0:
                cos_angle = np.dot(vector_ij, vector_dj) / (norm_ij * norm_dj)
                cos_angle = np.clip(cos_angle, -1.0, 1.0)
                angle = np.arccos(cos_angle)
            else:
                angle = np.pi / 2

            angle_heuristic = 1 - (angle / np.pi)

            heuristic_matrix[i, j] = (
                distance_importance * distance_heuristic +
                demand_importance * demand_heuristic +
                angle_importance * angle_heuristic
            )
    return heuristic_matrix
```
