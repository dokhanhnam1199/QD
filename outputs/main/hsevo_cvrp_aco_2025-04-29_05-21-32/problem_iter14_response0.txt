```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Combines inverse distance, depot proximity, demand-based pruning, and k-NN."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Basic inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Depot connection encouragement
    for j in range(1, n):
        if demands[j] <= capacity:
            heuristics[depot_index, j] += 0.5 / (distance_matrix[depot_index, j] + 1e-6)
            heuristics[j, depot_index] = 0
        else:
            heuristics[depot_index, j] = 0
    
    # Depot proximity with adaptive pruning
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= 0.05 * detour_penalty

                if distance_matrix[i, j] > np.mean(distance_matrix) and demands[i] + demands[j] > capacity / 3:
                    heuristics[i, j] = 0

    # Demand-based Sparsification
    mean_distance = np.mean(distance_matrix)
    mean_demand = np.mean(demands[1:])
    threshold = mean_distance * mean_demand * 1.5

    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                heuristics[i, j] = 0
                continue

            combined_metric = distance_matrix[i, j] * (demands[i] + demands[j])
            if combined_metric > threshold:
                heuristics[i, j] = 0

    # Sparsification
    threshold = 0.01 * np.mean(heuristics)
    heuristics[heuristics < threshold] = 0

    # K-Nearest Neighbor
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for nn in neighbors_idx:
            heuristics[i, nn] += 0.2
            
    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
