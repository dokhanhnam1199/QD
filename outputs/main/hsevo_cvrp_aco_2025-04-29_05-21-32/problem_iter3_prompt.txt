{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Heuristic 1: Inverse distance, as closer nodes are generally preferred.\n    heuristics = 1 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero\n\n    # Heuristic 2: Demand considerations.  Penalize edges that would likely lead to exceeding capacity early on.\n    #   - Consider the potential load of each edge (demand of the destination node).\n    #   - Adjust the heuristic value based on the remaining capacity after starting from the depot and visiting that node.\n\n    depot_index = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0  # No self-loops\n                continue\n\n            #Adjust for Depot Location and the assumption vehicles have just left depot and moving outward\n            if i == depot_index and j != depot_index:\n                remaining_capacity_after_visit = capacity - demands[j]\n                if remaining_capacity_after_visit < 0:\n                    heuristics[i, j] = 0  #impossible starting path\n                else:\n                     heuristics[i, j] += 0.5 #Give boost to paths emanating from Depot (0.5 is tune-able value)\n\n            # Penalize edges if going back to the depot would be beneficial\n            # This is a rough penalty and could lead to early convergence.\n            # This part is tricky. Penalizing every edge back to the depot might be harmful\n\n            # Heuristic 3: Proximity to Depot\n            depot_distances = distance_matrix[:, depot_index]\n            # Encourage to connect each node to closest neighbors\n\n            k_nearest_neighbors = 3\n            neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1] # not include self, start at index 1\n\n            for nn in neighbors_idx:\n              heuristics[i,nn] = heuristics[i,nn] + 0.2  #Give slight preference (tune-able: 0.2)\n\n\n\n    # Normalize the heuristics to be between 0 and 1 (optional but often helpful)\n    max_heuristic = np.max(heuristics)\n    if max_heuristic > 0:\n        heuristics = heuristics / max_heuristic\n\n    return heuristics\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I understand. Let's redefine \"Current Self-Reflection\" for better heuristic design, focusing on actionable steps and avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Iterative refinement, factor incorporation, normalization, simplicity, adaptability.\n\n*   **Advice:** Begin with a clear, basic heuristic. Systematically add factors (demand, depot proximity, etc.) one at a time, evaluating the impact of each addition on performance.\n\n*   **Avoid:** Over-engineered formulas, premature optimization, overly specific parameters, complex interactions without empirical justification.\n\n*   **Explanation:** Emphasize incremental improvements and data-driven decisions. Simple, adaptable heuristics are easier to understand, debug, and modify, ultimately leading to more robust solutions.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}