```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version aims for a balance between exploration and exploitation, with an emphasis on simplicity and efficiency.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # 1. Basic Inverse Distance with a small constant to avoid division by zero
    heuristics = 1.0 / (distance_matrix + 1e-6)

    # 2. Depot Connection Preference:  Boost edges connecting to the depot, considering demand.
    depot_boost = 0.5  # Tuneable parameter for depot preference
    for j in range(1, n):  # Iterate through customers (excluding depot)
        if demands[j] <= capacity: #Only allow edges to nodes whose demand is less than capacity
            heuristics[depot_index, j] += depot_boost
            heuristics[j, depot_index] += depot_boost # make symmetric - helps with exploration

    # 3. Capacity-Aware Edge Penalization:  Penalize edges that would likely violate capacity constraints.
    avg_demand = np.mean(demands[1:])  # Average demand of customers (excluding depot)
    capacity_threshold = 0.8 * capacity # Target capacity usage (tuneable)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                #Estimate remaining capacity after visiting node i and j. Note this does not account for returning to depot
                if demands[i] + demands[j] > capacity_threshold:
                     heuristics[i, j] *= 0.5  # Reduce probability
                elif demands[i] + demands[j] > capacity:
                     heuristics[i, j] = 0 # zero out if over capacity

    # 4. Sparsification: Remove edges that are too long relative to average distance.
    avg_distance = np.mean(distance_matrix)
    distance_threshold = 2.5 * avg_distance # tuneable

    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > distance_threshold:
                heuristics[i, j] = 0.0

    # 5. Normalize heuristic values to [0, 1]
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
