```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version focuses on adaptive parameter adjustments and a refined combination of heuristics, including:
    - Adaptive distance scaling.
    - Demand and capacity considerations with dynamic penalty factors.
    - Depot proximity influence adjusted by demand.
    - Angle prioritization with non-depot neighbor consideration.
    - k-NN intensification considering capacity and distance thresholds.
    - Route length estimation combined with demand considerations.
    - Adaptive sparsification based on local variance.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # 1. Adaptive Distance Scaling
    distances_without_depot = distance_matrix[1:, 1:]
    adaptive_distance_scale = np.mean(distances_without_depot)

    # 2. Basic Distance Heuristic
    heuristics = adaptive_distance_scale / (distance_matrix + 1e-9)

    # 3. Demand & Capacity with Dynamic Penalty
    base_demand_penalty = 0.5
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.8  # Depot boost
            elif i != depot_index and j != depot_index:
                demand_ratio = (demands[i] + demands[j]) / capacity
                dynamic_penalty = base_demand_penalty * demand_ratio**2 # Adaptive penalty
                heuristics[i, j] -= dynamic_penalty

    # 4. Depot Proximity influenced by Demand
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances[1:]) #exclude depot itself

    depot_proximity_weight = 0.3
    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0 # No direct return
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                demand_influence = (demands[i] + demands[j]) / capacity #Demand influence
                heuristics[i, j] -= depot_proximity_weight * detour_penalty * demand_influence

    # 5. Angle Prioritization with Non-Depot Neighbor Consideration
    angle_weight = 0.4
    for i in range(1, n):
        for j in range(1, n):
             if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                    heuristics[i, j] += angle_weight * (1 - angle / np.pi)**2
                else:
                    heuristics[i, j] = 0

    # 6. k-NN Intensification with Capacity & Distance Thresholds
    knn = min(6, n - 1)
    knn_weight = 0.3
    distance_threshold = 1.2 * adaptive_distance_scale #Adaptive

    for i in range(1, n):
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1

        demand_neighbors = []
        for neighbor in nearest_neighbors:
            if demands[i] + demands[neighbor] <= capacity and distance_matrix[i, neighbor] < distance_threshold :
                demand_neighbors.append(neighbor)

        if len(demand_neighbors) == 0:
            for j in nearest_neighbors:
                heuristics[i, j] += knn_weight / 3.0
                heuristics[j, i] += knn_weight / 3.0
            continue

        for j in demand_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight

    # 7. Route Length Estimation Combined with Demand
    route_length_weight = 0.15
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                estimated_route_length = distance_matrix[depot_index, i] + distance_matrix[i, j] + distance_matrix[j, depot_index]
                demand_factor = (demands[i] + demands[j]) / capacity
                heuristics[i, j] -= route_length_weight * estimated_route_length * demand_factor / (3 * adaptive_distance_scale + 1e-9)

    # 8. Adaptive Sparsification based on Local Variance
    local_std = np.std(heuristics[heuristics > 0]) #Excluding zeros in calculation.
    threshold_factor = 0.05 #Adjusted Threshold
    threshold = threshold_factor * local_std
    heuristics[heuristics < threshold] = 0

    # 9. Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
