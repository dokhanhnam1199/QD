```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines inverse distance, demand, k-NN, sparsification."""

    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Demand consideration
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    heuristics[i, j] = 0

    # K-Nearest Neighbor
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for nn in neighbors_idx:
            heuristics[i, nn] += 0.2

    # Sparsify
    average_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > 2.0 * average_distance:
                heuristics[i, j] = 0.0

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
