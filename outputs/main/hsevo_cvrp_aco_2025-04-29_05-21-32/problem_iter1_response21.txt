```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates capacity constraints and node proximity into the heuristics.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Parameters (can be tuned)
    alpha = 1.0  # Importance of distance
    beta = 1.5  # Importance of demand proximity (higher value favors grouping customers that each have low demands)
    gamma = 0.5 #Importance of spatial proximity to the depot

    for i in range(n):
        for j in range(n):
            if i != j:
                # 1. Distance component: Prefer shorter distances
                distance_component = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero

                # 2. Demand proximity component: Prefer connecting nodes with smaller demands when close to capacity
                # This encourages balancing vehicle loads and grouping nearby customers
                demand_proximity = np.exp(-beta * (demands[i] + demands[j]) / capacity)
                # 3. Proximity to Depot component:

                depot_proximity = np.exp(-gamma * (distance_matrix[i,0] + distance_matrix[j,0])/np.max(distance_matrix))


                # Combine the components
                heuristics_matrix[i, j] = (distance_component**alpha) * demand_proximity * depot_proximity

    return heuristics_matrix
```
