```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improved heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Inverse distance (primary factor)
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand consideration - scaled penalty based on remaining capacity
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                remaining_capacity = capacity - demands[j]
                if remaining_capacity < 0:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.3  # A bit boost from depot
            elif i != depot_index and j == depot_index:
                 heuristics[i,j] += 0.1 # encourage returning to depot



    # Heuristic 3: Depot proximity encouragement
    depot_distances = distance_matrix[:, depot_index]
    for i in range(n):
        if i != depot_index:
             #Scaled by distance to depot
            heuristics[i, depot_index] += 0.1 * (1 / (depot_distances[i] + 1e-9))

    # Heuristic 4: K-Nearest Neighbor Bonus (Sparsification and Intensification)

    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]  # Exclude self
        for neighbor in neighbors_idx:
            heuristics[i, neighbor] += 0.2 # tune-able

    # Heuristic 5: Sparsification based on a threshold.
    # A more aggressive sparsification.  This is crucial.

    distance_threshold = np.mean(distance_matrix) * 1.5  #Example
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > distance_threshold:
                heuristics[i, j] = 0

    # Normalization
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
