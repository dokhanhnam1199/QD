```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improved heuristics for CVRP incorporating distance, demand, and angle.

    Args:
        distance_matrix: Distance matrix between nodes.
        coordinates: Euclidean coordinates of nodes.
        demands: Demand of each node.
        capacity: Vehicle capacity.

    Returns:
        Heuristic matrix indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning the heuristics
    distance_importance = 1.0
    demand_importance = 0.5
    angle_importance = 0.2

    depot_index = 0

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Distance component: Inverse of distance
            distance_heuristic = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0

            # Demand component: Penalize edges leading to high-demand nodes
            demand_heuristic = 1 - (demands[j] / capacity) if demands[j] < capacity else 0

            # Angle component: Favor nodes in a forward direction from the depot.
            # Calculate the angle between the vector from i to j and the vector from the depot to j.
            vector_ij = coordinates[j] - coordinates[i]
            vector_dj = coordinates[j] - coordinates[depot_index]

            # Normalize vectors to handle cases when i or depot_index equals to j
            norm_ij = np.linalg.norm(vector_ij)
            norm_dj = np.linalg.norm(vector_dj)

            if norm_ij > 0 and norm_dj > 0:
                cos_angle = np.dot(vector_ij, vector_dj) / (norm_ij * norm_dj)
                # Clip cosine values to avoid potential errors in arccos
                cos_angle = np.clip(cos_angle, -1.0, 1.0)
                angle = np.arccos(cos_angle) # Angle in radians
            else:
                angle = np.pi / 2 # Default value

            # The angle component
            angle_heuristic = 1 - (angle / np.pi) # Normalize angle to [0, 1]

            # Combine the heuristics
            heuristic_matrix[i, j] = (
                distance_importance * distance_heuristic +
                demand_importance * demand_heuristic +
                angle_importance * angle_heuristic
            )

    return heuristic_matrix
```
