```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Adaptive pruning, demand, depot proximity, angle, sparsification, k-NN."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Basic inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand and Capacity consideration + Depot encouragement
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.5 / (distance_matrix[i, j] + 1e-6) # Depot boost, scaled by inverse distance
            elif i != depot_index and j != depot_index:
                if demands[i] + demands[j] > capacity:
                    heuristics[i, j] = 0

    # Heuristic 3: Depot proximity with adaptive pruning
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= 0.05 * detour_penalty

                if distance_matrix[i, j] > np.mean(distance_matrix) and demands[i] + demands[j] > capacity / 3:
                    heuristics[i, j] = 0

    # Heuristic 4: Angle from Depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                    heuristics[i, j] += 0.1 * (1 - angle / np.pi)

    # Heuristic 5: Demand-based Sparsification (Combined metric)
    mean_distance = np.mean(distance_matrix)
    mean_demand = np.mean(demands[1:])
    threshold = mean_distance * mean_demand * 1.5

    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                heuristics[i, j] = 0
                continue

            combined_metric = distance_matrix[i, j] * (demands[i] + demands[j])

            if combined_metric > threshold:
                heuristics[i, j] = 0

    # Heuristic 6: Sparsification: zero out small heuristic values
    threshold = 0.01 * np.mean(heuristics)
    heuristics[heuristics < threshold] = 0

    # Heuristic 7: K-Nearest Neighbor
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for nn in neighbors_idx:
            heuristics[i, nn] += 0.2

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
