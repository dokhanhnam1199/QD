```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version focuses on a simplified approach with adaptive intensification and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Inverse distance with a small constant to avoid division by zero
    heuristics = 1 / (distance_matrix + 1e-6)

    # Heuristic 2: Depot connection encouragement based on demand and distance
    for j in range(1, n):  # Iterate over customers (excluding depot)
        # Encourage connections from the depot to customers
        if demands[j] <= capacity:  # Only consider if demand is within capacity
            heuristics[depot_index, j] += 0.5 / (distance_matrix[depot_index, j] + 1e-6)  # Boost, scaled by inverse distance
            heuristics[j, depot_index] = 0 #no incoming edges to depot except from depot.
        else:
            heuristics[depot_index, j] = 0 #prune edges if single demand exceeds capacity.

    # Heuristic 3: Demand-based Sparsification: Adaptive threshold
    mean_distance = np.mean(distance_matrix)
    mean_demand = np.mean(demands[1:])  # Exclude depot demand
    threshold = mean_distance * mean_demand * 1.5  # Adaptive threshold based on means

    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                heuristics[i, j] = 0
                continue

            combined_metric = distance_matrix[i, j] * (demands[i] + demands[j]) #Considers combined demand

            if combined_metric > threshold:
                heuristics[i, j] = 0  # Aggressive pruning if over threshold

    # Heuristic 4: Nearest Neighbor Adjustment (Simplified k-NN)
    k_nearest_neighbors = 2 # Reduced k for simplicity
    for i in range(1, n):
        neighbors_idx = np.argsort(distance_matrix[i, 1:])[ :k_nearest_neighbors] + 1 # Exclude self and depot, adjust indices
        for nn in neighbors_idx:
            heuristics[i, nn] += 0.1 # Small encouragement

    # Heuristic 5:  Discourage long edges generally (more aggressive sparsification)
    long_edge_threshold = np.median(distance_matrix) * 2  #Example: Adaptive threshold
    for i in range(1,n):
        for j in range(1,n):
            if distance_matrix[i,j] > long_edge_threshold:
                heuristics[i,j] = 0

    # Normalize to [0, 1]
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
