{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings based on Clarke-Wright algorithm\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Incorporate distance and savings\n    heuristic_matrix = (1 / distance_matrix + savings_matrix / np.max(savings_matrix)) #avoiding infs/NaNs\n\n    # Penalize edges connecting to nodes with high demand relative to capacity\n    demand_penalty = np.zeros(n)\n    for i in range(1, n):\n      demand_penalty[i] = demands[i] / capacity\n\n    for i in range(n):\n      for j in range(n):\n        if i == j:\n          heuristic_matrix[i, j] = 0 #ensure no loops\n        else:\n            heuristic_matrix[i,j] /= (1 + demand_penalty[i] + demand_penalty[j]) #slightly penalize high demand nodes\n\n    #Prioritize connecting nodes that are close in coordinate space. This can help exploit locality.\n    coordinate_distances = np.zeros_like(distance_matrix)\n    for i in range(n):\n      for j in range(n):\n        coordinate_distances[i,j] = np.linalg.norm(coordinates[i] - coordinates[j])\n\n    heuristic_matrix += (1/coordinate_distances) #prefer edges with small coordinate distance\n    heuristic_matrix[np.isinf(heuristic_matrix)] = 0  # Remove any potential infinities created by division by zero on diagonals.\n    heuristic_matrix[np.isnan(heuristic_matrix)] = 0 # Clean NaN values\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Enhanced heuristic for CVRP considering distance, demand, and geometric properties.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate a basic distance-based heuristic\n    distance_heuristic = 1 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero on diagonal\n    \n    # Demand-based penalty.  Heavier demand makes longer paths less attractive.\n    demand_penalty = np.zeros_like(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                demand_penalty[i, j] = (demands[i] + demands[j]) / capacity # Normalized combined demand\n                \n    # Geometric proximity factor: Favors edges that connect nodes close to each other in euclidean space.\n    # But penalizes connection to depot for high demands.\n    proximity_factor = np.zeros_like(distance_matrix)\n    center = np.mean(coordinates, axis=0) # Center of all nodes.\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist_to_center_i = np.linalg.norm(coordinates[i] - center)\n                dist_to_center_j = np.linalg.norm(coordinates[j] - center)\n                proximity_factor[i, j] = 1 / (dist_to_center_i + dist_to_center_j + 1e-6) # Add epsilon to avoid division by zero.\n\n                if i == 0 or j == 0: #Depot connection. Penalize connections to the depot if either node connected has high demand.\n                    proximity_factor[i,j] *= (1- (demands[i] + demands[j])/ (2*capacity)) #Reduced importance of connection when demand of other nodes are high. Max reduction of 50%.\n\n\n\n    # Combine the heuristics, weighing distance more. and then slightly adjust by proximity factor and demand.\n    heuristic_matrix = distance_heuristic * (1 - 0.5 * demand_penalty) + 0.25 * proximity_factor\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see that the 1st heuristic focuses on simplicity, using inverse distance modified by demand and depot proximity, while the 2nd incorporates the Clarke-Wright savings algorithm and coordinate distances. The 2nd also normalizes savings. Overall, the 1st heuristics seems to be more straightforward.\n\nComparing (2nd best) vs (second worst), we see heuristic 2nd includes savings calculations from Clarke-Wright and also coordinate distance. The 19th makes use of angle and capacity slack. These factors might be too specific or not generally effective, potentially overfitting to certain problem instances. Heuristic 2nd normalizes savings by dividing by `np.max(savings_matrix)`. This appears to be important.\n\nComparing (1st) vs (3rd), we see that they are different.\n\nComparing (3rd) vs (4th), the 3rd is identical to the 2nd, but the 4th uses weights for distance, demand, and depot proximity, also using exponential functions for demand and proximity. The use of tunable weights may not be enough.\n\nComparing (second worst) vs (worst), 19th vs 20th is identical. Perhaps it wasn't possible to improve on the bad designs.\n\nOverall: The better heuristics generally balance simplicity with relevant factors (distance, demand, depot proximity) without over-engineering. Normalization is important. Angular considerations, while intuitive, may not always improve performance. Overly complex combinations of factors can also hinder performance.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I understand. Let's redefine \"Current Self-Reflection\" for better heuristic design, focusing on actionable steps and avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Iterative refinement, factor incorporation, normalization, simplicity, adaptability.\n\n*   **Advice:** Begin with a clear, basic heuristic. Systematically add factors (demand, depot proximity, etc.) one at a time, evaluating the impact of each addition on performance.\n\n*   **Avoid:** Over-engineered formulas, premature optimization, overly specific parameters, complex interactions without empirical justification.\n\n*   **Explanation:** Emphasize incremental improvements and data-driven decisions. Simple, adaptable heuristics are easier to understand, debug, and modify, ultimately leading to more robust solutions.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}