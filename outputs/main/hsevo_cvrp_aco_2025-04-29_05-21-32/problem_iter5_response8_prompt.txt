{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Improved heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    depot_index = 0\n\n    # Heuristic 1: Inverse distance (primary factor)\n    heuristics = 1 / (distance_matrix + 1e-9)\n\n    # Heuristic 2: Demand consideration - scaled penalty based on remaining capacity\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0\n                continue\n\n            if i == depot_index and j != depot_index:\n                remaining_capacity = capacity - demands[j]\n                if remaining_capacity < 0:\n                    heuristics[i, j] = 0\n                else:\n                    heuristics[i, j] += 0.3  # A bit boost from depot\n            elif i != depot_index and j == depot_index:\n                 heuristics[i,j] += 0.1 # encourage returning to depot\n\n\n\n    # Heuristic 3: Depot proximity encouragement\n    depot_distances = distance_matrix[:, depot_index]\n    for i in range(n):\n        if i != depot_index:\n             #Scaled by distance to depot\n            heuristics[i, depot_index] += 0.1 * (1 / (depot_distances[i] + 1e-9))\n\n    # Heuristic 4: K-Nearest Neighbor Bonus (Sparsification and Intensification)\n\n    k_nearest_neighbors = 4\n    for i in range(n):\n        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]  # Exclude self\n        for neighbor in neighbors_idx:\n            heuristics[i, neighbor] += 0.2 # tune-able\n\n    # Heuristic 5: Sparsification based on a threshold.\n    # A more aggressive sparsification.  This is crucial.\n\n    distance_threshold = np.mean(distance_matrix) * 1.5  #Example\n    for i in range(n):\n        for j in range(n):\n            if distance_matrix[i, j] > distance_threshold:\n                heuristics[i, j] = 0\n\n    # Normalization\n    max_heuristic = np.max(heuristics)\n    if max_heuristic > 0:\n        heuristics = heuristics / max_heuristic\n\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"Heuristic combining distance, demand, angle from depot, and depot proximity.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            dist_heuristic = 1 / (distance_matrix[i, j] + 1e-6)\n\n            demand_penalty_i = demands[i] / capacity if i != 0 else 0\n            demand_penalty_j = demands[j] / capacity if j != 0 else 0\n\n            angle_penalty = 1\n            if i == 0:\n                x_i, y_i = coordinates[i]\n                x_j, y_j = coordinates[j]\n                dx = x_j - x_i\n                dy = y_j - y_i\n                angle = np.arctan2(dy, dx)\n                angle_penalty = 1 / (np.abs(angle) + 1e-6)\n\n            depot_proximity_i = distance_matrix[0, i]\n            depot_proximity_j = distance_matrix[0, j]\n            depot_proximity_heuristic = 1 / ((depot_proximity_i + depot_proximity_j) / 2 + 1e-6)\n\n            heuristic_matrix[i, j] = (0.5 * dist_heuristic * (1 - demand_penalty_i) * (1 - demand_penalty_j) * angle_penalty +\n                                     0.5 * depot_proximity_heuristic)\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic utilizes a combination of inverse distance, demand considerations (with depot-specific adjustments), depot proximity, k-nearest neighbors, and sparsification, followed by normalization. The 20th heuristic uses a similar approach but lacks specific scaling factors for depot departures based on remaining capacity and uses hardcoded boosts.\n(2nd best) vs (second worst): (2nd) uses a weighted combination of distance, demand, and depot proximity. (19th) uses inverse distance, demand factor adjusted for depot location, depot proximity factor, k-nearest neighbors, and sparsification. The primary difference lies in the explicit inclusion of k-NN and sparsification in (1st) which seems to be essential for better performance.\nComparing (1st) vs (2nd), we see (1st) employs a more complex and refined approach by integrating k-NN bonus, a more aggressive sparsification based on a dynamic threshold, and specific boost from the depot alongside normalization, whereas (2nd) relies on a simpler, weighted combination of distance, demand, and depot proximity. The sophisticated tuning and edge pruning in (1st) likely contribute to its superior performance.\n(3rd) vs (4th): Both implementations are nearly identical, meaning there's little to differentiate between them in terms of design.\nComparing (second worst) vs (worst), we see a similar approach that considers inverse distance, demand and depot proximity, but weights them differently and does not include k-NN or sparsification. The normalization step remains consistent. Overall, the lack of k-NN and sparsification leads to decreased performance.\n\nOverall: The best heuristics in the list combine several factors: inverse distance as a base, demand considerations with capacity constraints, depot proximity encouragements, k-nearest neighbor bonuses, and sparsification to prune unpromising edges. The key to better performance involves fine-tuning the weights and thresholds of these components and incorporating more problem-specific information to make better routing decisions. The weaker heuristics often lack the k-NN and sparsification components and have less refined scaling for different factors. Normalization appears to be a standard practice.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's refine \"Current Self-Reflection\" to design better heuristics, avoiding common pitfalls.\n\nHere's a more effective redefinition:\n\n*   **Keywords:** Incremental refinement, component-wise addition, adaptive intensification, simplification, performance evaluation.\n*   **Advice:** Build heuristics iteratively, adding components based on performance impact. Focus on *why* a component improves solutions. Use limited components.\n*   **Avoid:** Premature complexity, over-tuning, black-box approaches, relying on overly specific or intricate formulas. Do not blindly use weights.\n*   **Explanation:** Start with a minimal viable heuristic. Systematically add and evaluate new components, understanding their individual contributions. Keep the design interpretable.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}