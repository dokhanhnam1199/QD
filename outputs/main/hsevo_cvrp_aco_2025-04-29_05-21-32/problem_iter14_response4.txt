```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Heuristics for CVRP via stochastic sampling, combining demand, distance, k-NN, and pheromone updates."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0
    pheromone = np.ones_like(distance_matrix) * 0.01
    avg_distance = np.mean(distance_matrix)

    heuristics = avg_distance / (distance_matrix + 1e-9)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.6
            elif i != depot_index and j != depot_index:
                demand_ratio = (demands[i] + demands[j]) / capacity
                heuristics[i, j] -= 0.6 * demand_ratio

    knn = 6
    knn_weight = 0.2
    for i in range(1, n):
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1
        for j in nearest_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight

    pheromone_weight = 0.1
    heuristics += pheromone_weight * pheromone

    threshold_factor = 0.03
    threshold = threshold_factor * np.mean(np.abs(heuristics))
    heuristics[np.abs(heuristics) < threshold] = 0

    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    def update_pheromone(route, reward=0.1, punishment=0.01):
        for i in range(len(route) - 1):
            u, v = route[i], route[i+1]
            pheromone[u, v] += reward * heuristics[u, v]
            pheromone[v, u] += reward * heuristics[v, u]
        pheromone[pheromone < 0.001] = 0.001

    simulated_route = [0]
    current_node = 0
    unvisited_nodes = set(range(1, n))
    current_load = 0

    while unvisited_nodes:
        next_node = None
        min_dist = float('inf')
        possible_next_nodes = []
        for node in unvisited_nodes:
          if demands[node] + current_load <= capacity:
            possible_next_nodes.append(node)

        if not possible_next_nodes:
          simulated_route.append(0)
          current_node = 0
          current_load = 0
          continue

        for node in possible_next_nodes:
            dist = distance_matrix[current_node, node]
            if dist < min_dist:
                min_dist = dist
                next_node = node

        if next_node is not None:
            simulated_route.append(next_node)
            unvisited_nodes.remove(next_node)
            current_load += demands[next_node]
            current_node = next_node
        else:
            break

    simulated_route.append(0)
    update_pheromone(simulated_route)

    return heuristics
```
