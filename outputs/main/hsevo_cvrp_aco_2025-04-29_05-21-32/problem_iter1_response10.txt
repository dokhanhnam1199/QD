```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) that considers
    distance, demand, and proximity to the depot.

    Args:
        distance_matrix: A numpy array of shape (n, n) representing the distances
                         between each pair of nodes.
        coordinates: A numpy array of shape (n, 2) representing the Euclidean coordinates
                     of each node.
        demands: A numpy array of shape (n,) representing the demand of each node.
        capacity: An integer representing the capacity of each vehicle.

    Returns:
        A numpy array of shape (n, n) representing the prior indicators of how
        promising it is to include each edge in a solution.  Higher values indicate
        more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Heuristic 1: Inverse of distance
    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Heuristic 2: Demand-based adjustment.  Edges connecting to nodes with high demand
    # are penalized if they are far from the depot.
    depot_distances = distance_matrix[0, :]  # Distances from the depot to all nodes
    demand_heuristic = np.zeros((n, n))
    for i in range(1, n):  # Skip depot (index 0)
        for j in range(1, n):
            if i != j:
                demand_heuristic[i, j] = (capacity / (demands[i] + demands[j] + 1e-6)) * (1/(depot_distances[i]+ depot_distances[j] +1e-6)) #Nodes close to the depot more likely to be used

    # Heuristic 3: Combination of distance and demand, prioritize the close distance to depot
    proximity_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                proximity_heuristic[i, j] = 1/ (distance_matrix[i,j]+ depot_distances[i]+ depot_distances[j]+ 1e-6)


    # Combine the heuristics
    heuristic_matrix = 0.5 * distance_heuristic + 0.25 * demand_heuristic + 0.25 * proximity_heuristic


    # Ensure the depot node (0) is always a good starting point, boost edges connected to the depot
    for i in range(1, n):
          heuristic_matrix[0, i] = heuristic_matrix[0, i] * 1.5
          heuristic_matrix[i, 0] = heuristic_matrix[i, 0] * 1.5



    return heuristic_matrix
```
