```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates demand, distance, depot proximity, angle considerations, k-NN intensification, and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Basic inverse distance (base heuristic)
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand and Capacity consideration
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:  # Directly prune edges that violate capacity constraint.
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.4  # Depot boost (slightly increased)
            elif j == depot_index and i != depot_index:
                heuristics[i, j] = 0 # No direct routes back to depot except *from* depot


    # Heuristic 3: Depot proximity with adaptive pruning (refined)
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)

    for i in range(n):
        for j in range(n):
            if i != depot_index and j != depot_index:
                # Penalize edges based on detour from direct depot route.
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= 0.07 * detour_penalty  # Increased penalty

                # Adaptive pruning based on demand and distance.
                if distance_matrix[i, j] > 1.2 * np.mean(distance_matrix) and demands[i] + demands[j] > capacity / 2.5: #Tuned parameters
                    heuristics[i, j] = 0


    # Heuristic 4: Angle from Depot (more robust angle heuristic)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Dot product to find the cosine of the angle between vectors
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    # Convert cosine to angle in radians
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Ensure within valid range

                    # Prefer edges where nodes are in similar direction from depot. Smaller angle -> higher heuristic value
                    heuristics[i, j] += 0.12 * (1 - angle / np.pi)  # Normalized angle reward, increased weight


    # Heuristic 5: k-NN intensification (focus on nearest neighbors)
    k = min(10, n - 1)  # Number of neighbors
    for i in range(1, n):
        # Find k-nearest neighbors of node i (excluding itself)
        distances_i = distance_matrix[i, 1:]  # Distances to other nodes
        nearest_neighbors = np.argsort(distances_i)[:k] + 1  # Indices of k-NN

        for j in range(1, n):
            if i != j and j in nearest_neighbors:
                heuristics[i, j] += 0.15 # Add some extra promising value


    # Heuristic 6: Sparsification: zero out small heuristic values (adaptive thresholding)
    threshold = 0.02 * np.mean(heuristics)  # Adaptive threshold (tuned)
    heuristics[heuristics < threshold] = 0


    # Heuristic 7: Refine Depot-Specific Adjustments
    for i in range(1,n):
        heuristics[depot_index,i] = max(0, heuristics[depot_index,i] - 0.03*distance_matrix[depot_index, i]/mean_depot_distance) #Adjust edge depot-node by distance
        heuristics[i, depot_index] = 0

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
