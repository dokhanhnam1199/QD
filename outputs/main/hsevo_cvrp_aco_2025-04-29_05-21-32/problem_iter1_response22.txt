```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP using a combination of distance, demand, and angular considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior indicators (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Parameters to tune
    alpha = 1.0  # Distance weight
    beta = 0.5  # Demand weight
    gamma = 0.2  # Angular weight (relative to depot)

    # Calculate angles relative to the depot (node 0)
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # No self-loops
            else:
                # Distance component: inversely proportional to distance
                distance_component = 1 / distance_matrix[i, j]

                # Demand component: penalize edges connecting high-demand nodes (encourage balanced routes)
                demand_component = 1 / (demands[i] + demands[j] + 1e-6) #Adding a small value to avoid division by zero

                # Angular component: Favor edges that maintain angular progression from the depot.
                # Encourage exploration and avoid immediately returning to depot unless necessary.
                angle_diff = np.abs(angles[i] - angles[j])
                angular_component = 1 / (angle_diff + 0.1)  # Penalize large angle changes (smooth route transitions)
                if i==0:
                  angular_component=1 # always prioritize connection to depot

                # Combine components with weights
                heuristics[i, j] = (
                    alpha * distance_component
                    + beta * demand_component
                    + gamma * angular_component
                )

    return heuristics
```
