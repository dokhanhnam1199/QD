```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP based on distance, demand, and depot proximity.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Coordinates of each node.
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge weights indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Inverse distance component (closer nodes are preferred)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Demand-aware component: penalize edges that would overload vehicles
    demand_penalty = np.ones_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    demand_penalty[i, j] = 0.1  # Heavily penalize if combined demand exceeds capacity significantly

    # Depot proximity component: favor edges near the depot to promote returns
    depot_proximity = np.zeros_like(distance_matrix)
    for i in range(1, n):
        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-9) # Favor shorter path to depot
        depot_proximity[i, 0] = 1 / (distance_matrix[i, 0] + 1e-9)


    # Combined heuristic: balance distance, demand, and depot proximity
    heuristics = inverse_distance * demand_penalty + depot_proximity

    # Normalize the heuristic values
    heuristics = heuristics / np.max(heuristics)

    return heuristics
```
