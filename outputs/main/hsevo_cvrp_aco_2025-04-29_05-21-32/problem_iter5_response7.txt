```python
import numpy as np
from sklearn.neighbors import NearestNeighbors

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, proximity, k-NN, and sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Distance heuristic
    distance_heuristic = 1 / (distance_matrix + np.eye(n) * 1e-6)

    # Demand penalty
    demand_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_penalty[i, j] = (demands[i] + demands[j]) / (2 * capacity)

    # Proximity factor
    proximity_factor = np.zeros_like(distance_matrix)
    center = np.mean(coordinates, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                dist_to_center_i = np.linalg.norm(coordinates[i] - center)
                dist_to_center_j = np.linalg.norm(coordinates[j] - center)
                proximity = 1 / (dist_to_center_i + dist_to_center_j + 1e-6)
                proximity_factor[i, j] = proximity
                if i == 0 or j == 0:  # Adjust for depot
                    proximity_factor[i, j] *= (1 - (demands[i] + demands[j]) / (2 * capacity))

    # k-NN bonus
    knn = NearestNeighbors(n_neighbors=min(5, n - 1), metric='precomputed')
    knn.fit(distance_matrix)
    knn_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        neighbors = knn.kneighbors(distance_matrix[[i]], return_distance=False)[0]
        for neighbor in neighbors:
            knn_matrix[i, neighbor] = 1

    # Combine factors
    heuristic_matrix = distance_heuristic * (1 - 0.5 * demand_penalty) + 0.25 * proximity_factor + 0.1 * knn_matrix

    # Sparsification
    threshold = np.mean(heuristic_matrix) * 0.25  #Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalization
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix /= max_val

    return heuristic_matrix
```
