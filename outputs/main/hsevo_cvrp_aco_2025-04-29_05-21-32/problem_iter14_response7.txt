```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining inverse distance, demand, depot proximity, angle, 
    k-NN, adaptive sparsification, and pheromone-inspired reinforcement.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Basic inverse distance (scaled)
    distance_scaling = np.mean(distance_matrix)
    heuristics = distance_scaling / (distance_matrix + 1e-9)

    # Heuristic 2: Demand and Capacity penalty
    demand_penalty_factor = 0.6
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.6 #Depot boost
            elif i != depot_index and j != depot_index:
                demand_ratio = (demands[i] + demands[j]) / capacity
                demand_penalty = demand_penalty_factor * demand_ratio
                heuristics[i, j] -= demand_penalty

    # Heuristic 3: Depot proximity and adaptive pruning
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)
    depot_proximity_weight = 0.2

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= depot_proximity_weight * detour_penalty
                if distance_matrix[i, j] > 1.3 * distance_scaling and demands[i] + demands[j] > capacity / 3:
                    heuristics[i, j] = 0

    # Heuristic 4: Angle from Depot
    angle_weight = 0.3
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    heuristics[i, j] += angle_weight * (1 - angle / np.pi)

    # Heuristic 5: k-NN intensification
    knn = 6
    knn_weight = 0.2

    for i in range(1, n):
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1
        for j in nearest_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight
    
    # Heuristic 6: Adaptive Sparsification
    threshold_factor = 0.03
    threshold = threshold_factor * np.mean(np.abs(heuristics))
    heuristics[np.abs(heuristics) < threshold] = 0

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
