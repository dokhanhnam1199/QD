```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates demand, distance, and depot proximity considerations with sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Basic inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand consideration + Depot Starting Edge boost
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                remaining_capacity = capacity - demands[j]
                if remaining_capacity >= 0:
                    heuristics[i, j] += 0.5  # Initial Depot Boost (tuneable)
                else:
                    heuristics[i, j] = 0 # Prune unpromising edges emanating from depot

    # Heuristic 3: Depot Proximity
    depot_distances = distance_matrix[:, depot_index]
    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i,j] = 0 #remove edges to depot except from depot
            if i != depot_index and j != depot_index:

                #Adjust heuristic based on distances to depot - promotes returning to depot
                heuristics[i, j] -=  0.1 * (depot_distances[i] + depot_distances[j]) / (np.mean(depot_distances)+ 1e-9) #Slight penalty for longer path to depot.

                # Further pruning based on combined distance and demand.  Aggressive sparsification.
                # The greater the distance and demand, the more aggressively prune.
                combined_metric = distance_matrix[i,j] * demands[j]
                threshold = np.mean(distance_matrix) * np.mean(demands) * 2 # Adaptive threshold

                if combined_metric > threshold:
                    heuristics[i,j] = 0 # zero out this edge as it is unpromising


    # Heuristic 4: Nearest Neighbor Preference (k-NN)
    k_nearest_neighbors = 3
    for i in range(n):
      neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1] # not include self, start at index 1
      for nn in neighbors_idx:
          heuristics[i,nn] += 0.2 # give preference

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
