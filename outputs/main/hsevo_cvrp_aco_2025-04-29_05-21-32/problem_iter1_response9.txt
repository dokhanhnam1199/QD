```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates distance, demand, and depot proximity for edge prioritization.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Avoid self-loops
    for i in range(n):
        heuristics_matrix[i, i] = 0

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse of distance
                distance_heuristic = 1 / (distance_matrix[i, j] + 1e-9) # Adding a small constant to avoid division by zero

                # Demand-based heuristic:  discourage connecting nodes whose combined demand significantly exceeds capacity when starting from the depot.
                demand_heuristic = 1.0
                if i == 0:  # Penalize high demands *starting* from the depot.
                    if demands[j] > capacity/2: #heuristically chosen threshold to penalize *starting* from depot
                        demand_heuristic = 0.1 #drastically reduce the indicator if demand is high
                else:
                   demand_heuristic = 1 #Neutralize demand_heuristic.  Important, because the depot condition strongly steers routes toward the depot.


                # Depot proximity heuristic: Favor edges closer to the depot, especially for initiating routes (starting at the depot)
                depot_proximity_i = distance_matrix[0, i]
                depot_proximity_j = distance_matrix[0, j]
                depot_proximity_heuristic = 1 / ((depot_proximity_i + depot_proximity_j)/2 + 1e-9)  #Avoid divide by zero

                # Combined heuristic (weighted sum - weights can be tuned)
                heuristics_matrix[i, j] = (0.6 * distance_heuristic +
                                             0.2 * demand_heuristic +
                                             0.2 * depot_proximity_heuristic)

    return heuristics_matrix
```
