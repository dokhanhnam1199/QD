```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristic for CVRP considering distance, demand, and geometric properties.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate a basic distance-based heuristic
    distance_heuristic = 1 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero on diagonal
    
    # Demand-based penalty.  Heavier demand makes longer paths less attractive.
    demand_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_penalty[i, j] = (demands[i] + demands[j]) / capacity # Normalized combined demand
                
    # Geometric proximity factor: Favors edges that connect nodes close to each other in euclidean space.
    # But penalizes connection to depot for high demands.
    proximity_factor = np.zeros_like(distance_matrix)
    center = np.mean(coordinates, axis=0) # Center of all nodes.

    for i in range(n):
        for j in range(n):
            if i != j:
                dist_to_center_i = np.linalg.norm(coordinates[i] - center)
                dist_to_center_j = np.linalg.norm(coordinates[j] - center)
                proximity_factor[i, j] = 1 / (dist_to_center_i + dist_to_center_j + 1e-6) # Add epsilon to avoid division by zero.

                if i == 0 or j == 0: #Depot connection. Penalize connections to the depot if either node connected has high demand.
                    proximity_factor[i,j] *= (1- (demands[i] + demands[j])/ (2*capacity)) #Reduced importance of connection when demand of other nodes are high. Max reduction of 50%.



    # Combine the heuristics, weighing distance more. and then slightly adjust by proximity factor and demand.
    heuristic_matrix = distance_heuristic * (1 - 0.5 * demand_penalty) + 0.25 * proximity_factor

    return heuristic_matrix
```
