```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates several improvements over v1, including a more refined demand consideration,
    depot proximity enhancements, and sparsification of unpromising edges.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Inverse distance (primary factor)
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand consideration, penalizing edges that risk exceeding capacity
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            # Depot departures boost: only apply to edges *from* the depot. Scale inversely with demand.
            if i == depot_index and j != depot_index:
                remaining_capacity = capacity - demands[j]
                if remaining_capacity > 0:
                    heuristics[i, j] += 0.75 * (remaining_capacity / capacity)  # Scale boost by remaining capacity

            # Penalize high-demand edges to discourage routes that fill up too quickly. Don't penalize edges *to* the depot.
            if j != depot_index:
                demand_penalty = demands[j] / capacity # Higher demand leads to higher penalty
                heuristics[i, j] *= max(0, 1 - demand_penalty) #scale values to avoid negatives
                if demands[j] > capacity:
                    heuristics[i, j] = 0 #impossible node visits

    # Heuristic 3: Depot proximity. Encourages connections to nodes close to the depot.
    # Adjust strength based on distance *from* the depot. Only do this for edges *from* a node.
    for i in range(n):
      if i != depot_index:
        depot_distance = distance_matrix[i, depot_index]
        proximity_bonus = max(0, 1 - (depot_distance / np.max(distance_matrix))) # Closer = larger bonus
        heuristics[i, :] += 0.25 * proximity_bonus  # Apply bonus to *all* outbound edges from node i

    # Heuristic 4: Sparsification - remove very unpromising edges to focus search
    # Identify and zero out edges below a threshold based on mean heuristic value.

    mean_heuristic = np.mean(heuristics)
    sparsification_threshold = 0.25 * mean_heuristic  # Adjust this factor as needed

    heuristics[heuristics < sparsification_threshold] = 0

    # Heuristic 5: k-Nearest Neighbors encouragement (Similar to v1, but with fine-tuning)
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]  # Exclude self

        for nn in neighbors_idx:
            heuristics[i, nn] += 0.15  # Slight preference for neighbors


    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
