import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int,
                   inverse_distance_epsilon: float = 9.008209760211894e-07, depot_boost: float = 0.8460960237688242, depot_return: float = 0.11191234304547187,
                   depot_proximity_weight: float = 0.27231865856278514, k_nearest_neighbors: int = 3.9718399560449065, knn_bonus: float = 0.4777024404551665,
                   sparsification_threshold_multiplier: float = 1.6651168193182562) -> np.ndarray:
    """Combines distance, demand, depot proximity, k-NN, and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + inverse_distance_epsilon)
    heuristics += inverse_distance

    # 2. Demand consideration and depot boost/prune
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0  # Prune infeasible edges from depot
                else:
                    heuristics[i, j] += depot_boost  # depot boost
            elif i != depot_index and j == depot_index:
                heuristics[i, j] += depot_return

    # 3. Depot proximity consideration.
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances) + inverse_distance_epsilon
    for i in range(n):
        if i != depot_index:
            heuristics[i, depot_index] += depot_proximity_weight * (1 / (depot_distances[i] + inverse_distance_epsilon))
            
    # 4. K-Nearest Neighbor Bonus
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for neighbor in neighbors_idx:
            heuristics[i, neighbor] += knn_bonus
            
    # 5. Adaptive Sparsification based on mean and demand
    mean_heuristic = np.mean(heuristics)
    for i in range(n):
        for j in range(n):
            combined_metric = distance_matrix[i, j] * demands[j]
            threshold = np.mean(distance_matrix) * np.mean(demands) * sparsification_threshold_multiplier
            if heuristics[i, j] < mean_heuristic or combined_metric > threshold:
                heuristics[i, j] = 0

    # 6. Normalization
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
