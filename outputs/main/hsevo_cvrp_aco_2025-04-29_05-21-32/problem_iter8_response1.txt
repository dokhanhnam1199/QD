```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristics: Combines depot proximity, angle, demand, and adaptive sparsification for edge prioritization.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Basic inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Depot connection boost, prune infeasible edges
    for j in range(1, n):
        if demands[j] <= capacity:
            heuristics[depot_index, j] += 0.5 / (distance_matrix[depot_index, j] + 1e-6)
        else:
            heuristics[depot_index, j] = 0
        heuristics[j, depot_index] = 0

    # Depot proximity and adaptive pruning based on combined demand
    mean_distance = np.mean(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                heuristics[i, j] = 0
                continue
            detour_penalty = (distance_matrix[i, depot_index] + distance_matrix[j, depot_index]) / (2*mean_distance + 1e-9)
            heuristics[i, j] -= 0.05 * detour_penalty
            combined_metric = distance_matrix[i, j] * (demands[i] + demands[j])
            if combined_metric > mean_distance * np.mean(demands[1:]) * 1.5:
                 heuristics[i, j] = 0

    # Angle from Depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    heuristics[i,j] += 0.1 * (1 - angle / np.pi)

    # Sparsification and normalization
    threshold = 0.01 * np.mean(heuristics)
    heuristics[heuristics < threshold] = 0
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
