```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates demand, distance, depot proximity, angle considerations, k-NN intensification,
    adaptive sparsification, and pheromone-inspired reinforcement learning.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Initialize Pheromone Matrix: start with small values
    pheromone = np.ones_like(distance_matrix) * 0.01

    # Heuristic 1: Basic inverse distance (with scaling)
    distance_scaling = np.mean(distance_matrix)
    heuristics = distance_scaling / (distance_matrix + 1e-9)

    # Heuristic 2: Demand and Capacity
    demand_penalty_factor = 0.6
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.6  # Increased depot boost
            elif i != depot_index and j != depot_index:
                demand_ratio = (demands[i] + demands[j]) / capacity
                demand_penalty = demand_penalty_factor * demand_ratio
                heuristics[i, j] -= demand_penalty

    # Heuristic 3: Depot proximity and adaptive pruning
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)
    depot_proximity_weight = 0.2

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= depot_proximity_weight * detour_penalty

                if distance_matrix[i, j] > 1.3 * distance_scaling and demands[i] + demands[j] > capacity / 3:
                    heuristics[i, j] = 0

    # Heuristic 4: Angle from Depot
    angle_weight = 0.3
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    heuristics[i, j] += angle_weight * (1 - angle / np.pi)

    # Heuristic 5: k-NN intensification
    knn = 6
    knn_weight = 0.2

    for i in range(1, n):
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1
        for j in nearest_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight

    # Heuristic 6: Pheromone reinforcement
    pheromone_weight = 0.1
    heuristics += pheromone_weight * pheromone  # Incorporate pheromone

    # Heuristic 7: Adaptive Sparsification
    threshold_factor = 0.03
    threshold = threshold_factor * np.mean(np.abs(heuristics))
    heuristics[np.abs(heuristics) < threshold] = 0

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    # Update Pheromone (Simulated Learning - Reward/Punish Edges)
    def update_pheromone(route, reward=0.1, punishment=0.01): # Pheromone Update Function
        for i in range(len(route) - 1):
            u, v = route[i], route[i+1]
            pheromone[u, v] += reward * heuristics[u, v]  # Reward
            pheromone[v, u] += reward * heuristics[v, u]  # Ensure symmetry

        # Optional: Punish less promising edges (can be risky)
        # for i in range(n):
        #     for j in range(n):
        #         if (i, j) not in [(route[k], route[k+1]) for k in range(len(route)-1)]:
        #             pheromone[i,j] -= punishment * heuristics[i,j]
        pheromone[pheromone < 0.001] = 0.001 # Lower Bounded

    # Simulate a "good" route selection. A more sophisticated approach could incorporate a local search routine
    # and use the resulting route to update the pheromones

    simulated_route = [0]  # Start at depot
    current_node = 0
    unvisited_nodes = set(range(1, n)) # All nodes except depot
    current_load = 0
    while unvisited_nodes:
        # Find the nearest unvisited node
        next_node = None
        min_dist = float('inf')

        possible_next_nodes = []
        for node in unvisited_nodes:
          if demands[node] + current_load <= capacity:
            possible_next_nodes.append(node)

        if not possible_next_nodes:
          #Return to depot and continue
          simulated_route.append(0)
          current_node = 0
          current_load = 0
          continue #From the beginning with depot.

        for node in possible_next_nodes:
            dist = distance_matrix[current_node, node]
            if dist < min_dist:
                min_dist = dist
                next_node = node

        if next_node is not None:
            simulated_route.append(next_node)
            unvisited_nodes.remove(next_node)
            current_load += demands[next_node]
            current_node = next_node
        else:
            break # no next node

    simulated_route.append(0) # Return to depot

    update_pheromone(simulated_route)

    return heuristics
```
