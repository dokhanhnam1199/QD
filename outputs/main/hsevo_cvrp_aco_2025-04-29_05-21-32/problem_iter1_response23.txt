```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP)
    via stochastic solution sampling. This version incorporates:
        1. Distance: Shorter distances are preferred.
        2. Demand:  Edges connecting to nodes with smaller demands are initially favored (less load on vehicles).
        3. Closeness to Depot: Edges connecting nodes further from the depot (node 0) are penalized (encourages depot returns).
        4. Capacity Awareness: Edges potentially leading to violations of vehicle capacity are penalized.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Scale demands to [0, 1]
    scaled_demands = demands / np.max(demands)  #Avoid division by zero error when all demands are zero by returning 0
    #Calculate distance from each node to depot.
    depot_distances = distance_matrix[0, :]


    for i in range(n):
        for j in range(n):
            if i != j:
                #1. Distance based score
                distance_score = 1 / distance_matrix[i, j]

                #2. Demand based score: Penalize larger demands.
                demand_score = 1 - (scaled_demands[i] + scaled_demands[j]) / 2 # Average of demand is subtracted from 1
                # Demand score close to depot should be greater than demand score far from depot
                depot_score_i = 1 / (1 + depot_distances[i])
                depot_score_j = 1 / (1 + depot_distances[j])

                depot_score = (depot_score_i + depot_score_j) /2.0

                heuristic_matrix[i, j] = distance_score * demand_score * depot_score


                # Capacity penalty - Simplistic. Needs improved capacity awareness
                if demands[i] + demands[j] > capacity / 2:  #Penalize paths where a large vehicle fill rate is met on the first leg.
                     heuristic_matrix[i,j] *= 0.5

    return heuristic_matrix
```
