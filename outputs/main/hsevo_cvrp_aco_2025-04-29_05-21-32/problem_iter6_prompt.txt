{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version incorporates demand, distance, and depot proximity considerations with sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    depot_index = 0\n\n    # Heuristic 1: Basic inverse distance\n    heuristics = 1 / (distance_matrix + 1e-9)\n\n    # Heuristic 2: Demand consideration + Depot Starting Edge boost\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0\n                continue\n\n            if i == depot_index and j != depot_index:\n                remaining_capacity = capacity - demands[j]\n                if remaining_capacity >= 0:\n                    heuristics[i, j] += 0.5  # Initial Depot Boost (tuneable)\n                else:\n                    heuristics[i, j] = 0 # Prune unpromising edges emanating from depot\n\n    # Heuristic 3: Depot Proximity\n    depot_distances = distance_matrix[:, depot_index]\n    for i in range(n):\n        for j in range(n):\n            if i != depot_index and j == depot_index:\n                heuristics[i,j] = 0 #remove edges to depot except from depot\n            if i != depot_index and j != depot_index:\n\n                #Adjust heuristic based on distances to depot - promotes returning to depot\n                heuristics[i, j] -=  0.1 * (depot_distances[i] + depot_distances[j]) / (np.mean(depot_distances)+ 1e-9) #Slight penalty for longer path to depot.\n\n                # Further pruning based on combined distance and demand.  Aggressive sparsification.\n                # The greater the distance and demand, the more aggressively prune.\n                combined_metric = distance_matrix[i,j] * demands[j]\n                threshold = np.mean(distance_matrix) * np.mean(demands) * 2 # Adaptive threshold\n\n                if combined_metric > threshold:\n                    heuristics[i,j] = 0 # zero out this edge as it is unpromising\n\n\n    # Heuristic 4: Nearest Neighbor Preference (k-NN)\n    k_nearest_neighbors = 3\n    for i in range(n):\n      neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1] # not include self, start at index 1\n      for nn in neighbors_idx:\n          heuristics[i,nn] += 0.2 # give preference\n\n    # Normalize\n    max_heuristic = np.max(heuristics)\n    if max_heuristic > 0:\n        heuristics = heuristics / max_heuristic\n\n    return heuristics\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's refine \"Current Self-Reflection\" to design better heuristics, avoiding common pitfalls.\n\nHere's a more effective redefinition:\n\n*   **Keywords:** Incremental refinement, component-wise addition, adaptive intensification, simplification, performance evaluation.\n*   **Advice:** Build heuristics iteratively, adding components based on performance impact. Focus on *why* a component improves solutions. Use limited components.\n*   **Avoid:** Premature complexity, over-tuning, black-box approaches, relying on overly specific or intricate formulas. Do not blindly use weights.\n*   **Explanation:** Start with a minimal viable heuristic. Systematically add and evaluate new components, understanding their individual contributions. Keep the design interpretable.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}