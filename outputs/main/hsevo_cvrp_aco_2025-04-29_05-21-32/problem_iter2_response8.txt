```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Heuristic combining distance, demand, angle from depot, and depot proximity."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            dist_heuristic = 1 / (distance_matrix[i, j] + 1e-6)

            demand_penalty_i = demands[i] / capacity if i != 0 else 0
            demand_penalty_j = demands[j] / capacity if j != 0 else 0

            angle_penalty = 1
            if i == 0:
                x_i, y_i = coordinates[i]
                x_j, y_j = coordinates[j]
                dx = x_j - x_i
                dy = y_j - y_i
                angle = np.arctan2(dy, dx)
                angle_penalty = 1 / (np.abs(angle) + 1e-6)

            depot_proximity_i = distance_matrix[0, i]
            depot_proximity_j = distance_matrix[0, j]
            depot_proximity_heuristic = 1 / ((depot_proximity_i + depot_proximity_j) / 2 + 1e-6)

            heuristic_matrix[i, j] = (0.5 * dist_heuristic * (1 - demand_penalty_i) * (1 - demand_penalty_j) * angle_penalty +
                                     0.5 * depot_proximity_heuristic)

    return heuristic_matrix
```
