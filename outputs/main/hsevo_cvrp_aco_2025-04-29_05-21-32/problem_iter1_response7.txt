```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using a combination of distance, demand, and node proximity to depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning the heuristic (adjust as needed)
    distance_weight = 1.0  # Weight for distance
    demand_weight = 0.5    # Weight for demand (penalizes high demand)
    depot_proximity_weight = 0.2  # Weight for proximity to the depot

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Heuristic based on a combination of factors
                distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
                demand_factor = np.exp(-demand_weight * (demands[i] + demands[j]) / capacity)  # Penalize high demand
                depot_proximity_i = np.exp(-depot_proximity_weight * distance_matrix[i, 0] / np.mean(distance_matrix))
                depot_proximity_j = np.exp(-depot_proximity_weight * distance_matrix[j, 0] / np.mean(distance_matrix))
                depot_proximity_factor = (depot_proximity_i + depot_proximity_j) / 2  # average proximity

                heuristic_matrix[i, j] = distance_factor * demand_factor * depot_proximity_factor # Combine

    return heuristic_matrix
```
