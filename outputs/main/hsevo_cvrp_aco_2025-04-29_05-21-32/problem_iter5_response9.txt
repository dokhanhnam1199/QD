```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines inverse distance, demand penalty, depot proximity, and k-NN with sparsification for CVRP.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand consideration (penalize high-demand edges)
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if j != depot_index:  # Don't penalize edges *to* the depot
                demand_penalty = demands[j] / capacity
                heuristics[i, j] *= max(0, 1 - demand_penalty)
                if demands[j] > capacity:
                    heuristics[i, j] = 0

    # Heuristic 3: Depot proximity (encourage connections to nodes close to the depot)
    for i in range(n):
      if i != depot_index:
        depot_distance = distance_matrix[i, depot_index]
        proximity_bonus = max(0, 1 - (depot_distance / np.max(distance_matrix)))
        heuristics[i, :] += 0.25 * proximity_bonus

    # Heuristic 4: Sparsification (remove very unpromising edges)
    mean_heuristic = np.mean(heuristics)
    sparsification_threshold = 0.25 * mean_heuristic
    heuristics[heuristics < sparsification_threshold] = 0

    # Heuristic 5: k-Nearest Neighbors encouragement
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for nn in neighbors_idx:
            heuristics[i, nn] += 0.15

    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
