```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates demand, distance, depot proximity, angle considerations, k-NN intensification,
    and adaptive sparsification with more refined components and weight tuning.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Basic inverse distance (with a slight modification)
    distance_scaling = np.mean(distance_matrix)
    heuristics = distance_scaling / (distance_matrix + 1e-9)

    # Heuristic 2: Demand and Capacity consideration
    demand_penalty_factor = 0.7  # Increased weight for demand penalty
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.7  # Increased depot boost

            elif i != depot_index and j != depot_index:
                demand_ratio = (demands[i] + demands[j]) / capacity
                # Non-linear demand penalty to strongly penalize exceeding capacity
                demand_penalty = demand_penalty_factor * (demand_ratio**2)
                heuristics[i, j] -= demand_penalty

    # Heuristic 3: Depot proximity with adaptive pruning
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)
    depot_proximity_weight = 0.2  # Increased weight

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0  # Remove edges to depot
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= depot_proximity_weight * detour_penalty

                # More aggressive adaptive pruning based on distance and demand
                if distance_matrix[i, j] > 1.1 * distance_scaling and demands[i] + demands[j] > capacity / 2:  # Adjusted threshold
                    heuristics[i, j] = 0


    # Heuristic 4: Angle from Depot (Refined angle heuristic)
    angle_weight = 0.3  # increased weight
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                    # Modulate angle preference based on distance to depot
                    # Nodes closer to depot are more sensitive to the angle
                    distance_factor_i = 1 / (depot_distances[i] / distance_scaling + 1e-9)
                    distance_factor_j = 1 / (depot_distances[j] / distance_scaling + 1e-9)
                    angle_reward = (1 - angle / np.pi) * (distance_factor_i + distance_factor_j) / 2
                    heuristics[i, j] += angle_weight * angle_reward

    # Heuristic 5: k-NN intensification (Adaptive k)
    knn_base = 5
    knn_weight = 0.2 # increased weight

    for i in range(1, n):
        # Adapt k based on node's demand. Larger demand -> smaller k
        knn = max(2, int(knn_base * (1 - demands[i] / capacity))) # Ensure k is at least 2.
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1
        for j in nearest_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight

    # Heuristic 6: Sparsification: zero out small heuristic values (Dynamic Threshold)
    # Dynamic threshold adjusting based on the number of nodes
    threshold_factor = 0.01 + (0.04 * (n / 100))  # Adjust sparsity based on problem size
    threshold = threshold_factor * np.mean(np.abs(heuristics))
    heuristics[np.abs(heuristics) < threshold] = 0

    # Heuristic 7:  Penalize long edges with close-to-capacity load (New Heuristic)
    load_distance_penalty_weight = 0.15  # Tunable weight
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > 0.8 * capacity: # High load
                    penalty = load_distance_penalty_weight * (distance_matrix[i, j] / distance_scaling) * (combined_demand / capacity)
                    heuristics[i, j] -= penalty

    # Normalize (After Sparsification)
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
