```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristics combining distance, demand, and depot proximity.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    alpha = 0.7  # Distance weight
    beta = 0.3  # Demand weight

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
            else:
                distance_component = 1 / distance_matrix[i, j]
                demand_component = 1 / (demands[i] + demands[j] + 1e-6)

                depot_distance = distance_matrix[i, 0] + distance_matrix[j, 0]
                depot_proximity = np.exp(-depot_distance / np.mean(distance_matrix))
                heuristics[i, j] = (
                    alpha * distance_component + beta * demand_component+ (1-alpha-beta)*depot_proximity
                )

    return heuristics
```
