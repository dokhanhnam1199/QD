```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, depot proximity, angle, k-NN, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Inverse distance
    heuristics += 0.4 / (distance_matrix + 1e-9)

    # Demand-aware pruning and depot boost
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0  # Infeasible edge
                else:
                    heuristics[i,j] += 0.2

    # Depot proximity
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2*mean_depot_distance + 1e-9)
                heuristics[i, j] -= 0.1 * detour_penalty
                if distance_matrix[i, j] > 1.5*np.mean(distance_matrix) and demands[i] + demands[j] > capacity/2:
                    heuristics[i,j] = 0

    # Angle from Depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    heuristics[i,j] += 0.15 * (1 - angle / np.pi)

    # k-NN intensification
    k = min(5, n - 1)
    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k+1]

        for neighbor in nearest_neighbors:
            if i != neighbor:
                heuristics[i, neighbor] += 0.05

    # Depot connection preference
    for i in range(1, n):
        heuristics[depot_index, i] += 0.05
        heuristics[i, depot_index] = 0

    # Sparsification
    threshold = 0.005 * np.mean(heuristics)
    heuristics[heuristics < threshold] = 0

    # Normalization
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
