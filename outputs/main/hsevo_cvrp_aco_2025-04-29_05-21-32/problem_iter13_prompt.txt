{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines distance, demand, depot proximity, k-NN, and sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    depot_index = 0\n\n    # 1. Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    heuristics += inverse_distance\n\n    # 2. Demand consideration and depot boost/prune\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0\n                continue\n            if i == depot_index and j != depot_index:\n                if demands[j] > capacity:\n                    heuristics[i, j] = 0  # Prune infeasible edges from depot\n                else:\n                    heuristics[i, j] += 0.7  # depot boost\n            elif i != depot_index and j == depot_index:\n                heuristics[i, j] += 0.3\n\n    # 3. Depot proximity consideration.\n    depot_distances = distance_matrix[:, depot_index]\n    mean_depot_distance = np.mean(depot_distances) + 1e-9\n    for i in range(n):\n        if i != depot_index:\n            heuristics[i, depot_index] += 0.2 * (1 / (depot_distances[i] + 1e-9))\n            \n    # 4. K-Nearest Neighbor Bonus\n    k_nearest_neighbors = 4\n    for i in range(n):\n        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]\n        for neighbor in neighbors_idx:\n            heuristics[i, neighbor] += 0.3\n            \n    # 5. Adaptive Sparsification based on mean and demand\n    mean_heuristic = np.mean(heuristics)\n    for i in range(n):\n        for j in range(n):\n            combined_metric = distance_matrix[i, j] * demands[j]\n            threshold = np.mean(distance_matrix) * np.mean(demands) * 1.5\n            if heuristics[i, j] < mean_heuristic or combined_metric > threshold:\n                heuristics[i, j] = 0\n\n    # 6. Normalization\n    max_heuristic = np.max(heuristics)\n    if max_heuristic > 0:\n        heuristics = heuristics / max_heuristic\n\n    return heuristics\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}