```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (as in v1, but enhanced)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Heuristic 2: Capacity considerations: Penalize edges that connect nodes with high combined demand
    demand_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:  # Avoid depot-depot edge and consider only customer-customer or customer-depot
                demand_sum = demands[i] + demands[j]
                if demand_sum > capacity / 2: # Adjusting threshold for capacity.
                    demand_penalty[i, j] = (demand_sum / capacity)**2  # Square it to make it a strong penalty
            else:
                demand_penalty[i, j] = 0.0

    # Heuristic 3: Angle Penalty: Penalize sharp turns at a node. Calculate angles with respect to the depot.
    angle_penalty = np.zeros_like(distance_matrix, dtype=float)
    depot_x, depot_y = coordinates[0]
    for i in range(1, n): # Iterate through customers, not the depot
        x_i, y_i = coordinates[i]
        angle_i = np.arctan2(y_i - depot_y, x_i - depot_x)
        for j in range(1, n):
            if i != j:
                x_j, y_j = coordinates[j]
                angle_j = np.arctan2(y_j - depot_y, x_j - depot_x)
                angle_diff = np.abs(angle_i - angle_j)
                angle_diff = np.min([angle_diff, 2 * np.pi - angle_diff])  # Ensure we take the smaller angle
                angle_penalty[i, j] = (angle_diff / np.pi)**2 # Square it to scale it more, also avoids negative penalty


    # Heuristic 4: Depot Proximity: Edges closer to the depot are initially favored
    depot_proximity = np.zeros_like(distance_matrix, dtype=float)

    for i in range(1, n): # Do not include depot-depot in the initial boost
        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-9)
        depot_proximity[i, 0] = 1 / (distance_matrix[i, 0] + 1e-9)


    # Combine heuristics with weights
    heuristic_matrix = (
        0.5 * inverse_distance
        - 0.2 * demand_penalty
        - 0.1 * angle_penalty
        + 0.2 * depot_proximity # favour near depot
    )
    
    # Normalize the heuristic matrix to be between 0 and 1
    min_val = np.min(heuristic_matrix)
    max_val = np.max(heuristic_matrix)
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val + 1e-9) # add a constant for edge case where min_val == max_val

    return heuristic_matrix
```
