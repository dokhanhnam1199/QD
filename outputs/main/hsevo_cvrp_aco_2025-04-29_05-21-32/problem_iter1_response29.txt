```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A more sophisticated heuristics function for CVRP.  It considers distance,
    node demands relative to capacity, and proximity to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior indicators (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Normalize demands by capacity
    normalized_demands = demands / capacity

    # Calculate depot distances
    depot_distances = distance_matrix[0, :]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Base heuristic: inverse distance
                heuristic = 1 / distance_matrix[i, j]

                # Adjust for demand: penalize edges that would lead to high demand in a route
                # Higher demand means lower probability of being added to the route
                heuristic *= (1 - normalized_demands[i]) * (1 - normalized_demands[j])


                # Adjust for distance from the depot. Prefer connecting to nodes that are further
                # away from the depot if i=0, and favor connections from distant nodes.
                # It should reduce the need to return to the depot when vehicle capacity allows.
                heuristic *= (1 + 0.5* (depot_distances[i] + depot_distances[j])/np.max(depot_distances))

                # Prevent trips from depot to depot directly, by penalizing if i and j are depot
                if i == 0 and j==0:
                   heuristic = 0

                heuristic_matrix[i, j] = heuristic

    return heuristic_matrix
```
