{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP using a combination of distance, demand, and angular considerations.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Edge prior indicators (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Parameters to tune\n    alpha = 1.0  # Distance weight\n    beta = 0.5  # Demand weight\n    gamma = 0.2  # Angular weight (relative to depot)\n\n    # Calculate angles relative to the depot (node 0)\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0  # No self-loops\n            else:\n                # Distance component: inversely proportional to distance\n                distance_component = 1 / distance_matrix[i, j]\n\n                # Demand component: penalize edges connecting high-demand nodes (encourage balanced routes)\n                demand_component = 1 / (demands[i] + demands[j] + 1e-6) #Adding a small value to avoid division by zero\n\n                # Angular component: Favor edges that maintain angular progression from the depot.\n                # Encourage exploration and avoid immediately returning to depot unless necessary.\n                angle_diff = np.abs(angles[i] - angles[j])\n                angular_component = 1 / (angle_diff + 0.1)  # Penalize large angle changes (smooth route transitions)\n                if i==0:\n                  angular_component=1 # always prioritize connection to depot\n\n                # Combine components with weights\n                heuristics[i, j] = (\n                    alpha * distance_component\n                    + beta * demand_component\n                    + gamma * angular_component\n                )\n\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates several factors to estimate the desirability of including\n    an edge in a route, going beyond a simple inverse distance.  It considers:\n\n    1. Distance: Shorter distances are preferred (inverse relationship).\n    2. Demand Compatibility: Edges connecting nodes that, when combined with the\n       current route's load, are less likely to violate capacity constraints are\n       preferred.\n    3. Angle: Edges forming sharper turns are penalized, as they often lead to less\n       efficient routes.  This is done by computing the angle between potential edges\n       and penalizing sharp turns.\n    4. Closeness to Depot: Edges closer to the depot are generally favored, especially\n       when near capacity, to facilitate returns to the depot.\n\n    Args:\n        distance_matrix: Distance matrix (n x n).\n        coordinates: Node coordinates (n x 2).\n        demands: Node demands (n).\n        capacity: Vehicle capacity.\n\n    Returns:\n        Heuristic matrix (n x n) indicating the desirability of each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Add a small constant to the distance matrix to avoid division by zero\n    distance_matrix = distance_matrix + 1e-9  # Avoid division by zero\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # 1. Distance-based heuristic (inverse distance)\n            distance_heuristic = 1 / distance_matrix[i, j]\n\n            # 2. Demand-based heuristic (penalize edges likely to cause capacity violations)\n            demand_penalty = (demands[i] + demands[j]) / (2 * capacity) # Normalize to a penalty factor around 1\n            demand_heuristic = max(0, 1 - demand_penalty) # Scales to between 0-1\n            \n\n            # 3. Angle-based heuristic (penalize sharp turns)\n            #   - Approximate by considering depot as the previous node for now.\n            #   - Can be improved by keeping track of the actual route as it's built\n            if i == 0:\n                angle_heuristic = 1.0 #No turn\n            else:\n                # vector from depot to node i and node i to node j\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                # Calculate the cosine of the angle between the vectors\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n\n                if norm1 > 0 and norm2 > 0:\n                    cos_angle = np.dot(vector1, vector2) / (norm1 * norm2)\n                    # Clip cosine to [-1, 1] to avoid potential errors\n                    cos_angle = np.clip(cos_angle, -1.0, 1.0)\n                    angle = np.arccos(cos_angle)  # Angle in radians\n                    angle_penalty = angle / np.pi  # Normalize to a penalty factor between 0 and 1. Sharp turn is 1, straight line is 0\n                    angle_heuristic = max(0, 1-angle_penalty)\n                else:\n                    angle_heuristic = 0.5 # Default penalty\n\n\n\n            # 4. Depot Proximity\n            depot_distance = distance_matrix[i,0] + distance_matrix[j,0]\n            depot_proximity = np.exp(-depot_distance/np.mean(distance_matrix)) # Bias shorter total distance from i & j to depot\n\n\n\n            # Combine the heuristics (weighted sum) - EXPERIMENTAL\n            heuristic_matrix[i, j] = (\n                0.4 * distance_heuristic +\n                0.3 * demand_heuristic +\n                0.2 * angle_heuristic +\n                0.1 * depot_proximity\n            )\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see that the 1st heuristic focuses on simplicity, using inverse distance modified by demand and depot proximity, while the 2nd incorporates the Clarke-Wright savings algorithm and coordinate distances. The 2nd also normalizes savings. Overall, the 1st heuristics seems to be more straightforward.\n\nComparing (2nd best) vs (second worst), we see heuristic 2nd includes savings calculations from Clarke-Wright and also coordinate distance. The 19th makes use of angle and capacity slack. These factors might be too specific or not generally effective, potentially overfitting to certain problem instances. Heuristic 2nd normalizes savings by dividing by `np.max(savings_matrix)`. This appears to be important.\n\nComparing (1st) vs (3rd), we see that they are different.\n\nComparing (3rd) vs (4th), the 3rd is identical to the 2nd, but the 4th uses weights for distance, demand, and depot proximity, also using exponential functions for demand and proximity. The use of tunable weights may not be enough.\n\nComparing (second worst) vs (worst), 19th vs 20th is identical. Perhaps it wasn't possible to improve on the bad designs.\n\nOverall: The better heuristics generally balance simplicity with relevant factors (distance, demand, depot proximity) without over-engineering. Normalization is important. Angular considerations, while intuitive, may not always improve performance. Overly complex combinations of factors can also hinder performance.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I understand. Let's redefine \"Current Self-Reflection\" for better heuristic design, focusing on actionable steps and avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Iterative refinement, factor incorporation, normalization, simplicity, adaptability.\n\n*   **Advice:** Begin with a clear, basic heuristic. Systematically add factors (demand, depot proximity, etc.) one at a time, evaluating the impact of each addition on performance.\n\n*   **Avoid:** Over-engineered formulas, premature optimization, overly specific parameters, complex interactions without empirical justification.\n\n*   **Explanation:** Emphasize incremental improvements and data-driven decisions. Simple, adaptable heuristics are easier to understand, debug, and modify, ultimately leading to more robust solutions.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}