```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Combines inverse distance, demand penalty, and depot proximity."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    inverse_distance = 1 / (distance_matrix + 1e-9)
    demand_penalty = np.ones_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    demand_penalty[i, j] = 0.1

    depot_proximity = np.zeros_like(distance_matrix)
    for i in range(1, n):
        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-9)
        depot_proximity[i, 0] = 1 / (distance_matrix[i, 0] + 1e-9)

    heuristics = inverse_distance * demand_penalty + depot_proximity
    heuristics = heuristics / np.max(heuristics)

    return heuristics
```
