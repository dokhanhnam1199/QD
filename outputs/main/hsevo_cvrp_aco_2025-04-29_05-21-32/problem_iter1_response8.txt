```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for CVRP based on a combination of distance, demand, and depot proximity.

    Args:
        distance_matrix (np.ndarray): n x n distance matrix between nodes.
        coordinates (np.ndarray): n x 2 array of node coordinates.
        demands (np.ndarray): n array of customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: n x n array of edge prior indicators.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters to control the influence of different factors
    distance_weight = 1.0
    demand_weight = 0.5
    depot_proximity_weight = 0.8

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance component: Inverse of distance
                distance_component = distance_weight / distance_matrix[i, j]

                # Demand component: Favor edges connecting nodes with smaller demands
                demand_component = demand_weight / (demands[i] + demands[j] + 1e-6) #Adding small constant to avoid division by zero.

                # Depot proximity component: Favor edges closer to the depot (node 0).
                # Calculates the average distance of nodes i and j to the depot.
                depot_proximity = (distance_matrix[i, 0] + distance_matrix[j, 0]) / 2
                depot_proximity_component = depot_proximity_weight / (depot_proximity + 1e-6) # Adding small constant to avoid division by zero.


                heuristic_matrix[i, j] = distance_component + demand_component + depot_proximity_component

    return heuristic_matrix
```
