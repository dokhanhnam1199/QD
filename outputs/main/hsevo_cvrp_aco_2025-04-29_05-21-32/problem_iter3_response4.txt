```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improved heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)
    heuristics += inverse_distance

    # Heuristic 2: Demand consideration
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            #Adjust for Depot Location and the assumption vehicles have just left depot and moving outward
            if i == depot_index and j != depot_index:
                remaining_capacity_after_visit = capacity - demands[j]
                if remaining_capacity_after_visit < 0:
                    demand_factor[i, j] = 0
                else:
                    demand_factor[i, j] = 0.7  # Boost for paths emanating from the depot

            else:
                demand_factor[i, j] = 1 / (demands[j] + 1e-9) #Nodes with smaller demand become more attractive

    heuristics += demand_factor

    # Heuristic 3: Depot proximity - encourage connections to/from the depot

    depot_proximity_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i == depot_index or j == depot_index:
                depot_proximity_factor[i,j] = 0.6 #Boost edges connected to the depot
    heuristics += depot_proximity_factor

    #Heuristic 4: k-Nearest Neighbors
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1] # not include self, start at index 1

        for nn in neighbors_idx:
            heuristics[i,nn] = heuristics[i,nn] + 0.3  #Give slight preference (tune-able: 0.3)


    # Sparsification: Remove edges with very low heuristic values

    threshold = np.quantile(heuristics[heuristics > 0], 0.2)  # Keep top 80% edges, remove very bad ones
    heuristics[heuristics < threshold] = 0


    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
