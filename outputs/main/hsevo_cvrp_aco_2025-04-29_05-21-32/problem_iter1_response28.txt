```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This function calculates prior indicators of how promising it is to include each edge in a solution.
    It considers distance, demand, and proximity to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of edge inclusion (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Parameters for tuning the heuristics
    alpha = 1.0   # Weight for distance
    beta = 0.5    # Weight for demand
    gamma = 0.2   # Weight for depot proximity
    delta = 0.1 # Weight for demand distance similarity

    # Calculate depot distances
    depot_distances = distance_matrix[0, :]

    # Normalize demands
    normalized_demands = demands / capacity

    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops
                # Distance component: encourage shorter edges
                distance_component = alpha / distance_matrix[i, j]

                # Demand component: penalize edges connecting nodes that would exceed capacity easily
                demand_component = beta * (1 - (normalized_demands[i] + normalized_demands[j]))
                demand_component = max(0, demand_component)  # Ensure non-negativity

                # Depot proximity component: encourage edges closer to the depot
                depot_proximity_component = gamma * (1 - (depot_distances[i] + depot_distances[j]) / (2 * np.max(depot_distances)))

                # Demand distance similarity component: prioritize edges connecting similar demands
                demand_distance = abs(demands[i] - demands[j])
                demand_distance_component = delta * (1 / (demand_distance + 1e-6))


                # Combine the components
                heuristics[i, j] = distance_component + demand_component + depot_proximity_component + demand_distance_component
            else:
                heuristics[i, j] = 0  # No self-loops

    return heuristics
```
