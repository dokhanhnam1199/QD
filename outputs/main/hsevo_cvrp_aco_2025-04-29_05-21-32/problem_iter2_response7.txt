```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines inverse distance with demand and depot proximity for CVRP heuristic.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Base: Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Demand penalization
    max_demand = np.max(demands)
    normalized_demands = demands / max_demand if max_demand > 0 else np.zeros_like(demands)
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if i!= 0 and j != 0:
                demand_penalty = normalized_demands[i] + normalized_demands[j]
                heuristics[i, j] /= (1 + demand_penalty)


    #Depot proximity reward/penalty
    for i in range(n):
        for j in range(n):

            depot_distance_penalty = 0.0
            depot_distance_penalty = (distance_matrix[0, i] + distance_matrix[0, j]) / (2 * np.mean(distance_matrix))

            heuristics[i, j] /= (1 + depot_distance_penalty)
    # Normalize
    heuristics = heuristics / np.max(heuristics)

    return heuristics
```
