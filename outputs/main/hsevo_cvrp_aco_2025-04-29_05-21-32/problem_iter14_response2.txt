```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, depot proximity, angle, k-NN, adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Demand and Depot Connection
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.4
            elif i != depot_index and j == depot_index:
                heuristics[i,j] = 0
            else:
                heuristics[i,j] += 1/(distance_matrix[i,j] * demands[j] + 1e-9)


    # Angle from Depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    heuristics[i, j] += 0.15 * (1 - angle / np.pi)

    # Depot proximity with adaptive pruning and k-NN
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)
    k = 5

    for i in range(n):
        for j in range(n):
            if i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= 0.1 * detour_penalty

                if distance_matrix[i, j] > np.mean(distance_matrix) and demands[i] + demands[j] > capacity / 3:
                    heuristics[i, j] = 0

                neighbors = np.argsort(distance_matrix[i, :])[1:k + 1]
                if j in neighbors:
                    heuristics[i, j] += 0.2

    # Sparsification: zero out small heuristic values and edges violating capacity for single vehicle routes.
    threshold = 0.01 * np.mean(heuristics)  # Adaptive threshold
    heuristics[heuristics < threshold] = 0
    for i in range(1, n):  # Start from 1 to avoid depot self-loop
        for j in range(1, n):
            if i != depot_index and j != depot_index and demands[i] + demands[j] > capacity and distance_matrix[i, depot_index] + distance_matrix[depot_index, j] < 1.5 * np.mean(distance_matrix):
                heuristics[i, j] = 0  # Zero edges exceeding the vehicle capacity. Added proximity check to remove edges where going to depot in between is much shorter
    # Normalization
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
