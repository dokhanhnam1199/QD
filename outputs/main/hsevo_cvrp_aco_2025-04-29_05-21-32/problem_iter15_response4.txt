```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates demand, distance, depot proximity, angle considerations, k-NN intensification,
    and adaptive sparsification with more refined components and weight tuning. It also adds a route length
    estimation penalty and refines the k-NN selection and sparsification.  Includes dynamic weighting and
    more aggressive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Heuristic 1: Basic inverse distance (with a slight modification)
    distance_scaling = np.mean(distance_matrix)
    heuristics = distance_scaling / (distance_matrix + 1e-9)

    # Heuristic 2: Demand and Capacity consideration
    demand_penalty_factor = 0.7  # Tunable weight - Increased importance of demand
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0
                else:
                    heuristics[i, j] += 0.8  # Depot boost (increased)
            elif i != depot_index and j != depot_index:
                demand_ratio = (demands[i] + demands[j]) / capacity
                demand_penalty = demand_penalty_factor * demand_ratio**1.7  # Even Higher power to amplify penalty
                heuristics[i, j] -= demand_penalty

    # Heuristic 3: Depot proximity with adaptive pruning
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)
    depot_proximity_weight = 0.3  # Tunable weight - Increased importance

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0  # Remove edges to depot (except from depot)
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= depot_proximity_weight * detour_penalty

                # More aggressive adaptive pruning
                if distance_matrix[i, j] > 1.2 * distance_scaling and demands[i] + demands[j] > capacity / 2.5:
                    heuristics[i, j] = 0

    # Heuristic 4: Angle from Depot (less computational intensive angle heuristic)
    angle_weight = 0.4  # Tunable weight - Increased importance
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                    heuristics[i, j] += angle_weight * (1 - angle / np.pi)**2.5  # Favor smaller angles even more

    # Heuristic 5: k-NN intensification (Focus on local search) - Refined k-NN selection
    knn = min(6, n - 1)  # Adjusted k-NN, ensure knn < n-1
    knn_weight = 0.3  # Tunable weight - Increased importance

    for i in range(1, n):
        # Find k-nearest neighbors based on distance, excluding depot.
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1  # Correctly offset indices

        # Demand aware k-NN selection.
        demand_neighbors = []
        for neighbor in nearest_neighbors:
            if demands[i] + demands[neighbor] <= capacity:
                demand_neighbors.append(neighbor)

        # No neighbors satisfying demand constraint.
        if len(demand_neighbors) == 0:
            for j in nearest_neighbors:
                heuristics[i, j] += knn_weight/3.0 # even less for no demand satisfaction
                heuristics[j, i] += knn_weight/3.0
            continue # Move to the next i

        for j in demand_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight

    # Heuristic 6: Route length estimation and penalty
    route_length_weight = 0.2 # Tunable weight for route length

    for i in range(1,n):
        for j in range(1,n):
            if i != j:
                #Estimate the route length if edge (i,j) included. Simplified estimation.
                estimated_route_length = distance_matrix[depot_index, i] + distance_matrix[i,j] + distance_matrix[j, depot_index]
                heuristics[i,j] -= route_length_weight * estimated_route_length / (2.5 * distance_scaling + 1e-9)

    # Heuristic 7: Adaptive Weighting & Sparsification
    # Adaptive sparsification - dynamic threshold based on heuristic values
    heuristic_mean = np.mean(heuristics)
    heuristic_std = np.std(heuristics)
    sparsification_threshold = heuristic_mean - 0.7 * heuristic_std # Tunable parameter

    # Adaptive adjustment to angle_weight, depot_proximity_weight, knn_weight.
    if heuristic_mean > 0.6: # Dynamically adjust based on overall heuristic "goodness"
        angle_weight *= 1.1
        depot_proximity_weight *= 0.9
        knn_weight *= 1.05

    # Apply the sparsification threshold
    heuristics[heuristics < sparsification_threshold] = 0

    # Normalize (After Sparsification)
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
