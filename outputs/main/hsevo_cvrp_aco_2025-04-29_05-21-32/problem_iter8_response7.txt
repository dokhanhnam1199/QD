```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines inverse distance, demand-aware pruning, depot proximity, and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Demand-aware pruning
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if i == depot_index and j != depot_index:
                if capacity - demands[j] < 0:
                    heuristics[i, j] = 0  # Infeasible edge

    # Depot proximity
    depot_distances = distance_matrix[:, depot_index]
    for i in range(n):
        if i != depot_index:
            heuristics[i, depot_index] += 0.1 * (1 / (depot_distances[i] + 1e-9))

    # Sparsification
    threshold = np.mean(heuristics) * 0.2
    heuristics[heuristics < threshold] = 0

    # Normalization
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
