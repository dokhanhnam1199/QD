```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improved heuristic for CVRP: Combines inverse distance with normalized demand and depot proximity.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Inverse distance
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # Demand and depot proximity
    depot_distances = distance_matrix[0, :]
    demand_proximity_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_proximity_heuristic[i, j] = (capacity / (demands[i] + demands[j] + 1e-6)) * (1/(depot_distances[i]+ depot_distances[j] +1e-6))

    # Combine heuristics
    heuristic_matrix = 0.6 * distance_heuristic + 0.4 * demand_proximity_heuristic


    # Boost edges connected to the depot
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.2
        heuristic_matrix[i, 0] *= 1.2

    return heuristic_matrix
```
