```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP based on distance, demand, and node proximity to the depot.

    This heuristic considers the following factors:
    1. Distance between nodes: Shorter distances are preferred.
    2. Demand of the target node:  Penalizes edges leading to high-demand nodes.
    3. Proximity to the depot: Encourages routes to start and end near the depot,
       and penalizes routes going far away from the depot without returning.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Node coordinates (n x 2).
        demands (np.ndarray): Node demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior indicators (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Depot coordinates
    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Avoid self-loops
                continue

            distance = distance_matrix[i, j]
            demand = demands[j]

            # Distance factor: inversely proportional to distance
            distance_factor = 1 / (distance + 1e-6)  # Avoid division by zero

            # Demand factor: penalize high-demand nodes
            demand_factor = 1 / (demand / capacity + 1e-6) if demand > 0 else 1.0 #avoid divide by zero, demand is 0 at depot.

            # Proximity to depot factor: encourage starting/ending near the depot
            # Euclidean distance to the depot
            dist_i_to_depot = np.sqrt((coordinates[i, 0] - depot_x)**2 + (coordinates[i, 1] - depot_y)**2)
            dist_j_to_depot = np.sqrt((coordinates[j, 0] - depot_x)**2 + (coordinates[j, 1] - depot_y)**2)
            
            # Penalize going far without returning - gives a very small score, i.e., highly discouraged.
            depot_factor = 1 / (dist_i_to_depot + dist_j_to_depot + 1e-6) #avoid divide by zero

            # Combine the factors (weighted combination)
            heuristic_matrix[i, j] = (0.6 * distance_factor + 0.3 * demand_factor + 0.1 * depot_factor)
            # Small adjustment to favor edges connected to depot
            if i == 0 or j == 0:
                heuristic_matrix[i, j] *= 1.2

    return heuristic_matrix
```
