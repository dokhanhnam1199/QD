```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates demand, distance, depot proximity, angle considerations, k-NN intensification,
    and adaptive sparsification with more refined components and weight tuning. It also adds a route length
    estimation penalty and refines the k-NN selection and sparsification. This v2 emphasizes constraint-aware adaptations.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # 1. Basic inverse distance (with a scaling factor)
    distance_scaling = np.mean(distance_matrix)
    heuristics = distance_scaling / (distance_matrix + 1e-9)

    # 2. Demand and Capacity Consideration (Aggressive pruning)
    demand_penalty_factor = 0.7  # Tunable weight (Increased)
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            if i == depot_index and j != depot_index:
                if demands[j] > capacity:
                    heuristics[i, j] = 0  # Hard constraint
                else:
                    heuristics[i, j] += 0.8  # Depot boost (Increased)

            elif i != depot_index and j != depot_index:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    heuristics[i, j] = 0  # Hard constraint: prune if combined demand exceeds capacity

                demand_ratio = combined_demand / capacity
                demand_penalty = demand_penalty_factor * demand_ratio**2  # Increased penalty power
                heuristics[i, j] -= demand_penalty

    # 3. Depot Proximity and Detour Penalty (Adaptive)
    depot_distances = distance_matrix[:, depot_index]
    mean_depot_distance = np.mean(depot_distances)
    depot_proximity_weight = 0.3  # Tunable weight (Increased)

    for i in range(n):
        for j in range(n):
            if i != depot_index and j == depot_index:
                heuristics[i, j] = 0  # No return edges except to the depot
            elif i != depot_index and j != depot_index:
                detour_penalty = (depot_distances[i] + depot_distances[j]) / (2 * mean_depot_distance + 1e-9)
                heuristics[i, j] -= depot_proximity_weight * detour_penalty

                # Adaptive Pruning: stricter pruning based on distance and demand
                if distance_matrix[i, j] > 1.2 * distance_scaling and demands[i] + demands[j] > capacity / 3:
                    heuristics[i, j] = 0

    # 4. Angle from Depot (Refined Angle Calculation)
    angle_weight = 0.4  # Tunable weight (Increased)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[depot_index]
                vector_j = coordinates[j] - coordinates[depot_index]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                    # Emphasize smaller angles more strongly
                    heuristics[i, j] += angle_weight * (1 - angle / np.pi)**3

    # 5. k-NN Intensification (Demand-Aware and Adaptive k)
    knn_base = 5 # Base number of neighbours
    knn = min(knn_base, n - 1)  # Adaptive k based on problem size
    knn_weight = 0.3  # Tunable weight (Increased)

    for i in range(1, n):
        # Find k-nearest neighbors, excluding depot
        distances_from_i = distance_matrix[i, 1:]
        nearest_neighbors = np.argsort(distances_from_i)[:knn] + 1  # Offset indices

        # Demand aware k-NN selection
        demand_neighbors = []
        for neighbor in nearest_neighbors:
            if demands[i] + demands[neighbor] <= capacity:
                demand_neighbors.append(neighbor)

        if len(demand_neighbors) == 0:
             # No neighbors satisfying demand constraint. Relax, and consider any neighbor
            for j in nearest_neighbors:
                heuristics[i, j] += knn_weight/3.0
                heuristics[j, i] += knn_weight/3.0
            continue

        for j in demand_neighbors:
            heuristics[i, j] += knn_weight
            heuristics[j, i] += knn_weight

    # 6. Route Length Estimation and Penalty (More accurate Estimation)
    route_length_weight = 0.2  # Tunable weight for route length
    for i in range(1,n):
        for j in range(1,n):
            if i != j:
                #Estimate route length considering possible intermediate depot visits
                estimated_route_length = min(distance_matrix[depot_index, i] + distance_matrix[i,j] + distance_matrix[j, depot_index], \
                                            distance_matrix[depot_index,i] + distance_matrix[i, depot_index] + distance_matrix[depot_index, j] + distance_matrix[j, depot_index])
                heuristics[i,j] -= route_length_weight * estimated_route_length / (3 * distance_scaling + 1e-9)

    # 7. Sparsification (Adaptive and Dynamic Threshold)
    sparsification_factor = 0.05  # Tunable parameter - Increased factor
    threshold = sparsification_factor * np.std(heuristics[heuristics > 0])  # Only consider positive values to set the threshold
    heuristics[heuristics < threshold] = 0

    # Normalize (After Sparsification)
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
