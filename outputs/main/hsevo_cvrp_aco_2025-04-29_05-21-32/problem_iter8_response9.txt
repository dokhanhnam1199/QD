```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines inverse distance, demand, depot proximity, k-NN, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    depot_index = 0

    # Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Demand consideration and depot boost
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue
            if i == depot_index and j != depot_index:
                if capacity - demands[j] < 0:
                    heuristics[i, j] = 0  # Prune infeasible edges
                else:
                    heuristics[i, j] += 0.5  # depot boost
            elif i != depot_index and j == depot_index:
                heuristics[i, j] += 0.1

    # Depot proximity boost
    depot_distances = distance_matrix[:, depot_index]
    for i in range(n):
        if i != depot_index:
            heuristics[i, depot_index] += 0.2 * (1 / (depot_distances[i] + 1e-9))

    # K-Nearest Neighbor Bonus
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for neighbor in neighbors_idx:
            heuristics[i, neighbor] += 0.3

    # Adaptive Sparsification based on mean and demand
    mean_heuristic = np.mean(heuristics)
    for i in range(n):
        for j in range(n):
            combined_metric = distance_matrix[i, j] * (demands[i] + demands[j] + 1e-9)
            if heuristics[i, j] < mean_heuristic or combined_metric > np.mean(distance_matrix) * np.mean(demands) * 1.5:
                heuristics[i, j] = 0

    # Normalization
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
