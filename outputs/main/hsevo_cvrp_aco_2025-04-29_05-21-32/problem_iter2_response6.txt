```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic for CVRP: Combines distance, demand, and proximity.
    Uses inverse distance, demand penalty, and proximity bonus.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Distance heuristic
    distance_heuristic = 1 / (distance_matrix + np.eye(n) * 1e-6)

    # Demand penalty
    demand_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_penalty[i, j] = (demands[i] + demands[j]) / (2*capacity) # Normalized combined demand.

    # Proximity factor
    proximity_factor = np.zeros_like(distance_matrix)
    center = np.mean(coordinates, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                dist_to_center_i = np.linalg.norm(coordinates[i] - center)
                dist_to_center_j = np.linalg.norm(coordinates[j] - center)
                proximity = 1 / (dist_to_center_i + dist_to_center_j + 1e-6)
                proximity_factor[i, j] = proximity
                if i == 0 or j == 0:
                    proximity_factor[i, j] *= (1 - (demands[i] + demands[j]) / (2*capacity))

    # Combine factors
    heuristic_matrix = distance_heuristic * (1 - 0.5 * demand_penalty) + 0.25 * proximity_factor

    return heuristic_matrix
```
