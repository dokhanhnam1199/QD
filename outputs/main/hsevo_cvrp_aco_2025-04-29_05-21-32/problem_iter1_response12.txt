```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Heuristic 1: Inverse distance, as closer nodes are generally preferred.
    heuristics = 1 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Heuristic 2: Demand considerations.  Penalize edges that would likely lead to exceeding capacity early on.
    #   - Consider the potential load of each edge (demand of the destination node).
    #   - Adjust the heuristic value based on the remaining capacity after starting from the depot and visiting that node.

    depot_index = 0
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # No self-loops
                continue

            #Adjust for Depot Location and the assumption vehicles have just left depot and moving outward
            if i == depot_index and j != depot_index:
                remaining_capacity_after_visit = capacity - demands[j]
                if remaining_capacity_after_visit < 0:
                    heuristics[i, j] = 0  #impossible starting path
                else:
                     heuristics[i, j] += 0.5 #Give boost to paths emanating from Depot (0.5 is tune-able value)

            # Penalize edges if going back to the depot would be beneficial
            # This is a rough penalty and could lead to early convergence.
            # This part is tricky. Penalizing every edge back to the depot might be harmful

            # Heuristic 3: Proximity to Depot
            depot_distances = distance_matrix[:, depot_index]
            # Encourage to connect each node to closest neighbors

            k_nearest_neighbors = 3
            neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1] # not include self, start at index 1

            for nn in neighbors_idx:
              heuristics[i,nn] = heuristics[i,nn] + 0.2  #Give slight preference (tune-able: 0.2)



    # Normalize the heuristics to be between 0 and 1 (optional but often helpful)
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
