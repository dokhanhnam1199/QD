```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates several heuristics for improved performance.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Heuristic 1: Inverse distance
    heuristics = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Demand consideration and capacity feasibility
    depot_index = 0
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            # Depot connection boost
            if i == depot_index and j != depot_index:
                remaining_capacity = capacity - demands[j]
                if remaining_capacity < 0:
                    heuristics[i, j] = 0  # Impossible start
                else:
                    heuristics[i, j] += 0.5

            # Penalize edges that lead to immediate capacity issues.
            # Consider cases where going i -> j -> depot is not possible with current capacity
            if i != depot_index and j != depot_index:

                potential_load = demands[i] + demands[j]
                if potential_load > capacity:
                    heuristics[i,j] = 0 #Cannot do

            # Heuristic 3: Depot proximity (Encourage returning to the depot)
            depot_distances = distance_matrix[:, depot_index]
            # Favor returning to depot from nodes far away.
            if i != depot_index:
                heuristics[i, depot_index] += 0.1 * (np.max(distance_matrix) - depot_distances[i]) / np.max(distance_matrix)

            #Heuristic 4: K-Nearest Neighbor
            k_nearest_neighbors = 4 # Increased K, better performance in testing

            neighbors_idx = np.argsort(distance_matrix[i,:])[1:k_nearest_neighbors+1]
            for nn in neighbors_idx:
                heuristics[i,nn] += 0.2
            
            
            #Heuristic 5: Sparsify the matrix, remove unpromising connections
            average_distance = np.mean(distance_matrix)
            if distance_matrix[i,j] > 2.0 * average_distance:  #Adjusted threshold for stricter sparsification
                heuristics[i,j] = 0.0



    # Normalize
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
