```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Heuristic combining distance, demand, depot proximity, k-NN, sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Demand consideration, boost edges emanating from depot
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            if i == 0:  # Depot departure boost with remaining capacity
                remaining_capacity = capacity - demands[j]
                if remaining_capacity > 0:
                    heuristic_matrix[i, j] += 0.7
                else:
                    heuristic_matrix[i, j] = 0  #Invalid
            else:
                heuristic_matrix[i, j] /= (demands[j] + 1e-9)


    # Depot proximity boost
    for i in range(n):
        for j in range(n):
            if i == 0 or j == 0:
                heuristic_matrix[i, j] += 0.6

    # k-Nearest Neighbors
    k_nearest_neighbors = 4
    for i in range(n):
        neighbors_idx = np.argsort(distance_matrix[i, :])[1:k_nearest_neighbors + 1]
        for nn in neighbors_idx:
            heuristic_matrix[i, nn] += 0.3

    # Sparsification
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalization
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
