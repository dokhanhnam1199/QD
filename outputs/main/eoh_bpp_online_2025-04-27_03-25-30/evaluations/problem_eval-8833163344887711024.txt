def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering both how well the item fills the bin and the relative "emptiness" of the bin, aiming for a balanced fill level.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / 100.0  # Assuming bin capacity is 100
            emptiness_penalty = (cap / 100.0)  # Relative emptiness of the bin
            priority_score = fill_ratio - emptiness_penalty
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
