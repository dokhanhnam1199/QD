def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on the ratio of item size to remaining capacity, adjusted by the number of items already in the bin, favoring bins where the item fills a significant portion of the remaining space while considering bin utilization.}"""
    priority = []
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            fill_ratio = item / cap
            num_items = 10 - (cap // 10)  # Estimate number of items in bin (assuming each item takes roughly 10 units)
            priority_score = fill_ratio * (1 / (num_items + 1))
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
