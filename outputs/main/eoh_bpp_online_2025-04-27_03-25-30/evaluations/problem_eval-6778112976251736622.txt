def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on how close the item's size is to a fraction of the bin's remaining capacity, adding a bonus if packing the item results in high bin utilization.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the "fit ratio" - how close the item is to a fraction (e.g., half) of the remaining capacity.  Closer is better.
            fit_ratio = abs(item - 0.5 * cap)  # Aim for item filling ~50% of remaining capacity
            
            # Base score: Lower fit_ratio is a better fit, so invert and scale it.
            score = -fit_ratio

            # Bonus for high utilization after packing.  Helps to fill bins effectively.
            if (cap - item) / 1.0 <= 0.25: # Check if bin utilization will be > 75% after packing
                 score += 1.0  # Boost priority for highly utilized bins

            priority.append(score)
        else:
            priority.append(-1000)  # Assign a very low priority if the item doesn't fit
    return priority
