def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on the remaining capacity and a penalty if the item almost fills the bin, favoring bins that can accommodate the item well without being nearly full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority_score = cap - item
            if item > 0.8 * cap:  # Apply a penalty if the item fills most of the bin
                priority_score -= (item - 0.8 * cap) * 5  # Reduced priority
            priority.append(priority_score)
        else:
            priority.append(-1)  # Assign a negative priority if the item doesn't fit
    return priority
