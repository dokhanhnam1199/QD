def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering a weighted combination of the remaining capacity ratio and a waste-related penalty, favoring bins with lower remaining capacity ratio and less waste, while also including a bonus for bins that are filled to a certain threshold after packing the item.}"""
    priority = []
    bin_capacity = 100  # Assuming bin capacity is 100

    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            capacity_ratio = cap / bin_capacity
            
            waste_penalty = 0
            if waste > 20:
                waste_penalty = 0.3  # Higher penalty for excessive waste
            elif waste < 5:
                waste_penalty = 0.1 # Slight penalty for very little waste

            fill_threshold = 80
            fill_bonus = 0
            if (bin_capacity - cap + item) >= fill_threshold:
                fill_bonus = 0.4 # Bonus for filling bin beyond threshold

            priority_score = (1 - capacity_ratio) * 0.5 + (1 - waste_penalty) * 0.3 + fill_bonus * 0.2

            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
