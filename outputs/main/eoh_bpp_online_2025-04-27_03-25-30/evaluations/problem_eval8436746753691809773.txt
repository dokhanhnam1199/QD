def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score considering both the waste and the utilization ratio, but adds a bonus for bins that are already relatively full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      utilization = item / 100
      fullness_bonus = (100 - cap) / 100
      priority_score = (1 / (waste + 0.0001)) * utilization + fullness_bonus
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
