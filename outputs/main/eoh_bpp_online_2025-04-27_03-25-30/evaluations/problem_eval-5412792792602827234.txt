def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin by considering the wasted space if the item is placed in the bin and also penalizing bins that are already too full or too empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      bin_utilization = (100 - cap + item) / 100
      
      #Penalize almost full or almost empty bins after packing
      utilization_penalty = abs(bin_utilization - 0.5) 
      
      priority_score = (1 / (waste + 0.0001)) * (1 - utilization_penalty)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
