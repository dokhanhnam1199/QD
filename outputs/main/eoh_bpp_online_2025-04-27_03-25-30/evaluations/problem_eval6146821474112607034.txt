def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, favoring bins that can accommodate the item while minimizing fragmentation and maximizing bin utilization across all bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      utilization = (100 - cap + item) / 100 if (100 - cap + item) > 0 else 0
      priority_score = utilization / (waste + 1) 
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
