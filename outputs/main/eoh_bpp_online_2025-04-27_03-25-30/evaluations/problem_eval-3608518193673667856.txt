def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by calculating a score based on the utilization rate after adding the item, penalizing bins that would become nearly full or have very little utilization.}"""
  priority = []
  bin_capacity = 100

  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      utilization = (bin_capacity - new_cap) / bin_capacity

      # Penalize near-full bins
      near_full_penalty = 0
      if utilization > 0.95:
        near_full_penalty = -0.5

      #Penalize low utilization bins
      low_utilization_penalty = 0
      if utilization < 0.1:
        low_utilization_penalty = -0.3
      

      priority_score = utilization + near_full_penalty + low_utilization_penalty

      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
