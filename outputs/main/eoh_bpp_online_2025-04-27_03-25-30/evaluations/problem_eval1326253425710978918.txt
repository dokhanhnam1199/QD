def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on how closely the item's size matches the remaining capacity of each bin, favoring bins where the item fills a large portion of the remaining space and penalizing bins where the item would leave a large amount of unused space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_percentage = (item / cap) * 100
      waste_penalty = 1 / (cap - item + 0.0001)
      priority_score = fill_percentage * waste_penalty
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
