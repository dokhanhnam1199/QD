def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority to bins based on a cost-benefit analysis, considering both the wasted space and the potential for future item placements.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      # Calculate a score based on how well the item fits (lower remaining_cap is better, but not too low)
      # and how much space is still available for future items (higher cap is better).
      # We want to avoid both excessive fragmentation and using almost-empty bins.
      priority = (1.0 / (remaining_cap + 0.1)) + (cap * 0.5) # Balance immediate fit with future capacity.
      priorities.append(priority)
    else:
      priorities.append(-1)
  return priority
