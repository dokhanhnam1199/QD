defined target waste range, and adapting the target range dynamically based on the item size.}
def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns a priority to each bin based on the fit of the item, favoring bins where the remaining capacity after packing the item aligns closely with a predefined target waste range, and adapting the target range dynamically based on the item size.}"""
    priority = []
    target_waste_low = item * 0.05
    target_waste_high = item * 0.2
    
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            if waste < target_waste_low:
                priority.append(0.5)
            elif waste > target_waste_high:
                priority.append(0.3)
            else:
                priority.append(1 / (abs(waste - (target_waste_low + target_waste_high)/2) + 0.1))
        else:
            priority.append(-1)
    return priority
