def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by calculating a score based on the remaining capacity ratio, a fragmentation penalty, and a reward for nearing full capacity after packing the item, adjusting weights to emphasize filling bins completely.}"""
    priority = []
    bin_capacity = 100  # Assuming bin capacity is 100

    for cap in bins_remain_cap:
        if cap >= item:
            remaining_capacity_ratio = cap / bin_capacity
            filled_percentage = (bin_capacity - cap + item) / bin_capacity * 100

            fragmentation_penalty = 0
            if remaining_capacity_ratio > 0.5:
                fragmentation_penalty = 0.2  # Higher penalty for significantly empty bins
            elif remaining_capacity_ratio < 0.1:
                fragmentation_penalty = 0.1

            nearly_full_reward = 0
            if filled_percentage >= 95:
                nearly_full_reward = 0.5  # High reward for almost filling the bin
            elif filled_percentage >= 70:
                nearly_full_reward = 0.2
            

            priority_score = (1 - remaining_capacity_ratio) * 0.4 + (1 - fragmentation_penalty) * 0.2 + nearly_full_reward * 0.4

            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
