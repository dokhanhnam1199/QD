def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on the ratio of item size to the remaining capacity, penalized by the proximity of the resulting filled bin to a target fullness level (e.g., 75%).}"""
  priority = []
  target_fullness = 75
  for cap in bins_remain_cap:
    if cap >= item:
      fullness_after_packing = (100 - cap + item)
      fullness_diff = abs(fullness_after_packing - target_fullness)
      priority_score = (item / cap) * (1 / (fullness_diff + 0.0001))
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
