def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by combining the remaining capacity with a penalty proportional to the potential waste and an added bonus for nearly full bins, aiming to balance space utilization and minimizing fragmentation.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fullness = 100 - cap
            priority_score = cap - (waste * 0.5) + (fullness * 0.1) # Adjust weights as needed
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
