def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both the absolute remaining capacity and the relative fullness achieved after packing the item, favoring bins that are neither too full nor too empty.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      fullness_ratio = (1 - (remaining_cap / 1)) # 1 is normalized bin capacity

      priority = (1.0 / (remaining_cap + 0.0001)) * fullness_ratio #combine both factors
      priorities.append(priority)
    else:
      priorities.append(-1)
  return priority
