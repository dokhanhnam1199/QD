def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a weighted combination of minimizing remaining space after packing and the current fill level of the bin, while also encouraging bin utilization by favoring bins that can accommodate the item with minimal wasted space and are already partially filled.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_space = cap - item
            current_fill = 100 - cap
            if current_fill == 0:
                fill_weight = 0.1
            else:
                fill_weight = current_fill / 100
            space_weight = 1 / (remaining_space + 0.0001) 
            priority_score = fill_weight * space_weight # Combine fill and space
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
