def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns a priority to each bin based on the ratio of item size to remaining capacity, favoring bins where the item nearly fills the bin but also penalizing those that would become overly full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap
            remaining_ratio = (cap - item) / 100  # As a fraction of total capacity
            
            if remaining_ratio < 0.05: #Penalize near full bin
              priority_score = fill_ratio * 0.5
            else:
              priority_score = fill_ratio * (1 - remaining_ratio)
            
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
