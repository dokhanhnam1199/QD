def priority_v2(item, bins_remain_cap):
    """{Assign higher priority to bins that can accommodate the item with less remaining capacity after packing, while also penalizing bins that are too close to full or would result in excessive fragmentation.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_after_pack = cap - item
            if remaining_after_pack == 0:
                priority = 1000  # Perfect fit
            else:
                # Prefer bins that leave less space, but avoid near-full bins or excessive fragmentation
                priority = 100 / (remaining_after_pack + 0.1) - (remaining_after_pack**2)/100  # Adjusted for stability and fragmentation
        else:
            priority = -1  # Cannot fit
        priorities.append(priority)
    return priority
