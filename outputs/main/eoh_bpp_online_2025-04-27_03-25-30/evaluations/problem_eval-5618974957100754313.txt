def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how closely the remaining capacity after placing the item matches a target filling level, favoring bins that result in a higher fill percentage.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      # Prioritize bins that result in a remaining capacity close to a target (e.g., 20% full)
      target_fill = 0.8 #target fill percentage
      priority = 1.0 / (abs(remaining_cap - (1 - target_fill) * 1) + 0.0001) # 1 is the bin capacity (normalized)
      priorities.append(priority)
    else:
      priorities.append(-1)  # Assign low priority to bins that cannot fit the item
  return priority
