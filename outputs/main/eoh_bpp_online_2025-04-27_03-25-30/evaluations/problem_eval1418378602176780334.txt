def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, favoring bins that are nearly full but can still accommodate the item, and penalizes bins that would have a very small remaining capacity after packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      if waste > 0:
          priority_score = (cap / 100.0) / (waste + 0.0001)
      else:
          priority_score = 1000 # Very high priority if it fits perfectly
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
