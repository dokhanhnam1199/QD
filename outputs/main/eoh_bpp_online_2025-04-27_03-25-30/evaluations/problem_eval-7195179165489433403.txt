def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and wasted space, penalizing bins with very low remaining capacity more heavily to avoid fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      if cap < 2 * item:
        priority_score = cap - (wasted_space)**3
      else:
        priority_score = cap - (wasted_space)**2
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
