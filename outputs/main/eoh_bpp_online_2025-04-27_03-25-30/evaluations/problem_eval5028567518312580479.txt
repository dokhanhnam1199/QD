def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates priority scores for each bin based on a combination of remaining capacity, item size, and a penalty for small remaining capacities after packing the item.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after_pack = cap - item
      priority = (item / cap) + (1 / (1 + remaining_after_pack))  # Prioritize bins where the item fits well and doesn't leave much waste.
      priorities.append(priority)
    else:
      priorities.append(-1) # Assign a negative priority if the item doesn't fit
  return priority
