def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity, favoring bins that can accommodate the item while minimizing the absolute waste and also considering the utilization of the bin relative to its original capacity.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      utilization = (100 - cap + item) / 100 
      priority_score = utilization / (waste + 1)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
