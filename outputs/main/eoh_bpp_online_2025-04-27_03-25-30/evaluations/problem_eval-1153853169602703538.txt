def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on how closely the item size matches a target remaining capacity, penalizing deviations from this target.}"""
    priorities = []
    target_remaining_capacity = 0.2  # Target remaining capacity after placing the item (e.g., 20% of bin size)
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_cap = cap - item
            # Calculate a score based on how close the item size is to the ideal size (1 - target_remaining_capacity) relative to the bin's current capacity.
            priority = 1.0 / (abs(remaining_cap - target_remaining_capacity) + 0.0001)
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign low priority to bins that cannot fit the item
    return priority
