def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by evaluating the trade-off between utilizing existing capacity and minimizing the creation of new bins, favoring bins that strike a balance between fullness and avoiding unnecessary bin starts.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / 100  # Assuming bin capacity is 100
      bin_fullness = 1 - (cap / 100)
      priority_score = utilization + bin_fullness
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
