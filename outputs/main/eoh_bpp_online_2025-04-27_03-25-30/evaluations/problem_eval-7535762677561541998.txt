def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity and fullness, favoring bins that can accommodate the item with minimal waste and are already relatively full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fullness_ratio = (1 - (cap / 100)) # Assuming bin capacity is 100
            priority_score = (1 / (waste + 1)) + fullness_ratio
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
