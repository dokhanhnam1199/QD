def priority_v2(item, bins_remain_cap):
    """
    {This algorithm calculates a priority score for each bin based on a combination of remaining capacity and wasted space if the item is placed in the bin, favoring bins with enough space and minimizing wasted space.}
    """
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            priority.append(cap * 0.7 + (100 - wasted_space) * 0.3)  # Prioritize bins with more remaining capacity and less wasted space
        else:
            priority.append(-1)  # Assign a low priority if the bin cannot fit the item
    return priority
