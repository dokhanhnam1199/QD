def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, favoring bins that can accommodate the item but penalizing bins that would become nearly full after packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      fill_ratio = item / 100
      fullness_penalty = (1 / (1 + abs(cap - item - 100)))  
      priority_score = (1/(waste + 0.0001)) * fill_ratio * fullness_penalty
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
