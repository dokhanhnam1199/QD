def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a score for each bin by considering both the wasted space if the item is placed in the bin and a penalty based on the remaining capacity of the bin after packing the item, giving preference to bins that result in less wasted space and avoid bins becoming overly empty.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            penalty = (100 - (cap - item)) / 100 if (cap-item) <= 100 else 1
            priority_score = (1 / (waste + 0.0001)) * penalty
        else:
            priority_score = -1
        priority.append(priority_score)
    return priority
