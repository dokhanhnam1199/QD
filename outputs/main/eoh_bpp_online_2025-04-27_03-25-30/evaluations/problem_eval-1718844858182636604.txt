def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, prioritizing bins that can accommodate the item while considering the remaining space after packing and the bin's initial capacity.}"""
  priority = []
  bin_capacity = 100
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_space = cap - item
      space_utilization = (bin_capacity - cap + item) / bin_capacity
      if remaining_space > 0:
        priority_score = space_utilization / (remaining_space + 1)
      else:
        priority_score = space_utilization * 1000 # Very high priority if it fits perfectly
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
