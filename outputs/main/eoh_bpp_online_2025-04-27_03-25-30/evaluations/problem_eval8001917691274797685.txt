def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin by considering both the remaining capacity and the item size relative to the bin's full capacity, favoring bins that are neither too full nor too empty after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = (100 - cap + item) / 100.0
      priority_score = utilization * (1 - abs(utilization - 0.5))
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
