def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by balancing the remaining capacity, fullness, and a penalty for creating small remaining spaces.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      fullness = 1 - (cap / 100)
      penalty = 0
      if waste < 10:
        penalty = (10 - waste) / 10  
      priority_score = fullness + (1 / (waste + 1)) - penalty
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
