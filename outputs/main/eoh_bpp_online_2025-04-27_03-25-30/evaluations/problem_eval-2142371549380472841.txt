def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates bin priorities based on remaining capacity, favoring bins that can accommodate the item with minimal wasted space, while also considering the overall fullness of the bin.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fullness = 1 - (cap / sum(bins_remain_cap)) if sum(bins_remain_cap) > 0 else 0

            priority_score = (1 / (waste + 0.00001)) + fullness

        else:
            priority_score = -1  # Assign negative priority if the item doesn't fit
        priority.append(priority_score)
    return priority
