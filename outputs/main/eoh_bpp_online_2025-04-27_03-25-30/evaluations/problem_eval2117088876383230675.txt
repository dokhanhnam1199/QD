def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and waste, favoring bins that can accommodate the item with minimal remaining waste, while also penalizing bins that are already nearly full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            # Calculate a score based on remaining capacity and waste
            score = (1 / (waste + 0.001)) + (1 / (1 - (cap / sum(bins_remain_cap)))) # Avoid division by zero & Normalize cap for better comparison
        else:
            score = -float('inf')  # Assign very low priority if the item doesn't fit
        priority.append(score)
    return priority
