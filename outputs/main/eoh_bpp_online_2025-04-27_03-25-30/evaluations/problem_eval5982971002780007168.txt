def priority_v2(item, bins_remain_cap):
  """{This algorithm combines the remaining capacity and fill ratio, then uses a sigmoid function to balance exploration and exploitation by assigning higher priorities to bins that can accommodate the item, and also applying a sigmoid transformation to the remaining capacity to prioritize bins with moderate to high fill levels after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      fill_ratio = item / 100 # Normalize the fill ratio

      # Sigmoid transformation for remaining capacity
      sigmoid_cap = 1 / (1 + math.exp(-remaining_cap))

      priority_score = fill_ratio * (1 + sigmoid_cap)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
