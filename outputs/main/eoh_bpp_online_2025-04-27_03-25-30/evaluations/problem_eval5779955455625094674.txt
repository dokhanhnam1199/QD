def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by calculating the utilization ratio after placing the item, favoring bins that achieve a utilization close to a target utilization.}"""
    priority = []
    target_utilization = 0.75  # Example target utilization, tune as needed
    bin_capacity = 100 # Assuming bin capacity is 100

    for cap in bins_remain_cap:
        if cap >= item:
            new_cap = cap - item
            utilization = (bin_capacity - new_cap) / bin_capacity
            priority_score = 1 - abs(utilization - target_utilization)
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
