def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering the wasted space if the item is placed and penalizing bins that are nearly empty or completely full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            # Normalize waste to a scale of 0-1, lower is better
            normalized_waste = waste / 100  # Assuming bin capacity is 100

            # Penalize bins that are nearly empty or full
            bin_fullness = 1 - (cap / 100)
            fullness_penalty = abs(bin_fullness - 0.5)  # Closer to 0.5 (50% full) is better

            priority_score = 1 - normalized_waste - fullness_penalty
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
