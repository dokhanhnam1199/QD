def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, prioritizing bins that can accommodate the item while considering the absolute remaining capacity and penalizing bins with high utilization.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      utilization = (100 - cap + item) / 100
      remaining_capacity_score = cap
      high_utilization_penalty = 1 / (utilization * 100) if utilization > 0.9 else 1
      priority_score = remaining_capacity_score * high_utilization_penalty
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
