def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted combination of remaining capacity and the fit of the item relative to the bin size, favoring bins that are a good fit but not overly full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      capacity_ratio = item / cap
      priority_score = cap * (1 - (wasted_space / cap)**0.5) * capacity_ratio
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
