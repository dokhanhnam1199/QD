def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority scores to bins based on a combination of remaining capacity, wasted space, and a penalty for creating bins with very low remaining capacity.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      #Give a high score if the wasted space is small, 
      #Avoid creating bins with very low remaining capacity
      if wasted_space > 0 and wasted_space < 0.1:
        priorities.append(cap*100) # give a high score 
      else:
        priorities.append(cap + 1/(wasted_space + 0.00001) )
    else:
      priorities.append(-1) # negative priority if item doesn't fit

  return priority
