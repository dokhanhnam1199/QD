def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted sum of wasted space and bin utilization after packing the item, penalizing bins that cannot accommodate the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      utilization = (100 - cap + item) / 100 if (100 - cap + item) <= 100 else 1
      priority_score = (0.7 / (waste + 0.0001)) + (0.3 * utilization)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
