def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins that can accommodate the item, balancing the bin utilization after packing the item with the bin's current fill level, preferring bins that lead to a more balanced overall fill distribution across all bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      utilization_after = (100 - cap + item) / 100
      current_utilization = (100 - cap) / 100 if (100 - cap) > 0 else 0
      priority_score = utilization_after / (abs(utilization_after - current_utilization) + 0.0001)
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
