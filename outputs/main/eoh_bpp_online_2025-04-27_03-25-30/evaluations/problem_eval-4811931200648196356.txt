def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, favoring bins that can accommodate the item with minimal wasted space, and also considering how evenly filled the bin would be after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      fill_ratio = item / (100-cap+item if (100-cap+item) > 0 else 1) 
      priority_score = (1/(waste + 0.0001)) * fill_ratio  
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
