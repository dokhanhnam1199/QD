def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a weighted combination of remaining capacity, waste, and fullness, emphasizing minimal waste and high fullness.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fullness_ratio = (1 - (cap / 100))  # Assuming bin capacity is 100
            priority_score = (2 / (waste + 1)) + (2 * fullness_ratio) - (cap/100)
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
