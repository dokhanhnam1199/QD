def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin by considering both remaining capacity and the proportion of the item that can fit, favoring bins that can accommodate the item with minimal wasted space relative to the item's size.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      priority_score = cap - (wasted_space / item)**2
    else:
      priority_score = -1
    priority.append(priority_score)
  return priority
