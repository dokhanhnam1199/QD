def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins based primarily on minimizing wasted space while also considering a penalty for bins that are nearly empty.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fullness_ratio = (1 - (cap / 100)) # Assuming bin capacity is 100
            # Prioritize minimum waste, with a penalty for nearly empty bins.
            priority_score = (100 / (waste + 1)) - (1 - fullness_ratio)**2
            priority.append(priority_score)
        else:
            priority.append(-1)
    return priority
