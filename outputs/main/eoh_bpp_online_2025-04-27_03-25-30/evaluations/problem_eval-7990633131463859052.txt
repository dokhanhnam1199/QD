def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both the remaining capacity after placing the item and the current fill level of the bin, favoring bins that can accommodate the item without becoming overly full.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      # Prioritize bins that can fit the item and are not too empty initially, nor too full after placing the item
      priority = 1.0 / (abs(cap - 0.75 * 1) + 0.0001) + 1.0 / (abs(remaining_cap - 0.25 * 1) + 0.0001)  # 1 is the bin capacity (normalized)
      priorities.append(priority)
    else:
      priorities.append(-1)  # Assign low priority to bins that cannot fit the item
  return priority
