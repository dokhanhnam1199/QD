```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on feasibility, wasted space, and target capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    
    # Target a remaining capacity of around 20% of initial bin size
    target_capacity = 0.2 * np.max(bins_remain_cap)

    # Reward bins closer to the target capacity
    capacity_diff = np.abs(remaining_after_fit - target_capacity)
    priorities[feasible_bins] = -capacity_diff

    # Add a bonus for almost full bins
    almost_full = remaining_after_fit <= 0.1 * item  #tuneable value: 0.1
    priorities[feasible_bins][almost_full] += 1 #tuneable value: 1
    
    return priorities
```
