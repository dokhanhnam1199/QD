{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on waste, target capacity, and fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities\n\n    remaining_capacity_after_placement = bins_remain_cap - item\n    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1\n\n    # Target remaining capacity: Aim for bins to be ~half full after placement.\n    target_capacity = 0.5 * np.max(bins_remain_cap) #Dynamic target capacity\n    deviation_from_target = np.abs(remaining_capacity_after_placement - target_capacity)\n    priorities[feasible_bins] = 1.0 / (deviation_from_target[feasible_bins] + 0.00001) # Avoid division by zero\n\n    # Almost full bonus: Incentivize filling bins completely.\n    almost_full_threshold = 0.1\n    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)\n    priorities[almost_full_bins] += 5.0\n\n    # Penalize small capacity bins: Avoid excessive fragmentation\n    small_capacity_threshold = 0.2\n    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)\n    priorities[small_capacity_bins] -= 2.0\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current Self-Reflection\" to be more effective and guide the design of better heuristics. Here's a revised approach, keeping in mind the pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Multi-objective, Tunable Parameters, Iterative Refinement, Penalty/Reward, Normalization, Fragmentation, Target Capacity, Bin Diversity, Feasibility.\n\n*   **Advice:** Start with a simple, feasible heuristic focused on core objectives (e.g., waste minimization). Iteratively introduce complexity by adding factors like target remaining capacity, margin bonuses, and fragmentation penalties, carefully evaluating each addition's impact on overall performance through controlled experiments. Use normalization to allow sensible weighing of different criteria.\n\n*   **Avoid:** Overly complex, untuned bonus/penalty systems. Premature optimization of all objectives. Complex ratios and hard thresholds without proper evaluation.\n\n*   **Explanation:** Effective heuristic design involves a balance between exploration (considering multiple factors) and exploitation (focusing on the most impactful aspects). An iterative, test-driven approach, starting simple and adding complexity incrementally, allows for better understanding of how different factors interact and contribute to overall performance. Tunable parameters and normalization are crucial for adapting the heuristic to different problem instances and scales.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}