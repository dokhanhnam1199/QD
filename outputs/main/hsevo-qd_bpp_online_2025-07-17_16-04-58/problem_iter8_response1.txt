```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, waste, target capacity, and fullness.
    Uses tunable parameters for adaptability.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -wasted_space  # Lower waste is better

    target_capacity_fraction = 0.2 # Tunable
    target_capacity = target_capacity_fraction * np.max(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap[feasible_bins] - target_capacity)
    capacity_penalty_weight = 0.05 # Tunable
    priorities[feasible_bins] -= capacity_penalty_weight * capacity_diff

    fullness_weight = 0.01 # Tunable
    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += fullness_weight * fullness_factor

    return priorities
```
