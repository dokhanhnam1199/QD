```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~feasible_bins] = np.inf  # Mark infeasible bins with infinity

    # Target capacity: Aim for a small but non-zero remaining capacity.  Tunable parameter.
    target_capacity = 0.1 * item  # Aim for 10% of item size remaining, tunable.

    # Calculate the "distance" from the target capacity.  Smaller distance is better.
    capacity_distance = np.abs(remaining_capacity_after_placement - target_capacity)

    # Convert the distance to a priority. Infeasible bins are penalized with 0 priority
    priorities[feasible_bins] = 1.0 / (capacity_distance[feasible_bins] + 0.00001)  # Avoid division by zero

    # Boost priority for "almost full" bins (but only if they are feasible).  Tunable parameter.
    almost_full_threshold = 0.05 * item  # Within 5% of item size, tunable.
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold)
    priorities[almost_full_bins] += 3.0

    # Penalize very small capacity bins to reduce fragmentation, but don't exclude them completely
    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 1.0
    return priorities
```
