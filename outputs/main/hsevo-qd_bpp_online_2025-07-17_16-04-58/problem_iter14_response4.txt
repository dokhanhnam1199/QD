```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, waste, fill rate, and capacity thresholds."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities

    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -wasted_space  # Minimize waste

    fill_rate = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_rate # Promote higher fill rates

    almost_full_threshold = 0.1 #tuneable parameter
    almost_full = (wasted_space / item) < almost_full_threshold
    priorities[feasible_bins][almost_full] += 1 # Boost almost full bins

    small_capacity_threshold = 0.2
    small_capacity = bins_remain_cap[feasible_bins] < small_capacity_threshold
    priorities[feasible_bins][small_capacity] -= 0.5 # Penalize small capacity

    return priorities
```
