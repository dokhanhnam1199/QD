```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1  # Handle infeasible bins

    # Objective 1: Fill bins as completely as possible.
    # Prioritize bins with smaller remaining capacity *after* placement.
    fill_priority = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Objective 2: Avoid fragmentation. Leave enough space for potentially larger items later.
    # Slightly penalize bins that become "too full".
    almost_full_threshold = 0.15  # tunable parameter: fraction of item size. increased it from 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    # original: priorities[almost_full_bins] += 5.0
    # Add a penalty instead of boost
    fill_priority[bins_remain_cap[feasible_bins] < item + almost_full_threshold * item] -= 2.0

    # Objective 3: Prefer bins that were already somewhat filled.
    # Gives some priority to bins that already contain items.
    already_filled_threshold = 0.8 # If the bin is filled more than 20%, it is considered to be already filled
    already_filled_bins = feasible_bins & (bins_remain_cap < already_filled_threshold) # Previously was small_capacity_threshold = 0.2
    #original: priorities[small_capacity_bins] -= 2.0
    # Boost priority
    fill_priority[bins_remain_cap[feasible_bins] < already_filled_threshold] += 1.0


    #Objective 4: Moderately filled bins
    moderately_filled_threshold_lower = 0.3
    moderately_filled_threshold_upper = 0.7
    moderately_filled_bins = feasible_bins & (bins_remain_cap >= moderately_filled_threshold_lower) & (bins_remain_cap <= moderately_filled_threshold_upper)
    fill_priority[bins_remain_cap[feasible_bins] >= moderately_filled_threshold_lower] +=0.5
    fill_priority[bins_remain_cap[feasible_bins] <= moderately_filled_threshold_upper] +=0.5
    priorities[feasible_bins] = fill_priority



    return priorities
```
