```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with a target capacity incentive."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Minimize wasted space
    priorities[feasible_bins] = -remaining_capacity_after_placement

    # Target a remaining capacity.
    target_capacity = 0.1
    capacity_diff = np.abs(remaining_capacity_after_placement - target_capacity)
    priorities[feasible_bins] -= capacity_diff

    # Almost full bonus.
    almost_full_threshold = 0.05
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 1.0

    return priorities
```
