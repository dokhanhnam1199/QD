```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item almost perfectly fits (minimizing wasted space)
    waste = bins_remain_cap - item
    perfect_fit_bonus = np.exp(-np.abs(waste) / (item + 0.0001)) # Avoid div by zero & scale the bonus

    # Heuristic 2: Higher priority to bins that can fit the item, lower otherwise.  Set -inf when item cannot fit
    can_fit = bins_remain_cap >= item
    priorities = np.where(can_fit, perfect_fit_bonus + (bins_remain_cap - item), -np.inf)

    # Heuristic 3: Slightly reward bins that have already been used. Prevents creating too many nearly empty bins at the start.
    used_bin_bonus = np.where(bins_remain_cap < np.max(bins_remain_cap), 0.1, 0)  # Small constant bonus
    priorities = priorities + used_bin_bonus
    
    #Heuristic 4: Penalize bins close to full
    almost_full_penalty = np.where((bins_remain_cap > item) & (bins_remain_cap < 1.2 * item) , -0.05 * (1.2 * item - bins_remain_cap), 0) # small penalty for filling too much

    priorities = priorities + almost_full_penalty

    return priorities
```
