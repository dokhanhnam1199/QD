```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates bin priorities considering ideal capacity, fragmentation, and feasibility.
    """

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    priorities[feasible_bins] = 0.0

    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Target capacity: aim for bins to be a certain fullness.
    target_capacity = 0.8  # Target 80% fullness. Changed from ideal_remaining_capacity
    deviation = np.abs((bins_remain_cap[feasible_bins] - remaining_capacity_after_placement)/bins_remain_cap[feasible_bins] - target_capacity)
    priorities[feasible_bins] = 1.0 / (deviation + 0.00001)


    # Reward bins getting almost full to reduce bin count.
    almost_full_threshold = 0.1
    almost_full_bins = remaining_capacity_after_placement <= almost_full_threshold * bins_remain_cap[feasible_bins].max()  # Normalize to bin max
    priorities[feasible_bins][almost_full_bins] += 5.0


    # Penalize putting items in bins that remain largely empty. Avoid fragmentation.
    large_capacity_threshold = 0.75
    large_capacity_bins = bins_remain_cap[feasible_bins] > large_capacity_threshold
    priorities[feasible_bins][large_capacity_bins] -= 1.0


    return priorities
```
