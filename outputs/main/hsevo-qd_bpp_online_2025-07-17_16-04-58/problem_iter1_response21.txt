```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers a few factors:

    1.  **Capacity Fit:** How well the item fits into the remaining capacity.  Bins with a capacity slightly larger than the item are favored.
    2.  **Bin Utilization:**  Bins that are already relatively full are favored to consolidate items and open new bins.
    3.  **Fragmentation Penalty:**  Bins that would leave a small, almost unusable remainder are penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Item doesn't fit
            continue

        # Capacity Fit - Gaussian-like peak around item size
        capacity_fit = np.exp(-((cap - item) ** 2) / (2 * (item * 0.2) ** 2))  # Standard deviation as 20% of item size

        # Bin Utilization
        bin_utilization = 1 - (cap / 1.0) # Assume bin size of 1, otherwise scale cap

        # Fragmentation Penalty - Penalize leaving small unusable remainder
        remainder = cap - item
        fragmentation_penalty = 0.0
        if 0 < remainder < 0.1: # Tunable parameter based on average item size. Penalize if remainder is less than 0.1
            fragmentation_penalty = -10 * (0.1 - remainder)  # Higher negative penalty

        priorities[i] = capacity_fit + 0.5 * bin_utilization + fragmentation_penalty  # Combine the factors with some weighting.  Bin utilization is weighted down.


    return priorities
```
