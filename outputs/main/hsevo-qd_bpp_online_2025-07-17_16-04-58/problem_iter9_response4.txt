```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Baseline priority: inverse of remaining capacity after placement
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Parameter tuning: Define adaptive parameters
    almost_full_threshold_percentage = 0.1  #tuneable
    small_capacity_threshold_percentage = 0.2 #tuneable
    almost_full_bonus = 5.0 #tuneable
    small_capacity_penalty = 2.0 #tuneable
    capacity_utilization_importance = 2.0 #tuneable

    # Dynamic almost full threshold (relative to item size)
    almost_full_threshold = almost_full_threshold_percentage * item
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold)
    priorities[almost_full_bins] += almost_full_bonus

    # Dynamic small capacity threshold (relative to bin size)
    small_capacity_threshold = small_capacity_threshold_percentage
    small_capacity_bins = feasible_bins & (bins_remain_cap / np.max(bins_remain_cap) < small_capacity_threshold) # normalized to bin size
    priorities[small_capacity_bins] -= small_capacity_penalty

    # Capacity Utilization: Prioritize bins that lead to better utilization
    capacity_utilization = (item / np.max(bins_remain_cap)) # Normalized item size
    priorities[feasible_bins] += capacity_utilization_importance * capacity_utilization

    return priorities
```
