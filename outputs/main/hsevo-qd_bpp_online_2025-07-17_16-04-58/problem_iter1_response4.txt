```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing heuristic-inspired priority
            space_left = cap - item
            priorities[i] = 1.0 / (space_left + 0.0001)  # Favor bins with less remaining space

            # Improve bin usage: prioritize bins that are close to full after adding the item, but not overfull.

            # Alternative approach: prioritize bins that are more than half-full, if possible
            if cap > 2 * item / 3.0:  # If we have some space to play with before getting full...
                 priorities[i] *= (cap / item) # Boost based on "closeness" to item
        else:
            priorities[i] = -1e9  # Very low priority for bins that can't fit the item
    return priorities
```
