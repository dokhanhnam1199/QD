```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, target capacity, fullness, and fragmentation, with normalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Waste Minimization (Primary Objective)
    waste = remaining_capacity_after_placement
    normalized_waste = 1 - (waste[feasible_bins] / np.max(bins_remain_cap))  # Normalize to [0, 1]
    priorities[feasible_bins] += normalized_waste

    # Target Remaining Capacity (Secondary Objective)
    target_capacity = 0.6 * np.max(bins_remain_cap)  # Slightly higher target
    deviation_from_target = np.abs(remaining_capacity_after_placement - target_capacity)
    normalized_deviation = 1 - (deviation_from_target[feasible_bins] / np.max(bins_remain_cap)) # Normalize to [0, 1]
    priorities[feasible_bins] += 0.7 * normalized_deviation # Reduced weight

    # Almost Full Bonus (Tertiary Objective)
    almost_full_threshold = 0.15 #Tuned Value
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 1.5 # Tuned Value

    # Fragmentation Penalty (Quaternary Objective)
    small_capacity_threshold = 0.3 #Tuned Value
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold * np.max(bins_remain_cap))
    priorities[small_capacity_bins] -= 0.8 # Tuned Value

    # Encourage using bins that are already somewhat full
    already_full_threshold = 0.7
    already_full_bins = feasible_bins & (bins_remain_cap < already_full_threshold * np.max(bins_remain_cap)) & (bins_remain_cap > small_capacity_threshold * np.max(bins_remain_cap))
    priorities[already_full_bins] += 0.5

    return priorities
```
