{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins: avoids infeasibility, minimizes waste, considers fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    feasible_bins = ~infeasible_bins\n    wasted_space = bins_remain_cap[feasible_bins] - item\n    priorities[feasible_bins] = -wasted_space # Lower waste is better\n\n    # Encourage filling: slightly prioritize bins that are already somewhat full\n    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)\n    priorities[feasible_bins] += 0.1 * fullness_factor\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        almost_full_threshold: Threshold for considering a bin almost full (as a fraction of item size).\n        almost_full_boost: Priority boost for almost full bins.\n        small_capacity_threshold: Threshold for considering a bin small capacity.\n        small_capacity_penalty: Priority penalty for small capacity bins.\n        division_eps: Epsilon value to avoid division by zero.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., all zeros)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Filter bins that can actually accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # No bin can fit the item. Return low priorities for all. Avoid errors.\n        return priorities\n\n### Analyze & experience\n- *   Comparing (1st) vs (20th), we see the best heuristic explicitly handles infeasibility by setting priorities to `-np.inf`, minimizes waste by prioritizing bins with smaller wasted space, and encourages fullness with a fullness factor. The worst heuristic simply calculates `-log(item / bins_remain_cap)`, without considering feasibility or fullness.\n\n*   Comparing (2nd) vs (19th), the second-best heuristic considers remaining capacity after placement, boosts almost-full bins, and penalizes small-capacity bins. The 19th heuristic, similar to the worst, relies only on `-log(item / bins_remain_cap)`.\n\n*   Comparing (1st) vs (2nd), the first prioritizes avoiding infeasibility by setting infeasible bins to `-np.inf` whereas the second sets `remaining_capacity_after_placement` to -1. The first one is clear to understand than the second.\n\n*   Comparing (3rd) vs (4th), the third introduces the concept of an \"ideal remaining capacity,\" trying to keep some space for future items, and penalizes large remaining capacities. In contrast, the fourth is more basic, focusing on minimizing waste and encouraging fullness without an explicit ideal.\n\n*   Comparing (9th) vs (17th), the ninth introduces hyperparameter that can be tune for better performance. Meanwhile, the 17th focuses on the ratio of item size to remaining capacity, which can be problematic and have no control.\n\n*   Comparing (2nd worst) vs (worst), 18th and 20th are the same.\n\n*   The middle heuristics (16th, 15th, 14th, 13th, 12th, 11th, 10th) all share the same core structure of the 9th heuristic, but lack its completion. The code only initializes the `priorities` array and checks for infeasible bins, without implementing any prioritization logic. This explains their poor performance.\n\n*   Overall: Good heuristics balance feasibility, waste minimization, and encouragement of fullness. More advanced heuristics incorporate concepts like ideal remaining capacity and penalties for fragmentation. Making parameters tunable seems to improve performance. Simpler heuristics tend to be less effective.\n- \nOkay, let's refine \"Current Self-Reflection\" for designing heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection.\"\n\nHere's a revised approach:\n\n*   **Keywords:** Feasibility, waste, compactness, target capacity, fragmentation, tunability, simplicity, incremental.\n*   **Advice:** Focus on core objectives (waste & fragmentation) first. Use clear infeasibility markers (e.g., -inf). Systematically explore target capacity definitions.\n*   **Avoid:** Overly complex penalty systems initially. Prematurely adding parameters. Ignoring the need for tunable parameters.\n*   **Explanation:** Start with a simple heuristic targeting core objectives. Incrementally add complexity and tunable parameters, validating each addition's impact on performance. Keep in mind the feasibility, waste minimization, encouragement of fullness/compactness, ideally, target a small remaining capacity, penalize highly fragmented allocations.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}