```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on multiple objectives: fullness, fragmentation, target capacity."""

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    priorities[feasible_bins] = 0.0

    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Objective 1: Target Remaining Capacity
    target_capacity = 0.15
    capacity_deviation = np.abs(remaining_capacity_after_placement - target_capacity)
    priorities[feasible_bins] += 1.0 / (capacity_deviation + 0.00001)

    # Objective 2: Minimize Fragmentation (Almost Full Bonus)
    almost_full_threshold = 0.06
    almost_full_bins = remaining_capacity_after_placement <= almost_full_threshold
    priorities[feasible_bins][almost_full_bins] += 4.0

    # Objective 3: Discourage Small Capacity Bins (Fragmentation Penalty)
    small_capacity_threshold = 0.2
    small_capacity_bins = bins_remain_cap[feasible_bins] < small_capacity_threshold #Consider original remaining capacity

    priorities[feasible_bins][small_capacity_bins] -= 1.5

    # Objective 4: Encourage Filling Nearly Empty Bins (nearly empty bonus)
    nearly_empty_threshold = 0.8
    nearly_empty_bins = bins_remain_cap[feasible_bins] > nearly_empty_threshold
    priorities[feasible_bins][nearly_empty_bins] += 0.5

    return priorities
```
