{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)  # Initialize with -inf for infeasible bins\n\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # All bins are infeasible\n\n    priorities[feasible_bins] = 0.0  # Reset feasible bins to a base priority of 0\n\n    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item\n\n\n    # Define an ideal remaining capacity.  This is a crucial parameter.\n    # Let's start with aiming for a small, non-zero ideal.\n    ideal_remaining_capacity = 0.1 # was 0.2\n\n    # Calculate the deviation from the ideal remaining capacity.  Smaller is better.\n    deviation = np.abs(remaining_capacity_after_placement - ideal_remaining_capacity)\n\n    # Use the inverse of the deviation as the priority.\n    priorities[feasible_bins] = 1.0 / (deviation + 0.00001)  # Avoid division by zero\n\n    # Add a bonus for bins that would be nearly full after placement.\n    almost_full_threshold = 0.05  # Reduce it to 5%\n    almost_full_bins = (remaining_capacity_after_placement <= almost_full_threshold)\n    priorities[feasible_bins][almost_full_bins] += 5.0 # was 5.0\n\n    # Slightly penalize bins that have a very large remaining capacity. This discourages putting small\n    # items into almost empty bins. Avoids fragmentation.\n    large_capacity_threshold = 0.75\n    large_capacity_bins = bins_remain_cap[feasible_bins] > large_capacity_threshold\n    priorities[feasible_bins][large_capacity_bins] -= 1.0 # was 2.0\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates infeasibility checks, wasted space minimization, target capacity considerations, and encourages filling, while the worst only calculates the negative log of the ratio of item size to remaining capacity. (2nd best) is a direct copy of (best). (3rd best) is a direct copy of (best). Comparing (1st) vs (4th), we see that the first prioritizes minimizing wasted space and targeting a specific remaining capacity, while the fourth focuses on an ideal remaining capacity and penalizing large capacities to avoid fragmentation. (5th best) focuses mainly on minimizing wasted space and encouraging filling. Comparing (2nd worst) vs (worst), they are identical. Comparing (11th best) and (17th best), the only difference is the default value for tunable parameters.\n\nOverall: The better heuristics incorporate multiple factors, including feasibility, waste minimization, target capacity, and fullness, using carefully tuned weights or thresholds. The inferior heuristics focus on fewer factors or simpler calculations, such as a ratio or log ratio. Introducing tunable parameters into the heuristic to make it possible to adapt the algorithm for any data.\n- \nOkay, I'll help you redefine \"Current Self-Reflection\" to design better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection.\" Here's a breakdown designed for effective improvement:\n\n*   **Keywords:** Adaptability, Objective Clarity, Multifaceted Evaluation, Iterative Refinement.\n*   **Advice:** Systematically analyze factor interactions and their impact on objective functions (feasibility, waste). Design tunable parameters to achieve adaptability to any datasets.\n*   **Avoid:** Overly simplistic approaches, Premature complex bonus/penalty system, and unfocused experimentation.\n*   **Explanation:** Instead of solely focusing on simplicity, the focus should be on identifying key factors and systematically exploring their interactions. Start with a clear baseline, iteratively adding complexity while rigorously evaluating each addition using controlled experiments.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}