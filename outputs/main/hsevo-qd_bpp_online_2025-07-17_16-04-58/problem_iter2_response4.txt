```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, penalizing infeasible bins."""
    epsilon = 1e-9
    priorities = np.zeros_like(bins_remain_cap)
    
    # Infeasible bins get zero priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = 0.0

    # Prioritize based on how much wasted space
    waste = bins_remain_cap - item
    
    #Prioritize smaller waste better.
    priorities[~infeasible_bins] = np.exp(-np.abs(waste[~infeasible_bins]) / (item + epsilon))

    #Adjust the priorities by a random factor
    uncertainty = np.random.rand(len(bins_remain_cap)) * 0.01
    priorities += uncertainty
    
    #Normalize priority scores
    total_priority = np.sum(priorities)
    if total_priority > 0:
        priorities /= total_priority
    else: # if total probability is zero, assign a small equal probability to each of the bins that will fit item
        eligible_bins = bins_remain_cap >= item
        priorities[eligible_bins] = 1.0 / np.sum(eligible_bins)
    
    return priorities
```
