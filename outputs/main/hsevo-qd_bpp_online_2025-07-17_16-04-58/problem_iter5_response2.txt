```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority scores to bins for an item, balancing waste and fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~feasible_bins] = np.inf

    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 5.0

    ideal_remaining_capacity = 0.1 * item #Target an ideal remaining capacity
    capacity_diff = np.abs(remaining_capacity_after_placement - ideal_remaining_capacity)
    priorities[feasible_bins] -= capacity_diff[feasible_bins] * 0.5

    return priorities
```
