```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with an almost-full bin incentive."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    # Capacity ratio: Item size relative to remaining capacity.
    capacity_ratios = item / bins_remain_cap
    priorities = -np.log(capacity_ratios)

    # Almost-full incentive: Boost priority if bin is close to full after adding the item.
    almost_full_threshold = 0.1
    almost_full_boost = 5

    remaining_after_fit = bins_remain_cap - item
    almost_full_bins = (remaining_after_fit > 0) & (remaining_after_fit / bins_remain_cap < almost_full_threshold) #Only for feasible bins
    priorities[almost_full_bins] += almost_full_boost

    return priorities
```
