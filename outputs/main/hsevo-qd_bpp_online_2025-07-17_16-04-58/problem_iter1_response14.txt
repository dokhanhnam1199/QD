```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that have enough remaining capacity for the item,
    and among those, it prioritizes bins where the item fills a significant
    portion of the remaining capacity without overflowing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, assign a small negative priority to all bins,
        # with slightly higher priority for those closest to fitting. This effectively allows the worst-fit strategy.
        priorities = -1.0 - (item - bins_remain_cap)
        return priorities

    # Prioritize bins that can fit the item
    capacities = bins_remain_cap[eligible_bins]
    fill_ratios = item / capacities

    # Higher fill ratio (item fills the bin more completely) is better, but only if less than 1
    priorities[eligible_bins] = fill_ratios

    # Add a bonus for bins that are nearly full after adding the item, but aren't overfull
    nearly_full = np.logical_and(item <= bins_remain_cap, bins_remain_cap - item < 0.1) # Check if remaining cap after placement is less than 0.1
    priorities[nearly_full] += 0.5  # Adjust this value to prioritize "nearly full" bins more or less.

    return priorities
```
