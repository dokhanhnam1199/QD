```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, ideal range, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bins can fit, minimize wasted space.
        priorities = item / bins_remain_cap
        return priorities

    waste = bins_remain_cap - item
    ideal_remaining_range = (0.1, 0.3)
    priorities[eligible_bins] = -np.abs(waste[eligible_bins] - np.mean(waste[eligible_bins]))/(np.std(waste[eligible_bins]) + 1e-6) - 100*(waste[eligible_bins] < 0.1)
    return priorities
```
