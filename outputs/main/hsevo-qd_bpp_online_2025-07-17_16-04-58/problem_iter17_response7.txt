```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, target capacity, and fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Target remaining capacity: Aim for bins to be ~half full after placement.
    target_capacity = 0.5 * np.max(bins_remain_cap) #Dynamic target capacity
    deviation_from_target = np.abs(remaining_capacity_after_placement - target_capacity)
    priorities[feasible_bins] = 1.0 / (deviation_from_target[feasible_bins] + 0.00001) # Avoid division by zero

    # Almost full bonus: Incentivize filling bins completely.
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 5.0

    # Penalize small capacity bins: Avoid excessive fragmentation
    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 2.0

    return priorities
```
