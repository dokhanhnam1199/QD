```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # High priority to bins where the item fits (positive wasted space)
    # and lower wasted space is better (inverse relationship)
    fit_mask = wasted_space >= 0
    priorities[fit_mask] = 1.0 / (1.0 + wasted_space[fit_mask]) # Use 1.0 + to avoid division by zero and provide a reasonable score even when wasted_space is zero.

    # Assign negative priority to bins where the item does not fit. Very large negative value ensures these are not chosen.
    priorities[~fit_mask] = -1e9

    return priorities
```
