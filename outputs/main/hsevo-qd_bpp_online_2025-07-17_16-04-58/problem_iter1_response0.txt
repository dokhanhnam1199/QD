```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate wasted space if item is added to each bin.
    wasted_space = bins_remain_cap - item

    # Give a very high priority to bins where the item fits perfectly.
    perfect_fit = np.isclose(wasted_space, 0)
    priorities[perfect_fit] = np.inf

    # Give high priority to bins where the wasted space is minimal and the item fits.
    fit = wasted_space >= 0
    if np.any(fit):
        priorities[fit] = 1.0 / (wasted_space[fit] + 1e-6)  # Avoid division by zero

        # Bonus for filling the bin more completely (higher item/capacity ratio).
        priorities[fit] += item / (bins_remain_cap[fit] + 1e-6)

    # Very negative priority for bins where item doesn't fit.
    priorities[~fit] = -np.inf
    return priorities
```
