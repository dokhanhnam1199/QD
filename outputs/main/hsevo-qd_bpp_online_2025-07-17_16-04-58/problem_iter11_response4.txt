```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill rate, remaining capacity optimization, and diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item

    # Fill Rate Priority
    fill_rate_priority = (item / bins_remain_cap) * feasible_bins
    priorities[feasible_bins] += fill_rate_priority[feasible_bins] * 1.2

    # Remaining Capacity Penalty (to prevent huge waste)
    remaining_capacity_penalty = np.abs(remaining_capacity_after_placement) * feasible_bins
    priorities[feasible_bins] -= remaining_capacity_penalty[feasible_bins] * 0.3

    # Diversity Factor (randomness to explore different bin combinations)
    diversity_factor = np.random.rand(len(bins_remain_cap)) * 0.05
    priorities += diversity_factor

    # Prioritize bins close to item size.
    closest_fit_bonus = feasible_bins * (1 - np.abs(bins_remain_cap - item) / np.max(bins_remain_cap))
    priorities[feasible_bins] += closest_fit_bonus[feasible_bins] * 0.7

    return priorities
```
