```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Objective 1: Fill bins as completely as possible
    # Prioritize bins where the remaining capacity after placement is small.
    fill_priority = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)
    priorities[feasible_bins] += fill_priority

    # Objective 2: Avoid fragmentation (leaving small, unusable spaces)
    # Penalize bins that would have very small remaining capacity after placement.
    fragmentation_threshold = 0.15  # Tunable parameter:  Adjust based on item size distribution.
    fragmented_bins = feasible_bins & (remaining_capacity_after_placement >= 0) & (remaining_capacity_after_placement < fragmentation_threshold)
    priorities[fragmented_bins] -= 3.0 # Tunable parameter: Strength of penalty

    # Objective 3: Balance load across bins
    # Prefer bins that are relatively empty (but still feasible) to avoid concentrating items in a few bins.
    # This can improve packing efficiency in the long run.
    empty_bin_threshold = 0.7  # Tunable parameter: Define "relatively empty" (e.g., > 70% capacity remaining).
    relatively_empty_bins = feasible_bins & (bins_remain_cap > empty_bin_threshold)
    priorities[relatively_empty_bins] += 1.5  # Tunable parameter: Strength of preference for empty bins.

    # Objective 4: Reward near perfect fits.

    near_perfect_fit_threshold = 0.05 # Tunable parameter: defines a near perfect fit
    near_perfect_bins = feasible_bins & (remaining_capacity_after_placement >=0) & (remaining_capacity_after_placement <= near_perfect_fit_threshold)
    priorities[near_perfect_bins] += 7.0

    return priorities
```
