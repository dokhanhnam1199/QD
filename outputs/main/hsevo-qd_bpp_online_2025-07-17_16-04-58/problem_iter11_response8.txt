```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by minimizing waste, considering fullness, and avoiding infeasibility."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        wasted_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = -wasted_space # Lower waste is better

        # Encourage filling: prioritize bins that are already somewhat full
        fullness_factor = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins]) if np.max(bins_remain_cap[feasible_bins]) > 0 else 0
        priorities[feasible_bins] += 0.1 * (1 - fullness_factor)

        # Avoid creating almost empty bins
        almost_empty = bins_remain_cap[feasible_bins] > 0.9 * np.max(bins_remain_cap)
        priorities[feasible_bins][almost_empty] -= 0.05 # Slightly penalize to use later

    return priorities
```
