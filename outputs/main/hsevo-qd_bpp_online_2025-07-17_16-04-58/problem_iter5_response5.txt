```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fullness, and feasibility."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    if not np.any(feasible_bins):
        return priorities

    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -wasted_space

    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += 0.1 * fullness_factor

    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item
    almost_full_threshold = 0.2
    almost_full_boost = 1.0
    almost_full = (remaining_capacity_after_placement / item) <= almost_full_threshold
    priorities[feasible_bins][almost_full] += almost_full_boost

    small_capacity_threshold = 0.5
    small_capacity_penalty = 0.5
    small_capacity = bins_remain_cap[feasible_bins] < small_capacity_threshold
    priorities[feasible_bins][small_capacity] -= small_capacity_penalty

    return priorities
```
