```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, waste, and fullness."""

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    priorities[feasible_bins] = 0.0
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Target a small ideal remaining capacity
    ideal_remaining_capacity = 0.1
    deviation = np.abs(remaining_capacity_after_placement - ideal_remaining_capacity)
    priorities[feasible_bins] = 1.0 / (deviation + 0.00001)

    # Boost almost-full bins
    almost_full_threshold = 0.05
    almost_full_bins = (remaining_capacity_after_placement <= almost_full_threshold)
    priorities[feasible_bins][almost_full_bins] += 5.0

    # Penalize large remaining capacity to avoid fragmentation
    large_capacity_threshold = 0.75
    large_capacity_bins = bins_remain_cap[feasible_bins] > large_capacity_threshold
    priorities[feasible_bins][large_capacity_bins] -= 1.0

    # Add waste minimization component using inverse of remaining capacity
    priorities[feasible_bins] += 0.5 / (remaining_capacity_after_placement + 0.00001)

    return priorities
```
