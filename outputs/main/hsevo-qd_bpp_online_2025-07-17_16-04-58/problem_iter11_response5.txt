```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on ideal capacity and fragmentation."""

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    priorities[feasible_bins] = 0.0

    remaining_capacity = bins_remain_cap[feasible_bins] - item

    # Target Capacity: Aim for a remaining capacity close to target.
    target_capacity = 0.2
    capacity_deviation = np.abs(remaining_capacity - target_capacity)
    priorities[feasible_bins] += 1.0 / (capacity_deviation + 0.00001)

    # Almost Full Bonus: Reward bins that are nearly full after placement.
    almost_full_threshold = 0.05
    almost_full = remaining_capacity <= almost_full_threshold
    priorities[feasible_bins][almost_full] += 5.0

    # Fragmentation Penalty: Discourage placing items in mostly empty bins.
    large_capacity_threshold = 0.75
    large_capacity = bins_remain_cap[feasible_bins] > large_capacity_threshold
    priorities[feasible_bins][large_capacity] -= 1.0
    return priorities
```
