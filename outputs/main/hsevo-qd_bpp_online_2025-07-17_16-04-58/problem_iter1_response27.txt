```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. Remaining capacity: Bins with remaining capacity closer to the item size are preferred (first-fit-decreasing inspired).
    2. Waste minimization: A penalty is applied if adding the item leads to excessive waste.
    3. Number of Items in the bin (Encourage Filling): Give bin with more items in them higher priority. Assume, this data are captured with the reciprocal of available capacity.
    4. Prevent excessive filling(Regularization): Prevent very full bins to encourage use of multiple bins.


    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid negative infinities later
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Capacity difference: lower difference is better. Add a tiny offset to avoid div by zero.
    capacity_diff = np.abs(bins_remain_cap - item) + 1e-9
    priorities += -capacity_diff  # Invert the difference, so smaller is better (higher priority). Add small negative value to all to make lowest value 0

    # Waste minimization: penalize bins if adding the item leads to substantial waste.
    potential_waste = bins_remain_cap - item
    waste_penalty = np.where(potential_waste > 0, -potential_waste, -np.inf)  # Negative waste penalty
    priorities += waste_penalty

    # Encourage filling: prioritize bins that are already somewhat full (avoid creating many almost-empty bins). We approximate the item_number in bin with its fullness i.e., 1/remaining capacity.
    fullness_factor = 1.0 / (bins_remain_cap + 1e-9) # Higher value if the bin is fuller
    priorities += fullness_factor

    # Regularization : if the bin is nearly full, give it some penalty
    is_nearly_full = np.where(bins_remain_cap < 1.1 * item , -0.5, 0) # 1.1 is somewhat arbitrary here to determine nearness.
    priorities += is_nearly_full


    return priorities
```
