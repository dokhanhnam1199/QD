```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fullness, and a target capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    if not np.any(feasible_bins):
        return priorities

    # Target remaining capacity (e.g., aiming for bins to be ~80% full).
    target_capacity = 1.2 * item
    capacity_diff = np.abs(bins_remain_cap[feasible_bins] - target_capacity)
    priorities[feasible_bins] -= 0.5 * capacity_diff  # Penalize deviation from target

    # Minimize wasted space.
    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] -= wasted_space

    # Encourage fullness.
    fullness = 1 - (bins_remain_cap[feasible_bins] / (bins_remain_cap[feasible_bins] + item))
    priorities[feasible_bins] += 0.2 * fullness

    # Give a slight bonus to almost full bins.
    almost_full = (bins_remain_cap[feasible_bins] >= item) & (bins_remain_cap[feasible_bins] <= 1.1 * item)
    priorities[feasible_bins][almost_full] += 0.3

    return priorities
```
