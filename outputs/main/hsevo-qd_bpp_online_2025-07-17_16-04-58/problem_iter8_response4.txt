```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                target_capacity: float = 0.1, #tuneable param 1
                waste_penalty: float = 1.0,  #tuneable param 2
                fullness_boost: float = 0.1) -> np.ndarray:
    """Prioritizes bins based on feasibility, waste, and fullness, tunable."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Never choose infeasible bins

    feasible_bins = ~infeasible_bins
    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -waste_penalty * wasted_space  # Minimize waste

    # Target remaining capacity, penalize deviation
    capacity_diff = np.abs(bins_remain_cap[feasible_bins] - item - target_capacity)
    priorities[feasible_bins] -= capacity_diff

    # Encourage filling: slightly prioritize fuller bins
    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += fullness_boost * fullness_factor

    return priorities
```
