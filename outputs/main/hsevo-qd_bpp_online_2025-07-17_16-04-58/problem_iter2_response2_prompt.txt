{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, heavily penalize bins that cannot fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Assign infinitely low priority to infeasible bins\n\n    # For feasible bins:\n\n    # 1. Calculate the wasted space (remaining capacity after adding item).\n    wasted_space = bins_remain_cap - item\n\n    # 2. Prioritize bins with less wasted space. Smaller wasted space is better.\n    # To avoid division by zero and handle the case where wasted_space is exactly zero,\n    # add a small epsilon to the wasted space.\n    epsilon = 1e-9\n    priorities[~infeasible_bins] = -wasted_space[~infeasible_bins] # Higher priority for lower wasted space\n\n    # 3. Apply a \"gravitational\" pull effect. Give higher priority to bins that are already relatively full.\n    #    The more full, the greater the gravitational force attracting the new item.\n\n    fill_ratios = (bins_remain_cap - wasted_space) / (bins_remain_cap + epsilon)  # Avoid division by zero, and use total bin capacity, if known, can change this.\n    priorities[~infeasible_bins] += fill_ratios[~infeasible_bins] # Higher priority to more full bins.\n\n    # 4. A slight preference to more empty bins to distribute load at start\n    initial_fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[~infeasible_bins] += 0.1 * initial_fullness[~infeasible_bins]\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function considers several factors:\n    1. Remaining capacity: Bins with remaining capacity closer to the item size are preferred (first-fit-decreasing inspired).\n    2. Waste minimization: A penalty is applied if adding the item leads to excessive waste.\n    3. Number of Items in the bin (Encourage Filling): Give bin with more items in them higher priority. Assume, this data are captured with the reciprocal of available capacity.\n    4. Prevent excessive filling(Regularization): Prevent very full bins to encourage use of multiple bins.\n\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a small value to avoid negative infinities later\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Capacity difference: lower difference is better. Add a tiny offset to avoid div by zero.\n    capacity_diff = np.abs(bins_remain_cap - item) + 1e-9\n    priorities += -capacity_diff  # Invert the difference, so smaller is better (higher priority). Add small negative value to all to make lowest value 0\n\n    # Waste minimization: penalize bins if adding the item leads to substantial waste.\n    potential_waste = bins_remain_cap - item\n    waste_penalty = np.where(potential_waste > 0, -potential_waste, -np.inf)  # Negative waste penalty\n    priorities += waste_penalty\n\n    # Encourage filling: prioritize bins that are already somewhat full (avoid creating many almost-empty bins). We approximate the item_number in bin with its fullness i.e., 1/remaining capacity.\n    fullness_factor = 1.0 / (bins_remain_cap + 1e-9) # Higher value if the bin is fuller\n    priorities += fullness_factor\n\n    # Regularization : if the bin is nearly full, give it some penalty\n    is_nearly_full = np.where(bins_remain_cap < 1.1 * item , -0.5, 0) # 1.1 is somewhat arbitrary here to determine nearness.\n    priorities += is_nearly_full\n\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic directly calculates priorities based on remaining capacity, penalizing bins that cannot fit, and favoring bins with smaller remaining space, while the worst attempts a complex combination of perfect fit bonus, can-fit condition, used bin bonus and almost full penalty. The best is more concise and focused. Comparing (2nd best) vs (2nd worst), we see the second best introduces ideal remaining range. Comparing (1st) vs (2nd), we see (1st) uses inverse of remaining space with an epsilon to avoid division by zero, while (2nd) introduces an \"ideal remaining range\" and small randomness. (3rd) vs (4th) show that (3rd) adds a gravitational pull effect (higher priority to fuller bins) and slight preference to more empty bins to distribute load, while (4th) prioritize bins based on space utilization around 0.8 and gives priority based on how full the bins are. Comparing (second worst) vs (worst), we see (second worst) prioritizes based on waste relative to the mean waste, penalizes waste under 0.1, while (worst) is a complex combination. Overall: Simpler heuristics focusing on remaining capacity and avoiding fragmentation tend to perform better. Penalizing infeasible bins with -inf is very useful. The \"sweet spot\" for remaining capacity (not too much waste, not too little) is important. Exploration via randomness can help but should be a small factor. Overly complex combinations of bonuses and penalties might be detrimental.\n- \nOkay, here's a redefinition of \"Current Self-Reflection\" optimized for designing better heuristics, avoiding pitfalls, and maximizing usefulness, presented in a structured format:\n\n*   **Keywords:** Simplicity, Core Objectives (Space/Fragmentation), Infeasibility, Ideal Capacity, Incremental Complexity, Evaluation.\n\n*   **Advice:** Begin with simple heuristics focused on minimizing waste and fragmentation. Represent infeasibility clearly (e.g., -inf). Define and test different \"ideal remaining capacity\" metrics to guide allocation.\n\n*   **Avoid:** Overly complex bonus/penalty systems early on. Introduce complexity only after thoroughly evaluating simpler heuristics.\n\n*   **Explanation:** Prioritize a clear understanding of the basic heuristic's performance *before* layering on refinements. Measure the impact of each added element. Focus on core goals first.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}