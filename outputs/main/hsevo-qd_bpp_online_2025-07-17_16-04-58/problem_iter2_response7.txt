```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1: capacity fit, waste penalty, and discourages near-full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -float('inf')
        else:
            # Capacity fit (v0's exponential scaling)
            capacity_utilization = item / cap
            priorities[i] = np.exp(5 * (1 - np.abs(1 - capacity_utilization)))

            # Waste penalty (similar to v1, but simpler)
            potential_waste = cap - item
            if potential_waste > item * 0.5: # Penalize if waste is more than half of item size
                priorities[i] -= 1  # Reduce priority if too much waste

            # Discourage near-full (similar to v1, but simpler)
            if cap < 1.1 * item:
                priorities[i] -= 0.5

    # Normalize (from v0, handles -inf)
    max_priority = np.max(priorities[np.isfinite(priorities)])
    if np.isfinite(max_priority) and max_priority > 0:
        priorities[np.isfinite(priorities)] /= max_priority

    return priorities
```
