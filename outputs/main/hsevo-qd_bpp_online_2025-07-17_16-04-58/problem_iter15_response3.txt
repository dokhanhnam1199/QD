```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Objective 1: Fill bins as completely as possible (First Fit Decreasing principle)
    # Prioritize bins with smaller remaining capacity *after* placement.

    # Objective 2: Avoid creating very small remaining spaces that are hard to fill later
    # Penalize bins that would leave a small, difficult-to-fill space

    # Objective 3: Reward bins that are already relatively full
    # Give a boost to bins that are close to being full before placement

    # Objective 4: Avoid very large remaining spaces

    # Tunable parameters: weights for different objectives
    fill_weight = 2.0
    small_space_penalty = 3.0
    almost_full_reward = 4.0
    large_space_penalty = 1.0

    # Thresholds
    small_space_threshold = 0.2
    almost_full_threshold = 0.1
    large_space_threshold = 0.7

    # Calculate priority components
    # Prioritize bins with smaller remaining space AFTER placement.
    priorities[feasible_bins] += fill_weight / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Penalize small remaining spaces
    small_space_bins = feasible_bins & (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement < small_space_threshold)
    priorities[small_space_bins] -= small_space_penalty

    # Reward almost full bins
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_reward

    large_space_bins = feasible_bins & (remaining_capacity_after_placement > large_space_threshold)
    priorities[large_space_bins] -= large_space_penalty

    return priorities
```
