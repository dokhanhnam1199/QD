{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities\n\n    remaining_capacity_after_placement = bins_remain_cap - item\n    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1\n\n    # Core Priority: Fill Rate\n    fill_rate_priority = (item / bins_remain_cap) * feasible_bins\n    priorities[feasible_bins] += fill_rate_priority[feasible_bins] * 2.0  # Weight fill rate\n\n    # Remaining Capacity Optimization: Balance filling and future flexibility\n    remaining_capacity_penalty = np.abs(remaining_capacity_after_placement) * feasible_bins\n    priorities[feasible_bins] -= remaining_capacity_penalty[feasible_bins] * 0.5 # Reduced penalty.\n\n    # Encourage to fill bins with some margin left for smaller items to fit in\n    margin_threshold = 0.3\n    margin_bonus = feasible_bins & (remaining_capacity_after_placement >= item*margin_threshold) & (remaining_capacity_after_placement <= item*(1+margin_threshold))\n    priorities[margin_bonus] += 0.8\n\n    # Prioritize bins that are most close to the item size\n    closest_fit_bonus = feasible_bins * (1 - np.abs(bins_remain_cap - item) / np.max(bins_remain_cap))\n    priorities[feasible_bins] += closest_fit_bonus[feasible_bins] * 1.5\n\n    # Bin diversity - helps to select a diverse set of bins rather than keep filling the same ones all the time\n    diversity_factor = np.random.rand(len(bins_remain_cap)) * 0.1\n    priorities += diversity_factor\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        almost_full_threshold: Threshold for considering a bin almost full (as a fraction of item size).\n        almost_full_boost: Priority boost for almost full bins.\n        small_capacity_threshold: Threshold for considering a bin small capacity.\n        small_capacity_penalty: Priority penalty for small capacity bins.\n        division_eps: Epsilon value to avoid division by zero.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., all zeros)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Filter bins that can actually accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # No bin can fit the item. Return low priorities for all. Avoid errors.\n        return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates a combination of factors like remaining capacity, almost-fullness, and small capacity penalties, while the worst simply uses the negative log of the item/bin ratio. (2nd best) vs (second worst),  the second best includes fill rate, remaining capacity optimization, margin bonuses, closest fit bonuses, and a diversity factor, while the second worst only focuses on wasted space and item/bin ratio. Comparing (1st) vs (2nd), we see that the best places a greater emphasis on precisely managing remaining capacity and penalizing both under and over utilization through target capacity.  (3rd) vs (4th) shows that (3rd) considers a target capacity and fullness incentive, while (4th) focuses on feasibility, waste, and item/bin ratio. Comparing (second worst) vs (worst), we see (19th) and (20th) are identical. Overall: The best heuristics consider multiple factors, including feasibility, waste minimization, target capacity, fullness incentives, and fragmentation penalties. They also often involve tunable parameters and normalization to improve performance. More complex heuristics appear to perform better, but computational cost should be considered. Simpler approaches only focusing on ratios or waste are generally inferior.\n- \nOkay, let's redefine \"Current Self-Reflection\" to design better heuristics, avoiding the pitfalls of ineffective self-reflection. Here's a breakdown:\n\n*   **Keywords:** Adaptability, multi-factor, objective-driven, tunable, incremental refinement.\n\n*   **Advice:** Design heuristics combining multiple *carefully chosen* factors, weighting them through tunable parameters, allowing adaptation across diverse problem instances. Explicitly define and prioritize objectives.\n\n*   **Avoid:** Overly complex systems initially. Premature optimization. Relying on simple ratios. Neglecting objective-driven design.\n\n*   **Explanation:** Focus on creating flexible heuristics driven by clear, measurable objectives, gradually adding complexity and tuning parameters based on iterative evaluation. Prioritize adaptability and avoid premature optimization of overly complex systems.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}