```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates a more nuanced approach, balancing bin utilization
    with a penalty for creating excessively small remaining capacities.  It also
    includes a tunable parameter for controlling the strength of the "almost full" bonus.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Base priority: Inverse of remaining capacity after placement
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Tunable "almost full" bonus
    almost_full_threshold = 0.1
    almost_full_bonus = 7.0  # Increased bonus strength
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_bonus

    # Penalty for creating small remaining capacities
    small_capacity_threshold = 0.2
    small_capacity_penalty = 3.0  # Increased penalty strength
    small_capacity_bins = feasible_bins & (remaining_capacity_after_placement >=0 ) & (remaining_capacity_after_placement < small_capacity_threshold)
    priorities[small_capacity_bins] -= small_capacity_penalty

    # Encourage packing into emptier bins if other heuristics are equal. This can improve overall bin usage.
    # But only if the bin is still feasible.
    # This adds a small bonus to nearly empty bins.
    nearly_empty_threshold = 0.9  # The bin must be at least 90% empty
    nearly_empty_bins = feasible_bins & (bins_remain_cap > nearly_empty_threshold)
    priorities[nearly_empty_bins] += 1.0

    return priorities
```
