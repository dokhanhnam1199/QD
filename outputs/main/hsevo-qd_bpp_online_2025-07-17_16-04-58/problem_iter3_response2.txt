```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Aims for simplicity, minimizing waste and fragmentation. Explicitly handles infeasibility.
    Focuses on approaching an "ideal" remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float) # Start with -inf priority

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities # All infeasible

    priorities[feasible_bins] = 0.0  # Initialize feasible bins to 0

    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item


    # Ideal remaining capacity:  A small fraction of the bin size, or zero.
    # Goal: Leave just enough space for potentially smaller items later, or fill it completely.
    ideal_remaining = 0.05 # Try different values here, like 0.0, 0.1, etc.  Tune this parameter.

    # Calculate the "distance" from the ideal remaining capacity. Smaller distance = higher priority.
    distance_from_ideal = np.abs(remaining_capacity_after_placement - ideal_remaining)

    # Prioritize based on the inverse of this distance (plus a small constant to avoid division by zero).
    priorities[feasible_bins] = 1.0 / (distance_from_ideal + 0.0001)


    # Optional: Slight boost for bins that become completely full after placement.
    full_bin_bonus = 2.0
    completely_full_bins = feasible_bins & (remaining_capacity_after_placement <= 0.0001) #tolerance for fp errors
    priorities[completely_full_bins] += full_bin_bonus

    # Optional: Small penalty for bins that become excessively fragmented.  Avoids creating very small gaps.
    fragmentation_penalty = -1.0
    fragmented_bins = feasible_bins & (remaining_capacity_after_placement > 0.5) # Tune this threshold
    priorities[fragmented_bins] += fragmentation_penalty
    return priorities
```
