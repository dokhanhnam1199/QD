```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)  # Initialize with -inf for infeasible bins

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # All bins are infeasible

    priorities[feasible_bins] = 0.0  # Reset feasible bins to a base priority of 0

    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item


    # Define an ideal remaining capacity.  This is a crucial parameter.
    # Let's start with aiming for a small, non-zero ideal.
    ideal_remaining_capacity = 0.1 # was 0.2

    # Calculate the deviation from the ideal remaining capacity.  Smaller is better.
    deviation = np.abs(remaining_capacity_after_placement - ideal_remaining_capacity)

    # Use the inverse of the deviation as the priority.
    priorities[feasible_bins] = 1.0 / (deviation + 0.00001)  # Avoid division by zero

    # Add a bonus for bins that would be nearly full after placement.
    almost_full_threshold = 0.05  # Reduce it to 5%
    almost_full_bins = (remaining_capacity_after_placement <= almost_full_threshold)
    priorities[feasible_bins][almost_full_bins] += 5.0 # was 5.0

    # Slightly penalize bins that have a very large remaining capacity. This discourages putting small
    # items into almost empty bins. Avoids fragmentation.
    large_capacity_threshold = 0.75
    large_capacity_bins = bins_remain_cap[feasible_bins] > large_capacity_threshold
    priorities[feasible_bins][large_capacity_bins] -= 1.0 # was 2.0


    return priorities
```
