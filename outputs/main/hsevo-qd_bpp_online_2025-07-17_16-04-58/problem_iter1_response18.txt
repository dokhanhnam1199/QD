```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give a base priority for being able to fit

    # Prioritize bins with smaller remaining capacity after packing. Attempt "best fit"
    remaining_after_pack = bins_remain_cap - item
    remaining_after_pack[~can_fit] = np.inf # Penalize bins that cannot fit
    priorities[can_fit] += 1.0 / (remaining_after_pack[can_fit] + 1e-6) # Add inverse remaining capacity

    # Add a bonus for bins that are nearly full if the item is added. Aim for near perfect fit.
    near_full_threshold = 0.1 # consider nearly full if remaining capacity is less than 10% of total bin size
    total_bin_size = bins_remain_cap + (0 * bins_remain_cap)  # Assumes all bins have the same capacity to begin
    near_full = (remaining_after_pack > 0) & (remaining_after_pack / (total_bin_size + 1e-6) < near_full_threshold) & can_fit
    priorities[near_full] += 2 # Strong encouragement to near fill

    # Avoid fragmentation, penalize usage of almost empty bins to some extent.
    nearly_empty_threshold = 0.9 # Consider nearly empty if remaining capacity is > 90% full.
    nearly_empty = bins_remain_cap / (total_bin_size + 1e-6) > nearly_empty_threshold
    priorities[nearly_empty] -= 0.5 * (priorities[nearly_empty] > 0) # Reduce priority. Don't go below 0

    return priorities
```
