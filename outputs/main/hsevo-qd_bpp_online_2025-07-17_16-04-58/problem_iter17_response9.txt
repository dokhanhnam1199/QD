```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                division_eps: float = 1e-05,
                almost_full_threshold: float = 0.05,
                almost_full_boost: float = 2.0,
                small_capacity_threshold: float = 0.2,
                small_capacity_penalty: float = -0.5) -> np.ndarray:
    """Combines ratio-based priority with capacity considerations."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    # Base priority: item size relative to remaining capacity
    ratios = item / (bins_remain_cap + division_eps)
    priorities[feasible_bins] = -np.log(ratios[feasible_bins])

    # Almost full bin boost
    almost_full = (bins_remain_cap - item) / item < almost_full_threshold
    priorities[almost_full & feasible_bins] += almost_full_boost

    # Small capacity penalty
    small_capacity = bins_remain_cap < small_capacity_threshold
    priorities[small_capacity & feasible_bins] += small_capacity_penalty

    return priorities
```
