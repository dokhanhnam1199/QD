```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Consider bins where the item fits
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # Normalize remaining capacity of feasible bins
        normalized_capacities = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins])

        # Give higher priority to bins with remaining capacity closest to item size (Best-Fit heuristic)
        # Use exponential to exaggerate differences
        priorities[feasible_bins] = np.exp(-np.abs(bins_remain_cap[feasible_bins] - item))

        # Give slight bonus to bins that are fuller (encourages filling existing bins).
        priorities[feasible_bins] += normalized_capacities * 0.1  # Scale the bonus

        #Penalize bins which have extremely high remain capacity, such as > 3 * item
        very_large_capacity = bins_remain_cap > 3 * item
        priorities[very_large_capacity] = 0 # force usage of bins if available
    else:
        # If the item doesn't fit in any bin, assign lowest possible priority to all bins.
        priorities[:] = -1e9 # make the value very small to give zero weight

    return priorities
```
