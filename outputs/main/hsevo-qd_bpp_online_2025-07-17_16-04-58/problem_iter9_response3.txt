```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Core priority: Inverse of remaining capacity after placement
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Parameter tuning for "almost full" and "small capacity" bonuses/penalties
    almost_full_threshold_fraction = 0.05  # Tunable: Fraction of item size to consider "almost full"
    small_capacity_threshold_fraction = 0.2 # Tunable: Fraction of bin size to consider "small capacity"

    almost_full_threshold = item * almost_full_threshold_fraction
    small_capacity_threshold = np.max(bins_remain_cap) * small_capacity_threshold_fraction # Use max bin size for threshold

    # Almost full bonus (tuned)
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold)
    almost_full_bonus = 3.0 # Tunable bonus for almost full bins
    priorities[almost_full_bins] += almost_full_bonus

    # Small capacity penalty (tuned)
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    small_capacity_penalty = 1.5 # Tunable penalty for small capacity bins
    priorities[small_capacity_bins] -= small_capacity_penalty

    # Introduce a slight preference for bins with initial higher capacity (tuned).
    # Might prevent excessive fragmentation.
    initial_capacity_preference = 0.1 # Tunable preference factor
    priorities[feasible_bins] += initial_capacity_preference * (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap))

    # Moderate penalty for bins where the item fills over 90% of the remaining capacity
    overfill_threshold = 0.9
    overfill_bins = feasible_bins & (remaining_capacity_after_placement[feasible_bins] < bins_remain_cap[feasible_bins] * (1 - overfill_threshold))
    overfill_penalty = 0.75
    priorities[overfill_bins] -= overfill_penalty

    return priorities
```
