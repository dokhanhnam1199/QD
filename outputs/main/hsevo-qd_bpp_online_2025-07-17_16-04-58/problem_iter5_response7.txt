```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority score for each bin based on remaining capacity.

    Prioritizes feasible bins with smaller remaining capacity
    and boosts almost-full bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity = bins_remain_cap - item
    remaining_capacity[remaining_capacity < 0] = -1

    priorities[feasible_bins] = 1.0 / (remaining_capacity[feasible_bins] + 0.00001)

    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 5.0

    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 2.0

    return priorities
```
