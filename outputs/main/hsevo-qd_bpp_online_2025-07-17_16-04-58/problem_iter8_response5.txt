```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                target_capacity_ratio: float = 0.9,
                waste_penalty_factor: float = 1.0,
                fullness_bonus_factor: float = 0.1) -> np.ndarray:
    """Prioritizes bins considering feasibility, waste, and fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -waste_penalty_factor * wasted_space

    # Target capacity: prioritize bins close to the target fill ratio
    target_capacity = item / target_capacity_ratio
    capacity_diff = np.abs(bins_remain_cap[feasible_bins] - target_capacity)
    priorities[feasible_bins] -= capacity_diff * 0.01

    # Encourage filling
    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += fullness_bonus_factor * fullness_factor

    return priorities
```
