```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on target capacity, fullness, and penalties."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = np.inf

    # Target remaining capacity around 10%.
    target_capacity = 0.1
    capacity_diff = np.abs(remaining_capacity_after_placement - target_capacity)
    priorities[feasible_bins] = -capacity_diff[feasible_bins]

    # Incentivize almost full bins.
    almost_full_threshold = 0.05
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 10.0

    # Penalize small remaining capacity.
    small_capacity_threshold = 0.25
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 5.0

    # Bonus for bins where item fits snugly (closest fit).
    closest_fit_bonus = 2.0
    priorities[feasible_bins] += closest_fit_bonus / (bins_remain_cap[feasible_bins] - item + 0.001)

    return priorities
```
