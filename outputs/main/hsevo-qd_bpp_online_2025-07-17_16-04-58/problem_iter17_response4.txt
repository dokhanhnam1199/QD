```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and target capacity with tunable params."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item

    # Waste Minimization: Prioritize bins with least remaining capacity
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Target Capacity: Penalize bins too far from target
    target_capacity = 0.5  # Target remaining capacity percentage. Could be a parameter.
    ideal_remaining = target_capacity * item #Ideal remaining capacity after placement

    capacity_difference = np.abs(remaining_capacity_after_placement - ideal_remaining)
    capacity_penalty = np.where(feasible_bins, 1.0 / (capacity_difference + 0.00001), 0)

    priorities[feasible_bins] += capacity_penalty[feasible_bins]

    almost_full_threshold = 0.1  # Tuning parameter
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 5.0  # Tuning parameter

    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 2.0  # Tuning parameter


    return priorities
```
