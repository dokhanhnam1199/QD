```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by black hole physics:
    Bins nearing capacity (event horizon) have higher priority.
    Larger items warp the "spacetime" (bin capacity) more.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log
    epsilon = 1e-9
    valid_bins = bins_remain_cap > epsilon

    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        remain_cap_valid = bins_remain_cap[valid_bins]
        # Calculate "gravitational potential" based on remaining capacity.
        # Bins with capacity closer to item size have higher potential (priority).
        potential = np.exp(-np.abs(remain_cap_valid - item) / (item + epsilon))

        # Normalize the remaining capacity
        normalized_cap = remain_cap_valid / np.max(bins_remain_cap)

        # Combine potential with remaining capacity
        priorities[valid_bins] = potential * (1 - normalized_cap) # Prefer bins that aren't already too full
    return priorities
```
