```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -np.inf

    # Target capacity: Aim for a specific remaining capacity.  Let's start with 10% of bin size.
    target_capacity = 0.1  # Tuneable. Represents the fraction of bin size we ideally want remaining.
    bin_size = bins_remain_cap + item # Estimate of bin size before item placement

    # Calculate the difference between the remaining capacity and the target
    capacity_difference = np.abs(remaining_capacity_after_placement - target_capacity * bin_size)
    capacity_difference[remaining_capacity_after_placement == -np.inf] = np.inf  # Penalize infeasible bins

    # Prioritize bins where the remaining capacity is closest to the target. Infeasible bins have the lowest priority.
    priorities = -capacity_difference

    # Add a bonus for bins that will be nearly full after adding the item (encourages full bins)
    almost_full_threshold = 0.05 # Tuneable. within 5% of being completely full
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * bin_size)
    priorities[almost_full_bins] += 3.0

    # Penalize very small remaining capacities
    small_capacity_threshold = 0.2 # Tuneable. Less than 20% of bin capacity remaining
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold * bin_size)
    priorities[small_capacity_bins] -= 1.0


    return priorities
```
