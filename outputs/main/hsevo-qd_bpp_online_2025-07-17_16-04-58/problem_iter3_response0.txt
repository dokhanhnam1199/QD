```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)  # Infeasible bins get -inf priority

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # All bins infeasible

    remaining_capacity_after_placement = bins_remain_cap - item
    feasible_remaining_capacity = remaining_capacity_after_placement[feasible_bins]

    # Ideal remaining capacity: Try to leave a specific amount for potential future items.
    ideal_remaining = 0.25  # Tune this!  A quarter of the bin size is a good starting point
    capacity_difference = np.abs(feasible_remaining_capacity - ideal_remaining)

    # Higher priority for bins closer to the ideal remaining capacity
    priorities[feasible_bins] = -capacity_difference  # Minimize the difference

    # Slight bonus for filling bins more completely
    fill_bonus = (item / bins_remain_cap[feasible_bins]) * 0.5  # Percentage of bin filled * bonus factor
    priorities[feasible_bins] += fill_bonus

    # Penalize very small remaining capacities to avoid extreme fragmentation.  Adjust threshold.
    small_capacity_threshold = 0.15
    small_capacity_bins = feasible_bins & (bins_remain_cap < item + small_capacity_threshold) # Bins close to full after placement
    priorities[small_capacity_bins] -= 1.0 #Adjust the negative value for fragmentation penalization

    return priorities
```
