```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that have just enough space for the item,
    avoiding both near-empty bins and bins that are too full. It uses a
    combination of factors to achieve this:

    1.  A "fit score" that is high when the remaining capacity is close to the item size.

    2.  A penalty for bins that are too empty.

    3.  A bonus for bins that are already relatively full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Epsilon to avoid division by zero and log of zero
    epsilon = 1e-9
    
    # Calculate "fit score" - higher when remaining capacity is close to item size.
    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + epsilon))

    # Calculate penalty for bins that are too empty (encourage filling nearly full bins)
    empty_penalty = np.exp(-bins_remain_cap / (item + epsilon)) # larger penalty for larger remain_cap

    # Bonus for bins that are relatively full (avoid fragmenting large bins early)
    fullness_bonus = bins_remain_cap / (np.max(bins_remain_cap)+epsilon) #Normalized bin capacities

    priorities = fit_score - empty_penalty + fullness_bonus
    # set priority to 0 if remain_cap is smaller than item
    priorities[bins_remain_cap < item] = 0.0

    return priorities
```
