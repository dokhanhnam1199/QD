```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate slack (remaining capacity after adding the item)
    slack = bins_remain_cap - item

    # Prioritize bins where the item fits (slack >= 0)
    fit_mask = slack >= 0

    if np.any(fit_mask):  # at least one bin fits the item
        # Calculate a score based on remaining capacity: Prefer bins with tighter fit
        priorities[fit_mask] = (bins_remain_cap[fit_mask] - item)**-1 # Inverted slack for tighter fit

        # Optionally, apply a transformation (e.g., exponential) for greater discrimination
        priorities[fit_mask] = np.exp(priorities[fit_mask])
    else:
        # If no bin fits, prioritize the bin with least wasted space if item were to be placed
         priorities = (item - bins_remain_cap)
         priorities = -priorities
    return priorities
```
