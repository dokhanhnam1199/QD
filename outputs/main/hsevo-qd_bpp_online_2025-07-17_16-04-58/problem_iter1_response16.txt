```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers multiple factors:
    1.  Remaining capacity: Bins with capacity close to item size are preferred (First Fit Decreasing principle).
    2.  Penalty for exceeding bin capacity: Heavily penalizes exceeding capacity.
    3.  Reward for perfect fit: Gives a substantial reward for perfect fit.
    4.  Normalize priorities to avoid very large/small values.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            # Significant penalty for exceeding capacity. Avoid this at almost all costs.
            priorities[i] = -float('inf')
        elif cap == item:
            # High reward for perfect fit
            priorities[i] = 1000.0
        else:
            # Prioritize bins that have remaining capacity close to item size.  Use exponential scaling.
            capacity_utilization = item / cap  # fraction of the bin that would be used.
            priority_score = np.exp(5 * (1 - np.abs(1 - capacity_utilization))) # Peak priority when cap == item

            priorities[i] = priority_score

    # Normalize the priorities to avoid extremely large or small numbers, while preserving ordering.
    max_priority = np.max(priorities[np.isfinite(priorities)]) #ignore -inf when normalizing.
    if np.isfinite(max_priority) and max_priority > 0: #avoid 0 division. make sure some values are not -inf.
        priorities[np.isfinite(priorities)] /= max_priority # Only normalize those that aren't inf
    
    return priorities
```
