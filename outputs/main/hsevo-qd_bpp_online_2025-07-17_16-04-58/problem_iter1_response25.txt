```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item

    # First Fit Decreasing inspired: Prefer bins where the item fits, but not too snugly
    fit_mask = remaining_capacities >= 0
    if np.any(fit_mask):
        # Give higher priority to bins where remaining capacity is a good fraction of item size
        priorities[fit_mask] = (remaining_capacities[fit_mask] / item) 

        # Penalize bins that are almost full after packing
        almost_full_mask = (remaining_capacities[fit_mask] / item) < 0.2 
        priorities[fit_mask][almost_full_mask] *= 0.5  # Reduce priority if it's becoming too full


    # If no bin fits, penalize bins heavily based on how much they overflow, but less aggressively than version 1, allowing the placement.
    else:
        overflow = item - bins_remain_cap
        priorities = -np.log(overflow + 1e-6) # Add small constant to avoid log(0)

    return priorities
```
