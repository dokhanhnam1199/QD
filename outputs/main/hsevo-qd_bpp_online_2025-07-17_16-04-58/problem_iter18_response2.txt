```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including waste,
    target capacity, fullness, and fragmentation, with tunable parameters and normalization.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # 1. Waste Minimization (Primary Objective):
    waste = remaining_capacity_after_placement
    priorities[feasible_bins] = 1.0 / (waste[feasible_bins] + 0.00001)  # Maximize space utilization
    waste_weight = 0.6  # Tunable weight for waste minimization
    priorities[feasible_bins] *= waste_weight


    # 2. Target Remaining Capacity:
    target_capacity = 0.6 * np.max(bins_remain_cap)  # Dynamic target capacity (adjust 0.5 if necessary)
    deviation_from_target = np.abs(remaining_capacity_after_placement - target_capacity)
    target_weight = 0.2 # Tunable weight
    priorities[feasible_bins] += (1.0 / (deviation_from_target[feasible_bins] + 0.00001)) * target_weight

    # 3. Almost Full Bonus:
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * np.max(bins_remain_cap)) #Scale threshold to max bin size
    almost_full_bonus = 0.15  # Tunable bonus
    priorities[almost_full_bins] += almost_full_bonus

    # 4. Fragmentation Penalty:
    small_capacity_threshold = 0.2 * np.max(bins_remain_cap)  # Scale threshold to max bin size
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    fragmentation_penalty = 0.05  # Tunable penalty
    priorities[small_capacity_bins] -= fragmentation_penalty


    #5. Normalize priorities (Important for combining different criteria)
    max_priority = np.max(priorities[feasible_bins])
    if max_priority > 0:
        priorities[feasible_bins] /= max_priority


    return priorities
```
