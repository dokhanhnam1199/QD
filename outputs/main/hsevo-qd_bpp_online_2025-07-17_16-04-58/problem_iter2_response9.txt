```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and waste."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_waste = bins_remain_cap - item

    # Infeasible bins get -inf
    priorities[potential_waste < 0] = -np.inf

    # Prioritize bins with smaller waste if feasible
    waste_penalty = np.where(potential_waste >= 0, -potential_waste, 0)
    priorities += waste_penalty

    # Encourage filling (avoid many almost-empty bins)
    fullness_factor = 1.0 / (bins_remain_cap + 1e-9)
    priorities += fullness_factor

    return priorities
```
