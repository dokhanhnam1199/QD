```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target capacity, and adaptive parameters."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Prioritize smaller remaining space after placement
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 1e-5)

    # Tunable parameters
    almost_full_threshold = 0.1
    almost_full_boost = 5.0
    small_capacity_threshold = 0.2
    small_capacity_penalty = -2.0

    # Boost "almost full" bins
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_boost

    # Penalize "small capacity" bins
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] += small_capacity_penalty

    return priorities
```
