import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, almost_full_threshold: float = 0.03324198711597248, almost_full_boost: float = 0.8328390085184452, small_capacity_threshold: float = 0.10711007947889506, small_capacity_penalty: float = -2.182303400159938, division_eps: float = 9.27870094973824e-05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        almost_full_threshold: Threshold for considering a bin almost full (as a fraction of item size).
        almost_full_boost: Priority boost for almost full bins.
        small_capacity_threshold: Threshold for considering a bin small capacity.
        small_capacity_penalty: Priority penalty for small capacity bins.
        division_eps: Epsilon value to avoid division by zero.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., all zeros)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Filter bins that can actually accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # No bin can fit the item. Return low priorities for all. Avoid errors.
        return priorities

    # Calculate remaining capacity AFTER placing the item (if possible)
    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1  # Handle infeasible bins without np.inf

    # Prioritize bins with smaller remaining space AFTER placement.
    # This encourages filling bins completely.
    # Also, penalize nearly-full bins more heavily. A slight margin may be desirable to accommodate future items.

    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + division_eps) # Avoid division by zero

    # Boost priority of bins that are close to being full, but only if feasible.
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_boost  # A larger value to significantly increase the priority

    # Very small capacity bins are penalized harshly but not excluded
    # Penalizes fragmented fills and may create bin almost full but not full
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] += small_capacity_penalty

    return priorities
