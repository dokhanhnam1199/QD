import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                target_capacity: float = 0.1762076672119231,
                almost_full_threshold: float = 0.16768536578468712,
                almost_full_bonus: float = 19.093016972723966,
                small_capacity_threshold: float = 0.14603794072022008,
                small_capacity_penalty: float = 3.204228609780553) -> np.ndarray:
    """
    Combines target capacity, fullness incentives, and fragmentation penalties.
    Prioritizes bins that are feasible and close to ideal fullness.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = np.inf

    # Target a remaining capacity.
    capacity_diff = np.abs(remaining_capacity_after_placement - target_capacity)

    priorities[feasible_bins] = -capacity_diff[feasible_bins]

    # Almost full bonus.
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_bonus

    # Small capacity penalty.
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= small_capacity_penalty

    return priorities
