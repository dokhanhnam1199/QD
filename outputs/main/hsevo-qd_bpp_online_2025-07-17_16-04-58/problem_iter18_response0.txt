```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of factors, including waste,
    target capacity, bin fullness, and fragmentation avoidance, with
    normalization and tunable parameters for improved performance.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = np.inf  # Mark infeasible as infinitely bad

    # 1. Waste Minimization (Primary Objective)
    waste = remaining_capacity_after_placement
    priorities[feasible_bins] += 1.0 / (waste[feasible_bins] + 0.00001)

    # 2. Target Capacity (Aim for bins to be partially full)
    target_capacity = 0.6 * np.max(bins_remain_cap)  # Adaptive target (tunable)
    deviation_from_target = np.abs(remaining_capacity_after_placement - target_capacity)
    priorities[feasible_bins] += 0.5 / (deviation_from_target[feasible_bins] + 0.00001)  # Reduced weight

    # 3. Almost Full Bonus (Incentivize near-optimal packing)
    almost_full_threshold = 0.15  # Tunable threshold (percentage of item size)
    almost_full_bins = feasible_bins & (bins_remain_cap <= item + almost_full_threshold * item)
    priorities[almost_full_bins] += 2.0  # Reduced bonus

    # 4. Fragmentation Penalty (Avoid creating small fragments)
    small_capacity_threshold = 0.25 * np.max(bins_remain_cap)  # Adaptive threshold
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 1.0  # Reduced penalty

    # 5. Normalize Priorities (Scale to 0-1 range)
    if np.any(priorities > 0):
        max_priority = np.max(priorities)
        min_priority = np.min(priorities[priorities > 0]) if np.any(priorities > 0) else 0.0
        priorities[feasible_bins] = (priorities[feasible_bins] - min_priority) / (max_priority - min_priority + 0.00001)


    return priorities
```
