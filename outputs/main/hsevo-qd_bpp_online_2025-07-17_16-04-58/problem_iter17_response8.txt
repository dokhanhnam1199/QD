```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, target capacity, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity = bins_remain_cap - item
    remaining_capacity[remaining_capacity < 0] = -1

    # Objective 1: Minimize wasted space.
    priorities[feasible_bins] += 1.0 / (remaining_capacity[feasible_bins] + 0.00001)

    # Objective 2: Target remaining capacity.
    target_capacity = 0.2  # Tuneable: Target remaining capacity.
    capacity_diff = np.abs(remaining_capacity - target_capacity)
    priorities[feasible_bins] -= capacity_diff[feasible_bins]

    # Objective 3: Penalize fragmentation.
    fragmentation_threshold = 0.1
    fragmented_bins = feasible_bins & (remaining_capacity >= 0) & (remaining_capacity < fragmentation_threshold)
    priorities[fragmented_bins] -= 2.0  # Tuneable: Fragmentation penalty

    return priorities
```
