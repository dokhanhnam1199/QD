```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority scores for bins considering fullness, fragmentation, and target capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Fullness objective: prioritize bins with smaller remaining capacity
    fullness_priority = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)
    priorities[feasible_bins] += fullness_priority

    # Fragmentation objective: penalize small remaining capacity after placement
    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (remaining_capacity_after_placement >= 0) & (remaining_capacity_after_placement < small_capacity_threshold)
    priorities[small_capacity_bins] -= 2.0

    # Almost full objective: boost bins that are almost full
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 5.0

    return priorities
```
