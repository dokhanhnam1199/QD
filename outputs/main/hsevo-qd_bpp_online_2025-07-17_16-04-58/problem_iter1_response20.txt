```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Filter out bins that cannot accommodate the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority if infeasible

    # 2. Remaining Capacity Consideration
    #   - Higher priority to bins with smaller remaining capacity that *can* fit the item.
    #   - The closer the item size is to the remaining capacity, the higher the priority
    
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
      priorities[feasible_bins] = (bins_remain_cap[feasible_bins] - item)
      priorities[feasible_bins] = -np.abs(priorities[feasible_bins]) # Closer to zero is better

      # Normalize the scores to some extent (optional, but can improve performance)
      min_priority = np.min(priorities[feasible_bins])
      max_priority = np.max(priorities[feasible_bins])

      if max_priority != min_priority:
        priorities[feasible_bins] = (priorities[feasible_bins] - min_priority) / (max_priority - min_priority)


    return priorities
```
