```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Try to fill bins as much as possible, but avoid overflowing significantly.
    # Give a higher priority to bins that can fit the item relatively tightly,
    # encouraging efficient packing.
    fit_mask = bins_remain_cap >= item
    almost_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap < 1.5 * item)  # Adjust 1.5 as needed
    nearly_full_mask = bins_remain_cap < 0.1

    # Give priority to bins that can fit (positive score) and punish those that can't (negative score)
    priorities[fit_mask] = 1.0 / (bins_remain_cap[fit_mask] - item + 0.0001) #Prioritize tighter fits
    priorities[~fit_mask] = -1000.0  # Extremely low priority if it doesn't fit (can adjust value)
    priorities[nearly_full_mask] = -1000.0 # Never try to add to nearly full bins as they are almost wasted space

    # Add small random number to break ties and avoid getting stuck. Helps exploration.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.00001

    return priorities
```
