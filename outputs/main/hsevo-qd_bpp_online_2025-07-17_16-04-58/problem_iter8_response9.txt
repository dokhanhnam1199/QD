```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity = bins_remain_cap - item
    remaining_capacity[remaining_capacity < 0] = -1
    
    # Waste minimization
    priorities[feasible_bins] = 1.0 / (remaining_capacity[feasible_bins] + 1e-6)

    # Encourage filling
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item * (1 + almost_full_threshold))
    priorities[almost_full_bins] += 5.0
    
    # Tunable parameter to adjust the trade-off between waste and fullness
    waste_penalty_factor = 2.0 
    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= waste_penalty_factor

    return priorities
```
