```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, fullness, and infeasibility."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    waste = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -waste  # Minimize waste

    # Encourage filling nearly full bins
    almost_full = bins_remain_cap[feasible_bins] > 0.75 * np.max(bins_remain_cap)
    priorities[feasible_bins][almost_full] += 1.0  # Give priority to almost full bins

    # Discourage creating very small remaining capacity
    small_remaining = (waste > 0) & (waste < 0.1 * np.max(bins_remain_cap))
    priorities[feasible_bins][small_remaining] -= 0.5  # Penalize small remaining

    return priorities
```
