```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on multiple factors with normalization and tunable parameters."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    # 1. Waste Minimization: Primary Goal
    waste = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = 1.0 / (waste + 0.00001)  # Inverted waste (smaller waste = higher priority)

    # 2. Target Capacity: Aim for a percentage of bin capacity
    target_capacity_fraction = 0.75 # Tuneable parameter
    target_capacity = target_capacity_fraction * np.max(bins_remain_cap)
    remaining_capacity_after_placement = bins_remain_cap - item
    deviation_from_target = np.abs(remaining_capacity_after_placement - target_capacity)
    
    # Normalize deviation to [0, 1]
    max_deviation = np.max(np.abs(bins_remain_cap - target_capacity)) # Maximum possible deviation
    normalized_deviation = deviation_from_target / (max_deviation + 0.00001)
    
    # Incorporate target capacity into priority, but less aggressively
    priorities[feasible_bins] += (1 - normalized_deviation[feasible_bins]) * 0.7 # Tunable weight: 0.7

    # 3. Almost Full Bonus: Incentivize filling bins completely.
    almost_full_threshold = 0.1 # Tuneable parameter
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * np.max(bins_remain_cap))
    priorities[almost_full_bins] += 3.0 # Tunable bonus

    # 4. Fragmentation Penalty: Penalize bins with small remaining capacity *after* placement.
    small_capacity_threshold = 0.2 # Tuneable parameter
    remaining_capacity_after_placement_feasible = remaining_capacity_after_placement[feasible_bins]
    small_capacity_bins = remaining_capacity_after_placement_feasible > 0 & (remaining_capacity_after_placement_feasible < small_capacity_threshold * np.max(bins_remain_cap)) # Consider only bins that are still valid and meet threshold

    if np.any(small_capacity_bins):
        feasible_indices = np.where(feasible_bins)[0] # Get indices of feasible bins
        priorities[feasible_indices[small_capacity_bins]] -= 1.5 #Tunable penalty

    # Normalize priorities: Scale to [0, 1] to prevent domination by any single factor
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)

    if max_priority > min_priority:  # Avoid division by zero if all priorities are the same.
        priorities = (priorities - min_priority) / (max_priority - min_priority)

    return priorities
```
