```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1  # Mark infeasible

    # Target a remaining capacity close to a desirable 'target'.
    # If it is not possible, a bin with smallest waste.
    target_capacity = 0.1  # A parameter to tune
    capacity_diff = np.abs(remaining_capacity_after_placement - target_capacity)
    capacity_diff[remaining_capacity_after_placement < 0] = np.inf #Exclude infeasible bins from ideal match

    # Primary priority: Closeness to the target capacity
    priorities[feasible_bins] = -capacity_diff[feasible_bins]

    #Secondary Priorities
    # 1. Bins close to full are given higher priority (First-Fit-Decreasing principle to avoid waste)
    almost_full_threshold = 0.05  # Even stricter full threshold
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 10.0 #Increased weight to favor these bins

    # 2. Prevent bins with small capacity by penalizing them
    small_capacity_threshold = 0.25 #Slightly increased threshold
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 5.0

    # 3. Add a small bonus to bins that are nearly empty. This might encourage early bin fills, reducing the number of bins used at the end
    nearly_empty_threshold = 0.9
    nearly_empty_bins = feasible_bins & (bins_remain_cap > nearly_empty_threshold)
    priorities[nearly_empty_bins] += 2.0
    return priorities
```
