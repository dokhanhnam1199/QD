```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Base priority: Inverse of remaining capacity, encouraging fuller bins
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Parameters for tuning
    almost_full_threshold = 0.1  # Proportion of item size
    almost_full_bonus = 5.0
    small_capacity_threshold = 0.2 # Proportion of bin size (absolute)
    small_capacity_penalty = 2.0
    waste_proportion_threshold = 0.05 # Proportion of bin size
    waste_penalty = 3.0

    # Bonus for almost full bins
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_bonus

    # Penalty for small capacity bins
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= small_capacity_penalty

    # Penalty for creating small wasted space.  This targets situations where a
    # slightly larger item might fit better later, preventing fragmentation.  This is
    # applied AFTER placing the item.
    wasteful_bins = feasible_bins & (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement < waste_proportion_threshold)
    priorities[wasteful_bins] -= waste_penalty
    return priorities
```
