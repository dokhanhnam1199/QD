```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Multi-objective: fullness, minimizing fragmentation, target remaining capacity.
    Adaptive weights based on remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Fullness objective: Prioritize bins that become fuller
    fullness_priority = (item / bins_remain_cap) * feasible_bins
    priorities += fullness_priority

    # Fragmentation objective: Penalize bins with small remaining capacity AFTER placement
    # The penalty is stronger if the item cannot fit well in other bins
    avg_remaining_capacity = np.mean(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 0
    frag_penalty_factor = np.clip(item / (avg_remaining_capacity + 0.0001), 0.0, 1.0)
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    fragmentation_penalty[feasible_bins] = (item - bins_remain_cap[feasible_bins]) * frag_penalty_factor # Consider item size compared to bin capacity
    fragmentation_penalty[fragmentation_penalty > 0] *= -1 # Make it a penalty
    priorities += fragmentation_penalty

    # Target remaining capacity: Add bonus if the bin remains within some desired capacity
    target_capacity = 0.25  # Aim for remaining capacity around 25% of bin size
    capacity_diff = np.abs(remaining_capacity_after_placement - target_capacity)
    capacity_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    capacity_bonus[feasible_bins] = np.exp(-capacity_diff[feasible_bins]) # Exponential decay

    priorities += capacity_bonus

    # Adaptive weights: Scale priorities based on remaining bin capacities
    # Bins with more capacity may prefer a slight preference for less full bins
    capacity_weight = bins_remain_cap / np.max(bins_remain_cap)
    priorities *= (1.0 + 0.1 * capacity_weight)

    return priorities
```
