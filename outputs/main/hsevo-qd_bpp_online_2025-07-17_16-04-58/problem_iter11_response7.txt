```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities considering fill rate, remaining capacity, and diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item

    # Fill Rate Priority:
    fill_rate_priority = (item / bins_remain_cap) * feasible_bins
    priorities[feasible_bins] += fill_rate_priority[feasible_bins] * 2.0

    # Remaining Capacity Optimization:
    ideal_remaining_capacity = item * 0.5
    capacity_difference = np.abs(remaining_capacity_after_placement - ideal_remaining_capacity) * feasible_bins
    priorities[feasible_bins] -= capacity_difference[feasible_bins] * 0.3

    # Almost Full Bonus:
    almost_full_threshold = item * 0.1
    almost_full_bins = feasible_bins & (remaining_capacity_after_placement <= almost_full_threshold)
    priorities[almost_full_bins] += 1.0

    # Bin Diversity:
    diversity_factor = np.random.rand(len(bins_remain_cap)) * 0.1
    priorities += diversity_factor

    return priorities
```
