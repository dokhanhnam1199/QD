```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~feasible_bins] = np.inf # Mark infeasible bins with infinity

    # Target Capacity: Aim for bins to be filled to a specific percentage
    target_capacity_percentage = 0.9
    bin_size = bins_remain_cap + item
    target_capacity = target_capacity_percentage * bin_size

    # Calculate the difference between the remaining capacity after placement and the target capacity
    capacity_difference = np.abs(remaining_capacity_after_placement - (bin_size - item)* (1 - target_capacity_percentage) - item * (1-target_capacity_percentage))

    # Give higher priority to bins where filling them results in a capacity close to the target
    priorities[feasible_bins] = 1.0 / (capacity_difference[feasible_bins] + 0.00001)  # Avoid division by zero

    # Encourage fuller bins by giving more priority to bins close to full
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 5.0

    # Penalize small capacity bins that can still accommodate the item
    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold * bin_size)
    priorities[small_capacity_bins] -= 2.0

    # Add a tiny bit of randomness to break ties and explore different solutions.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.01

    return priorities
```
