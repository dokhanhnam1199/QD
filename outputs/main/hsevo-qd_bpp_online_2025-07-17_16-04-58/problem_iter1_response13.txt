```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First consider only bins that can accommodate the item. Others get -inf
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf

    # Among eligible bins, prioritize those with smaller remaining capacity, but not too small
    # Prioritize based on how much "waste" will be created if we place the item
    waste = bins_remain_cap - item
    # Penalize very small waste heavily.  Helps to avoid fragmentation. A small constant is introduced to stabilize the score calculation.
    priorities[eligible_bins] = -np.abs(waste[eligible_bins] - np.mean(waste[eligible_bins]))/(np.std(waste[eligible_bins]) + 1e-6) - 100*(waste[eligible_bins] < 0.1)

    #Prioritize the bins where remain capacity is almost same as item size to avoid small items
    #priorities = 1 / np.abs(bins_remain_cap - item)

    return priorities
```
