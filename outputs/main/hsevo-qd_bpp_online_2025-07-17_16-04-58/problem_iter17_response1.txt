```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste and target remaining capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        wasted_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = -wasted_space

        # Target remaining capacity: aim for half-full bins after placement
        target_capacity = bins_remain_cap[feasible_bins] * 0.5
        capacity_diff = np.abs(wasted_space - target_capacity)

        # Prioritize bins closer to the target capacity
        priorities[feasible_bins] -= 0.01 * capacity_diff  # Tunable weight

    return priorities
```
