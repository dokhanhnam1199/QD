```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: feasibility, waste, target capacity, fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -wasted_space

    target_capacity = 0.2 * np.max(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap[feasible_bins] - target_capacity)
    priorities[feasible_bins] -= 0.05 * capacity_diff

    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += 0.01 * fullness_factor

    # Normalize priorities to improve robustness
    if np.any(feasible_bins):
        priorities[feasible_bins] /= np.max(np.abs(priorities[feasible_bins]))+1e-9

    return priorities
```
