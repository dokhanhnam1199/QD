```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, heavily penalize bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Assign infinitely low priority to infeasible bins

    # For feasible bins:

    # 1. Calculate the wasted space (remaining capacity after adding item).
    wasted_space = bins_remain_cap - item

    # 2. Prioritize bins with less wasted space. Smaller wasted space is better.
    # To avoid division by zero and handle the case where wasted_space is exactly zero,
    # add a small epsilon to the wasted space.
    epsilon = 1e-9
    priorities[~infeasible_bins] = -wasted_space[~infeasible_bins] # Higher priority for lower wasted space

    # 3. Apply a "gravitational" pull effect. Give higher priority to bins that are already relatively full.
    #    The more full, the greater the gravitational force attracting the new item.

    fill_ratios = (bins_remain_cap - wasted_space) / (bins_remain_cap + epsilon)  # Avoid division by zero, and use total bin capacity, if known, can change this.
    priorities[~infeasible_bins] += fill_ratios[~infeasible_bins] # Higher priority to more full bins.

    # 4. A slight preference to more empty bins to distribute load at start
    initial_fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[~infeasible_bins] += 0.1 * initial_fullness[~infeasible_bins]


    return priorities
```
