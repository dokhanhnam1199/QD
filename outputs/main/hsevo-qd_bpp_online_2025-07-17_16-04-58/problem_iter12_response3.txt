```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Objective 1: Fullness (maximize fill)
    fullness = 1.0 - (remaining_capacity_after_placement + item/10000) / (bins_remain_cap + item/10000)
    fullness[~feasible_bins] = 0  # Only consider feasible bins for fullness
    priorities[feasible_bins] += 0.6 * fullness[feasible_bins] # Weight of 0.6 for fullness
    
    # Objective 2: Minimize Fragmentation (Target Remaining Capacity)
    target_capacity = 0.25  # Target remaining capacity (e.g., 25% of bin size)
    capacity_diff = np.abs((bins_remain_cap - item) - target_capacity * (bins_remain_cap + item/10000))
    
    # Scale it between 0-1, lower the diff better it is
    capacity_score = 1 - (capacity_diff / (bins_remain_cap + item/10000))
    capacity_score[~feasible_bins] = 0
    priorities[feasible_bins] += 0.3 * capacity_score[feasible_bins] # Weight of 0.3 for capacity score
    
    # Objective 3: Avoid too small remaining capacity after adding item
    small_capacity_threshold = 0.1
    too_small = (remaining_capacity_after_placement >= 0) & (remaining_capacity_after_placement < small_capacity_threshold)
    priorities[too_small] -= 0.1 # Weight of -0.1 to avoid small capacity

    # Very small capacity bins are penalized harshly but not excluded
    # Penalizes fragmented fills and may create bin almost full but not full
    small_capacity_threshold = 0.2
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= 0.05

    return priorities
```
