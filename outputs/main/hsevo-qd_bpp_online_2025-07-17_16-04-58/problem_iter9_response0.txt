```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Core Priority: Fill Rate
    fill_rate_priority = (item / bins_remain_cap) * feasible_bins
    priorities[feasible_bins] += fill_rate_priority[feasible_bins] * 2.0  # Weight fill rate

    # Remaining Capacity Optimization: Balance filling and future flexibility
    remaining_capacity_penalty = np.abs(remaining_capacity_after_placement) * feasible_bins
    priorities[feasible_bins] -= remaining_capacity_penalty[feasible_bins] * 0.5 # Reduced penalty.

    # Encourage to fill bins with some margin left for smaller items to fit in
    margin_threshold = 0.3
    margin_bonus = feasible_bins & (remaining_capacity_after_placement >= item*margin_threshold) & (remaining_capacity_after_placement <= item*(1+margin_threshold))
    priorities[margin_bonus] += 0.8

    # Prioritize bins that are most close to the item size
    closest_fit_bonus = feasible_bins * (1 - np.abs(bins_remain_cap - item) / np.max(bins_remain_cap))
    priorities[feasible_bins] += closest_fit_bonus[feasible_bins] * 1.5

    # Bin diversity - helps to select a diverse set of bins rather than keep filling the same ones all the time
    diversity_factor = np.random.rand(len(bins_remain_cap)) * 0.1
    priorities += diversity_factor

    return priorities
```
