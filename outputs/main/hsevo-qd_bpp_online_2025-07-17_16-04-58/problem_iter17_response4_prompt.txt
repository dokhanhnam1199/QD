{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., all zeros)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Filter bins that can actually accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # No bin can fit the item. Return low priorities for all. Avoid errors.\n        return priorities\n\n    # Calculate remaining capacity AFTER placing the item (if possible)\n    remaining_capacity_after_placement = bins_remain_cap - item\n    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1  # Handle infeasible bins without np.inf\n\n    # Prioritize bins with smaller remaining space AFTER placement.\n    # This encourages filling bins completely.\n    # Also, penalize nearly-full bins more heavily. A slight margin may be desirable to accommodate future items.\n\n    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001) # Avoid division by zero\n\n    # Boost priority of bins that are close to being full, but only if feasible.\n    almost_full_threshold = 0.1  # e.g., within 10% of item's size. Fine-tune this parameter\n    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)\n    priorities[almost_full_bins] += 5.0  # A larger value to significantly increase the priority\n\n    # Very small capacity bins are penalized harshly but not excluded\n    # Penalizes fragmented fills and may create bin almost full but not full\n    small_capacity_threshold = 0.2\n    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)\n    priorities[small_capacity_bins] -= 2.0\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                almost_full_threshold: float = 0.07359594924881202, almost_full_boost: float = 4.551124234880866,\n                small_capacity_threshold: float = 0.19085413880719226, small_capacity_penalty: float = 4.089881296997733) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        division_epsilon: Epsilon value to avoid division by zero.\n        almost_full_threshold: Threshold (as a fraction of item size) to consider a bin \"almost full\".\n        almost_full_boost: Priority boost for almost full bins.\n        small_capacity_threshold: Threshold below which a bin is considered to have small capacity.\n        small_capacity_penalty: Priority penalty for small capacity bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., all zeros)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Filter bins that can actually accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # No bin can fit the item. Return low priorities for all. Avoid errors.\n        return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic considers an \"ideal remaining capacity\" and uses the inverse of the deviation from this ideal as a priority, while the worst simply uses the negative log of the item/bin ratio. The best also includes bonus for almost full bins and penalties for large remaining capacity. (2nd) uses wasted_space (bins_remain_cap - item) directly which is simpler.\n\nComparing (2nd best) vs (2nd worst), which are 2nd and 19th, we see 2nd also uses wasted_space (bins_remain_cap - item) directly. And 19th contains only `return priorities` so we can ignore.\n\nComparing (1st) vs (2nd), we see the best heuristic tries to keep remaining capacity near an ideal value. The second heuristic prioritizes minimizing wasted space and encouraging tighter fits. The first is more complex and aims for a more specific target state in each bin.\n\nComparing (3rd) vs (4th), the third heuristic also uses a target capacity and fullness incentives and fragmentation penalties. In contrast, the 4th heuristic is the same as the first, so this comparison reveals nothing new about the qualities of the better heuristic.\n\nComparing (second worst) vs (worst), which are 2nd and 1st, we see only difference in item / bin ratio.\n\nOverall: The better heuristics incorporate several factors into their priority calculations, including the remaining capacity after placement, a target or ideal remaining capacity, bonuses for almost-full bins, and penalties for fragmented fills or bins that are too empty. They aim for a balance between filling bins completely and avoiding fragmentation. Simpler heuristics like just minimizing waste are not as effective. Introducing tunable parameters and specific objectives improves performance. Using the inverse of a deviation from an ideal or target capacity is helpful.\n- \nOkay, let's redefine \"Current Self-Reflection\" to be more effective and guide the design of better heuristics. Here's a revised approach, keeping in mind the pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Multi-objective, Tunable Parameters, Iterative Refinement, Penalty/Reward, Normalization, Fragmentation, Target Capacity, Bin Diversity, Feasibility.\n\n*   **Advice:** Start with a simple, feasible heuristic focused on core objectives (e.g., waste minimization). Iteratively introduce complexity by adding factors like target remaining capacity, margin bonuses, and fragmentation penalties, carefully evaluating each addition's impact on overall performance through controlled experiments. Use normalization to allow sensible weighing of different criteria.\n\n*   **Avoid:** Overly complex, untuned bonus/penalty systems. Premature optimization of all objectives. Complex ratios and hard thresholds without proper evaluation.\n\n*   **Explanation:** Effective heuristic design involves a balance between exploration (considering multiple factors) and exploitation (focusing on the most impactful aspects). An iterative, test-driven approach, starting simple and adding complexity incrementally, allows for better understanding of how different factors interact and contribute to overall performance. Tunable parameters and normalization are crucial for adapting the heuristic to different problem instances and scales.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}