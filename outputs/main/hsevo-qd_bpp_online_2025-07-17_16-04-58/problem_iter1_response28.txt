```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after placing the item
    remaining_capacities = bins_remain_cap - item

    # High priority for bins where the item fits (positive remaining capacity)
    # and lower for bins that are too small or already full (negative or zero remaining capacity)
    for i, rem_cap in enumerate(remaining_capacities):
        if rem_cap >= 0:
            #Prioritize bins with least waste: smaller rem_cap implies higher waste if unused elsewhere
            priorities[i] = 1.0 / (rem_cap + 1e-6) #Add a small constant to avoid divide by zero

            #Further prioritization: use nearly full bins before relatively empty ones
            #This can help pack smaller items into partially filled bins first.
            priorities[i] += bins_remain_cap[i] / (np.sum(bins_remain_cap) + 1e-6) # Normalized capacity. Avoid division by 0
        else:
            priorities[i] = -np.inf # Very low priority, don't use the bin.
    # Add a random component to diversify the bin selection
    # Adding a random component could help escape local optima by occasionally exploring bins that might not be the highest priority based on current calculations.
    random_noise = np.random.rand(len(bins_remain_cap)) * 0.01  # Small random values
    priorities += random_noise
    return priorities
```
