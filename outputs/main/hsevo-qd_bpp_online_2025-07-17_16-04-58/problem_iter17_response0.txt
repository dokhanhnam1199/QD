```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with target capacity, boosting almost-full bins."""
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    priorities[feasible_bins] = 0.0
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Waste minimization: Prioritize bins with less wasted space
    priorities[feasible_bins] = -remaining_capacity_after_placement #smaller is better.

    # Target remaining capacity
    target_capacity = 0.1
    deviation = np.abs(remaining_capacity_after_placement - target_capacity)
    priorities[feasible_bins] -= deviation #Penalize large deviation

    # Almost full bonus
    almost_full_threshold = 0.05
    almost_full_bins = remaining_capacity_after_placement <= almost_full_threshold
    priorities[feasible_bins][almost_full_bins] += 5.0 #Boost for almost full bins

    return priorities
```
