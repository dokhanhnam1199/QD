```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Base priority: Inverse of remaining capacity, encouraging fuller bins.
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Parameter tuning for "almost full" bonus and "small capacity" penalty.
    almost_full_threshold = 0.15  # Increased slightly to allow for more near-full bins
    almost_full_bonus = 7.0       # Increased bonus for nearly full bins
    small_capacity_threshold = 0.25  # Slightly bigger than before
    small_capacity_penalty = 3.0   # Increased penalty for smaller bins

    # Almost full bin bonus: Significantly boost priority for bins close to full.
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += almost_full_bonus

    # Small capacity bin penalty: Discourage placing items in bins with very little remaining capacity.
    small_capacity_bins = feasible_bins & (bins_remain_cap < small_capacity_threshold)
    priorities[small_capacity_bins] -= small_capacity_penalty
    
    # Introduce a capacity-aware bonus based on the item size relative to bin size
    capacity_ratio = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += capacity_ratio * 2  # Scale bonus based on ratio

    #Prioritize bins which have remain capacity close to the current item size.
    close_match_threshold = 0.1
    close_match_bins = feasible_bins & (np.abs(bins_remain_cap - item) / item < close_match_threshold)
    priorities[close_match_bins] += 3
    
    return priorities
```
