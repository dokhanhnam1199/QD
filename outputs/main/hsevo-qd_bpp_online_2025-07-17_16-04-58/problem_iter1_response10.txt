```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate wasted space if item is added to each bin
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits and minimizes wasted space
    feasible_bins = wasted_space >= 0
    if np.any(feasible_bins):
        priorities[feasible_bins] = 1 / (wasted_space[feasible_bins] + 1e-6) # Avoid division by zero

        # Further prioritize bins that are close to full after adding the item
        fullness = 1 - wasted_space[feasible_bins] / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += fullness

    # Give low priority to bins where the item doesn't fit (negative wasted space)
    infeasible_bins = wasted_space < 0
    priorities[infeasible_bins] = -np.abs(wasted_space[infeasible_bins]) # Strongly discourage

    return priorities
```
