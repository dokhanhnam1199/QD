```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by feasibility, waste, and fullness, with tunable fullness boost."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    wasted_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -wasted_space

    # Tunable fullness boost:  Higher values favor almost-full bins more strongly.
    fullness_boost = 0.2
    fullness_factor = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9)
    priorities[feasible_bins] += fullness_boost * fullness_factor

    return priorities
```
