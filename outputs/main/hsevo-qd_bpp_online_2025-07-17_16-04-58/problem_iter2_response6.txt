```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins to minimize waste and fragmentation.

    Favors bins where the item fits best, penalizes infeasible bins.
    Adds a small exploration bonus and a factor considering balanced bin usage.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)

    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = np.inf

    # Prioritize based on inverse of remaining space.
    fit_priority = 1.0 / (remaining_space + 1e-9)

    # Exploration bonus and balanced bin usage
    normalized_capacities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else 0
    exploration_bonus = 0.01 * normalized_capacities

    priorities = feasible_bins * (fit_priority + exploration_bonus)
    return priorities
```
