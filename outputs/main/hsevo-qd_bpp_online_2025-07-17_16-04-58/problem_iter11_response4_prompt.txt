{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities\n\n    remaining_capacity_after_placement = bins_remain_cap - item\n    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1\n\n    # Core Priority: Fill Rate\n    fill_rate_priority = (item / bins_remain_cap) * feasible_bins\n    priorities[feasible_bins] += fill_rate_priority[feasible_bins] * 2.0  # Weight fill rate\n\n    # Remaining Capacity Optimization: Balance filling and future flexibility\n    remaining_capacity_penalty = np.abs(remaining_capacity_after_placement) * feasible_bins\n    priorities[feasible_bins] -= remaining_capacity_penalty[feasible_bins] * 0.5 # Reduced penalty.\n\n    # Encourage to fill bins with some margin left for smaller items to fit in\n    margin_threshold = 0.3\n    margin_bonus = feasible_bins & (remaining_capacity_after_placement >= item*margin_threshold) & (remaining_capacity_after_placement <= item*(1+margin_threshold))\n    priorities[margin_bonus] += 0.8\n\n    # Prioritize bins that are most close to the item size\n    closest_fit_bonus = feasible_bins * (1 - np.abs(bins_remain_cap - item) / np.max(bins_remain_cap))\n    priorities[feasible_bins] += closest_fit_bonus[feasible_bins] * 1.5\n\n    # Bin diversity - helps to select a diverse set of bins rather than keep filling the same ones all the time\n    diversity_factor = np.random.rand(len(bins_remain_cap)) * 0.1\n    priorities += diversity_factor\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates several factors like ideal remaining capacity, bonuses for almost full bins, and penalties for large remaining capacities to reduce fragmentation, while the worst only uses the log of the ratio of item size to remaining capacity. (2nd best) vs (second worst): The second-best includes target capacity, incentives for almost-full bins, penalties for small bins, and bonuses for nearly-empty bins, where second worst heuristic using log ratios of item size and bin remaining capacity. Comparing (1st) vs (2nd), we see the first focuses on an ideal remaining capacity, deviation, and fragmentation prevention, while the second targets a capacity, fills almost full bins, prevents small capacity bins, and fills nearly empty bins. (3rd) vs (4th): Both try to minimize waste and manage bin capacity. Comparing (second worst) vs (worst), we see both use log ratios. Overall: The better heuristics consider a combination of factors, while worse heuristics only using ratios of item size and bin remaining capacity or not considering feasible bins. Sophisticated heuristics incorporates thresholds and bonuses/penalties to guide the packing process.\n- \nOkay, let's refine self-reflection for designing better heuristics, keeping in mind your desire for a powerful approach and avoiding pitfalls:\n\n*   **Keywords:** Multi-objective, balanced consideration, adaptive weights, explicit feasibility.\n\n*   **Advice:** Design a *multi-objective* heuristic. Frame the problem as simultaneously optimizing fullness, minimizing fragmentation, and targeting remaining capacity. Balance these conflicting objectives.\n\n*   **Avoid:** Overly complex penalties/bonuses. Ratios and simple rules. Treating all factors as equally important initially.\n\n*   **Explanation:** Start with a simple multi-objective function. Use adaptive weights or Pareto optimization to balance the competing objectives. Address feasibility directly and incrementally add complexity, evaluating each addition's impact on the overall performance and generalizability.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}