```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~feasible_bins] = np.inf

    # Primary objective: Minimize waste. Give higher priority to bins that,
    # after placing the item, have remaining capacity close to a target.
    target_capacity_ratio = 0.2  # Aim to leave ~20% of bin capacity unused. Tunable parameter.
    target_capacity = item * target_capacity_ratio #target capacity relative to size of the item

    # Calculate a "distance" from the target capacity.  Smaller distance = higher priority.
    distance_from_target = np.abs(remaining_capacity_after_placement - target_capacity)

    #Convert the distance to a priority.
    priorities[feasible_bins] = 1.0 / (distance_from_target[feasible_bins] + 0.00001) #avoid zero division


    # Secondary objective: Encourage fullness, but avoid almost-full bins to a certain extent.
    almost_full_threshold_ratio = 0.05  # Consider "almost full" if remaining capacity is < 5% of item size.
    almost_full_threshold = item * almost_full_threshold_ratio
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold)
    priorities[almost_full_bins] -= 2.0  # Penalize almost-full bins to reduce fragmentation.

    # Prioritize bins with a comfortable fit, but not excessive.

    comfortable_fit_threshold_ratio_upper = 0.8
    comfortable_fit_threshold_upper = item * comfortable_fit_threshold_ratio_upper # Bin has space less than 80% of item size

    comfortable_fit_bins = feasible_bins & (remaining_capacity_after_placement < comfortable_fit_threshold_upper)
    priorities[comfortable_fit_bins] += 1.0

    #If capacity less than 20% of bin size, then give small priority

    small_capacity_threshold_ratio = 0.2
    small_capacity_threshold = item * small_capacity_threshold_ratio
    small_capacity_bins = feasible_bins & (bins_remain_cap < item + small_capacity_threshold)
    priorities[small_capacity_bins] -=1.0
    return priorities
```
