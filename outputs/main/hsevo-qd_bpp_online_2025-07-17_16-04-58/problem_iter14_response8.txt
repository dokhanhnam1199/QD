```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill rate, remaining capacity, and diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item

    # Fill Rate Priority (weighted)
    fill_rate_priority = (item / bins_remain_cap) * feasible_bins
    priorities[feasible_bins] += fill_rate_priority[feasible_bins] * 1.8

    # Remaining Capacity Optimization (penalize both under and over utilization)
    capacity_diff = np.abs(remaining_capacity_after_placement) * feasible_bins
    priorities[feasible_bins] -= capacity_diff[feasible_bins] * 0.4

    # Encourage "almost full" bins
    almost_full_threshold = 0.06
    almost_full_boost = 1.9
    almost_full = feasible_bins & (remaining_capacity_after_placement <= item * almost_full_threshold)
    priorities[almost_full] += almost_full_boost

    # Diversity factor to prevent focusing on same bins
    diversity_factor = np.random.rand(len(bins_remain_cap)) * 0.09
    priorities += diversity_factor

    return priorities
```
