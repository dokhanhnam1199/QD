```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill rate with remaining capacity & adds almost full incentive."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Fill rate component
    fill_rate = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = fill_rate

    # Remaining capacity component, avoid division by zero
    priorities[feasible_bins] += 1.0 / (remaining_capacity_after_placement[feasible_bins] + 0.00001)

    # Almost full incentive
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 3.0

    return priorities
```
