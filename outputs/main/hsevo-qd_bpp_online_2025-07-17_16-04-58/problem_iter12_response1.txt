```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes a balance between fullness and avoiding small remaining spaces,
    with adaptive adjustments based on item size and bin capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[remaining_capacity_after_placement < 0] = -1

    # Objective 1: Fullness - Higher priority for bins that become fuller.
    fullness_priority = (item / bins_remain_cap) * feasible_bins # Only consider feasible bins
    priorities[feasible_bins] += fullness_priority[feasible_bins]

    # Objective 2: Avoid Fragmentation - Penalize bins that leave very small space.
    fragmentation_threshold = 0.15  # Fraction of bin size. Adjust as needed.
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)

    small_space = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement / bins_remain_cap < fragmentation_threshold)
    fragmentation_penalty[small_space] = -1.5 # Moderate penalty

    priorities += fragmentation_penalty

    # Objective 3: Target remaining capacity.
    target_capacity_ratio = 0.75 # Ideal ratio of item size to remaining capacity. Adjust.
    capacity_difference = np.abs((item / bins_remain_cap) - target_capacity_ratio)
    capacity_priority = 1.0 / (capacity_difference + 0.0001)  # Higher priority for bins closer to target
    capacity_priority[~feasible_bins] = 0 # Ignore infeasible bins

    priorities[feasible_bins] += capacity_priority[feasible_bins] # add capacity priority


    # Objective 4: Prioritize nearly full
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (bins_remain_cap < item + almost_full_threshold * item)
    priorities[almost_full_bins] += 3.0

    # Adaptive Weighting
    # Adjust weights based on item size.
    # Larger items prioritize fullness more, smaller items prioritize avoiding fragmentation.
    item_size_weight = min(1.0, item)  # Scale weight based on item size (0 to 1)

    priorities = (item_size_weight * priorities + (1 - item_size_weight) * priorities)  # Balance Fullness and avoiding fragmentation

    return priorities
```
