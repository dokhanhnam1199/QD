```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the bin capacity and the item size
    differences = bins_remain_cap - item

    # Only consider bins that can accommodate the item
    valid_bins = differences >= 0

    if not np.any(valid_bins):
        return priorities  # No bin can accommodate the item

    # Assign priority based on the remaining capacity.  Bigger remaining cap, higher priority.
    priorities[valid_bins] = differences[valid_bins]

    return priorities
```
