{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Exploration rate.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the 'greedy' priority: preference for bins with enough capacity.\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        fit_indices = np.where(valid_bins)[0]\n        # Prioritize bins with the smallest remaining capacity.\n        priorities[fit_indices] = 1.0 / (bins_remain_cap[fit_indices] - item + 1e-6)\n\n    # Epsilon-greedy exploration: randomly assign priority to some bins.\n    if np.random.rand() < epsilon:\n        num_explore = min(num_bins, 5)  # Explore up to 5 bins\n        random_bins = np.random.choice(num_bins, size=num_explore, replace=False)\n        priorities[random_bins] = np.random.rand(num_explore)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Exact fit gets highest priority\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 2.0  # Higher than other priorities\n\n    # Calculate waste and distance from ideal fill (half-full)\n    waste = bins_remain_cap - item\n    distance_from_half = np.abs(bins_remain_cap - (1.0))  # Assuming bin capacity is 1.0\n\n    # Use a sigmoid function to score nuanced fits, normalizing by item size\n    sigmoid_scores = 1.0 / (1.0 + np.exp(-(bins_remain_cap - item) / item))\n    \n    # Combine factors: prioritize minimal waste, distance to half, and sigmoid score\n    priorities = np.where(priorities == 0,\n                          0.5 * sigmoid_scores + 0.3 / (waste + 1e-6) - 0.2 * distance_from_half,\n                          priorities)\n\n    return priorities\n\n[Reflection]\nPrioritize nuanced fit, waste reduction, & balance exploration with exploitation\u2014avoiding simple greedy approaches.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}