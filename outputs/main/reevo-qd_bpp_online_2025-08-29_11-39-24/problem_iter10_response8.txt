```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # Exact fit gets highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 10.0  # Significantly higher priority

    # Bins with enough capacity
    valid_bins = bins_remain_cap >= item
    fit_indices = np.where(valid_bins)[0]

    if len(fit_indices) > 0:
        # Calculate waste
        waste = bins_remain_cap[fit_indices] - item

        # Calculate distance from ideal fill (half-full) - assuming bin capacity is 1
        distance_from_half = np.abs(bins_remain_cap[fit_indices] - 0.5)

        # Calculate a 'fullness' score - how full the bin will be after adding the item
        fullness = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]

        # Combine factors - prioritize minimal waste, closeness to half-full, and fullness
        priorities[fit_indices] = 0.6 * (1.0 / (waste + 1e-6)) - 0.3 * distance_from_half + 0.1 * fullness

    # Epsilon-greedy exploration
    epsilon = 0.05
    if np.random.rand() < epsilon:
        num_explore = min(num_bins, 3)
        random_bins = np.random.choice(num_bins, size=num_explore, replace=False)
        priorities[random_bins] = np.random.rand(num_explore) * 2.0  # Give exploration a reasonable priority

    return priorities
```
