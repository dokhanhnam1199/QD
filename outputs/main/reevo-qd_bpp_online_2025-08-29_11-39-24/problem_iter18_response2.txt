```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0  # Highest priority

    # Prioritize bins where the item fits
    sufficient_capacity = bins_remain_cap >= item
    valid_bins = sufficient_capacity & ~exact_fit  # Exclude exact fits to avoid double-counting

    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1.0 - (remaining_capacity / bins_remain_cap[valid_bins])
        waste = remaining_capacity
        # Combine fullness and minimal waste.  Add a small value to avoid division by zero.
        priorities[valid_bins] = fullness + 1.0 / (waste + 1e-6)

    return priorities
```
