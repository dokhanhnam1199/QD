```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])

        # Sigmoid scoring for "snugness" - balance item size and remaining capacity
        snugness = 1 / (1 + np.exp(-5 * (remaining_capacity / item)))

        # Avoid extreme bin states (very full or very empty)
        fullness_penalty = np.exp(-5 * abs(fullness - 0.5))
        
        priorities[valid_bins] = snugness * fullness_penalty

    return priorities
```
