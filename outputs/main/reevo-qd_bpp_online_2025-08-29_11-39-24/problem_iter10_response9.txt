```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize bins where the item fits exactly
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000  # Highest priority

    # Prioritize bins where the item fits with minimal remaining capacity and highest fullness
    remaining_capacity = bins_remain_cap - item
    valid_bins = remaining_capacity >= 0

    if np.any(valid_bins):
        fullness = 1 - (remaining_capacity[valid_bins] / bins_remain_cap[valid_bins])
        waste_penalty = 1 / (remaining_capacity[valid_bins] + 1e-6)
        priorities[valid_bins] = 0.8 * fullness + 0.2 * waste_penalty  # Combine fullness and minimal waste

    return priorities
```
