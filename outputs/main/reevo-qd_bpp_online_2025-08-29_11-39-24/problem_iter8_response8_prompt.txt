{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Calculate the difference between the item size and the remaining capacity of each bin\n    diffs = bins_remain_cap - item\n    # Assign priority based on the smallest difference (Best Fit)\n    # We want to prioritize bins where the item fits with the least amount of leftover space.\n    # Avoid bins where the item doesn't fit (diff < 0) by assigning them a very low priority (-1).\n    for i in range(len(bins_remain_cap)):\n        if diffs[i] >= 0:\n            priorities[i] = diffs[i]  # Higher priority for smaller difference\n        else:\n            priorities[i] = -1      # Very low priority for bins that can't fit the item\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0\n\n    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins\n    if np.sum(priorities) == 0:\n        diff = np.abs(bins_remain_cap - item)\n        # Sigmoid function to score nuanced fits\n        sigmoid_input = -diff  # Negative difference for sigmoid\n        priorities = 1.0 / (1.0 + np.exp(-0.5 * sigmoid_input))  # Sigmoid function\n\n        # Normalize priorities based on bin fullness\n        fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n        priorities = priorities * (1.0 - fullness)  # Penalize almost full bins\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, nuanced waste minimization, & bin fullness awareness\u2014avoid extremes!\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}