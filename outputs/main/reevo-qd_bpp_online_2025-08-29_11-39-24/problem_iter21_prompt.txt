{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n## Online BPP Heuristic Design \u2013 Constructive Hints:\n\n**Prioritize exact fits above all else.** Minimize waste directly, avoiding near-empty/full bins. Balance waste reduction with *moderate* bin fullness. Keep it simple \u2013 ratios often outperform complex scaling! Consider item order & explore occasionally.\n\n\n\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0\n\n    # If no exact fit, prioritize based on minimizing waste and bin utilization\n    if np.sum(priorities) == 0:\n        diff = bins_remain_cap - item\n        feasible_bins = np.where(diff >= 0)[0]\n\n        if len(feasible_bins) > 0:\n            # Calculate waste\n            waste = diff[feasible_bins]\n\n            # Calculate utilization\n            utilization = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]\n            \n            # Prioritize bins with lower waste and moderate utilization\n            priorities[feasible_bins] = 0.8 * (1.0 / (waste + 1e-6)) + 0.2 * np.exp(-((utilization - 0.5) ** 2) / 0.1)\n        else:\n            priorities[:] = -1.0  # No bin can fit the item\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}