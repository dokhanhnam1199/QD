{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a refined Sigmoid Fit Score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin. A good fit means the item isn't too big\n    # relative to the bin's remaining capacity, but also isn't too small (avoiding tiny waste).\n    fit_scores = (bins_remain_cap - item) / bins_remain_cap\n\n    # Apply the sigmoid function to the fit scores.\n    k = 3  # Steeperness of the curve. Higher k means more emphasis on good fits.\n    x0 = 0.25  # Midpoint of the curve. Adjust to prefer tighter or looser fits.\n    \n    # Avoid division by zero or inf by setting a minimum remaining capacity\n    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)\n    fit_scores = (bins_remain_cap - item) / bins_remain_cap\n    \n    priorities = 1 / (1 + np.exp(-k * (fit_scores - x0)))\n    \n    # Normalize priorities to avoid extreme values. Helps prevent a single bin always being favored.\n    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)\n    \n    # Boost priority for bins where the item fits exactly (or very closely)\n    exact_fit_bins = np.where(np.abs(bins_remain_cap - item) < 1e-6)[0]\n    priorities[exact_fit_bins] += 0.5  # Add a constant boost. Can tune this value.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Exploration rate.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the 'greedy' priority: preference for bins with enough capacity.\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        fit_indices = np.where(valid_bins)[0]\n        # Prioritize bins with the smallest remaining capacity.\n        priorities[fit_indices] = 1.0 / (bins_remain_cap[fit_indices] - item + 1e-6)\n\n    # Epsilon-greedy exploration: randomly assign priority to some bins.\n    if np.random.rand() < epsilon:\n        num_explore = min(num_bins, 5)  # Explore up to 5 bins\n        random_bins = np.random.choice(num_bins, size=num_explore, replace=False)\n        priorities[random_bins] = np.random.rand(num_explore)\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, then density; explore occasionally, balance exploitation & exploration carefully.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}