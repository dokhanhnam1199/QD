```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # Calculate normalized fit and remaining capacity for other bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])
        
        # Sigmoid function to combine fullness and waste reduction
        # Adjust parameters (scale=2, shift=0) to tune the exploration-exploitation balance
        scale = 2.0
        shift = 0.0
        
        priority = fullness * scale + shift
        priorities[valid_bins] = priority
    
    return priorities
```
