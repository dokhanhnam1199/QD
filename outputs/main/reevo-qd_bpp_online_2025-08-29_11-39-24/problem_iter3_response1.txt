```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit gets highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 2.0  # Higher than other priorities

    # Calculate waste and distance from ideal fill (half-full)
    waste = bins_remain_cap - item
    distance_from_half = np.abs(bins_remain_cap - (1.0))  # Assuming bin capacity is 1.0

    # Use a sigmoid function to score nuanced fits, normalizing by item size
    sigmoid_scores = 1.0 / (1.0 + np.exp(-(bins_remain_cap - item) / item))
    
    # Combine factors: prioritize minimal waste, distance to half, and sigmoid score
    priorities = np.where(priorities == 0,
                          0.5 * sigmoid_scores + 0.3 / (waste + 1e-6) - 0.2 * distance_from_half,
                          priorities)

    return priorities
```
