```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float, performance_metric: float, exploration_decay: float = 0.99) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Epsilon-Greedy with dynamic epsilon.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Initial probability of exploration.
        performance_metric: A metric indicating the current performance (e.g., number of bins used).
        exploration_decay: Rate at which epsilon decreases.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Dynamic adjustment of epsilon based on performance
    epsilon = max(0.01, epsilon * exploration_decay)  # Ensure epsilon doesn't go too low

    # Calculate the 'greedy' priority - Best Fit heuristic
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = 1.0 / (remaining_space + 1e-6)  # Add a small value to avoid division by zero

    # Exploration: Assign a random priority to some bins
    if np.random.rand() < epsilon:
        num_explore = np.random.randint(1, len(bins_remain_cap) + 1)
        explore_indices = np.random.choice(len(bins_remain_cap), num_explore, replace=False)
        for idx in explore_indices:
            if bins_remain_cap[idx] >= item:
                priorities[idx] = np.random.rand()  # Assigning random exploration value
            else:
                priorities[idx] = -1  # Avoid placing it

    return priorities
```
