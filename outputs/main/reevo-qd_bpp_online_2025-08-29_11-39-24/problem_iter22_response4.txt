```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no zero or negative remaining capacities
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)

    # Calculate the fit score (item size relative to bin capacity)
    fit_scores = item / bins_remain_cap

    # Apply the sigmoid function to the fit scores
    k = 4  # Adjust for steepness
    x0 = 0.6  # Adjust for midpoint
    priorities = 1 / (1 + np.exp(-k * (fit_scores - x0)))

    # Bonus for bins with very little remaining capacity
    remaining_ratio = (bins_remain_cap - item) / bins_remain_cap
    remaining_ratio = np.clip(remaining_ratio, 0, 1)
    priorities += 0.2 * remaining_ratio  # Increased bonus

    # Penalty for bins that are almost full, discouraging adding to nearly full bins unless necessary
    almost_full_penalty = np.exp(-10 * (bins_remain_cap - item))
    priorities -= 0.05 * almost_full_penalty

    # Normalize priorities to the range [0, 1] to avoid domination by a single bin
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)
    return priorities
```
