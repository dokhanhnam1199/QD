```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1000  # Very high priority

    # Next best fit based on remaining capacity (smaller is better)
    remaining_capacities = bins_remain_cap[bins_remain_cap >= item]
    if len(remaining_capacities) > 0:
        min_waste = np.min(remaining_capacities - item)
        waste_indices = np.where(bins_remain_cap >= item)[0]

        for i in waste_indices:
            if bins_remain_cap[i] >= item:
                priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-6)
    
    return priorities
```
