```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins
    if np.sum(priorities) == 0:
        fits = bins_remain_cap >= item
        if np.any(fits):
            diff = bins_remain_cap[fits] - item
            # Sigmoid function to score nuanced fits
            sigmoid_input = -diff  # Negative difference for sigmoid
            sigmoid_scores = 1.0 / (1.0 + np.exp(-0.5 * sigmoid_input))

            # Normalize priorities based on bin fullness.  Higher scores for bins closer to half-full.
            fullness = 1.0 - (bins_remain_cap[fits] / np.max(bins_remain_cap))
            priorities[fits] = sigmoid_scores * (1.0 - np.abs(fullness - 0.5))

            # Add a small bonus for bins that are not completely empty
            not_empty = bins_remain_cap > 0
            priorities[not_empty] += 0.01
        else:
            priorities[:] = -1.0  # No bin can fit the item

    return priorities
```
