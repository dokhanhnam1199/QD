```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize exact fits
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 2.0  # Highest priority

    # Calculate priority for bins that are not exact fits
    non_exact_fit_bins = np.where(bins_remain_cap != item)[0]
    for i in non_exact_fit_bins:
        if bins_remain_cap[i] >= item:
            # Calculate waste
            waste = bins_remain_cap[i] - item

            # Calculate bin fullness (normalized)
            fullness = bins_remain_cap[i]

            # Combine waste and fullness.  Lower waste and medium fullness is best.
            # Use a sigmoid-like function to scale the waste and fullness
            normalized_waste = waste / (item + 1e-6)
            normalized_fullness = fullness / (1.0 + 1e-6)

            priority = np.exp(-normalized_waste) * normalized_fullness
            priorities[i] = priority
        else:
            priorities[i] = -1.0  # Very low priority

    return priorities
```
