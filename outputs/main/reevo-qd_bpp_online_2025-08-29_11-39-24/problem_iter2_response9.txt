```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.sum(valid_bins) == 0:
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    distances = np.abs(remaining_capacities - item)
    
    # Prioritize bins where the remaining capacity is close to the item size
    priorities[valid_bins] = 1.0 / (distances + 1e-6)
    
    # Further boost priority for bins with smaller remaining capacities (avoiding large gaps)
    priorities[valid_bins] *= remaining_capacities 
    
    return priorities
```
