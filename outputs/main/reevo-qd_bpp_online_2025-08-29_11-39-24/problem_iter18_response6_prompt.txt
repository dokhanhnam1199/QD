{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Random Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Find bins that can accommodate the item\n    suitable_bins = bins_remain_cap >= item\n\n    # If no bin can accommodate the item, return zeros\n    if not np.any(suitable_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    # Assign random priorities to suitable bins.  Smaller remainder gives higher priority\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[suitable_bins] = bins_remain_cap[suitable_bins] - item\n\n    # normalize the priority value with the total bins_remain_cap value\n    priorities = priorities / np.sum(bins_remain_cap)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0  # High priority for exact fits\n\n    # If no exact fit, prioritize based on minimizing waste and remaining capacity\n    if np.sum(priorities) == 0:\n        diff = bins_remain_cap - item\n        feasible_bins = diff >= 0\n\n        if np.any(feasible_bins):\n            # Calculate waste (remaining capacity after placing item)\n            waste = diff[feasible_bins]\n            # Prioritize lower waste (higher priority)\n            priorities[feasible_bins] = 1.0 / (waste + 1e-6)\n            # Also consider remaining capacity - prefer bins with more remaining capacity\n            priorities[feasible_bins] *= bins_remain_cap[feasible_bins]\n        else:\n            priorities[:] = -1.0  # No bin can fit the item\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, minimize waste, and consider remaining capacity\u2014a multi-faceted approach yields better results.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}