```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    epsilon = 1e-6

    # Prioritize bins where the item fits
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        fit = bins_remain_cap[sufficient_capacity] - item
        priorities[sufficient_capacity] = 1.0 / (fit + epsilon)

    # Penalize nearly full bins
    nearly_full = bins_remain_cap < item * 0.2
    priorities[nearly_full] -= 0.5

    # Encourage use of almost empty bins, but not as strongly as a good fit
    almost_empty = bins_remain_cap > 0.8
    priorities[almost_empty] += 0.2

    return priorities
```
