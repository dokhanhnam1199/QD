```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.sum(valid_bins) == 0:
        return priorities

    # Calculate the difference between item size and remaining bin capacity
    distances = np.abs(bins_remain_cap[valid_bins] - item)

    # Calculate the density of the item within each bin if it were placed there
    densities = item / bins_remain_cap[valid_bins]

    # Combine distance and density to create a priority score.
    # Closer distance and higher density mean higher priority.
    priorities[valid_bins] = (1.0 / (distances + 1e-6)) * densities

    return priorities
```
