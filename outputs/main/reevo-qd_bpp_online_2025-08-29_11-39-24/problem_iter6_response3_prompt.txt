{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin using a sigmoid function\n    # Fit score = sigmoid( (bin_remaining_capacity - item) / item)\n    # The sigmoid function ensures that the fit score is between 0 and 1\n    # A higher fit score indicates a better fit for the item\n\n    fit_scores = 1 / (1 + np.exp(-(bins_remain_cap - item) / item))\n\n    # Penalize bins that are nearly full, promoting filling smaller bins first.  Scale factor helps finetuning\n    #scale_factor = 0.1\n    #penalties = np.exp(-bins_remain_cap / (item * scale_factor))\n    #priorities = fit_scores * (1 - penalties)\n\n    #Adjust fit_scores with a small penalty for bins with extremely low remaining capacity, so prevent divide by zero.\n    #priorities = np.where(bins_remain_cap < 1e-6, -np.inf, fit_scores)\n\n    priorities = fit_scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0\n\n    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins\n    if np.sum(priorities) == 0:\n        diff = np.abs(bins_remain_cap - item)\n        # Sigmoid function to score nuanced fits\n        sigmoid_input = -diff  # Negative difference for sigmoid\n        priorities = 1.0 / (1.0 + np.exp(-0.5 * sigmoid_input))  # Sigmoid function\n\n        # Normalize priorities based on bin fullness\n        fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n        priorities = priorities * (1.0 - fullness)  # Penalize almost full bins\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, nuanced waste minimization, and bin fullness awareness for improved online BPP heuristics.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}