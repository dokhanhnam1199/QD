```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # If no exact fit, prioritize based on minimizing waste
    if np.sum(priorities) == 0:
        diff = bins_remain_cap - item
        feasible_bins = np.where(diff >= 0)[0]

        if len(feasible_bins) > 0:
            # Prioritize bins with lower waste
            waste = diff[feasible_bins]
            priorities[feasible_bins] = 1.0 / (waste + 1e-6)

            # Slightly penalize nearly full bins to encourage better utilization
            utilization = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]
            priorities[feasible_bins] *= np.exp(-((utilization - 0.7) ** 2) / 0.1)

        else:
            priorities[:] = -1.0  # No bin can fit the item

    return priorities
```
