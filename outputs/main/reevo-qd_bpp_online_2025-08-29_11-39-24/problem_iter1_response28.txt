```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)

    # Calculate the 'greedy' priority - how well the item fits.
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        fit_scores = bins_remain_cap[feasible_bins] - item  # How much space is left after adding the item
        priorities[feasible_bins] = fit_scores / bins_remain_cap[feasible_bins]  # Normalize by bin capacity. Higher is better.

    # Epsilon-greedy exploration
    if np.random.random() < epsilon:
        # Explore: Assign a random priority to each bin, even if the item doesn't fit
        priorities = np.random.rand(n_bins)

    return priorities
```
