```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the item size and the remaining capacity of each bin
    diffs = bins_remain_cap - item
    # Assign priority based on the smallest difference (Best Fit)
    # We want to prioritize bins where the item fits with the least amount of leftover space.
    # Avoid bins where the item doesn't fit (diff < 0) by assigning them a very low priority (-1).
    for i in range(len(bins_remain_cap)):
        if diffs[i] >= 0:
            priorities[i] = diffs[i]  # Higher priority for smaller difference
        else:
            priorities[i] = -1      # Very low priority for bins that can't fit the item
    return priorities
```
