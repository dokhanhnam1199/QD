```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility: prioritize bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities  # No feasible bins

    fit_indices = np.where(valid_bins)[0]

    # Density: prioritize bins with tighter fits (higher density).
    priorities[fit_indices] = 1.0 / (bins_remain_cap[fit_indices] - item + 1e-6)

    # Exploration: add a small random priority to some bins to encourage exploration.
    if np.random.rand() < epsilon:
        num_explore = min(num_bins, 3)  # Reduced exploration
        random_bins = np.random.choice(num_bins, size=num_explore, replace=False)
        priorities[random_bins] += np.random.rand(num_explore) * 0.1  # Smaller random boost

    return priorities
```
