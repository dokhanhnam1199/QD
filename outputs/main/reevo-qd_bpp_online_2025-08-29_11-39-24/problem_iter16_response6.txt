```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the fit score for each bin
    fit_scores = np.where(bins_remain_cap >= item, (bins_remain_cap - item), 0.0)

    # Normalize fit scores
    max_fit_score = np.max(fit_scores)
    if max_fit_score > 0:
        fit_scores = fit_scores / max_fit_score

    # Apply the sigmoid function to the fit scores
    k = 5  # Adjust k to control the sigmoid steepness
    x0 = 0.5  # Adjust x0 to control where the sigmoid transitions
    sigmoid_scores = 1 / (1 + np.exp(-k * (fit_scores - x0)))

    # Add an exploration factor to encourage trying different bins
    exploration_factor = 0.1  # Adjust exploration factor
    exploration_scores = np.random.rand(num_bins) * exploration_factor

    # Combine fit and exploration scores
    priorities = sigmoid_scores + exploration_scores

    # Normalize priorities to avoid extreme values and improve stability
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-6)

    return priorities
```
