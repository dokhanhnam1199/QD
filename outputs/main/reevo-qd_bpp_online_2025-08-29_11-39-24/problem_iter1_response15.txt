```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the distance between the item size and the remaining capacity of each bin.
    distances = np.abs(bins_remain_cap - item)

    # Handle the case where a bin has exactly the item size to avoid division by zero.
    distances[distances == 0] = 1e-6  # Replace 0 with a very small value

    # Calculate the inverse distance (priority) for each bin.
    priorities = 1.0 / distances

    # If a bin's capacity is less than the item size, set its priority to 0.
    priorities[bins_remain_cap < item] = 0

    return priorities
```
