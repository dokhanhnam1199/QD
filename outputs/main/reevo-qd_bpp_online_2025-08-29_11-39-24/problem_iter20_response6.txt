```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1000.0

    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins
    if np.sum(priorities) == 0:
        waste = bins_remain_cap - item
        valid_bins = waste >= 0
        if np.any(valid_bins):
            # Use a combination of waste and fullness
            fullness = bins_remain_cap / np.max(bins_remain_cap)
            # Avoid bins that are almost full or almost empty
            fullness_penalty = np.exp(-8 * (fullness - 0.5)**2)
            priority = 1.0 / (waste[valid_bins] + 1e-6) * fullness_penalty
            priorities[valid_bins] = priority
        else:
            # If the item doesn't fit in any bin, assign a low priority to all bins
            priorities[:] = -1.0
    return priorities
```
