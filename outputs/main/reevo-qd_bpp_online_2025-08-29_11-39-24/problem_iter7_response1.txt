```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit gets highest priority
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # Consider bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # Calculate fit score (how close the item size is to bin capacity)
        fit_score = np.abs(bins_remain_cap[valid_bins] - item)
        # Calculate remaining capacity after placing the item
        remaining_capacity = bins_remain_cap[valid_bins] - item
        # Calculate fullness (how full the bin will be after placing the item)
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])

        # Combine fit and fullness using sigmoid scaling
        # This balances minimizing waste with bin fullness
        rate = 2.0  # Adjust this rate to control the balance
        priority = (fullness * np.exp(-rate * fit_score)) + (1.0 / (fit_score + 1e-6))

        priorities[valid_bins] = priority

    return priorities
```
