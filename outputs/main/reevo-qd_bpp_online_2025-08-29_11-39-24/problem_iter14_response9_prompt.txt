{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Softmax-Based Fit.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    \n    # Calculate the fit score for each bin: how well the item fits in the remaining capacity\n    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)\n    \n    # Normalize the fit scores using softmax to get probabilities\n    \n    # Avoid division by zero by adding a small value to all scores\n    fit_scores = np.maximum(fit_scores, 1e-6)\n    \n    exp_fit_scores = np.exp(fit_scores)\n    \n    softmax_probs = exp_fit_scores / np.sum(exp_fit_scores)\n\n    return softmax_probs\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 2.0  # Highest priority\n\n    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins\n    if np.sum(priorities) == 0:\n        diff = bins_remain_cap - item\n        valid_bins = diff >= 0  # Only consider bins that can fit the item\n\n        if np.sum(valid_bins) > 0:\n            # Score based on waste (smaller waste is better)\n            waste_scores = -diff[valid_bins]\n\n            # Score based on bin fullness (avoid extremes)\n            fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))\n            fullness_scores = -np.abs(fullness - 0.5)  # Penalize bins that are very empty or very full\n\n            # Combine scores (weighted sum)\n            combined_scores = 0.7 * waste_scores + 0.3 * fullness_scores\n\n            # Apply sigmoid to get priorities\n            priorities[valid_bins] = 1.0 / (1.0 + np.exp(-combined_scores))\n\n            # Normalize priorities\n            priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, minimize waste, avoid extremes, and normalize/smooth scores for robust bin packing.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}