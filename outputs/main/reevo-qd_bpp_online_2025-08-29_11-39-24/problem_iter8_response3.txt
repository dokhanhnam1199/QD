```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined Sigmoid Fit Score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin. A good fit means the item isn't too big
    # relative to the bin's remaining capacity, but also isn't too small (avoiding tiny waste).
    fit_scores = (bins_remain_cap - item) / bins_remain_cap

    # Apply the sigmoid function to the fit scores.
    k = 3  # Steeperness of the curve. Higher k means more emphasis on good fits.
    x0 = 0.25  # Midpoint of the curve. Adjust to prefer tighter or looser fits.
    
    # Avoid division by zero or inf by setting a minimum remaining capacity
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)
    fit_scores = (bins_remain_cap - item) / bins_remain_cap
    
    priorities = 1 / (1 + np.exp(-k * (fit_scores - x0)))
    
    # Normalize priorities to avoid extreme values. Helps prevent a single bin always being favored.
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)
    
    # Boost priority for bins where the item fits exactly (or very closely)
    exact_fit_bins = np.where(np.abs(bins_remain_cap - item) < 1e-6)[0]
    priorities[exact_fit_bins] += 0.5  # Add a constant boost. Can tune this value.

    return priorities
```
