```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit gets highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # Consider bins with enough capacity
    remaining_bins = np.where(bins_remain_cap >= item)[0]

    if len(remaining_bins) > 0:
        # Waste calculation
        waste = bins_remain_cap[remaining_bins] - item

        # Distance from ideal fill (half-full) - Assuming bin capacity is 1.0
        distance_from_half = np.abs(bins_remain_cap[remaining_bins] - 0.5)

        # Sigmoid function for nuanced fits, normalized by item size
        sigmoid_scores = 1.0 / (1.0 + np.exp(-(bins_remain_cap[remaining_bins] - item) / (item + 1e-6)))

        # Combine factors with weighting
        priorities[remaining_bins] = 0.6 * sigmoid_scores + 0.3 / (waste + 1e-6) - 0.1 * distance_from_half

    return priorities
```
