```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 2.0  # Highest priority

    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins
    if np.sum(priorities) == 0:
        diff = bins_remain_cap - item
        valid_bins = diff >= 0  # Only consider bins with enough capacity

        if np.any(valid_bins):
            # Sigmoid function to score nuanced fits, focusing on minimizing waste
            sigmoid_input = diff[valid_bins]
            sigmoid_scores = 1.0 / (1.0 + np.exp(-0.5 * sigmoid_input))

            # Penalize almost full bins - adjust fullness calculation
            fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
            priorities[valid_bins] = sigmoid_scores * (1.0 - fullness)
        else:
            # No suitable bin found
            priorities[:] = -np.inf  # Assign lowest priority to all bins

    # Add a small bonus for bins that are less than half full
    half_full = np.max(bins_remain_cap) / 2.0
    priorities[bins_remain_cap < half_full] += 0.1

    return priorities
```
