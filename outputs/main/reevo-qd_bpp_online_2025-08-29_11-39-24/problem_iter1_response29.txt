```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin (how well the item fits into the remaining capacity).
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    
    # Normalize the fit scores using softmax to get probability-like priorities.
    # Add a small epsilon to avoid division by zero and to ensure probabilities sum to 1.
    epsilon = 1e-8
    exp_fit_scores = np.exp(fit_scores / (max(fit_scores) + epsilon))
    priorities = exp_fit_scores / (np.sum(exp_fit_scores) + epsilon)

    return priorities
```
