```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Apply the sigmoid function to the fit scores
    # Sigmoid function: f(x) = 1 / (1 + exp(-k * (x - x0)))
    # Parameters:
    #   k: Steeperness of the curve
    #   x0: Midpoint of the curve

    k = 2  # Adjust k to control the sigmoid steepness
    x0 = 0.5  # Adjust x0 to control where the sigmoid transitions

    priorities = 1 / (1 + np.exp(-k * (fit_scores - x0)))

    # Normalize priorities to avoid extreme values.  Helps prevent a single bin always being favored
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))
    
    return priorities
```
