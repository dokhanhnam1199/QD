```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Avoid division by zero. Add a small epsilon to the denominator.
    epsilon = 1e-6
    
    # Calculate the difference between the item size and the remaining capacity of each bin.
    diff = np.abs(bins_remain_cap - item)

    # For bins that have sufficient capacity, the priority is inversely proportional to the difference.
    # This favors bins where the item fits snugly.
    # For bins that don't have sufficient capacity, assign a very low priority.
    
    sufficient_capacity = bins_remain_cap >= item
    
    priorities[sufficient_capacity] = 1.0 / (diff[sufficient_capacity] + epsilon)
    
    return priorities
```
