```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a combined score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Fit score: how well the item fits in the bin (smaller is better)
    fit_score = item / bins_remain_cap
    fit_score[~valid_bins] = np.inf  # Assign a very low priority to invalid bins

    # Waste score: how much space is left after adding the item (smaller is better)
    waste_score = (bins_remain_cap - item)
    waste_score[~valid_bins] = -np.inf

    # Interaction score: combine fit and waste
    interaction_score = waste_score / (fit_score + 1e-6)  # Avoid division by zero

    # Normalize and scale scores
    normalized_interaction_score = (interaction_score - np.min(interaction_score[valid_bins])) / \
                                 (np.max(interaction_score[valid_bins]) - np.min(interaction_score[valid_bins]))

    priorities[valid_bins] = normalized_interaction_score

    return priorities
```
