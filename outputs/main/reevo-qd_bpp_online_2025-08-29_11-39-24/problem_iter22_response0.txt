```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins
    if np.sum(priorities) == 0:
        possible_bins = bins_remain_cap >= item
        if np.any(possible_bins):
            diff = bins_remain_cap[possible_bins] - item
            # Prioritize bins with the smallest waste (difference)
            priorities[possible_bins] = 1.0 / (diff + 1e-6)  # Add a small constant to avoid division by zero

            # Normalize priorities based on bin fullness
            fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
            priorities = priorities * (1.0 - fullness)  # Penalize almost full bins
        else:
            # No bin can fit the item
            priorities[:] = 0.0

    return priorities
```
