```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)

    # Calculate the 'best fit' priority - how well the item fits.
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        fit_scores = bins_remain_cap[feasible_bins] - item  # How much space is left
        priorities[feasible_bins] = -fit_scores  # Prefer tighter fits (smaller remaining space)

    # Add a small random value for exploration
    if np.random.random() < epsilon:
        priorities += np.random.rand(n_bins) * 0.1

    # Ensure priorities are not all zero. Add a small value to all bins
    priorities += 1e-6

    return priorities
```
