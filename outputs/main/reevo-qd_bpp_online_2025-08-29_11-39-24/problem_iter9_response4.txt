```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits!
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000  # Highest priority

    # Score bins by a normalized, non-linear combination of fit & remaining capacity
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])

        # Sigmoid scaling to balance greediness and exploration
        sigmoid_fullness = 1 / (1 + np.exp(-5 * (fullness - 0.5)))  # Adjust parameters as needed

        # Combine fullness and remaining capacity
        priorities[valid_bins] = sigmoid_fullness + 1 / (remaining_capacity + 1e-6)

    return priorities
```
