```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Calculate the fullness score for each bin (lower is better)
    fullness_scores = 1 - (bins_remain_cap / np.max(bins_remain_cap))

    # Combine fit and fullness scores
    combined_scores = fit_scores - fullness_scores

    # Apply the sigmoid function to the combined scores
    k = 2  # Adjust k to control the sigmoid steepness
    x0 = 0.5  # Adjust x0 to control where the sigmoid transitions
    priorities = 1 / (1 + np.exp(-k * (combined_scores - x0)))

    # Normalize priorities to avoid extreme values. Helps prevent a single bin always being favored
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))

    return priorities
```
