```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits
    exact_fit = np.isclose(bins_remain_cap, item)
    priorities[exact_fit] = 1000.0

    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])

        # Snugness scoring (inverse of remaining capacity)
        snugness = 1 / (remaining_capacity + 1e-6)  # Avoid division by zero

        # Combine fullness and snugness with weights
        priorities[valid_bins] = 0.6 * fullness + 0.4 * snugness

    # Penalize bins that are almost full or almost empty
    bin_fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities = priorities * (1 - np.abs(bin_fullness - 0.5))

    return priorities
```
