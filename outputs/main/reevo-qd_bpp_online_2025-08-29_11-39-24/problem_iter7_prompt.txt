{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n## Online BPP Heuristic Design \u2013 Actionable Hints:\n\n**Focus:** Exact fits first, then minimize waste *and* consider bin fullness. **Score:** Use sigmoid scaling combining fit & remaining capacity. **Balance:** Greedy exploitation with controlled exploration\u2014tune the rate! Prioritize bins near item size.\n\n\n\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Prioritize bins where the item fits exactly\n    exact_fit = bins_remain_cap == item\n    priorities[exact_fit] = 1000  # Highest priority\n\n    # Prioritize bins where the item fits with minimal remaining capacity and highest fullness\n    remaining_capacity = bins_remain_cap - item\n    valid_bins = remaining_capacity >= 0\n\n    if np.any(valid_bins):\n        fullness = 1 - (remaining_capacity[valid_bins] / bins_remain_cap[valid_bins])\n        priorities[valid_bins] = fullness + 1 / (remaining_capacity[valid_bins] + 1e-6) # Combine fullness and minimal waste\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}