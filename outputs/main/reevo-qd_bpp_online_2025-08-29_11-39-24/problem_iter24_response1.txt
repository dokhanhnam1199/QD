```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    feasible_bins = bins_remain_cap >= item

    if np.sum(feasible_bins) == 0:
        return priorities

    remaining_capacities = bins_remain_cap[feasible_bins]
    distances = np.abs(remaining_capacities - item)

    # Combine fit and fragmentation.  Higher remaining capacity is good, but
    # closer fit is also good.
    fit_score = 1.0 / (distances + 1e-6)
    fragmentation_score = remaining_capacities

    priorities[feasible_bins] = fit_score * fragmentation_score

    # Epsilon-greedy exploration
    if np.random.random() < epsilon:
        # Explore: Assign a random priority to each bin, even if the item doesn't fit
        priorities = np.random.rand(n_bins)

    return priorities
```
