```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Prioritize exact fits
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # Calculate fit score (how close to the bin size the item is)
        fit_score = np.exp(-((bins_remain_cap[valid_bins] - item) / item)**2)  # Sigmoid-like scaling

        # Calculate fullness score (how full the bin is after adding the item)
        fullness_score = 1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]

        # Combine fit and fullness scores (weighted sum)
        priorities[valid_bins] = 0.7 * fullness_score + 0.3 * fit_score

    return priorities
```
