{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n## Online BPP Heuristic Design \u2013 Constructive Hints:\n\n**Lead with exact fits!** Prioritize tight fits, balance fullness & waste (item-to-bin ratio helps). Normalize scores, avoid extremes, & keep it simple \u2013 exploration via small bonuses is key.\n\n\n\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin. Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0  # High priority for exact fits\n\n    # If no exact fit, prioritize based on minimizing waste and bin fullness\n    if np.sum(priorities) == 0:\n        diff = bins_remain_cap - item\n        feasible_bins = diff >= 0\n\n        if np.any(feasible_bins):\n            # Calculate waste\n            waste = diff[feasible_bins]\n            # Normalize waste - smaller waste is better\n            normalized_waste = 1.0 / (waste + 1e-6)\n\n            # Consider bin fullness\n            fullness = bins_remain_cap / np.max(bins_remain_cap)\n            # Prioritize bins that are moderately full\n            fullness_factor = np.exp(-((fullness - 0.5) ** 2) / 0.05)\n\n            # Combine waste and fullness factors. Increased weight on waste\n            priorities[feasible_bins] = 0.7 * normalized_waste + 0.3 * fullness_factor\n        else:\n            priorities[:] = -1.0  # No bin can fit the item\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}