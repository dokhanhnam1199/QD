```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Prioritize exact fits
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0
    
    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # Calculate fit score (how close the bin capacity is to the item size)
        fit_score = np.abs(bins_remain_cap[valid_bins] - item)
        
        # Normalize fit score using sigmoid function
        # Scale the sigmoid to emphasize closer fits
        fit_score_scaled = 1.0 / (1.0 + np.exp(fit_score))
        
        # Calculate remaining capacity
        remaining_capacity = bins_remain_cap[valid_bins] - item
        
        # Calculate fullness (how full the bin will be after adding the item)
        fullness = 1.0 - (remaining_capacity / bins_remain_cap[valid_bins])
        
        # Combine fit and fullness using a weighted sum
        # Adjust the weights to balance fit and fullness
        priority = 0.6 * fullness + 0.4 * fit_score_scaled
        
        priorities[valid_bins] = priority
    
    return priorities
```
