```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 2.0  # Highest priority

    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins
    if np.sum(priorities) == 0:
        diff = bins_remain_cap - item
        valid_bins = diff >= 0  # Only consider bins that can fit the item

        if np.sum(valid_bins) > 0:
            # Score based on waste (smaller waste is better)
            waste_scores = -diff[valid_bins]

            # Score based on bin fullness (avoid extremes)
            fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
            fullness_scores = -np.abs(fullness - 0.5)  # Penalize bins that are very empty or very full

            # Combine scores (weighted sum)
            combined_scores = 0.7 * waste_scores + 0.3 * fullness_scores

            # Apply sigmoid to get priorities
            priorities[valid_bins] = 1.0 / (1.0 + np.exp(-combined_scores))

            # Normalize priorities
            priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)

    return priorities
```
