```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score with Epsilon-Greedy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the fit score for each bin
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)  # Avoid division by zero
    fit_scores = item / bins_remain_cap

    # Apply the sigmoid function to the fit scores
    k = 2  # Steeperness of the curve
    x0 = 0.5  # Midpoint of the curve
    sigmoid_scores = 1 / (1 + np.exp(-k * (fit_scores - x0)))

    # Normalize priorities to avoid extreme values
    priorities = (sigmoid_scores - np.min(sigmoid_scores)) / (np.max(sigmoid_scores) - np.min(sigmoid_scores) + 1e-8)

    # Epsilon-greedy exploration
    if np.random.rand() < epsilon:
        num_explore = min(num_bins, 5)
        explore_indices = np.random.choice(num_bins, size=num_explore, replace=False)
        priorities[explore_indices] += np.random.rand(num_explore) * 0.2  # Add a small random bonus

    return priorities
```
