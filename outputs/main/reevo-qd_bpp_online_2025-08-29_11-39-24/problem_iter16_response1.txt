```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Prioritize exact fits!
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000  # Highest priority

    # Score bins by a normalized, non-linear combination of fit & remaining capacity
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])
        # Sigmoid scaling to control exploration vs. exploitation
        sigmoid_scale = 7  # Tune this parameter
        sigmoid = 1 / (1 + np.exp(-sigmoid_scale * fullness))
        # Combine fullness (via sigmoid) and remaining capacity
        priorities[valid_bins] = sigmoid + 1 / (remaining_capacity + 1e-6)
        # Add a small bonus for bins with larger remaining capacity (encourages spreading items)
        priorities[valid_bins] += 0.1 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))

    return priorities
```
