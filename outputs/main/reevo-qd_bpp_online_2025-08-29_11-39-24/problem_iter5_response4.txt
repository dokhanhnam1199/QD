```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits
    exact_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[exact_fit] = 1000

    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacity = bins_remain_cap[valid_bins] - item
        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])

        # Sigmoid scoring for "snugness" - combine item size and remaining capacity
        snugness = 1 / (1 + np.exp(-(bins_remain_cap[valid_bins] - item)))
        
        # Avoid extremely full or empty bins.
        fullness_penalty = np.exp(-fullness**2)
        
        priorities[valid_bins] = snugness * fullness_penalty

    return priorities
```
