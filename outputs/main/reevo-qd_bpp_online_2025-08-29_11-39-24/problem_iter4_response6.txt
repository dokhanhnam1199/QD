```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    epsilon = 1e-6  # Avoid division by zero.

    # Calculate the difference between the item size and the remaining capacity of each bin.
    diff = np.abs(bins_remain_cap - item)

    # For bins that have sufficient capacity, the priority is inversely proportional to the difference.
    # This favors bins where the item fits snugly.
    sufficient_capacity = bins_remain_cap >= item
    priorities[sufficient_capacity] = 1.0 / (diff[sufficient_capacity] + epsilon)

    # Add a small bonus for bins with very little remaining capacity. This encourages filling up bins.
    # The bonus is inversely proportional to the remaining capacity.
    remaining_capacity_bonus = 1.0 / (bins_remain_cap + epsilon)
    priorities += 0.1 * remaining_capacity_bonus # Adjust the weight (0.1) as needed.

    return priorities
```
