```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Prioritize bins where the item fits exactly
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000  # Highest priority

    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # Normalize remaining capacity
        normalized_remaining_cap = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
        # Use sigmoid function to prioritize fullness and waste reduction
        fullness = 1 - normalized_remaining_cap
        sigmoid_fullness = 1 / (1 + np.exp(-5 * (fullness - 0.5)))  # Adjust the scaling factor as needed
        priorities[valid_bins] = sigmoid_fullness

    return priorities
```
