```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact Fit First: Highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # Calculate waste and normalized distance to item size
    remaining_bins = np.where(priorities == 0)[0]
    if len(remaining_bins) > 0:
        waste = bins_remain_cap[remaining_bins] - item
        normalized_distance = waste / item
        
        # Sigmoid function to score nuanced fits (avoiding near-empty or near-full bins)
        # Adjust steepness and center for desired behavior
        steepness = 2.0
        center = 0.1  # Shifted to favor bins closer to being full but not completely full
        sigmoid_scores = 1 / (1 + np.exp(-steepness * (normalized_distance - center)))
        
        # Normalize scores to avoid large differences
        priorities[remaining_bins] = sigmoid_scores

    return priorities
```
