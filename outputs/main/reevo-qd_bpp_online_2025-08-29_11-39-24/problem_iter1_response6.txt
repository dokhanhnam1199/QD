```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin using a sigmoid function
    # Fit score = sigmoid( (bin_remaining_capacity - item) / item)
    # The sigmoid function ensures that the fit score is between 0 and 1
    # A higher fit score indicates a better fit for the item

    fit_scores = 1 / (1 + np.exp(-(bins_remain_cap - item) / item))

    # Penalize bins that are nearly full, promoting filling smaller bins first.  Scale factor helps finetuning
    #scale_factor = 0.1
    #penalties = np.exp(-bins_remain_cap / (item * scale_factor))
    #priorities = fit_scores * (1 - penalties)

    #Adjust fit_scores with a small penalty for bins with extremely low remaining capacity, so prevent divide by zero.
    #priorities = np.where(bins_remain_cap < 1e-6, -np.inf, fit_scores)

    priorities = fit_scores

    return priorities
```
