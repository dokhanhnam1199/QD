```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # If no exact fit, prioritize based on minimizing waste and bin fullness avoidance
    if np.sum(priorities) == 0:
        diff = bins_remain_cap - item
        feasible_bins = diff >= 0

        if np.any(feasible_bins):
            # Calculate waste
            waste = diff[feasible_bins]

            # Normalize waste - smaller waste is better
            normalized_waste = 1.0 / (waste + 1e-6)

            # Avoid near-empty or full bins
            fullness = bins_remain_cap / np.max(bins_remain_cap)
            avoidance_factor = np.exp(-((fullness[feasible_bins] - 0.5) ** 2) / 0.02)  # Sharper penalty

            # Combine waste and avoidance
            priorities[feasible_bins] = 0.7 * normalized_waste + 0.3 * avoidance_factor
        else:
            priorities[:] = -1.0  # No bin can fit the item
    return priorities
```
