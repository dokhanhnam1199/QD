```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin: how well the item fits in the remaining capacity
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Calculate the distance between the item size and the remaining capacity of each bin.
    distances = np.abs(bins_remain_cap - item)

    # Handle the case where a bin has exactly the item size to avoid division by zero.
    distances[distances == 0] = 1e-6

    # Combine fit and inverse distance. Give more weight to fit.
    priorities = fit_scores / (distances)

    # If a bin's capacity is less than the item size, set its priority to 0.
    priorities[bins_remain_cap < item] = 0

    # Penalize bins that are almost full.
    remaining_capacity_ratio = bins_remain_cap / 100  # Assuming bin size is 100
    priorities = priorities * (1 - remaining_capacity_ratio)

    # Add a small value to avoid zero priorities
    priorities = np.maximum(priorities, 1e-6)

    return priorities
```
