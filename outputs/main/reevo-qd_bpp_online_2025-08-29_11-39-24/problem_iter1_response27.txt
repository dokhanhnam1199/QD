```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Find bins that can accommodate the item
    suitable_bins = bins_remain_cap >= item

    # If no bin can accommodate the item, return zeros
    if not np.any(suitable_bins):
        return np.zeros_like(bins_remain_cap)

    # Assign random priorities to suitable bins.  Smaller remainder gives higher priority
    priorities = np.zeros_like(bins_remain_cap)
    priorities[suitable_bins] = bins_remain_cap[suitable_bins] - item

    # normalize the priority value with the total bins_remain_cap value
    priorities = priorities / np.sum(bins_remain_cap)

    return priorities
```
