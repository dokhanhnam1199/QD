{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin\n    fit_scores = item / bins_remain_cap\n\n    # Apply the sigmoid function to the fit scores\n    # Sigmoid function: f(x) = 1 / (1 + exp(-k * (x - x0)))\n    # Parameters:\n    #   k: Steeperness of the curve\n    #   x0: Midpoint of the curve\n\n    k = 2  # Adjust k to control the sigmoid steepness\n    x0 = 0.5  # Adjust x0 to control where the sigmoid transitions\n\n    priorities = 1 / (1 + np.exp(-k * (fit_scores - x0)))\n\n    # Normalize priorities to avoid extreme values.  Helps prevent a single bin always being favored\n    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0\n\n    # If no exact fit, prioritize based on minimizing waste and bin fullness\n    if np.sum(priorities) == 0:\n        diff = bins_remain_cap - item\n        feasible_bins = np.where(diff >= 0)[0]\n\n        if len(feasible_bins) > 0:\n            # Calculate item-to-bin ratio (fit)\n            fit = item / bins_remain_cap[feasible_bins]\n\n            # Calculate waste\n            waste = diff[feasible_bins]\n\n            # Normalize waste (smaller waste is better)\n            normalized_waste = 1.0 / (waste + 1e-6)\n\n            # Encourage moderate fullness. Penalize near-empty and full bins.\n            fullness = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)\n            fullness_bonus = np.exp(-((fullness - 0.5) ** 2) / 0.02)\n\n            # Combine fit, waste, and fullness for priority\n            priorities[feasible_bins] = 0.4 * fit + 0.4 * normalized_waste + 0.2 * fullness_bonus\n        else:\n            priorities[:] = -1.0  # No bin can fit the item\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, waste reduction, and moderate bin fullness\u2014balance fit, waste, & utilization.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}