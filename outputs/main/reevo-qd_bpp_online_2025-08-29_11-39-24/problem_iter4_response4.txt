```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # If no exact fit, prioritize based on minimizing waste and avoiding near-empty/full bins
    if np.sum(priorities) == 0:
        diff = np.abs(bins_remain_cap - item)
        
        # Sigmoid function to score nuanced fits
        sigmoid_input = -diff
        priorities = 1.0 / (1.0 + np.exp(-0.5 * sigmoid_input))

        # Normalize priorities based on bin fullness. Add small value to avoid division by zero
        fullness = 1.0 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-9))
        priorities = priorities * (1.0 - fullness)
        
        # Penalize almost full bins more strongly
        priorities[fullness > 0.9] *= 0.5

    return priorities
```
