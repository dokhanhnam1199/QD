```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin: how well the item fits in the remaining capacity
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Normalize the fit scores using softmax to get probabilities
    # Avoid division by zero by adding a small value to all scores
    fit_scores = np.maximum(fit_scores, 1e-6)
    exp_fit_scores = np.exp(fit_scores)
    softmax_probs = exp_fit_scores / np.sum(exp_fit_scores)

    return softmax_probs
```
