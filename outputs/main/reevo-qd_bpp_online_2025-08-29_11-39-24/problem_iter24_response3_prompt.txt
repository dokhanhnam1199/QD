{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin: how well the item fits in the remaining capacity\n    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)\n\n    # Calculate the distance between the item size and the remaining capacity of each bin.\n    distances = np.abs(bins_remain_cap - item)\n\n    # Handle the case where a bin has exactly the item size to avoid division by zero.\n    distances[distances == 0] = 1e-6\n\n    # Combine fit and inverse distance. Give more weight to fit.\n    priorities = fit_scores / (distances)\n\n    # If a bin's capacity is less than the item size, set its priority to 0.\n    priorities[bins_remain_cap < item] = 0\n\n    # Penalize bins that are almost full.\n    remaining_capacity_ratio = bins_remain_cap / 100  # Assuming bin size is 100\n    priorities = priorities * (1 - remaining_capacity_ratio)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Exact fit gets highest priority\n    exact_fit = bins_remain_cap == item\n    priorities[exact_fit] = 1000.0\n    # For bins where the item fits\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        remaining_capacity = bins_remain_cap[valid_bins] - item\n        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])\n        # Sigmoid function to normalize and emphasize fullness\n        sigmoid_fullness = 1 / (1 + np.exp(-8 * (fullness - 0.5)))  # Increased sensitivity\n        # Combine fullness and inverse remaining capacity, with a higher weight on fullness\n        priorities[valid_bins] = 2 * sigmoid_fullness + 1 / (remaining_capacity + 1e-6)\n    return priorities\n\n[Reflection]\nPrioritize exact fits, fullness, & avoid division by zero; combine multiple factors with weighting.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}