```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the 'greedy' priority: preference for bins with enough capacity.
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        fit_indices = np.where(valid_bins)[0]
        # Prioritize bins with the smallest remaining capacity.
        priorities[fit_indices] = 1.0 / (bins_remain_cap[fit_indices] - item + 1e-6)

    # Epsilon-greedy exploration: randomly assign priority to some bins.
    if np.random.rand() < epsilon:
        num_explore = min(num_bins, 5)  # Explore up to 5 bins
        random_bins = np.random.choice(num_bins, size=num_explore, replace=False)
        priorities[random_bins] = np.random.rand(num_explore)

    return priorities
```
