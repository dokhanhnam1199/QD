```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Exact fit gets highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1000.0

    # Calculate the difference between item size and remaining bin capacity
    diff = np.abs(bins_remain_cap - item)

    # Sigmoid function to score the fit (higher score for better fit)
    # The sigmoid function is centered around a difference of 0.
    # The scale factor controls the steepness of the sigmoid.
    scale = 1.0  # Adjust this to control the sensitivity to differences
    sigmoid_scores = 1.0 / (1.0 + np.exp(-scale * diff))

    # Normalize the sigmoid scores to avoid dominance by exact fits
    priorities += sigmoid_scores

    # Penalize near-empty or near-full bins
    # Encourage spreading items across bins
    bin_fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))  # Scale between 0 and 1
    priorities -= 0.1 * np.abs(bin_fullness - 0.5) # Smaller penalty, can adjust to balance

    return priorities
```
