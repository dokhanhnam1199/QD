{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Prioritize exact fits\n    exact_fit = np.isclose(bins_remain_cap, item)\n    priorities[exact_fit] = 1000.0\n\n    # Prioritize bins where the item fits\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        remaining_capacity = bins_remain_cap[valid_bins] - item\n        fullness = 1 - (remaining_capacity / bins_remain_cap[valid_bins])\n\n        # Sigmoid scoring for \"snugness\"\n        snugness = 1 / (remaining_capacity + 1e-6)  # Avoid division by zero\n        snugness = 1 / (1 + np.exp(-5 * (snugness - np.mean(snugness)))) # Scale and sigmoid\n\n        # Combine fullness and snugness, with a bias towards higher fullness\n        priorities[valid_bins] = 0.7 * fullness + 0.3 * snugness\n\n    # Avoid extremely full or empty bins\n    bin_fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities = priorities * (1 - np.abs(bin_fullness - 0.5))  # Penalize extreme fullness\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the fit score for each bin\n    fit_scores = np.where(bins_remain_cap >= item, item / bins_remain_cap, 0.0)\n\n    # Apply the sigmoid function to the fit scores\n    k = 4  # Adjust k to control the sigmoid steepness\n    x0 = 0.7 # Adjust x0 to control where the sigmoid transitions\n    sigmoid_scores = 1 / (1 + np.exp(-k * (fit_scores - x0)))\n\n    # Add an exploration factor to encourage trying different bins\n    exploration_factor = 0.15\n    exploration_scores = np.random.rand(num_bins) * exploration_factor\n\n    # Combine fit and exploration scores\n    priorities = sigmoid_scores + exploration_scores\n\n    # Normalize priorities to avoid extreme values. Helps prevent a single bin always being favored\n    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-6)\n\n    return priorities\n\n[Reflection]\nPrioritize fit, explore diverse options, and normalize scores\u2014avoiding dominance & stagnation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}