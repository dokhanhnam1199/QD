{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no zero or negative remaining capacities\n    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)\n\n    # Calculate the fit score (item size relative to bin capacity)\n    fit_scores = item / bins_remain_cap\n\n    # Apply the sigmoid function to the fit scores\n    k = 4  # Adjust for steepness\n    x0 = 0.6  # Adjust for midpoint\n    priorities = 1 / (1 + np.exp(-k * (fit_scores - x0)))\n\n    # Bonus for bins with very little remaining capacity\n    remaining_ratio = (bins_remain_cap - item) / bins_remain_cap\n    remaining_ratio = np.clip(remaining_ratio, 0, 1)\n    priorities += 0.2 * remaining_ratio  # Increased bonus\n\n    # Penalty for bins that are almost full, discouraging adding to nearly full bins unless necessary\n    almost_full_penalty = np.exp(-10 * (bins_remain_cap - item))\n    priorities -= 0.05 * almost_full_penalty\n\n    # Normalize priorities to the range [0, 1] to avoid domination by a single bin\n    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Exact fit first\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_bins] = 1.0\n\n    # If no exact fit, calculate priority based on waste and bin fullness\n    if np.sum(priorities) == 0:\n        diff = np.abs(bins_remain_cap - item)\n        waste = diff  # Waste is simply the absolute difference\n        \n        # Sigmoid function to normalize waste and bin fullness\n        fullness = bins_remain_cap\n        \n        # Avoid division by zero and overly strong preference for very small bins\n        normalized_waste = waste / (item + 1e-6)\n        normalized_fullness = fullness / (1.0 + 1e-6) # Scale bin fullness\n        \n        # Combine waste and bin fullness. Lower waste and medium fullness is best.\n        priority = np.exp(-normalized_waste) * normalized_fullness\n        priorities = priority\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits & balance waste minimization with moderate bin fullness\u2014avoid extremes.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}