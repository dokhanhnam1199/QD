```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit first
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 1.0

    # If no exact fit, calculate priority based on waste and bin fullness
    if np.sum(priorities) == 0:
        diff = np.abs(bins_remain_cap - item)
        waste = diff  # Waste is simply the absolute difference

        # Sigmoid function to normalize waste and bin fullness
        fullness = bins_remain_cap
        normalized_waste = waste / (item + 1e-6)
        normalized_fullness = fullness / (1.0 + 1e-6)

        # Combine waste and bin fullness. Lower waste and medium fullness is best.
        priority = np.exp(-normalized_waste) * normalized_fullness
        priorities = priority

    return priorities
```
