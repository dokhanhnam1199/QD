import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random solutions, evaluates their lengths, and assigns higher probabilities to edges that appear more frequently in shorter solutions, but with a score function that gives exponentially higher weight to shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random permutation of cities
        permutation = np.random.permutation(n)
        
        # Calculate the total distance of the tour
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[permutation[i], permutation[i+1]]
        tour_distance += distance_matrix[permutation[-1], permutation[0]]
        
        # Update the heuristics matrix based on edges in this tour, using exponential weighting
        score = np.exp(-tour_distance / 100)  # Exponential score function
        for i in range(n - 1):
            heuristics_matrix[permutation[i], permutation[i+1]] += score
            heuristics_matrix[permutation[i+1], permutation[i]] += score #Symmetric matrix
        heuristics_matrix[permutation[-1], permutation[0]] += score
        heuristics_matrix[permutation[0], permutation[-1]] += score

    return heuristics_matrix
