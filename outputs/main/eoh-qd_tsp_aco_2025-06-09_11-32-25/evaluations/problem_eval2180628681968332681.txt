import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses reinforcement learning principles to iteratively update edge heuristic values based on the quality of sampled tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 0.1  # Learning rate
    gamma = 0.9  # Discount factor
    num_episodes = 500

    for _ in range(num_episodes):
        # Sample a tour using heuristics
        tour = [np.random.randint(n)]
        unvisited = set(range(n))
        unvisited.remove(tour[0])
        
        while unvisited:
            current_node = tour[-1]
            probabilities = heuristics_matrix[current_node, list(unvisited)]
            probabilities /= np.sum(probabilities)
            next_node = np.random.choice(list(unvisited), p=probabilities)
            tour.append(next_node)
            unvisited.remove(next_node)

        tour.append(tour[0]) # Return to starting node
        
        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
            
        # Update heuristics based on tour length
        reward = -tour_length  # Negative tour length as reward (minimize)
        
        for i in range(n):
            edge_i = tour[i]
            edge_j = tour[i+1]
            heuristics_matrix[edge_i, edge_j] += alpha * (reward + gamma * np.max(heuristics_matrix[edge_j, :]) - heuristics_matrix[edge_i, edge_j])
            heuristics_matrix[edge_j, edge_i] = heuristics_matrix[edge_i, edge_j] # Symmetry

    return heuristics_matrix
