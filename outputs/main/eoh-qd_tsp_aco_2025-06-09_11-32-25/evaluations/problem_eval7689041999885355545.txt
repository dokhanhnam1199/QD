import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses a greedy approach to build tours from multiple random starting nodes, then reinforces edges present in the constructed tours, creating a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_starts = 50

    for _ in range(num_starts):
        start_node = np.random.randint(n)
        unvisited = list(range(n))
        unvisited.remove(start_node)
        current_node = start_node
        tour = [start_node]

        while unvisited:
            nearest_node = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_node)
            unvisited.remove(nearest_node)
            current_node = nearest_node

        tour.append(start_node)

        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
    
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
