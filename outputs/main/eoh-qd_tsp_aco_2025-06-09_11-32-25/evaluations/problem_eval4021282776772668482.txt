import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge sampling from a greedy construction with path relinking to generate diverse solutions and update edge inclusion probabilities.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        # Greedy construction
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            next_node = min(unvisited_nodes, key=lambda node: distances[node])
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(path[0])

        # Path relinking - simplified: swap two random nodes in the path
        swap_indices = np.random.choice(n, 2, replace=False)
        path[swap_indices[0]], path[swap_indices[1]] = path[swap_indices[1]], path[swap_indices[0]]

        # Update heuristics matrix with edge frequencies
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
