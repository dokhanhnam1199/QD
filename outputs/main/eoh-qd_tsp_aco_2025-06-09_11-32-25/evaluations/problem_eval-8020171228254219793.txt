import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, and for each edge in a tour, the score is increased inversely proportional to the rank of that edge's length among all edges in the tour.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting city

        # Calculate edge lengths for the tour
        edge_lengths = []
        for i in range(n):
            edge_lengths.append(distance_matrix[tour[i], tour[i+1]])
        
        # Rank the edges by length within the tour
        ranks = np.argsort(edge_lengths)

        # Update heuristics based on rank (shorter edges get higher scores)
        for i in range(n):
            edge_index = i
            rank = np.where(ranks == edge_index)[0][0]
            
            # Inversely proportional to rank, add 1 since rank starts from 0
            score = 1 / (rank + 1)

            heuristics_matrix[tour[i], tour[i+1]] += score
            heuristics_matrix[tour[i+1], tour[i]] += score

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
