import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, favoring shorter edges with a squared inverse distance, and accumulates edge usage frequencies to produce a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Initialize tour
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            # Probabilistically select next node based on distance, using squared inverse
            probabilities = np.zeros(n)
            for node in unvisited_nodes:
                probabilities[node] = 1 / ((distance_matrix[current_node, node] + 1e-9)**2)  # Avoid division by zero
            probabilities /= np.sum(probabilities)  # Normalize to create a probability distribution

            next_node = np.random.choice(list(unvisited_nodes), p=probabilities[list(unvisited_nodes)])
            
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        # Complete the tour by returning to the starting node
        tour.append(tour[0])

        # Update the heuristic matrix based on edges used in the tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Ensure symmetry

    heuristics_matrix /= num_samples  # Normalize to get frequencies
    return heuristics_matrix
