import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm adaptively weights edge importance based on the consistency of short tour subsegments across multiple sampled tours.}
    """
    n = distance_matrix.shape[0]
    num_samples = 50
    subsegment_length = 3
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        
        shortest_tours = [(tour, tour_distance)]
        for _ in range(50):
            new_tour = np.random.permutation(n)
            new_tour_distance = 0
            for i in range(n - 1):
                new_tour_distance += distance_matrix[new_tour[i], new_tour[i+1]]
            new_tour_distance += distance_matrix[new_tour[-1], new_tour[0]]
            
            if new_tour_distance < shortest_tours[0][1]:
                shortest_tours[0] = (new_tour, new_tour_distance)

        shortest_tour = shortest_tours[0][0]

        for i in range(n):
            for j in range(n):
                if i != j:
                    
                    subsegment_count = 0
                    for k in range(n - subsegment_length + 1):
                        subsegment = shortest_tour[k:k + subsegment_length]
                        if i in subsegment and j in subsegment:
                            subsegment_count += 1

                    heuristics_matrix[i, j] += subsegment_count

    
    min_val = np.min(heuristics_matrix)
    max_val = np.max(heuristics_matrix)
    if max_val > min_val:
        heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    
    return heuristics_matrix
