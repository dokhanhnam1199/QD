import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, uses a simple local search (2-opt) to improve them, and then counts edge occurrences in the improved tours, normalizing by the number of tours sampled to produce a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    def two_opt(tour):
        best_tour = tour
        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for k in range(i + 1, n + 1):
                    new_tour = tour[:i] + tour[i:k][::-1] + tour[k:]
                    current_cost = sum(distance_matrix[tour[j], tour[j+1]] for j in range(n))
                    new_cost = sum(distance_matrix[new_tour[j], new_tour[j+1]] for j in range(n))
                    if new_cost < current_cost:
                        best_tour = new_tour
                        tour = new_tour
                        improved = True
        return best_tour

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0]) # Return to starting node

        # Improve the tour using 2-opt
        tour = two_opt(tour)
        
        # Count edge occurrences in the improved tour
        for i in range(n):
            edge_counts[tour[i], tour[i+1]] += 1
            edge_counts[tour[i+1], tour[i]] += 1 # since the matrix is symmetric

    # Normalize edge counts by the number of samples
    heuristics_matrix = edge_counts / num_samples
    
    return heuristics_matrix
