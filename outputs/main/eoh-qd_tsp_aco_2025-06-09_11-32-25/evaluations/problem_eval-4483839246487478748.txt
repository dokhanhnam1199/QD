import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines initial inverse distance heuristics by iteratively adjusting edge scores based on the quality of tours constructed using a greedy approach guided by the current heuristics.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = 1.0 / (distance_matrix + np.eye(n))
    np.fill_diagonal(heuristics_matrix, 0)

    num_iterations = 100
    for _ in range(num_iterations):
        # Construct a tour using a greedy approach guided by the heuristics
        start_node = np.random.randint(n)
        unvisited_nodes = list(range(n))
        current_node = start_node
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0.0

        while unvisited_nodes:
            heuristic_values = heuristics_matrix[current_node, unvisited_nodes]
            probabilities = heuristic_values / np.sum(heuristic_values) #turn heuristics to probabilities
            next_node_index = np.random.choice(len(unvisited_nodes), size=1, p=probabilities)[0] #sample the next node
            next_node = unvisited_nodes[next_node_index]

            tour.append(next_node)
            tour_length += distance_matrix[current_node, next_node]
            current_node = next_node
            unvisited_nodes.remove(next_node)
            
        tour.append(start_node)
        tour_length += distance_matrix[current_node, start_node]

        # Update heuristics based on tour quality
        if tour_length < np.mean(distance_matrix) * n:  # If tour is reasonably good
            for i in range(n):
                heuristics_matrix[tour[i], tour[(i + 1) % n]] += 0.05  # Boost edges in good tours
                heuristics_matrix[tour[(i + 1) % n], tour[i]] += 0.05
        else:
            for i in range(n):
                heuristics_matrix[tour[i], tour[(i + 1) % n]] -= 0.01 # Penalize edges in bad tours
                heuristics_matrix[tour[(i + 1) % n], tour[i]] -= 0.01

        heuristics_matrix = np.clip(heuristics_matrix, 0.0, 1.0) #avoid negative values and large values
    return heuristics_matrix
