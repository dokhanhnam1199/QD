import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, calculates their lengths, and then assigns higher heuristic scores to edges present in shorter tours, weighted by the tour's inverse rank.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting city
        tours.append(tour)

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_lengths.append(tour_length)
    
    # Rank the tours by length
    ranked_indices = np.argsort(tour_lengths)

    # Update heuristics based on ranked tours
    for rank, index in enumerate(ranked_indices):
        tour = tours[index]
        weight = 1.0 / (rank + 1)  # Inverse rank as weight

        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
