import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a nearest neighbor approach to estimate edge desirability, favoring edges connecting nodes to their closest neighbors.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    
    for i in range(n):
        # Find the nearest neighbors for node i, excluding itself
        distances = distance_matrix[i, :]
        nearest_neighbors = np.argsort(distances)[1:4]  # Consider top 3 nearest neighbors
        
        for neighbor in nearest_neighbors:
            heuristics_matrix[i, neighbor] = 1 / distance_matrix[i, neighbor] if distance_matrix[i, neighbor] > 0 else 1
            heuristics_matrix[neighbor, i] = 1 / distance_matrix[i, neighbor] if distance_matrix[i, neighbor] > 0 else 1
            
    # Normalize the heuristics matrix
    if np.max(heuristics_matrix) > 0:
        heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    
    return heuristics_matrix
