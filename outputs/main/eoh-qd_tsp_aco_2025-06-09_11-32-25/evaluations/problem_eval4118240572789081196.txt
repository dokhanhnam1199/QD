import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristic matrix by combining inverse distance, a modified nearest neighbor approach, and a distance-based penalty, then normalizes it.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))  # Avoid division by zero

    # Nearest neighbor heuristic (modified)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros((n, n))
    for i in range(n):
        for j in range(1, min(6, n)):  # Consider top 5 nearest neighbors
            neighbor = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor] = 1.0 / j  # Decreasing bonus for further neighbors

    # Penalty for long edges (distance-based)
    median_distance = np.median(distance_matrix)
    long_edge_penalty = np.where(distance_matrix > 1.5 * median_distance, -0.25, 0)  # Penalize edges longer than 1.5x median

    # Combine heuristics
    heuristics_matrix = inverse_distance + nearest_neighbor_bonus + long_edge_penalty

    # Normalize the heuristics matrix
    min_val = np.min(heuristics_matrix)
    max_val = np.max(heuristics_matrix)
    if max_val > min_val:
        heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)

    return heuristics_matrix
