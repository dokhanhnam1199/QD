import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines heuristics by iteratively constructing tours using a nearest neighbor approach guided by current heuristics and updating heuristics based on tour quality.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)  # Initialize with ones.

    num_iterations = 50
    for _ in range(num_iterations):
        start_node = np.random.randint(n)
        unvisited_nodes = list(range(n))
        current_node = start_node
        unvisited_nodes.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited_nodes:
            # Nearest neighbor selection weighted by heuristics
            heuristic_weighted_distances = distance_matrix[current_node, unvisited_nodes] / heuristics_matrix[current_node, unvisited_nodes]
            next_node_index = np.argmin(heuristic_weighted_distances)
            next_node = unvisited_nodes[next_node_index]
            path.append(next_node)
            path_length += distance_matrix[current_node, next_node]
            current_node = next_node
            unvisited_nodes.remove(next_node)

        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]

        # Update heuristics based on path length
        if path_length < np.mean(distance_matrix) * n:
            for i in range(n):
                heuristics_matrix[path[i], path[i+1]] += 0.2
                heuristics_matrix[path[i+1], path[i]] += 0.2
        else:
             for i in range(n):
                heuristics_matrix[path[i], path[i+1]] -= 0.1
                heuristics_matrix[path[i+1], path[i]] -= 0.1

    return heuristics_matrix
