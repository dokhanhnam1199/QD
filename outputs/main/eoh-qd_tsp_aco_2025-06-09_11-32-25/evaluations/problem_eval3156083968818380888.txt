import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by simulating an ant colony optimization (ACO) approach, where ants probabilistically build tours based on pheromone trails and distances, and pheromone is deposited on edges used in shorter tours.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)  # Initial pheromone levels
    alpha = 1  # Pheromone influence
    beta = 2  # Distance influence
    evaporation_rate = 0.5
    Q = 100  # Pheromone deposit constant
    num_ants = n
    num_iterations = 100

    for _ in range(num_iterations):
        all_tours = []
        all_tour_lengths = []

        for ant in range(num_ants):
            unvisited = list(range(n))
            current_city = np.random.choice(unvisited)
            unvisited.remove(current_city)
            tour = [current_city]
            tour_length = 0

            while unvisited:
                probabilities = np.zeros(len(unvisited))
                for i, city in enumerate(unvisited):
                    probabilities[i] = (pheromone_matrix[current_city, city]**alpha) * ((1.0 / distance_matrix[current_city, city])**beta) if distance_matrix[current_city, city] > 0 else 0

                probabilities /= np.sum(probabilities)
                next_city = np.random.choice(unvisited, p=probabilities)
                tour_length += distance_matrix[current_city, next_city]
                current_city = next_city
                tour.append(current_city)
                unvisited.remove(current_city)

            tour_length += distance_matrix[tour[-1], tour[0]]
            all_tours.append(tour)
            all_tour_lengths.append(tour_length)

        # Update pheromone levels
        pheromone_matrix *= (1 - evaporation_rate)
        for tour, tour_length in zip(all_tours, all_tour_lengths):
            pheromone_deposit = Q / tour_length
            for i in range(n - 1):
                pheromone_matrix[tour[i], tour[i+1]] += pheromone_deposit
                pheromone_matrix[tour[i+1], tour[i]] += pheromone_deposit
            pheromone_matrix[tour[-1], tour[0]] += pheromone_deposit
            pheromone_matrix[tour[0], tour[-1]] += pheromone_deposit
    
    return heuristics_matrix
