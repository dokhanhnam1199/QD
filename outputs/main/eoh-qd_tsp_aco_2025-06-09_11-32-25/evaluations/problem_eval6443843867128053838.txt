import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, scores each edge based on its inverse rank in short tours, and returns a matrix representing edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tours.append(tour)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)

    # Rank the tours by length
    ranked_tours = sorted(zip(tour_lengths, tours))
    
    # Only consider the best tours for heuristic calculation
    num_best_tours = min(100, num_samples)
    for rank in range(num_best_tours):
        tour_length, tour = ranked_tours[rank]
        
        # Update heuristics matrix based on edge presence
        score = 1.0 / (rank + 1)  # Inverse rank as the score
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += score
            heuristics_matrix[tour[i+1], tour[i]] += score # Ensure symmetry
        heuristics_matrix[tour[-1], tour[0]] += score
        heuristics_matrix[tour[0], tour[-1]] += score # Ensure symmetry
        
    return heuristics_matrix
