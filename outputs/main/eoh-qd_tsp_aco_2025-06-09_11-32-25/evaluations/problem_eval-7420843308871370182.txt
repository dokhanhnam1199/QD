import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs an ant colony optimization approach, where pheromone trails are deposited on edges based on the quality of tours found by simulated ants, with better tours depositing more pheromone.}"""
    n = distance_matrix.shape[0]
    num_ants = 50
    num_iterations = 100
    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    rho = 0.5  # Evaporation rate
    Q = 100    # Pheromone deposit constant

    pheromone_matrix = np.ones_like(distance_matrix)

    for _ in range(num_iterations):
        ant_tours = []
        ant_tour_lengths = []

        for _ in range(num_ants):
            start_node = np.random.randint(n)
            unvisited = set(range(n))
            unvisited.remove(start_node)
            current_node = start_node
            tour = [start_node]
            tour_length = 0

            while unvisited:
                probabilities = np.zeros(n)
                for next_node in unvisited:
                    probabilities[next_node] = (pheromone_matrix[current_node, next_node]**alpha) * ((1 / distance_matrix[current_node, next_node])**beta)

                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(n, p=probabilities)
                tour.append(next_node)
                tour_length += distance_matrix[current_node, next_node]
                unvisited.remove(next_node)
                current_node = next_node

            tour_length += distance_matrix[current_node, start_node]
            tour.append(start_node)

            ant_tours.append(tour)
            ant_tour_lengths.append(tour_length)

        # Update pheromones
        pheromone_matrix *= (1 - rho)

        for i in range(num_ants):
            tour = ant_tours[i]
            tour_length = ant_tour_lengths[i]
            
            for j in range(n):
                pheromone_matrix[tour[j], tour[j+1]] += Q / tour_length
                pheromone_matrix[tour[j+1], tour[j]] += Q / tour_length
    
    return heuristics_matrix
