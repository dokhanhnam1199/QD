import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple TSP solutions by iteratively adding the shortest edges that don't create cycles or violate degree constraints, then refines these solutions using 2-opt swaps and aggregates edge frequencies.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # 1. Kruskal-like Initialization
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j, distance_matrix[i, j]))
        edges.sort(key=lambda x: x[2])

        parent = list(range(n))
        rank = [0] * n
        degree = [0] * n
        tour = []

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                if rank[root_i] < rank[root_j]:
                    parent[root_i] = root_j
                elif rank[root_i] > rank[root_j]:
                    parent[root_j] = root_i
                else:
                    parent[root_j] = root_i
                    rank[root_i] += 1
                return True
            return False

        for u, v, _ in edges:
            if degree[u] < 2 and degree[v] < 2 and find(u) != find(v):
                if union(u, v):
                    tour.append((u, v))
                    degree[u] += 1
                    degree[v] += 1

        # Connect remaining nodes
        remaining_nodes = [i for i in range(n) if degree[i] < 2]
        
        # Simple completion: connect remaining nodes arbitrarily
        while len(remaining_nodes) > 1:
            u = remaining_nodes.pop(0)
            v = remaining_nodes.pop(0)
            tour.append((u,v))
            degree[u] +=1
            degree[v] +=1
            
        if len(remaining_nodes) == 1:
            u = remaining_nodes[0]
            #Find a node to connect to
            for v in range(n):
                if v!=u and degree[v] < 2:
                    tour.append((u,v))
                    degree[u] += 1
                    degree[v] +=1
                    break


        # Ensure the tour is a list of nodes in order. Find a starting node
        start_node = 0
        node_map = {}
        result_tour = [start_node]
        node_map[start_node] = 1
        
        for _ in range(n):
            for (u,v) in tour:
                if u == result_tour[-1] and v not in node_map:
                    result_tour.append(v)
                    node_map[v] = 1
                    break
                if v == result_tour[-1] and u not in node_map:
                    result_tour.append(u)
                    node_map[u] = 1
                    break        
        result_tour.append(start_node)
        
        # 2. Random Edge Swaps (2-opt) - Improve Solution
        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if j == n:
                        new_distance = distance_matrix[result_tour[i-1], result_tour[j-1]] + distance_matrix[result_tour[i], result_tour[0]]
                        old_distance = distance_matrix[result_tour[i-1], result_tour[i]] + distance_matrix[result_tour[j-1], result_tour[0]]
                    else:
                        new_distance = distance_matrix[result_tour[i-1], result_tour[j]] + distance_matrix[result_tour[i], result_tour[j-1]]
                        old_distance = distance_matrix[result_tour[i-1], result_tour[i]] + distance_matrix[result_tour[j], result_tour[j-1]]

                    if new_distance < old_distance:
                        result_tour[i:j] = reversed(result_tour[i:j])
                        improved = True
                        break
                if improved:
                    break

        # 3. Update Heuristics Matrix
        for i in range(n):
            heuristics_matrix[result_tour[i], result_tour[i+1]] += 1
            heuristics_matrix[result_tour[i+1], result_tour[i]] += 1

    heuristics_matrix /= num_samples

    return heuristics_matrix
