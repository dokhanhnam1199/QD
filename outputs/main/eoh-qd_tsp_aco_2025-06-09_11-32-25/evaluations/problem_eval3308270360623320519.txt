import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a large number of random tours, calculates the total distance of each tour, and then assigns heuristic values to each edge based on how frequently it appears in the shorter tours.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 1000  # Increase for better accuracy
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(num_nodes)
        tour_distance = 0
        for i in range(num_nodes - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]  # Return to start
        tour_lengths.append(tour_distance)
        tours.append(tour)
        
    # Normalize tour lengths (lower is better, so invert and normalize)
    normalized_tour_lengths = 1 / np.array(tour_lengths)
    normalized_tour_lengths /= np.sum(normalized_tour_lengths)
    
    for i, tour in enumerate(tours):
        weight = normalized_tour_lengths[i]
        for j in range(num_nodes - 1):
            heuristics_matrix[tour[j], tour[j+1]] += weight
            heuristics_matrix[tour[j+1], tour[j]] += weight  # Symmetric
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight #Symmetric

    return heuristics_matrix
