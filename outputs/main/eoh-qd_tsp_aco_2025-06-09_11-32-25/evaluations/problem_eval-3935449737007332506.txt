import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, calculates the edge importance based on how much shorter the tour becomes by including that edge compared to a random edge swap.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting city

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Evaluate each edge in the tour
        for i in range(n):
            u = tour[i]
            v = tour[i+1]

            # Calculate the cost of the current edge
            edge_cost = distance_matrix[u, v]

            # Find a random edge to swap with
            w = np.random.randint(0, n)
            x = (w + 1) % n
            
            #Calculate the cost of the random edge
            random_edge_cost = distance_matrix[tour[w], tour[x]]

            # Calculate the improvement in tour length if the current edge is part of a short tour
            improvement = random_edge_cost - edge_cost

            # Update the heuristics matrix based on the improvement
            heuristics_matrix[u, v] += improvement
            heuristics_matrix[v, u] += improvement

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
