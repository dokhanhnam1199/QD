import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency from nearest neighbor tours and edge desirability based on short-edge preference to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50

    # Nearest Neighbor Component
    nn_matrix = np.zeros_like(distance_matrix, dtype=float)
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        path = [current_node]

        while unvisited:
            nearest_neighbor = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            nn_matrix[current_node, nearest_neighbor] += 1
            nn_matrix[nearest_neighbor, current_node] += 1
            current_node = nearest_neighbor
            path.append(current_node)
            unvisited.remove(current_node)
        
        nn_matrix[current_node, start_node] += 1
        nn_matrix[start_node, current_node] += 1

    # Short Edge Preference Component
    short_edge_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(i + 1, n):
            if distance_matrix[i, j] > 0:
                short_edge_matrix[i, j] = 1.0 / distance_matrix[i, j]
                short_edge_matrix[j, i] = 1.0 / distance_matrix[j, i]

    # Combine the two components
    heuristics_matrix = nn_matrix + short_edge_matrix

    return heuristics_matrix
