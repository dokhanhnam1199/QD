import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm biases random tour generation towards shorter edges and accumulates edge frequencies in generated tours to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Create a probability distribution for edge selection, favoring shorter edges
        edge_probabilities = 1.0 / (distance_matrix + 1e-6)  # Avoid division by zero
        edge_probabilities = edge_probabilities / np.sum(edge_probabilities)

        # Start with a random city
        current_city = np.random.randint(n)
        tour = [current_city]
        unvisited_cities = set(range(n))
        unvisited_cities.remove(current_city)

        while unvisited_cities:
            # Choose the next city based on biased probabilities
            probabilities = edge_probabilities[current_city, :].copy()
            for city in tour:
                probabilities[city] = 0  # Avoid revisiting cities
            probabilities = probabilities / np.sum(probabilities) #renormalize

            next_city = np.random.choice(n, p=probabilities)
            
            tour.append(next_city)
            unvisited_cities.remove(next_city)
            current_city = next_city

        # Complete the tour by returning to the starting city
        tour.append(tour[0])

        # Update heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
