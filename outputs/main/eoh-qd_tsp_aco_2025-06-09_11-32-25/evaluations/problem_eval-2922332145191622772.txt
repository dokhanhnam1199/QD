import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines nearest neighbor search with edge-swapping to explore the solution space and favors edges present in improved tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50

    for _ in range(num_samples):
        # Initial tour using nearest neighbor
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        tour.append(tour[0])  # Return to start

        # Initial tour length
        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

        # Edge swapping for improvement
        for i in range(n):
            for j in range(i + 2, n + 1):
                # Create a new tour by reversing the segment between i+1 and j
                new_tour = tour[:i+1] + tour[i+1:j][::-1] + tour[j:]

                # Calculate the new tour length
                new_tour_length = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))

                # If the new tour is shorter, update the heuristics matrix
                if new_tour_length < tour_length:
                    for k in range(n):
                        node1 = new_tour[k]
                        node2 = new_tour[k+1]
                        heuristics_matrix[node1, node2] += 1
                        heuristics_matrix[node2, node1] += 1
                    tour = new_tour
                    tour_length = new_tour_length

    return heuristics_matrix
