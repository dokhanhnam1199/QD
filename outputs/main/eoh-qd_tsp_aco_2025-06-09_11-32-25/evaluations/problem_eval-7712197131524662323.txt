import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours using a nearest neighbor approach with stochastic restarts, accumulating edge usage frequencies to produce a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Initialize tour with a random starting node
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        # Construct a tour using a nearest neighbor approach
        while unvisited_nodes:
            # Find the nearest unvisited neighbor
            nearest_node = None
            min_distance = float('inf')
            for node in unvisited_nodes:
                distance = distance_matrix[current_node, node]
                if distance < min_distance:
                    min_distance = distance
                    nearest_node = node

            # Add the nearest neighbor to the tour
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        # Complete the tour by returning to the starting node
        tour.append(start_node)

        # Update the heuristic matrix based on edges used in the tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Ensure symmetry

    heuristics_matrix /= num_samples  # Normalize to get frequencies
    return heuristics_matrix
