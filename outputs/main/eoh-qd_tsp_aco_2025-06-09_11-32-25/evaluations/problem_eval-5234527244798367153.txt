import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours, calculates the savings from including an edge in a tour based on a cost estimate, and updates a heuristic matrix with these savings.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])

        # Calculate tour length (estimate for cost to other nodes)
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        
        # Calculate "savings" for each edge in the tour
        for i in range(n):
            u = tour[i]
            v = tour[i+1]
            
            # "Savings" heuristic: estimated cost without edge (u,v) - cost with edge (u,v)
            # Here, estimate the cost without (u,v) as the total tour length. Better estimates could be used.
            savings = tour_length - distance_matrix[u, v]
            
            # Update heuristics matrix
            heuristics_matrix[u, v] += savings
            heuristics_matrix[v, u] += savings
            
    return heuristics_matrix
