import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, then assigns values to edges based on their rank in tours sorted by length.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tours = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        tours.append((tour, tour_length))
        
    #Sort tours by length
    tours.sort(key=lambda x: x[1])

    # Update the heuristics matrix based on the tour rank
    for rank, (tour, tour_length) in enumerate(tours):
        weight = num_samples - rank 
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight # Ensure symmetry
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight # Ensure symmetry
        
    return heuristics_matrix
