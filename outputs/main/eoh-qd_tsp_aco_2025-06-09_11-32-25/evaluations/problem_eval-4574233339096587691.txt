import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge inclusion probabilities by iteratively sampling solutions using a greedy nearest neighbor heuristic with occasional random jumps to escape local optima and tracks edge frequencies.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]
        
        #introduce randomness to escape local optima
        random_jump_probability = 0.1 

        while unvisited_nodes:
            if np.random.rand() < random_jump_probability:
                # Random Jump: select a random unvisited node
                next_node = np.random.choice(list(unvisited_nodes))
            else:
                # Nearest Neighbor Selection:
                distances = distance_matrix[current_node, :]
                
                # Consider only unvisited nodes
                valid_distances = np.array([distances[i] if i in unvisited_nodes else np.inf for i in range(n)])  
                next_node = np.argmin(valid_distances)

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(path[0]) # Return to start
        
        #Update heuristics matrix with edge frequencies
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            
    heuristics_matrix = heuristics_matrix / num_samples #normalize to 0-1

    return heuristics_matrix
