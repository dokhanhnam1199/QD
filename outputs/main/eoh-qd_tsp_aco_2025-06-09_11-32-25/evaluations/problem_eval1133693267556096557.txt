import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours using a nearest neighbor heuristic, evaluates their lengths, and assigns higher heuristic scores to edges present in shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a tour using nearest neighbor heuristic
        start_node = np.random.randint(n)
        unvisited = list(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        current_node = start_node

        while unvisited:
            nearest_node = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_node)
            unvisited.remove(nearest_node)
            current_node = nearest_node
        tour.append(start_node)

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update heuristics based on tour length
        # Normalize tour length to be between 0 and 1.  Shorter tours get higher heuristic scores.
        normalized_length = tour_length / (np.mean(distance_matrix) * n * 2) # arbitrary normalization
        normalized_length = min(1.0, normalized_length) # ensure it's not larger than 1.0
        edge_weight = 1.0 - normalized_length # shorter = closer to 1

        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += edge_weight
            heuristics_matrix[tour[i+1], tour[i]] += edge_weight

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
