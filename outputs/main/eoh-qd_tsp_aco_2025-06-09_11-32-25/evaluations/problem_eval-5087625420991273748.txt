import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge inclusion probabilities by iteratively sampling solutions using a greedy nearest neighbor heuristic with a temperature-controlled acceptance probability, then tracks edge frequencies across these samples.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    temperature = 1.0

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            
            # Find nearest neighbor
            nearest_neighbor = -1
            min_dist = np.inf
            for neighbor in unvisited_nodes:
                if distances[neighbor] < min_dist:
                    min_dist = distances[neighbor]
                    nearest_neighbor = neighbor
            
            if nearest_neighbor == -1:
                #Handle edge case where no nearest neighbor can be found (can happen with inf distances)
                next_node = np.random.choice(list(unvisited_nodes))
            else:
                # Metropolis acceptance probability
                delta_e = distance_matrix[current_node, nearest_neighbor] - np.mean(distances)
                acceptance_probability = np.exp(-delta_e / temperature)
            
                if np.random.rand() < acceptance_probability:
                    next_node = nearest_neighbor
                else:
                    # Randomly choose from unvisited nodes
                    next_node = np.random.choice(list(unvisited_nodes))
            
            
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(path[0]) # Return to start
        
        #Update heuristics matrix with edge frequencies
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            
    heuristics_matrix = heuristics_matrix / num_samples #normalize to 0-1

    return heuristics_matrix
