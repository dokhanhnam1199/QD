import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, and for each edge, it counts how many times it appears in the top 5% shortest tours found so far, normalizing by the number of shortest tours, and returning the normalized counts as a heuristic.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    tour_distances = []
    tours = []
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0]) # Return to starting node
        tours.append(tour)
        
        # Calculate the distance of the tour
        distance = 0
        for i in range(n):
            distance += distance_matrix[tour[i], tour[i+1]]
        tour_distances.append(distance)
    
    # Find the top 5% shortest tours
    num_shortest_tours = max(1, int(0.05 * num_samples))  # Ensure at least one tour is selected
    shortest_indices = np.argsort(tour_distances)[:num_shortest_tours]
    shortest_tours = [tours[i] for i in shortest_indices]
    
    # Count edge occurrences in shortest tours
    for tour in shortest_tours:
        for i in range(n):
            edge_counts[tour[i], tour[i+1]] += 1
            edge_counts[tour[i+1], tour[i]] += 1 # since the matrix is symmetric

    # Normalize edge counts by the number of shortest tours
    heuristics_matrix = edge_counts / len(shortest_tours)
    
    return heuristics_matrix
