import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a number of random tours, then uses an iterative improvement approach (2-opt) on each tour, and finally calculates the frequency with which each edge appears in the improved tours as a heuristic value.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    tours = np.zeros((num_samples, n), dtype=int)

    def tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour.copy()
        best_length = tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour.copy()
                        best_length = new_length
                        improved = True
        return best_tour

    for i in range(num_samples):
        tour = np.random.permutation(n)
        tours[i, :] = tour
        tours[i, :] = two_opt(tour)  # Improve each tour with 2-opt

    heuristics_matrix = np.zeros((n, n))
    for tour in tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    # Normalize
    if np.max(heuristics_matrix) > 0:
        heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)

    return heuristics_matrix
