import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a large number of random tours, ranks them based on their lengths, and then assigns heuristic values to each edge based on its presence in the top-ranked tours.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 100  # Consider only top-k tours
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(num_nodes)
        tour_distance = 0
        for i in range(num_nodes - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_distance)
        tours.append(tour)
    
    ranked_tours_indices = np.argsort(tour_lengths)
    
    for i in range(min(top_k, num_samples)):  # Iterate through top-k tours
        tour_index = ranked_tours_indices[i]
        tour = tours[tour_index]
        
        for j in range(num_nodes - 1):
            heuristics_matrix[tour[j], tour[j+1]] += 1
            heuristics_matrix[tour[j+1], tour[j]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1
        
    return heuristics_matrix
