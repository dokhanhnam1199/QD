import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses an ant colony optimization approach to construct a pheromone matrix based on edge desirability.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone levels
    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    evaporation_rate = 0.1
    Q = 100   # Constant for pheromone deposit

    for iteration in range(100): #iterations
        ant_tours = []
        ant_costs = []
        for ant in range(n): #ants
            unvisited = list(range(n))
            current_city = ant
            unvisited.remove(current_city)
            tour = [current_city]
            tour_cost = 0

            while unvisited:
                probabilities = np.zeros(len(unvisited))
                for i, city in enumerate(unvisited):
                    probabilities[i] = (pheromone[current_city, city]**alpha) * ((1.0 / distance_matrix[current_city, city])**beta)
                probabilities /= np.sum(probabilities)
                
                next_city = np.random.choice(unvisited, p=probabilities)
                
                tour_cost += distance_matrix[current_city, next_city]
                current_city = next_city
                tour.append(current_city)
                unvisited.remove(next_city)
            
            tour_cost += distance_matrix[current_city, tour[0]]
            ant_tours.append(tour)
            ant_costs.append(tour_cost)

        # Pheromone update
        pheromone *= (1 - evaporation_rate)  # Evaporation

        for i in range(len(ant_tours)):
            tour = ant_tours[i]
            tour_cost = ant_costs[i]
            for j in range(n - 1):
                pheromone[tour[j], tour[j+1]] += Q / tour_cost
                pheromone[tour[j+1], tour[j]] += Q / tour_cost #symmetric

            pheromone[tour[-1], tour[0]] += Q / tour_cost
            pheromone[tour[0], tour[-1]] += Q / tour_cost #symmetric

    heuristics_matrix = pheromone
    return heuristics_matrix
