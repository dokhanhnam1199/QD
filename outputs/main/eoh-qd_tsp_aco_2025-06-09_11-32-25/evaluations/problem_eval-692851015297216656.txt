import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristic matrix by favoring edges that connect nodes frequently appearing close together in randomly generated sequences.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)
    num_iterations = 5
    num_sequences = 100

    for _ in range(num_iterations):
        edge_counts = np.zeros_like(distance_matrix, dtype=float)

        for _ in range(num_sequences):
            # Generate a random sequence of nodes
            sequence = np.random.permutation(n)

            # Update edge counts based on proximity in the sequence
            for i in range(n):
                for j in range(i + 1, n):
                    node1 = sequence[i]
                    node2 = sequence[j]
                    distance = j - i
                    edge_counts[node1, node2] += heuristics_matrix[node1, node2] / (distance + 1)
                    edge_counts[node2, node1] += heuristics_matrix[node2, node1] / (distance + 1)

        # Update the heuristic matrix based on edge counts
        heuristics_matrix = edge_counts / np.max(edge_counts) # Normalize

    return heuristics_matrix
