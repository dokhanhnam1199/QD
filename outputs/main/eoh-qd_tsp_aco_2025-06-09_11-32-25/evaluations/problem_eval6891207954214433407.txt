import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines edge probabilities based on the likelihood of an edge belonging to a shorter tour.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) # Initialize with equal probability
    num_iterations = 10
    num_samples = 100

    for _ in range(num_iterations):
        edge_rewards = np.zeros_like(distance_matrix, dtype=float)
        for _ in range(num_samples):
            # Sample tour based on current heuristic probabilities
            current_node = np.random.randint(n)
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            tour = [current_node]

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for node in unvisited_nodes:
                    probabilities[node] = heuristics_matrix[current_node, node]
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(list(unvisited_nodes), p=probabilities[list(unvisited_nodes)])
                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour.append(tour[0])
            tour_length = 0
            for i in range(n):
                tour_length += distance_matrix[tour[i], tour[i+1]]

            # Reward edges in shorter tours
            reward = 1 / (tour_length + 1e-9)
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                edge_rewards[node1, node2] += reward
                edge_rewards[node2, node1] += reward

        # Update heuristics matrix based on edge rewards
        heuristics_matrix = 0.9 * heuristics_matrix + 0.1 * edge_rewards  # Weighted average
        heuristics_matrix = np.clip(heuristics_matrix, 1e-6, 1) # Avoid zero probabilities
        
    return heuristics_matrix
