import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a probability matrix for edge selection by reinforcing edges present in shorter tours generated using the current probability matrix.}"""
    n = distance_matrix.shape[0]
    num_iterations = 10
    num_samples_per_iteration = 100
    alpha = 0.1 # Learning rate

    # Initialize the heuristics matrix with uniform probabilities
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) / n

    for _ in range(num_iterations):
        for _ in range(num_samples_per_iteration):
            # Generate a tour using the current heuristics matrix as probabilities
            permutation = list(range(n))
            tour = []
            current_city = np.random.choice(permutation)
            tour.append(current_city)
            permutation.remove(current_city)
            
            while permutation:
                probabilities = heuristics_matrix[current_city, :][permutation]
                probabilities /= np.sum(probabilities)
                next_city = np.random.choice(permutation, p=probabilities)
                tour.append(next_city)
                permutation.remove(next_city)
                current_city = next_city
            
            tour = np.array(tour)
            # Calculate the total distance of the tour
            tour_distance = 0
            for i in range(n - 1):
                tour_distance += distance_matrix[tour[i], tour[i+1]]
            tour_distance += distance_matrix[tour[-1], tour[0]]
            
            # Update the heuristics matrix based on edges in this tour
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += alpha / tour_distance
                heuristics_matrix[tour[i+1], tour[i]] += alpha / tour_distance #Symmetric matrix
            heuristics_matrix[tour[-1], tour[0]] += alpha / tour_distance
            heuristics_matrix[tour[0], tour[-1]] += alpha / tour_distance

        # Normalize the heuristics matrix
        heuristics_matrix /= np.sum(heuristics_matrix)
    return heuristics_matrix
