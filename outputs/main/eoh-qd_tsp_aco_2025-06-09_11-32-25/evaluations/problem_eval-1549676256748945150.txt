import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, applies a local search to each, and then uses the frequency of each edge appearing in the improved tours to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def tour_distance(tour):
        dist = 0
        for i in range(n - 1):
            dist += distance_matrix[tour[i], tour[i+1]]
        dist += distance_matrix[tour[-1], tour[0]]
        return dist

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def local_search(tour):
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(tour, i, k)
                    if tour_distance(new_tour) < tour_distance(tour):
                        tour = new_tour
                        improved = True
        return tour

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n).tolist()

        # Apply local search (2-opt)
        improved_tour = local_search(tour)
        
        # Update heuristics matrix based on the edges in the improved tour
        for i in range(n - 1):
            heuristics_matrix[improved_tour[i], improved_tour[i+1]] += 1
            heuristics_matrix[improved_tour[i+1], improved_tour[i]] += 1
        heuristics_matrix[improved_tour[-1], improved_tour[0]] += 1
        heuristics_matrix[improved_tour[0], improved_tour[-1]] += 1
    
    return heuristics_matrix
