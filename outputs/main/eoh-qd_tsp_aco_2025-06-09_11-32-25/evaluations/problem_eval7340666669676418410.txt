import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, calculates the frequency of each edge appearing in the top 10% shortest tours, and uses a score function based on the inverse rank of the tour length to weight the edge frequency.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting city
        tours.append(tour)

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_lengths.append(tour_length)

    # Sort tours by length
    ranked_tours_indices = np.argsort(tour_lengths)
    top_percentile = 0.1
    top_tours_count = int(num_samples * top_percentile)

    # Update heuristics based on top tours
    for rank in range(top_tours_count):
        tour = tours[ranked_tours_indices[rank]]
        #score = (top_tours_count - rank) / top_tours_count # linear score
        score = 1.0 / (rank + 1) # inverse rank score
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += score
            heuristics_matrix[tour[i+1], tour[i]] += score
            
    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
