import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm calculates edge scores based on the average distance to a node's nearest neighbors, favoring edges connecting nodes with shorter average nearest neighbor distances.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    nearest_neighbors = np.zeros(n, dtype=float)
    for i in range(n):
        distances = np.copy(distance_matrix[i,:])
        distances[i] = np.inf
        nearest_neighbors[i] = np.mean(np.sort(distances)[:5]) # average distance to 5 nearest neighbours

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = 1.0 / (nearest_neighbors[i] + nearest_neighbors[j] + 1e-9)
    return heuristics_matrix
