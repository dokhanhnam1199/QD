import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs heuristics by iteratively building paths from random starting nodes using a combination of shortest distance and pheromone reinforcement, simulating ant colony optimization principles.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone
    heuristics_matrix = np.zeros_like(distance_matrix)

    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    rho = 0.5   # Evaporation rate
    Q = 100     # Pheromone deposit constant

    num_iterations = 100
    for _ in range(num_iterations):
        for start_node in range(n):
            unvisited_nodes = list(range(n))
            current_node = start_node
            unvisited_nodes.remove(current_node)
            path = [current_node]
            path_length = 0

            while unvisited_nodes:
                probabilities = np.zeros(len(unvisited_nodes))
                for i, next_node in enumerate(unvisited_nodes):
                    probabilities[i] = (pheromone_matrix[current_node, next_node]**alpha) / (distance_matrix[current_node, next_node]**beta)
                
                if np.sum(probabilities) == 0:
                    next_node_index = np.argmin(distance_matrix[current_node, unvisited_nodes])
                else:
                    probabilities /= np.sum(probabilities)
                    next_node_index = np.random.choice(len(unvisited_nodes), p=probabilities)

                next_node = unvisited_nodes[next_node_index]
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                current_node = next_node
                unvisited_nodes.remove(next_node)

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]

            # Pheromone update
            for i in range(n):
                pheromone_matrix[path[i], path[i+1]] = (1 - rho) * pheromone_matrix[path[i], path[i+1]] + rho * (Q / path_length)
                pheromone_matrix[path[i+1], path[i]] = (1 - rho) * pheromone_matrix[path[i+1], path[i]] + rho * (Q / path_length)

    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
