import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, then calculates the frequency of each edge appearing in the tours with distances within a certain percentile of the shortest distance in each sample, using this frequency to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    percentile_threshold = 20  # Consider tours within the bottom 20th percentile
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a set of random tours
        tours = []
        for _ in range(100):
            tour = np.random.permutation(n)
            tour_distance = 0
            for i in range(n - 1):
                tour_distance += distance_matrix[tour[i], tour[i+1]]
            tour_distance += distance_matrix[tour[-1], tour[0]]
            tours.append((tour, tour_distance))
        
        # Sort tours by distance
        tours = sorted(tours, key=lambda x: x[1])
        
        # Determine the distance threshold based on the percentile
        threshold_index = int(len(tours) * (percentile_threshold / 100))
        distance_threshold = tours[threshold_index][1]
        
        # Update heuristics matrix based on the edges in the tours within the threshold
        for tour, tour_distance in tours:
            if tour_distance <= distance_threshold:
                for i in range(n - 1):
                    heuristics_matrix[tour[i], tour[i+1]] += 1
                    heuristics_matrix[tour[i+1], tour[i]] += 1
                heuristics_matrix[tour[-1], tour[0]] += 1
                heuristics_matrix[tour[0], tour[-1]] += 1
    
    return heuristics_matrix
