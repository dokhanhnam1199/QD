import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristics matrix by combining inverse distance with the average distance to other nodes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))
    
    # Average distance heuristic
    average_distance = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                average_distance[i, j] = np.mean(distance_matrix[i, :]) + np.mean(distance_matrix[:, j])
    
    average_distance = 1.0 / (average_distance + np.eye(n))

    # Combine heuristics (you can adjust the weights)
    heuristics_matrix = 0.6 * inverse_distance + 0.4 * average_distance

    return heuristics_matrix
