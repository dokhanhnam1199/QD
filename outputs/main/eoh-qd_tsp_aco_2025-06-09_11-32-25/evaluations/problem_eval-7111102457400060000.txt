import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, then calculates the frequency of each edge appearing in tours within a certain percentile of shortest distances, using this frequency to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 50
    percentile = 20
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        tours = []
        for _ in range(200):
            tour = np.random.permutation(n)
            tour_distance = 0
            for i in range(n - 1):
                tour_distance += distance_matrix[tour[i], tour[i+1]]
            tour_distance += distance_matrix[tour[-1], tour[0]]
            tours.append((tour, tour_distance))
        
        tours = sorted(tours, key=lambda x: x[1])
        
        cutoff_index = int(len(tours) * (percentile / 100))
        
        for tour, _ in tours[:max(1,cutoff_index)]:
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1
            heuristics_matrix[tour[-1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[-1]] += 1
    
    return heuristics_matrix
