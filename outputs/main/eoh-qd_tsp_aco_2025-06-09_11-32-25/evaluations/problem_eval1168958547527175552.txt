import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a genetic algorithm approach to evolve a population of tours and uses the edge frequencies in the best tours to build the heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    population_size = 50
    num_generations = 50
    mutation_rate = 0.01
    
    def calculate_tour_length(tour):
        length = 0
        for i in range(len(tour) - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length
    
    def create_initial_population(population_size, num_nodes):
        population = []
        for _ in range(population_size):
            tour = np.random.permutation(num_nodes)
            population.append(tour)
        return population
    
    def selection(population):
        fitness_scores = [1 / calculate_tour_length(tour) for tour in population]
        probabilities = [score / sum(fitness_scores) for score in fitness_scores]
        selected_indices = np.random.choice(len(population), size=len(population), p=probabilities)
        selected_population = [population[i] for i in selected_indices]
        return selected_population
    
    def crossover(parent1, parent2):
        start = np.random.randint(0, len(parent1))
        end = np.random.randint(start + 1, len(parent1) + 1)
        child = np.concatenate((parent1[start:end], np.array([city for city in parent2 if city not in parent1[start:end]])))
        return child
    
    def mutation(tour, mutation_rate):
        if np.random.rand() < mutation_rate:
            i, j = np.random.choice(len(tour), 2, replace=False)
            tour[i], tour[j] = tour[j], tour[i]
        return tour
    
    population = create_initial_population(population_size, num_nodes)
    
    for _ in range(num_generations):
        selected_population = selection(population)
        new_population = []
        for i in range(0, population_size, 2):
            parent1 = selected_population[i % len(selected_population)]
            parent2 = selected_population[(i + 1) % len(selected_population)]
            child1 = crossover(parent1, parent2)
            child2 = crossover(parent2, parent1)
            new_population.append(mutation(child1, mutation_rate))
            new_population.append(mutation(child2, mutation_rate))
        population = new_population
    
    best_tour = min(population, key=calculate_tour_length)
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(len(best_tour) - 1):
        u = best_tour[i]
        v = best_tour[i+1]
        heuristics_matrix[u, v] = 1
        heuristics_matrix[v, u] = 1
    u = best_tour[-1]
    v = best_tour[0]
    heuristics_matrix[u, v] = 1
    heuristics_matrix[v, u] = 1
    
    return heuristics_matrix
