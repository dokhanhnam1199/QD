import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples many random tours, and for each edge, counts how often that edge appears in a tour that is shorter than a dynamic threshold, returning a matrix reflecting the frequency of edge appearances in such "good" tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    shortest_tour_length = np.inf
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        # Update shortest tour length
        shortest_tour_length = min(shortest_tour_length, tour_length)
        
        # Dynamic threshold - allows more edges in earlier tours.
        threshold = shortest_tour_length * (1 + 0.1 * (1 - (_ / num_samples)))

        if tour_length < threshold:
            # Update heuristics_matrix if the tour is good
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1  # Symmetric
            heuristics_matrix[tour[-1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[-1]] += 1  # Symmetric
    
    return heuristics_matrix
