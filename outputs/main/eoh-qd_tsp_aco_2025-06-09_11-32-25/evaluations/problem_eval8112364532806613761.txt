import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-optimal TSP solutions using a combination of insertion and random edge swaps, then aggregates the edge usage frequencies to estimate the likelihood of each edge belonging to an optimal solution.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # 1. Random Initialization
        tour = np.random.permutation(n).tolist()
        tour.append(tour[0])

        # 2. Insertion Heuristic
        for _ in range(n):
            best_node_to_insert = -1
            best_insertion_index = -1
            best_delta = float('inf')
            
            for node_to_insert in range(n):
                if node_to_insert not in tour:
                    for i in range(1, len(tour)):
                        delta = distance_matrix[tour[i-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[i-1], tour[i]]
                        if delta < best_delta:
                            best_delta = delta
                            best_node_to_insert = node_to_insert
                            best_insertion_index = i
            
            if best_node_to_insert != -1:
                tour.insert(best_insertion_index, best_node_to_insert)
        
        # 3. Random Edge Swaps (2-opt) - Improve Solution
        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if j == n:
                        new_distance = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[0]]
                        old_distance = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[0]]
                    else:
                        new_distance = distance_matrix[tour[i-1], tour[j]] + distance_matrix[tour[i], tour[j-1]]
                        old_distance = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j], tour[j-1]]

                    if new_distance < old_distance:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True
                        break
                if improved:
                    break

        # 4. Update Heuristics Matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1

    heuristics_matrix /= num_samples

    return heuristics_matrix
