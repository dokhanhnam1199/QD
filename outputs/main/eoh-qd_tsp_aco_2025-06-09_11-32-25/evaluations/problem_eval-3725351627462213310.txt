import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, then calculates the frequency of each edge appearing in the shortest tours found in each sample, using this frequency to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    num_shortest = 10
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        # Generate more tours and keep the shortest ones
        shortest_tours = [(tour, tour_distance)]
        for _ in range(100):
            new_tour = np.random.permutation(n)
            new_tour_distance = 0
            for i in range(n - 1):
                new_tour_distance += distance_matrix[new_tour[i], new_tour[i+1]]
            new_tour_distance += distance_matrix[new_tour[-1], new_tour[0]]
            
            if len(shortest_tours) < num_shortest:
                shortest_tours.append((new_tour, new_tour_distance))
                shortest_tours = sorted(shortest_tours, key=lambda x: x[1])
            else:
                if new_tour_distance < shortest_tours[-1][1]:
                    shortest_tours[-1] = (new_tour, new_tour_distance)
                    shortest_tours = sorted(shortest_tours, key=lambda x: x[1])
        
        # Update heuristics matrix based on the edges in the shortest tours
        for tour, _ in shortest_tours:
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1
            heuristics_matrix[tour[-1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[-1]] += 1
    
    return heuristics_matrix
