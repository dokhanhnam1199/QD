import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge importance by iteratively constructing tours via biased random selection based on edge costs and then refining the edge importance based on tour quality.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with ones to avoid zero probabilities
    num_iterations = 50
    alpha = 0.1 #parameter to update edge importance
    
    for _ in range(num_iterations):
        # 1. Tour Construction (Biased Random Selection)
        tour = [np.random.randint(n)]
        unvisited = set(range(n))
        unvisited.remove(tour[0])
        
        while unvisited:
            probabilities = heuristics_matrix[tour[-1], list(unvisited)] / np.sum(heuristics_matrix[tour[-1], list(unvisited)]) #use heuristics_matrix as the edge importance/probability
            next_node = np.random.choice(list(unvisited), p=probabilities)
            tour.append(next_node)
            unvisited.remove(next_node)
            
        tour.append(tour[0])  # Return to starting node

        # 2. Tour Length Calculation
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # 3. Update Heuristics Matrix based on tour length. Shorter tours reinforce edges.
        reward = 1.0 / (tour_length + 1e-9)  # Avoid division by zero
        for i in range(n):
             heuristics_matrix[tour[i], tour[i+1]] += alpha * reward
             heuristics_matrix[tour[i+1], tour[i]] += alpha * reward

    return heuristics_matrix
