import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm initializes a matrix of heuristics with inverse distances, then refines these heuristics by sampling random paths using a roulette wheel selection based on heuristics and updates the heuristics based on the sampled paths' quality.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = 1.0 / (distance_matrix + np.eye(n))  # Initialize with inverse distance
    np.fill_diagonal(heuristics_matrix, 0)

    num_samples = 1000
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited_nodes = list(range(n))
        current_node = start_node
        unvisited_nodes.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited_nodes:
            # Use heuristics to select the next node
            probabilities = heuristics_matrix[current_node, unvisited_nodes]
            probabilities = probabilities / np.sum(probabilities) # Normalize
            next_node_index = np.random.choice(len(unvisited_nodes), p=probabilities)
            next_node = unvisited_nodes[next_node_index]
            path.append(next_node)
            path_length += distance_matrix[current_node, next_node]
            current_node = next_node
            unvisited_nodes.remove(next_node)

        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]

        # Update heuristics based on path length
        if path_length < np.mean(distance_matrix) * n:
            for i in range(n):
                heuristics_matrix[path[i], path[i+1]] += 0.1
                heuristics_matrix[path[i+1], path[i]] += 0.1
    return heuristics_matrix
