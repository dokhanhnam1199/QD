import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristic matrix by combining edge distance with the average distance to other nodes, favoring shorter edges connected to nodes with shorter average distances to all other nodes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate average distance for each node
    avg_distances = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine inverse distance with average distance of both nodes
                heuristics_matrix[i, j] = (1.0 / (distance_matrix[i, j] + 1e-6)) + (1.0 / (avg_distances[i] + avg_distances[j] + 1e-6))

    return heuristics_matrix
