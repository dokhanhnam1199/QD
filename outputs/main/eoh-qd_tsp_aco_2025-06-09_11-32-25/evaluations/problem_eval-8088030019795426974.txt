import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, calculates the frequency of each edge appearing in short tours, and uses this frequency as a heuristic score for edge importance.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting city

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # If the tour is relatively short, update heuristics
        if tour_length < np.mean(distance_matrix) * n * 1.5: # a threshold
            for i in range(n):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
