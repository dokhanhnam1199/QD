{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    using a Softmax-Based Fit strategy.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the 'fit' of the item into each bin.  Higher fit = more suitable.\n    fit = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)\n\n    # Normalize the fit values to be between 0 and 1. This helps with the softmax.\n    if np.sum(fit) > 0:\n        normalized_fit = fit / np.sum(fit)\n    else:\n        normalized_fit = np.zeros_like(fit) # If no bins can fit, all priorities are zero.\n\n    # Apply Softmax to get probabilities (priority scores).  A temperature parameter\n    # is used to control the 'sharpness' of the distribution. Higher temperature\n    # makes the probabilities more uniform.\n    temperature = 0.1\n    priorities = np.exp(normalized_fit / temperature) / np.sum(np.exp(normalized_fit / temperature))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Exact Fit First.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Exact fit gets highest priority\n    exact_fit_indices = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_indices] = 1000  # High priority for exact fit\n\n    # Next best fits get the next priority (smallest waste)\n    waste = bins_remain_cap - item\n    valid_bins = waste >= 0\n    if np.any(valid_bins):\n        priorities[valid_bins] = 1 / (waste[valid_bins] + 1e-9)  # Avoid division by zero\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits & minimize waste; softmax can be overly uniform\u2014be more decisive.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}