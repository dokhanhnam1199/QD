{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin using a sigmoid function\n    # The sigmoid function maps the remaining capacity to a value between 0 and 1\n    # A higher score indicates a better fit\n    fit_scores = 1 / (1 + np.exp(- (bins_remain_cap - item) / item))\n    \n    # Add a small bonus to bins that are almost full to encourage filling them up\n    # This can help reduce the number of bins used\n    bonus = np.exp(-(bins_remain_cap - item) / (item * 0.1)) if np.any(bins_remain_cap > item) else np.zeros_like(bins_remain_cap)\n    \n    priorities = fit_scores + 0.1 * bonus\n\n    # If the item doesn't fit in a bin, give it a score of 0\n    priorities[bins_remain_cap < item] = 0\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Probability of exploration.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n\n    # Calculate greedy priority (best fit)\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = bins_remain_cap[i] - item  # Smaller remaining space is better\n\n    # Exploration with probability epsilon\n    if np.random.rand() < epsilon:\n        # Assign random priorities to encourage exploration.\n        priorities = np.random.rand(n_bins)\n        \n    return priorities\n\n[Reflection]\nCombine exploration (epsilon-greedy) with informed exploitation (fit scores); dynamically adjust exploration rate.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}