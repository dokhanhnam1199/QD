```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between the item size and the remaining capacity of each bin.
    diffs = bins_remain_cap - item
    
    # Only consider bins that can accommodate the item.
    valid_bins = diffs >= 0

    if np.any(valid_bins):
        # Exact fit gets highest priority
        exact_fit_bins = np.where(np.isclose(diffs[valid_bins], 0))[0]
        if len(exact_fit_bins) > 0:
            priorities[valid_bins[exact_fit_bins]] = 1.0

        # Next best fit (minimize wasted space)
        remaining_bins = valid_bins.copy()
        remaining_bins[exact_fit_bins] = False
        
        if np.any(remaining_bins):
            min_diff = np.min(diffs[remaining_bins])
            priorities[remaining_bins] = 1.0 / (diffs[remaining_bins] - min_diff + 1e-6)
            
    return priorities
```
