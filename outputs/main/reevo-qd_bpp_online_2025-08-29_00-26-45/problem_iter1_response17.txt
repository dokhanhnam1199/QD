```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Find bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    
    # If no bins are eligible, return a zero priority array
    if not np.any(eligible_bins):
        return priorities
    
    # Assign random priorities to the eligible bins.
    # Higher priority = more likely to be chosen.
    
    num_eligible_bins = np.sum(eligible_bins)
    
    # Assign priority 1.0 to all eligible bins for simple random fit.
    priorities[eligible_bins] = 1.0
    
    
    return priorities
```
