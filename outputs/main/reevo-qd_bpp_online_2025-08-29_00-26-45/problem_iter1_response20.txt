```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit Decreasing approach.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the bin's remaining capacity and the item's size.
    # Prioritize bins where the item fits with the smallest remaining space.  Bins with exactly the item size have the highest priority.
    diffs = bins_remain_cap - item
    # Assign priority: higher is better.  Use a large value for perfectly fitting bins.
    # Also, prioritize bins that have some remaining capacity instead of bins where item doesn't fit.
    
    # Using a combination of fit and remaining capacity for refined First Fit
    for i in range(len(bins_remain_cap)):
        if diffs[i] >= 0:
            priorities[i] = diffs[i]
        else:
            priorities[i] = -1  # Lower priority if item doesn't fit
            
    # Boost for perfectly fitting bins.
    perfect_fit_indices = np.where(diffs == 0)[0]
    if len(perfect_fit_indices) > 0:
      priorities[perfect_fit_indices] = bins_remain_cap.max() + 1

    return priorities
```
