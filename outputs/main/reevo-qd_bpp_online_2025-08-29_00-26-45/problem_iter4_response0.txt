```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate fit score using sigmoid function
    fit_scores = 1 / (1 + np.exp(- (bins_remain_cap - item) / (item + 1e-6)))  # Add small value to avoid division by zero

    # Bonus for almost full bins
    fullness_bonus = np.exp(- (bins_remain_cap - item) / (item * 0.1 + 1e-6)) if np.any(bins_remain_cap > item) else np.zeros_like(bins_remain_cap)

    # Combine fit and fullness
    priorities = fit_scores + 0.1 * fullness_bonus

    # Penalize bins that cannot fit the item
    priorities[bins_remain_cap < item] = 0

    return priorities
```
