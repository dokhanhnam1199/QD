```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the feasibility score: 1 if item fits, 0 otherwise
    feasible_bins = (bins_remain_cap >= item)
    priorities[feasible_bins] = 1

    # For feasible bins, add a random factor based on remaining capacity
    # to favor bins that are not too full or too empty
    num_feasible = np.sum(feasible_bins)
    if num_feasible > 0:
        random_factor = np.random.rand(len(bins_remain_cap))
        priorities[feasible_bins] += (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) * random_factor[feasible_bins]
        
    return priorities
```
