```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Exact fit gets highest priority
        exact_fit_bins = np.where(np.isclose(bins_remain_cap, item) & valid_bins)[0]
        if len(exact_fit_bins) > 0:
            priorities[exact_fit_bins] = 1.0

        # Best fit (smallest remaining capacity after placing item) gets next priority
        diffs = bins_remain_cap[valid_bins] - item
        min_diff = np.min(diffs)
        best_fit_bins = np.where(diffs == min_diff)[0]
        best_fit_bins_idx = valid_bins
        best_fit_bins_idx[~valid_bins] = False
        best_fit_bins_idx = np.where(best_fit_bins_idx)[0]
        
        priorities[best_fit_bins_idx] = 1.0 / (diffs + 1e-6) #Smooth the score

        # Prioritize bins that are more full (smaller remaining capacity)
        priorities[valid_bins] = priorities[valid_bins] * (1.0 / (bins_remain_cap[valid_bins] + 1e-6))

    return priorities
```
