```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the distance between the item size and the remaining capacity
    distances = np.abs(bins_remain_cap - item)
    
    # Avoid division by zero
    distances = np.where(distances == 0, 1e-6, distances)
    
    # Proximity fit: bins with smaller distances have higher priority
    priorities = 1.0 / distances
    
    # Fullness bonus: bins that are already somewhat full are preferred
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1 + 0.3 * fullness)
    
    return priorities
```
