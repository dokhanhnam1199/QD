```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1000  # High priority for exact fit

    # Next best fits get the next priority (smallest waste)
    waste = bins_remain_cap - item
    valid_bins = waste >= 0

    if np.any(valid_bins):
        # Prioritize bins that are less full (more space used is better)
        fill_levels = 1 - (bins_remain_cap / bins_remain_cap.max())
        priorities[valid_bins] = (1 / (waste[valid_bins] + 1e-9)) * (fill_levels[valid_bins] + 1e-9)

    return priorities
```
