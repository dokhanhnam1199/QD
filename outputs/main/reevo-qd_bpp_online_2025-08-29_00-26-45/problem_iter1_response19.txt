```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a Softmax-Based Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the 'fit' of the item into each bin.  Higher fit = more suitable.
    fit = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Normalize the fit values to be between 0 and 1. This helps with the softmax.
    if np.sum(fit) > 0:
        normalized_fit = fit / np.sum(fit)
    else:
        normalized_fit = np.zeros_like(fit) # If no bins can fit, all priorities are zero.

    # Apply Softmax to get probabilities (priority scores).  A temperature parameter
    # is used to control the 'sharpness' of the distribution. Higher temperature
    # makes the probabilities more uniform.
    temperature = 0.1
    priorities = np.exp(normalized_fit / temperature) / np.sum(np.exp(normalized_fit / temperature))

    return priorities
```
