```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between the item size and the remaining capacity of each bin.
    diffs = bins_remain_cap - item
    
    # Only consider bins that can accommodate the item.
    valid_bins = diffs >= 0
    
    if np.any(valid_bins):
        # Prioritize exact fits
        exact_fit_bins = np.where(np.abs(diffs[valid_bins]) < 1e-6)[0]
        if len(exact_fit_bins) > 0:
            priorities[valid_bins[exact_fit_bins]] = 1.0
        else:
            # The bin with the smallest difference (i.e., the best fit) gets the highest priority.
            min_diff = np.min(diffs[valid_bins])
            priorities[valid_bins] = 1.0 / (diffs[valid_bins] - min_diff + 1e-6)

    return priorities
```
