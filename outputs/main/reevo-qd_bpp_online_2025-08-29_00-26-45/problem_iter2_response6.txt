```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Consider only bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Calculate the remaining capacity after adding the item
        remaining_after_item = bins_remain_cap[valid_bins] - item
        
        # Prioritize bins with smaller remaining capacity (tighter fit)
        priorities[valid_bins] = 1.0 / (remaining_after_item + 1e-6)

        # Further prioritize bins with more items already packed (encourages filling bins)
        # This part requires information about the current items in each bin, which isn't available
        # in the function signature. We can't fully implement this without tracking bin contents.
        # For now, we can add a small bonus to bins with smaller remaining capacity.

    # Penalize bins that cannot accommodate the item
    priorities[bins_remain_cap < item] = -1.0
    
    return priorities
```
