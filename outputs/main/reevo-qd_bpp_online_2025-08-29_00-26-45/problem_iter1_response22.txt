```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Find bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return priorities  # No bin can fit the item

    # Calculate the remaining capacity after adding the item to each valid bin
    remaining_after_placement = bins_remain_cap[valid_bins] - item
    
    # Calculate the "waste" or the remaining capacity after placing the item.
    # Worst Fit prioritizes bins that have the MOST remaining capacity after placing the item.
    priorities[valid_bins] = remaining_after_placement
    
    return priorities
```
