```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the item size and the remaining capacity of each bin.
    # We want to minimize this difference, so bins with smaller differences get higher priority.
    diffs = bins_remain_cap - item

    # If a bin is too small to fit the item, its priority is 0.
    diffs[diffs < 0] = -np.inf

    # Use the negative of the differences as priorities. Higher value (less negative) is better
    priorities = diffs

    return priorities
```
