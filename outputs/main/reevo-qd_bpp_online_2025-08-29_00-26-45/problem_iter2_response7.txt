```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin.  Higher is better.
    fit_scores = -item / bins_remain_cap  # Negative since we want to *maximize* fit

    # Penalize bins that are almost full.  Avoids near-zero remain_cap issues.
    fullness = (bins_remain_cap - item) / bins_remain_cap
    fullness_penalty = np.exp(-10 * fullness) # Exponential penalty

    # Combine fit and penalty.
    priorities = fit_scores - fullness_penalty

    # Handle cases where item doesn't fit. Assign a very low priority.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
