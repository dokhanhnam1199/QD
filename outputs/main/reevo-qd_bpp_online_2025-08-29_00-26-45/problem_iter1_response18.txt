```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the "greedy" priority: how well the item fits. Higher is better.
    greedy_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1)  # Use -1 for bins that can't fit

    # Exploration: Add a small random value to each bin's priority with probability epsilon
    if np.random.rand() < epsilon:
        random_values = np.random.rand(n_bins)
        priorities = greedy_priority + random_values
    else:
        priorities = greedy_priority

    return priorities
```
