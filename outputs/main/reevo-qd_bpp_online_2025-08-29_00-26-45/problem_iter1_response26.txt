```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin using a sigmoid function
    # The sigmoid function maps the remaining capacity to a value between 0 and 1
    # A higher score indicates a better fit
    fit_scores = 1 / (1 + np.exp(- (bins_remain_cap - item) / item))
    
    # Add a small bonus to bins that are almost full to encourage filling them up
    # This can help reduce the number of bins used
    bonus = np.exp(-(bins_remain_cap - item) / (item * 0.1)) if np.any(bins_remain_cap > item) else np.zeros_like(bins_remain_cap)
    
    priorities = fit_scores + 0.1 * bonus

    # If the item doesn't fit in a bin, give it a score of 0
    priorities[bins_remain_cap < item] = 0
    
    return priorities
```
