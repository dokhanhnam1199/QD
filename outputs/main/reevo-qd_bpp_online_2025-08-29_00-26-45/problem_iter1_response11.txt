```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between the item size and the remaining capacity of each bin.
    # Smaller difference means a better fit.
    diffs = bins_remain_cap - item
    
    # Only consider bins that can accommodate the item.
    valid_bins = diffs >= 0
    
    if np.any(valid_bins):
        # Prioritize bins with the smallest difference.  A larger coefficient for smaller gaps.
        priorities[valid_bins] = 1.0 / (diffs[valid_bins] + 1e-6)  # Adding a small value to avoid division by zero
    
    return priorities
```
