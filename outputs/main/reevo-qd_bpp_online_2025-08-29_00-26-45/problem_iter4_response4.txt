```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize exact fits
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1.0

    # Prioritize bins where the item fits with the least remaining space
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        remaining_space = bins_remain_cap[fit_bins] - item
        priorities[fit_bins] = 1.0 / (remaining_space + 1e-6)  # Avoid division by zero

    # Incorporate bin fullness: prioritize more full bins (up to a point)
    fullness = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities[fit_bins] *= (fullness[fit_bins] + 0.5)  # Adjust the +0.5 as needed

    return priorities
```
