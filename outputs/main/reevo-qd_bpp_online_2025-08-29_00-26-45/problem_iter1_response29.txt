```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fit score for each bin
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Apply Softmax function to the fit scores
    # This converts the fit scores into probabilities
    # We add a small value to prevent division by zero and to ensure all probabilities are non-zero
    temperature = 1.0  # Adjust temperature for exploration vs exploitation
    max_score = np.max(fit_scores)
    exponentiated_scores = np.exp((fit_scores - max_score) / temperature)
    sum_exponentiated_scores = np.sum(exponentiated_scores)

    if sum_exponentiated_scores == 0:
       priorities = np.zeros_like(bins_remain_cap)
       return priorities
    
    probabilities = exponentiated_scores / sum_exponentiated_scores
    

    return probabilities
```
