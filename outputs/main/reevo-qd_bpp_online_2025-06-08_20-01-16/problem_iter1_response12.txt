```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # 2. First-Fit Decreasing (FFD) heuristic component:
    #    Prioritize bins with capacity closest to the item size.
    #    This attempts to leave minimal wasted space.
    diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] = 1.0 / (diff[feasible_bins] + 1e-9) # adding small constant to avoid division by zero

    # 3. Avoidance of tiny remaining capacity:
    #    If adding the item leaves very little capacity, penalize that bin *unless* it's the only option.
    remaining_after_add = bins_remain_cap - item
    too_small_remaining = (remaining_after_add > 0) & (remaining_after_add < 0.1) # threshold

    if np.any(feasible_bins) and np.sum(feasible_bins) > 1:
        priorities[too_small_remaining] *= 0.5 # reduce priority, but dont eliminate entirely.

    #4. Prefer bins that are more full than others generally
    fullness = (np.sum(bins_remain_cap) - bins_remain_cap) / (np.size(bins_remain_cap)-1) if (np.size(bins_remain_cap)-1)>0 else 0.0
    priorities = priorities + (bins_remain_cap/fullness) if fullness!=0 else priorities+0


    return priorities
```
