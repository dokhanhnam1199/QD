```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins, normalized
    feasible_capacities = bins_remain_cap[feasible_bins]
    normalized_capacities = feasible_capacities / np.max(bins_remain_cap)

    priorities[feasible_bins] = 1 - normalized_capacities

    # Give higher priority to bins with least wasted space among feasible bins
    wasted_space = feasible_capacities - item
    min_waste_index = np.argmin(wasted_space)

    indices = np.where(feasible_bins)[0]
    priorities[indices[min_waste_index]] += 2 # Increased weight on min waste
    
    # Slightly boost the priority of almost full bins to promote bin completion
    almost_full_threshold = 0.1  # Define "almost full" as having <= 10% capacity left after adding the item
    almost_full_bins = (feasible_capacities - item) / np.max(bins_remain_cap) <= almost_full_threshold
    if np.any(almost_full_bins):
        almost_full_indices = np.where(almost_full_bins)[0]
        for index in almost_full_indices:
            priorities[indices[index]] += 1  # Give an extra boost
    return priorities
```
