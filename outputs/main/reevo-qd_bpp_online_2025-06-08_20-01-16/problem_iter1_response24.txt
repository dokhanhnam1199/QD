```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing modification: Prefer bins that can fit the item almost perfectly
    # Calculate the wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Assign a high priority to bins where wasted space is minimized, but only if the item fits
    priorities[wasted_space >= 0] = 1 / (1e-6 + wasted_space[wasted_space >= 0])  # Avoid division by zero
    
    #Bonus for almost full bins if item fits.

    almost_full_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    almost_full_indices = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1) #if item is just a little smaller than bin
    almost_full_bonus[almost_full_indices] = 2

    # Penalize bins that are too full, or too empty to matter
    priorities[bins_remain_cap < item] = -1e9  # Extremely low priority if it doesn't fit

    priorities = priorities + almost_full_bonus
    return priorities
```
