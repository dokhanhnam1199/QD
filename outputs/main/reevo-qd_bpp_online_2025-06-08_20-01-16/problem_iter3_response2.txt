```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest wasted space among feasible bins
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Ignore infeasible bins

    # Normalize the item size to give a boost to bins that are close to the item size
    normalized_item_size = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0

    #Priority score based on feasibility, and least wasted space, normalized by item size.
    priorities = 1 - (wasted_space / np.max(bins_remain_cap)) - normalized_item_size
    priorities[~feasible_bins] = -np.inf # set priorities to low value for infeasible bins

    return priorities
```
