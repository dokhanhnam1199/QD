```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities are 0.

    # Calculate wasted space for feasible bins
    wasted_space = bins_remain_cap[feasible_bins] - item

    # Prioritize bins with smallest wasted space among feasible bins, normalizing wasted space
    min_waste = np.min(wasted_space)
    
    # Avoid division by zero
    if np.max(wasted_space) - min_waste > 0:
        normalized_waste = (wasted_space - min_waste) / (np.max(wasted_space) - min_waste)
    else:
        normalized_waste = np.zeros_like(wasted_space) # If all wasted space is the same, normalize to zero

    indices = np.where(feasible_bins)[0]
    priorities[indices] = 1 - normalized_waste

    # Boost the bin with the *absolute* least waste
    min_waste_index = np.argmin(wasted_space)
    priorities[indices[min_waste_index]] += 1  # Add a bonus to the best bin

    return priorities
```
