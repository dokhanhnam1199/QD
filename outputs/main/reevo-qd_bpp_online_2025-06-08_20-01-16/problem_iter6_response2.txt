```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins
    # and prioritize bins that minimize wasted space

    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf # Make infeasible bins have infinite waste

    # Normalize wasted space to be between 0 and 1 for feasible bins
    max_potential_waste = np.max(bins_remain_cap) if np.any(bins_remain_cap > 0) else 1.0 # Avoid division by zero; potential bug fix: use max over all bins rather than just feasible

    normalized_waste = wasted_space / max_potential_waste
    
    priorities[feasible_bins] = 1 - normalized_waste[feasible_bins]
    #priorities[~feasible_bins] = 0 #No need, initialized to zero

    # Further boost priority for the bin with absolutely least waste among feasible bins.

    min_waste_index = np.argmin(wasted_space)

    if wasted_space[min_waste_index] != np.inf: # if minimum wasted space is feasible
          priorities[min_waste_index] += 1

    #Introduce a bonus for bins which are almost full after packing
    almost_full_threshold = 0.95  #Bins which are 95% full will have bonus
    post_fill_levels = (item + (bins_remain_cap - wasted_space)) / (item + bins_remain_cap - wasted_space + wasted_space) if np.any(bins_remain_cap >0) else np.zeros_like(bins_remain_cap)
    almost_full_bins = (post_fill_levels >= almost_full_threshold) & feasible_bins
    priorities[almost_full_bins] += 0.5

    return priorities
```
