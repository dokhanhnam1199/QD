```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Normalize item size
    normalized_item = item / np.max(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) and np.max(bins_remain_cap[feasible_bins]) > 0 else 0

    # Prioritize bins with smallest wasted space, but also consider fill ratio.
    wasted_space = bins_remain_cap - item
    fill_ratio = item / bins_remain_cap

    # Assign high priority to feasible bins, with preference for less wasted space and high fill ratio.
    priorities[feasible_bins] = (1 - (wasted_space[feasible_bins] / np.max(bins_remain_cap[feasible_bins]))) + fill_ratio[feasible_bins]
    
    # Normalize priorities to [0, 1] range
    if np.any(priorities[feasible_bins] > 0):
        priorities[feasible_bins] /= np.max(priorities[feasible_bins])
        
    return priorities
```
