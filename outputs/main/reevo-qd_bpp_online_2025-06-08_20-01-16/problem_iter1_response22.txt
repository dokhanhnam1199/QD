```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin.
    wasted_space = bins_remain_cap - item

    # Give higher priority to bins where the item fits
    fits = wasted_space >= 0
    priorities[fits] = 1  # Base priority if it fits.

    # Adjust priority based on remaining capacity (favor bins that are filled up more).
    priorities[fits] += (bins_remain_cap[fits] - wasted_space[fits]) / np.max(bins_remain_cap) if np.any(bins_remain_cap > 0) else 0 # Ratio of the filled capacity.

    # Negative priority to bins where the item doesn't fit. We can make this less important by using a small negative number or a very big negative number.
    priorities[~fits] = -1000 # Large negative number so we never pick this one.

    return priorities
```
