```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins
    # Normalize remaining capacity to be between 0 and 1.
    remaining_capacity_normalized = bins_remain_cap / bins_remain_cap.max() if bins_remain_cap.max() > 0 else 0
    
    # Assign priorities based on normalized remaining capacity for feasible bins
    priorities[feasible_bins] = 1 - remaining_capacity_normalized[feasible_bins]
    
    # Give highest priority to bins with least wasted space among all the feasible ones
    wasted_space = bins_remain_cap[feasible_bins] - item
    min_waste_index = np.argmin(wasted_space) if len(wasted_space) > 0 else -1

    if min_waste_index != -1:
        indices = np.where(feasible_bins)[0]
        priorities[indices[min_waste_index]] += 2  # Increase priority significantly for least waste

    # Add a small bonus to bins that are almost full after placing the item
    almost_full_threshold = 0.95  # Adjust as needed
    almost_full_bins = feasible_bins & ((bins_remain_cap - item) / bins_remain_cap.max() > 0) & ((bins_remain_cap - item) / bins_remain_cap.max() < (1-almost_full_threshold))
    priorities[almost_full_bins] += 1

    return priorities
```
