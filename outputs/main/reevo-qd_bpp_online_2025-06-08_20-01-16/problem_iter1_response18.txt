```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign -inf to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit: Prefer bins with smallest remaining capacity after adding the item
    #    (but only if feasible)
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    #Prioritize by the smallest difference.  Negative values indicate overfill (bad)

    # Scale remaining space to be more sensitive.  Squaring accentuates small diffs
    # and also large remaining gaps. Invert for largest remaining (smallest original)
    # being the best.
    priorities[feasible_mask] = -np.square(remaining_space)

    #3 Add bias for being almost full, avoid small items filling empty bins if better fit exist elsewhere

    almost_full_mask = (bins_remain_cap - item) <= 0.1 and feasible_mask # small constant
    priorities[almost_full_mask] += 10 # large boost to prioritize those

    return priorities
```
