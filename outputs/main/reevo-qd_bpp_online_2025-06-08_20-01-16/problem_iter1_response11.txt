```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First-Fit Decreasing-inspired priority: Higher utilization is better
            utilization = item / cap
            
            # Give a bonus for bins that are nearly full after adding the item.
            remaining_after = cap - item
            nearly_full_bonus = 0.0
            if remaining_after <= 0.1:  # Adjust threshold as needed. Close to full = good
                nearly_full_bonus = 1.0  # Or another suitable value

            # Penalize bins that will have a lot of wasted space after adding the item.
            wasted_space_penalty = 0.0
            if remaining_after > 0.5:  # Adjust threshold as needed. Lots of waste = bad
                 wasted_space_penalty = -0.5 #Or another suitable value


            priorities[i] = utilization + nearly_full_bonus + wasted_space_penalty
            
            #Bonus for almost perfect fit

            if(remaining_after >= 0 and remaining_after <0.001):
                priorities[i]+= 10

        else:
            # Assign a very low priority to bins that cannot fit the item.
            priorities[i] = -np.inf

    return priorities
```
