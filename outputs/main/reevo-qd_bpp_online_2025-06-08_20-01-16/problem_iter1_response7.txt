```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First Fit Decreasing inspired
    # Give higher priority to bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-9) # Avoid division by zero

    # Penalize bins that are too full or too empty.  If it doesn't fit, give a negative priority scaled by how much it doesn't fit
    no_fit_mask = bins_remain_cap < item
    if np.any(no_fit_mask):
        priorities[no_fit_mask] = -(item - bins_remain_cap[no_fit_mask])

    # Give a slight bonus to bins that are close to full. This helps with compaction.
    priorities += (1 - bins_remain_cap / bins_remain_cap.max()) * 0.1 # scale to make bonus small compared to others.

    return priorities
```
