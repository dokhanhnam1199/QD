```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest waste space among feasible bins
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Set waste of infeasible bins to infinity

    min_waste = np.min(wasted_space)
    
    # Normalize wasted space to be between 0 and 1
    max_waste = np.max(bins_remain_cap) #Maximum waste cannot exceed the maximum bin capacity
    normalized_waste = (wasted_space) / max_waste if max_waste > 0 else np.zeros_like(wasted_space)
    
    priorities = 1 - normalized_waste # Assign higher priority to lower waste.

    # Boost the priority of the bin with minimum waste significantly.
    min_waste_indices = np.where(wasted_space == min_waste)[0]

    for index in min_waste_indices:
        priorities[index] += 1

    return priorities
```
