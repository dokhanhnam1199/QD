```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        # Calculate waste if item is placed in each viable bin
        waste = bins_remain_cap[fit_mask] - item
        
        # Give bins with smallest waste higher priority
        priorities[fit_mask] = 1 / (waste + 0.0001)  # Add small constant to avoid division by zero

        # Further refine priority based on remaining capacity ratio
        capacity_ratio = item / bins_remain_cap[fit_mask]
        priorities[fit_mask] = priorities[fit_mask] * (1 + capacity_ratio)


    # Assign a small negative priority to bins that can't fit the item
    else:
         priorities = np.full_like(bins_remain_cap, -1e9) # really penalize overflowing
         

    return priorities
```
