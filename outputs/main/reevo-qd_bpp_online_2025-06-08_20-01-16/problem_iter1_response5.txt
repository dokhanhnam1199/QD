```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing modification: prioritize bins that can fit the item best
    # (minimize wasted space)

    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        wasted_space = bins_remain_cap - item
        wasted_space[~can_fit] = np.inf  # Assign infinity to bins that can't fit
        min_wasted_space = np.min(wasted_space)

        priorities[can_fit] = 1.0 / (wasted_space[can_fit] + 1e-6) # Higher priority to lower waste
        priorities[wasted_space == min_wasted_space] += 1 #Boost best fit
    else:
        # If no bin can fit the item, prioritize the fullest bins. Try to open a new bin, by adding item to almost full bin.
        priorities = bins_remain_cap
        priorities = -priorities
        priorities = priorities - np.min(priorities)

    return priorities
```
