```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Normalize item size
    normalized_item = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalizing to max bin capacity

    # Prioritize bins with smallest wasted space among feasible bins. Direct minimization
    wasted_space = bins_remain_cap - item
    
    # Assign priority based on wasted space for feasible bins
    priorities[feasible_bins] = 1 - (wasted_space[feasible_bins] / np.max(bins_remain_cap)) #Scale wasted space to be between 0 and 1, invert, assign priority
    
    return priorities
```
