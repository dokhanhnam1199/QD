```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Priority 1: Bins where item fits
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] += 1

    # Priority 2: Remaining capacity after packing (favor smaller remaining capacity)
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[remaining_capacity < 0] = np.inf  # Assign infinite if doesn't fit
    priorities[fit_indices] += 1.0 / (1e-6 + remaining_capacity[fit_indices])  #Add priority in inverse proportion to the remaining capacity. Added epsilon for numerical stability

    # Priority 3: Fill rate (item size / initial capacity)
    # Prioritize bins that would be fuller after packing (higher fill rate)
    
    # Note: Assuming initial capacities are the same for all bins in this version. A prior bin capacity array needs to be passed to compute fill rate with bins of varying sizes
    #initial_capacities = np.ones_like(bins_remain_cap) * np.max(bins_remain_cap) # Example: assume same initial capacity for all
    #fill_rates = item / initial_capacities #compute fill rates based on item size. Initial capacity passed must be initial capacity and not just remaining
    #priorities[fit_indices] += fill_rates[fit_indices]

    # Bonus: Prefer bins with smaller original capacity
    # Assuming knowledge of the bins' initial capacities is not available, this is skipped

    return priorities
```
