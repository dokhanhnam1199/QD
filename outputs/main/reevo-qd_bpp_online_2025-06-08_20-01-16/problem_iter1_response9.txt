```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Fill bins that can fit the item relatively well (minimize wasted space)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        wasted_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1.0 / (wasted_space + 0.0001)  # Avoid division by zero, prioritize smaller waste

    # Heuristic 2: Consider bins that are ALMOST full.  This encourages finishing bins.
    almost_full_threshold = 0.1  # e.g., within 10% of capacity. Tunable parameter.
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap <= (1+almost_full_threshold)*item)
    if np.any(almost_full_mask):
      priorities[almost_full_mask] += 0.5  # Give a moderate boost to these bins

    # Heuristic 3: Penalize bins that are too large relative to item. This encourages filling smaller bins more.
    too_large_threshold = 2.0  # Bins more than 2x the item size are penalized. Tunable parameter.
    too_large_mask = bins_remain_cap > (too_large_threshold * item)
    priorities[too_large_mask] -= 0.2

    # Heuristic 4: if item can't fit any of the current bins, prioritize bins with the largest remaining capacity
    if not np.any(fit_mask):
        priorities = bins_remain_cap / np.max(bins_remain_cap + 0.0001) - 0.5 # Avoid division by zero
        

    return priorities
```
