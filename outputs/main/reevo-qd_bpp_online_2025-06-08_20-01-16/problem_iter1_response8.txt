```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing-like: Favor bins that can fit the item
            priorities[i] += 1

            # Best-Fit-like: Favor bins with least remaining capacity after placing item
            remaining = cap - item
            priorities[i] += 1 / (remaining + 0.00001)  # Avoid division by zero, favor smaller remaining

            # Avoid Fragmentation: Give a bonus if placing the item fills the bin perfectly or nearly so.
            if remaining < 0.1:
                 priorities[i] += 5 #large constant
        else:
            # Penalize bins that cannot fit the item
            priorities[i] = -1000  # Large negative number ensures these are the least preferred

    return priorities
```
