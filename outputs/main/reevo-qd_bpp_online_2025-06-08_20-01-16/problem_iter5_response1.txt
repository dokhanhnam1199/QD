```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest wasted space among feasible bins
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Ignore infeasible bins for min waste calculation

    min_waste = np.min(wasted_space)
    
    #Give highest priority to bins with least wasted space among all the feasible ones
    # Normalize wasted space so smaller waste values have higher priority.
    # A small epsilon is added to avoid division by zero.
    priorities[feasible_bins] = 1.0 / (wasted_space[feasible_bins] + 1e-9)

    # Further boost the bin with ABSOLUTELY least waste.
    min_waste_indices = np.where(wasted_space == min_waste)[0] #Find the indices of the bins with minimum waste

    for index in min_waste_indices:
      priorities[index] += 2.0 # Add a higher priority

    return priorities
```
