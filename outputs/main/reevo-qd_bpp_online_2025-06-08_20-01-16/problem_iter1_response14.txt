```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority to bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    # Adjust priority based on how much space is left after fitting the item
    remaining_space = bins_remain_cap - item
    priorities[can_fit] += (1 / (remaining_space[can_fit] + 0.0001))  # Avoid division by zero

    # Penalize bins that cannot accommodate the item (to discourage from choosing them when better options exist). Make them very small, close to zero.
    priorities[~can_fit] = -1000 # assign a big negative number, making it impossible to choose them.

    return priorities
```
