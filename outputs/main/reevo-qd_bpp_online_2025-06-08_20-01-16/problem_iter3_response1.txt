```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    #Prioritize bins with smallest wasted space among all the feasible ones
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf # make infeasible ones have very large waste
    
    # Normalize wasted space to be between 0 and 1
    max_waste = np.max(wasted_space[feasible_bins]) if np.any(feasible_bins) else 0
    wasted_space_normalized = wasted_space / max_waste if max_waste >0 else 0

    priorities = 1 - wasted_space_normalized # Smaller wasted space gets higher priority

    # If no feasible bins, all priorities remain 0
    return priorities
```
