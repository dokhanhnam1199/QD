```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority on how well the item fits (smaller waste is better)
            waste = cap - item
            priorities[i] = 1 / (waste + 0.00001)  # Avoid division by zero

            # Boost priority if the waste is very small (almost perfect fit)
            if waste < 0.1:
                priorities[i] += 10

            # Slightly penalize bins that are almost full, promoting packing into bins with more space relative to the item size
            if cap < 1.1*item: #scale of 1.1 is selected
                priorities[i] -= 1

        else:
            priorities[i] = -np.inf  # Impossible to add item to this bin

    return priorities
```
