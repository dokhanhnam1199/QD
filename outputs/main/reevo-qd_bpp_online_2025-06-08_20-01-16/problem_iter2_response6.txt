```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins.  Normalize remaining capacity of feasible bins.
    feasible_capacities = bins_remain_cap[feasible_bins]
    max_feasible_capacity = np.max(feasible_capacities) if len(feasible_capacities) > 0 else 1 # avoid division by zero if feasible_capacities is empty
    remaining_capacity_normalized = feasible_capacities / max_feasible_capacity

    # Assign initial priorities based on normalized remaining capacity (lower is better).
    priorities[feasible_bins] = 1 - remaining_capacity_normalized
    
    # Give a bonus to the bin with the least wasted space
    wasted_space = feasible_capacities - item
    min_waste_index = np.argmin(wasted_space) if len(wasted_space) > 0 else -1

    if min_waste_index != -1:
        indices = np.where(feasible_bins)[0]
        priorities[indices[min_waste_index]] += 2 # Add a significant bonus

    # Further boost bins close to full utilization after adding the item
    almost_full_threshold = 0.95
    post_fill_levels = (item + (bins_remain_cap - feasible_capacities)) / np.max(bins_remain_cap) # Calculate fill level *after* adding item for feasible bins
    almost_full_bins = (post_fill_levels >= almost_full_threshold)[feasible_bins] #get indices where this is true
    
    indices = np.where(feasible_bins)[0] #get the indices in original bins_remain_cap where bins are feasible
    
    if np.any(almost_full_bins):
      priorities[indices[almost_full_bins]] += 1 #add bonus

    return priorities
```
