```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary Criterion: Remaining capacity after packing
            remaining_after_packing = cap - item
            # Secondary Criterion: Avoid fragmentation. Prioritize bins that the item nearly fills.
            priority = 1.0 / (0.01 + remaining_after_packing)  # Higher priority for smaller remaining

            # Tertiary Criterion: Give slight preference to bins that are more full already (reduces bin usage overall).
            priority += (1 - (cap / bins_remain_cap.max())) if bins_remain_cap.max() > 0 else 0
            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority

    return priorities
```
