```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Normalize item size based on the item size itself
    normalized_item = item / item if item > 0 else 0 # will be 1.0 if item > 0.
    
    # Prioritize bins with smallest wasted space within feasible bins
    wasted_space = bins_remain_cap - item
    
    # Assign high priority to feasible bins, with preference for less wasted space. Also consider bin utilization
    
    # Calculate utilization: how much of the bin will be utilized if item is added.
    utilization = (bins_remain_cap[feasible_bins] - wasted_space[feasible_bins]) / bins_remain_cap[feasible_bins]
    
    # Prioritize higher utilization (less wasted space)
    priorities[feasible_bins] = utilization  
    
    return priorities
```
