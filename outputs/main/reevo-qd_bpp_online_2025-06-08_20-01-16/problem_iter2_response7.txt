```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins, normalized
    remaining_capacity_normalized = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    priorities[feasible_bins] = 1 - remaining_capacity_normalized
    
    # Further prioritize based on wasted space, with a bonus for minimal waste
    wasted_space = bins_remain_cap[feasible_bins] - item
    
    # Normalize wasted space to be between 0 and 1, relative to the item size
    wasted_space_normalized = wasted_space / item
    
    # Reduce priority proportionally to the wasted space
    priorities[feasible_bins] -= 0.5 * wasted_space_normalized
    
    # Give a bonus to the bin with the absolute least wasted space
    min_waste_index = np.argmin(wasted_space)
    indices = np.where(feasible_bins)[0]
    priorities[indices[min_waste_index]] += 0.75

    return priorities
```
