```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Bins that can accommodate the item get positive priority, others get zero.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    # 2. Give higher priority to bins with smaller remaining capacity (First Fit Decreasing-like).
    #    This encourages filling bins as much as possible.
    priorities[can_fit] += (1 - (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit])

    # 3. Add a small bonus to bins that are very empty (to prevent excessive fragmentation early on).
    very_empty = bins_remain_cap > 0.9 * np.max(bins_remain_cap)
    priorities[very_empty] += 0.2

    # 4. If there are bins that fit perfectly, give them highest priority.
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Using a small tolerance for floating-point comparisons.
    priorities[perfect_fit] += 2.0

    return priorities
```
