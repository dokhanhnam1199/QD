```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    #Prioritize feasible bins with less wasted space after placement.
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf #Ignore infeasible bins

    # Normalize wasted space to [0, 1], smaller is better.
    min_wasted_space = np.min(wasted_space[feasible_bins]) #Minimum wasted space among all the feasible bins
    max_wasted_space = np.max(wasted_space[feasible_bins])#Maximum wasted space among all the feasible bins

    if max_wasted_space > min_wasted_space :
        normalized_wasted_space = (wasted_space - min_wasted_space) / (max_wasted_space - min_wasted_space)
    else:
         normalized_wasted_space = np.zeros_like(wasted_space,dtype = float) #All wasted space are same, assigning 0

    priorities[feasible_bins] = 1 - normalized_wasted_space[feasible_bins] #Assign priority. Smaller wasted space has more priority.

    return priorities
```
