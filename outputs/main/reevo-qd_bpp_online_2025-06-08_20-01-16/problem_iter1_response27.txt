```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, consider bins that can actually fit the item
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        # If no bin can fit the item, prioritize the fullest bin (least remaining capacity). We add a small value
        # based on the remaining capacities (scaled by the item size) as a tiebreaker
        priorities = -bins_remain_cap + (np.random.rand(len(bins_remain_cap)) * item * 0.01) #Prioritize bins with smallest remain_cap and add tie-breaking small number.
    else:
        # Calculate "waste" if the item is placed in the bin.  Smaller waste is better.
        waste = bins_remain_cap - item
        waste[~valid_bins] = np.inf  # Mark invalid bins with infinite waste

        # Prioritize bins with smaller waste, and among them, prioritize fuller bins (smaller original capacity)
        priorities = -waste + (bins_remain_cap * 0.001) #Prioritize the smaller waste but add tie breaking for bin which have less capacity than other bin

        # Prioritize nearly full bins. Give bonus to those bins.
        nearly_full = (waste >= 0) & (waste <= item * 0.1)  # Adjust threshold as needed
        priorities[nearly_full] += item * 0.5 #boost nearly_full_bin. This make sure that, if an item cause a bin to be nearly full, it should be assigned.
        priorities[~valid_bins] = -np.inf # Set priority to low

    return priorities
```
