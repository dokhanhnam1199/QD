```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins
    remaining_capacity_normalized = bins_remain_cap / bins_remain_cap.max() if bins_remain_cap.max() > 0 else 0 #Normalize
    
    priorities[feasible_bins] = 1 - remaining_capacity_normalized[feasible_bins]
    
    #Give highest priority to bins with least wasted space among all the feasible ones
    wasted_space = bins_remain_cap[feasible_bins] - item
    
    #Normalize wasted space to [0,1] and use it to increase the priority of the best bin
    wasted_space_normalized = (wasted_space - wasted_space.min()) / (wasted_space.max() - wasted_space.min()) if len(wasted_space) > 0 and (wasted_space.max() - wasted_space.min()) > 0 else np.zeros_like(wasted_space)
    
    if len(wasted_space) > 0:
      indices = np.where(feasible_bins)[0]
      best_bin_index = np.argmin(wasted_space)
      priorities[indices[best_bin_index]] += 1 # A significant boost for the best bin
      priorities[indices[best_bin_index]] += 1 - wasted_space_normalized[best_bin_index] # Add some priority based on normalized waste


    return priorities
```
