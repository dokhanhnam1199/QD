```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins
    # and prioritize bins that minimize wasted space

    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf # Make infeasible bins have infinite waste

    # Normalize wasted space to be between 0 and 1 for feasible bins
    min_waste = np.min(wasted_space[feasible_bins]) if np.any(feasible_bins) else 0.0
    max_waste = np.max(wasted_space[feasible_bins]) if np.any(feasible_bins) else 1.0  # Avoid division by zero

    if max_waste == min_waste:
      normalized_waste = np.zeros_like(wasted_space)
    else:
      normalized_waste = (wasted_space - min_waste) / (max_waste - min_waste) # Scale between 0 and 1
    
    normalized_waste[~feasible_bins] = 1 # Set waste as high for infeasible bins

    priorities = 1 - normalized_waste
    priorities[~feasible_bins] = 0

    # Further boost priority for the bin with absolutely least waste among feasible bins.

    min_waste_index = np.argmin(wasted_space)

    if wasted_space[min_waste_index] != np.inf: # if minimum wasted space is feasible
          priorities[min_waste_index] += 1


    return priorities
```
