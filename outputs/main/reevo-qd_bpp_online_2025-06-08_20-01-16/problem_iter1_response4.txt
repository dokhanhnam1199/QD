```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is only viable if the remaining capacity is greater than or equal to the item size
    viable_bins = bins_remain_cap >= item
    
    if not np.any(viable_bins):
        # If no bin can fit the item, assign a low priority to all bins. It will likely result in a new bin.
        return priorities

    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[~viable_bins] = -1  # Mark non-viable bins

    # Priority based on how full the bin would be after adding the item
    # Higher priority for bins that would be fuller (less remaining capacity)
    priorities[viable_bins] = 1 - (remaining_capacities[viable_bins] / bins_remain_cap[viable_bins])
    
    #Bonus for being a good fit - Prefer bins that leaves remaining capacity smaller than some threshold.
    good_fit_threshold = 0.2  # Adjust threshold as needed (fraction of total bin capacity).
    
    #Use squared to greatly enhance the bonus if the good_fit condition is satisfied.
    good_fit = remaining_capacities[(viable_bins)]/np.max(bins_remain_cap)  < good_fit_threshold

    priorities[viable_bins][good_fit] = priorities[viable_bins][good_fit]**0.25 +0.5  # Further adjust the bonus weight as needed

    return priorities
```
