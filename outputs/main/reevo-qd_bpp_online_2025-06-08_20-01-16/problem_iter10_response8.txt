```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities are 0.

    # Calculate waste for feasible bins
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # make infeasible waste infinitely large so it won't affect calculation

    # Normalize waste: Lower waste is better, so we use inverse
    min_waste = np.min(waste[feasible_bins]) if np.any(feasible_bins) else 0.0
    max_waste = np.max(waste[feasible_bins]) if np.any(feasible_bins) else 1.0  # avoid division by zero

    if max_waste == min_waste:  # all waste is the same for feasible bins
        waste_normalized = np.ones(bins_remain_cap.shape) if np.any(feasible_bins) else np.zeros(bins_remain_cap.shape)
        waste_normalized[~feasible_bins] = 0
    else:
        waste_normalized = 1 - ((waste - min_waste) / (max_waste - min_waste))  # Scale between 0 and 1
        waste_normalized[~feasible_bins] = 0  # make infeasible bins zero again

    priorities = waste_normalized

    # Boost the absolutely least-waste bin, but proportionally to how much smaller its waste is compared to average
    min_waste_bin = np.argmin(waste)
    if feasible_bins[min_waste_bin]:  # only boost if this bin is truly feasible
        avg_waste = np.mean(waste[feasible_bins])
        boost = max(0.0, (avg_waste - waste[min_waste_bin]) / avg_waste) if avg_waste > 0 else 1.0 # proportional boost, but avoid division by zero
        priorities[min_waste_bin] += boost #Add proportional boost


    return priorities
```
