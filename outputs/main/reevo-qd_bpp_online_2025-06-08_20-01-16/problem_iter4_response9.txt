```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities are 0.

    # Wasted space calculation.  Prioritize bins with less wasted space, but also consider fill ratio.
    wasted_space = bins_remain_cap - item
    fill_ratio = item / bins_remain_cap

    # Normalize wasted space and fill ratio to [0, 1]
    normalized_wasted_space = wasted_space[feasible_bins] / np.max(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) and np.max(bins_remain_cap[feasible_bins]) > 0 else np.zeros_like(wasted_space[feasible_bins])
    normalized_fill_ratio = fill_ratio[feasible_bins]

    # Combine wasted space and fill ratio to create a priority score.
    # Give a higher weight to minimizing wasted space. A larger weight on fill_ratio can make it too greedy and leave few large spaces for later items.
    priorities[feasible_bins] = 0.7 * (1 - normalized_wasted_space) + 0.3 * normalized_fill_ratio

    return priorities
```
