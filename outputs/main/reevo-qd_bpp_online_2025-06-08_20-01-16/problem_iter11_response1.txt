```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Normalize remaining capacity for fair comparison.
    normalized_remaining_capacity = bins_remain_cap / np.max(bins_remain_cap)

    # Prioritize bins with least wasted space among feasible bins, boosting the best
    wasted_space = bins_remain_cap - item
    
    feasible_waste = wasted_space[feasible_bins]
    
    if len(feasible_waste) > 0: #Check if there are any feasible bins before attempting argmin
        min_waste = np.min(feasible_waste)
        min_waste_indices = np.where(wasted_space == min_waste)[0]
        
        # Assign high priority to bins with minimal waste
        for index in min_waste_indices:
          if feasible_bins[index]: #Ensure bin is still feasible.
            priorities[index] = 2 # Highest Priority

    # Add a small priority boost for higher remaining capacity (to avoid filling bins too tightly early on)
    priorities[feasible_bins] += normalized_remaining_capacity[feasible_bins]
    
    return priorities
```
