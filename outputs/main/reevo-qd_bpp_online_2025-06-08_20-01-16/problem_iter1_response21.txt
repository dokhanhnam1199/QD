```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing-like: Prefer bins with tighter fit
            priorities[i] = (cap - item) / cap # Higher is better, close to 0
            priorities[i] += 1 # offset to give some baseline value, to distinguish feasible from infeasible bins
            priorities[i] = 1/priorities[i] #Invert so larger values are prioritised
            # Bonus for almost full bins, helps closing bins instead of leaving small fractions
            if cap < 1.1 * item:
                 priorities[i] += 0.5
        else:
            # Very low priority for bins that can't fit
            priorities[i] = -1e9  # Significantly penalize infeasible bins
    return priorities
```
