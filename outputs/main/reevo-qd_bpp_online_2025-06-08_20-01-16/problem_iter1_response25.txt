```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, filter out bins that cannot accommodate the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # For feasible bins, prioritize based on the remaining capacity:
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_after_fit = bins_remain_cap[feasible_bins] - item

        # 1. Favor bins that leave a small amount of space.  We want to fill bins as much as possible without wasting too much space.
        # The closer to 0 remaining space, the better. Add a small constant to avoid dividing by zero.
        priorities[feasible_bins] = 1.0 / (remaining_after_fit + 0.0001)

        # 2. Give slight preference to almost full bins
        almost_full_threshold = 0.1  # Adjust the threshold as needed
        almost_full_bins = remaining_after_fit <= almost_full_threshold
        priorities[feasible_bins][almost_full_bins] += 1.0  # Boost priority

        # 3. Add penalty to big residual
        large_residual_threshold = 0.7
        large_residual_bins = remaining_after_fit >= large_residual_threshold
        priorities[feasible_bins][large_residual_bins] -= 0.5
    return priorities
```
