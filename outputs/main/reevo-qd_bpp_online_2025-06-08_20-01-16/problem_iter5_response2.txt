```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest waste among feasible bins
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Ignore infeasible bins

    # Normalize wasted space to be between 0 and 1
    min_waste = np.min(wasted_space[feasible_bins])
    max_waste = np.max(wasted_space[feasible_bins])

    if max_waste == min_waste:
      priorities[feasible_bins] = 1.0 # Equal priorities as waste is equal
    else:
      normalized_waste = (wasted_space - min_waste) / (max_waste - min_waste)
      priorities[feasible_bins] = 1 - normalized_waste[feasible_bins] # Higher priority means lower normalized waste

    # Boost absolutely least-waste bin (among feasible bins)
    min_waste_index = np.argmin(wasted_space)
    if feasible_bins[min_waste_index]:
        priorities[min_waste_index] += 0.5

    return priorities
```
