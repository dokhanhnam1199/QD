```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities are 0.

    # Calculate waste for feasible bins
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # make infeasible waste infinitely large so it won't affect calculation

    # Normalize waste: Lower waste is better, so we use inverse
    min_waste = np.min(waste[feasible_bins])
    max_waste = np.max(waste[feasible_bins])
    
    if max_waste == min_waste:  # Avoid division by zero, handles cases where all feasible bins have same waste
        waste_normalized = np.ones_like(waste) * feasible_bins
    else:
        waste_normalized = 1 - (waste - min_waste) / (max_waste - min_waste)
        waste_normalized[~feasible_bins] = 0  # make infeasible bins zero again


    priorities = waste_normalized

    # Boost the absolutely least-waste bin
    min_waste_bin = np.argmin(waste)
    if feasible_bins[min_waste_bin]:  # only boost if this bin is truly feasible
        priorities[min_waste_bin] += 1.0

    # Secondary boost for almost full bins
    almost_full_threshold = 0.95
    almost_full_bins = (item / bins_remain_cap) > almost_full_threshold
    priorities[almost_full_bins & feasible_bins] += 0.5

    return priorities
```
