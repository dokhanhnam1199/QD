```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest wasted space (Best-Fit heuristic)
    wasted_space = bins_remain_cap - item
    
    # Refined priority assignment:
    # - Infeasible bins: 0 priority
    # - Feasible bins: Higher priority for smaller wasted space, but also consider bin utilization
    
    feasible_wasted_space = wasted_space[feasible_bins]
    
    # Avoid division by zero if all feasible wasted space is zero
    if np.all(feasible_wasted_space == 0):
        priorities[feasible_bins] = 1.0
    else:
        # Normalize wasted space within feasible bins to a range [0, 1]
        normalized_wasted_space = (feasible_wasted_space - np.min(feasible_wasted_space)) / (np.max(feasible_wasted_space) - np.min(feasible_wasted_space)) if np.max(feasible_wasted_space) > np.min(feasible_wasted_space) else np.zeros_like(feasible_wasted_space)
            
        priorities[feasible_bins] = 1 - normalized_wasted_space
    
    return priorities
```
