```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest wasted space
    wasted_space = bins_remain_cap - item
    
    # Assign high priority to feasible bins, with preference for less wasted space.
    # Also, give preference to bins that are fuller.
    priorities[feasible_bins] = (bins_remain_cap[feasible_bins] - wasted_space[feasible_bins]) / np.max(bins_remain_cap)

    # Add a small bonus for bins that are close to being full after placing the item.
    almost_full_threshold = 0.95 * np.max(bins_remain_cap) # Tunable parameter
    almost_full_bins = (bins_remain_cap - item) <= (np.max(bins_remain_cap) - almost_full_threshold) & feasible_bins
    priorities[almost_full_bins] += 0.1  # Add a small bonus, can be tuned.
        
    return priorities
```
