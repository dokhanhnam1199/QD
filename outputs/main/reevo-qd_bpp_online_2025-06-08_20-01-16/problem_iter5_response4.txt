```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest wasted space among feasible bins.
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Ignore infeasible bins.

    min_waste = np.min(wasted_space)

    # Boost priority of bins with smallest waste.
    min_waste_bins = np.isclose(wasted_space, min_waste) #Handle ties, give all tied bin increased priorities
    
    priorities[min_waste_bins] += 1.0 # Boost the priority for bins which has the smallest waste.
    
    # Normalize priorities to ensure the selection
    if np.sum(priorities) == 0.0: # all infeasible cases
        return priorities

    priorities = priorities / np.sum(priorities) # Normalize all the values.

    return priorities
```
