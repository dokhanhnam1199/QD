```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Prefer bins that can accommodate the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Rule 2: Among bins that can fit, prefer those with smallest remaining capacity after packing
    remaining_after_pack = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_after_pack + 0.0001) # add small value to avoid division by zero

    # Rule 3: If no bin can fit, penalize bins with very small remaining capacity less
    #         to avoid creating too many nearly empty bins in the long run.

    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] -= (item - bins_remain_cap[cannot_fit]) / item

    return priorities
```
