```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very small remaining capacity gets a very low priority (discouraged)
    priorities[bins_remain_cap < 0.01] = -np.inf
    
    # Give a boost to bins that can fit the item snugly (First Fit Decreasing principle)
    snug_fit = (bins_remain_cap - item) >= 0
    priorities[snug_fit] += (bins_remain_cap[snug_fit] - item)
    
    #Prioritize bins with sufficient capacity
    sufficient_cap = bins_remain_cap >= item
    
    # Calculate waste if the item is put in the bin
    waste = bins_remain_cap - item

    # Prioritize bins where the waste is minimized (but only for bins that *can* fit the item)
    priorities[sufficient_cap] += 1.0 / (1e-6 + waste[sufficient_cap])

    # Penalize bins that have too much remaining capacity.  This encourages filling up bins before opening new ones.
    priorities -= (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0 # Avoid division by zero
    
    return priorities
```
