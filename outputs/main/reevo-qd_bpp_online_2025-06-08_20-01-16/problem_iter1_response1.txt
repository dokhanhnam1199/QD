```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing heuristic influence: Prefer bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Best-Fit heuristic influence: Prefer bins where the remaining space is minimized
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~can_fit] = np.inf  # Penalize bins that can't fit

    priorities[can_fit] += 1.0 / (1e-6 + remaining_after_fit[can_fit])  # Higher priority for smaller remaining

    # Worst-Fit heuristic influence: Prefer bins where the remaining space is maximized among bins that can fit
    if np.any(can_fit):
      priorities[can_fit] += remaining_after_fit[can_fit] / np.max(remaining_after_fit[can_fit])

    # Give a slight priority to bins that are not completely empty. avoid too much fragmentation, try to consolidate the items in fewer bins.
    non_empty = bins_remain_cap < 1.0  # Assuming bin capacity is 1.
    priorities[non_empty] += 0.1 * non_empty[non_empty]

    return priorities
```
