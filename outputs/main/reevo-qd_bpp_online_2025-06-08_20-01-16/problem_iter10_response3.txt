```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Calculate wasted space for feasible bins
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Mark infeasible bins with infinite waste

    # Normalize wasted space to be between 0 and 1 for feasible bins
    max_potential_waste = np.max(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 1.0  # Avoid division by zero
    normalized_waste = wasted_space / max_potential_waste

    # Prioritize bins with smaller wasted space (higher priority)
    priorities = 1 - normalized_waste
    priorities[~feasible_bins] = 0  # Infeasible bins have zero priority

    # Boost priority for bins that are close to being full after adding the item
    almost_full_threshold = 0.1  # Tune this parameter, e.g., bin is 90% full after adding item
    almost_full_bins = (wasted_space >= 0) & (wasted_space <= almost_full_threshold)

    priorities[almost_full_bins] += 0.5 # adding small bonus for almost full bins

    # Further boost priority for the bin with absolutely least waste among feasible bins.
    min_waste_index = np.argmin(wasted_space)
    if wasted_space[min_waste_index] != np.inf: # if minimum wasted space is feasible
        priorities[min_waste_index] += 1

    return priorities
```
