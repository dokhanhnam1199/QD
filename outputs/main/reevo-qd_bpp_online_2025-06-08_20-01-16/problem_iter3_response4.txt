```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Normalize item size.
    item_normalized = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0

    # Prioritize bins with smallest wasted space among feasible bins
    wasted_space = bins_remain_cap - item
    
    # Only look at feasible bins
    wasted_space_feasible = wasted_space[feasible_bins]

    if len(wasted_space_feasible) > 0:

        # Normalize wasted space for better comparison.
        wasted_space_normalized = wasted_space_feasible / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else wasted_space_feasible
        
        # Assign priorities based on negative wasted space (smaller waste = higher priority).
        indices = np.where(feasible_bins)[0]
        priorities[indices] = -wasted_space_normalized

        # Find the bin with minimal wasted space and boost its priority
        min_waste_index = np.argmin(wasted_space_feasible)
        priorities[indices[min_waste_index]] += 1 # Boosting priority
        
    return priorities
```
