```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Prioritize bins with less remaining capacity *after* placing the item.  This encourages filling bins more completely.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Large value if it doesn't fit
    
    # 3. Avoid near-full bins: Penalize bins that would be filled to over a threshold (e.g., 95%)
    nearly_full = (remaining_after_fit / bins_remain_cap) < 0.05
    priorities[nearly_full] -= 1000  # Large negative penalty

    # 4. Reward bins with good 'fit' ratio, but only if feasible
    fit_ratio = item / bins_remain_cap
    priorities[feasible_bins] += (1 - fit_ratio[feasible_bins]) * 10 # Smaller remaining gap is better, scale by a constant

    
    # 5. Extremely large penalty for infeasible bins to ensure they are last
    priorities[~feasible_bins] -= np.inf 

    return priorities
```
