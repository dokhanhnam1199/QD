```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Huge penalty for bins that can't fit the item.
    priorities[bins_remain_cap < item] = -np.inf

    # If the item fits, prioritize bins with capacity closest to item size
    # but prefer bins with higher remaining capacity.
    
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
      diffs = np.abs(bins_remain_cap[fit_bins] - item)
      
      # Give higher priority to bins that are closer to a "perfect fit" (small diff).
      priorities[fit_bins] = 1.0 / (diffs + 1e-6) # Adding a small constant to avoid division by zero
      
      # Prioritize by the remain capacity; bigger remain capacity is better
      priorities[fit_bins] += bins_remain_cap[fit_bins]

    return priorities
```
