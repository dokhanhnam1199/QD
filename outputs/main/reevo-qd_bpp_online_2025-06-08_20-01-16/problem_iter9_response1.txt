```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Normalize remaining capacity for fair comparison.  Only normalize feasible bins.
    feasible_capacities = bins_remain_cap[feasible_bins]
    if np.any(feasible_capacities):
      normalized_capacities = feasible_capacities / np.max(feasible_capacities)
    else:
      normalized_capacities = np.array([])

    # Calculate wasted space for feasible bins
    wasted_space = bins_remain_cap[feasible_bins] - item
    
    # Create a base priority based on the normalized remaining capacities for feasible bins
    priorities[feasible_bins] = 1 - normalized_capacities if np.any(feasible_capacities) else 0 # Ensure priorities are assigned

    # Aggressively boost the bin with the minimum wasted space
    if np.any(feasible_bins):
        min_waste_index = np.argmin(wasted_space)
        indices = np.where(feasible_bins)[0]
        priorities[indices[min_waste_index]] += 2  # Significantly boost the best bin

    return priorities
```
