```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Priority based on how much space would be wasted
            waste = cap - item
            priorities[i] = 1 / (waste + 1e-9)  # Avoid division by zero

            # Bonus for bins that are already somewhat full (less fragmentation)
            priorities[i] += (1 - cap)  #Higher remaining cap should correspond to less priority. Values are expected to be <=1 and >=0. Thus the value should become negative, so bins closer to full will be greater.

            #If the waste is low, give a higher priority
            if waste < 0.1: #Tuneable Parameter
               priorities[i] += 1 #Prefer tighter fit

        else:
            priorities[i] = -np.inf  # Cannot fit

    return priorities
```
