```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Huge negative priority if the item doesn't fit
    priorities[item > bins_remain_cap] = -np.inf

    # Best Fit heuristic: prioritize bins where the remaining space after placing the item is minimized
    remaining_space = bins_remain_cap - item
    
    # Prioritize bins that can accommodate the item. Bins where remaining_space becomes negative are already set to -inf
    valid_bins = remaining_space >= 0
    priorities[valid_bins] = -remaining_space[valid_bins]  # Negate to make smaller remaining space higher priority

    # Introduce a small bonus if the bin is nearly full after placing the item
    nearly_full_threshold = 0.1  # e.g., if remaining space is less than 10% of bin size
    nearly_full_bonus = 1.0 
    priorities[(remaining_space > 0) & (remaining_space <= (nearly_full_threshold * np.max(bins_remain_cap)))] += nearly_full_bonus

    return priorities
```
