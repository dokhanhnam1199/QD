```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing inspired approach: prioritize bins that can accommodate the item closely
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        diffs = bins_remain_cap - item
        priorities[can_fit] = 1 / (diffs[can_fit] + 1e-6)  # Add a small constant to avoid division by zero
    
    # Give a lower priority to bins that can't fit, but still prioritize bins with larger remaining capacity
    else:
        priorities = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6) # Avoid division by zero if max is zero

    return priorities
```
