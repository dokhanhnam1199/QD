```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to hold the item
    valid_bins = bins_remain_cap >= item

    # Initialize priorities for invalid bins to -inf
    priorities[~valid_bins] = -np.inf

    # Calculate waste if the item is placed in each valid bin
    waste = bins_remain_cap[valid_bins] - item

    # Give a high priority to bins where the waste is minimized,
    # but also only consider bins where waste is not very large
    # to avoid using bins unnecessarily.
    priorities[valid_bins] = -waste + (waste <= 0.2 * bins_remain_cap[valid_bins]) * 100  # Bias towards smaller waste, with a bonus for fitting well

    # Small penalty to prefer using a new bin instead of creating very small waste
    priorities[bins_remain_cap == np.max(bins_remain_cap)] -= 0.0001

    return priorities
```
