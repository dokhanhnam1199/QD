```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, all priorities are 0.

    # Prioritize bins with smallest remaining capacity among feasible bins, but only if it fits.
    # The closer the item size to the remaining capacity, the higher the priority.
    
    wasted_space = bins_remain_cap - item
    
    # Set wasted space to a high value for infeasible bins
    wasted_space[~feasible_bins] = np.inf
    
    # Normalize wasted space to be between 0 and 1 (0 means perfectly fitting).
    max_waste = np.max(wasted_space[feasible_bins]) if np.any(feasible_bins) else 1  #Avoid division by zero
    normalized_wasted_space = wasted_space / max_waste if max_waste > 0 else wasted_space
    
    # Prioritize bins with smallest normalized wasted space.
    priorities[feasible_bins] = 1 - normalized_wasted_space[feasible_bins]
    
    #Give a bonus to the bin with the absolute least wasted space
    min_waste_index = np.argmin(wasted_space)
    if wasted_space[min_waste_index] != np.inf:
        priorities[min_waste_index] += 0.5 #Small bonus

    return priorities
```
