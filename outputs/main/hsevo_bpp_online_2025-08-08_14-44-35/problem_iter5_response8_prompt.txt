{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a hybrid approach\n    combining First Fit Decreasing (FFD) intuition with a focus on minimizing wasted space.\n\n    This heuristic prioritizes bins that can fit the item and have a remaining capacity\n    that is \"close\" to the item size, aiming to reduce fragmentation. It also incorporates\n    a penalty for bins that are too large relative to the item, discouraging the use\n     of oversized bins for small items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # For bins that can fit the item, calculate a priority score.\n    # We want to prioritize bins where the remaining capacity is *just* enough or slightly more.\n    # A bin with remaining capacity `r` after packing the item `i` will have `r = bins_remain_cap - item`.\n    # We want to maximize `1 / (r + epsilon)` for tighter packing.\n    # Additionally, we penalize bins that are excessively large compared to the item.\n    \n    epsilon = 1e-9\n    \n    # Calculate 'tightness' score: higher for smaller remaining capacity after packing\n    tightness_score = np.zeros_like(bins_remain_cap, dtype=float)\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    remaining_after_packing = fitting_bins_remain_cap - item\n    tightness_score[can_fit_mask] = 1.0 / (remaining_after_packing + epsilon)\n    \n    # Calculate 'oversize' penalty: penalize bins that are much larger than the item.\n    # This encourages using bins that are closer in size to the item if possible.\n    # We use a logarithmic scale to dampen the effect of very large bins.\n    oversize_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    oversize_factor = bins_remain_cap[can_fit_mask] / (item + epsilon)\n    # Penalize if oversize_factor is significantly greater than 1.\n    # A threshold of 2 means a bin is twice the item size. We can adjust this.\n    oversize_threshold = 2.0\n    penalty_strength = 0.5 # Tune this parameter\n    \n    oversize_penalty[can_fit_mask] = np.maximum(0, 1 - penalty_strength * np.log(oversize_factor / oversize_threshold + 1))\n    \n    # Combine scores. Prioritize tightness, but also penalize significant oversizing.\n    # A weighted sum can be used, or a multiplicative approach.\n    # Here we'll use a multiplicative approach where oversizing reduces the priority.\n    \n    combined_priority = tightness_score * oversize_penalty\n    \n    # Normalize priorities to have a max of 1.0\n    max_priority = np.max(combined_priority)\n    if max_priority > 0:\n        priorities[can_fit_mask] = combined_priority / max_priority\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins by favoring tighter fits (inverse remaining capacity) while adding a penalty for completely empty bins.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    suitable_bins_mask = bins_remain_cap >= item\n\n    # Calculate priorities for suitable bins: higher priority for less remaining capacity (tighter fit)\n    # Add a small epsilon to avoid division by zero if a bin is exactly full\n    epsilon = 1e-9\n    suitable_bins_capacity = bins_remain_cap[suitable_bins_mask]\n    priorities[suitable_bins_mask] = 1.0 / (suitable_bins_capacity - item + epsilon)\n\n    # Apply a penalty to bins that are completely empty to encourage packing into existing bins first.\n    # Bins with remaining capacity equal to the bin capacity are considered empty.\n    # This penalty is designed to be significantly larger than any priority value from the inverse capacity calculation.\n    empty_bins_mask = bins_remain_cap == np.max(bins_remain_cap) # Assuming max capacity is the bin size\n    \n    # Ensure we only penalize empty bins that are also suitable\n    empty_and_suitable_mask = empty_bins_mask & suitable_bins_mask\n    \n    # A large constant to penalize empty bins. This ensures they are considered only after non-empty bins are exhausted.\n    empty_bin_penalty = 1e6  \n    priorities[empty_and_suitable_mask] = empty_bin_penalty\n\n    return priorities\n\n### Analyze & experience\n- Comparing Heuristic 1 (priority_v2) vs Heuristic 4 (priority_v2): Heuristic 1 attempts a more nuanced approach by considering both tight packing and current fullness, aiming for a balance. Heuristic 4 solely focuses on tight packing (inverse of remaining capacity after packing). Heuristic 1's attempt to balance objectives is potentially better, but its implementation has an error in calculating `filled_ratio` and the subsequent logic might not achieve its stated goals effectively. Heuristic 4 is simpler and directly implements the \"tightest fit\" idea.\n\nComparing Heuristic 1 (priority_v2) vs Heuristic 5 (priority_v2): Heuristic 5 introduces dynamic weighting based on item size relative to bin capacity, aiming to favor tight packing for small items and using fuller bins for larger items. This is a more sophisticated approach than Heuristic 1's fixed weights and static scores, but Heuristic 1's conceptual goal of balancing two factors is also valuable. Heuristic 5's complexity and dynamic weighting seem promising.\n\nComparing Heuristic 5 (priority_v2) vs Heuristic 6 (priority_v2): Heuristic 5 uses item size relative to max capacity for dynamic weighting. Heuristic 6 uses item size relative to average remaining capacity for dynamic weighting of tight fit. Both try to adapt. Heuristic 5's inclusion of a \"future accommodation\" score alongside \"tight fit\" and \"nearly full\" is more comprehensive than Heuristic 6's simpler \"tight fit\" and \"nearly full\" components.\n\nComparing Heuristic 4 (priority_v2) vs Heuristic 9 (priority_v2): These heuristics are identical, both implementing a simple \"tightest fit\" strategy (inverse remaining capacity after packing) and normalizing the results. They represent a baseline approach.\n\nComparing Heuristic 2 (priority_v2) vs Heuristic 10 (priority_v2): Both introduce exploration. Heuristic 2 uses a small fixed probability to add a boost to a random subset of valid bins. Heuristic 10 uses an epsilon-greedy approach: with probability epsilon, it picks a random fitting bin; otherwise, it picks the best fit. Heuristic 10's epsilon-greedy is a more standard and potentially effective exploration strategy for optimizing decisions.\n\nComparing Heuristic 7 (priority_v2) vs Heuristics 11, 12, 13, 14, 15, 16 (all priority_v2): Heuristic 7 combines inverse gaps with a uniform boost to all suitable bins (soft epsilon-greedy). Heuristics 11-16 are very similar, implementing a tight fit (inverse of waste/gap) and some form of exploration. Heuristic 11 uses Gaussian noise based on std dev. Heuristics 12-16 use an epsilon-greedy approach where a random available bin gets a significantly boosted priority. Heuristic 10's epsilon-greedy (select random fitting bin vs best fit) seems more direct than boosting a bin's priority. The implementation in 12-16, boosting a single bin's priority, is a very crude form of exploration. Heuristic 11's noise approach is also interesting.\n\nComparing Heuristic 17 (priority_v2) vs Heuristic 20 (priority_v2): Both prioritize tight fits and penalize empty bins. Heuristic 17 uses a fixed large penalty for empty bins. Heuristic 20 seems identical to 17. They focus on leveraging existing bins.\n\nComparing Heuristic 18 (priority_v2) vs Heuristic 19 (priority_v2): These heuristics are identical. They attempt to balance tight packing, future accommodation, and adaptive utilization with weighted scores. This multi-objective approach is conceptually strong.\n\nOverall: The best heuristics (1, 5, 6, 18/19) attempt to balance multiple objectives (tight fit, nearly full, future accommodation, adaptive utilization). Heuristics 2, 10, 11, 12-16 introduce exploration mechanisms. Heuristic 10's epsilon-greedy is a strong contender. Heuristic 18/19's multi-objective approach is also very promising. The simplest but functional approach is the tight-fit strategy (4, 9). The worst heuristics are those with clear bugs or conceptually flawed logic (like the initial attempt in Heuristic 1). The identical heuristics (4 vs 9, 18 vs 19) suggest redundancy or copy-pasting errors in the prompt's ranking. The cluster of identical \"Inverse Distance + epsilon-greedy\" heuristics (12-16) are simple but not as nuanced as others.\n- \nHere's a redefined approach to self-reflection for heuristic design:\n\n*   **Keywords:** Multi-objective optimization, adaptive search, problem decomposition, empirical validation.\n*   **Advice:** Focus on clear objective articulation and breaking down complex problems into manageable sub-problems. Design heuristics that explicitly address different facets of the problem, allowing for targeted improvements. Integrate mechanisms for systematic empirical testing and comparison against baselines.\n*   **Avoid:** Over-reliance on generic exploration strategies without understanding their impact on specific problem structures. Implementing overly complex or poorly understood scaling mechanisms before thoroughly validating simpler approaches.\n*   **Explanation:** True self-reflection involves deep understanding of the problem and tailored solutions. It's not about applying off-the-shelf meta-heuristics but about intelligently combining and adapting them based on empirical evidence and problem-specific insights.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}