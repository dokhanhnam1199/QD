```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    available_bins_mask = bins_remain_cap >= item
    available_bins_capacities = bins_remain_cap[available_bins_mask]

    if available_bins_capacities.size > 0:
        priorities[available_bins_mask] = available_bins_capacities - item
        
        # Introduce a bit of randomness for exploration, like nudging things around.
        # The idea is to sometimes pick a slightly worse fit to see if it opens up better opportunities later.
        # Not too much, just a gentle push. Think of it as trying out a slightly different path.
        random_noise = np.random.normal(0, np.std(available_bins_capacities) * 0.05, available_bins_capacities.shape)
        priorities[available_bins_mask] = priorities[available_bins_mask] + random_noise

    return priorities
```
