```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements an epsilon-greedy strategy for online Bin Packing.
    The priority function favors bins that can fit the item and
    prioritizes those with less remaining capacity (Best Fit).
    With probability epsilon, it randomly selects a bin that can fit the item.
    """
    epsilon = 0.1  # Exploration probability
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    possible_bins = np.where(bins_remain_cap >= item)[0]

    if len(possible_bins) == 0:
        return priorities  # No bin can fit the item

    if np.random.rand() < epsilon:
        # Exploration: Randomly choose a bin that can fit the item
        chosen_bin_index = np.random.choice(possible_bins)
        priorities[chosen_bin_index] = 1.0
    else:
        # Exploitation: Best Fit strategy - prioritize bins with least remaining capacity
        fitting_bins_capacities = bins_remain_cap[possible_bins]
        # Calculate difference between capacity and item size for fitting bins
        diffs = fitting_bins_capacities - item
        # Find the index of the bin with the minimum difference among possible bins
        best_fit_index_in_possible = np.argmin(diffs)
        # Get the original index of this bin in the bins_remain_cap array
        best_fit_original_index = possible_bins[best_fit_index_in_possible]
        priorities[best_fit_original_index] = 1.0

    return priorities
```
