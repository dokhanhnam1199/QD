```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_capacities = bins_remain_cap[valid_bins_mask]

    if valid_bins_capacities.size > 0:
        inverse_distances = 1.0 / (bins_remain_cap[valid_bins_mask] - item + 1e-9)
        priorities[valid_bins_mask] = inverse_distances

    return priorities
```
