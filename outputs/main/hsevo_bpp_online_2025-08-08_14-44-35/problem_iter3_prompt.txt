{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a modified First Fit strategy.\n    Priority is higher for bins that can accommodate the item and have less remaining capacity\n    after packing, aiming to fill bins more tightly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Consider bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Calculate remaining capacity after packing the item\n    remaining_after_packing = bins_remain_cap[can_fit_mask] - item\n    \n    # Assign higher priority to bins with less remaining capacity after packing\n    # This encourages tighter packing.\n    # We use the inverse of remaining capacity (plus a small epsilon to avoid division by zero\n    # if an item perfectly fills a bin) to ensure higher priority for tighter fits.\n    epsilon = 1e-9\n    priorities[can_fit_mask] = 1.0 / (remaining_after_packing + epsilon)\n    \n    # Normalize priorities so the maximum priority is 1.0 (optional, but good practice)\n    if np.max(priorities) > 0:\n        priorities /= np.max(priorities)\n        \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to self-reflection for heuristic design:\n\n*   **Keywords:** Adaptive Exploration, Multi-objective Balancing, Dynamic Scaling, Algorithmic Synergy.\n*   **Advice:** Focus on heuristics that dynamically adjust their exploration/exploitation balance based on observed performance and problem characteristics. Explore how to combine or nest heuristics (meta-heuristics) to leverage their complementary strengths.\n*   **Avoid:** Rigid, one-size-fits-all parameter settings. Over-reliance on single-dimension optimization without considering broader search space dynamics.\n*   **Explanation:** Effective self-reflection involves understanding *when* and *why* certain heuristic components perform well, enabling the design of more adaptive and robust strategies that can navigate complex search landscapes efficiently.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}