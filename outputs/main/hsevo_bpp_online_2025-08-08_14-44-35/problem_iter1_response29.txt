```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    
    if not np.any(valid_bins_mask):
        return np.zeros_like(bins_remain_cap)

    valid_bins_remain_cap = bins_remain_cap[valid_bins_remain_cap]
    
    # Softmax-Based Fit: Prioritize bins that are a good fit, but also consider those with more remaining space.
    # A simple approach is to use the negative difference between capacity and item size as a "desirability" score.
    # Smaller differences are more desirable (better fit).
    desirability = -(valid_bins_remain_cap - item)
    
    # Apply softmax to turn desirability into probabilities (priorities)
    # We can add a temperature parameter to control the "greediness" of the selection.
    # A higher temperature leads to a more uniform distribution, a lower temperature to a more peaked distribution.
    temperature = 1.0  # This could be a tunable parameter
    
    exp_desirability = np.exp(desirability / temperature)
    probabilities = exp_desirability / np.sum(exp_desirability)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins_remain_cap >= item] = probabilities
    
    return priorities
```
