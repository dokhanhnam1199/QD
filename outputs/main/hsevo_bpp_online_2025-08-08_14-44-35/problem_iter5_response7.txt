```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines tightest fit with an epsilon-greedy exploration strategy.

    Prioritizes bins with minimal remaining capacity after packing,
    while occasionally exploring other bins to avoid local optima.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 0.1  # Exploration rate
    epsilon_boost = 1.5 # Boost factor for exploration

    # Mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Filter to only consider bins that can fit the item
    available_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if available_bins_remain_cap.size == 0:
        return priorities

    # Heuristic: Prioritize tightest fit (minimum waste)
    # Calculate remaining capacity after packing for available bins
    remaining_after_packing = available_bins_remain_cap - item

    # Higher priority for bins with less remaining capacity (tighter fit)
    # Add a small epsilon to avoid division by zero
    tight_fit_score = 1.0 / (remaining_after_packing + 1e-9)

    # Normalize the tight fit scores to a 0-1 range
    if np.max(tight_fit_score) > 0:
        normalized_tight_fit_score = tight_fit_score / np.max(tight_fit_score)
    else:
        normalized_tight_fit_score = np.zeros_like(tight_fit_score)

    # Epsilon-greedy exploration:
    # With probability epsilon, select a random available bin.
    # Otherwise, select the bin with the best (highest) tight fit score.
    num_available_bins = available_bins_remain_cap.size
    if num_available_bins > 0 and np.random.rand() < epsilon:
        # Exploration: Randomly select an available bin and boost its priority
        random_indices_in_available = np.random.choice(num_available_bins)
        # Apply a boost to the chosen bin's priority
        normalized_tight_fit_score[random_indices_in_available] *= epsilon_boost

    # Place the calculated priorities back into the original priorities array
    priorities[can_fit_mask] = normalized_tight_fit_score

    return priorities
```
