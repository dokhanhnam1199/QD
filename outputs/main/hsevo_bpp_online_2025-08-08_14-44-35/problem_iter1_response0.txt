```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a modified First Fit strategy.
    Priority is higher for bins that can accommodate the item and have less remaining capacity
    after packing, aiming to fill bins more tightly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Consider bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate remaining capacity after packing the item
    remaining_after_packing = bins_remain_cap[can_fit_mask] - item
    
    # Assign higher priority to bins with less remaining capacity after packing
    # This encourages tighter packing.
    # We use the inverse of remaining capacity (plus a small epsilon to avoid division by zero
    # if an item perfectly fills a bin) to ensure higher priority for tighter fits.
    epsilon = 1e-9
    priorities[can_fit_mask] = 1.0 / (remaining_after_packing + epsilon)
    
    # Normalize priorities so the maximum priority is 1.0 (optional, but good practice)
    if np.max(priorities) > 0:
        priorities /= np.max(priorities)
        
    return priorities
```
