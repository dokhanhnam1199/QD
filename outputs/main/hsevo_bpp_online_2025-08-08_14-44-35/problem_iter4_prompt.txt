{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines the tight-fitting priority of inverse remaining capacity\n    with an epsilon-greedy exploration strategy for better bin packing.\n    \"\"\"\n    epsilon = 0.1  # Probability of exploring a random bin\n\n    # Calculate priorities based on tightest fit (inverse remaining capacity)\n    # Only consider bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    tight_fit_priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Add a small epsilon to avoid division by zero if remaining capacity == item\n    valid_capacities = bins_remain_cap[fit_mask] - item + 1e-9\n    tight_fit_priorities[fit_mask] = 1.0 / valid_capacities\n\n    # Normalize priorities so they sum to 1 (if no exploration)\n    sum_priorities = np.sum(tight_fit_priorities)\n    if sum_priorities > 0:\n        normalized_priorities = tight_fit_priorities / sum_priorities\n    else:\n        # If no bins can fit the item, assign equal probability to all (effectively a new bin)\n        normalized_priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)\n\n    # Epsilon-greedy: explore randomly with probability epsilon\n    exploration_priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)\n    \n    # Combine exploitation (tight fit) and exploration (random)\n    # With probability (1 - epsilon), choose the tight fit priority\n    # With probability epsilon, choose the exploration priority\n    combined_priorities = (1 - epsilon) * normalized_priorities + epsilon * exploration_priorities\n\n    # Ensure probabilities sum to 1 (due to potential floating point inaccuracies or edge cases)\n    final_priorities = combined_priorities / np.sum(combined_priorities)\n\n    return final_priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}