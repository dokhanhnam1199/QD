```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can accommodate the item
    suitable_bins_mask = bins_remain_cap >= item
    
    # Calculate the "emptiness" of suitable bins
    # We want to prioritize bins that are almost full, meaning they have less remaining capacity
    # The less remaining capacity, the higher the priority
    suitable_bins_capacity = bins_remain_cap[suitable_bins_mask]
    
    # The priority is inversely proportional to the remaining capacity.
    # A small positive constant is added to avoid division by zero and to ensure non-zero priorities for non-empty bins.
    # A larger constant can be used to penalize empty bins more heavily, effectively prioritizing bins that already have items.
    # Here, we use a penalty that is greater than any possible item size.
    penalty_for_empty = 1000.0 
    
    priorities[suitable_bins_mask] = penalty_for_empty - suitable_bins_capacity
    
    return priorities
```
