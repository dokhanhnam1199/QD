```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse remaining capacity with a penalty for empty bins,
    favoring tighter fits while encouraging filling existing bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-6
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            
            # Favor tighter fits (inverse remaining capacity)
            priority_fit = 1.0 / (remaining_after_fit + epsilon)
            
            # Penalty for completely empty bins if not an exact fit
            # This encourages using existing bins before opening new ones unless it's an exact fit
            if cap > item and cap == bins_remain_cap[i]: # if bin was initially empty
                priority_fit *= 0.8 # slight penalty for using an empty bin
                
            priorities[i] = priority_fit
            
    return priorities
```
