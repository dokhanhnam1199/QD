{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit preference with a penalty for unused bins,\n    favoring bins that leave less space and are already in use.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    # Mask for bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate tightness score: inverse of remaining capacity after packing\n    # Higher score for bins that leave less remaining space (closer to zero)\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    remaining_after_packing = fitting_bins_remain_cap - item\n    tightness_score = np.zeros_like(bins_remain_cap, dtype=float)\n    tightness_score[can_fit_mask] = 1.0 / (remaining_after_packing + epsilon)\n\n    # Penalty for \"empty\" bins: encourage using partially filled bins.\n    # We define \"empty\" as bins with a large remaining capacity (e.g., > 75% of max observed).\n    # This encourages filling existing bins before opening new ones.\n    \n    # First, find a baseline for \"large remaining capacity\".\n    # We can use the maximum remaining capacity among *fitting* bins as a reference.\n    # If no bins fit, this part is skipped.\n    if fitting_bins_remain_cap.size > 0:\n        max_fitting_capacity = np.max(fitting_bins_remain_cap)\n        \n        # Identify bins that are \"empty\" or significantly underutilized\n        # A bin is considered \"empty\" if its remaining capacity is substantially large.\n        # Let's use a threshold, e.g., 75% of the max fitting capacity.\n        # This heuristic aims to penalize bins that are \"too large\" for the current item,\n        # and more importantly, to prefer bins that are already in use.\n        \n        # Penalty factor: reduce priority for bins with high remaining capacity.\n        # We want to down-weight bins that have a lot of \"slack\".\n        # The inverse of (1 + slack_penalty_factor * remaining_capacity) can work.\n        # A simpler approach derived from \"penalty for empty bins\" is to reduce the score\n        # of bins that are still \"full\" (i.e., have lots of remaining capacity).\n        \n        # Let's define a \"utilization score\" which is inverse of remaining capacity.\n        # A bin that is almost full has a high utilization score.\n        # High utilization is preferred.\n        \n        utilization_score = np.zeros_like(bins_remain_cap, dtype=float)\n        # We consider the inverse of the *initial* remaining capacity for utilization.\n        # Higher value means more utilized (less remaining capacity initially).\n        # We apply this only to fitting bins.\n        utilization_score[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)\n\n        # Combine tightness and utilization.\n        # We want both: small remaining space *after* packing (tightness)\n        # AND high initial utilization (prefer fuller bins).\n        # Multiplying them seems reasonable: prioritize bins that are already full AND become tight.\n        combined_score = tightness_score * utilization_score\n        \n        # Normalize scores to be in a similar range, e.g., [0, 1]\n        max_score = np.max(combined_score)\n        if max_score > 0:\n            priorities[can_fit_mask] = combined_score[can_fit_mask] / max_score\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}