```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    available_bins_mask = bins_remain_cap >= item
    available_bins_cap = bins_remain_cap[available_bins_mask]
    
    if available_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Inverse distance (proximity fit) strategy: prioritize bins that are almost full but can still fit the item
    # Calculate the "waste" if the item is placed in a bin
    waste = available_bins_cap - item
    
    # Higher priority for bins with less waste (closer fit)
    # Add a small epsilon to avoid division by zero if an exact fit is found (waste is 0)
    priorities = 1.0 / (waste + 1e-9)
    
    # Create a full-size priority array and fill in the priorities for available bins
    full_priorities = np.zeros_like(bins_remain_cap)
    full_priorities[available_bins_mask] = priorities
    
    return full_priorities
```
