```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines a refined Best Fit strategy with an adaptive exploration mechanism.
    Prioritizes bins that minimize the wasted space (gap) after packing,
    and uses a dynamic epsilon for exploration based on the item's size relative to
    the average remaining capacity. It also introduces a "most empty bin" preference
    to encourage utilizing larger bins when fitting smaller items, promoting better
    distribution and potentially reducing fragmentation.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins, dtype=float)

    suitable_bins_mask = bins_remain_cap >= item
    suitable_bins_indices = np.where(suitable_bins_indices)[0]

    if suitable_bins_indices.size == 0:
        return priorities

    suitable_bins_capacities = bins_remain_cap[suitable_bins_indices]

    # Adaptive exploration
    avg_remain_cap = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 0
    if avg_remain_cap > 0:
        epsilon = max(0.01, min(0.2, item / avg_remain_cap * 0.1)) # Dynamic epsilon
    else:
        epsilon = 0.1

    if np.random.rand() < epsilon:
        # Exploration: pick a random suitable bin
        chosen_bin_index = np.random.choice(suitable_bins_indices)
        priorities[chosen_bin_index] = 1.0
    else:
        # Exploitation: Refined Best Fit with a tie-breaker for "most empty bin"
        gaps = suitable_bins_capacities - item
        min_gap = np.min(gaps)
        best_fit_indices = suitable_bins_indices[gaps == min_gap]

        if len(best_fit_indices) == 1:
            priorities[best_fit_indices[0]] = 1.0
        else:
            # Tie-breaker: Prefer the bin with the largest remaining capacity among those with the minimum gap
            best_fit_bin_capacities = bins_remain_cap[best_fit_indices]
            most_empty_bin_idx_in_best_fit = np.argmax(best_fit_bin_capacities)
            chosen_bin_index = best_fit_indices[most_empty_bin_idx_in_best_fit]
            priorities[chosen_bin_index] = 1.0

    return priorities
```
