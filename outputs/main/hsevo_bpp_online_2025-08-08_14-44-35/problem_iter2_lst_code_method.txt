{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priorities for packing an item into bins using a Softmax-Based Fit strategy.\n\n    This strategy assigns higher priority to bins that are a good fit for the item,\n    meaning bins with remaining capacity close to the item's size. A smaller\n    difference between bin capacity and item size results in a higher score.\n    Softmax is used to convert these scores into probabilities (priorities).\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A NumPy array representing the remaining capacity of each bin.\n\n    Returns:\n        A NumPy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item into the corresponding bin.\n    \"\"\"\n    # Calculate the difference between remaining capacity and item size.\n    # We are interested in bins where remaining capacity is >= item size.\n    # For bins where remaining capacity is less than item size, the difference will be negative.\n    # Adding a small epsilon to avoid issues with log(0) if capacity is exactly item size.\n    differences = bins_remain_cap - item + 1e-9\n\n    # We want to prioritize bins where the difference is small (good fit).\n    # A larger difference means a worse fit. We can use the negative difference\n    # to effectively treat smaller positive differences as \"more positive\".\n    # We'll filter out bins where capacity < item size by making their score very low.\n    # A large negative number will result in a very small exponent in softmax.\n    scores = np.where(differences >= 0, -differences, -1e9)\n\n    # Apply the softmax function to convert scores into probabilities (priorities)\n    # Softmax: exp(score_i) / sum(exp(score_j))\n    # This will naturally give higher probabilities to bins with smaller (less negative) scores.\n    exp_scores = np.exp(scores)\n    priorities = exp_scores / np.sum(exp_scores)\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            remaining_after_fit = cap - item\n            if remaining_after_fit == 0:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = 1.0 / (remaining_after_fit + 1e-6)\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Almost Full Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Identify bins that can accommodate the item\n    suitable_bins_mask = bins_remain_cap >= item\n    \n    # Calculate the \"emptiness\" of suitable bins\n    # We want to prioritize bins that are almost full, meaning they have less remaining capacity\n    # The less remaining capacity, the higher the priority\n    suitable_bins_capacity = bins_remain_cap[suitable_bins_mask]\n    \n    # The priority is inversely proportional to the remaining capacity.\n    # A small positive constant is added to avoid division by zero and to ensure non-zero priorities for non-empty bins.\n    # A larger constant can be used to penalize empty bins more heavily, effectively prioritizing bins that already have items.\n    # Here, we use a penalty that is greater than any possible item size.\n    penalty_for_empty = 1000.0 \n    \n    priorities[suitable_bins_mask] = penalty_for_empty - suitable_bins_capacity\n    \n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            remaining_after_fit = cap - item\n            if remaining_after_fit == 0:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = 1.0 / (remaining_after_fit + 1e-6)\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_capacities = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_capacities.size > 0:\n        inverse_distances = 1.0 / (bins_remain_cap[valid_bins_mask] - item + 1e-9)\n        priorities[valid_bins_mask] = inverse_distances\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[suitable_bins_mask] = 1.0 / (bins_remain_cap[suitable_bins_mask] - item + 1e-9)\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements an epsilon-greedy strategy for online Bin Packing.\n    The priority function favors bins that can fit the item and\n    prioritizes those with less remaining capacity (Best Fit).\n    With probability epsilon, it randomly selects a bin that can fit the item.\n    \"\"\"\n    epsilon = 0.1  # Exploration probability\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    possible_bins = np.where(bins_remain_cap >= item)[0]\n\n    if len(possible_bins) == 0:\n        return priorities  # No bin can fit the item\n\n    if np.random.rand() < epsilon:\n        # Exploration: Randomly choose a bin that can fit the item\n        chosen_bin_index = np.random.choice(possible_bins)\n        priorities[chosen_bin_index] = 1.0\n    else:\n        # Exploitation: Best Fit strategy - prioritize bins with least remaining capacity\n        fitting_bins_capacities = bins_remain_cap[possible_bins]\n        # Calculate difference between capacity and item size for fitting bins\n        diffs = fitting_bins_capacities - item\n        # Find the index of the bin with the minimum difference among possible bins\n        best_fit_index_in_possible = np.argmin(diffs)\n        # Get the original index of this bin in the bins_remain_cap array\n        best_fit_original_index = possible_bins[best_fit_index_in_possible]\n        priorities[best_fit_original_index] = 1.0\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    available_bins_mask = bins_remain_cap >= item\n    available_bins_cap = bins_remain_cap[available_bins_mask]\n    \n    if available_bins_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    # Inverse distance (proximity fit) strategy: prioritize bins that are almost full but can still fit the item\n    # Calculate the \"waste\" if the item is placed in a bin\n    waste = available_bins_cap - item\n    \n    # Higher priority for bins with less waste (closer fit)\n    # Add a small epsilon to avoid division by zero if an exact fit is found (waste is 0)\n    priorities = 1.0 / (waste + 1e-9)\n    \n    # Create a full-size priority array and fill in the priorities for available bins\n    full_priorities = np.zeros_like(bins_remain_cap)\n    full_priorities[available_bins_mask] = priorities\n    \n    return full_priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    available_bins_mask = bins_remain_cap >= item\n    available_bins_cap = bins_remain_cap[available_bins_mask]\n    \n    if available_bins_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n    \n    \n    fit_ratios = available_bins_cap / item\n    \n    \n    priorities = 1 / (1 + np.exp(- (fit_ratios - 1.5))) \n    \n    \n    final_priorities = np.zeros_like(bins_remain_cap)\n    final_priorities[available_bins_mask] = priorities\n    \n    return final_priorities\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    fits = bins_remain_cap >= item\n    priorities[fits] = 1.0\n    first_fit_index = np.argmax(fits.astype(int))\n    priorities[first_fit_index] = 2.0\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    fits = bins_remain_cap >= item\n    priorities[fits] = 1.0\n    first_fit_index = np.argmax(fits.astype(int))\n    priorities[first_fit_index] = 2.0\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    suitable_bins_mask = bins_remain_cap >= item\n    \n    suitable_bins_capacities = bins_remain_cap[suitable_bins_mask]\n    \n    if suitable_bins_capacities.size == 0:\n        return np.zeros_like(bins_remain_cap)\n    \n    gaps = suitable_bins_capacities - item\n    \n    scaled_gaps = 1 / (1 + np.exp(-gaps * 0.5)) \n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[suitable_bins_mask] = scaled_gaps\n    \n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    suitable_bins_mask = bins_remain_cap >= item\n    \n    suitable_bins_capacities = bins_remain_cap[suitable_bins_mask]\n    \n    if suitable_bins_capacities.size == 0:\n        return np.zeros_like(bins_remain_cap)\n    \n    gaps = suitable_bins_capacities - item\n    \n    scaled_gaps = 1 / (1 + np.exp(-gaps * 0.5)) \n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[suitable_bins_mask] = scaled_gaps\n    \n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    bins_can_fit = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    available_bins_cap = bins_remain_cap[bins_can_fit]\n    if available_bins_cap.size > 0:\n        ratios = available_bins_cap / item\n        sigmoids = 1 / (1 + np.exp(-ratios + 5))\n        priorities[bins_can_fit] = sigmoids\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            priorities[i] = (cap - item) / cap\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = bins_remain_cap[i] - item\n        else:\n            priorities[i] = -float('inf')\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    available_bins_mask = bins_remain_cap >= item\n    available_bins_capacities = bins_remain_cap[available_bins_mask]\n\n    if available_bins_capacities.size > 0:\n        priorities[available_bins_mask] = available_bins_capacities - item\n        \n        # Introduce a bit of randomness for exploration, like nudging things around.\n        # The idea is to sometimes pick a slightly worse fit to see if it opens up better opportunities later.\n        # Not too much, just a gentle push. Think of it as trying out a slightly different path.\n        random_noise = np.random.normal(0, np.std(available_bins_capacities) * 0.05, available_bins_capacities.shape)\n        priorities[available_bins_mask] = priorities[available_bins_mask] + random_noise\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    available_bins_mask = bins_remain_cap >= item\n    available_bins_capacities = bins_remain_cap[available_bins_mask]\n\n    if available_bins_capacities.size > 0:\n        priorities[available_bins_mask] = available_bins_capacities - item\n        \n        # Introduce a bit of randomness for exploration, like nudging things around.\n        # The idea is to sometimes pick a slightly worse fit to see if it opens up better opportunities later.\n        # Not too much, just a gentle push. Think of it as trying out a slightly different path.\n        random_noise = np.random.normal(0, np.std(available_bins_capacities) * 0.05, available_bins_capacities.shape)\n        priorities[available_bins_mask] = priorities[available_bins_mask] + random_noise\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}