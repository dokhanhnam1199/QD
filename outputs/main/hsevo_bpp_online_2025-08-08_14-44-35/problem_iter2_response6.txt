```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by favoring tighter fits and incorporating a soft epsilon-greedy exploration.
    Combines inverse remaining capacity with a small probability of choosing a random bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    suitable_bins_capacities = bins_remain_cap[suitable_bins_mask]

    if suitable_bins_capacities.size > 0:
        gaps = suitable_bins_capacities - item
        
        # Inverse remaining capacity for tightest fits
        # Add a small epsilon to avoid division by zero and make priorities finite
        inverse_gaps = 1.0 / (gaps + 1e-6)
        
        # Normalize priorities to be between 0 and 1 (similar to softmax idea but simpler)
        # This rewards bins with smaller remaining capacity more
        max_inverse_gap = np.max(inverse_gaps)
        if max_inverse_gap > 0:
            normalized_priorities = inverse_gaps / max_inverse_gap
        else:
            normalized_priorities = np.ones_like(inverse_gaps) # All bins have 0 gap after fit

        priorities[suitable_bins_mask] = normalized_priorities
        
    # Introduce a small probability of choosing any suitable bin to encourage exploration
    # This is a simplified epsilon-greedy approach.
    epsilon = 0.05
    num_suitable_bins = np.sum(suitable_bins_mask)
    
    if num_suitable_bins > 0:
        # Assign a small, uniform probability to all suitable bins
        exploration_prob = epsilon / num_suitable_bins
        priorities[suitable_bins_mask] += exploration_prob

        # Re-normalize to ensure the sum of probabilities for suitable bins is manageable
        # This step ensures that exploration doesn't completely dominate exploitation
        sum_priorities = np.sum(priorities[suitable_bins_mask])
        if sum_priorities > 0:
             priorities[suitable_bins_mask] /= sum_priorities


    return priorities
```
