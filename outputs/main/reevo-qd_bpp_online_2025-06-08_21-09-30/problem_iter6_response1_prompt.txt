{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Eliminate bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Very low priority\n    \n    # Only calculate priority for bins that *can* hold the item\n    feasible_bins_indices = np.where(~infeasible_bins)[0]\n\n    if feasible_bins_indices.size > 0:\n\n        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred (First Fit Decreasing principle - tries to fill bins). Avoid fragmentation.\n        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item\n        \n        # 3. Combination of (2) and Best Fit idea: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon\n        priorities[feasible_bins_indices] = 1.0 / (remaining_cap_after_insertion + 1e-9)\n\n        # 4. Modified Best Fit Heuristic with a 'sweet spot' range.  Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.\n\n        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max() # Normalize\n\n        sweet_spot_lower = 0.2\n        sweet_spot_upper = 0.5\n\n        sweet_spot_bonus = np.where(\n            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),\n            1.0, # bonus\n            0.0\n        )\n\n        priorities[feasible_bins_indices] += sweet_spot_bonus\n\n        # 5. Break ties with First Fit: Bins that appear earlier in the array have a slight advantage to maintain a level of predictability and potentially reduce unnecessary bin usage overall. We add an index dependent bonus that scales down to 0 to ensure its negligible against larger priority differentials already calculated.\n        index_bonus = (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.1\n        priorities[feasible_bins_indices] += index_bonus\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Eliminate bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Very low priority\n\n    # Only calculate priority for bins that *can* hold the item\n    feasible_bins_indices = np.where(~infeasible_bins)[0]\n\n    if feasible_bins_indices.size > 0:\n        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred (First Fit Decreasing principle - tries to fill bins). Avoid fragmentation.\n        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item\n\n        # 3. Best Fit score: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon\n        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)\n        priorities[feasible_bins_indices] = best_fit_score * 0.6 # Reduce weight of best fit\n\n        # 4. Sweet spot bonus: Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.\n        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max()  # Normalize\n\n        sweet_spot_lower = 0.25\n        sweet_spot_upper = 0.6  # Adjusted sweet spot\n\n        sweet_spot_bonus = np.where(\n            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),\n            0.8,  # Increased bonus\n            0.0\n        )\n\n        priorities[feasible_bins_indices] += sweet_spot_bonus\n\n        # 5. First Fit tiebreaker: Bins that appear earlier in the array have a slight advantage.\n        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.01 # Reduced weight\n\n\n\n        # 6. Fragmentation penalty: Penalize bins where the remaining capacity will fall into a small-but-not-tiny range, creating fragmentation\n\n        fragmentation_threshold_lower = 0.07\n        fragmentation_threshold_upper = 0.2\n\n        fragmentation_penalty = np.where(\n            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),\n            -0.55,  # Increased penalty\n            0.0\n        )\n        priorities[feasible_bins_indices] += fragmentation_penalty\n\n\n        # 7. Very full bin penalty: avoid creating almost-full bins\n        almost_full_threshold = 0.85 # Adjusted threshold\n\n        almost_full_penalty = np.where(\n            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,\n            -0.7, # Increased penalty\n            0.0\n        )\n\n        priorities[feasible_bins_indices] += almost_full_penalty\n\n    return priorities\n\n[Reflection]\nPrioritize sweet spots, penalize fragmentation and near-full bins, and carefully tune weights based on thresholds.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}