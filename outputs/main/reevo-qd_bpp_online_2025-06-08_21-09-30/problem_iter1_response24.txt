```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins where the item fits perfectly or nearly perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    near_fit = (bins_remain_cap - item > 0) & (bins_remain_cap - item <= 0.1 * item)
    
    priorities[perfect_fit] = 10  # Highest priority for perfect fit
    priorities[near_fit] = 8  # High priority for near fit
    
    # Moderate priority for bins where the item fits and fills a significant portion.
    fits = bins_remain_cap >= item
    significant_fill = (item / bins_remain_cap) >= 0.5
    priorities[fits & significant_fill] = 5
    
    # Lower priority for bins where the item fits but doesn't fill much.
    priorities[fits & ~significant_fill] = 2
    
    # Very low (negative) priority if item doesn't fit
    priorities[bins_remain_cap < item] = -10
    
    return priorities
```
