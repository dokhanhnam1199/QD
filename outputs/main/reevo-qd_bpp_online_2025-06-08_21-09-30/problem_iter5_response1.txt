```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred.
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item

        # 3. Best Fit score: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon
        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] = best_fit_score * 0.6  # Reduced weight

        # 4. Sweet spot bonus: Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled. Adaptive sweet spot.
        max_bin_cap = bins_remain_cap.max()
        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / max_bin_cap  # Normalize

        sweet_spot_lower = 0.2 + 0.1 * (item / max_bin_cap) #adapt lower bound to item size
        sweet_spot_upper = 0.5 - 0.1 * (item / max_bin_cap) # adapt upper bound to item size

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            0.6,  # bonus - adjusted weight
            0.0
        )

        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 5. First Fit tiebreaker: Bins that appear earlier in the array have a slight advantage (refined)
        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.01 # Reduced weight

        # 6. Fragmentation penalty: Penalize bins where the remaining capacity will fall into a small-but-not-tiny range, creating fragmentation. Modulated strength.
        fragmentation_threshold_lower = 0.05
        fragmentation_threshold_upper = 0.15

        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.4 * (1 - item / max_bin_cap),  # penalty - adjusted weight. Smaller items cause higher fragmentation.
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 7. Very full bin penalty: avoid creating almost-full bins. Increased penalty if the bin was nearly full.
        almost_full_threshold = 0.9

        almost_full_penalty = np.where(
            bins_remain_cap[feasible_bins_indices] / max_bin_cap > almost_full_threshold,
            -0.5 - 0.3 * (bins_remain_cap[feasible_bins_indices] / max_bin_cap), # adjusted weight
            0.0
        )

        priorities[feasible_bins_indices] += almost_full_penalty

        #8. Tie-breaking: Prefer bins with larger remaining capacity when scores are close.
        max_priority = np.max(priorities[feasible_bins_indices])
        priority_threshold = max_priority - 0.001

        tiebreak_indices = np.where(priorities[feasible_bins_indices] >= priority_threshold)[0]
        if tiebreak_indices.size > 1:

            priorities[feasible_bins_indices[tiebreak_indices]] += bins_remain_cap[feasible_bins_indices[tiebreak_indices]] / max_bin_cap * 0.02

    return priorities
```
