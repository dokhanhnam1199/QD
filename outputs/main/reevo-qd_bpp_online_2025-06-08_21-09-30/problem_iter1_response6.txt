```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough but not too big (avoid fragmenting larger bins)
    fit_mask = (bins_remain_cap >= item)
    
    # Rank based on how much space is left after putting it in (smaller is better)
    remaining_space = bins_remain_cap - item
    priorities[fit_mask] = -remaining_space[fit_mask]

    # Bonus for nearly full bins to avoid creating many bins
    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priorities[nearly_full_mask] += 1

    # Big Penalty if item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf
    
    return priorities
```
