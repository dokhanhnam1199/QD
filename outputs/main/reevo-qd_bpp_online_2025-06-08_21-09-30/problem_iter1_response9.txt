```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Give higher priority to bins with tighter fit, but not too tight.
    # Avoid bins that are almost full as they become unusable for later items.
    remaining_after_fit = bins_remain_cap[can_fit] - item
    fit_ratio = item / bins_remain_cap[can_fit]

    priorities[can_fit] += np.clip(1 - remaining_after_fit / np.mean(bins_remain_cap), 0, 1)

    # Penalize bins that would be left with very little space if the item is added
    very_little_space = (bins_remain_cap - item) < (0.1 * np.mean(bins_remain_cap)) # less than 10% average remaining capacity
    priorities[very_little_space] -= 0.5
    
    # If no bin can fit, assign priorities based on how close they are to fitting (least wasted space if we break constraint)
    if not np.any(can_fit):
        priorities = -np.abs(bins_remain_cap - item) # minimize abs diff

    return priorities
```
