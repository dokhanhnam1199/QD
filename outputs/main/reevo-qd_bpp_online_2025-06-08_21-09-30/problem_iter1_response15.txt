```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Feasibility - prioritize bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # Rule 2: Remaining capacity - prioritize bins with smallest remaining capacity *after* placing the item.
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[~feasible_bins] = np.inf  # Penalize infeasible bins heavily

    # Inverse because we want to prioritize smaller remaining capacity
    priorities[feasible_bins] += 1 / (1e-6 + remaining_after_placement[feasible_bins])

    # Rule 3: Fill level - Prioritize bins that are already somewhat full to avoid many almost-empty bins.
    fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Assuming all bins have the same capacity
    priorities += fill_levels

    # Rule 4: Avoidance of perfect fit. Add small penalty if bin is a perfect fit.
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Account for potential floating-point inaccuracies
    priorities[perfect_fit] -= 0.1

    return priorities
```
