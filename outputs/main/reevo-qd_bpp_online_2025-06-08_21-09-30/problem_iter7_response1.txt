```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred (First Fit Decreasing principle - tries to fill bins). Avoid fragmentation.
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item

        # 3. Best Fit score: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon and damping
        best_fit_score = np.exp(-5 * remaining_cap_after_insertion / bins_remain_cap.max())
        priorities[feasible_bins_indices] = best_fit_score * 0.3  # Reduced weight of best fit

        # 4. Sweet spot bonus: Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.
        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max()  # Normalize

        sweet_spot_lower = 0.25
        sweet_spot_upper = 0.6  # Adjusted sweet spot

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            0.7,  # Slightly reduced bonus
            0.0
        )

        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 5. First Fit tiebreaker: Bins that appear earlier in the array have a slight advantage. Decreased Weight
        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.003

        # 6. Fragmentation penalty: Penalize bins where the remaining capacity will fall into a small-but-not-tiny range, creating fragmentation
        fragmentation_threshold_lower = 0.04
        fragmentation_threshold_upper = 0.16  # Adjusted fragmentation range

        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.5,  # Increased penalty
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 7. Very full bin penalty: avoid creating almost-full bins. Increased penalty.
        almost_full_threshold = 0.86  # Adjusted threshold

        almost_full_penalty = np.where(
            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,
            -0.8,  # Increased penalty
            0.0
        )

        priorities[feasible_bins_indices] += almost_full_penalty

        # 8. Adaptive Weight Adjustment: Dynamically adjust best fit score based on capacity distribution
        capacity_std = np.std(bins_remain_cap)
        best_fit_weight_adjustment = 1 + 0.2 * (capacity_std / bins_remain_cap.max())  # Increase weight if capacity varies a lot
        priorities[feasible_bins_indices] *= best_fit_weight_adjustment

    return priorities
```
