```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:

        # 2. Best Fit component: Smaller remaining capacity is preferred.
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item
        best_fit_priority = 1.0 / (remaining_cap_after_insertion + 1e-9)

        priorities[feasible_bins_indices] += best_fit_priority
        
        # 3. Sweet Spot Filling: Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.
        fill_ratios = remaining_cap_after_insertion / bins_remain_cap.max() # Normalize using max capacity

        sweet_spot_lower = 0.2
        sweet_spot_upper = 0.5

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            1.0,  # bonus
            0.0
        )

        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 4. First Fit Tiebreaker: Bins appearing earlier get slight advantage.
        index_bonus = (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.1
        priorities[feasible_bins_indices] += index_bonus

    return priorities
```
