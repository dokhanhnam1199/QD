```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Make infeasible bins have very low priority.

    # 2. Remaining capacity after packing: Prefer bins with less remaining capacity
    #    after packing the item (First-Fit Decreasing inspired). But only if feasible.
    remaining_capacity_after_packing = bins_remain_cap - item
    remaining_capacity_after_packing[~feasible_bins] = np.inf #ignore infeasible bins
    priorities[feasible_bins] = -remaining_capacity_after_packing[feasible_bins] #negate remaining capacity

    # 3. Bin utilization: Prioritize bins with higher utilization.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalize against max bin size (might need to be passed in as well)
    priorities[feasible_bins] += utilization[feasible_bins] # Add utilitzation score, for tie breaking

    # 4. Bonus for bins nearly full (avoid fragmentation)
    nearly_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[nearly_full & feasible_bins] += 2

    return priorities
```
