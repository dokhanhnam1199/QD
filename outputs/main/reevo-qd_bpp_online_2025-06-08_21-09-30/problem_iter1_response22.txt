```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give zero priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf  # Or a very large negative number
    
    # 2. Remaining Capacity:  Prioritize bins that will have the least remaining space AFTER placing the item, but only if they can hold it
    valid_bins = bins_remain_cap >= item
    remaining_after_placement = bins_remain_cap[valid_bins] - item
    
    #Lower remaining space -> higher priority (inversely proportional). Avoid division by zero.
    priorities[valid_bins] = 1.0 / (remaining_after_placement + 0.00001) 
    
    #3. Balance usage: Slightly prefer bins that are already somewhat full
    priorities += (1 - bins_remain_cap / bins_remain_cap.max()) * 0.1 # avoid max() == 0. could precompute max for bins
    
    
    # 4. Smallest room: very slight increase
    priorities[valid_bins] +=  (1/bins_remain_cap[valid_bins])*0.01
    
    return priorities
```
