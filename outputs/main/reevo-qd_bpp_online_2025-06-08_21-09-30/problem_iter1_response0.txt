```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Disqualify bins that are too small
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Very low priority to exclude them
    
    # 2. Remaining capacity bonus: Prefer bins with capacity close to item size
    # Smaller waste is preferred. Give bins closer to the item size a higher score.
    waste = bins_remain_cap - item
    
    # Avoid bins that will be too empty after placing item in bins
    large_waste_mask = waste > np.mean(waste[waste > 0]) if np.any(waste > 0) else np.zeros_like(waste, dtype=bool)
    priorities[large_waste_mask] -= 1 # Punish bins with large waste

    valid_mask = ~infeasible_mask
    if np.any(valid_mask):
        priorities[valid_mask] += np.exp(-np.abs(waste[valid_mask]) / np.mean(bins_remain_cap[valid_mask])) # Prioritize low absolute waste size
    

    # 3. Avoid bins with small capacity to avoid over filling it
    small_capacity_mask = (bins_remain_cap > item) & (bins_remain_cap < item * 2)
    priorities[small_capacity_mask] -= 0.5  # Slight penalty

    return priorities
```
