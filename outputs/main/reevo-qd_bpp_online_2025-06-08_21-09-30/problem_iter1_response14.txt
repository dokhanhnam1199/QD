```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Among bins that can fit, prioritize those with smaller remaining capacity after packing the item (First Fit Decreasing variant)
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_after_fit + 0.00001) # Avoid division by zero
    
    # Give bins that are close to full a boost if item fits to try to completely fill
    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)  # Normalize by max capacity
    close_to_full = (fullness > 0.75) & can_fit #tune parameter 0.75
    priorities[close_to_full] += 2

    # Negative priority to bins that can't fit
    priorities[~can_fit] = -1

    return priorities
```
