```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit Decreasing (FFD) inspired priority: prioritize bins where the item fits best (smallest waste).
    # But avoid bins where the item almost fills the bin completely (potential fragmentation)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        # Prefer smaller waste, but avoid bins where waste is very close to 0
        priorities[valid_bins] = np.exp(-waste) - np.exp(-0.1) if np.any(np.exp(-waste) - np.exp(-0.1) > 0) else np.exp(-waste)
        # Scale priority to encourage usage of partially filled bins
        priorities[valid_bins] *= (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))**0.5 # penalize large bins

    # Give a small priority boost to almost full bins.
    almost_full = (bins_remain_cap < item + 0.1) & (bins_remain_cap > item) # allows for a small tolerance of 0.1
    priorities[almost_full] = 0.001 # boost very small

    return priorities
```
