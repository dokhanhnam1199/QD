```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        # Normalize remaining capacities for consistent calculations
        normalized_bins_remain_cap = bins_remain_cap / bins_remain_cap.max()
        normalized_item = item / bins_remain_cap.max()
        normalized_remaining_cap_after_insertion = normalized_bins_remain_cap[feasible_bins_indices] - normalized_item


        # 2. Sweet spot bonus: Prioritize bins where a good portion of the bin is filled.
        sweet_spot_lower = 0.3
        sweet_spot_upper = 0.7

        sweet_spot_bonus = np.where(
            (normalized_remaining_cap_after_insertion >= sweet_spot_lower) & (normalized_remaining_cap_after_insertion <= sweet_spot_upper),
            0.8,  # Increased sweet spot reward
            0.0
        )
        priorities[feasible_bins_indices] += sweet_spot_bonus


        # 3. Fragmentation penalty: Discourage bins where the remaining capacity will lead to fragmentation.
        fragmentation_threshold_lower = 0.05
        fragmentation_threshold_upper = 0.2

        fragmentation_penalty = np.where(
            (normalized_remaining_cap_after_insertion >= fragmentation_threshold_lower) & (normalized_remaining_cap_after_insertion <= fragmentation_threshold_upper),
            -0.6,  # Adjusted penalty
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 4. Almost full bin penalty: Avoid creating bins that are nearly full.
        almost_full_threshold = 0.9

        almost_full_penalty = np.where(
            normalized_bins_remain_cap[feasible_bins_indices] > almost_full_threshold,
            -0.8,  # Adjusted penalty
            0.0
        )
        priorities[feasible_bins_indices] += almost_full_penalty

        # 5. Best Fit score with Reduced Influence: prioritize bins where the remaining capacity is close to zero.
        best_fit_score = 1.0 / (normalized_remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] += best_fit_score * 0.1  # Further reduced influence

        # 6. First Fit tiebreaker: Slightly favor bins that appear earlier. Consistent and predictable.

        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.0005  # Further Reduced first fit influence


        # 7. Dynamic weight adjustment based on bin capacity distribution.
        bin_capacity_std = np.std(normalized_bins_remain_cap)
        # Adaptive threshold for fragmentation penalty adjustment
        std_threshold = 0.15

        if bin_capacity_std > std_threshold:
              adjustment_factor = 0.5 * (1 - np.tanh(5 * (bin_capacity_std - std_threshold))) # Smooth decay
              priorities[feasible_bins_indices] += adjustment_factor * (fragmentation_penalty + almost_full_penalty)  # Adaptive penalty reduction.

        # 8. Encourage balancing bin utilization
        mean_utilization = np.mean(normalized_bins_remain_cap)
        utilization_diff = np.abs(normalized_remaining_cap_after_insertion - mean_utilization)
        balance_bonus = -0.08 * utilization_diff # Reduced influence
        priorities[feasible_bins_indices] += balance_bonus
    return priorities
```
