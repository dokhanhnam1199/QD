```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where item fits with minimal wasted space (First Fit Decreasing like)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (waste + 1e-9)  # Avoid division by zero, and higher priority for smaller waste
    else:
        # Heuristic 2: If item doesn't fit, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / (item + 1e-9) # So, smaller item sizes are preferred for larger available capacities. Avoid division by zero by adding a small number.

    return priorities
```
