```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities  # No feasible bins, all priorities remain 0

    # 2. Remaining Capacity: Prioritize bins with tighter fit (minimize wasted space)
    wasted_space = bins_remain_cap - item
    priorities[feasible_bins] = -wasted_space[feasible_bins]  # Smaller waste = higher priority

    # 3.  Fullness Bonus: Add a small bonus to bins that will become nearly full after packing.
    almost_full_threshold = 0.1  # Define "almost full" (e.g., remaining capacity < 10% of bin size after packing).  Assuming bin size is implicitly 1.
    almost_full_bins = (wasted_space[feasible_bins] <= almost_full_threshold)
    priorities[feasible_bins][almost_full_bins] += 100  # Significant bonus to promote filling

    # 4. Avoidance of tiny fragments (anti-fragmentation)
    tiny_fragment_threshold = 0.2 #remaining capicity after adding item
    anti_fragment_penalty = -10
    tiny_fragment_bins = (wasted_space[feasible_bins] > 0) & (wasted_space[feasible_bins] <= tiny_fragment_threshold)
    priorities[feasible_bins][tiny_fragment_bins] += anti_fragment_penalty
    

    return priorities
```
