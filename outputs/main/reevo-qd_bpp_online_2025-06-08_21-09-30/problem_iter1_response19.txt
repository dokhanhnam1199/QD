```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins where the item fits
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0
    
    # Heuristic 2: Prefer bins with smallest remaining capacity that can still fit the item (Maximize fill percentage)
    
    if np.any(fit_mask):
        remaining_capacity_if_placed = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] += (bins_remain_cap[fit_mask] - remaining_capacity_if_placed) / bins_remain_cap[fit_mask] #item / bins_remain_cap[fit_mask]
        #priorities[fit_mask] += np.max(bins_remain_cap[fit_mask]) - bins_remain_cap[fit_mask]
    
    # Heuristic 3: Penalize bins where adding the item will result in very little space remaining
    nearly_full_mask = (bins_remain_cap > item) & (bins_remain_cap - item < 0.1)
    priorities[nearly_full_mask] -= 0.5 # Small penalty, not always a bad idea

    # Heuristic 4: if no bin fits, give some low priority to the fuller bins
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] += bins_remain_cap[no_fit_mask] / np.max(bins_remain_cap) / 100 # very small amount

    return priorities
```
