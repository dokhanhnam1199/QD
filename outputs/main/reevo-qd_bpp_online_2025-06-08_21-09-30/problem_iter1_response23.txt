```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing-like behavior: Prefer bins where the item fits best
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        # Calculate wasted space if item is placed in the bin
        wasted_space = bins_remain_cap[fit_mask] - item
        
        # Give higher priority to bins with less wasted space
        priorities[fit_mask] = 1 / (wasted_space + 1e-9)  # Adding a small value to avoid division by zero

        # Prioritize bins that are almost full after adding the item.
        fullness = 1 - wasted_space / bins_remain_cap[fit_mask]
        priorities[fit_mask] += fullness * 5 # Scale the fullness priority

    # Penalize bins where the item doesn't fit (consider but discourage)
    else:
        priorities = (bins_remain_cap / item) * 0.1  # Give a very low priority for not-fitting bins
    
    return priorities
```
