```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        # 2. Remaining capacity after insertion: Smaller remaining capacity is preferred (First Fit Decreasing principle).

        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item

        # 3. Best Fit score: prioritize bins where the remaining capacity is close to zero. Reduced influence
        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] += best_fit_score * 0.1

        # 4. Sweet spot bonus: Prioritize bins where a good portion of the bin is filled. Increased weight and refined range.
        fill_ratios = remaining_cap_after_insertion / bins_remain_cap.max()

        sweet_spot_lower = 0.4
        sweet_spot_upper = 0.6

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            1.0,
            0.0
        )
        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 5. First Fit tiebreaker: Slightly favor bins that appear earlier. Consistent and predictable. Reduced further
        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.0005

        # 6. Fragmentation penalty: Discourage bins where the remaining capacity will lead to fragmentation. Refined threshold
        fragmentation_threshold_lower = 0.05
        fragmentation_threshold_upper = 0.15

        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.65,  # Increased penalty
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 7. Almost full bin penalty: Avoid creating bins that are nearly full.
        almost_full_threshold = 0.92

        almost_full_penalty = np.where(
            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,
            -0.8,  #Increased penalty
            0.0
        )
        priorities[feasible_bins_indices] += almost_full_penalty

        # 8. Dynamic weight adjustment: Adjust weights based on bin capacity distribution.
        bin_capacity_std = np.std(bins_remain_cap)

        # If the bin capacity is high and has a high standard deviation, reduce the fragmentation penalty and almost full bin penalty
        if bin_capacity_std > 0.12 * bins_remain_cap.max():
            priorities[feasible_bins_indices] += fragmentation_penalty * 0.02
            priorities[feasible_bins_indices] += almost_full_penalty * 0.02

        # 9. Encourage balancing bin utilization
        mean_utilization = np.mean(bins_remain_cap) / bins_remain_cap.max()
        utilization_diff = np.abs(fill_ratios - mean_utilization)
        balance_bonus = -0.12 * utilization_diff
        priorities[feasible_bins_indices] += balance_bonus

        #10. Prioritize slightly filled bins
        slightly_filled_threshold_lower = 0.85
        slightly_filled_threshold_upper = 0.90

        slightly_filled_penalty = np.where(
            (bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() >= slightly_filled_threshold_lower) & (bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() <= slightly_filled_threshold_upper),
            -0.50,  #Slightly increased penalty
            0.0
        )
        priorities[feasible_bins_indices] += slightly_filled_penalty


    return priorities
```
