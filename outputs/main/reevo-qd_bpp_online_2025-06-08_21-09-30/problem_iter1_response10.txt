```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that are too small
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Very low priority for infeasible bins

    # 2. Best Fit: Prefer bins that can fit the item with minimal waste
    waste = bins_remain_cap - item
    # Only consider waste for feasible bins
    waste[infeasible_mask] = np.inf # Ignore waste if bin is already marked infeasible

    priorities = -waste # smaller waste gives larger priority

    # 3. Bonus for almost full bins to try complete them
    almost_full_threshold = 0.1  # e.g., if remaining capacity is < 10% bin size
    almost_full_mask = (bins_remain_cap > item) & (waste / bins_remain_cap < almost_full_threshold)

    priorities[almost_full_mask] += 1  # small additive bonus for almost full bins

    #4. Prioritize larger remaining capacities to pack bigger items first to allow filling smaller items later
    priorities += 0.1 * (bins_remain_cap / np.max(bins_remain_cap)) # Add scaled remaining capacity as priority (scaled down)


    return priorities
```
