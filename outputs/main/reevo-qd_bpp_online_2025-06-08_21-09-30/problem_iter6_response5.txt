```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority
    
    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:

        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred (First Fit Decreasing principle - tries to fill bins). Avoid fragmentation.
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item
        
        # 3. Combination of (2) and Best Fit idea: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon
        priorities[feasible_bins_indices] = 1.0 / (remaining_cap_after_insertion + 1e-9)

        # 4. Modified Best Fit Heuristic with a 'sweet spot' range.  Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.

        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max() # Normalize

        sweet_spot_lower = 0.2
        sweet_spot_upper = 0.5

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            1.0, # bonus
            0.0
        )

        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 5. Break ties with First Fit: Bins that appear earlier in the array have a slight advantage to maintain a level of predictability and potentially reduce unnecessary bin usage overall. We add an index dependent bonus that scales down to 0 to ensure its negligible against larger priority differentials already calculated.
        index_bonus = (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.1
        priorities[feasible_bins_indices] += index_bonus

        # 6. Penalize almost full bins: if a bin is almost full before insertion, penalize it. Avoid creating many almost-full bins
        almost_full_threshold = 0.9
        almost_full_bins = bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold
        priorities[feasible_bins_indices[almost_full_bins]] -= 0.5

        # 7. Further penalize near-full bins.  Adjust penalty based on how near-full they are.
        near_full_threshold = 0.75
        near_full_bins = (bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > near_full_threshold) & (~almost_full_bins)
        near_full_ratios = bins_remain_cap[feasible_bins_indices[near_full_bins]] / bins_remain_cap.max()
        penalty = (near_full_ratios - near_full_threshold) / (almost_full_threshold - near_full_threshold) * 0.25 # scale penalty from 0 to 0.25
        priorities[feasible_bins_indices[near_full_bins]] -= penalty
    
    return priorities
```
