```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority if the item fits almost perfectly
    fit_threshold = 0.95
    perfect_fit = (bins_remain_cap - item) / item
    priorities += np.where((bins_remain_cap >= item) & (perfect_fit >= 0) & (perfect_fit <= (1-fit_threshold)/fit_threshold), 1000, 0)

    # Higher priority for bins where the item fits, to encourage filling existing bins.
    fits = bins_remain_cap >= item
    priorities += np.where(fits, 100, 0)
    
    #Prioritize bins with smallest amount of waste, encouraging better packing
    waste = bins_remain_cap - item
    priorities += np.where(fits, 10 / (waste + 0.0001), 0)  #Avoid division by zero and reverse magnitude of waste

    # Penalize bins that will have very little space left, to prevent fragmentation.  Only penalize where item can fit
    remaining_after_fit = bins_remain_cap - item
    small_space_threshold = 0.1
    priorities -= np.where((bins_remain_cap >= item) & (remaining_after_fit > 0) & (remaining_after_fit <= small_space_threshold * bins_remain_cap), 50, 0)

    #Return lowest value if item doesn't fit
    priorities += np.where(bins_remain_cap < item, -10000, 0)
    return priorities
```
