```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] = 1

    # Prioritize bins with minimal waste (First-Fit Decreasing inspired)
    priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    # Penalize bins that don't fit the item (to avoid extreme fragmentation early)
    priorities[~fit_mask] = -np.inf # Assign -inf priority so they are avoided unless unavoidable
    
    # Add a small bias towards bins with higher remaining capacity if it fits
    priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap) * 0.001
    return priorities
```
