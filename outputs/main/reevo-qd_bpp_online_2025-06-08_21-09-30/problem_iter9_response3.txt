```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        # Calculate remaining capacities and fill ratios for feasible bins
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item
        fill_ratios = remaining_cap_after_insertion / bins_remain_cap.max()

        # 2. Sweet Spot Reward
        sweet_spot_lower = 0.3
        sweet_spot_upper = 0.7
        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            0.8,  # Increased reward
            0.0
        )
        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 3. Fragmentation Penalty
        fragmentation_threshold_lower = 0.05
        fragmentation_threshold_upper = 0.2
        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.6,  # Increased penalty
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 4. Avoid Almost Full Bins
        almost_full_threshold = 0.9
        almost_full_penalty = np.where(
            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,
            -0.75, # Increased penalty
            0.0
        )
        priorities[feasible_bins_indices] += almost_full_penalty

        # 5. Reduce Reliance on Best-Fit/First-Fit
        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] += best_fit_score * 0.1 # Reduced influence

        first_fit_tiebreaker = (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.0005 # Further reduced
        priorities[feasible_bins_indices] += first_fit_tiebreaker

        # 6. Dynamic Weight Adjustment based on Bin Capacity Distribution
        bin_capacity_std = np.std(bins_remain_cap)
        std_threshold = 0.15 * bins_remain_cap.max()
        if bin_capacity_std > std_threshold:
            # Reduce fragmentation/almost full penalties if capacity is unevenly distributed
            priorities[feasible_bins_indices] += fragmentation_penalty * 0.05
            priorities[feasible_bins_indices] += almost_full_penalty * 0.05

        # 7. Encourage Balanced Bin Utilization
        mean_utilization = np.mean(bins_remain_cap) / bins_remain_cap.max()
        utilization_diff = np.abs(fill_ratios - mean_utilization)
        balance_bonus = -0.1 * utilization_diff
        priorities[feasible_bins_indices] += balance_bonus

        # 8. Capacity Based sweet spot adjustments
        capacity_ratio = item / bins_remain_cap.max()
        sweet_spot_adjustment_threshold = 0.2  # Items smaller than 20% max capacity

        if capacity_ratio < sweet_spot_adjustment_threshold:
            # Reduce sweet spot range to focus on more optimal packing for small items.
            sweet_spot_lower = 0.4
            sweet_spot_upper = 0.6
            sweet_spot_bonus = np.where(
                (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
                0.8,
                0.0
            )

            priorities[feasible_bins_indices] += sweet_spot_bonus

    return priorities
```
