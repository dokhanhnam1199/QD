```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        # Normalize remaining capacities for ratio-based calculations
        normalized_remain_cap = bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max()

        # 2. Best Fit component (scaled down)
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item
        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] = best_fit_score * 0.2  # Reduced best fit weight

        # 3. Sweet Spot Bonus
        sweet_spot_lower = 0.3
        sweet_spot_upper = 0.6
        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max()

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            0.7,  # Increased sweet spot bonus
            0.0
        )
        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 4. Fragmentation Penalty
        fragmentation_threshold_lower = 0.1
        fragmentation_threshold_upper = 0.25
        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.65,  # Stronger fragmentation penalty
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 5. Almost Full Penalty
        almost_full_threshold = 0.9
        almost_full_penalty = np.where(
            normalized_remain_cap > almost_full_threshold,
            -0.8,  # Stronger almost full penalty
            0.0
        )
        priorities[feasible_bins_indices] += almost_full_penalty
        
        # 6. First Fit Tiebreaker (slight preference)
        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.005

    return priorities
```
