```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing heuristic inspiration: Prefer bins that can accommodate the item with minimal waste.
    # Give a high priority to bins where the item fits well (but not perfectly).
    # Avoid bins that are too full or have too much space left.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        # Prioritize smaller waste, but not zero waste (to encourage bin reuse).
        priorities[fit_mask] = 1.0 / (waste + 0.0001)  # Add a small constant to avoid division by zero
        # Slightly boost bins where the item fills more than half the remaining capacity
        fill_ratio = item / bins_remain_cap[fit_mask]
        priorities[fit_mask] += (fill_ratio > 0.5) * 0.5  # Give extra priority if filled more than half way

    # Penalize bins where the item doesn't fit strongly
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1000  # A large negative value
    
    # Add a small random value to break ties and encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
