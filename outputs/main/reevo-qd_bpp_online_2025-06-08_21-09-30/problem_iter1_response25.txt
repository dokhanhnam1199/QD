```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins): #If no bin can fit
        return priorities  # All zero priorities if no bin can fit

    # 2. Remaining capacity after placing item (higher is better, but only if feasible)
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = -1  # Penalize infeasible bins (important for sorting)
    
    # 3. Fill ratio (higher is better, prioritize bins which are filled)
    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap
    fill_ratio[~feasible_bins] = 0

    # Combine the remaining capacity and fill ratio using a weighted sum
    priorities[feasible_bins] = 0.7 * remaining_capacity[feasible_bins] + 0.3 * fill_ratio[feasible_bins] #Emphasize remaining capacity.

    #Add a tiny random number to break ties: important
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 1e-6
    return priorities
```
