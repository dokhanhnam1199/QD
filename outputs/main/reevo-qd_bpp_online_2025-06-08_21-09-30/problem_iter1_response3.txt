```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very large remaining capacity should be penalized since that suggest newly opened bin.
    # Large remaining capacity after adding the item should also be penalized.
    
    # 1. Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give these bins a base priority of 1
    
    # 2. Give higher priority to bins with less remaining capacity *after* adding the item.
    # This implements a kind of "almost full" strategy.  Avoid bins with tons of space left.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~can_fit] = np.inf # Give bins that *cannot* fit large remaining

    priorities[can_fit] += 1.0 / (1e-6 + remaining_after_fit[can_fit])  #avoid zero div

    #3. Moderate remaining capacity is favorable: Avoid extreme large capacity of the bins. Penalize both small and extremely large remaining capacities
    priorities -= np.abs(bins_remain_cap - np.mean(bins_remain_cap)) / np.std(bins_remain_cap) if np.std(bins_remain_cap) > 0 else 0

    return priorities
```
