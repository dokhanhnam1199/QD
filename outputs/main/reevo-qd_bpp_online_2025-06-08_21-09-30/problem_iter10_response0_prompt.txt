{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Eliminate bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Very low priority\n\n    # Only calculate priority for bins that *can* hold the item\n    feasible_bins_indices = np.where(~infeasible_bins)[0]\n\n    if feasible_bins_indices.size > 0:\n        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred (First Fit Decreasing principle - tries to fill bins). Avoid fragmentation.\n        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item\n\n        # 3. Best Fit score: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon\n        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)\n        priorities[feasible_bins_indices] = best_fit_score * 0.4  # Further Reduced weight of best fit\n\n        # 4. Sweet spot bonus: Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.\n        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max()  # Normalize\n\n        sweet_spot_lower = 0.3\n        sweet_spot_upper = 0.65  # Adjusted sweet spot\n\n        sweet_spot_bonus = np.where(\n            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),\n            0.75,  # Slightly reduced bonus\n            0.0\n        )\n\n        priorities[feasible_bins_indices] += sweet_spot_bonus\n\n        # 5. First Fit tiebreaker: Bins that appear earlier in the array have a slight advantage.\n        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.005  # Further Reduced weight\n\n\n\n        # 6. Fragmentation penalty: Penalize bins where the remaining capacity will fall into a small-but-not-tiny range, creating fragmentation\n\n        fragmentation_threshold_lower = 0.05\n        fragmentation_threshold_upper = 0.18 # Adjusted fragmentation range\n\n        fragmentation_penalty = np.where(\n            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),\n            -0.6,  # Increased penalty\n            0.0\n        )\n        priorities[feasible_bins_indices] += fragmentation_penalty\n\n\n        # 7. Very full bin penalty: avoid creating almost-full bins\n        almost_full_threshold = 0.88  # Adjusted threshold\n\n        almost_full_penalty = np.where(\n            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,\n            -0.75,  # Increased penalty\n            0.0\n        )\n\n        priorities[feasible_bins_indices] += almost_full_penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Eliminate bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Only calculate priority for bins that *can* hold the item\n    feasible_bins_indices = np.where(~infeasible_bins)[0]\n\n    if feasible_bins_indices.size > 0:\n        # 2. Remaining capacity after insertion: Smaller remaining capacity is preferred (First Fit Decreasing principle).\n\n        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item\n\n        # 3. Best Fit score: prioritize bins where the remaining capacity is close to zero.\n        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)\n        priorities[feasible_bins_indices] += best_fit_score * 0.15  # Further reduced influence\n\n        # 4. Sweet spot bonus: Prioritize bins where a good portion of the bin is filled.\n        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max()\n\n        sweet_spot_lower = 0.3\n        sweet_spot_upper = 0.7\n\n        sweet_spot_bonus = np.where(\n            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),\n            0.7,\n            0.0\n        )\n        priorities[feasible_bins_indices] += sweet_spot_bonus\n\n        # 5. First Fit tiebreaker: Slightly favor bins that appear earlier. Consistent and predictable.\n        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.001  # Further Reduced first fit influence\n\n        # 6. Fragmentation penalty: Discourage bins where the remaining capacity will lead to fragmentation.\n        fragmentation_threshold_lower = 0.05\n        fragmentation_threshold_upper = 0.2\n\n        fragmentation_penalty = np.where(\n            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),\n            -0.55,  # Slightly adjusted penalty\n            0.0\n        )\n        priorities[feasible_bins_indices] += fragmentation_penalty\n\n        # 7. Almost full bin penalty: Avoid creating bins that are nearly full.\n        almost_full_threshold = 0.9\n\n        almost_full_penalty = np.where(\n            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,\n            -0.7, # Slightly adjusted penalty\n            0.0\n        )\n        priorities[feasible_bins_indices] += almost_full_penalty\n\n        # 8. Dynamic weight adjustment: Adjust weights based on bin capacity distribution.\n        bin_capacity_std = np.std(bins_remain_cap)\n\n        # If the bin capacity is high and has a high standard deviation, reduce the fragmentation penalty and almost full bin penalty\n        if bin_capacity_std > 0.15 * bins_remain_cap.max():\n            priorities[feasible_bins_indices] += fragmentation_penalty * 0.05\n            priorities[feasible_bins_indices] += almost_full_penalty * 0.05\n\n        # 9. Encourage balancing bin utilization\n        mean_utilization = np.mean(bins_remain_cap) / bins_remain_cap.max()\n        utilization_diff = np.abs(fill_ratios - mean_utilization)\n        balance_bonus = -0.1 * utilization_diff\n        priorities[feasible_bins_indices] += balance_bonus\n\n    return priorities\n\n[Reflection]\nThe better code uses dynamic weight adjustment and encourages balanced bin utilization, improving performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}