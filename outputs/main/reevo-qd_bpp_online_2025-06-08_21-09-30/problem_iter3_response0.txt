```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:

        # 2. Best Fit: prioritize bins with smallest remaining capacity *after* insertion.
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item
        priorities[feasible_bins_indices] = -remaining_cap_after_insertion #Smaller is better

        # 3. Sweet Spot: Give a bonus to bins that, after insertion, are filled between 70% and 95%.
        fill_ratio_after_insertion = (bins_remain_cap[feasible_bins_indices] - item) / bins_remain_cap.max()
        sweet_spot_lower = 0.05
        sweet_spot_upper = 0.3
        sweet_spot_bonus = np.where((fill_ratio_after_insertion >= sweet_spot_lower) & (fill_ratio_after_insertion <= sweet_spot_upper), 1.0, 0.0)
        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 4. First Fit Tie Breaker:  Add small bonus based on bin index to favor earlier bins.
        index_bonus = (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.01
        priorities[feasible_bins_indices] += index_bonus

        # 5. Penalize almost full bins *before* insertion: slightly discourage use of bins with very little space *before* placing the item.
        almost_full_threshold = 0.95
        almost_full_penalty = np.where(bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold, -0.1, 0.0)
        priorities[feasible_bins_indices] += almost_full_penalty

        #6. Encourage full bins: reward bins that will be completely full after placing the item.
        full_bin_bonus = np.where(np.abs(remaining_cap_after_insertion) < 1e-6, 0.5, 0.0) # check equality with tolerance
        priorities[feasible_bins_indices] += full_bin_bonus

    return priorities
```
