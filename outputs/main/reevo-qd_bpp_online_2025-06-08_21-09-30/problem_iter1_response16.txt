```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First Fit Decreasing Heuristic Inspired Priority: Prioritize bins that can fit the item reasonably well.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # Remaining capacity ratio

    # Avoid Fragmentation: Penalize bins that would leave very small remaining capacity.
    fragmentation_threshold = 0.1 #tuneable parameter related to bin size
    small_mask = (bins_remain_cap - item) < fragmentation_threshold
    priorities[small_mask] = -1.0 # Negative priority if it leads to fragmentation

    #Prioritize almost full bin to fully utilize it.
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap > item) & (item / bins_remain_cap > almost_full_threshold)
    priorities[almost_full_mask] = 2.0 # Higher positive priority

    # Prioritize bins that are closer to the item size without causing fragmentation.
    reasonable_fit_mask = (bins_remain_cap >= item) & ~small_mask
    priorities[reasonable_fit_mask] = 1.0 - np.abs(bins_remain_cap[reasonable_fit_mask] - item) # Higher priority if bin capacity is close to item size
    return priorities
```
