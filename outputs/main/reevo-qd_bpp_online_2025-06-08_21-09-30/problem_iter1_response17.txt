```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Disqualify bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority if infeasible

    # 2. Prioritize bins with remaining capacity closest to the item size (First-Fit-Decreasing inspired).
    # Higher priority for bins that the item almost fills. Avoids leaving too much wasted space.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        priorities[feasible_bins] = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = -np.abs(priorities[feasible_bins]) # smaller abs differences get higher priority
    
    # 3. Give slight preference to bins that are more full to begin with (Modified Best-Fit).
    # This favors bins with higher utilization.
    priorities += bins_remain_cap / np.max(bins_remain_cap, initial=0.00001) # Avoid division by zero
    

    return priorities
```
