```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing-like heuristic: Prioritize bins with enough space,
    # but avoid bins that are too large to encourage packing tightly.

    # Give a high priority to bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0

    # Penalize bins that have excessive remaining capacity after placing the item
    # (to encourage tighter packing). The penalty is proportional to the *squared*
    # excess capacity to disproportionately discourage large gaps. Only compute if at least one bin fits
    if np.any(fit_mask):
        excess_capacity = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] -= 0.1 * (excess_capacity / np.max(bins_remain_cap))**2

    # Optionally, give preference to bins that are already partially full. This can encourage filling up partially-filled bins before opening new ones
    # which helps reduce the total number of bins used.
    priorities += 0.05 * (1 - bins_remain_cap / np.max(bins_remain_cap))  # Bias towards already partially full bins


    # If no bin fits, penalize less empty bins. If all bins are nearly empty, the difference would be minuscule so should not cause issue
    if not np.any(fit_mask):
       priorities = 1.0 - bins_remain_cap / np.max(bins_remain_cap)
    

    return priorities
```
