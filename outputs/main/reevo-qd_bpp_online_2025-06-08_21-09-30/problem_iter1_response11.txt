```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins where the item fits snugly
    fit_metric = bins_remain_cap - item
    priorities[fit_metric >= 0] = np.exp(-np.abs(fit_metric[fit_metric >= 0]))

    # Penalize bins where the item doesn't fit
    priorities[fit_metric < 0] = -np.inf

    # Boost bins that are nearly full (reduces fragmentation)
    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)  # Assuming bins are of same size
    priorities += 0.1 * fullness

    return priorities
```
