```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Among the bins that can fit, prioritize those with smaller remaining capacity
    # after placing the item (First Fit Decreasing variant)
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_after_fit + 1e-9)  # Avoid division by zero

    # Give slight penalty to bins which if the item goes into makes bins almost empty
    almost_empty = (bins_remain_cap - item) < (0.1 * np.max(bins_remain_cap)) # remaining cap less than 10% of max
    priorities[almost_empty & can_fit] -= 0.5 #slight penalty, only if fits

    # Give a penalty to bins that cannot fit the item, proportional to how much
    # the item exceeds the remaining capacity. This encourages filling bins as much as possible
    # before opening new ones if it is inevitable that a bin has space left.
    cannot_fit = ~can_fit
    excess = item - bins_remain_cap[cannot_fit]
    priorities[cannot_fit] -= excess  # More negative if exceeds more

    return priorities
```
