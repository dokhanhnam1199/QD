```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:

        # 2. Remaining capacity after insertion:  Smaller remaining capacity is preferred (First Fit Decreasing principle - tries to fill bins). Avoid fragmentation.
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item

        # 3. Best Fit score: bins with residual cap near to 0 get a high priority. Use reciprocal, with small epsilon
        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] = best_fit_score * 0.6 # reduced weight of best fit

        # 4. Sweet spot bonus: Prioritize bins where, after placing the item, a reasonable portion (e.g., between 20-50% ) of the bin is filled.

        max_bin_cap = bins_remain_cap.max()
        fill_ratios = (bins_remain_cap[feasible_bins_indices] - item) / max_bin_cap  # Normalize to max bin capacity

        sweet_spot_lower = 0.3
        sweet_spot_upper = 0.6

        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            0.8,  # Adjusted bonus weight
            0.0
        )

        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 5. First Fit tiebreaker: Bins that appear earlier in the array have a slight advantage.

        priorities[feasible_bins_indices] += (bins_remain_cap.size - feasible_bins_indices) / bins_remain_cap.size * 0.02 # Reduced weight of tiebreaker

        # 6. Fragmentation penalty: Penalize bins where the remaining capacity will fall into a small-but-not-tiny range, creating fragmentation

        fragmentation_threshold_lower = 0.07
        fragmentation_threshold_upper = 0.17

        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.7,  # Increased penalty weight
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty


        # 7. Very full bin penalty: avoid creating almost-full bins. Stronger penalty and only applied when bin *is* close to being full *before* insertion

        almost_full_threshold = 0.85

        almost_full_penalty = np.where(
            bins_remain_cap[feasible_bins_indices] / max_bin_cap > almost_full_threshold,
            -0.9,  # Adjusted weight and stronger penalty
            0.0
        )

        priorities[feasible_bins_indices] += almost_full_penalty

        # Adaptive Sweet Spot: Adjust sweet spot based on average fill ratio

        average_fill = np.mean(bins_remain_cap[feasible_bins_indices] / max_bin_cap)

        sweet_spot_lower = max(0.1, average_fill - 0.2) # min sweet spot lower bound is 0.1
        sweet_spot_upper = min(0.7, average_fill + 0.2) # max sweet spot upper bound is 0.7

        adaptive_sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            0.5, # A moderate bonus
            0.0
        )
        priorities[feasible_bins_indices] += adaptive_sweet_spot_bonus

    return priorities
```
