```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Only calculate priority for bins that *can* hold the item
    feasible_bins_indices = np.where(~infeasible_bins)[0]

    if feasible_bins_indices.size > 0:
        remaining_cap_after_insertion = bins_remain_cap[feasible_bins_indices] - item
        fill_ratios = remaining_cap_after_insertion / bins_remain_cap.max()

        # 2. Sweet spot bonus: Prioritize bins where a good portion of the bin is filled.
        sweet_spot_lower = 0.3
        sweet_spot_upper = 0.7
        sweet_spot_bonus = np.where(
            (fill_ratios >= sweet_spot_lower) & (fill_ratios <= sweet_spot_upper),
            1.0,
            0.0
        )
        priorities[feasible_bins_indices] += sweet_spot_bonus

        # 3. Fragmentation penalty: Discourage bins where the remaining capacity will lead to fragmentation.
        fragmentation_threshold_lower = 0.05
        fragmentation_threshold_upper = 0.2
        fragmentation_penalty = np.where(
            (fill_ratios >= fragmentation_threshold_lower) & (fill_ratios <= fragmentation_threshold_upper),
            -0.8,
            0.0
        )
        priorities[feasible_bins_indices] += fragmentation_penalty

        # 4. Almost full bin penalty: Avoid creating bins that are nearly full.
        almost_full_threshold = 0.9
        almost_full_penalty = np.where(
            bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max() > almost_full_threshold,
            -1.0,
            0.0
        )
        priorities[feasible_bins_indices] += almost_full_penalty

        # 5. Dynamic weight adjustment: Adjust weights based on bin capacity distribution.
        bin_capacity_std = np.std(bins_remain_cap)
        capacity_range = bins_remain_cap.max() - bins_remain_cap.min()

        # Adjust fragmentation and almost_full penalties based on capacity distribution
        if capacity_range > 0.2 * bins_remain_cap.max():
            priorities[feasible_bins_indices] += fragmentation_penalty * 0.1
            priorities[feasible_bins_indices] += almost_full_penalty * 0.1

        # 6. Encourage balancing bin utilization
        mean_utilization = np.mean(bins_remain_cap) / bins_remain_cap.max()
        utilization_diff = np.abs(fill_ratios - mean_utilization)
        balance_bonus = -0.2 * utilization_diff
        priorities[feasible_bins_indices] += balance_bonus

        # 7. Reduced reliance on Best-Fit
        best_fit_score = 1.0 / (remaining_cap_after_insertion + 1e-9)
        priorities[feasible_bins_indices] += best_fit_score * 0.02

        # 8. Reduced reliance on First Fit. Prioritize smaller index bins when priorities are equal to break ties.
        priorities[feasible_bins_indices] -= feasible_bins_indices * 0.00005

        # 9. Item Size Consideration: Give preference to bins whose remaining capacity is closest to item size.  Increased weight
        item_size_diff = np.abs(bins_remain_cap[feasible_bins_indices] - item)
        item_size_priority = -0.05 * item_size_diff / bins_remain_cap.max()
        priorities[feasible_bins_indices] += item_size_priority

        # 10. Capacity utilization preference
        current_utilization = bins_remain_cap[feasible_bins_indices] / bins_remain_cap.max()
        target_utilization = 0.8 # Target for bin fill level. Dynamically adjustable
        utilization_preference = -0.3 * np.abs(current_utilization - target_utilization)
        priorities[feasible_bins_indices] += utilization_preference
    return priorities
```
