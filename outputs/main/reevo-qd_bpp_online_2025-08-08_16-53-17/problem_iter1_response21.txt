```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Best Fit strategy: prioritize bins that have just enough space for the item.
    # A larger priority score means a better fit.
    # We want to find the bin where `bins_remain_cap - item` is minimized, but not negative.

    # Calculate the remaining capacity if the item is placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Create a mask for bins that can accommodate the item.
    can_fit_mask = potential_remaining_cap >= 0

    # Initialize priorities to a very low value (indicating it cannot fit).
    # Using -infinity would be ideal, but a very small negative number works.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # For bins that can fit the item, assign a priority score.
    # The score should be higher for bins with less remaining space AFTER adding the item.
    # This encourages using bins that are "almost full".
    # To achieve this, we can use the negative of the potential remaining capacity.
    # The bin with the smallest positive `potential_remaining_cap` will have the largest negative value
    # and thus the highest priority.
    priorities[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    # A small addition can be made to differentiate bins with the same remaining capacity.
    # For example, a bin that is exactly the right size gets a slightly higher priority.
    # This is a subtle refinement that might not be strictly necessary for Best Fit but can
    # be explored for finer tuning. Here, we'll keep it simple for the core Best Fit idea.
    # The negative value naturally prioritizes tighter fits.

    return priorities
```
