```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the item in the bin that has the largest remaining capacity,
    provided that the bin can accommodate the item. This strategy is often used in online bin packing
    to leave smaller gaps in other bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot accommodate the item receive a priority of -infinity.
        Bins that can accommodate the item receive a priority equal to their remaining capacity.
    """
    # Initialize priorities to negative infinity for all bins.
    # This ensures that bins that cannot fit the item will not be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that have enough remaining capacity to fit the item.
    # Use a boolean mask for efficient selection.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, set their priority to their remaining capacity.
    # The bin with the largest remaining capacity will have the highest priority.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
