```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    The Best Fit strategy aims to place the item into the bin that has the
    least remaining capacity after the item is placed, such that the item fits.
    This minimizes wasted space in the bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot accommodate the item will have a priority of 0.
        Among bins that can accommodate the item, higher priority is given to
        bins that result in less remaining capacity after placing the item.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item is placed in a bin
    # This is the 'fitness' or 'wasted space' after placement
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item

    # We want to minimize the remaining capacity after fit (Best Fit).
    # To translate minimization into a maximization priority score, we can
    # use the negative of the remaining capacity, or a score that is inversely
    # proportional to it. A common approach is to use something like:
    # priority = C - (remaining_capacity_after_fit) where C is a large constant.
    # A simpler approach that achieves the same ordering is to use the negative
    # of the remaining capacity if we want to *minimize* it.
    # Alternatively, we can assign a higher priority to smaller remaining capacities.
    # Let's use the negative of the remaining capacity as the priority score,
    # so the smallest positive remaining capacity (least waste) gets the highest score.

    # For bins that can fit the item, the priority is the negative of the
    # remaining capacity after the item is placed. A smaller positive
    # remaining capacity means a larger negative priority, which is good.
    # For example, if remaining capacities after fit are [1, 5, 2],
    # the negative values are [-1, -5, -2]. The highest priority would be -1.
    # This correctly prioritizes the bin with remaining capacity 1.

    priorities[can_fit_mask] = -remaining_capacities_after_fit

    return priorities
```
