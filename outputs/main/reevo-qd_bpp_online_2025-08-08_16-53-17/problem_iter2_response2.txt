```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined Best Fit strategy.

    This strategy prioritizes bins that can accommodate the item and, among those,
    favors bins that result in the smallest remaining capacity after packing.
    This aims for a tight fit.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority scores.
        Higher scores indicate higher priority. Bins that cannot fit the item
        are assigned a priority of -inf.
    """
    # Initialize priorities to negative infinity for all bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that have enough remaining capacity for the item.
    fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity *after* packing.
    # We want to prioritize bins that result in a smaller remaining capacity (tighter fit).
    # Therefore, the priority can be directly set to the negative of this remaining capacity.
    # A smaller positive remaining capacity (e.g., 0.1) becomes a larger negative value (-0.1),
    # thus receiving a higher priority.
    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_after_fit

    return priorities
```
