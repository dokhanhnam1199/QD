{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize tight fits with a tunable sigmoid, focusing on minimal residual space. For tie-breaking, explore varied exploration strategies beyond simple epsilon-greedy, and consider softmax for score normalization.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a refined Sigmoid Fit Score.\n\n    This heuristic aims to prioritize bins that offer the \"best fit\" for the item.\n    A \"best fit\" is defined as a bin where the remaining capacity is only slightly\n    larger than the item's size. This strategy tries to fill bins as much as possible\n    without leaving excessive empty space, thereby minimizing fragmentation.\n\n    The priority is calculated using a sigmoid function. The function is designed\n    to peak when the remaining capacity (`bins_remain_cap`) is precisely equal to\n    the item's size, and the priority decreases as the remaining capacity deviates\n    (either smaller or larger). However, bins where the item doesn't fit at all\n    are assigned a zero priority.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element is the remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as `bins_remain_cap`, containing the priority\n        score for each bin. Higher scores indicate a more desirable bin for the item.\n    \"\"\"\n\n    def sigmoid(x, steepness=10.0, center=0.0):\n        \"\"\"A custom sigmoid function that can be shifted and scaled.\"\"\"\n        return 1 / (1 + np.exp(-steepness * (x - center)))\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins where the item can fit.\n    # The condition is that the bin's remaining capacity must be greater than or equal to the item's size.\n    fits_mask = bins_remain_cap >= item\n\n    # For bins where the item fits, calculate the 'fit difference'.\n    # This is the excess capacity after placing the item.\n    # We want to prioritize bins where this difference is small and non-negative.\n    if np.any(fits_mask):\n        # Calculate the excess capacity for fitting bins.\n        excess_capacities = bins_remain_cap[fits_mask] - item\n\n        # The sigmoid function is used to map these excess capacities to priority scores.\n        # We want the highest priority (e.g., close to 1) when excess_capacity is minimal.\n        # A common formulation for \"good fit\" prioritizes `excess_capacity` close to 0.\n        # To achieve this with a sigmoid, we can use a function that decreases as `excess_capacity` increases.\n        # `sigmoid(k * (ideal_excess - actual_excess))` works well here.\n        # Let `ideal_excess` be 0.\n        # The argument becomes `steepness * (0 - excess_capacities)` which is `-steepness * excess_capacities`.\n        # This means scores will decrease from 0.5 as `excess_capacities` increases.\n        #\n        # To align with \"slightly larger\" being the peak priority (as per problem description interpretation),\n        # we can shift the sigmoid. Let's define the peak priority (score=0.5) at `ideal_gap` (a small positive value).\n        #\n        # The function `sigmoid(steepness * (ideal_gap - excess_capacities))` will have its midpoint at `excess_capacities = ideal_gap`.\n        # With `steepness=10.0` and `ideal_gap=0.05`, the peak priority of 0.5 occurs when `bins_remain_cap - item = 0.05`.\n        # Values of `excess_capacities` smaller than `ideal_gap` (but >= 0) will yield scores > 0.5.\n        # Values of `excess_capacities` larger than `ideal_gap` will yield scores < 0.5.\n\n        ideal_gap = 0.05  # Prefer bins with a small positive remaining capacity after fitting the item.\n        steepness = 10.0  # Controls how sharply the priority drops as excess capacity increases.\n\n        # Calculate the argument for the sigmoid function.\n        # We want the peak of the sigmoid (where the argument is 0) to align with our 'ideal_gap'.\n        # `argument = steepness * (ideal_gap - excess_capacities)`\n        argument_values = steepness * (ideal_gap - excess_capacities)\n\n        # Apply the sigmoid function to get the priority scores for fitting bins.\n        priorities[fits_mask] = sigmoid(argument_values, steepness=steepness, center=0.0)\n\n    # For bins where the item does not fit (fits_mask is False), the priority remains 0,\n    # ensuring they are not selected unless no fitting bins exist.\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}