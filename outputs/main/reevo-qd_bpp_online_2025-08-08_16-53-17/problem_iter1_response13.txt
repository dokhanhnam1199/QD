```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    The Almost Full Fit (AFF) strategy prioritizes bins that are "almost full"
    and can still accommodate the current item. This means it favors bins with
    a remaining capacity that is just enough to fit the item, but not so much
    that it leaves a large gap.

    The priority is calculated as:
    1. If a bin can fit the item (remaining_capacity >= item):
       The priority is the inverse of the remaining capacity after adding the item.
       This encourages using bins that will be left with very little space,
       making them "almost full".
    2. If a bin cannot fit the item (remaining_capacity < item):
       The priority is 0, as these bins are not considered for the current item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate priorities for bins that can fit the item
    # We want to pick bins that are "almost full" after placing the item.
    # A higher priority should be given to bins with less remaining capacity
    # *after* placing the item.
    # The remaining capacity after placing the item is bins_remain_cap - item.
    # The inverse of this value will give higher priority to smaller remaining capacities.
    # Adding a small epsilon to avoid division by zero if remaining_capacity - item is 0.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9)

    return priorities
```
