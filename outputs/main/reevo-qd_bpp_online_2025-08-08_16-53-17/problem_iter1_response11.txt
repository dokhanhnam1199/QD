```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy.

    The Best Fit strategy aims to place the item into the bin where it fits
    most snugly, leaving the smallest possible remaining capacity. This often
    helps in leaving larger spaces available for future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher priority means a better fit. Bins that cannot accommodate the
        item are given a priority of -1 (or any value indicating they are invalid).
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with -1 for invalid bins

    # Calculate remaining capacity after placing the item in each bin
    potential_remaining_capacities = bins_remain_cap - item

    # Consider only bins that can accommodate the item
    valid_indices = np.where(potential_remaining_capacities >= 0)[0]

    if len(valid_indices) > 0:
        # The priority is the negative of the remaining capacity.
        # This is because we want to minimize the remaining capacity (best fit).
        # A smaller positive remaining capacity (e.g., 0.1) is better than a larger one (e.g., 2.0).
        # By taking the negative, a smaller positive value becomes a larger negative value,
        # effectively giving it a higher "priority" in a maximization context.
        # Alternatively, we can think of this as assigning a "waste" score, and we want to minimize waste.
        # For Best Fit, we want the bin with the smallest non-negative remaining capacity.
        # Assigning priorities as the negative remaining capacity:
        # A bin with remaining_cap = 1.5 after placing item gets priority -1.5
        # A bin with remaining_cap = 0.2 after placing item gets priority -0.2
        # -0.2 > -1.5, so the bin with 0.2 remaining capacity has higher priority.
        priorities[valid_indices] = -potential_remaining_capacities[valid_indices]

    return priorities
```
