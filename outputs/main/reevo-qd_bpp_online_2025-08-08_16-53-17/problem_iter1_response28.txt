```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    The Epsilon-Greedy strategy balances exploration (trying less ideal bins)
    and exploitation (choosing the best fitting bin).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.2  # Exploration probability

    # Calculate the 'greedy' choice: how well the item fits in each bin
    # A higher score means a better fit (less remaining capacity after adding the item)
    # We only consider bins where the item can actually fit
    potential_bins_mask = bins_remain_cap >= item
    greedy_scores = np.full_like(bins_remain_cap, -np.inf) # Initialize with negative infinity
    greedy_scores[potential_bins_mask] = bins_remain_cap[potential_bins_mask] - item

    # Introduce exploration: randomly assign a small positive value to some bins
    # This encourages trying out bins that might not be the absolute best fit initially
    num_bins = len(bins_remain_cap)
    exploration_scores = np.zeros_like(bins_remain_cap)
    num_exploratory_bins = int(np.ceil(epsilon * num_bins))
    
    # Select bins to add exploration score to. Prioritize bins that can actually fit the item.
    if np.sum(potential_bins_mask) > 0:
        exploratory_indices = np.random.choice(
            np.where(potential_bins_mask)[0], 
            size=min(num_exploratory_bins, int(np.sum(potential_bins_mask))), 
            replace=False
        )
    else:
        exploratory_indices = np.array([], dtype=int)

    # Add a small exploration bonus to selected bins.
    # The bonus could be a small constant or a random value.
    # Here, we add a small constant bonus to encourage exploration.
    exploration_bonus = 1e-6 # A small constant to slightly boost exploratory bins
    exploration_scores[exploratory_indices] += exploration_bonus

    # Combine greedy and exploration scores
    priorities = greedy_scores + exploration_scores
    
    # Ensure that bins that cannot fit the item still have a very low priority
    priorities[~potential_bins_mask] = -np.inf

    return priorities
```
