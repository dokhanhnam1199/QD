```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    The Softmax-Based Fit strategy assigns higher priorities to bins that can
    accommodate the item and are "closer" to being full after the item is packed.
    This encourages tighter packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to negative infinity for bins that cannot fit the item
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a score.
    # The score is based on the remaining capacity *after* the item is packed.
    # We want to prioritize bins where remaining_capacity - item is small (tighter fit).
    # A simple approach is to use the negative of the remaining capacity after packing.
    # Softmax will then turn these scores into probabilities.
    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        # We want smaller remaining capacity to have higher priority.
        # So, we use the negative of the remaining capacity.
        # Adding a small epsilon to avoid log(0) issues if remaining capacity becomes exactly 0
        # or for numerical stability if values are very close to zero.
        priorities[fit_mask] = -remaining_after_fit + 1e-9

    # Apply softmax to convert scores into probabilities (priorities)
    # Ensure the exponentiation is stable by subtracting the maximum score
    # before applying exp, which doesn't change the relative probabilities.
    if np.any(priorities > -np.inf):
        max_priority = np.max(priorities[priorities > -np.inf])
        exp_priorities = np.exp(priorities - max_priority)
        # Normalize to get probabilities summing to 1 (for the fitting bins)
        sum_exp_priorities = np.sum(exp_priorities[priorities > -np.inf])
        if sum_exp_priorities > 0:
            priorities = exp_priorities / sum_exp_priorities
        else:
            # If for some reason sum is zero (e.g., all fitting priorities were -inf),
            # reset to uniform probability for fitting bins.
            priorities[priorities > -np.inf] = 1.0 / np.sum(fit_mask)
    else:
        # If no bins can fit the item, all priorities remain -inf, or can be set to 0.
        # For consistency with Softmax, let's keep them as they are.
        pass

    return priorities
```
