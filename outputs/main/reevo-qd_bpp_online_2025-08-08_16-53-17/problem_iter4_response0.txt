```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Exact Fit First prioritizes bins that can accommodate the item with the least remaining capacity.
    This is achieved by assigning a high priority to bins where (remaining_capacity - item_size) is minimized,
    but only if the item fits. For items that don't fit, a very low priority is assigned.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value for all bins.
    # This ensures that if no bin fits, or if we want to strongly prefer fits,
    # non-fitting bins have a significantly lower score.
    priorities = np.full_like(bins_remain_cap, -float('inf'), dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the "exactness" score.
    # We want to prioritize bins where the remaining capacity is as close as possible to the item size.
    # This means minimizing `bins_remain_cap - item`.
    # A smaller difference should result in a higher priority.
    # Therefore, we use the negative of the difference.
    # A perfect fit (bins_remain_cap == item) will yield a difference of 0, giving a priority of 0.
    # A bin with slightly more capacity than needed (bins_remain_cap = item + epsilon) will yield a difference of epsilon, giving a priority of -epsilon.
    # This correctly prioritizes bins with less leftover space.
    if np.any(can_fit_mask):
        fitting_bins_capacity = bins_remain_cap[can_fit_mask]
        fit_differences = fitting_bins_capacity - item
        # Assign priorities: higher for smaller differences (more negative score).
        priorities[can_fit_mask] = -fit_differences

    return priorities
```
