```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to leave larger remaining capacities in bins
    for potentially larger future items. This implementation assigns a higher
    priority to bins with the largest remaining capacity, effectively
    placing the current item in the "worst" fitting bin that can accommodate it.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority for selection.
    """
    # Initialize priorities to a very small negative number to ensure that
    # bins that cannot fit the item receive the lowest priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the current item.
    possible_bins_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign priority based on remaining capacity.
    # Worst Fit prioritizes bins with the largest remaining capacity.
    # We assign the remaining capacity itself as the priority score.
    priorities[possible_bins_mask] = bins_remain_cap[possible_bins_mask]

    return priorities
```
