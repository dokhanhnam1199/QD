```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Exploration rate
    num_bins = len(bins_remain_cap)
    priorities = np.zeros(num_bins)

    # Determine which bins can potentially fit the item
    valid_bins_indices = np.where(bins_remain_cap >= item)[0]

    if len(valid_bins_indices) == 0:
        # No bin can fit the item, return all zeros (or handle appropriately)
        return np.zeros(num_bins)

    # Greedy part: prioritize bins that leave the least remaining capacity
    # This is the "best fit" heuristic within the greedy selection.
    greedy_scores = bins_remain_cap[valid_bins_indices] - item

    # Apply epsilon-greedy strategy
    if np.random.rand() < epsilon:
        # Exploration: randomly choose one of the valid bins
        chosen_bin_index_in_valid = np.random.randint(0, len(valid_bins_indices))
        chosen_bin_global_index = valid_bins_indices[chosen_bin_index_in_valid]
        priorities[chosen_bin_global_index] = 1.0  # Assign highest priority to the chosen bin
    else:
        # Exploitation: choose the bin that minimizes remaining capacity (best fit)
        best_fit_index_in_valid = np.argmin(greedy_scores)
        best_fit_global_index = valid_bins_indices[best_fit_index_in_valid]
        priorities[best_fit_global_index] = 1.0 # Assign highest priority to the best fit bin

    # For bins that *can* fit the item but are not chosen by epsilon-greedy,
    # we can assign a small non-zero priority to still allow them a chance,
    # or simply keep them at zero if we only want one bin to have the highest score.
    # For simplicity here, we only give priority to the chosen bin.

    return priorities
```
