```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Exact Fit First prioritizes bins that can accommodate the item perfectly,
    meaning the remaining capacity of the bin after placing the item is zero.
    Among bins that offer an exact fit, we can further refine the priority.
    Here, we'll prioritize bins that have a smaller remaining capacity *before*
    fitting the item (but still large enough to fit it). This strategy
    aims to "fill up" bins more effectively with exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can fit exactly
    exact_fit_mask = (bins_remain_cap - item) == 0

    # For bins that allow an exact fit, assign a high priority based on their
    # *current* remaining capacity. We want bins that are *almost* full
    # (but can still fit the item exactly) to be prioritized.
    # We can achieve this by assigning a priority score that is inversely
    # related to their current remaining capacity, or by assigning a score
    # that increases as remaining capacity decreases towards the item size.
    # A simple approach is to assign a large base score and then add
    # a bonus related to how close their current capacity is to the item size.
    # Let's use a base high priority for exact fits and add a term that
    # rewards smaller remaining capacities.

    # A large base priority to favor exact fits
    base_exact_fit_priority = 1000.0

    # Calculate priority for exact fit bins: higher score for bins that were
    # closer to exactly fitting the item (i.e., smaller current remaining_cap).
    # We add a small value related to (bins_remain_cap - item) to ensure
    # that among exact fits, those with smaller initial capacity get a slight edge.
    # Since for exact fits, bins_remain_cap - item is 0, this term is effectively 0.
    # Let's consider a slightly different approach: prioritize exact fits,
    # and among those, pick the one that leaves the smallest remaining space
    # if we consider the *exact* remaining space after fitting.
    # So, if bins_remain_cap[i] == item, then bins_remain_cap[i] - item is 0.
    # To favor those closer to the item size, we can use something like
    # 1 / (epsilon + bins_remain_cap[i]) or a similar inverse relationship.
    # A simpler heuristic for exact fit is to give a high score to those
    # where bins_remain_cap == item. We can then add a penalty for
    # bins that would have excess capacity even with an exact fit.

    # Let's refine the exact fit priority:
    # Assign a very high priority to bins that can fit the item perfectly.
    # To break ties among exact fits, we can prioritize the bin that currently
    # has the least remaining capacity (closest to the item size without being smaller).
    # If bins_remain_cap[i] == item, then bins_remain_cap[i] - item = 0.
    # We want higher priority for smaller `bins_remain_cap` among exact fits.
    # So, `1 / bins_remain_cap[i]` would work, but we need to avoid division by zero
    # if bin capacity could be 0, or if the item size is 0.
    # Assuming item > 0 and bin capacities are positive.
    # A safer approach might be to use the difference `bins_remain_cap[i] - item`.
    # For exact fits, this is 0. For non-exact fits, it's > 0.
    # We can assign a score that is inversely proportional to the remaining capacity
    # *after* fitting the item, for those bins that have an exact fit.

    # Assign a high score to bins that can fit the item exactly.
    # Among those, give preference to the bin with the smallest remaining capacity *after* fitting.
    # This means prioritizing bins where `bins_remain_cap[i]` is closest to `item`.
    # If `bins_remain_cap[i] == item`, the remaining capacity after fit is 0.
    # We can use `1 / (item + epsilon)` for exact fits.

    # Let's create a priority based on:
    # 1. A large bonus for exact fits.
    # 2. Among exact fits, a smaller value for `bins_remain_cap[i]` gets a higher score.

    # For bins that fit the item (i.e., bins_remain_cap >= item):
    can_fit_mask = bins_remain_cap >= item
    fittable_capacities = bins_remain_cap[can_fit_mask]
    fittable_indices = np.where(can_fit_mask)[0]

    # Calculate the remaining capacity after placing the item.
    remaining_after_fit = fittable_capacities - item

    # Priority for fittable bins:
    # We want to prioritize bins that result in *zero* remaining capacity (exact fits).
    # For non-exact fits, we want to prioritize bins that result in *less* remaining capacity.
    # A common heuristic is to sort by remaining capacity after fitting.
    # The "Exact Fit" strategy specifically looks for `remaining_after_fit == 0`.

    # Let's implement a strict Exact Fit First:
    # Highest priority to bins where `bins_remain_cap == item`.
    # For these, the remaining capacity after fitting is 0.
    # To break ties among exact fits, we can pick the one with the smallest initial capacity.
    # Or, we can simply assign them all a high uniform priority and then potentially
    # use a secondary criterion if needed, but the prompt implies a single priority score.

    # Strategy:
    # 1. Bins with `bins_remain_cap == item` get a very high priority.
    # 2. Bins with `bins_remain_cap > item` (but not exact fit) get a lower priority.
    # 3. Bins with `bins_remain_cap < item` get zero priority (cannot fit).

    # Assigning priority:
    # Use a large multiplier for exact fits.
    # For bins that are not exact fits but can fit the item, we can assign a score
    # that decreases as their remaining capacity (after fitting) increases.
    # The smaller the `bins_remain_cap[i] - item` for non-exact fits, the higher the priority.
    # This makes it a "Best Fit" if no exact fit exists.

    # A high score for exact fits
    exact_fit_bonus = 100.0

    # For bins that fit, calculate a score that is higher for those with smaller remaining capacity *after* fitting.
    # We can use a large negative number for non-fitting bins to ensure they are least prioritized.
    priorities[can_fit_mask] = -remaining_after_fit # Higher score for smaller remaining capacity

    # Now, adjust for exact fits. We want exact fits to be *higher* than any non-exact fit.
    # If `remaining_after_fit` is 0, we want a score that is > any negative number.
    # Let's assign a fixed high score to exact fits.
    # The indices where exact fit happens are `fittable_indices[remaining_after_fit == 0]`.
    exact_fit_indices = fittable_indices[remaining_after_fit == 0]

    # For exact fits, set a very high priority. If there are multiple exact fits,
    # their scores here would be the same. If a secondary criterion is needed,
    # it could be incorporated into this score, e.g., `-bins_remain_cap[exact_fit_indices]`.
    # For this implementation, let's assign a high base priority to all exact fits.
    priorities[exact_fit_indices] = exact_fit_bonus

    # For bins that can fit but are not exact fits, their priority is `-remaining_after_fit`.
    # Since `remaining_after_fit` is positive, these scores will be negative.
    # The largest negative score (closest to zero) will be for the smallest `remaining_after_fit`.

    # Final priority adjustment:
    # If an exact fit exists, all exact fits should have the highest priority.
    # Among exact fits, let's favor those that were closer to the item size initially.
    # If `bins_remain_cap[i] == item`, its score is `exact_fit_bonus`.
    # If `bins_remain_cap[i] > item`, its score is `-(bins_remain_cap[i] - item)`.

    # To ensure exact fits are strictly preferred over best-fit (among non-exact fits):
    # We can scale the exact fit bonus to be significantly larger than the
    # maximum possible score from the best-fit part.
    # The best-fit scores range from approximately -(BIN_CAPACITY - ITEM_SIZE) to slightly less than 0.
    # So, `exact_fit_bonus` should be greater than `BIN_CAPACITY`.
    # Let's use `np.max(bins_remain_cap)` as a safe upper bound for remaining capacity.

    scaled_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_possible_best_fit_score = -np.min(remaining_after_fit) if len(remaining_after_fit) > 0 else 0
    exact_fit_priority_value = exact_fit_bonus # or something larger like 2 * np.max(bins_remain_cap) if we know capacity limits

    # Apply priorities:
    # Exact fits get the highest priority
    exact_fit_locations = (bins_remain_cap - item) == 0
    scaled_priorities[exact_fit_locations] = exact_fit_priority_value

    # For bins that can fit but not exactly, assign a priority based on minimizing
    # the remaining space. The smaller the remaining space, the higher the priority.
    # Since `remaining_after_fit` is always >= 0, and we want higher priority for smaller values,
    # a negative sign and then the value works for sorting.
    # For example, if item=3 and capacities are 7, 8, 10:
    # Remaining after fit: 4, 5, 7.
    # Scores: -4, -5, -7. Higher score is -4 (bin with capacity 7).
    # This would mean it's a "Best Fit" strategy.

    # To ensure Exact Fit First:
    # Set exact fits to a high constant value.
    # Set non-exact fits to a lower range of values.
    # The best fit criterion can be used to order within non-exact fits.

    # Let's assign a score that is simply `exact_fit_priority_value` for exact fits.
    # For bins that fit but not exactly, we want them to be strictly lower priority.
    # We can assign them a priority based on the *negative* of their remaining capacity.
    # The smaller the remaining capacity, the higher (less negative) the score.

    # Initialize all to a very low priority (unusable bins)
    scaled_priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    fittable_indices = np.where(can_fit_mask)[0]

    # Calculate remaining capacities for fittable bins
    remaining_after_fit = bins_remain_cap[fittable_indices] - item

    # Find exact fit indices within the fittable ones
    exact_fit_fittable_indices = fittable_indices[remaining_after_fit == 0]
    non_exact_fit_fittable_indices = fittable_indices[remaining_after_fit > 0]

    # Assign highest priority to exact fits.
    # Among exact fits, we can choose the one that was closest to the item size.
    # If we simply assign the same high score to all exact fits, then it becomes
    # a matter of which one is encountered first.
    # A common tie-breaker is the bin with the minimum remaining capacity before fitting,
    # so `bins_remain_cap[exact_fit_fittable_indices]` would be the tie-breaker.
    # A higher score for smaller remaining capacity.
    if len(exact_fit_fittable_indices) > 0:
        # Let's assign a base high score and add a term that prioritizes smaller initial capacities.
        # A good tie-breaker is often to pick the one that was closest to being full.
        # So, `1 / bins_remain_cap` for the exact fits.
        # Or, use the negative of their current capacity, then sort.
        # The problem requires a priority score, so higher means better.
        # Max score for exact fit: `base_exact_fit_priority + (max_initial_cap - current_initial_cap)`
        # This gives higher score to smaller `current_initial_cap`.
        base_exact_fit_priority = 1000.0
        exact_fit_initial_caps = bins_remain_cap[exact_fit_fittable_indices]
        # Prioritize smaller initial capacities for exact fits
        exact_fit_priorities = base_exact_fit_priority + (np.max(exact_fit_initial_caps) - exact_fit_initial_caps)
        scaled_priorities[exact_fit_fittable_indices] = exact_fit_priorities
    else:
        # If there are no exact fits, we might fall back to Best Fit.
        # However, the strategy is strictly Exact Fit First. If no exact fit, then what?
        # The prompt implies that we always return a priority for *each* bin.
        # If no exact fit, these bins still might fit. The priority should reflect
        # that they are *not* exact fits.
        pass # This section will handle non-exact fits later.

    # Assign priorities to bins that fit but not exactly (Best Fit heuristic for secondary preference)
    # These should have lower priorities than exact fits.
    # Priority is inversely related to remaining capacity after fit.
    # Higher priority for smaller `remaining_after_fit`.
    if len(non_exact_fit_fittable_indices) > 0:
        # Assign priorities that are lower than exact fits.
        # The value `-remaining_after_fit` would be negative.
        # We want higher score for smaller `remaining_after_fit`.
        # Example: if remaining_after_fit are 1, 2, 3 -> scores are -1, -2, -3.
        # The largest score is -1, which corresponds to the smallest remaining capacity.
        # We need to shift these values so they are still lower than the exact fit priorities.
        # We can subtract a large constant to ensure they are always lower.
        offset_for_non_exact_fits = 500.0 # Must be less than base_exact_fit_priority
        non_exact_fit_priorities = offset_for_non_exact_fits - remaining_after_fit[remaining_after_fit > 0]
        scaled_priorities[non_exact_fit_fittable_indices] = non_exact_fit_priorities

    # Bins that cannot fit the item retain their initial -inf priority.

    return scaled_priorities

```
