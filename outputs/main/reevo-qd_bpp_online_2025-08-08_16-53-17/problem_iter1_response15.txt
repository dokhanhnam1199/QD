```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance strategy prioritizes bins that are "closer" to fitting the item,
    meaning bins with remaining capacity slightly larger than the item's size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # We only consider bins that can actually fit the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Initialize priorities to a very low value for invalid bins
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # For valid bins, calculate the difference between remaining capacity and item size.
    # We want to minimize this difference (proximity fit).
    # Inverse distance is often used in attraction-based methods.
    # Here, we can consider the "distance" to be the leftover space.
    # A smaller leftover space is preferred.
    # So, we'll take the inverse of (1 + leftover_space) to avoid division by zero
    # and to ensure that smaller leftover spaces get higher priorities.
    
    # Calculate the difference (leftover space) for valid bins
    leftover_space = bins_remain_cap[valid_bins_mask] - item
    
    # Calculate priority: 1 / (1 + leftover_space).
    # Adding 1 to the leftover space ensures we don't divide by zero if a bin
    # has exactly the same remaining capacity as the item.
    # Higher values mean a better fit.
    priorities[valid_bins_mask] = 1.0 / (1.0 + leftover_space)
    
    return priorities
```
