```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit Decreasing-like strategy.

    This heuristic prioritizes bins that can accommodate the item and have the least remaining capacity *after*
    the item is placed. This encourages filling bins more completely. Bins that cannot fit the item are given
    a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the priority.
    # A common strategy is to prioritize bins that will have the *least* remaining capacity after the item is added.
    # This is like a "best fit" approach applied to the priority, aiming to leave less wasted space.
    # We use the negative of the remaining capacity after placement, so a smaller remaining capacity
    # results in a higher (less negative) priority score.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    # Bins that cannot fit the item should have a very low priority,
    # ensuring they are not selected if any fitting bin exists.
    # np.zeros_like already initializes them to 0, which is a sensible low value
    # as we expect positive priorities for fitting bins.

    return priorities
```
