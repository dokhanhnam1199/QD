```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance (Proximity Fit) strategy prioritizes bins that are closer
    to being full, but still able to accommodate the item. This means bins with
    less remaining capacity are given higher priority, as long as they can fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to 0.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate priorities for bins that can accommodate the item.
    # The priority is the inverse of the remaining capacity plus a small epsilon
    # to avoid division by zero if a bin is perfectly full (though this case
    # should ideally be handled before calling this function).
    # A smaller remaining capacity (closer to full) results in a higher priority.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0 / (bins_remain_cap[fit_mask] - item + 1e-6)

    return priorities
```
