```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins, minimize waste, and simplify weights for better online Bin Packing heuristics performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to give higher priority to bins with smaller differences
    priority_scores = 1 / (capacity_diff + 1e-8)  # add a small value to avoid division by zero
    
    # Prioritize near-full bins by multiplying with a factor that increases as the bin gets fuller
    priority_scores *= (1 - (bins_remain_cap / (bins_remain_cap + item))) + 1e-8
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling, 
    # but with a smaller weight to avoid over-prioritizing large remaining capacities
    priority_scores *= np.sqrt(bins_remain_cap)
    
    return priority_scores
```
