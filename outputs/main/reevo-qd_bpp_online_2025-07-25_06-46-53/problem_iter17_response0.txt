```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It prioritizes near-full bins, remaining capacity, and weighted differences.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate a weighted difference to prioritize near-full bins
    weighted_diff = capacity_diff / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Invert the weighted differences to give higher priority to bins with smaller differences
    priority_scores = 1 / (weighted_diff + 1e-8)  # add a small value to avoid division by zero
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling
    priority_scores *= bins_remain_cap
    
    # Prioritize near-full bins by adding a bonus to bins that are closest to being full
    near_full_bonus = 1 - (capacity_diff / (bins_remain_cap + 1e-8))  # add a small value to avoid division by zero
    priority_scores += near_full_bonus * bins_remain_cap
    
    return priority_scores
```
