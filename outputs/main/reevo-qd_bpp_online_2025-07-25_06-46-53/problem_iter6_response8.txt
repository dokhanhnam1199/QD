```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It prioritizes ratio, exact fits, and penalizes excess capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Calculate the ratio between the item size and the remaining capacity of each bin
                              item / (bins_remain_cap + item))

    # Give higher priority to exact fits
    priority_score = np.where(bins_remain_cap == item, 1e6, priority_score)

    # Penalize excess capacity to encourage perfect fits
    excess_capacity_penalty = np.where(bins_remain_cap > item, 
                                       1 / (bins_remain_cap - item + 1e-8 + 1),  # add a small value to avoid division by zero
                                       1)
    priority_score *= excess_capacity_penalty

    # Prioritize near-full bins by multiplying with the inverse of the absolute difference
    inv_diff = 1 / (np.abs(bins_remain_cap - item) + 1e-8)  # add a small value to avoid division by zero
    priority_score *= inv_diff

    return priority_score
```
