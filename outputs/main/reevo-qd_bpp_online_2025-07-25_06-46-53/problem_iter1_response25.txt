```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # If a bin has just enough capacity to hold the item, it gets the highest priority
                              np.where(bins_remain_cap == item, 1, 
                                       # Calculate the ratio of the remaining capacity and the item size for other bins
                                       bins_remain_cap / item))

    # Add a small fraction of random noise to break ties and increase exploration
    priority_score += np.random.rand(*priority_score.shape) * 1e-6
    
    return priority_score
```
