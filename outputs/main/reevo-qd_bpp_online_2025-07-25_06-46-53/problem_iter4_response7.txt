```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on minimizing waste and 
    favoring near-full bins to reduce the overall number of bins needed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste that would be generated if the item is added to each bin
    waste = np.maximum(0, bins_remain_cap - item)
    
    # Calculate the priority score as a combination of waste minimization and near-full bin prioritization
    priority = np.where(bins_remain_cap >= item, 
                        # For bins that can hold the item, prioritize near-full bins and minimize waste
                        (1 - (waste / bins_remain_cap)) + (1 - np.clip((bins_remain_cap - item) / bins_remain_cap, a_min=0, a_max=1)),
                        0)
    
    # Normalize the priority scores to ensure they add up to 1
    priority /= np.sum(priority) if np.sum(priority) > 0 else 1
    
    return priority
```
