```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It combines ratio, difference, and exact fit with weighted priorities, emphasizing 
    near-full bins, minimal waste, and perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the ratio of the item size to the remaining capacity
    capacity_ratio = np.where(bins_remain_cap > 0, item / bins_remain_cap, 1e8)  # avoid division by zero
    
    # Calculate a smoothed exact fit score
    exact_fit_score = np.exp(-((bins_remain_cap - item) / (item + 1e-8)) ** 2)
    
    # Combine the scores with weighted priorities
    priority_scores = (
        0.4 * (1 / (capacity_diff + 1e-8))  # emphasize minimal waste
        + 0.3 * (1 / (capacity_ratio + 1e-8))  # emphasize near-full bins
        + 0.3 * exact_fit_score  # emphasize perfect fits
    )
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling
    priority_scores *= np.where(bins_remain_cap > 0, bins_remain_cap / (bins_remain_cap + item), 1e-8)
    
    return priority_scores
```
