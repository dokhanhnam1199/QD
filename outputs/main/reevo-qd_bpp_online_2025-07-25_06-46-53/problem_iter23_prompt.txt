{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize near-full bins, simplify weights, and balance capacity, focusing on key factors like remaining capacity and size differences to minimize waste.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize near-full bins and minimize waste.\n    It combines difference and ratio considerations with weighted priorities, \n    emphasizing near-full bins and minimal waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the ratio of the item size to the remaining capacity of each bin\n    capacity_ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero\n    \n    # Calculate the priority scores, combining the different considerations with weighted priorities\n    # prioritize near-full bins and minimize waste\n    priority_scores = 0.6 * (1 / (capacity_diff + 1e-8)) + 0.4 * (1 - capacity_ratio)\n    \n    # Give higher priority to near-full bins\n    near_full_score = 1.0 - (capacity_diff / (bins_remain_cap + 1e-8))  # add a small value to avoid division by zero\n    priority_scores *= near_full_score\n    \n    # Give higher priority to bins with more remaining capacity to discourage overfilling\n    priority_scores *= bins_remain_cap / (bins_remain_cap + item + 1e-8)  # add a small value to avoid division by zero\n    \n    return priority_scores\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}