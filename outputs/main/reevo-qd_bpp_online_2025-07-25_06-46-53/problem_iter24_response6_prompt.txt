{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to encourage the packing of items into bins \n    where the item size is closest to the remaining capacity, thereby minimizing waste.\n    It combines ratio, difference, and exact fit with weighted priorities, emphasizing \n    near-full bins, minimal waste, and perfect fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate the ratio of the item size to the remaining capacity\n    capacity_ratio = np.where(bins_remain_cap > 0, item / bins_remain_cap, 1e8)  # avoid division by zero\n    \n    # Calculate a smoothed exact fit score\n    exact_fit_score = np.exp(-((capacity_diff / (item + 1e-8))**2) / (2 * 0.1**2))  # using a Gaussian kernel\n    \n    # Combine the scores with weighted priorities\n    priority_scores = (\n        0.4 * (1 / (capacity_diff + 1e-8))  # give higher priority to bins with smaller differences\n        + 0.3 * (1 - capacity_ratio)  # give higher priority to bins with smaller ratios\n        + 0.3 * exact_fit_score  # give higher priority to bins with exact fits\n    )\n    \n    # Give higher priority to bins with more remaining capacity to discourage overfilling\n    priority_scores *= np.where(bins_remain_cap > 0, bins_remain_cap / (bins_remain_cap + item), 1e-8)\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to prioritize near-full bins, simplify weights, \n    and balance capacity to minimize waste, combining key factors for optimal online Bin Packing performance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to give higher priority to bins with smaller differences\n    priority_scores = 1 / (capacity_diff + 1e-8)  # add a small value to avoid division by zero\n    \n    # Give higher priority to near-full bins (i.e., bins with less remaining capacity)\n    near_full_weight = 1 - (bins_remain_cap / (bins_remain_cap + item))\n    priority_scores *= near_full_weight\n    \n    # Simplify weights to discourage overfilling\n    simplified_weight = bins_remain_cap / (bins_remain_cap + item + 1e-8)\n    priority_scores *= simplified_weight\n    \n    return priority_scores\n\n[Reflection]\nSimplify weights, prioritize near-full bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}