```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function combines considerations of ratio, difference, and exact fit.
    It prioritizes bins based on the ratio of the remaining capacity to the item size,
    the difference between the remaining capacity and the item size, and exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of the remaining capacity of each bin to the item size
    capacity_ratio = np.where(bins_remain_cap == 0, 0, item / bins_remain_cap)
    
    # Invert the ratios to give higher priority to bins with smaller ratios
    ratio_priority = np.where(capacity_ratio == 0, 0, 1 / (np.abs(capacity_ratio - 1) + 1e-8))
    
    # Calculate the difference between the remaining capacity and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Give higher priority to bins with smaller differences
    diff_priority = np.where(capacity_diff == 0, 1e6, 1 / (capacity_diff + 1e-8))
    
    # Give higher priority to exact fits
    exact_fit_priority = np.where(np.isclose(bins_remain_cap, item), 1e6, 0)
    
    # Combine the priorities
    priority_scores = ratio_priority + diff_priority + exact_fit_priority
    
    # Penalize bins with less capacity than the item
    priority_scores = np.where(bins_remain_cap < item, 0, priority_scores)
    
    return priority_scores
```
