```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins and minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Give higher priority to near-full bins by using a weighted sum
    near_full_weight = 0.7
    waste_weight = 0.3
    priority_scores = near_full_weight * (1 / (capacity_diff + 1e-8)) + waste_weight * (bins_remain_cap / (bins_remain_cap + item + 1e-8))
    
    # Simplify weights for better online Bin Packing heuristics performance
    priority_scores = np.where(bins_remain_cap >= item, priority_scores, 0)
    
    return priority_scores
```
