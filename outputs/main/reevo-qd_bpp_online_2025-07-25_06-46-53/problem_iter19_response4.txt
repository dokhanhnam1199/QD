```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes near-full bins and focuses on remaining capacity 
    and size differences to minimize waste and optimize online Bin Packing performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to give higher priority to bins with smaller differences
    diff_priority = 1 / (capacity_diff + 1e-8)  # add a small value to avoid division by zero
    
    # Give higher priority to near-full bins
    full_priority = bins_remain_cap / (bins_remain_cap + item + 1e-8)
    
    # Calculate the final priority score as a combination of the two priorities
    priority_scores = diff_priority * full_priority
    
    return priority_scores
```
