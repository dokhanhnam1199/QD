```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes near-full bins and simplifies weights to minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity relative to the item size
    relative_remain_cap = bins_remain_cap / item
    
    # Prioritize near-full bins by using a sigmoid function to map the relative remaining capacity to a priority score
    priority_scores = 1 / (1 + np.exp(-(relative_remain_cap - 1)))  # sigmoid function
    
    # Simplify weights by focusing on key factors like remaining capacity
    priority_scores *= bins_remain_cap / (bins_remain_cap + item)
    
    # Give higher priority to bins with more remaining capacity relative to the item size
    priority_scores /= (relative_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    return priority_scores
```
