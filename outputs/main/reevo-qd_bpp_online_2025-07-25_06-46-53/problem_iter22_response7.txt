```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins and minimize waste.
    It combines difference, ratio, and exact fit considerations with weighted priorities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    capacity_ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the exact fit score, giving higher priority to exact fits
    exact_fit_score = 1.0 - np.abs(capacity_diff / (item + 1e-8))  # add a small value to avoid division by zero
    
    # Calculate the near-full score, giving higher priority to near-full bins
    near_full_score = 1.0 - (capacity_diff / (bins_remain_cap + 1e-8))  # add a small value to avoid division by zero
    
    # Calculate the priority scores, combining the different considerations with weighted priorities
    priority_scores = 0.5 * near_full_score + 0.3 * exact_fit_score + 0.2 * (1 / (capacity_diff + 1e-8))
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling
    priority_scores *= bins_remain_cap / (bins_remain_cap + item + 1e-8)  # add a small value to avoid division by zero
    
    return priority_scores
```
