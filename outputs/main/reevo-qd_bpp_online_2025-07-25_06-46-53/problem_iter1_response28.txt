```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins that have the most available capacity
    compared to the item size. The bins with the smallest difference between the 
    remaining capacity and the item size are preferred, with a higher priority 
    given to bins with more remaining capacity in the case of a tie.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the priority score as the negative of the difference to prioritize smaller differences
    # and add the remaining capacity to break ties
    priority_score = -capacity_diff + bins_remain_cap
    
    # Normalize the priority score to prevent potential overflows
    priority_score -= np.min(priority_score)
    
    # Clip negative values to 0, to ensure all priorities are non-negative
    priority_score = np.clip(priority_score, a_min=0, a_max=None)
    
    return priority_score
```
