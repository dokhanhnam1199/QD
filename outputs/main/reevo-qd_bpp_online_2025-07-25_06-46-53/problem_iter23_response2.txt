```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins, simplify weights, and balance capacity.
    It emphasizes key factors like remaining capacity and size differences to minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate a simple weight based on the remaining capacity
    capacity_weight = bins_remain_cap / (bins_remain_cap + item + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the priority scores, emphasizing near-full bins and minimal waste
    priority_scores = (1 / (capacity_diff + 1e-8)) * capacity_weight
    
    # Simplify the weight distribution to prioritize near-full bins
    near_full_weight = 1.0 - (capacity_diff / (bins_remain_cap + 1e-8 + item))  # add a small value to avoid division by zero
    priority_scores *= near_full_weight
    
    # Reduce the impact of very small remaining capacities to discourage overfilling
    priority_scores *= np.log(bins_remain_cap + 1) / np.log(bins_remain_cap + item + 1)
    
    return priority_scores
```
