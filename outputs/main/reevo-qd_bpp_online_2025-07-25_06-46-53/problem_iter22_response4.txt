```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to give higher priority to bins with smaller differences
    diff_priority = 1 / (capacity_diff + 1e-8)  # add a small value to avoid division by zero
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling
    capacity_priority = bins_remain_cap / (bins_remain_cap + item + 1e-8)
    
    # Combine the priorities with equal weights
    priority_scores = diff_priority * capacity_priority
    
    # Clip priorities to avoid extreme values
    priority_scores = np.clip(priority_scores, 1e-8, 1e8)
    
    return priority_scores
```
