```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins and minimize waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the ratio of remaining capacity to item size
    capacity_ratio = bins_remain_cap / (item + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the priority score as a weighted sum of the inverted difference and the ratio
    priority_scores = 0.7 * (1 / (capacity_diff + 1e-8)) + 0.3 * capacity_ratio
    
    # Give higher priority to near-full bins
    near_full_bins = np.where(bins_remain_cap < item, 0, 1)
    priority_scores += near_full_bins * 0.5
    
    return priority_scores
```
