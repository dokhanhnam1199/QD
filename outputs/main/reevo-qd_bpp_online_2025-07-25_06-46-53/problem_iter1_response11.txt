```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, we calculate the ratio of the remaining capacity and the item size.
    # We clip the ratio to be between 0 and 1 to prevent it from growing too large.
    ratio = np.clip(bins_remain_cap / item, a_min=0, a_max=1)
    
    # We then mask bins that don't have enough capacity to hold the item
    mask = bins_remain_cap >= item
    
    # We calculate the priority scores based on the ratio.
    # A higher ratio means a higher priority score, but only if there is enough capacity.
    priority = np.where(mask, ratio, 0)
    
    # To make sure bins with just enough capacity get the highest priority, we set their priority to 1.
    just_enough_cap = np.isclose(ratio, 1)
    priority = np.where(just_enough_cap, 1, priority)
    
    return priority
```
