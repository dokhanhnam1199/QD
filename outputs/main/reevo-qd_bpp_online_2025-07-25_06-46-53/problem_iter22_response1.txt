```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins, balance remaining capacity, 
    and minimize waste, thereby optimizing online Bin Packing heuristics performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Apply a logarithmic function to the differences for weighting
    weight = 1 / (1 + np.log(capacity_diff + 1))
    
    # Prioritize near-full bins
    near_full_priority = bins_remain_cap / (bins_remain_cap + item + 1e-8)
    
    # Balance remaining capacity by applying a linear function to the remaining capacity
    balance_priority = 1 - (bins_remain_cap / (bins_remain_cap.max() + item + 1e-8))
    
    # Combine the priorities using a weighted sum with learned coefficients
    priority_scores = 0.45 * weight + 0.35 * near_full_priority + 0.20 * balance_priority
    
    # Introduce a small bonus for perfect fits to encourage optimal packing
    perfect_fit_bonus = np.where(np.abs(capacity_diff) < 1e-6, 0.05, 0)
    priority_scores += perfect_fit_bonus
    
    return priority_scores
```
