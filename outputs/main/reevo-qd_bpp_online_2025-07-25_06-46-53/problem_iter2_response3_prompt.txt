{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has just enough capacity to hold the item, it gets the highest priority.\n    Bins with less capacity than the item get zero priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # First, we calculate the ratio of the remaining capacity and the item size.\n    # We clip the ratio to be between 0 and 1 to prevent it from growing too large.\n    ratio = np.clip(bins_remain_cap / item, a_min=0, a_max=1)\n    \n    # We then mask bins that don't have enough capacity to hold the item\n    mask = bins_remain_cap >= item\n    \n    # We calculate the priority scores based on the ratio.\n    # A higher ratio means a higher priority score, but only if there is enough capacity.\n    priority = np.where(mask, ratio, 0)\n    \n    # To make sure bins with just enough capacity get the highest priority, we set their priority to 1.\n    just_enough_cap = np.isclose(ratio, 1)\n    priority = np.where(just_enough_cap, 1, priority)\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins that have the least amount of remaining capacity and \n    can still fit the item. If a bin cannot fit the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the minimum remaining capacity for each bin that can still fit the item\n    min_cap_with_item = np.where(bins_remain_cap >= item, bins_remain_cap, np.inf)\n    \n    # Assign a high priority to bins with the least amount of remaining capacity\n    priority = -min_cap_with_item\n    \n    # Set priority to negative infinity if the item cannot fit in a bin\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n[Reflection]\nPrioritize bins with least remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}