```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It combines ratio, difference, and exact fit with weighted priorities, emphasizing 
    near-full bins, minimal waste, and perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the ratio of the item size to the remaining capacity
    capacity_ratio = np.where(bins_remain_cap == 0, 1e-8, item / bins_remain_cap)
    
    # Calculate the exact fit score, higher if the item fits perfectly
    exact_fit_score = np.where(np.isclose(capacity_diff, 0), 1, capacity_diff / (capacity_diff + item))
    
    # Calculate the priority score, combining the above with weighted priorities
    priority_scores = (
        0.4 * (1 / (capacity_diff + 1e-8)) +  # difference priority
        0.3 * (1 / (capacity_ratio + 1e-8)) +  # ratio priority
        0.3 * exact_fit_score  # exact fit priority
    )
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling
    priority_scores *= np.sqrt(bins_remain_cap / (bins_remain_cap + item))
    
    return priority_scores
```
