```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It prioritizes ratio over difference, near-full bins, and exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio between the item size and the remaining capacity of each bin
    ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the inverse of the absolute difference between the remaining capacity and the item size
    inv_diff = 1 / (np.abs(bins_remain_cap - item) + 1e-8)  # add a small value to avoid division by zero
    
    # Give higher priority to exact fits and near-full bins
    priority_scores = np.where(bins_remain_cap == item, 1e6, inv_diff)
    
    # Prioritize bins based on the ratio and inverse difference
    priority_scores = np.where(ratio <= 1, priority_scores * ratio, priority_scores)
    
    # Penalize excess capacity to encourage perfect fits
    excess_capacity_penalty = 1 / (bins_remain_cap - item + 1e-8)  # add a small value to avoid division by zero
    excess_capacity_penalty = np.where(bins_remain_cap > item, excess_capacity_penalty, 1)
    priority_scores *= excess_capacity_penalty
    
    return priority_scores
```
