```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the item size to the remaining capacity,
    encouraging the packing of items into bins where the item size is closest to the remaining capacity,
    thereby minimizing waste. It also prioritizes near-full bins and exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the ratio between the item size and the remaining capacity of each bin
    ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the inverse differences to give higher priority to bins with smaller differences
    inv_diff = 1 / (np.abs(bins_remain_cap - item) + 1e-8)
    
    # Calculate the priority score as a combination of the ratio and the inverse differences
    # Near-full bins and exact fits are prioritized
    priority_scores = (1 - np.abs(1 - ratio)) * inv_diff
    
    # Give higher priority to near-full bins and exact fits
    priority_scores *= (1 - (np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-8)))
    
    # Ensure bins with insufficient capacity get zero priority
    priority_scores = np.where(bins_remain_cap < item, 0, priority_scores)
    
    return priority_scores
```
