```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes perfect fits, minimizes waste, and penalizes poor fits.
    Bins that can hold the item perfectly or have a small remaining capacity after adding the item
    get higher priority scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity of each bin if the item is added
    remaining_cap = bins_remain_cap - item

    # Bins with less capacity than the item get zero priority
    priority = np.where(bins_remain_cap < item, 0, 1)

    # Prioritize perfect fits
    priority = np.where(remaining_cap == 0, 1e10, priority)

    # Prioritize near-perfect fits
    priority = np.where(remaining_cap > 0, priority + (1 / (1 + remaining_cap)), priority)

    # Penalize bins with insufficient capacity
    priority = np.where(remaining_cap < 0, priority / (1 + np.abs(remaining_cap)), priority)

    return priority
```
