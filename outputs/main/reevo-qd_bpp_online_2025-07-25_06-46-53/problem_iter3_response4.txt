```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It prioritizes ratio over difference, near-full bins, and exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of the remaining capacity of each bin to the item size
    capacity_ratio = np.where(bins_remain_cap == 0, 0, item / bins_remain_cap)
    
    # Invert the ratios to give higher priority to bins with ratios closer to 1 (exact fit)
    ratio_priorities = 1 / np.abs(capacity_ratio - 1 + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to give higher priority to bins with smaller differences
    diff_priorities = 1 / (capacity_diff + 1e-8)  # add a small value to avoid division by zero
    
    # Combine the ratio and difference priorities, giving more weight to the ratio priority
    priority_scores = 0.7 * ratio_priorities + 0.3 * diff_priorities
    
    # Give higher priority to near-full bins to encourage efficient packing
    priority_scores *= (1 - (bins_remain_cap - item) / bins_remain_cap + 1e-8)
    
    return priority_scores
```
