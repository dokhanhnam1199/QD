```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins, minimize waste, and consider multiple factors with weighted priorities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    capacity_ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the near-full score, prioritizing near-full bins
    near_full_score = 1.0 - (capacity_diff / (bins_remain_cap + 1e-8))  # add a small value to avoid division by zero
    
    # Calculate the waste minimization score, minimizing waste by prioritizing bins where the item size is closest to the remaining capacity
    waste_minimization_score = 1 / (capacity_diff + 1e-8)
    
    # Calculate the remaining capacity score, giving higher priority to bins with more remaining capacity to discourage overfilling
    remaining_capacity_score = bins_remain_cap / (bins_remain_cap + item + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the priority scores, combining the different considerations with weighted priorities
    priority_scores = (0.4 * near_full_score) + (0.3 * waste_minimization_score) + (0.3 * remaining_capacity_score)
    
    return priority_scores
```
