```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins, minimize waste, and discourage overfilling.
    It combines multiple factors with weighted priorities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    capacity_ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the waste that would be generated if the item is added to each bin
    waste = np.maximum(0, bins_remain_cap - item)
    
    # Calculate the priority scores, combining multiple factors with weighted priorities
    # prioritize near-full bins (30%), minimize waste (40%), and discourage overfilling (30%)
    priority_scores = (
        0.3 * (1 / (capacity_diff + 1e-8)) +  # prioritize near-full bins
        0.4 * (1 / (waste + 1e-8)) +  # minimize waste
        0.3 * (bins_remain_cap / (bins_remain_cap + item + 1e-8))  # discourage overfilling
    )
    
    # Give higher priority to bins with more remaining capacity to discourage overfilling
    priority_scores *= np.where(bins_remain_cap > 0, (bins_remain_cap / (bins_remain_cap + 1e-6)), 1e-6)
    
    return priority_scores
```
