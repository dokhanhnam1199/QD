```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins, balance remaining capacity, 
    and minimize waste, thereby optimizing online Bin Packing heuristics performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Simplify weights using a logarithmic function
    weight = 1 / (1 + np.log(capacity_diff + 1))
    
    # Prioritize near-full bins using a linear function
    near_full_priority = bins_remain_cap / (bins_remain_cap + item + 1e-8)
    
    # Balance remaining capacity using a linear function
    max_capacity = bins_remain_cap.max()
    if max_capacity == 0:
        balance_priority = np.ones_like(bins_remain_cap) * 1e-8
    else:
        balance_priority = 1 - (bins_remain_cap / (max_capacity + item + 1e-8))
    
    # Combine the priorities using a weighted sum
    priority_scores = 0.5 * weight + 0.25 * near_full_priority + 0.25 * balance_priority
    
    return priority_scores
```
