```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize near-full bins and balance remaining capacity, 
    thereby minimizing waste and optimizing online Bin Packing heuristics performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Simplify weights by applying a logarithmic function to the differences
    weight = 1 / np.log(capacity_diff + 2)  # add a small value to avoid division by zero
    
    # Prioritize near-full bins by multiplying the weight with the remaining capacity ratio
    priority_scores = weight * (1 - bins_remain_cap / np.max(bins_remain_cap))
    
    # Balance remaining capacity by giving higher priority to bins with less remaining capacity
    priority_scores *= (1 - bins_remain_cap / np.sum(bins_remain_cap))
    
    return priority_scores
```
