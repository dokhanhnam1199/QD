{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity to the item size.\n    If a bin has just enough capacity to hold the item, it gets the highest priority.\n    Bins with less capacity than the item get zero priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins with less capacity than the item get zero priority\n    priority_score = np.where(bins_remain_cap < item, 0, \n                              # Priority is higher for bins that can just hold the item\n                              bins_remain_cap / (bins_remain_cap + item))\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to encourage the packing of items into bins \n    where the item size is close to or less than the remaining capacity, thereby \n    minimizing waste and reducing the number of bins needed. Perfect fits are \n    prioritized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity of each bin\n    remaining_cap = np.copy(bins_remain_cap)\n\n    # Calculate the absolute difference between item size and remaining capacity\n    diff = np.abs(remaining_cap - item)\n\n    # Use the inverse of the difference as the priority score, so that bins \n    # with smaller differences (i.e., closer to fitting the item perfectly) \n    # have higher priority scores. Also, prioritize perfect fits.\n    priority = np.where(diff == 0, 1e10, 1 / (diff + 1e-8))  # Perfect fit gets highest priority\n\n    # Further prioritize bins where item size is less than or equal to remaining capacity\n    priority = np.where(remaining_cap >= item, priority, priority / 10)\n\n    return priority\n\n[Reflection]\nPrioritize perfect fits, minimize waste, and penalize poor fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}