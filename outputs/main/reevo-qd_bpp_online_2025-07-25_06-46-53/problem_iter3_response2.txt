```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is closest to the remaining capacity, thereby minimizing waste.
    It prioritizes ratio over difference, near-full bins, and exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio between the item size and the remaining capacity of each bin
    ratio = item / (bins_remain_cap + 1e-8)  # add a small value to avoid division by zero
    
    # Calculate the inverse differences to give higher priority to bins with smaller differences
    inv_diff = 1 / (np.abs(bins_remain_cap - item) + 1e-8)
    
    # Calculate the priority score based on the ratio and inverse differences
    # Prioritize bins with ratio closest to 1 (exact fit) and smallest differences
    priority_scores = inv_diff * np.exp(-(ratio - 1) ** 2)
    
    # Give higher priority to near-full bins
    priority_scores *= (1 - (bins_remain_cap - item) / bins_remain_cap)
    
    return priority_scores
```
