```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes near-full bins and minimizes waste by 
    preferring bins with remaining capacities closest to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate a near-full bin bonus to prioritize bins that are close to full
    near_full_bonus = np.where(bins_remain_cap > 0, 1 - (capacity_diff / (bins_remain_cap + item + 1e-8)), 0)
    
    # Calculate the priority score as a combination of the near-full bin bonus and remaining capacity
    priority_scores = near_full_bonus * bins_remain_cap
    
    # Ensure priority scores are non-negative and prefer bins with smaller differences
    priority_scores = np.maximum(1 / (capacity_diff + 1e-8), priority_scores)
    
    return priority_scores
```
