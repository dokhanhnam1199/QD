```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the inverse difference between 
    the remaining capacity and the item size. Bins with remaining capacities closest 
    to the item size receive the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between item size and remaining capacity
    diff = np.abs(bins_remain_cap - item)

    # Bins with less capacity than the item get zero priority
    diff = np.where(bins_remain_cap < item, np.inf, diff)

    # Use the inverse of the difference as the priority score, so that bins 
    # with smaller differences (i.e., closer to fitting the item perfectly) 
    # have higher priority scores
    priority = 1 / (diff + 1e-8)  # Add a small constant to avoid division by zero

    # Add a small fraction of random noise to break ties and increase exploration
    priority += np.random.rand(*priority.shape) * 1e-6
    
    return priority
```
