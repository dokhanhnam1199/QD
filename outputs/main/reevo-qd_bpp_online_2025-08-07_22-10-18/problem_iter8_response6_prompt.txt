{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.1,\n    boost: float = 10.0,\n    rng: np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for placing an incoming item into existing bins.\n\n    The function implements an epsilon\u2011greedy strategy combined with an\n    Exact\u2011Fit\u2011First (best\u2011fit) heuristic and random tie\u2011breaking.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each open bin.\n    epsilon : float, optional\n        Exploration probability for epsilon\u2011greedy. With probability ``epsilon``\n        a random feasible bin is favoured. Default is 0.1.\n    boost : float, optional\n        Additive bonus for bins that achieve an exact fit (remaining capacity\n        ~0). Must be larger than the typical range of the base scores to\n        guarantee precedence. Default is 10.0.\n    rng : np.random.Generator, optional\n        Random number generator. If ``None`` a new default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``). Bins that\n        cannot accommodate the item receive ``-np.inf``. The bin with the highest\n        score should be selected.\n    \"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n\n    # Feasibility mask: bins that can hold the item\n    feasible_mask = bins_remain_cap >= item\n\n    # If no bin can accommodate the item, return all -inf\n    if not np.any(feasible_mask):\n        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Exploration phase: random scores for feasible bins\n    if rng.random() < epsilon:\n        random_scores = rng.random(bins_remain_cap.shape)\n        random_scores[~feasible_mask] = -np.inf\n        return random_scores\n\n    # Exploitation phase: best\u2011fit with exact\u2011fit boost\n    # Compute leftover capacity for feasible bins\n    leftovers = bins_remain_cap[feasible_mask] - item\n\n    # Base score prefers smaller leftover (best\u2011fit). Use negative leftover\n    # so that larger scores correspond to tighter fits.\n    base_score = -leftovers\n\n    # Detect exact fits (within numerical tolerance)\n    exact_fit_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Apply boost to exact fits\n    scores = base_score + boost * exact_fit_mask.astype(float)\n\n    # Random tie\u2011breaking: add a tiny noise term to avoid deterministic ties\n    tie_noise = 1e-6 * rng.random(scores.shape)\n    scores += tie_noise\n\n    # Assemble full priority array\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    priorities[feasible_mask] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a normalized priority score for each bin in an online Bin Packing\n    scenario.\n\n    The priority reflects the *Best\u2011Fit* rule: a bin that leaves the smallest\n    remaining capacity after accommodating the item receives the highest\n    priority.  The score is normalised to the range [0,\u202f1] for the feasible\n    bins, and infeasible bins receive ``-np.inf`` so they are never chosen.\n    A tiny tie\u2011breaker favours lower\u2011index bins when priorities are equal.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    np.ndarray\n        1\u2011D array of the same shape as ``bins_remain_cap`` containing the\n        priority score for each bin (higher means more preferred).\n    \"\"\"\n    # Ensure a floating\u2011point array for safe arithmetic\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining space if the item were to be added\n    leftover = caps - item\n    feasible = leftover >= 0\n\n    # Compute leftover ratio safely (avoid division by zero)\n    leftover_ratio = np.empty_like(caps)\n    if np.any(feasible):\n        valid = feasible & (caps > 0)\n        leftover_ratio[valid] = leftover[valid] / caps[valid]\n\n        zero_cap = feasible & (caps == 0)\n        # When capacity is zero and item fits (i.e., item==0), the ratio is 0\n        leftover_ratio[zero_cap] = 0.0\n\n    # Raw priority: negative leftover ratio (higher when leftover is smaller)\n    raw_priority = np.full_like(caps, -np.inf, dtype=float)\n    if np.any(feasible):\n        raw_priority[feasible] = -leftover_ratio[feasible]\n\n    # Normalise feasible priorities to [0,\u202f1], keep infeasible as -inf\n    if np.any(feasible):\n        min_f = np.min(raw_priority[feasible])\n        max_f = np.max(raw_priority[feasible])\n        norm_range = max_f - min_f\n        if norm_range > 0:\n            norm_priority = (raw_priority - min_f) / norm_range\n        else:\n            # All feasible priorities are equal \u2192 keep them all 0\n            norm_priority = raw_priority - min_f\n    else:\n        norm_priority = raw_priority\n\n    # Tie\u2011breaker: slightly favour lower\u2011index bins\n    epsilon = 1e-9\n    tie_breaker = -epsilon * np.arange(len(norm_priority))\n    priorities = norm_priority + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize scores, deterministic tie\u2011breakers, vectorized ops; avoid random epsilon\u2011greedy; stick to pure best\u2011fit heuristic.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}