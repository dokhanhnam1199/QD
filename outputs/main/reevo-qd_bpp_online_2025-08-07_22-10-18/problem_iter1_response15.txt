```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function for online Bin Packing based on Inverse Distance (Proximity Fit).

    The function assigns higher scores to bins whose remaining capacity after placing
    the item would be minimal, i.e., the item fits tightly.  Infeasible bins receive
    a score of -inf so they are never chosen.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array containing the current free capacity of each bin.

    Returns:
        An array of the same shape as `bins_remain_cap` with priority scores.
    """
    # Small epsilon to avoid division‑by‑zero.
    eps = 1e-9

    # Compute the hypothetical residual capacity if the item were placed.
    residual = bins_remain_cap - item

    # Feasibility mask: only bins with enough space can host the item.
    feasible = residual >= 0

    # Inverse distance scoring: smaller residual ⇒ larger priority.
    # Use a reciprocal; infeasible bins get -inf.
    priorities = np.where(feasible,
                          1.0 / (residual + eps),
                          -np.inf)

    # Tie‑breaker: add a minute random jitter to equal residuals.
    # This does not change the ordering for distinct scores.
    if np.any(priorities > -np.inf):
        jitter = np.random.uniform(0, eps, size=priorities.shape)
        priorities = np.where(priorities > -np.inf, priorities + jitter, priorities)

    return priorities
```
