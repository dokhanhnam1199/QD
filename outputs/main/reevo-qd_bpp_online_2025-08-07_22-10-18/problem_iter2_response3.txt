```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Exponential‑inverse priority for online Bin Packing.

    For each bin that can accommodate `item`, compute the leftover capacity after placement.
    The priority combines an exponential decay (favoring bins with tiny leftover) and an
    inverse‑leftover term (sharply rewarding near‑zero leftover). Infeasible bins receive a
    large negative priority, guaranteeing they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher is better).
    """
    # Leftover capacity after placing the item
    leftover = bins_remain_cap - item

    # Feasibility mask: bins that can hold the item
    feasible = leftover >= 0

    # Small epsilon to avoid division by zero
    eps = 1e-12

    # Exponential decay factor (larger => stronger bias toward small leftovers)
    alpha = 5.0

    # Exponential component: max at leftover=0, decays as leftover grows
    exp_part = np.exp(-alpha * leftover)

    # Inverse leftover component: huge when leftover≈0, diminishes with larger leftover
    inv_part = 1.0 / (leftover + eps)

    # Combine components (simple additive blend; can be weighted if desired)
    priority_feasible = exp_part + inv_part

    # Assign -inf to infeasible bins to ensure they are never chosen
    priorities = np.where(feasible, priority_feasible, -np.inf)

    return priorities
```
