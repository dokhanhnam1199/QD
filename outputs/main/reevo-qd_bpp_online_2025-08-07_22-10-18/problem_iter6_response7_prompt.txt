{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Best\u2011Fit priority for online Bin Packing.\n\n    The bin that leaves the smallest remaining capacity after receiving the\n    *item* gets the highest priority. Bins that cannot accommodate the item\n    receive a very low (\u2011inf) priority and will never be selected.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each existing bin.\n\n    Returns:\n        NumPy array with a priority score for each bin (higher means more\n        preferred). The shape matches ``bins_remain_cap``.\n    \"\"\"\n    # Work in floating point to safely use -inf for infeasible bins.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining space after the item would be placed.\n    leftover = caps - item\n\n    # Assign priority: bins that can fit the item get -leftover (higher for\n    # smaller leftover). Infeasible bins get -inf.\n    priorities = np.where(leftover >= 0, -leftover, -np.inf)\n\n    # Tiny tie\u2011breaker: favor lower\u2011index bins when leftover is identical.\n    # This epsilon is far smaller than any realistic leftover value.\n    epsilon = 1e-9\n    tie_break = -epsilon * np.arange(priorities.size)\n    priorities = priorities + tie_break\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global state for adaptive behavior\n_call_counter: int = 0\n_total_item_size: float = 0.0\n\n# Exploration parameters (epsilon\u2011greedy)\n_EPSILON0: float = 0.2          # Initial exploration probability\n_MIN_EPSILON: float = 0.01      # Minimum exploration probability\n_DECAY_RATE: float = 0.001      # Exponential decay rate of epsilon\n\n# Penalty weight for waste compared to average item size\n_ALPHA: float = 0.5\n\n    \"\"\"\n    Priority function for online Bin Packing that combines:\n\n      * Exact\u2011fit first: bins that fit the item exactly get infinite priority.\n      * Best\u2011fit: for other feasible bins, priority is inversely proportional to\n        the waste (remaining capacity after placing the item).\n      * Adaptive epsilon\u2011greedy exploration: with a decaying probability\n        the algorithm selects a random feasible bin.\n      * Waste penalty weighted by the average item size: bins whose waste\n        is significantly larger than the observed average item size are\n        penalised.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher = more preferred).  Bins that\n        cannot accommodate the item receive -inf.\n    \"\"\"\n    global _call_counter, _total_item_size\n\n    # Ensure a NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Update online statistics\n    _call_counter += 1\n    _total_item_size += item\n    avg_item_size = _total_item_size / _call_counter\n\n    # Dynamic epsilon (decays exponentially, never below _MIN_EPSILON)\n    epsilon = max(_MIN_EPSILON, _EPSILON0 * np.exp(-_DECAY_RATE * _call_counter))\n\n    rng = np.random.default_rng()\n\n    # Exploration branch: random feasible bin with probability epsilon\n    if rng.random() < epsilon:\n        feasible = bins_remain_cap >= item\n        random_scores = rng.random(bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n\n    # Deterministic scoring branch\n    waste = bins_remain_cap - item\n\n    # Masks\n    atol = 1e-9\n    exact_fit_mask = np.isclose(waste, 0.0, atol=atol)\n    feasible_mask = waste >= -atol  # allow slight negative due to tolerance\n\n    # Initialize priorities to -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Exact fits get infinite priority\n    priorities[exact_fit_mask] = np.inf\n\n    # Non\u2011exact but feasible bins get priority inversely proportional to waste\n    non_exact_mask = feasible_mask & ~exact_fit_mask\n    if np.any(non_exact_mask):\n        eps = 1e-12\n        base_score = 1.0 / (waste[non_exact_mask] + eps)\n        # Penalty for waste larger than the average item size\n        excess = np.maximum(0.0, waste[non_exact_mask] - avg_item_size)\n        penalty = _ALPHA * excess\n        priorities[non_exact_mask] = base_score - penalty\n\n    return priorities\n\n[Reflection]\nExact-fit priority, inverse waste scoring, waste penalty vs. average size, decaying epsilon\u2011greedy, low-index tie\u2011break.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}