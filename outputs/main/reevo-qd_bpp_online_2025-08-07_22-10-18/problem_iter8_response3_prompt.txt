{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.1,\n    boost: float = 10.0,\n    rng: np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for placing an incoming item into existing bins.\n\n    The function implements an epsilon\u2011greedy strategy combined with an\n    Exact\u2011Fit\u2011First (best\u2011fit) heuristic and random tie\u2011breaking.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each open bin.\n    epsilon : float, optional\n        Exploration probability for epsilon\u2011greedy. With probability ``epsilon``\n        a random feasible bin is favoured. Default is 0.1.\n    boost : float, optional\n        Additive bonus for bins that achieve an exact fit (remaining capacity\n        ~0). Must be larger than the typical range of the base scores to\n        guarantee precedence. Default is 10.0.\n    rng : np.random.Generator, optional\n        Random number generator. If ``None`` a new default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``). Bins that\n        cannot accommodate the item receive ``-np.inf``. The bin with the highest\n        score should be selected.\n    \"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n\n    # Feasibility mask: bins that can hold the item\n    feasible_mask = bins_remain_cap >= item\n\n    # If no bin can accommodate the item, return all -inf\n    if not np.any(feasible_mask):\n        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Exploration phase: random scores for feasible bins\n    if rng.random() < epsilon:\n        random_scores = rng.random(bins_remain_cap.shape)\n        random_scores[~feasible_mask] = -np.inf\n        return random_scores\n\n    # Exploitation phase: best\u2011fit with exact\u2011fit boost\n    # Compute leftover capacity for feasible bins\n    leftovers = bins_remain_cap[feasible_mask] - item\n\n    # Base score prefers smaller leftover (best\u2011fit). Use negative leftover\n    # so that larger scores correspond to tighter fits.\n    base_score = -leftovers\n\n    # Detect exact fits (within numerical tolerance)\n    exact_fit_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Apply boost to exact fits\n    scores = base_score + boost * exact_fit_mask.astype(float)\n\n    # Random tie\u2011breaking: add a tiny noise term to avoid deterministic ties\n    tie_noise = 1e-6 * rng.random(scores.shape)\n    scores += tie_noise\n\n    # Assemble full priority array\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    priorities[feasible_mask] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive, exploration\u2011aware priority scoring for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item <= bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority score for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins receive ``-np.inf``.  The bin with the highest\n        score should be selected for the item.  If there are no open bins,\n        an empty array is returned (caller should open a new bin).\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Pre\u2011process input\n    # ------------------------------------------------------------------\n    rem = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = rem.size\n\n    # No open bins \u2013 caller must create a new one\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item\n    fit_mask = rem >= item\n\n    # If nothing fits, return -inf for all bins (force new bin creation)\n    if not np.any(fit_mask):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # Adaptive epsilon\u2011greedy exploration\n    # ------------------------------------------------------------------\n    base_eps = 0.10                     # baseline exploration prob.\n    fit_frac = np.count_nonzero(fit_mask) / n_bins\n\n    # Estimate bin capacity (all bins have the same fixed capacity)\n    bin_capacity = np.max(rem)\n    if bin_capacity <= 0.0:\n        bin_capacity = item   # fallback, should not happen for valid data\n\n    # Current utilization of each bin (higher = more filled)\n    utilization = 1.0 - rem / bin_capacity\n    avg_util = np.mean(utilization)\n\n    # Exploration probability rises when few bins fit or utilization is low\n    epsilon = base_eps * (1.0 - fit_frac) * (1.0 + (1.0 - avg_util))\n\n    rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        # Purely random scores for feasible bins, -inf otherwise\n        scores = rng.random(n_bins)\n        scores[~fit_mask] = -np.inf\n        return scores\n\n    # ------------------------------------------------------------------\n    # Deterministic scoring for exploitation\n    # ------------------------------------------------------------------\n    # Leftover capacity after placing the item (only for feasible bins)\n    leftover = np.empty_like(rem)\n    leftover.fill(np.nan)\n    leftover[fit_mask] = rem[fit_mask] - item\n\n    # Fill ratio: fraction of a bin's remaining capacity that the item occupies\n    fill_ratio = np.empty_like(rem)\n    fill_ratio.fill(np.nan)\n    fill_ratio[fit_mask] = item / rem[fit_mask]          # in (0, 1]\n\n    # Waste fraction after placement (same as leftover / original remaining)\n    waste_frac = np.empty_like(rem)\n    waste_frac.fill(np.nan)\n    waste_frac[fit_mask] = leftover[fit_mask] / rem[fit_mask]   # = 1 - fill_ratio\n\n    # Sigmoid scoring that favours fill ratios > 0.5.\n    # Steepness grows with average utilization (more aggressive when bins are tight).\n    base_k = 12.0\n    k = base_k * (1.0 + avg_util)          # k \u2208 [base_k, 2*base_k]\n\n    # Compute sigmoid: \u03c3(x) = 1 / (1 + exp(-k*(x - 0.5)))\n    arg = -k * (fill_ratio[fit_mask] - 0.5)   # negative for fill>0.5 \u2192 large \u03c3\n    # Clip to avoid overflow in exp\n    arg = np.clip(arg, -700.0, 700.0)\n    sigmoid = 1.0 / (1.0 + np.exp(arg))\n\n    # ------------------------------------------------------------------\n    # Combine components into a single priority value\n    # ------------------------------------------------------------------\n    # Weight parameters (tunable)\n    beta = 0.5      # waste penalty weight\n    delta = 0.30    # utilization reward weight\n\n    priority = np.full(n_bins, -np.inf, dtype=float)\n\n    # Base score: sigmoid (higher for larger fill ratios)\n    # Penalise waste and reward already\u2011used bins (higher utilization)\n    priority[fit_mask] = (\n        sigmoid\n        - beta * waste_frac[fit_mask]\n        + delta * utilization[fit_mask]\n    )\n\n    # Tiny random jitter to break ties in a reproducible way\n    jitter = rng.random(n_bins) * 1e-9\n    priority[fit_mask] += jitter[fit_mask]\n\n    return priority\n\n[Reflection]\nAdapt epsilon based on fit fraction and utilization; use smooth sigmoid fill\u2011ratio scoring; penalize waste, reward utilization; add jitter.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}