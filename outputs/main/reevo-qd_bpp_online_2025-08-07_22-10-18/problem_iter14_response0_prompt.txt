{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online Bin Packing.\n\n    Returns a score for each bin; higher score means more preferred.\n    Infeasible bins receive -inf.\n    The scoring combines a sigmoid bias towards tight fits, an exponential\n    penalty for waste, a boost for exact fits, and a tiny tie\u2011breaker.\n    Scores are min\u2011max normalised to [0, 1] for comparability.\n    \"\"\"\n    # Ensure a NumPy array of floats\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining capacity after placing the item\n    leftover = caps - item\n\n    # Feasibility mask: only bins that can accommodate the item\n    feasible = leftover >= 0\n\n    # Initialise all scores to -inf (infeasible)\n    scores = np.full_like(caps, -np.inf, dtype=float)\n\n    # If no feasible bins exist, return early\n    if not np.any(feasible):\n        return scores\n\n    # ----------------------------------------------------------------------\n    # Adaptive steepness based on current leftover distribution\n    # ----------------------------------------------------------------------\n    median_leftover = np.median(leftover[feasible])\n    base_alpha = 5.0            # base steepness for the sigmoid\n    eps = 1e-12\n    # Larger steepness when median leftover is small (tight\u2011fit regime)\n    alpha = base_alpha / (median_leftover + eps)\n    # Clamp to avoid extreme exponentials\n    alpha = np.clip(alpha, 0.1, 100.0)\n\n    # Use the same parameter for the exponential waste penalty\n    beta = alpha\n\n    # ----------------------------------------------------------------------\n    # Sigmoid component (tight\u2011fit bias)\n    # ----------------------------------------------------------------------\n    max_exp = 50.0  # clip exponent to keep np.exp stable\n    exp_arg = np.clip(alpha * leftover[feasible], 0.0, max_exp)\n    # 2/(1+exp(alpha * leftover)) yields 1 at leftover=0 and decays smoothly\n    sigmoid = 2.0 / (1.0 + np.exp(exp_arg))\n\n    # ----------------------------------------------------------------------\n    # Exponential waste penalty\n    # ----------------------------------------------------------------------\n    pen_exp_arg = np.clip(beta * leftover[feasible], 0.0, max_exp)\n    penalty = np.exp(pen_exp_arg)\n\n    # Combine components; lambda balances penalty strength (set to 1.0)\n    lam = 1.0\n    raw = sigmoid - lam * penalty\n\n    # ----------------------------------------------------------------------\n    # Boost exact fits\n    # ----------------------------------------------------------------------\n    exact_fit_tol = 1e-9\n    exact_fit_bonus = 10.0\n    exact_fit_mask = leftover[feasible] <= exact_fit_tol\n    raw[exact_fit_mask] += exact_fit_bonus\n\n    # ----------------------------------------------------------------------\n    # Normalise to [0, 1]\n    # ----------------------------------------------------------------------\n    min_raw = raw.min()\n    max_raw = raw.max()\n    if max_raw > min_raw:\n        norm_raw = (raw - min_raw) / (max_raw - min_raw)\n    else:\n        # All values equal (e.g., all exact fits); give them zero before tie\u2011break\n        norm_raw = np.zeros_like(raw)\n\n    # ----------------------------------------------------------------------\n    # Tiny tie\u2011breaker preferring lower\u2011index bins\n    # ----------------------------------------------------------------------\n    epsilon = 1e-12\n    feasible_indices = np.nonzero(feasible)[0]  # original indices of feasible bins\n    norm_raw = norm_raw - epsilon * feasible_indices.astype(float)\n\n    # Populate the final scores array\n    scores[feasible] = norm_raw\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid priority function for online bin packing.\n\n    For each currently open bin the function returns a score; higher scores\n    indicate a more desirable bin for placing ``item``. Bins that cannot\n    accommodate the item receive ``-inf`` so they are never selected. The\n    scoring uses a sigmoid whose steepness adapts to the dispersion of the\n    feasible residual capacities, employing a robust spread estimate (MAD).\n    A deterministic tiny bias breaks ties in favour of lower\u2011index bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Ensure a 1\u2011D float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.shape[0]\n\n    # No bins open \u2013 return empty array.\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Residual capacity after hypothetically placing the item.\n    residual = caps - item\n\n    # Feasibility mask: only bins with enough remaining capacity.\n    feasible = residual >= 0\n\n    # Initialise all scores to -inf (infeasible).\n    scores = np.full(n_bins= n_bins, fill_value=-np.inf, dtype=float) if False else np.full(n_bins, -np.inf, dtype=float)\n    # Actually, the above line is erroneous; correct implementation follows.\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return the -inf vector.\n    if not np.any(feasible):\n        return scores\n\n    # Residual capacities of feasible bins.\n    feas_res = residual[feasible]\n\n    # --- Robust spread estimation (MAD) ------------------------------------\n    median_res = np.median(feas_res)\n    mad = np.median(np.abs(feas_res - median_res))\n    # Convert MAD to an estimate of standard deviation for normal data.\n    spread = mad * 1.4826\n\n    # Fallback strategies if MAD is zero.\n    if spread <= 0.0:\n        std = np.std(feas_res)\n        if std > 0.0:\n            spread = std\n        else:\n            # Use range as last resort.\n            rng = np.max(feas_res) - np.min(feas_res)\n            spread = rng if rng > 0.0 else 1.0\n\n    # --- Adaptive sigmoid ----------------------------------------------------\n    # Base steepness factor (tunable). Larger spread \u2192 softer sigmoid.\n    base_steepness = 5.0\n    slope = base_steepness / spread\n\n    # Logistic function decreasing with residual capacity.\n    # score = 1 / (1 + exp(slope * residual))\n    exp_arg = np.clip(slope * residual[feasible], -700, 700)  # avoid overflow\n    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Assign scores to feasible bins.\n    scores[feasible] = scores_feas\n\n    # --- Deterministic tie\u2011breaker -----------------------------------------\n    # Tiny decreasing bias with index ensures stable ordering when scores tie.\n    epsilon = 1e-12\n    tie_bias = -np.arange(n_bins, dtype=float) * epsilon\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Reflection]\nPrefer MAD\u2011based spread, logistic scaling, deterministic tie\u2011breakers, minimal parameters, skip normalisation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}