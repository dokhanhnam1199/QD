{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Exploration probability for the epsilon\u2011greedy strategy\nEPSILON = 0.1\n\n    \"\"\"\n    Epsilon\u2011greedy priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of the remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score\n        will be selected. Bins that cannot accommodate the item are\n        assigned a very low priority (-\u221e).\n    \"\"\"\n    rng = np.random.default_rng()\n\n    # Exploration phase with probability EPSILON\n    if rng.random() < EPSILON:\n        # Generate uniform random scores for a purely random pick\n        return rng.random(bins_remain_cap.shape[0])\n\n    # Exploitation phase: best\u2011fit measure\n    leftover = bins_remain_cap - item\n    # Only bins that can hold the item are considered; others get -\u221e\n    priorities = np.where(leftover >= 0, leftover, -np.inf)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid\u2011based priority for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as `bins_remain_cap`).\n        Higher values indicate more desirable bins; infeasible bins are\n        represented by ``-inf``.\n    \"\"\"\n    # Ensure a NumPy float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.size\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Residual capacity after placing the item in each bin.\n    residual = caps - item\n    feasible = residual >= 0\n\n    # If nothing fits, return -inf for every bin.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Ratio of leftover after placement to the capacity before placement.\n    # Use np.where to avoid division by zero for caps == 0 (though infeasible).\n    ratio = np.where(caps > 0, residual / caps, 0.0)\n\n    # Median of feasible residuals to adapt steepness.\n    median_res = np.median(residual[feasible])\n    if median_res <= 0.0:\n        median_res = 1.0\n\n    # Steepness parameter.\n    base_slope = 10.0\n    slope = base_slope / median_res\n\n    # Sigmoid-like score that prefers small leftover ratio.\n    exp_arg = slope * ratio\n    exp_arg = np.clip(exp_arg, -700, 700)  # avoid overflow\n    sigmoid_score = 2.0 / (1.0 + np.exp(exp_arg))\n\n    # Exponential penalty for waste relative to item size.\n    eps_item = 1e-12\n    waste_ratio = residual / (item + eps_item)\n    penalty = np.exp(-5.0 * waste_ratio)\n\n    # Size weight (fraction of bin capacity taken by the item).\n    size_weight = np.where(caps > 0, item / caps, 0.0)\n\n    # Raw score.\n    raw_score = sigmoid_score * penalty * size_weight\n    raw_score = np.where(feasible, raw_score, -np.inf)\n\n    # Deterministic tie\u2011breaker: tiny negative bias favouring lower indices.\n    tie_bias = -np.arange(n_bins) * 1e-12\n    raw_score = np.where(raw_score > -np.inf, raw_score + tie_bias, raw_score)\n\n    return raw_score\n\n[Reflection]\nUse adaptive sigmoid scaling, weight by residual ratio, penalize waste, avoid overflow, tie\u2011break by index, add exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}