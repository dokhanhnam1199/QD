```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """
    Priority based on an epsilon‑greedy strategy for online Bin Packing.

    With probability 1‑ε, it exploits the best‑fit rule (select the bin
    that will have the smallest remaining capacity after adding the item).
    With probability ε it explores by assigning random priority scores to
    all feasible bins, allowing occasionally sub‑optimal choices.

    Parameters
    ----------
    item : float
        Size of the item to be inserted.
    bins_remain_cap : np.ndarray
        Remaining capacities of the current bins.
    epsilon : float, optional
        Exploration probability. Default is 0.1.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher scores mean higher priority).
    """
    # Ensure inputs are floating point arrays
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    item = float(item)

    # Identify bins that can accommodate the item
    fit_mask = bins_remain_cap >= item

    # ----- Exploitation (Best‑Fit) -----
    # Lower leftover after packing = better -> higher priority via negative leftover
    leftover = bins_remain_cap - item
    priorities = np.where(fit_mask, -leftover, -np.inf)

    # ----- Exploration -----
    if np.random.rand() < epsilon:
        random_scores = np.random.random(bins_remain_cap.shape)
        priorities = np.where(fit_mask, random_scores, -np.inf)

    return priorities
```
