```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Creative Worst‑Fit priority function for online Bin Packing.

    The function assigns a high score to bins that would retain the most free
    space after the item is placed. Bins that cannot accommodate the item are
    given a score of -inf so they are never selected. A tiny random perturbation
    is added as a tie‑breaker to avoid deterministic locking when multiple bins
    have exactly the same remaining capacity.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array containing the remaining capacity of each bin.

    Returns:
        A 1‑D numpy array of priority scores (same shape as bins_remain_cap).
    """
    # Compute the free space that would remain after inserting the item.
    post_remain = bins_remain_cap - item

    # Feasible bins keep their leftover space; infeasible ones get -inf.
    base_priority = np.where(post_remain >= 0, post_remain, -np.inf)

    # Tiny random tie‑breaker (scaled to the magnitude of capacities).
    # The epsilon ensures the ordering of distinct priorities stays unchanged.
    epsilon = 1e-6
    random_noise = epsilon * np.random.rand(bins_remain_cap.size) * (
        bins_remain_cap / (bins_remain_cap.max() + 1e-9)
    )

    priorities = base_priority + random_noise
    return priorities
```
