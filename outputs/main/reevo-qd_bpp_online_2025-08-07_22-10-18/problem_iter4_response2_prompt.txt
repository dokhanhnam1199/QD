{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# ----------------------------------------------------------------------\n# Global state for adaptive behavior (maintained across calls)\n# ----------------------------------------------------------------------\n_call_counter: int = 0          # Number of items processed so far\n_total_item_size: float = 0.0   # Cumulative size of all processed items\n\n# Exploration parameters (epsilon\u2011greedy)\n_EPSILON0: float = 0.2          # Initial exploration probability\n_MIN_EPSILON: float = 0.01      # Lower bound for exploration\n_DECAY_RATE: float = 0.001      # Exponential decay rate of epsilon\n\n    \"\"\"\n    Adaptive deterministic priority for the online Bin Packing Problem.\n\n    Scoring combines several desiderata:\n      * **Deterministic best\u2011fit** \u2013 bins that leave the smallest leftover\n        after placing the item receive higher scores.\n      * **Item\u2011size distribution awareness** \u2013 bins whose leftover would be\n        far larger than the average observed item size are penalised.\n      * **Exploration** \u2013 an epsilon\u2011greedy component whose probability decays\n        over time, allowing occasional random choices early on.\n      * **Infeasibility handling** \u2013 bins that cannot accommodate the item are\n        assigned -inf so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of all currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better). Bins that cannot hold\n        the item receive -np.inf.\n    \"\"\"\n    global _call_counter, _total_item_size\n\n    # ------------------------------------------------------------------\n    # Update online statistics\n    # ------------------------------------------------------------------\n    _call_counter += 1\n    _total_item_size += item\n    avg_item_size = _total_item_size / _call_counter\n\n    # ------------------------------------------------------------------\n    # Compute dynamic epsilon (decays exponentially, never below _MIN_EPSILON)\n    # ------------------------------------------------------------------\n    epsilon = max(_MIN_EPSILON, _EPSILON0 * np.exp(-_DECAY_RATE * _call_counter))\n\n    rng = np.random.default_rng()\n\n    # ------------------------------------------------------------------\n    # Exploration branch: choose a random feasible bin with probability epsilon\n    # ------------------------------------------------------------------\n    if rng.random() < epsilon:\n        feasible = bins_remain_cap >= item\n        random_scores = rng.random(bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n\n    # ------------------------------------------------------------------\n    # Deterministic scoring branch\n    # ------------------------------------------------------------------\n    leftover = bins_remain_cap - item\n    feasible = leftover >= 0\n\n    # Avoid division by zero in the inverse\u2011leftover term\n    eps = 1e-12\n\n    # Base best\u2011fit score: larger when leftover is smaller\n    base_score = np.where(feasible, 1.0 / (leftover + eps), -np.inf)\n\n    # Distribution\u2011aware penalty:\n    #   If the leftover is significantly larger than the average item size,\n    #   we reduce the priority. This discourages leaving large gaps that are\n    #   unlikely to be filled by typical future items.\n    excess = np.maximum(0.0, leftover - avg_item_size)\n    alpha = 0.5          # Penalty weight (tunable)\n    penalty = alpha * excess\n\n    # Final priority: high base score minus penalty\n    priorities = np.where(feasible, base_score - penalty, -np.inf)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Deterministic best\u2011fit with exact\u2011fit boost for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  The bin with the highest score\n        will be selected for placement.  Bins that cannot accommodate\n        the item receive a priority of -np.inf.\n    \"\"\"\n    # Ensure the input is a NumPy array of floats\n    bins = np.asarray(bins_remain_cap, dtype=float)\n\n    # Early exit for empty bin list\n    if bins.size == 0:\n        return np.array([], dtype=float)\n\n    # Initialize all priorities to -inf (infeasible bins)\n    priorities = np.full(bins.shape, -np.inf, dtype=float)\n\n    # Find bins that can hold the item\n    fit_mask = bins >= item\n    if not np.any(fit_mask):\n        # No bin can accommodate the item\n        return priorities\n\n    # Compute leftover capacity if the item were placed in each feasible bin\n    leftovers = bins[fit_mask] - item\n\n    # Base score: prefer bins with the smallest leftover (best\u2011fit principle)\n    base_score = -leftovers\n\n    # Identify exact fits within a small tolerance\n    exact_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Boost factor for exact fits\n    BOOST = 1e6  # large constant to guarantee exact fits outrank others\n\n    # Apply boost to exact fit bins\n    final_score = base_score.copy()\n    final_score[exact_mask] += BOOST\n\n    # Assign computed scores back to the corresponding bins\n    priorities[fit_mask] = final_score\n\n    return priorities\n\n[Reflection]\nDeterministic best\u2011fit, boost exact fits, avoid randomness, simple leftover score, assign -inf to infeasible bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}