```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive sigmoid priority for online bin packing.

    The function returns a score for each bin; higher scores indicate more
    desirable bins for placing the incoming ``item``. The scoring uses a smooth
    sigmoid that adapts its steepness to the dispersion of feasible residual
    capacities, avoiding hard thresholds. Infeasible bins receive ``-inf``.
    A tiny deterministic tie‑breaker favours lower‑index bins when scores are
    otherwise equal.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Array of priority scores (same shape as ``bins_remain_cap``).
    """
    # Ensure a 1‑D float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.shape[0]

    # Empty case.
    if n_bins == 0:
        return np.empty(0, dtype=float)

    # Residual capacity after packing the item.
    residual = caps - item

    # Feasibility mask.
    feasible = residual >= 0

    # Initialise all scores to -inf (infeasible).
    scores = np.full(n_bins, -np.inf, dtype=float)

    # If no bin can accommodate the item, return the -inf vector.
    if not np.any(feasible):
        return scores

    # Residual capacities of feasible bins.
    feas_res = residual[feasible]

    # --- Adaptive steepness -------------------------------------------------
    # Robust spread estimator: Median Absolute Deviation (MAD).
    median_res = np.median(feas_res)
    mad = np.median(np.abs(feas_res - median_res))
    # Convert MAD to an estimate of standard deviation (for normal data).
    spread = mad * 1.4826

    # Fallback strategies if MAD is zero.
    if spread <= 0.0:
        std = np.std(feas_res)
        if std > 0.0:
            spread = std
        else:
            # Use range as last resort.
            rng = np.max(feas_res) - np.min(feas_res)
            spread = rng if rng > 0.0 else 1.0

    # Base steepness factor (tunable). Larger spread → softer sigmoid.
    base_steepness = 5.0
    slope = base_steepness / spread

    # --- Sigmoid scoring ----------------------------------------------------
    # Logistic function decreasing with residual.
    # score = 1 / (1 + exp(slope * residual))
    # Clip exponent to avoid overflow/underflow.
    exp_arg = np.clip(slope * residual[feasible], -700, 700)
    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))

    # Assign scores to feasible bins.
    scores[feasible] = scores_feas

    # --- Deterministic tie‑breaker -----------------------------------------
    # Tiny decreasing bias with index ensures stable ordering when scores tie.
    epsilon = 1e-12
    tie_bias = -np.arange(n_bins, dtype=float) * epsilon
    scores = np.where(scores > -np.inf, scores + tie_bias, scores)

    return scores
```
