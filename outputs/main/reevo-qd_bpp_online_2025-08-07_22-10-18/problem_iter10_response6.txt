```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive sigmoid priority for online bin packing.

    Returns a score for each bin; higher scores indicate more desirable bins
    for placing the incoming ``item``. Infeasible bins receive ``-inf``.
    The sigmoid steepness adapts to the dispersion of feasible residual
    capacities using the Median Absolute Deviation (MAD). A tiny deterministic
    tie‑breaker favours lower‑index bins when scores are otherwise equal.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array (or array‑like) of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Array of priority scores (same shape as ``bins_remain_cap``).
    """
    # Ensure a 1‑D float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.shape[0]

    # Empty input handling.
    if n_bins == 0:
        return np.empty(0, dtype=float)

    # Residual capacity after placing the item.
    residual = caps - item

    # Feasibility mask.
    feasible: np.ndarray = residual >= 0

    # Initialise all scores to -inf (infeasible).
    scores = np.full(n_bins, -np.inf, dtype=float)

    # If no feasible bin exists, return early.
    if not feasible.any():
        return scores

    # Residual capacities of feasible bins.
    feas_res = residual[feasible]

    # ----------------------------------------------------------------------
    # Adaptive steepness via Median Absolute Deviation (MAD)
    # ----------------------------------------------------------------------
    median_res = np.median(feas_res)
    mad = np.median(np.abs(feas_res - median_res))
    # Convert MAD to an estimate of standard deviation (for normal data).
    spread = mad * 1.4826

    # Fallback for degenerate cases (zero spread).
    if spread <= 0.0:
        spread = 1e-6  # minimal positive spread to avoid division by zero

    # Base steepness factor (tunable). Larger spread → softer sigmoid.
    base_steepness = 5.0
    slope = base_steepness / spread

    # ----------------------------------------------------------------------
    # Sigmoid scoring (higher score for tighter fits)
    # ----------------------------------------------------------------------
    # Logistic function decreasing with residual: score = 1 / (1 + exp(slope * residual))
    # Clip exponent to avoid overflow/underflow.
    exp_arg = np.clip(slope * residual[feasible], -700, 700)
    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))

    # Assign scores to feasible bins.
    scores[feasible] = scores_feas

    # ----------------------------------------------------------------------
    # Deterministic tie‑breaker (tiny bias favouring lower indices)
    # ----------------------------------------------------------------------
    epsilon = 1e-12
    tie_bias = -np.arange(n_bins, dtype=float) * epsilon
    scores = np.where(scores > -np.inf, scores + tie_bias, scores)

    return scores
```
