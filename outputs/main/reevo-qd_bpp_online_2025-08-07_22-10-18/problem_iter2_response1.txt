```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for online Bin Packing.

    The bin that leaves the smallest remaining capacity after the item
    is placed receives the highest priority. Bins that cannot accommodate
    the item are assigned -np.inf and will never be chosen. A tiny
    tie‑breaker based on the bin index ensures stable selection when
    leftovers are equal.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array containing the remaining capacities of each open bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher = more preferred).
    """
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Space left if the item were placed in each bin
    leftover = caps - item

    # Priorities: negative leftover (smaller leftover -> higher priority)
    # Infeasible bins get -inf
    priorities = np.where(leftover >= 0, -leftover, -np.inf)

    # Tiny tie‑breaker: lower index gets a marginally higher priority
    epsilon = 1e-9
    priorities += -epsilon * np.arange(priorities.size)

    return priorities
```
