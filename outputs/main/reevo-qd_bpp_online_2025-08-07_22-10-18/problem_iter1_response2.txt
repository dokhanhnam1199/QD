```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Worst‑Fit priority for the online Bin Packing Problem.

    For each bin we compute a score that prefers bins with the *most*
    remaining capacity that can still accommodate the incoming item.
    Bins that are too small receive a score of -inf so they will never be
    selected. A tiny random jitter is added to break ties deterministically.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of the currently open bins.

    Returns:
        An array of the same shape as `bins_remain_cap` with priority scores.
        The bin with the highest score should be chosen.
    """
    # Compute post‑packing remaining capacity (still monotonic with pre‑packing)
    post_remain = bins_remain_cap - item

    # Feasibility mask: bin can hold the item if post_remain >= 0
    feasible = post_remain >= 0

    # Base priority: larger remaining space -> higher priority (worst fit)
    # Use -inf for infeasible bins so they are never selected.
    priorities = np.where(feasible, post_remain, -np.inf)

    # Tiny random jitter (≈1e‑12) to break ties without affecting order
    # Only apply jitter to feasible bins to keep -inf untouched.
    if feasible.any():
        jitter = np.random.rand(*bins_remain_cap.shape) * 1e-12
        priorities = np.where(feasible, priorities + jitter, priorities)

    return priorities
```
