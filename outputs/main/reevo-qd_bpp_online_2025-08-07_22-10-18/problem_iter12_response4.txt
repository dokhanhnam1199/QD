```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.05,
    base_slope: float = 12.0,
    waste_alpha: float = 5.0,
    random_state: None | int | np.random.Generator = None,
) -> np.ndarray:
    """
    Adaptive priority function for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the currently open bins.
    epsilon : float, optional
        Probability of exploration (default 0.05).
    base_slope : float, optional
        Base slope for the sigmoid scaling (default 12.0).
    waste_alpha : float, optional
        Weight for the waste penalty (default 5.0).
    random_state : int or np.random.Generator, optional
        Seed or generator for reproducible randomness.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; infeasible bins receive -np.inf.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)
    n_bins = caps.size
    if n_bins == 0:
        return np.array([], dtype=float)

    # RNG
    if isinstance(random_state, np.random.Generator):
        rng = random_state
    else:
        rng = np.random.default_rng(random_state)

    # Exploration phase
    if rng.random() < epsilon:
        scores = rng.random(n_bins)
        feasible = caps >= item
        scores[~feasible] = -np.inf
        scores -= np.arange(n_bins) * 1e-12  # deterministic tie‑breaker
        return scores

    # Exploitation phase
    residual = caps - item
    feasible = residual >= 0

    if not np.any(feasible):
        return np.full_like(caps, -np.inf, dtype=float)

    # Residual ratio: smaller is better
    ratio = np.where(caps > 0, residual / caps, 0.0)

    # Adaptive slope based on median residual of feasible bins
    median_res = np.median(residual[feasible])
    median_res = median_res if median_res > 0 else 1.0
    slope = base_slope / median_res

    # Sigmoid‑style score decreasing with residual ratio
    exp_arg = slope * ratio
    exp_arg = np.clip(exp_arg, -700, 700)
    sigmoid_score = 1.0 / (1.0 + np.exp(exp_arg))

    # Waste penalty: prefer bins with smaller leftover relative to the item
    eps = 1e-12
    waste_ratio = residual / (item + eps)
    waste_penalty = np.exp(-waste_alpha * waste_ratio)

    # Utilization weight: fraction of bin capacity taken by the item
    utilization = np.where(caps > 0, item / caps, 0.0)

    # Combine components multiplicatively (all in [0,1])
    raw_score = sigmoid_score * waste_penalty * utilization
    raw_score[~feasible] = -np.inf

    # Deterministic tie‑breaker: tiny decreasing bias with index
    raw_score -= np.arange(n_bins) * 1e-12

    return raw_score
```
