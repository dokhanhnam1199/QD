{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive priority for online bin packing.\n\n    - Scores only feasible bins (remaining capacity >= item).\n    - Uses a sharp sigmoid centred at a small residual threshold to\n      boost exact or near\u2011exact fits.\n    - Penalises waste exponentially based on the normalised leftover.\n    - Adds a decaying epsilon random perturbation for exploration.\n    - Deterministic tie\u2011breaker via a tiny bias favouring lower indices.\n    - Infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable). Shape matches\n        `bins_remain_cap`.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    if caps.size == 0:\n        return np.array([], dtype=float)\n\n    # Residual capacity after placing the item in each bin.\n    residual = caps - item\n    feasible = residual >= 0\n\n    # If nothing fits, penalise all bins.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Estimate bin capacity (assume at least one empty bin exists).\n    bin_capacity = np.max(caps)\n    if bin_capacity <= 0:\n        # Fallback: use the largest possible capacity inferred from residuals.\n        bin_capacity = np.max(caps + residual)\n    if bin_capacity <= 0:\n        bin_capacity = 1.0  # safety fallback\n\n    # Normalised residual (relative waste).\n    norm_res = residual / bin_capacity\n\n    # Adaptive sigmoid steepness based on spread of feasible residuals.\n    feasible_res = residual[feasible]\n    spread = np.std(feasible_res)\n    if spread <= 0.0:\n        spread = np.ptp(feasible_res)  # range as fallback\n    if spread <= 0.0:\n        spread = 1.0\n\n    base_steepness = 10.0  # tunable: larger \u2192 sharper transition\n    slope = base_steepness / spread\n\n    # Threshold for a \u201ctight\u201d fit (e.g., 5\u202f% of bin capacity).\n    tight_threshold = 0.05 * bin_capacity\n\n    # Sharp sigmoid: high score for residual << tight_threshold, low otherwise.\n    # sigmoid(x) = 1 / (1 + exp(slope * (x - tight_threshold)))\n    exp_arg = slope * (residual - tight_threshold)\n    exp_arg = np.clip(exp_arg, -700, 700)  # avoid overflow\n    sigmoid_score = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Exponential waste penalty: larger residual \u2192 stronger penalty.\n    alpha = 5.0  # tunable\n    waste_penalty = np.exp(alpha * norm_res)  # >= 1\n    base_score = sigmoid_score / waste_penalty\n\n    # Infeasible bins get -inf.\n    scores = np.where(feasible, base_score, -np.inf)\n\n    # --- Decaying epsilon exploration ---\n    # Initialise static call counter.\n    if not hasattr(priority_v2, \"_call_count\"):\n        priority_v2._call_count = 0\n    priority_v2._call_count += 1\n\n    # Epsilon decays as 1/sqrt(call_count) (adjustable schedule).\n    epsilon0 = 0.01\n    epsilon = epsilon0 / np.sqrt(priority_v2._call_count)\n\n    # Add small random perturbation to feasible scores.\n    noise = np.random.rand(caps.shape[0]) * epsilon\n    scores = np.where(feasible, scores + noise, scores)\n\n    # --- Deterministic tie\u2011breaker (tiny bias for lower index) ---\n    tie_bias = -np.arange(caps.shape[0]) * 1e-12\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Best\u2011Fit priority for online Bin Packing.\n\n    The bin that leaves the smallest remaining capacity after receiving the\n    *item* gets the highest priority. Bins that cannot accommodate the item\n    receive a very low (\u2011inf) priority and will never be selected.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each existing bin.\n\n    Returns:\n        NumPy array with a priority score for each bin (higher means more\n        preferred). The shape matches ``bins_remain_cap``.\n    \"\"\"\n    # Work in floating point to safely use -inf for infeasible bins.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining space after the item would be placed.\n    leftover = caps - item\n\n    # Assign priority: bins that can fit the item get -leftover (higher for\n    # smaller leftover). Infeasible bins get -inf.\n    priorities = np.where(leftover >= 0, -leftover, -np.inf)\n\n    # Tiny tie\u2011breaker: favor lower\u2011index bins when leftover is identical.\n    # This epsilon is far smaller than any realistic leftover value.\n    epsilon = 1e-9\n    tie_break = -epsilon * np.arange(priorities.size)\n    priorities = priorities + tie_break\n\n    return priorities\n\n[Reflection]\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}