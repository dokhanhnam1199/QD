{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Exploration probability for the epsilon\u2011greedy strategy\nEPSILON = 0.1\n\n    \"\"\"\n    Epsilon\u2011greedy priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of the remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score\n        will be selected. Bins that cannot accommodate the item are\n        assigned a very low priority (-\u221e).\n    \"\"\"\n    rng = np.random.default_rng()\n\n    # Exploration phase with probability EPSILON\n    if rng.random() < EPSILON:\n        # Generate uniform random scores for a purely random pick\n        return rng.random(bins_remain_cap.shape[0])\n\n    # Exploitation phase: best\u2011fit measure\n    leftover = bins_remain_cap - item\n    # Only bins that can hold the item are considered; others get -\u221e\n    priorities = np.where(leftover >= 0, leftover, -np.inf)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.05,\n    base_slope: float = 12.0,\n    waste_alpha: float = 5.0,\n    random_state=None,\n) -> np.ndarray:\n    \"\"\"\n    Adaptive sigmoid\u2011based priority for online bin packing with\n    epsilon\u2011greedy exploration.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    base_slope : float, optional\n        Base steepness for the sigmoid scaling (default 12.0).\n    waste_alpha : float, optional\n        Penalty factor for waste relative to the item size (default 5.0).\n    random_state : int or np.random.Generator, optional\n        Seed or generator for reproducible randomness.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins receive -inf.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.size\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # RNG handling\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    # ---------- Exploration ----------\n    if rng.random() < epsilon:\n        # Uniform random scores for feasible bins, -inf for infeasible.\n        rand_scores = rng.random(n_bins)\n        feasible = caps >= item\n        rand_scores[~feasible] = -np.inf\n        # Tiny deterministic bias to break ties by index.\n        rand_scores += -np.arange(n_bins) * 1e-12\n        return rand_scores\n\n    # ---------- Exploitation ----------\n    residual = caps - item\n    feasible = residual >= 0\n\n    # No bin can accommodate the item.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Residual ratio (leftover / capacity). Smaller = better fit.\n    ratio = np.where(caps > 0, residual / caps, 0.0)\n\n    # Adaptive sigmoid steepness based on median feasible residual.\n    median_res = np.median(residual[feasible])\n    median_res = median_res if median_res > 0 else 1.0\n    slope = base_slope / median_res\n\n    # Sigmoid\u2011like score that prefers small leftover ratios.\n    exp_arg = slope * ratio\n    exp_arg = np.clip(exp_arg, -700, 700)           # avoid overflow\n    sigmoid_score = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Exponential penalty for waste relative to the item size.\n    eps = 1e-12\n    waste_ratio = residual / (item + eps)\n    waste_penalty = np.exp(-waste_alpha * waste_ratio)\n\n    # Utilization weight: fraction of bin capacity taken by the item.\n    utilization = np.where(caps > 0, item / caps, 0.0)\n\n    # Combine components multiplicatively (all in [0,1]).\n    raw_score = sigmoid_score * waste_penalty * utilization\n\n    # Mask infeasible bins.\n    raw_score = np.where(feasible, raw_score, -np.inf)\n\n    # Deterministic tie\u2011breaker: tiny decreasing bias with index.\n    raw_score += -np.arange(n_bins) * 1e-12\n\n    return raw_score\n\n[Reflection]\nAdd adaptive scaling, waste penalty, utilization factor, deterministic tie\u2011breaker, and low\u2011epsilon exploration for robust priority scoring.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}