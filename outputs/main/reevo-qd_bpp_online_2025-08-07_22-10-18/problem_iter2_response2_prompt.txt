{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Exploration probability for the epsilon\u2011greedy strategy\nEPSILON = 0.1\n\n    \"\"\"\n    Epsilon\u2011greedy priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of the remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score\n        will be selected. Bins that cannot accommodate the item are\n        assigned a very low priority (-\u221e).\n    \"\"\"\n    rng = np.random.default_rng()\n\n    # Exploration phase with probability EPSILON\n    if rng.random() < EPSILON:\n        # Generate uniform random scores for a purely random pick\n        return rng.random(bins_remain_cap.shape[0])\n\n    # Exploitation phase: best\u2011fit measure\n    leftover = bins_remain_cap - item\n    # Only bins that can hold the item are considered; others get -\u221e\n    priorities = np.where(leftover >= 0, leftover, -np.inf)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Exact\u2011Fit\u2011First priority function for online Bin Packing.\n    \n    Bins where the item fits exactly receive the highest priority (infinite).\n    Among the remaining bins that can accommodate the item, those that leave the\n    smallest waste (i.e., smallest remaining capacity after insertion) receive\n    higher priority, proportional to 1 / waste.\n    Bins that cannot accommodate the item get a very low (\u2212inf) priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher = more preferred).\n    \"\"\"\n    # Ensure a NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute the waste that would remain after placing the item\n    waste = bins_remain_cap - item\n\n    # Floating\u2011point tolerance for equality checks\n    atol = 1e-9\n\n    # Masks\n    exact_fit_mask = np.isclose(waste, 0.0, atol=atol)      # exact fits\n    can_fit_mask   = waste >= -atol                         # fits (including exact)\n\n    # Initialize all priorities to \u2212inf (cannot fit)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Exact fits get the highest possible priority\n    priorities[exact_fit_mask] = np.inf\n\n    # Non\u2011exact but feasible bins get priority inversely proportional to waste\n    # (smaller waste \u2192 larger priority). Small epsilon avoids division by zero.\n    epsilon = 1e-12\n    non_exact_mask = can_fit_mask & ~exact_fit_mask\n    priorities[non_exact_mask] = 1.0 / (waste[non_exact_mask] + epsilon)\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, rank others by\u202f1/waste, drop epsilon\u2011greedy randomness, add tolerance and epsilon for stability.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}