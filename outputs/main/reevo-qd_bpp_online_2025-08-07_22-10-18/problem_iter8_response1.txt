```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute deterministic best‑fit priority scores for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of existing bins.

    Returns
    -------
    np.ndarray
        Priority score for each bin. Bins that cannot accommodate the item
        receive ``-np.inf``. Higher scores are more preferred. The shape matches
        ``bins_remain_cap``.
    """
    # Ensure we work with a float array to safely use -inf
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Compute leftover capacity if item placed
    leftover = caps - item

    # Feasible bins: leftover >= 0
    # Priority: -leftover (higher for tighter fit). Infeasible: -inf
    priorities = np.where(leftover >= 0, -leftover, -np.inf)

    # Deterministic tie‑breaker: favor lower index bins
    # Use a tiny epsilon; choose epsilon smaller than any realistic capacity difference
    epsilon = 1e-9
    indices = np.arange(priorities.size)
    priorities -= epsilon * indices

    return priorities
```
