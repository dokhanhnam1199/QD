```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Compute priority scores for bins in online bin packing.
    
    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of existing bins.
    
    Returns
    -------
    np.ndarray
        Priority scores, one per bin. Higher values indicate higher preference.
        Feasible bins are normalised to [0, 1]; infeasible bins get -np.inf.
    """
    # Early exit for empty input
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=float)

    caps = np.asarray(bins_remain_cap, dtype=float)
    leftover = caps - item
    feasible = leftover >= 0

    # Compute leftover ratio safely, handling zero capacities
    ratio = np.where(feasible & (caps > 0), leftover / caps, 0.0)

    # Assign a raw priority: higher when leftover ratio is smaller
    raw_priority = np.full_like(caps, -np.inf, dtype=float)
    raw_priority[feasible] = -ratio[feasible]

    # Normalise feasible priorities to [0, 1]
    if np.any(feasible):
        min_f = raw_priority[feasible].min()
        max_f = raw_priority[feasible].max()
        span = max_f - min_f
        if span > 0:
            norm_priority = (raw_priority - min_f) / span
        else:
            norm_priority = raw_priority - min_f  # all zeros
    else:
        norm_priority = raw_priority

    # Tie‑breaker: slightly favour lower‑index bins
    epsilon = 1e-9
    tie_breaker = -epsilon * np.arange(len(norm_priority))
    priorities = norm_priority + tie_breaker

    return priorities
```
