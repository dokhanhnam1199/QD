{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin using a Sigmoid Fit Score strategy.\n    Bins that cannot accommodate the item receive a very low priority (-inf).\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be packed.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores for each bin.  The bin with the highest\n        priority score will be chosen to store the item.\n    \"\"\"\n    # Ensure numeric types for accurate arithmetic\n    rem = bins_remain_cap.astype(float, copy=False)\n\n    # Mask of bins that can actually fit the item\n    fit_mask = rem >= item\n\n    # Initialize all priorities with negative infinity (bins that cannot fit)\n    priorities = np.full_like(rem, -np.inf, dtype=float)\n\n    if not np.any(fit_mask):\n        return priorities  # no bin can fit the item\n\n    # Compute the difference between remaining capacity and the item size\n    diff = rem[fit_mask] - item\n\n    # The fill ratio after placing the item: value in (0, 1]\n    fill_ratio = 1.0 - diff / rem[fit_mask]\n\n    # Logistic (sigmoid) transformation to obtain a smooth prioritization\n    # Good fit (fill_ratio close to 1) \u2192 score close to 1\n    # Poor fit (small fill_ratio)   \u2192 score close to 0\n    k = 12.0  # Steepness of the sigmoid\n    sigmoid = 1.0 / (1.0 + np.exp(-k * (fill_ratio - 0.5)))\n\n    priorities[fit_mask] = sigmoid\n\n    return priorities\n\n[Reflection]\nEncode fit quality, penalize infeasible bins, apply smooth monotonic scoring, tune sigmoid steepness, prioritize tighter fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}