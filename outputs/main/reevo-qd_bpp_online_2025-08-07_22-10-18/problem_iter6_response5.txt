```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.05,
    base_slope: float = 12.0,
    waste_alpha: float = 5.0,
    random_state=None,
) -> np.ndarray:
    """
    Adaptive sigmoid‑based priority for online bin packing with
    epsilon‑greedy exploration.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.
    epsilon : float, optional
        Exploration probability (default 0.05).
    base_slope : float, optional
        Base steepness for the sigmoid scaling (default 12.0).
    waste_alpha : float, optional
        Penalty factor for waste relative to the item size (default 5.0).
    random_state : int or np.random.Generator, optional
        Seed or generator for reproducible randomness.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; infeasible bins receive -inf.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)
    n_bins = caps.size
    if n_bins == 0:
        return np.array([], dtype=float)

    # RNG handling
    if isinstance(random_state, np.random.Generator):
        rng = random_state
    else:
        rng = np.random.default_rng(random_state)

    # ---------- Exploration ----------
    if rng.random() < epsilon:
        # Uniform random scores for feasible bins, -inf for infeasible.
        rand_scores = rng.random(n_bins)
        feasible = caps >= item
        rand_scores[~feasible] = -np.inf
        # Tiny deterministic bias to break ties by index.
        rand_scores += -np.arange(n_bins) * 1e-12
        return rand_scores

    # ---------- Exploitation ----------
    residual = caps - item
    feasible = residual >= 0

    # No bin can accommodate the item.
    if not np.any(feasible):
        return np.full_like(caps, -np.inf, dtype=float)

    # Residual ratio (leftover / capacity). Smaller = better fit.
    ratio = np.where(caps > 0, residual / caps, 0.0)

    # Adaptive sigmoid steepness based on median feasible residual.
    median_res = np.median(residual[feasible])
    median_res = median_res if median_res > 0 else 1.0
    slope = base_slope / median_res

    # Sigmoid‑like score that prefers small leftover ratios.
    exp_arg = slope * ratio
    exp_arg = np.clip(exp_arg, -700, 700)           # avoid overflow
    sigmoid_score = 1.0 / (1.0 + np.exp(exp_arg))

    # Exponential penalty for waste relative to the item size.
    eps = 1e-12
    waste_ratio = residual / (item + eps)
    waste_penalty = np.exp(-waste_alpha * waste_ratio)

    # Utilization weight: fraction of bin capacity taken by the item.
    utilization = np.where(caps > 0, item / caps, 0.0)

    # Combine components multiplicatively (all in [0,1]).
    raw_score = sigmoid_score * waste_penalty * utilization

    # Mask infeasible bins.
    raw_score = np.where(feasible, raw_score, -np.inf)

    # Deterministic tie‑breaker: tiny decreasing bias with index.
    raw_score += -np.arange(n_bins) * 1e-12

    return raw_score
```
