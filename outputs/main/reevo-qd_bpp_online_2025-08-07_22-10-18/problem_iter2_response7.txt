```python
import numpy as np

def priority_v2sorted(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic Best‑Fit priority for online Bin Packing.

    The function assigns higher scores to bins that will have the smallest
    leftover capacity after placing ``item`` (i.e., best‑fit).  Infeasible bins
    receive -inf so they are never selected.  A tiny tie‑breaker based on the
    bin index ensures a deterministic choice when several bins have identical
    leftover space.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``). The
        caller should select the bin with the highest priority.
    """
    # Ensure we work with a float array.
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Compute the prospective leftover capacity after placing the item.
    leftover = bins_remain_cap - item

    # Feasibility mask: only bins that can accommodate the item.
    feasible = leftover >= 0

    # Base priority: -leftover (smaller leftover → larger priority).
    # Infeasible bins get -inf.
    priorities = np.where(feasible, -leftover, -np.inf)

    # Tiny deterministic tie‑breaker: prefer lower index when priorities tie.
    if priorities.size:
        eps = np.finfo(priorities.dtype).eps
        tie_break = np.arange(priorities.size, dtype=priorities.dtype) * eps
        # Subtract tie_break so that lower indices have slightly higher priority.
        priorities = priorities - tie_break

    return priorities
```
