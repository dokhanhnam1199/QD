{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global state for adaptive behavior (maintained across calls)\n_call_counter: int = 0          # Number of items processed so far\n_total_item_size: float = 0.0   # Cumulative size of all processed items\n\n# Adaptive parameters\n_ALPHA0: float = 0.3            # Base penalty weight for large leftovers\n_ALPHA_DECAY: float = 500.0     # Controls how fast the penalty weight grows\n_K0: float = 8.0                # Base steepness of the sigmoid\n_K_DECAY: float = 500.0         # Controls how fast the sigmoid steepness grows\n\n\n    \"\"\"\n    Compute deterministic priority scores for each bin using an adaptive\n    sigmoid fit strategy with a penalty for large leftovers.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores for each bin.  Bins that cannot accommodate\n        the item receive -np.inf and are never selected.\n    \"\"\"\n    global _call_counter, _total_item_size\n\n    # ------------------------------------------------------------------\n    # Update online statistics\n    # ------------------------------------------------------------------\n    _call_counter += 1\n    _total_item_size += item\n    avg_item_size = _total_item_size / _call_counter\n\n    # Ensure numeric types for accurate arithmetic\n    rem = bins_remain_cap.astype(float, copy=False)\n\n    # Mask of bins that can actually fit the item\n    fit_mask = rem >= item\n\n    # Initialize all priorities with negative infinity (bins that cannot fit)\n    priorities = np.full_like(rem, -np.inf, dtype=float)\n\n    if not np.any(fit_mask):\n        return priorities  # no bin can fit the item\n\n    # Compute leftover after placing the item\n    leftover = rem - item\n\n    # Fit ratio after placing the item (fraction of bin that is filled)\n    fit_ratio = 1.0 - leftover / rem\n\n    # Adaptive sigmoid parameters (increase over time)\n    k = _K0 * (_call_counter / (_call_counter + _K_DECAY))\n    alpha = _ALPHA0 * (_call_counter / (_call_counter + _ALPHA_DECAY))\n\n    # Logistic (sigmoid) transformation to obtain a smooth prioritization\n    # Good fit (fit_ratio close to 1) \u2192 score close to 1\n    # Poor fit (fit_ratio close to 0)   \u2192 score close to 0\n    sigmoid = 1.0 / (1.0 + np.exp(-k * (fit_ratio - 0.5)))\n\n    # Penalty for large leftover relative to bin capacity\n    penalty = alpha * (leftover / rem)\n\n    # Final priority: high sigmoid minus penalty\n    scores = sigmoid - penalty\n\n    # Assign scores to the corresponding bins\n    priorities[fit_mask] = scores[fit_mask]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid priority for online bin packing.\n\n    Gives higher priority to bins that accommodate the item tightly.\n    The steepness of the sigmoid is calibrated to the spread of feasible\n    residual capacities, ensuring a balanced exploitation of tight fits\n    across different instance scales. Infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as `bins_remain_cap`).\n        Higher values indicate more desirable bins; infeasible bins are\n        penalised with -inf.\n    \"\"\"\n    # Ensure a NumPy float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    if caps.size == 0:\n        return np.array([], dtype=float)\n\n    # Residual capacity after placing the item in each bin.\n    residual = caps - item\n\n    # Feasibility mask.\n    feasible = residual >= 0\n\n    # If nothing fits, return -inf for every bin.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Residuals of feasible bins.\n    feasible_res = residual[feasible]\n\n    # Adaptive steepness: based on the more robust spread of feasible residuals.\n    # Use standard deviation; fall back to range if std is zero.\n    std = np.std(feasible_res)\n    if std <= 0.0:\n        spread = np.max(feasible_res) - np.min(feasible_res)\n        std = spread if spread > 0.0 else 1.0\n\n    # Base steepness factor (tunable). Larger std \u2192 softer sigmoid.\n    base_steepness = 5.0\n    slope = base_steepness / std\n\n    # Sigmoid of negative residual: tighter fit \u2192 larger score.\n    # score = 1 / (1 + exp(slope * residual))\n    # Clip exponent to avoid overflow/underflow.\n    exp_arg = np.clip(slope * residual, -700, 700)\n    scores = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Penalise infeasible bins.\n    scores = np.where(feasible, scores, -np.inf)\n\n    # Deterministic tie\u2011breaker: tiny bias favouring lower indices.\n    # This does not affect ordering unless scores are exactly equal.\n    tie_bias = -np.arange(caps.shape[0]) * 1e-12\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Reflection]\nUse local stats (std) for adaptive steepness, avoid global state, clamp exponent, vectorize, and handle edge cases.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}