{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Exploration probability for the epsilon\u2011greedy strategy\nEPSILON = 0.1\n\n    \"\"\"\n    Epsilon\u2011greedy priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of the remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score\n        will be selected. Bins that cannot accommodate the item are\n        assigned a very low priority (-\u221e).\n    \"\"\"\n    rng = np.random.default_rng()\n\n    # Exploration phase with probability EPSILON\n    if rng.random() < EPSILON:\n        # Generate uniform random scores for a purely random pick\n        return rng.random(bins_remain_cap.shape[0])\n\n    # Exploitation phase: best\u2011fit measure\n    leftover = bins_remain_cap - item\n    # Only bins that can hold the item are considered; others get -\u221e\n    priorities = np.where(leftover >= 0, leftover, -np.inf)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a normalized priority score for each bin in an online Bin Packing\n    scenario.\n\n    The priority reflects the *Best\u2011Fit* rule: a bin that leaves the smallest\n    remaining capacity after accommodating the item receives the highest\n    priority.  The score is normalised to the range [0,\u202f1] for the feasible\n    bins, and infeasible bins receive ``-np.inf`` so they are never chosen.\n    A tiny tie\u2011breaker favours lower\u2011index bins when priorities are equal.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    np.ndarray\n        1\u2011D array of the same shape as ``bins_remain_cap`` containing the\n        priority score for each bin (higher means more preferred).\n    \"\"\"\n    # Ensure a floating\u2011point array for safe arithmetic\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining space if the item were to be added\n    leftover = caps - item\n    feasible = leftover >= 0\n\n    # Compute leftover ratio safely (avoid division by zero)\n    leftover_ratio = np.empty_like(caps)\n    if np.any(feasible):\n        valid = feasible & (caps > 0)\n        leftover_ratio[valid] = leftover[valid] / caps[valid]\n\n        zero_cap = feasible & (caps == 0)\n        # When capacity is zero and item fits (i.e., item==0), the ratio is 0\n        leftover_ratio[zero_cap] = 0.0\n\n    # Raw priority: negative leftover ratio (higher when leftover is smaller)\n    raw_priority = np.full_like(caps, -np.inf, dtype=float)\n    if np.any(feasible):\n        raw_priority[feasible] = -leftover_ratio[feasible]\n\n    # Normalise feasible priorities to [0,\u202f1], keep infeasible as -inf\n    if np.any(feasible):\n        min_f = np.min(raw_priority[feasible])\n        max_f = np.max(raw_priority[feasible])\n        norm_range = max_f - min_f\n        if norm_range > 0:\n            norm_priority = (raw_priority - min_f) / norm_range\n        else:\n            # All feasible priorities are equal \u2192 keep them all 0\n            norm_priority = raw_priority - min_f\n    else:\n        norm_priority = raw_priority\n\n    # Tie\u2011breaker: slightly favour lower\u2011index bins\n    epsilon = 1e-9\n    tie_breaker = -epsilon * np.arange(len(norm_priority))\n    priorities = norm_priority + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize scores, discard infeasible bins, use deterministic best\u2011fit ratio, add tiny index tie\u2011breaker, avoid random exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}