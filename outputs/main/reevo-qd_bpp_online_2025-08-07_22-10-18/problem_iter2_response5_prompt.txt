{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Exploration probability for the epsilon\u2011greedy strategy\nEPSILON = 0.1\n\n    \"\"\"\n    Epsilon\u2011greedy priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of the remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score\n        will be selected. Bins that cannot accommodate the item are\n        assigned a very low priority (-\u221e).\n    \"\"\"\n    rng = np.random.default_rng()\n\n    # Exploration phase with probability EPSILON\n    if rng.random() < EPSILON:\n        # Generate uniform random scores for a purely random pick\n        return rng.random(bins_remain_cap.shape[0])\n\n    # Exploitation phase: best\u2011fit measure\n    leftover = bins_remain_cap - item\n    # Only bins that can hold the item are considered; others get -\u221e\n    priorities = np.where(leftover >= 0, leftover, -np.inf)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Return priority scores for placing an incoming item into existing bins\n    based on the Exact\u2011Fit\u2011First heuristic.\n\n    Parameters\n    ----------\n    item : float\n        Size of the new item that needs to be packed.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for all currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Same shape as *bins_remain_cap*; each entry is the priority score\n        for placing *item* into the corresponding bin.  The bin with the\n        maximum score will be selected by the scheduler.\n    \"\"\"\n    # Initialise with a very low score to effectively drop bins that\n    # cannot accommodate the item.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Mask for bins that can hold the item\n    fit_mask = bins_remain_cap >= item\n\n    if not np.any(fit_mask):\n        # No bin can contain the item \u2013 all scores remain -inf\n        return priorities\n\n    # Space that would be left after the placement\n    leftovers = bins_remain_cap[fit_mask] - item\n\n    # Detect bins that would result in an exact fit\n    exact_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Base score prefers smaller leftover (best\u2011fit principle):\n    # larger (less negative) values correspond to better fit.\n    base_score = -leftovers\n    # Boost the score for exact fits so they outrank all non\u2011exact ones.\n    boost = 10.0  # arbitrary large constant\n\n    # Compute final scores\n    priorities[fit_mask] = base_score + (exact_mask * boost)\n\n    return priorities\n\n[Reflection]\nUse deterministic best\u2011fit with exact\u2011fit boost; avoid random epsilon\u2011greedy; pre\u2011filter infeasible bins; prioritize minimal leftover.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}