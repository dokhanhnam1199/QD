```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin.  The bin with the highest score should be
        selected for placement.  Bins that cannot accommodate the item receive
        a priority of -np.inf.
    """
    # Ensure we work with a NumPy array of floats
    bins = np.asarray(bins_remain_cap, dtype=float)

    # Empty input → empty output
    if bins.size == 0:
        return np.array([], dtype=float)

    # Initialise all priorities as infeasible
    priorities = np.full(bins.shape, -np.inf, dtype=float)

    # Feasibility mask: bins that can hold the item
    feasible = bins >= item
    if not np.any(feasible):
        return priorities  # nothing fits

    # Compute leftover capacity if the item were placed in each feasible bin
    leftover = bins[feasible] - item

    # Base score prefers tighter fits (smaller leftover)
    # Use negative leftover so larger scores correspond to tighter fits
    base_score = -leftover

    # Detect exact fits (within numerical tolerance)
    exact_fit = np.isclose(leftover, 0.0, atol=1e-12)

    # Large boost to guarantee exact fits outrank any non‑exact fit
    BOOST = 1e9
    scores = base_score.copy()
    scores[exact_fit] += BOOST

    # Deterministic tie‑breaking: prefer lower‑index bins when scores tie.
    # Subtract a tiny epsilon weighted by the bin index.
    epsilon = 1e-12
    feasible_indices = np.nonzero(feasible)[0].astype(float)
    scores -= epsilon * feasible_indices

    # Write back the scores to the full priority vector
    priorities[feasible] = scores

    return priorities
```
