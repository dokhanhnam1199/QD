{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Best\u2011Fit priority for online Bin Packing.\n\n    The bin that leaves the smallest remaining capacity after receiving the\n    *item* gets the highest priority. Bins that cannot accommodate the item\n    receive a very low (\u2011inf) priority and will never be selected.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each existing bin.\n\n    Returns:\n        NumPy array with a priority score for each bin (higher means more\n        preferred). The shape matches ``bins_remain_cap``.\n    \"\"\"\n    # Work in floating point to safely use -inf for infeasible bins.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining space after the item would be placed.\n    leftover = caps - item\n\n    # Assign priority: bins that can fit the item get -leftover (higher for\n    # smaller leftover). Infeasible bins get -inf.\n    priorities = np.where(leftover >= 0, -leftover, -np.inf)\n\n    # Tiny tie\u2011breaker: favor lower\u2011index bins when leftover is identical.\n    # This epsilon is far smaller than any realistic leftover value.\n    epsilon = 1e-9\n    tie_break = -epsilon * np.arange(priorities.size)\n    priorities = priorities + tie_break\n\n    return priorities\n\n[Reflection]\nExclude infeasible bins, score by negative leftover, add tiny tie\u2011breakers, normalize priorities, consider dynamic scaling.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}