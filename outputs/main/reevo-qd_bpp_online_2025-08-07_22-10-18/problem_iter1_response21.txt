```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑Fit priority for online Bin Packing.

    The bin that leaves the smallest remaining capacity after receiving the
    *item* gets the highest priority. Bins that cannot accommodate the item
    receive a very low (‑inf) priority and will never be selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities for each existing bin.

    Returns:
        NumPy array with a priority score for each bin (higher means more
        preferred). The shape matches ``bins_remain_cap``.
    """
    # Work in floating point to safely use -inf for infeasible bins.
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Remaining space after the item would be placed.
    leftover = caps - item

    # Assign priority: bins that can fit the item get -leftover (higher for
    # smaller leftover). Infeasible bins get -inf.
    priorities = np.where(leftover >= 0, -leftover, -np.inf)

    # Tiny tie‑breaker: favor lower‑index bins when leftover is identical.
    # This epsilon is far smaller than any realistic leftover value.
    epsilon = 1e-9
    tie_break = -epsilon * np.arange(priorities.size)
    priorities = priorities + tie_break

    return priorities
```
