```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Exact‑Fit‑First priority function for online Bin Packing.
    
    Bins where the item fits exactly receive the highest priority (infinite).
    Among the remaining bins that can accommodate the item, those that leave the
    smallest waste (i.e., smallest remaining capacity after insertion) receive
    higher priority, proportional to 1 / waste.
    Bins that cannot accommodate the item get a very low (−inf) priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the current bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher = more preferred).
    """
    # Ensure a NumPy array of floats
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Compute the waste that would remain after placing the item
    waste = bins_remain_cap - item

    # Floating‑point tolerance for equality checks
    atol = 1e-9

    # Masks
    exact_fit_mask = np.isclose(waste, 0.0, atol=atol)      # exact fits
    can_fit_mask   = waste >= -atol                         # fits (including exact)

    # Initialize all priorities to −inf (cannot fit)
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Exact fits get the highest possible priority
    priorities[exact_fit_mask] = np.inf

    # Non‑exact but feasible bins get priority inversely proportional to waste
    # (smaller waste → larger priority). Small epsilon avoids division by zero.
    epsilon = 1e-12
    non_exact_mask = can_fit_mask & ~exact_fit_mask
    priorities[non_exact_mask] = 1.0 / (waste[non_exact_mask] + epsilon)

    return priorities
```
