```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                temperature: float = 0.1) -> np.ndarray:
    """
    Softmax‑based priority for the online Bin Packing Problem.

    Each bin receives a score proportional to how tightly the item would fit.
    Bins that cannot accommodate the item get a priority of zero.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array with the remaining free capacity of every open bin.
    temperature : float, optional
        Temperature controlling the softness of the softmax.
        Smaller values make the choice more deterministic (closer to a best‑fit),
        while larger values produce a flatter distribution.
        Default is 0.1.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` containing a priority
        (probability‑like) score for each bin. The bin with the highest value
        should be selected for the item.
    """
    # Feasibility mask: only bins that have enough room can be considered
    feasible = bins_remain_cap >= item

    # If no bin can hold the item, return a zero vector (caller may open a new bin)
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)

    # Logits for the softmax: higher for tighter fits.
    # Fit quality = - (remaining capacity after placement) = -(bins_remain_cap - item)
    # Scaling by temperature controls the sharpness.
    logits = np.full_like(bins_remain_cap, -np.ndarray.shape(bins_remain_cap)[0], dtype=float)  # placeholder for -inf
    logits[:] = -np.inf
    logits[feasible] = -(bins_remain_cap[feasible] - item) / temperature

    # Numerical stability: shift by max logit
    max_logit = np.max(logits)  # will be finite because at least one feasible bin exists
    exp_vals = np.exp(logits - max_logit)          # exp(-inf) → 0 for infeasible bins
    sum_exp = np.sum(exp_vals)

    # Normalise to obtain a probability‑like priority vector
    priorities = exp_vals / sum_exp
    return priorities
```
