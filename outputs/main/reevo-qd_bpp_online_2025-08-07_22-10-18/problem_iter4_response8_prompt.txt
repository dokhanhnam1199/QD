{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Exploration probability for the epsilon\u2011greedy strategy\nEPSILON = 0.1\n\n    \"\"\"\n    Epsilon\u2011greedy priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Array of the remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score\n        will be selected. Bins that cannot accommodate the item are\n        assigned a very low priority (-\u221e).\n    \"\"\"\n    rng = np.random.default_rng()\n\n    # Exploration phase with probability EPSILON\n    if rng.random() < EPSILON:\n        # Generate uniform random scores for a purely random pick\n        return rng.random(bins_remain_cap.shape[0])\n\n    # Exploitation phase: best\u2011fit measure\n    leftover = bins_remain_cap - item\n    # Only bins that can hold the item are considered; others get -\u221e\n    priorities = np.where(leftover >= 0, leftover, -np.inf)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Sigmoid Fit Score priority for online bin packing.\n\n    This function assigns a higher priority to bins where the item fits tightly.\n    Bins that cannot accommodate the item receive a very low (\u2011inf) priority.\n    For feasible bins the remaining capacity after placement is fed through a\n    sigmoid: the smaller the leftover space, the larger the score.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each bin.\n\n    Returns:\n        np.ndarray of the same shape as `bins_remain_cap` with priority scores.\n        Higher values indicate more desirable bins.\n    \"\"\"\n    # Ensure input is a NumPy array of floats.\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Residual capacity if we placed the item in each bin.\n    residual = bins_remain_cap - item\n\n    # Identify infeasible bins (item does not fit).\n    infeasible = residual < 0\n\n    # Feasible residuals for slope calibration.\n    feasible_res = residual[~infeasible]\n\n    # If there are no feasible bins, return an array of -inf.\n    if feasible_res.size == 0:\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Adaptive sigmoid steepness:\n    # Larger spread of feasible residuals \u2192 softer sigmoid.\n    std = np.std(feasible_res)\n    # Guard against zero std (all residuals identical).\n    std = std if std > 0 else 1.0\n    slope = 5.0 / std  # 5.0 is a tunable base steepness.\n\n    # Compute sigmoid of negative residual: tighter fit \u2192 higher score.\n    # score = 1 / (1 + exp(slope * residual))\n    # Clip exponent to avoid overflow in np.exp.\n    exp_arg = np.clip(slope * residual, -700, 700)\n    scores = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Force infeasible bins to the lowest possible priority.\n    scores = np.where(infeasible, -np.inf, scores)\n\n    return scores\n\n[Reflection]\nUse adaptive sigmoid scores, reward tight fits, heavily penalize infeasible bins, calibrate steepness to residual spread, reduce randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}