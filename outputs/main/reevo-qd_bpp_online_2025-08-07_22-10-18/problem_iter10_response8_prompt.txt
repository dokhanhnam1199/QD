{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global state\n_call_counter = 0\n_total_item_size = 0.0\n_ema_item_size = 0.0\n_ema_alpha = 0.2\n_WASTE_PENALTY_WEIGHT = 0.35\n_EPS = 1e-12\n\n    \"\"\"\n    Adaptive priority function for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is more preferable).\n        Infeasible bins receive -inf.\n    \"\"\"\n    global _call_counter, _total_item_size, _ema_item_size\n\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Update statistics\n    _call_counter += 1\n    _total_item_size += item\n    if _call_counter == 1:\n        _ema_item_size = item\n    else:\n        _ema_item_size = _ema_alpha * item + (1.0 - _ema_alpha) * _ema_item_size\n\n    # Feasible mask\n    feasible_mask = bins_remain_cap >= item\n\n    # Leftover space\n    leftover = bins_remain_cap - item\n\n    # Detect exact\u2011fit bins (zero leftover within tolerance)\n    atol = 1e-9\n    exact_fit_mask = np.isclose(leftover, 0.0, atol=atol) & feasible_mask\n\n    # Prepare priority array with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Handle exact\u2011fit bins: highest priority (inf)\n    priorities[exact_fit_mask] = np.inf\n\n    # Non\u2011exact feasible bins\n    non_exact_mask = feasible_mask & ~exact_fit_mask\n    if np.any(non_exact_mask):\n        # Base score: inverse of leftover (larger for tighter fit)\n        base_score = 1.0 / (leftover[non_exact_mask] + _EPS)\n\n        # Penalty for waste exceeding EMA of item sizes\n        waste_excess = np.maximum(0.0, leftover[non_exact_mask] - _ema_item_size)\n\n        # Adapt penalty weight by fraction of feasible bins\n        fit_fraction = np.count_nonzero(feasible_mask) / bins_remain_cap.size\n        penalty_weight = _WASTE_PENALTY_WEIGHT * (1.0 - fit_fraction)\n\n        penalty = penalty_weight * waste_excess\n\n        # Raw score before normalization\n        score = base_score - penalty\n\n        # Standardize scores: mean and MAD\n        mean_score = np.mean(score)\n        mad_score = np.median(np.abs(score - mean_score))\n        mad = mad_score if mad_score > _EPS else _EPS\n\n        std_score = (score - mean_score) / mad\n\n        # Clip exponents to avoid overflow\n        clip_val = 50.0\n        std_score = np.clip(std_score, -clip_val, clip_val)\n\n        # Monotonic sigmoid\n        sigmoid_scores = 1.0 / (1.0 + np.exp(-std_score))\n\n        # Assign priorities\n        priorities[non_exact_mask] = sigmoid_scores\n\n    # Tiny deterministic tie\u2011breaker based on bin index\n    indices = np.arange(bins_remain_cap.size)\n    priorities += indices * 1e-8\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority scoring for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item <= bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority score for each bin (higher is better). Infeasible bins receive\n        ``-np.inf``. If no bins are open, an empty array is returned.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Normalise input\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item\n    fit_mask = caps >= item\n\n    # If nothing fits, force creation of a new bin\n    if not np.any(fit_mask):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # Estimate fixed bin capacity and utilisation\n    # ------------------------------------------------------------------\n    # All bins share the same (unknown) capacity; infer it from the max\n    bin_capacity = caps.max()\n    if bin_capacity <= 0.0:               # safety fallback\n        bin_capacity = item\n\n    # Utilisation = fraction of capacity already used (higher = more filled)\n    utilisation = 1.0 - caps / bin_capacity\n    avg_util = utilisation.mean()\n\n    # Fraction of bins that can fit the item\n    fit_frac = np.mean(fit_mask)\n\n    # ------------------------------------------------------------------\n    # Exploration (epsilon\u2011greedy) scaled by fit fraction and utilisation\n    # ------------------------------------------------------------------\n    base_eps = 0.10                       # baseline exploration probability\n    epsilon = base_eps * (1.0 - fit_frac) * (1.0 + (1.0 - avg_util))\n\n    rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        # Random scores for feasible bins; infeasible remain -inf\n        scores = rng.random(n_bins)\n        scores[~fit_mask] = -np.inf\n        return scores\n\n    # ------------------------------------------------------------------\n    # Deterministic exploitation scoring\n    # ------------------------------------------------------------------\n    # Fill ratio: proportion of the bin's remaining capacity taken by the item\n    fill_ratio = np.empty(n_bins, dtype=float)\n    fill_ratio.fill(np.nan)\n    fill_ratio[fit_mask] = item / caps[fit_mask]\n\n    # Waste fraction after placement (1 - fill_ratio)\n    waste_frac = np.empty(n_bins, dtype=float)\n    waste_frac.fill(np.nan)\n    waste_frac[fit_mask] = 1.0 - fill_ratio[fit_mask]\n\n    # Sigmoid that favours fill ratios > 0.  Steepness grows with avg utilisation.\n    base_k = 12.0\n    k = base_k * (1.0 + avg_util)          # more loaded bins \u2192 sharper sigmoid\n    arg = -k * (fill_ratio[fit_mask] - 0.5)   # negative for fill>0.5 \u2192 larger \u03c3\n    arg = np.clip(arg, -700.0, 700.0)         # protect against overflow\n    sigmoid = 1.0 / (1.0 + np.exp(arg))\n\n    # ------------------------------------------------------------------\n    # Combine components\n    # ------------------------------------------------------------------\n    beta = 0.5   # weight of waste penalty\n    delta = 0.30  # weight of utilisation reward\n\n    priority = np.full(n_bins, -np.inf, dtype=float)\n    priority[fit_mask] = (\n        sigmoid\n        - beta * waste_frac[fit_mask]\n        + delta * utilisation[fit_mask]\n    )\n\n    # Tiny random jitter to break ties reproducibly\n    jitter = rng.random(n_bins) * 1e-9\n    priority[fit_mask] += jitter[fit_mask]\n\n    return priority\n\n[Reflection]\nPrioritise fill ratio and utilisation; use epsilon\u2011greedy exploration; avoid complex normalisation and heavy computations.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}