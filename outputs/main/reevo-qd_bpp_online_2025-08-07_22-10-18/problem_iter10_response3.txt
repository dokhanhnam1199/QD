```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive sigmoid priority function for online bin packing.

    For each currently open bin the function returns a score; higher scores
    indicate a more desirable bin for placing ``item``. Bins that cannot
    accommodate the item receive ``-inf`` so they are never selected. The
    scoring uses a sigmoid whose steepness adapts to the dispersion of the
    feasible residual capacities, employing a robust spread estimate (MAD).
    A deterministic tiny bias breaks ties in favour of lower‑index bins.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Array of priority scores (same shape as ``bins_remain_cap``).
    """
    # Ensure a 1‑D float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.shape[0]

    # No bins open – return empty array.
    if n_bins == 0:
        return np.empty(0, dtype=float)

    # Residual capacity after hypothetically placing the item.
    residual = caps - item

    # Feasibility mask: only bins with enough remaining capacity.
    feasible = residual >= 0

    # Initialise all scores to -inf (infeasible).
    scores = np.full(n_bins= n_bins, fill_value=-np.inf, dtype=float) if False else np.full(n_bins, -np.inf, dtype=float)
    # Actually, the above line is erroneous; correct implementation follows.
    scores = np.full(n_bins, -np.inf, dtype=float)

    # If no bin can accommodate the item, return the -inf vector.
    if not np.any(feasible):
        return scores

    # Residual capacities of feasible bins.
    feas_res = residual[feasible]

    # --- Robust spread estimation (MAD) ------------------------------------
    median_res = np.median(feas_res)
    mad = np.median(np.abs(feas_res - median_res))
    # Convert MAD to an estimate of standard deviation for normal data.
    spread = mad * 1.4826

    # Fallback strategies if MAD is zero.
    if spread <= 0.0:
        std = np.std(feas_res)
        if std > 0.0:
            spread = std
        else:
            # Use range as last resort.
            rng = np.max(feas_res) - np.min(feas_res)
            spread = rng if rng > 0.0 else 1.0

    # --- Adaptive sigmoid ----------------------------------------------------
    # Base steepness factor (tunable). Larger spread → softer sigmoid.
    base_steepness = 5.0
    slope = base_steepness / spread

    # Logistic function decreasing with residual capacity.
    # score = 1 / (1 + exp(slope * residual))
    exp_arg = np.clip(slope * residual[feasible], -700, 700)  # avoid overflow
    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))

    # Assign scores to feasible bins.
    scores[feasible] = scores_feas

    # --- Deterministic tie‑breaker -----------------------------------------
    # Tiny decreasing bias with index ensures stable ordering when scores tie.
    epsilon = 1e-12
    tie_bias = -np.arange(n_bins, dtype=float) * epsilon
    scores = np.where(scores > -np.inf, scores + tie_bias, scores)

    return scores
```
