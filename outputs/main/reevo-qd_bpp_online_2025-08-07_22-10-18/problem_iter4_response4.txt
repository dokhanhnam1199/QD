```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for online Bin Packing.

    For each open bin the function evaluates the leftover capacity after placing
    ``item``.  Bins that can accommodate the item receive a priority proportional
    to the negative of this leftover – i.e. a smaller leftover yields a larger
    priority.  Infeasible bins are assigned ``-np.inf`` so they are never selected.

    A cheap deterministic tie‑breaker is added: when two bins would leave the
    same leftover, the bin with the lower index gets a slightly higher score.
    This is achieved by subtracting a vanishing offset based on the machine
    epsilon and the bin index, ensuring the ordering is unchanged for distinct
    leftovers while guaranteeing reproducible tie‑breaking.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each currently open bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``).  The
        caller should select the bin with the highest priority.
    """
    # Prospective leftover after placing the item.
    leftover = bins_remain_cap - item

    # Feasibility mask: only bins with non‑negative leftover can hold the item.
    feasible = leftover >= 0

    # Base priority: -leftover (smaller leftover → larger priority).
    # Infeasible bins receive -inf.
    priorities = np.where(feasible, -leftover, -np.inf)

    # Cheap deterministic tie‑breaker: favor lower indices when priorities tie.
    if priorities.size:
        # Use machine epsilon of the array's dtype (fallback to float64).
        eps = np.finfo(priorities.dtype).eps if np.issubdtype(priorities.dtype, np.floating) else np.finfo(np.float64).eps
        tie_break = np.arange(priorities.size, dtype=priorities.dtype) * eps
        priorities = priorities - tie_break

    return priorities
```
