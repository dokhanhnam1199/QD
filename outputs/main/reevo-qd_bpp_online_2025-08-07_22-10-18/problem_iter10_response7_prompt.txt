{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    rng: Optional[np.random.Generator] = None,\n    base_eps: float = 0.10,\n    base_k: float = 12.0,\n    beta: float = 0.5,\n    delta: float = 0.30,\n    boost: float = 5.0,\n    exact_fit_tol: float = 1e-9,\n) -> np.ndarray:\n    \"\"\"\n    Adaptive priority scoring for the online bin packing problem.\n\n    The function combines an epsilon\u2011greedy exploration scheme with a smooth\n    sigmoid fill\u2011ratio scoring, penalises waste, rewards already\u2011utilised bins\n    and gives a small boost to exact\u2011fit placements.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item <= bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacities of the currently open bins.\n    rng : np.random.Generator, optional\n        Random generator for exploration decisions and jitter.\n        If ``None`` a default generator is created.\n    base_eps : float, optional\n        Base exploration probability (default 0.10).\n    base_k : float, optional\n        Base steepness of the sigmoid used for fill\u2011ratio scoring (default 12.0).\n    beta : float, optional\n        Weight of the waste\u2011penalty term (default 0.5).\n    delta : float, optional\n        Weight of the utilization\u2011reward term (default 0.30).\n    boost : float, optional\n        Additive boost given to bins that achieve an (almost) exact fit\n        (default 5.0).\n    exact_fit_tol : float, optional\n        Numerical tolerance for detecting an exact fit (default 1e-9).\n\n    Returns\n    -------\n    np.ndarray\n        Priority score for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins receive ``-np.inf``.  The caller should select the bin\n        with the highest score; if all scores are ``-np.inf`` a new bin must be\n        opened.  An empty array is returned when ``bins_remain_cap`` is empty.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Input preparation\n    # ------------------------------------------------------------------\n    rem = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = rem.size\n\n    # No open bins \u2192 caller must open a new bin\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item\n    fit_mask = rem >= item\n\n    # If no bin can hold the item, return -inf for all bins\n    if not np.any(fit_mask):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # Random number generator\n    # ------------------------------------------------------------------\n    if rng is None:\n        rng = np.random.default_rng()\n\n    # ------------------------------------------------------------------\n    # Adaptive epsilon\u2011greedy exploration probability\n    # ------------------------------------------------------------------\n    # Fraction of bins that can fit the item\n    fit_frac = np.count_nonzero(fit_mask) / n_bins\n\n    # Estimate bin capacity (all bins share the same fixed capacity)\n    # Using the maximum remaining capacity is safe because no bin can have\n    # more remaining capacity than its total capacity.\n    bin_capacity = np.max(rem)\n    if bin_capacity <= 0.0:\n        # Defensive fallback \u2013 should not happen for valid data\n        bin_capacity = item\n\n    # Utilisation of each bin (higher = more filled)\n    utilization = 1.0 - rem / bin_capacity\n    avg_util = np.mean(utilization)\n\n    # Exploration probability grows when few bins fit or utilization is low\n    epsilon = base_eps * (1.0 - fit_frac) * (1.0 + (1.0 - avg_util))\n    epsilon = np.clip(epsilon, 0.0, 1.0)\n\n    # Exploration: random feasible scores\n    if rng.random() < epsilon:\n        scores = rng.random(n_bins)\n        scores[~fit_mask] = -np.inf\n        return scores\n\n    # ------------------------------------------------------------------\n    # Deterministic exploitation scoring\n    # ------------------------------------------------------------------\n    # Leftover capacity after placing the item (only defined for feasible bins)\n    leftover = np.empty_like(rem)\n    leftover.fill(np.nan)\n    leftover[fit_mask] = rem[fit_mask] - item\n\n    # ensure leftover for infeasible bins stays NaN (won't be used)\n\n    # Fill ratio: portion of the bin's remaining capacity taken by the item\n    fill_ratio = np.empty_like(rem)\n    fill_ratio.fill(np.nan)\n    fill_ratio[fit_mask] = item / rem[fit_mask]  # in (0, 1]\n\n    # Waste fraction after placement (same as leftover / original remaining)\n    waste_frac = np.empty_like(rem)\n    waste_frac.fill(np.nan)\n    waste_frac[fit_mask] = leftover[fit_mask] / rem[fit_mask]  # = 1 - fill_ratio\n\n    # Sigmoid scoring that favours fill ratios > 0.5.\n    # Steepness grows with average utilisation (more aggressive when bins are tight).\n    k = base_k * (1.0 + avg_util)          # k \u2208 [base_k, 2*base_k]\n    arg = -k * (fill_ratio[fit_mask] - 0.5)   # negative for fill>0.5 \u2192 larger sigmoid\n    # Clip to avoid overflow in exp\n    arg = np.clip(arg, -700.0, 700.0)\n    sigmoid = 1.0 / (1.0 + np.exp(arg))\n\n    # Exact\u2011fit boost (detect near\u2011zero leftover)\n    exact_fit = np.isclose(leftover[fit_mask], 0.0, atol=exact_fit_tol)\n    exact_boost = boost * exact_fit.astype(float)\n\n    # Combine components\n    priority = np.full(n_bins, -np.inf, dtype=float)\n    priority[fit_mask] = (\n        sigmoid                                 # base sigmoid (higher = better)\n        - beta * waste_frac[fit_mask]           # penalise waste\n        + delta * utilization[fit_mask]         # reward already used bins\n        + exact_boost                           # reward exact fits\n    )\n\n    # Tiny random jitter to break ties reproducibly\n    jitter = rng.random(n_bins) * 1e-9\n    priority[fit_mask] += jitter[fit_mask]\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid priority for online bin packing.\n\n    The function returns a score for each bin; higher scores indicate more\n    desirable bins for placing the incoming ``item``. The scoring uses a smooth\n    sigmoid that adapts its steepness to the dispersion of feasible residual\n    capacities, avoiding hard thresholds. Infeasible bins receive ``-inf``.\n    A tiny deterministic tie\u2011breaker favours lower\u2011index bins when scores are\n    otherwise equal.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Ensure a 1\u2011D float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.shape[0]\n\n    # Empty case.\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Residual capacity after packing the item.\n    residual = caps - item\n\n    # Feasibility mask.\n    feasible = residual >= 0\n\n    # Initialise all scores to -inf (infeasible).\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return the -inf vector.\n    if not np.any(feasible):\n        return scores\n\n    # Residual capacities of feasible bins.\n    feas_res = residual[feasible]\n\n    # --- Adaptive steepness -------------------------------------------------\n    # Robust spread estimator: Median Absolute Deviation (MAD).\n    median_res = np.median(feas_res)\n    mad = np.median(np.abs(feas_res - median_res))\n    # Convert MAD to an estimate of standard deviation (for normal data).\n    spread = mad * 1.4826\n\n    # Fallback strategies if MAD is zero.\n    if spread <= 0.0:\n        std = np.std(feas_res)\n        if std > 0.0:\n            spread = std\n        else:\n            # Use range as last resort.\n            rng = np.max(feas_res) - np.min(feas_res)\n            spread = rng if rng > 0.0 else 1.0\n\n    # Base steepness factor (tunable). Larger spread \u2192 softer sigmoid.\n    base_steepness = 5.0\n    slope = base_steepness / spread\n\n    # --- Sigmoid scoring ----------------------------------------------------\n    # Logistic function decreasing with residual.\n    # score = 1 / (1 + exp(slope * residual))\n    # Clip exponent to avoid overflow/underflow.\n    exp_arg = np.clip(slope * residual[feasible], -700, 700)\n    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Assign scores to feasible bins.\n    scores[feasible] = scores_feas\n\n    # --- Deterministic tie\u2011breaker -----------------------------------------\n    # Tiny decreasing bias with index ensures stable ordering when scores tie.\n    epsilon = 1e-12\n    tie_bias = -np.arange(n_bins, dtype=float) * epsilon\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Reflection]\nUse MAD-based spread to adapt sigmoid steepness; deterministic tie\u2011breaker; minimal hyperparameters; avoid epsilon\u2011greedy randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}