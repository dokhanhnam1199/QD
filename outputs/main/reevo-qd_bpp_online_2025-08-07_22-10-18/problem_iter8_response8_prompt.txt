{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive priority for online bin packing.\n\n    - Scores only feasible bins (remaining capacity >= item).\n    - Uses a sharp sigmoid centred at a small residual threshold to\n      boost exact or near\u2011exact fits.\n    - Penalises waste exponentially based on the normalised leftover.\n    - Adds a decaying epsilon random perturbation for exploration.\n    - Deterministic tie\u2011breaker via a tiny bias favouring lower indices.\n    - Infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable). Shape matches\n        `bins_remain_cap`.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    if caps.size == 0:\n        return np.array([], dtype=float)\n\n    # Residual capacity after placing the item in each bin.\n    residual = caps - item\n    feasible = residual >= 0\n\n    # If nothing fits, penalise all bins.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Estimate bin capacity (assume at least one empty bin exists).\n    bin_capacity = np.max(caps)\n    if bin_capacity <= 0:\n        # Fallback: use the largest possible capacity inferred from residuals.\n        bin_capacity = np.max(caps + residual)\n    if bin_capacity <= 0:\n        bin_capacity = 1.0  # safety fallback\n\n    # Normalised residual (relative waste).\n    norm_res = residual / bin_capacity\n\n    # Adaptive sigmoid steepness based on spread of feasible residuals.\n    feasible_res = residual[feasible]\n    spread = np.std(feasible_res)\n    if spread <= 0.0:\n        spread = np.ptp(feasible_res)  # range as fallback\n    if spread <= 0.0:\n        spread = 1.0\n\n    base_steepness = 10.0  # tunable: larger \u2192 sharper transition\n    slope = base_steepness / spread\n\n    # Threshold for a \u201ctight\u201d fit (e.g., 5\u202f% of bin capacity).\n    tight_threshold = 0.05 * bin_capacity\n\n    # Sharp sigmoid: high score for residual << tight_threshold, low otherwise.\n    # sigmoid(x) = 1 / (1 + exp(slope * (x - tight_threshold)))\n    exp_arg = slope * (residual - tight_threshold)\n    exp_arg = np.clip(exp_arg, -700, 700)  # avoid overflow\n    sigmoid_score = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Exponential waste penalty: larger residual \u2192 stronger penalty.\n    alpha = 5.0  # tunable\n    waste_penalty = np.exp(alpha * norm_res)  # >= 1\n    base_score = sigmoid_score / waste_penalty\n\n    # Infeasible bins get -inf.\n    scores = np.where(feasible, base_score, -np.inf)\n\n    # --- Decaying epsilon exploration ---\n    # Initialise static call counter.\n    if not hasattr(priority_v2, \"_call_count\"):\n        priority_v2._call_count = 0\n    priority_v2._call_count += 1\n\n    # Epsilon decays as 1/sqrt(call_count) (adjustable schedule).\n    epsilon0 = 0.01\n    epsilon = epsilon0 / np.sqrt(priority_v2._call_count)\n\n    # Add small random perturbation to feasible scores.\n    noise = np.random.rand(caps.shape[0]) * epsilon\n    scores = np.where(feasible, scores + noise, scores)\n\n    # --- Deterministic tie\u2011breaker (tiny bias for lower index) ---\n    tie_bias = -np.arange(caps.shape[0]) * 1e-12\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive, exploration\u2011aware priority scoring for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item <= bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority score for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins receive ``-np.inf``.  The bin with the highest\n        score should be selected for the item.  If there are no open bins,\n        an empty array is returned (caller should open a new bin).\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Pre\u2011process input\n    # ------------------------------------------------------------------\n    rem = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = rem.size\n\n    # No open bins \u2013 caller must create a new one\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item\n    fit_mask = rem >= item\n\n    # If nothing fits, return -inf for all bins (force new bin creation)\n    if not np.any(fit_mask):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # Adaptive epsilon\u2011greedy exploration\n    # ------------------------------------------------------------------\n    base_eps = 0.10                     # baseline exploration prob.\n    fit_frac = np.count_nonzero(fit_mask) / n_bins\n\n    # Estimate bin capacity (all bins have the same fixed capacity)\n    bin_capacity = np.max(rem)\n    if bin_capacity <= 0.0:\n        bin_capacity = item   # fallback, should not happen for valid data\n\n    # Current utilization of each bin (higher = more filled)\n    utilization = 1.0 - rem / bin_capacity\n    avg_util = np.mean(utilization)\n\n    # Exploration probability rises when few bins fit or utilization is low\n    epsilon = base_eps * (1.0 - fit_frac) * (1.0 + (1.0 - avg_util))\n\n    rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        # Purely random scores for feasible bins, -inf otherwise\n        scores = rng.random(n_bins)\n        scores[~fit_mask] = -np.inf\n        return scores\n\n    # ------------------------------------------------------------------\n    # Deterministic scoring for exploitation\n    # ------------------------------------------------------------------\n    # Leftover capacity after placing the item (only for feasible bins)\n    leftover = np.empty_like(rem)\n    leftover.fill(np.nan)\n    leftover[fit_mask] = rem[fit_mask] - item\n\n    # Fill ratio: fraction of a bin's remaining capacity that the item occupies\n    fill_ratio = np.empty_like(rem)\n    fill_ratio.fill(np.nan)\n    fill_ratio[fit_mask] = item / rem[fit_mask]          # in (0, 1]\n\n    # Waste fraction after placement (same as leftover / original remaining)\n    waste_frac = np.empty_like(rem)\n    waste_frac.fill(np.nan)\n    waste_frac[fit_mask] = leftover[fit_mask] / rem[fit_mask]   # = 1 - fill_ratio\n\n    # Sigmoid scoring that favours fill ratios > 0.5.\n    # Steepness grows with average utilization (more aggressive when bins are tight).\n    base_k = 12.0\n    k = base_k * (1.0 + avg_util)          # k \u2208 [base_k, 2*base_k]\n\n    # Compute sigmoid: \u03c3(x) = 1 / (1 + exp(-k*(x - 0.5)))\n    arg = -k * (fill_ratio[fit_mask] - 0.5)   # negative for fill>0.5 \u2192 large \u03c3\n    # Clip to avoid overflow in exp\n    arg = np.clip(arg, -700.0, 700.0)\n    sigmoid = 1.0 / (1.0 + np.exp(arg))\n\n    # ------------------------------------------------------------------\n    # Combine components into a single priority value\n    # ------------------------------------------------------------------\n    # Weight parameters (tunable)\n    beta = 0.5      # waste penalty weight\n    delta = 0.30    # utilization reward weight\n\n    priority = np.full(n_bins, -np.inf, dtype=float)\n\n    # Base score: sigmoid (higher for larger fill ratios)\n    # Penalise waste and reward already\u2011used bins (higher utilization)\n    priority[fit_mask] = (\n        sigmoid\n        - beta * waste_frac[fit_mask]\n        + delta * utilization[fit_mask]\n    )\n\n    # Tiny random jitter to break ties in a reproducible way\n    jitter = rng.random(n_bins) * 1e-9\n    priority[fit_mask] += jitter[fit_mask]\n\n    return priority\n\n[Reflection]\nScale exploration by fit fraction/utilization; adjust sigmoid steepness by avg load; reward high fill, penalize waste; add jitter.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}