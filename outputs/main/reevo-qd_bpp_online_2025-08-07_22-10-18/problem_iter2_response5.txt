```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit with exact‑fit boost for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin.  The bin with the highest score
        will be selected for placement.  Bins that cannot accommodate
        the item receive a priority of -np.inf.
    """
    # Ensure the input is a NumPy array of floats
    bins = np.asarray(bins_remain_cap, dtype=float)

    # Early exit for empty bin list
    if bins.size == 0:
        return np.array([], dtype=float)

    # Initialize all priorities to -inf (infeasible bins)
    priorities = np.full(bins.shape, -np.inf, dtype=float)

    # Find bins that can hold the item
    fit_mask = bins >= item
    if not np.any(fit_mask):
        # No bin can accommodate the item
        return priorities

    # Compute leftover capacity if the item were placed in each feasible bin
    leftovers = bins[fit_mask] - item

    # Base score: prefer bins with the smallest leftover (best‑fit principle)
    base_score = -leftovers

    # Identify exact fits within a small tolerance
    exact_mask = np.isclose(leftovers, 0.0, atol=1e-9)

    # Boost factor for exact fits
    BOOST = 1e6  # large constant to guarantee exact fits outrank others

    # Apply boost to exact fit bins
    final_score = base_score.copy()
    final_score[exact_mask] += BOOST

    # Assign computed scores back to the corresponding bins
    priorities[fit_mask] = final_score

    return priorities
```
