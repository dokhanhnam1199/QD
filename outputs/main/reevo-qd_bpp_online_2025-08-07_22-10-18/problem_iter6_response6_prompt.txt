{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Deterministic best\u2011fit with exact\u2011fit boost for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  The bin with the highest score\n        will be selected for placement.  Bins that cannot accommodate\n        the item receive a priority of -np.inf.\n    \"\"\"\n    # Ensure the input is a NumPy array of floats\n    bins = np.asarray(bins_remain_cap, dtype=float)\n\n    # Early exit for empty bin list\n    if bins.size == 0:\n        return np.array([], dtype=float)\n\n    # Initialize all priorities to -inf (infeasible bins)\n    priorities = np.full(bins.shape, -np.inf, dtype=float)\n\n    # Find bins that can hold the item\n    fit_mask = bins >= item\n    if not np.any(fit_mask):\n        # No bin can accommodate the item\n        return priorities\n\n    # Compute leftover capacity if the item were placed in each feasible bin\n    leftovers = bins[fit_mask] - item\n\n    # Base score: prefer bins with the smallest leftover (best\u2011fit principle)\n    base_score = -leftovers\n\n    # Identify exact fits within a small tolerance\n    exact_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Boost factor for exact fits\n    BOOST = 1e6  # large constant to guarantee exact fits outrank others\n\n    # Apply boost to exact fit bins\n    final_score = base_score.copy()\n    final_score[exact_mask] += BOOST\n\n    # Assign computed scores back to the corresponding bins\n    priorities[fit_mask] = final_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid priority for online bin packing.\n\n    Gives higher priority to bins that accommodate the item tightly.\n    The steepness of the sigmoid is calibrated to the spread of feasible\n    residual capacities, ensuring a balanced exploitation of tight fits\n    across different instance scales. Infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as `bins_remain_cap`).\n        Higher values indicate more desirable bins; infeasible bins are\n        penalised with -inf.\n    \"\"\"\n    # Ensure a NumPy float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    if caps.size == 0:\n        return np.array([], dtype=float)\n\n    # Residual capacity after placing the item in each bin.\n    residual = caps - item\n\n    # Feasibility mask.\n    feasible = residual >= 0\n\n    # If nothing fits, return -inf for every bin.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Residuals of feasible bins.\n    feasible_res = residual[feasible]\n\n    # Adaptive steepness: based on the more robust spread of feasible residuals.\n    # Use standard deviation; fall back to range if std is zero.\n    std = np.std(feasible_res)\n    if std <= 0.0:\n        spread = np.max(feasible_res) - np.min(feasible_res)\n        std = spread if spread > 0.0 else 1.0\n\n    # Base steepness factor (tunable). Larger std \u2192 softer sigmoid.\n    base_steepness = 5.0\n    slope = base_steepness / std\n\n    # Sigmoid of negative residual: tighter fit \u2192 larger score.\n    # score = 1 / (1 + exp(slope * residual))\n    # Clip exponent to avoid overflow/underflow.\n    exp_arg = np.clip(slope * residual, -700, 700)\n    scores = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Penalise infeasible bins.\n    scores = np.where(feasible, scores, -np.inf)\n\n    # Deterministic tie\u2011breaker: tiny bias favouring lower indices.\n    # This does not affect ordering unless scores are exactly equal.\n    tie_bias = -np.arange(caps.shape[0]) * 1e-12\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Reflection]\nUse smooth, scale\u2011aware scoring; avoid hard boosts; calibrate steepness to residual distribution; incorporate tie\u2011breaking bias; handle infeasibility uniformly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}