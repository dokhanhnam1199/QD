```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Almost‑Full‑Fit priority for online Bin Packing.
    Bins that become "almost full" after adding the item get higher priority.
    An item is considered a fit for a bin if the remaining capacity is non‑negative.
    Bins that do not fit receive a priority of -np.inf.
    
    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array containing the remaining capacity of each bin.
    
    Returns
    -------
    np.ndarray
        Array of priority scores (same shape as bins_remain_cap).
    """
    # Ensure we work with a NumPy array and avoid datatype surprises
    rem_cap = np.asarray(bins_remain_cap, dtype=np.float64)

    # Allocate priority vector
    priorities = np.full_like(rem_cap, -np.inf, dtype=np.float64)

    # Identify bins that can accommodate the item
    fit_mask = rem_cap >= item
    if not np.any(fit_mask):
        # Nothing fits – return all -inf priorities
        return priorities

    # Remaining capacity after packing the item
    remaining = rem_cap[fit_mask] - item
    capacity   = rem_cap[fit_mask]

    # Normalized slack: 0 means perfect fill, 1 means bin is empty
    slack_ratio = remaining / capacity

    # Heuristic: the smaller the slack_ratio, the higher the priority
    # For "almost full" bins (slack_ratio <= THRESHOLD) we use a steeper penalty
    THRESHOLD = 0.2  # <20% unused capacity is considered almost full
    priorities[fit_mask] = np.where(
        slack_ratio <= THRESHOLD,
        1.0 / (slack_ratio + 1e-9),   # strongly favor very low slack
        1.0 / (1.0 + slack_ratio)     # mild penalty for larger slack
    )

    return priorities
```
