```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive sigmoid priority for online bin packing.

    Returns a score for each open bin; higher scores indicate a more
    desirable bin for placing ``item``. Infeasible bins receive -inf.
    The sigmoid steepness adapts to the dispersion of feasible residual
    capacities using a robust MAD estimate. A tiny deterministic bias
    breaks ties in favour of lower‑index bins.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores (same shape as ``bins_remain_cap``).
    """
    # Ensure a flat float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.shape[0]

    # No bins open → return empty array.
    if n_bins == 0:
        return np.empty(0, dtype=float)

    # Residual capacity after hypothetically placing the item.
    residual = caps - item

    # Feasibility mask: only bins that can accommodate the item.
    feasible = residual >= 0

    # Initialise scores with -inf (infeasible).
    scores = np.full(n_bins, -np.inf, dtype=float)

    # If no bin can accommodate the item, return the -inf vector.
    if not np.any(feasible):
        return scores

    # Residual capacities of feasible bins.
    feas_res = residual[feasible]

    # --- Robust dispersion estimate (MAD) ---------------------------------
    median_res = np.median(feas_res)
    mad = np.median(np.abs(feas_res - median_res))
    spread = mad * 1.4826  # convert MAD to std‑like estimate

    # Fallback strategies if MAD yields zero spread.
    if spread <= 0.0:
        std = np.std(feas_res)
        if std > 0.0:
            spread = std
        else:
            rng = np.max(feas_res) - np.min(feas_res)
            spread = rng if rng > 0.0 else 1.0

    # --- Adaptive sigmoid ----------------------------------------------------
    base_steepness = 5.0            # tunable base steepness
    slope = base_steepness / spread

    # Logistic decreasing function: larger residual → smaller score.
    exp_arg = np.clip(slope * feas_res, -700, 700)  # avoid overflow
    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))

    # Assign scores to feasible bins.
    scores[feasible] = scores_feas

    # --- Deterministic tie‑breaker -----------------------------------------
    epsilon = 1e-12
    tie_bias = -np.arange(n_bins, dtype=float) * epsilon
    scores = np.where(scores > -np.inf, scores + tie_bias, scores)

    return scores
```
