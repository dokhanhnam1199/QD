```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1â€‘D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin. Higher scores indicate more
        desirable bins. Infeasible bins receive ``-inf``.
    """
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    if n_bins == 0:
        return np.empty(0, dtype=float)

    residual = caps - item
    feasible = residual >= 0

    scores = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return scores

    feas_res = residual[feasible]

    median_res = np.median(feas_res)
    mad = np.median(np.abs(feas_res - median_res))
    spread = mad * 1.4826

    if spread <= 0.0:
        std = np.std(feas_res)
        if std > 0.0:
            spread = std
        else:
            rng = np.max(feas_res) - np.min(feas_res)
            spread = rng if rng > 0.0 else 1.0

    base_steepness = 5.0
    slope = base_steepness / spread

    exp_arg = slope * residual[feasible]
    exp_arg = np.clip(exp_arg, -700, 700)
    scores_feas = 2.0 / (1.0 + np.exp(exp_arg))

    scores[feasible] = scores_feas

    epsilon = 1e-12
    tie_bias = -np.arange(n_bins, dtype=float) * epsilon
    scores = np.where(scores > -np.inf, scores + tie_bias, scores)

    return scores
```
