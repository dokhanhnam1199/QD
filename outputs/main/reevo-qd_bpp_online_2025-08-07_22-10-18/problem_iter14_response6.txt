```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit with an exact‑fit boost for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin.  Bins that cannot accommodate
        the item receive a priority of -np.inf.  The bin with the
        highest score will be selected.
    """
    # Convert input to a NumPy array of floats
    bins = np.asarray(bins_remain_cap, dtype=float)

    # Empty bin list → empty priority array
    if bins.size == 0:
        return np.empty(0, dtype=float)

    # Initialise all priorities to -inf (infeasible)
    priorities = np.full(bins.shape, -np.inf, dtype=float)

    # Find bins that can hold the item
    fit_mask = bins >= item
    if not np.any(fit_mask):
        # No feasible bin
        return priorities

    # Compute leftover capacity after placement
    leftovers = bins[fit_mask] - item

    # Base score: prefer smallest leftover (best‑fit)
    base_score = -leftovers  # larger (less negative) is better

    # Boost exact fits
    exact_mask = np.isclose(leftovers, 0.0, atol=1e-9)
    BOOST = 1e6  # large constant to ensure exact fits dominate
    base_score[exact_mask] += BOOST

    # Assign back to priorities array
    priorities[fit_mask] = base_score

    # Minimal deterministic tie‑breaker (tiny penalty per index)
    tie_eps = 1e-12
    priorities -= np.arange(bins.size) * tie_eps

    return priorities
```
