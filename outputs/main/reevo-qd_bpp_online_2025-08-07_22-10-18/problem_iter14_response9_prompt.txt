{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive priority for online bin packing.\n\n    - Scores only feasible bins (remaining capacity >= item).\n    - Uses a sharp sigmoid centred at a small residual threshold to\n      boost exact or near\u2011exact fits.\n    - Penalises waste exponentially based on the normalised leftover.\n    - Adds a decaying epsilon random perturbation for exploration.\n    - Deterministic tie\u2011breaker via a tiny bias favouring lower indices.\n    - Infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable). Shape matches\n        `bins_remain_cap`.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    if caps.size == 0:\n        return np.array([], dtype=float)\n\n    # Residual capacity after placing the item in each bin.\n    residual = caps - item\n    feasible = residual >= 0\n\n    # If nothing fits, penalise all bins.\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Estimate bin capacity (assume at least one empty bin exists).\n    bin_capacity = np.max(caps)\n    if bin_capacity <= 0:\n        # Fallback: use the largest possible capacity inferred from residuals.\n        bin_capacity = np.max(caps + residual)\n    if bin_capacity <= 0:\n        bin_capacity = 1.0  # safety fallback\n\n    # Normalised residual (relative waste).\n    norm_res = residual / bin_capacity\n\n    # Adaptive sigmoid steepness based on spread of feasible residuals.\n    feasible_res = residual[feasible]\n    spread = np.std(feasible_res)\n    if spread <= 0.0:\n        spread = np.ptp(feasible_res)  # range as fallback\n    if spread <= 0.0:\n        spread = 1.0\n\n    base_steepness = 10.0  # tunable: larger \u2192 sharper transition\n    slope = base_steepness / spread\n\n    # Threshold for a \u201ctight\u201d fit (e.g., 5\u202f% of bin capacity).\n    tight_threshold = 0.05 * bin_capacity\n\n    # Sharp sigmoid: high score for residual << tight_threshold, low otherwise.\n    # sigmoid(x) = 1 / (1 + exp(slope * (x - tight_threshold)))\n    exp_arg = slope * (residual - tight_threshold)\n    exp_arg = np.clip(exp_arg, -700, 700)  # avoid overflow\n    sigmoid_score = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Exponential waste penalty: larger residual \u2192 stronger penalty.\n    alpha = 5.0  # tunable\n    waste_penalty = np.exp(alpha * norm_res)  # >= 1\n    base_score = sigmoid_score / waste_penalty\n\n    # Infeasible bins get -inf.\n    scores = np.where(feasible, base_score, -np.inf)\n\n    # --- Decaying epsilon exploration ---\n    # Initialise static call counter.\n    if not hasattr(priority_v2, \"_call_count\"):\n        priority_v2._call_count = 0\n    priority_v2._call_count += 1\n\n    # Epsilon decays as 1/sqrt(call_count) (adjustable schedule).\n    epsilon0 = 0.01\n    epsilon = epsilon0 / np.sqrt(priority_v2._call_count)\n\n    # Add small random perturbation to feasible scores.\n    noise = np.random.rand(caps.shape[0]) * epsilon\n    scores = np.where(feasible, scores + noise, scores)\n\n    # --- Deterministic tie\u2011breaker (tiny bias for lower index) ---\n    tie_bias = -np.arange(caps.shape[0]) * 1e-12\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Bins that cannot accommodate the item\n        receive -inf. The bin with the highest score should be selected.\n    \"\"\"\n    # Ensure input is a NumPy array of floats\n    rem = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = rem.shape[0]  # number of currently open bins\n\n    # No bins open \u2013 caller should open a new bin\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Feasibility mask: bins that can hold the item\n    fit_mask = rem >= item\n\n    # If no bin can accommodate the item, return -inf for all (open new bin)\n    if not np.any(fit_mask):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # Adaptive epsilon\u2011greedy exploration\n    base_eps = 0.1\n    fit_frac = np.count_nonzero(fit_mask) / n_bins\n    epsilon = base_eps * (1.0 - fit_frac)  # more exploration when few bins fit\n\n    rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        # Random scores for feasible bins\n        scores = rng.random(n_bins)\n        scores[~fit_mask] = -np.inf\n        return scores\n\n    # Estimate bin capacity (use the maximum observed remaining capacity)\n    bin_capacity = np.max(rem)\n    if bin_capacity <= 0:\n        # Fallback to a positive reference (item size)\n        # This situation occurs only if all bins are full, which we already handled\n        bin_capacity = item\n\n    # Average utilization of the current bins (used capacity / total capacity)\n    avg_util = 1.0 - np.mean(rem) / bin_capacity  # roughly in [0, 1]\n\n    # Dynamic sigmoid steepness: steeper when utilization is high\n    base_k = 12.0\n    k = base_k * (1.0 + avg_util)\n\n    # Fill ratio for feasible bins (item size / remaining capacity)\n    fill_ratio = np.zeros_like(rem)\n    fill_ratio[fit_mask] = item / rem[fit_mask]  # values in (0, 1]\n\n    # Logistic (sigmoid) transformation centered at 0.5 fill ratio\n    arg = -k * (fill_ratio[fit_mask] - 0.5)\n    arg = np.clip(arg, -700, 700)  # avoid overflow in exp\n    sigmoid = 1.0 / (1.0 + np.exp(arg))\n\n    # Waste fraction after placing the item (leftover capacity / original remaining)\n    waste_frac = np.zeros_like(rem)\n    waste_frac[fit_mask] = (rem[fit_mask] - item) / rem[fit_mask]  # = 1 - fill_ratio\n\n    # Weight for waste penalty\n    beta = 0.5\n\n    # Combine sigmoid score with waste penalty\n    priority = np.full_like(rem, -np.inf, dtype=float)\n    priority[fit_mask] = sigmoid - beta * waste_frac[fit_mask]\n\n    # Tiny random jitter for tie\u2011breaking\n    jitter = rng.random(n_bins) * 1e-9\n    priority[fit_mask] += jitter[fit_mask]\n\n    return priority\n\n[Reflection]\nUse adaptive epsilon, normalize waste, dynamic sigmoid, avoid per\u2011call counters, use vectorized ops, tiny random tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}