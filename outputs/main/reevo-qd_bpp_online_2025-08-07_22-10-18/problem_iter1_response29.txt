```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature: float = 0.05) -> np.ndarray:
    """
    Priority function for online Bin Packing using a Softmax‑Based Best‑Fit strategy.
    Higher priority is given to bins that will have the smallest remaining space after the item is added.
    
    The scores are computed as:
        score_i = exp(- (bins_remain_cap[i] - item) / temperature)
    for feasible bins (i.e., where bins_remain_cap[i] >= item).  Infeasible bins receive
    a score of 0 after the softmax conversion.
    
    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D numpy array containing remaining capacities of existing bins.
        temperature: Controls how peaked the distribution is; lower values favour the best fit more strongly.
        
    Returns:
        1‑D numpy array of priority scores for each bin.  The bin with the maximum score
        will be selected for packing the item.
    """
    residual = bins_remain_cap - item
    feasible = residual >= 0
    
    if np.any(feasible):
        # Negative residual encourages small remaining space -> high priority
        scores = np.where(feasible, -residual / temperature, -np.inf)
        max_score = np.max(scores)
        exp_scores = np.exp(scores - max_score)
        priorities = exp_scores / np.sum(exp_scores)
    else:
        # If no bin can accommodate the item, return all zeros (handled by caller)
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    return priorities
```
