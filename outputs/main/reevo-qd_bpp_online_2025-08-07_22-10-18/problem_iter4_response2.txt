```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                *,
                exact_fit_boost: float = 1e9,
                tolerance: float = 1e-9) -> np.ndarray:
    """
    Deterministic best‑fit priority for the online Bin Packing Problem.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.
    exact_fit_boost : float, optional
        Additive boost applied to bins that would be filled exactly.
        Default is 1e9, a sufficiently large value to guarantee selection.
    tolerance : float, optional
        Absolute tolerance used when checking for an exact fit.
        Default is 1e-9.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher is better).  Bins that cannot
        accommodate the item receive a priority of -np.inf.
    """
    # Convert to a NumPy array of floats (handles list inputs gracefully)
    bins = np.asarray(bins_remain_cap, dtype=float)

    # Early exit for empty input
    if bins.size == 0:
        return np.array([], dtype=float)

    # Initialize priorities with -inf (infeasible bins)
    priorities = np.full(bins.shape, -np.inf, dtype=float)

    # Compute leftover capacity if the item were placed in each bin
    leftovers = bins - item

    # Feasibility mask: bin can hold the item (allowing tiny negative due to FP)
    feasible_mask = leftovers >= -tolerance
    if not np.any(feasible_mask):
        # No feasible bin – return all -inf
        return priorities

    # Base score: prefer bins with the smallest leftover (best‑fit)
    # Larger scores are better, so use negative leftover
    base_score = -leftovers[feasible_mask]

    # Detect exact fits within tolerance and apply boost
    exact_fit_mask = np.isclose(leftovers[feasible_mask], 0.0, atol=tolerance)
    base_score[exact_fit_mask] += exact_fit_boost

    # Populate the priority array for feasible bins
    priorities[feasible_mask] = base_score

    return priorities
```
