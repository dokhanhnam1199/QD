```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse Distance (Proximity Fit) priority for online bin packing.

    For each bin, we compute the leftover capacity after placing the item.
    Bins that can accommodate the item receive a priority inversely proportional
    to the leftover space: the tighter the fit (smaller leftover), the larger
    the priority. Exact fits are given a very large priority to emulate
    "infinite" preference. Bins that cannot accommodate the item receive zero
    priority.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1D array of remaining capacities of the bins.

    Returns:
        A NumPy array of the same shape as `bins_remain_cap` containing the
        priority scores for each bin.
    """
    # Small epsilon to avoid division by zero when the fit is perfect.
    eps = 1e-12

    # Compute leftover capacity if the item were placed in each bin.
    leftover = bins_remain_cap - item

    # Determine feasibility: leftover must be non‑negative.
    feasible = leftover >= 0

    # Initialize priorities to zero for infeasible bins.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fits (practically zero leftover) receive a very high priority.
    exact_fit_mask = feasible & (np.abs(leftover) < eps)
    priorities[exact_fit_mask] = 1.0 / eps  # Approximates infinity.

    # For other feasible bins, compute inverse leftover (closer fit → higher score).
    other_mask = feasible & (~exact_fit_mask)
    priorities[other_mask] = 1.0 / (leftover[other_mask] + eps)

    # Infeasible bins already have priority 0.
    return priorities
```
