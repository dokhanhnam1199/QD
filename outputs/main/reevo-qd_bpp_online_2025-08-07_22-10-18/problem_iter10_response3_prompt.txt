{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Bins that cannot accommodate the item\n        receive -inf. The bin with the highest score should be selected.\n    \"\"\"\n    # Ensure input is a NumPy array of floats\n    rem = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = rem.shape[0]  # number of currently open bins\n\n    # No bins open \u2013 caller should open a new bin\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Feasibility mask: bins that can hold the item\n    fit_mask = rem >= item\n\n    # If no bin can accommodate the item, return -inf for all (open new bin)\n    if not np.any(fit_mask):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # Adaptive epsilon\u2011greedy exploration\n    base_eps = 0.1\n    fit_frac = np.count_nonzero(fit_mask) / n_bins\n    epsilon = base_eps * (1.0 - fit_frac)  # more exploration when few bins fit\n\n    rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        # Random scores for feasible bins\n        scores = rng.random(n_bins)\n        scores[~fit_mask] = -np.inf\n        return scores\n\n    # Estimate bin capacity (use the maximum observed remaining capacity)\n    bin_capacity = np.max(rem)\n    if bin_capacity <= 0:\n        # Fallback to a positive reference (item size)\n        # This situation occurs only if all bins are full, which we already handled\n        bin_capacity = item\n\n    # Average utilization of the current bins (used capacity / total capacity)\n    avg_util = 1.0 - np.mean(rem) / bin_capacity  # roughly in [0, 1]\n\n    # Dynamic sigmoid steepness: steeper when utilization is high\n    base_k = 12.0\n    k = base_k * (1.0 + avg_util)\n\n    # Fill ratio for feasible bins (item size / remaining capacity)\n    fill_ratio = np.zeros_like(rem)\n    fill_ratio[fit_mask] = item / rem[fit_mask]  # values in (0, 1]\n\n    # Logistic (sigmoid) transformation centered at 0.5 fill ratio\n    arg = -k * (fill_ratio[fit_mask] - 0.5)\n    arg = np.clip(arg, -700, 700)  # avoid overflow in exp\n    sigmoid = 1.0 / (1.0 + np.exp(arg))\n\n    # Waste fraction after placing the item (leftover capacity / original remaining)\n    waste_frac = np.zeros_like(rem)\n    waste_frac[fit_mask] = (rem[fit_mask] - item) / rem[fit_mask]  # = 1 - fill_ratio\n\n    # Weight for waste penalty\n    beta = 0.5\n\n    # Combine sigmoid score with waste penalty\n    priority = np.full_like(rem, -np.inf, dtype=float)\n    priority[fit_mask] = sigmoid - beta * waste_frac[fit_mask]\n\n    # Tiny random jitter for tie\u2011breaking\n    jitter = rng.random(n_bins) * 1e-9\n    priority[fit_mask] += jitter[fit_mask]\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid priority for online bin packing.\n\n    The function returns a score for each bin; higher scores indicate more\n    desirable bins for placing the incoming ``item``. The scoring uses a smooth\n    sigmoid that adapts its steepness to the dispersion of feasible residual\n    capacities, avoiding hard thresholds. Infeasible bins receive ``-inf``.\n    A tiny deterministic tie\u2011breaker favours lower\u2011index bins when scores are\n    otherwise equal.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Ensure a 1\u2011D float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.shape[0]\n\n    # Empty case.\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Residual capacity after packing the item.\n    residual = caps - item\n\n    # Feasibility mask.\n    feasible = residual >= 0\n\n    # Initialise all scores to -inf (infeasible).\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return the -inf vector.\n    if not np.any(feasible):\n        return scores\n\n    # Residual capacities of feasible bins.\n    feas_res = residual[feasible]\n\n    # --- Adaptive steepness -------------------------------------------------\n    # Robust spread estimator: Median Absolute Deviation (MAD).\n    median_res = np.median(feas_res)\n    mad = np.median(np.abs(feas_res - median_res))\n    # Convert MAD to an estimate of standard deviation (for normal data).\n    spread = mad * 1.4826\n\n    # Fallback strategies if MAD is zero.\n    if spread <= 0.0:\n        std = np.std(feas_res)\n        if std > 0.0:\n            spread = std\n        else:\n            # Use range as last resort.\n            rng = np.max(feas_res) - np.min(feas_res)\n            spread = rng if rng > 0.0 else 1.0\n\n    # Base steepness factor (tunable). Larger spread \u2192 softer sigmoid.\n    base_steepness = 5.0\n    slope = base_steepness / spread\n\n    # --- Sigmoid scoring ----------------------------------------------------\n    # Logistic function decreasing with residual.\n    # score = 1 / (1 + exp(slope * residual))\n    # Clip exponent to avoid overflow/underflow.\n    exp_arg = np.clip(slope * residual[feasible], -700, 700)\n    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Assign scores to feasible bins.\n    scores[feasible] = scores_feas\n\n    # --- Deterministic tie\u2011breaker -----------------------------------------\n    # Tiny decreasing bias with index ensures stable ordering when scores tie.\n    epsilon = 1e-12\n    tie_bias = -np.arange(n_bins, dtype=float) * epsilon\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Reflection]\nUse robust spread estimate (MAD), deterministic tie\u2011breaker, adapt sigmoid steepness, avoid random jitter, handle zero spread.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}