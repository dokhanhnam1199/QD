{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.1,\n    boost: float = 10.0,\n    rng: np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for placing an incoming item into existing bins.\n\n    The function implements an epsilon\u2011greedy strategy combined with an\n    Exact\u2011Fit\u2011First (best\u2011fit) heuristic and random tie\u2011breaking.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each open bin.\n    epsilon : float, optional\n        Exploration probability for epsilon\u2011greedy. With probability ``epsilon``\n        a random feasible bin is favoured. Default is 0.1.\n    boost : float, optional\n        Additive bonus for bins that achieve an exact fit (remaining capacity\n        ~0). Must be larger than the typical range of the base scores to\n        guarantee precedence. Default is 10.0.\n    rng : np.random.Generator, optional\n        Random number generator. If ``None`` a new default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``). Bins that\n        cannot accommodate the item receive ``-np.inf``. The bin with the highest\n        score should be selected.\n    \"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n\n    # Feasibility mask: bins that can hold the item\n    feasible_mask = bins_remain_cap >= item\n\n    # If no bin can accommodate the item, return all -inf\n    if not np.any(feasible_mask):\n        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Exploration phase: random scores for feasible bins\n    if rng.random() < epsilon:\n        random_scores = rng.random(bins_remain_cap.shape)\n        random_scores[~feasible_mask] = -np.inf\n        return random_scores\n\n    # Exploitation phase: best\u2011fit with exact\u2011fit boost\n    # Compute leftover capacity for feasible bins\n    leftovers = bins_remain_cap[feasible_mask] - item\n\n    # Base score prefers smaller leftover (best\u2011fit). Use negative leftover\n    # so that larger scores correspond to tighter fits.\n    base_score = -leftovers\n\n    # Detect exact fits (within numerical tolerance)\n    exact_fit_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Apply boost to exact fits\n    scores = base_score + boost * exact_fit_mask.astype(float)\n\n    # Random tie\u2011breaking: add a tiny noise term to avoid deterministic ties\n    tie_noise = 1e-6 * rng.random(scores.shape)\n    scores += tie_noise\n\n    # Assemble full priority array\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    priorities[feasible_mask] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Deterministic best\u2011fit with exact\u2011fit boost for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  The bin with the highest score\n        will be selected for placement.  Bins that cannot accommodate\n        the item receive a priority of -np.inf.\n    \"\"\"\n    # Ensure the input is a NumPy array of floats\n    bins = np.asarray(bins_remain_cap, dtype=float)\n\n    # Early exit for empty bin list\n    if bins.size == 0:\n        return np.array([], dtype=float)\n\n    # Initialize all priorities to -inf (infeasible bins)\n    priorities = np.full(bins.shape, -np.inf, dtype=float)\n\n    # Find bins that can hold the item\n    fit_mask = bins >= item\n    if not np.any(fit_mask):\n        # No bin can accommodate the item\n        return priorities\n\n    # Compute leftover capacity if the item were placed in each feasible bin\n    leftovers = bins[fit_mask] - item\n\n    # Base score: prefer bins with the smallest leftover (best\u2011fit principle)\n    base_score = -leftovers\n\n    # Identify exact fits within a small tolerance\n    exact_mask = np.isclose(leftovers, 0.0, atol=1e-9)\n\n    # Boost factor for exact fits\n    BOOST = 1e6  # large constant to guarantee exact fits outrank others\n\n    # Apply boost to exact fit bins\n    final_score = base_score.copy()\n    final_score[exact_mask] += BOOST\n\n    # Assign computed scores back to the corresponding bins\n    priorities[fit_mask] = final_score\n\n    return priorities\n\n[Reflection]\nDeterministic best\u2011fit, large exact\u2011fit boost, avoid random exploration, simple tie\u2011breaking, prioritize feasible bins first.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}