{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Best\u2011Fit priority for online Bin Packing.\n\n    For each bin the function evaluates the remaining space that would be left\n    after placing ``item``.  Bins that can accommodate the item receive a\n    priority proportional to the negative of this leftover \u2013 i.e. a smaller\n    leftover yields a larger priority.  Bins that cannot fit the item are\n    assigned ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``). The\n        caller should select the bin with the highest priority.\n    \"\"\"\n    # Compute the prospective leftover space after adding the item.\n    leftover = bins_remain_cap - item\n\n    # Feasibility mask: only bins with non\u2011negative leftover can hold the item.\n    feasible = leftover >= 0\n\n    # Base priority: -leftover (smaller leftover \u2192 larger priority).\n    # Infeasible bins receive -inf.\n    priorities = np.where(feasible, -leftover, -np.inf)\n\n    # ----------------------------------------------------------------------\n    # OPTIONAL tie\u2011breaker: prefer earlier bins (lower index) when priorities\n    # are otherwise identical.  This adds a negligible offset that does not\n    # alter the main ordering.\n    # ----------------------------------------------------------------------\n    if priorities.size:\n        # Machine epsilon for the array's dtype (or float64 if integer).\n        eps = np.finfo(priorities.dtype).eps if np.issubdtype(priorities.dtype, np.floating) else np.finfo(np.float64).eps\n        tie_break = np.arange(priorities.size, dtype=priorities.dtype) * eps\n        priorities = priorities - tie_break\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive sigmoid priority for online bin packing.\n\n    The function returns a score for each bin; higher scores indicate more\n    desirable bins for placing the incoming ``item``. The scoring uses a smooth\n    sigmoid that adapts its steepness to the dispersion of feasible residual\n    capacities, avoiding hard thresholds. Infeasible bins receive ``-inf``.\n    A tiny deterministic tie\u2011breaker favours lower\u2011index bins when scores are\n    otherwise equal.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Ensure a 1\u2011D float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.shape[0]\n\n    # Empty case.\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Residual capacity after packing the item.\n    residual = caps - item\n\n    # Feasibility mask.\n    feasible = residual >= 0\n\n    # Initialise all scores to -inf (infeasible).\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return the -inf vector.\n    if not np.any(feasible):\n        return scores\n\n    # Residual capacities of feasible bins.\n    feas_res = residual[feasible]\n\n    # --- Adaptive steepness -------------------------------------------------\n    # Robust spread estimator: Median Absolute Deviation (MAD).\n    median_res = np.median(feas_res)\n    mad = np.median(np.abs(feas_res - median_res))\n    # Convert MAD to an estimate of standard deviation (for normal data).\n    spread = mad * 1.4826\n\n    # Fallback strategies if MAD is zero.\n    if spread <= 0.0:\n        std = np.std(feas_res)\n        if std > 0.0:\n            spread = std\n        else:\n            # Use range as last resort.\n            rng = np.max(feas_res) - np.min(feas_res)\n            spread = rng if rng > 0.0 else 1.0\n\n    # Base steepness factor (tunable). Larger spread \u2192 softer sigmoid.\n    base_steepness = 5.0\n    slope = base_steepness / spread\n\n    # --- Sigmoid scoring ----------------------------------------------------\n    # Logistic function decreasing with residual.\n    # score = 1 / (1 + exp(slope * residual))\n    # Clip exponent to avoid overflow/underflow.\n    exp_arg = np.clip(slope * residual[feasible], -700, 700)\n    scores_feas = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Assign scores to feasible bins.\n    scores[feasible] = scores_feas\n\n    # --- Deterministic tie\u2011breaker -----------------------------------------\n    # Tiny decreasing bias with index ensures stable ordering when scores tie.\n    epsilon = 1e-12\n    tie_bias = -np.arange(n_bins, dtype=float) * epsilon\n    scores = np.where(scores > -np.inf, scores + tie_bias, scores)\n\n    return scores\n\n[Reflection]\nAdaptive sigmoid scoring, MAD for spread, fallback std/range, safe exponent clipping, tiny index\u2011bias tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}