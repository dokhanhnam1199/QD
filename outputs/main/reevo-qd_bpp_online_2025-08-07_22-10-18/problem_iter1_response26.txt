```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Sigmoid Fit Score priority function for the online Bin Packing Problem.

    The score is a sigmoid that sharply rewards bins where the remaining capacity
    after placing the item is small (tight fit) and penalises bins with large leftover.
    Infeasible bins (capacity < item) receive a very low priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the bins.

    Returns
    -------
    np.ndarray
        Array of priority scores (higher means more desirable) with the same shape as
        `bins_remain_cap`. Infeasible bins are assigned -inf so they are never selected.
    """
    # Hyper‑parameters of the sigmoid.  Larger `steepness` makes the curve sharper;
    # `offset` shifts the curve so that a zero leftover yields a score close to 1.
    steepness = 12.0
    offset = 6.0

    # Bins that can actually accommodate the item.
    feasible = bins_remain_cap >= item

    # Remaining capacity if we place the item.
    remaining_after = bins_remain_cap - item

    # Initialise priorities: infeasible bins get -inf (worst possible score).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Sigmoid: high for small `remaining_after`, low for large.
    #   score = 1 / (1 + exp(steepness * remaining - offset))
    # At remaining = 0 => score ≈ 1 / (1 + exp(-offset)) ≈ 1 (for offset>5).
    # At large remaining => score → 0.
    priorities[feasible] = 1.0 / (1.0 + np.exp(steepness * remaining_after[feasible] - offset))

    return priorities
```
