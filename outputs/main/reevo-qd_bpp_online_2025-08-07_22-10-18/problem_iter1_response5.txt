```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse Distance (Proximity Fit) priority for online Bin Packing.

    For each bin that can accommodate the item, compute the leftover capacity
    after placing the item and assign a priority equal to the inverse of that
    leftover (plus a tiny epsilon to avoid division by zero).  
    Bins that cannot hold the item receive a very large negative priority,
    ensuring they are never chosen.  

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher is better).
    """
    # Compute available space after packing `item`
    space_left = bins_remain_cap - item

    # Only consider bins that can hold the item
    valid = space_left >= 0

    # Avoid division by zero with a very small epsilon
    eps = 1e-12

    # Inverse distance priority: the closer the remaining space to zero,
    # the higher the priority. Use -np.inf for invalid bins.
    priorities = np.where(
        valid,
        1.0 / (space_left + eps),  # Inverse of leftover space
        -np.inf                    # Completely invalid bins
    )

    return priorities
```
