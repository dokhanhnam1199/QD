```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online Bin Packing.

    Bins where the item fits exactly are given the highest possible priority
    (positive infinity). Among the remaining feasible bins, the priority is
    inversely proportional to the waste that would be left after inserting the
    item. Bins that cannot accommodate the item receive a priority of -inf.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the current bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (higher = more preferred). Bins that cannot
        accommodate the item have a priority of -np.inf.
    """
    # Ensure the input is a NumPy array of floats
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Compute the waste (remaining capacity after placing the item)
    waste = caps - item

    # Floating‑point tolerance for equality checks
    atol = 1e-9

    # Masks for exact fit and feasible bins
    exact_fit_mask = np.isclose(waste, 0.0, atol=atol)   # exact fits within tolerance
    feasible_mask   = waste >= -atol                     # can fit (including exact)

    # Initialise priority array with -inf (infeasible)
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # Assign infinite priority to exact fits
    priorities[exact_fit_mask] = np.inf

    # Compute priority for non‑exact feasible bins
    epsilon = 1e-12  # to avoid division by zero
    non_exact_mask = feasible_mask & ~exact_fit_mask
    priorities[non_exact_mask] = 1.0 / (waste[non_exact_mask] + epsilon)

    return priorities
```
