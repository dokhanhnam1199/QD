```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for online bin packing.

    - Prefers bins that leave the smallest leftover capacity after placement.
    - Gives a large boost to exact fits (leftover ≈ 0).
    - Uses a tiny index‑based bias to break ties deterministically.
    - Infeasible bins receive -inf priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores (higher = more desirable) for each bin.
    """
    # Ensure a NumPy array of floats
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Empty bin list → empty priority array
    if caps.size == 0:
        return np.array([], dtype=float)

    # Initialize all priorities to -inf (infeasible)
    priorities = np.full(caps.shape, -np.inf, dtype=float)

    # Identify feasible bins (capacity >= item)
    feasible_mask = caps >= item
    if not np.any(feasible_mask):
        # No feasible bin – return all -inf
        return priorities

    # Compute leftover capacity for feasible bins
    leftovers = caps[feasible_mask] - item  # >= 0

    # Base score: larger score for smaller leftover (best‑fit)
    base_score = -leftovers  # negative leftover → higher is better

    # Exact‑fit detection (within a tight tolerance)
    exact_mask = np.isclose(leftovers, 0.0, atol=1e-12)

    # Boost constant to guarantee exact fits outrank any best‑fit (choose large enough)
    BOOST = 1e6
    scores = base_score.copy()
    scores[exact_mask] += BOOST

    # Deterministic tie‑breaker: tiny penalty proportional to index (lower index wins)
    # Apply bias only to feasible positions
    tie_bias = -np.arange(caps.shape[0])[feasible_mask] * 1e-12
    scores += tie_bias

    # Insert computed scores back into the full priority vector
    priorities[feasible_mask] = scores

    return priorities
```
