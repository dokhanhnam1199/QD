```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of normalized inverse distance,
    nearest neighbors, MST approximation, degree heuristic, adaptive sparsification,
    and controlled exploration.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance Heuristic (normalized)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance))

    # 2. Nearest Neighbor Heuristic (normalized)
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Avoid self-loop
        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling for neighbors
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0
    nearest_neighbors = (nearest_neighbors - np.min(nearest_neighbors)) / (np.max(nearest_neighbors) - np.min(nearest_neighbors)) if np.max(nearest_neighbors) > np.min(nearest_neighbors) else nearest_neighbors

    # 3. Degree Heuristic (encourage degree 2)
    degree_heuristic = np.ones((n, n), dtype=float)
    np.fill_diagonal(degree_heuristic, 0.0)
    degree_heuristic = (degree_heuristic - np.min(degree_heuristic)) / (np.max(degree_heuristic) - np.min(degree_heuristic)) if np.max(degree_heuristic) > np.min(degree_heuristic) else degree_heuristic

    # 4. Minimum Spanning Tree (MST) heuristic (approximation using Prim's)
    mst_heuristic = np.zeros((n, n), dtype=float)
    start_node = 0
    visited = {start_node}
    possible_edges = []
    for i in range(n):
        if i != start_node:
            possible_edges.append((start_node, i, distance_matrix[start_node, i]))

    mst_edges = []
    while len(visited) < n:
        min_edge = None
        min_dist = np.inf
        valid_edges = [(u, v, dist) for u, v, dist in possible_edges if (u in visited and v not in visited) or (v in visited and u not in visited)]

        if valid_edges:
            min_edge = min(valid_edges, key=lambda edge: edge[2])

        if min_edge:
            u, v, _ = min_edge
            mst_edges.append((u, v))
            visited.add(u)
            visited.add(v)
            possible_edges = [(i, j, distance_matrix[i, j]) for i in range(n) for j in range(n) if i != j and ((i,j,distance_matrix[i,j]) not in possible_edges and (j,i,distance_matrix[j,i]) not in possible_edges) ]

            for i in range(n):
              if i not in visited:
                for v_node in visited:
                  if (i,v_node, distance_matrix[i, v_node]) not in possible_edges and (v_node, i, distance_matrix[v_node,i]) not in possible_edges :
                    possible_edges.append((i,v_node, distance_matrix[i, v_node]))
            possible_edges = list(set(possible_edges)) # Remove duplicates

    for u, v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0
    mst_heuristic = (mst_heuristic - np.min(mst_heuristic)) / (np.max(mst_heuristic) - np.min(mst_heuristic)) if np.max(mst_heuristic) > np.min(mst_heuristic) else mst_heuristic


    # 5. Combine Heuristics with weights
    weight_inverse_distance = 0.4
    weight_nearest_neighbors = 0.3
    weight_mst = 0.2
    weight_degree = 0.1

    heuristic_matrix = (weight_inverse_distance * inverse_distance +
                        weight_nearest_neighbors * nearest_neighbors +
                        weight_mst * mst_heuristic + weight_degree * degree_heuristic)

    # 6. Adaptive Sparsification
    k = min(max(3, int(np.sqrt(n))), n - 1)  # Adjust k based on sqrt(n)
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        heuristic_matrix[i, i] = 0  # Remove self loops

    # 7. Exploration Noise
    noise = np.random.rand(n, n) * 0.01
    heuristic_matrix += noise

    # 8. Normalize Heuristic Matrix
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    return heuristic_matrix
```
