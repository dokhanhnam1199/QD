```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of normalized factors,
    adaptive sparsification, exploration noise, and symmetry.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance Heuristic (Normalized)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance)

    # 2. Nearest Neighbor Heuristic (Normalized)
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Avoid self-loop
        num_neighbors = min(max(2, int(np.log(n))), n - 1)
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0
    nearest_neighbors = nearest_neighbors / np.max(nearest_neighbors) if np.max(nearest_neighbors) > 0 else nearest_neighbors

    # 3. Minimum Spanning Tree (MST) Heuristic (Simplified Prim's - Normalized)
    mst_heuristic = np.zeros((n, n), dtype=float)
    start_node = 0
    unvisited = set(range(n))
    unvisited.remove(start_node)
    mst_edges = []

    while unvisited:
        min_dist = np.inf
        best_edge = None
        for u in range(n):
            if u not in unvisited:
                for v in unvisited:
                    if distance_matrix[u, v] < min_dist:
                        min_dist = distance_matrix[u, v]
                        best_edge = (u, v)

        if best_edge:
            u, v = best_edge
            mst_edges.append((u, v))
            unvisited.remove(v)

    for u, v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0
    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) > 0 else mst_heuristic

    # 4. Node Degree Heuristic (Penalize Higher Degrees - Normalized)
    degree_heuristic = np.zeros((n, n), dtype=float)
    degrees = np.zeros(n, dtype=float)
    for i in range(n):
        degrees[i] = np.sum(distance_matrix[i, :] < np.inf) # Count neighbors ignoring np.inf
    max_degree = np.max(degrees)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (degrees[i] + degrees[j]) / (2 * max_degree) if max_degree > 0 else 0 # Scale between 0 and 1
                degree_heuristic[i, j] = 1 - degree_penalty # Invert so lower degree is better

    degree_heuristic = degree_heuristic / np.max(degree_heuristic) if np.max(degree_heuristic) > 0 else degree_heuristic

    # Combine Normalized Heuristics with Weights
    heuristic_matrix = (0.4 * inverse_distance +
                        0.3 * nearest_neighbors +
                        0.15 * mst_heuristic +
                        0.15 * degree_heuristic)

    # Adaptive Sparsification
    k = min(max(3, int(np.sqrt(n))), n - 1)
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        heuristic_matrix[i, i] = 0  # Remove self-loops

    # Normalize Rows
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    # Enforce Symmetry
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2.0

    # Add Exploration Noise
    noise = np.random.normal(0, 0.01, size=(n, n))
    heuristic_matrix = np.clip(heuristic_matrix + noise, 0, 1)

    return heuristic_matrix
```
