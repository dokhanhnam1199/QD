```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, adaptive sparsification,
    and edge combination strategies.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse Distance Heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance)) # Normalize


    # Nearest Neighbor Heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0
    nearest_neighbors = (nearest_neighbors - np.min(nearest_neighbors)) / (np.max(nearest_neighbors) - np.min(nearest_neighbors)) # Normalize

    # MST Heuristic (Prim's algorithm inspired approach)
    mst_heuristic = np.zeros((n, n), dtype=float)
    start_node = 0
    visited = {start_node}
    possible_edges = []
    for i in range(n):
        if i != start_node:
            possible_edges.append((start_node, i, distance_matrix[start_node, i]))

    mst_edges = []
    while len(visited) < n:
        min_edge = None
        min_dist = np.inf
        for u, v, dist in possible_edges:
            if (u in visited and v not in visited) or (v in visited and u not in visited):
                if dist < min_dist:
                    min_dist = dist
                    min_edge = (u, v, dist)
        if min_edge:
            u, v, _ = min_edge
            mst_edges.append((u, v))
            visited.add(u)
            visited.add(v)
            new_possible_edges = []
            for i in range(n):
                for j in range(n):
                    if i != j:
                        if (i, j, distance_matrix[i, j]) not in possible_edges:
                            new_possible_edges.append((i, j, distance_matrix[i, j]))

            possible_edges = new_possible_edges
            for i in range(n):
                if i not in visited:
                    for v_node in visited:
                        possible_edges.append((i, v_node, distance_matrix[i, v_node]))
            possible_edges = list(set(possible_edges))  # Remove duplicates
    for u, v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0
    mst_heuristic = (mst_heuristic - np.min(mst_heuristic)) / (np.max(mst_heuristic) - np.min(mst_heuristic)) # Normalize

    #Degree Heuristic
    degree_heuristic = np.zeros((n, n), dtype=float)
    avg_degree = 2 # Expect avg degree of 2 in TSP
    for i in range(n):
      for j in range(n):
        degree_heuristic[i,j] = 1/(abs(np.sum(distance_matrix[i,:] >0 ) - avg_degree) + 1e-9)
    degree_heuristic = (degree_heuristic - np.min(degree_heuristic)) / (np.max(degree_heuristic) - np.min(degree_heuristic)) # Normalize


    # Combine Heuristics (Adaptive Weights - can be tuned)
    w_inv = 0.30
    w_nn = 0.35
    w_mst = 0.25
    w_deg = 0.10

    heuristic_matrix = (w_inv * inverse_distance +
                        w_nn * nearest_neighbors +
                        w_mst * mst_heuristic +
                        w_deg * degree_heuristic)


    # Adaptive Sparsification (adjust based on n and percentile)
    percentile = 75  # Keep edges above the 75th percentile
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], percentile)
    heuristic_matrix[heuristic_matrix < threshold] = 0
    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0 # remove self loops

    # Exploration Noise (add a small amount of uniform noise)
    noise_level = 0.01
    heuristic_matrix += noise_level * np.random.rand(n, n)

    # Normalize Heuristic Matrix
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))

    return heuristic_matrix
```
