{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines multiple factors to assess edge desirability.\n\n    Args:\n        distance_matrix (np.ndarray): A matrix of distances between cities.\n\n    Returns:\n        np.ndarray: A matrix of heuristic values indicating the desirability of each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance: Shorter edges are generally better.\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Node degree penalty: Avoid nodes with already many connections (makes it harder to complete the tour)\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        # Estimate degree by summing inverse distances; normalize to range [0, 1].\n        node_degree = np.sum(inverse_distance[i,:]) + np.sum(inverse_distance[:,i])\n        node_degree /= (np.sum(inverse_distance) + 1e-9) #Normalize the degree\n        \n        #Penalize higher degrees\n        degree_penalty[i,:] = node_degree\n        degree_penalty[:,i] = node_degree\n    \n    degree_penalty = 1 - degree_penalty #Invert penalty, as low degree leads to more desireable\n    degree_penalty = np.clip(degree_penalty, 0.1, 1.0) #Make sure not to reach zero or less, since we will multiply it.\n\n    # Sparsification: Remove long edges based on a threshold related to average distance.\n    average_distance = np.mean(distance_matrix)\n    sparsification_threshold = 2 * average_distance  # A parameter to control the sparseness.\n\n    #Combine everything\n    heuristic_matrix = inverse_distance * degree_penalty\n\n    #Apply Sparsification\n    heuristic_matrix[distance_matrix > sparsification_threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines multiple factors and sparsifies the matrix.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing prior indicators.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Add factor based on the average distance to other nodes (node importance)\n    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))\n\n    # Sparsify the matrix - keep only the most promising edges\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 75)  # Threshold at 75th percentile\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Remove the possibility to travel from one node to itself\n    for i in range(n):\n        heuristic_matrix[i, i] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nThe better code leverages node importance and aggressive sparsification, unlike the degree-based penalty and average-distance thresholding in the worse code.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}