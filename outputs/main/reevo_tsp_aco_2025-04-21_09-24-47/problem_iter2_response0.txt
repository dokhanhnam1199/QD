```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version prioritizes shorter distances and penalizes edges connected to nodes
    that are already well-connected. It also sparsifies the heuristic matrix.

    Args:
        distance_matrix (np.ndarray): A distance matrix where distance_matrix[i, j]
                                       is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, indicating how
                     promising it is to include each edge. Higher values indicate
                     more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are more promising.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # 2. Node connectivity penalty: Penalize connections to well-connected nodes.
    #    The more connected the nodes i and j are, the less desirable the edge (i, j) is.
    node_degrees = np.sum(distance_matrix > 0, axis=0)
    connectivity_penalty = np.outer(node_degrees, node_degrees) # Matrix of node_degree[i] * node_degree[j]

    # 3. Combine inverse distance and connectivity penalty.
    heuristic_matrix = inverse_distance / (connectivity_penalty + 1) #Adding 1 to avoid division by zero


    # 4. Sparsification: Remove less promising edges to reduce search space.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) #Keep top 80% of edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
