{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity,\n    with adaptive, node-specific sparsification and normalization.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance) if np.max(inverse_distance) != 0 else inverse_distance\n\n    # 2. Node Degree Heuristic (Penalize High Degree - Less Aggressively)\n    degree_penalty = np.zeros((n, n), dtype=float)\n    avg_degree = 2\n    for i in range(n):\n        for j in range(n):\n            degree_penalty[i, j] = max(0, 1 - (np.argsort(distance_matrix[i, :]).tolist().index(j) / avg_degree))\n    degree_penalty = degree_penalty / np.max(degree_penalty) if np.max(degree_penalty) != 0 else degree_penalty\n\n    # 3. Global Connectivity Heuristic (MST-like approximation)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n    mst = minimum_spanning_tree(csr_matrix(distance_matrix))\n    for i in range(n):\n        for j in range(n):\n            if mst[i, j] > 0:\n                mst_heuristic[i, j] = 1.0\n    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) != 0 else mst_heuristic\n\n    # Combine heuristics (Adjusted Weights)\n    heuristic_matrix = (0.5 * inverse_distance +\n                        0.3 * degree_penalty +\n                        0.2 * mst_heuristic)\n\n    # Adaptive Sparsification (Node-Specific k)\n    for i in range(n):\n        k = min(max(2, int(np.sqrt(n))), n - 1)\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n\n    # Normalize Rows\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity,\n    with adaptive sparsification and normalization.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance) if np.max(inverse_distance) != 0 else inverse_distance\n\n    # 2. Node Degree Heuristic (Penalize High Degree - Less Aggressively)\n    degree_penalty = np.zeros((n, n), dtype=float)\n    avg_degree = 2\n    for i in range(n):\n        for j in range(n):\n            degree_penalty[i, j] = max(0, 1 - (np.argsort(distance_matrix[i, :]).tolist().index(j) / avg_degree))\n    degree_penalty = degree_penalty / np.max(degree_penalty) if np.max(degree_penalty) != 0 else degree_penalty\n\n    # 3. Global Connectivity Heuristic (MST-like approximation)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n    mst = minimum_spanning_tree(csr_matrix(distance_matrix))\n    for i in range(n):\n        for j in range(n):\n            if mst[i, j] > 0:\n                mst_heuristic[i, j] = 1.0\n    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) != 0 else mst_heuristic\n\n    # 4. Combination with Adaptive Weights\n    alpha, beta, gamma = 0.4, 0.3, 0.3  # Weights for inverse distance, degree penalty, and MST\n    heuristic_matrix = (alpha * inverse_distance +\n                        beta * degree_penalty +\n                        gamma * mst_heuristic)\n\n    # 5. Adaptive Sparsification (Node-Specific k) and Randomness\n    for i in range(n):\n        k = min(max(2, int(np.sqrt(n))), n - 1)\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0  # Sparsify\n        # Add small randomness to the k nearest neighbors\n        randomness = np.random.rand(k) * 0.01  # scaled randomness\n        heuristic_matrix[i, indices_to_keep] += randomness\n        heuristic_matrix[i, indices_to_keep] = np.clip(heuristic_matrix[i, indices_to_keep], 0, 1)\n\n\n    # 6. Normalize Rows\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nAdaptive weights, randomness in sparsification, and robust normalization improve heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}