```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Heuristic matrix indicating the desirability of including each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (basic heuristic)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # 2. Nearest neighbor heuristic
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Consider top 3 nearest neighbors
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for neighbor in nearest_neighbors[i]:
            nearest_neighbor_bonus[i, neighbor] = 1.0
            nearest_neighbor_bonus[neighbor, i] = 1.0

    # 3. Triangle inequality heuristic (encourages edges that skip long distances)
    triangle_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path = np.inf
                for k in range(n):
                    if k != i and k != j:
                        shortest_path = min(shortest_path, distance_matrix[i, k] + distance_matrix[k, j])
                triangle_heuristic[i, j] = max(0, (shortest_path - distance_matrix[i, j]) / (distance_matrix[i,j]+1e-9))

    # Combine the heuristics
    heuristic_matrix = (0.6 * inverse_distance +
                         0.2 * nearest_neighbor_bonus +
                         0.2 * triangle_heuristic)

    # Sparsify the matrix (keep only top k edges per node)
    k = int(np.sqrt(n))  # Number of edges to keep per node (adjust as needed)
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[::-1][k:]  # Get indices of the smallest values
        heuristic_matrix[i, indices] = 0
        heuristic_matrix[indices, i] = 0 #make sure symetrical

    # Normalize to range [0, 1]
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val
    
    return heuristic_matrix
```
