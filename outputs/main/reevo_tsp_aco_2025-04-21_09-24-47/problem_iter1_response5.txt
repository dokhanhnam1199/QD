```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (heuristics) of how promising each edge is.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the mean distance from each node
    node_means = np.mean(distance_matrix, axis=0)

    # Heuristic combining inverse distance, node means, and sparsification.

    for i in range(n):
        for j in range(n):
            if i != j:
                # Inverse Distance: Shorter distances are preferred
                inverse_distance = 1 / (distance_matrix[i, j] + 1e-9) # Add small constant to avoid division by zero

                # Node means factor: Favor edges connecting nodes with high average distance
                node_mean_factor = node_means[i] + node_means[j]

                # Combine factors
                heuristics[i, j] = inverse_distance * node_mean_factor

            else:
                heuristics[i, j] = 0  # No self-loops

    # Sparsification: Set unpromising edges to zero.
    # Identify a threshold based on heuristic values.  Dynamic threshold
    threshold = np.mean(heuristics[heuristics > 0]) * 0.5  # Consider only positive elements for the mean

    heuristics[heuristics < threshold] = 0  # Set values below the threshold to zero

    # Normalize the heuristics so that its on range [0,1]
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics = heuristics / max_heuristic

    return heuristics
```
