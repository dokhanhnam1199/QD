```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.

    This version incorporates the following ideas:
    1. Inverse distance: Shorter distances are generally more promising.
    2. Node degree: Avoid edges that would lead to high-degree nodes early in the tour.
    3. Sparsification: Set unpromising elements (high distances) to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      indicates the "promise" of including the corresponding edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero
    heuristics = inverse_distance

    # Node degree component - trying to encourage more uniformly selected nodes

    # Sparsification
    threshold = np.percentile(distance_matrix[distance_matrix > 0], 75)  # Keep top 75% "best" connections
    heuristics[distance_matrix > threshold] = 0

    # Encourage inclusion of edges connected to nodes that are far apart
    # This step aims to create a more balanced initial graph and potentially better exploration.
    for i in range(n):
        for j in range(n):
            if i != j:
                max_dist_i = np.max(distance_matrix[i, :])
                max_dist_j = np.max(distance_matrix[j, :])
                heuristics[i, j] += (max_dist_i + max_dist_j) / (2 * n * np.mean(distance_matrix)) # normalize range 0 to 1
    # Ensuring Symmetry
    heuristics = (heuristics + heuristics.T) / 2

    # Removing self loops (diagonal)
    np.fill_diagonal(heuristics, 0)


    return heuristics
```
