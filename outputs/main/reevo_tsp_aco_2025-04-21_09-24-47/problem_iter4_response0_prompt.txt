{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, sparsification,\n    and adaptive thresholding.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbor heuristic (more neighbors considered)\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Avoid self-loop\n        num_neighbors = min(4, n - 1)  # Consider top neighbors.  Increase neighbor consideration.\n        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n\n    # Calculate inverse distance\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero\n\n    # Calculate node degree desirability (lower degree is preferred)\n    degree_desirability = np.zeros((n, n), dtype=float)\n    avg_degree = (n - 1) #Fully connected graph, expected degree\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_desirability[i, j] = 1.0  # Base desirability\n\n    # Combine heuristics with adjusted weights\n    heuristic_matrix = (0.4 * inverse_distance +\n                        0.4 * nearest_neighbors +\n                        0.2 * degree_desirability)\n\n    # Adaptive Sparsification based on percentile thresholding\n    percentile_threshold = 60 # dynamically adjusted based on problem size, try higher values\n\n    for i in range(n):\n        threshold = np.percentile(heuristic_matrix[i], percentile_threshold)\n        heuristic_matrix[i, heuristic_matrix[i] < threshold] = 0\n        heuristic_matrix[i,i] = 0 # Remove self loops\n\n    # Normalize heuristic values to create a probability-like matrix\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)  # Avoid division by zero\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification,\n    and edge combination strategies.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate inverse distance\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Calculate nearest neighbor heuristic\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf\n        nearest_neighbor_indices = np.argsort(distances)[:min(3, n - 1)]  # Top 3 nearest neighbors\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n\n    # Node degree heuristic (prioritize nodes with fewer connections)\n    node_degree = np.sum(distance_matrix > 0, axis=0) #Assumes non-zero if edge exists\n    min_degree = np.min(node_degree)\n    degree_weights = min_degree / (node_degree + 1e-9) #Higher weight for lower degree\n\n    # Combine heuristics\n    heuristic_matrix = inverse_distance * (0.4 + 0.3 * nearest_neighbors) #Inverse dist and NN contrib\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (0.3 * (degree_weights[i] + degree_weights[j]) / 2) #Node degree contrib\n\n    # Adaptive Sparsification: Adjust k based on problem size\n    k = min(max(2, int(np.sqrt(n))), n - 1) # Dynamic k\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n        heuristic_matrix[i,i] = 0\n\n    # Normalize heuristic values (probability-like matrix)\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    return heuristic_matrix\n\n[Reflection]\nCombining diverse, problem-aware heuristics with adaptive sparsification improves TSP solution sampling.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}