```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines multiple factors to assess edge desirability.

    Args:
        distance_matrix (np.ndarray): A matrix of distances between cities.

    Returns:
        np.ndarray: A matrix of heuristic values indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance: Shorter edges are generally better.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Node degree penalty: Avoid nodes with already many connections (makes it harder to complete the tour)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Estimate degree by summing inverse distances; normalize to range [0, 1].
        node_degree = np.sum(inverse_distance[i,:]) + np.sum(inverse_distance[:,i])
        node_degree /= (np.sum(inverse_distance) + 1e-9) #Normalize the degree
        
        #Penalize higher degrees
        degree_penalty[i,:] = node_degree
        degree_penalty[:,i] = node_degree
    
    degree_penalty = 1 - degree_penalty #Invert penalty, as low degree leads to more desireable
    degree_penalty = np.clip(degree_penalty, 0.1, 1.0) #Make sure not to reach zero or less, since we will multiply it.

    # Sparsification: Remove long edges based on a threshold related to average distance.
    average_distance = np.mean(distance_matrix)
    sparsification_threshold = 2 * average_distance  # A parameter to control the sparseness.

    #Combine everything
    heuristic_matrix = inverse_distance * degree_penalty

    #Apply Sparsification
    heuristic_matrix[distance_matrix > sparsification_threshold] = 0

    return heuristic_matrix
```
