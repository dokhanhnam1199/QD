```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and stochastic solution sampling principles to guide the search.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
                                        represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix representing
                    the heuristic value (promisingness) of each edge. Higher values
                    indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the mean and standard deviation of distances.
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)

    # Incorporate inverse distance, crucial for TSP (shorter edges are better).
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Avoid division by zero

    # Node degree desirability (nodes with fewer close neighbors are more attractive to connect).
    node_degree_desirability = np.zeros((n, n))
    for i in range(n):
        distances_from_i = distance_matrix[i, :]
        # Find indices of k-nearest neighbors. Adjust k for problem size.
        k = min(5, n - 1)  # Consider up to 5 nearest neighbors
        nearest_neighbors_indices = np.argsort(distances_from_i)[1:k + 1] # Excluding itself at index 0

        # Reward connection to nodes that are not already well-connected.
        for j in range(n):
            if i != j:
                degree_j = 0  # Approximate "degree" by number of short edges connected to j.
                distances_from_j = distance_matrix[j, :]
                k_j = min(5, n-1)
                nearest_neighbors_j = np.argsort(distances_from_j)[1:k_j+1]

                degree_j = len(nearest_neighbors_j)  # simplified notion of degree
                node_degree_desirability[i, j] = 1 / (degree_j + 1) # Smaller degree is better.

    # Combine the factors. Adjust weights to fine-tune the heuristic.
    heuristic_matrix = (
        0.6 * inverse_distance +  # Primary: shorter distances are preferred.
        0.4 * node_degree_desirability # Secondary: connection to less connected nodes are favored
    )

    # Sparsify the matrix (optional but beneficial for large problems).
    # Set heuristic values below a threshold to zero.  Adjust threshold based on problem.
    threshold = np.mean(heuristic_matrix) * 0.2 # Try to keep top edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
