```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version combines several factors to determine the "promisingness"
    of including each edge in a solution, including distance, node degree
    considerations (to avoid nodes being over-connected early), and a bit
    of randomness for exploration.  It also sparsifies the matrix by
    setting elements considered unpromising to zero.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the
                                       distance matrix between cities.
                                       distance_matrix[i, j] is the distance
                                       between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    where each element indicates how promising it is to
                    include the corresponding edge in a TSP solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse of distance - closer cities are generally more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # Node degree heuristic:  Penalize edges connected to nodes that
    # are already highly connected in the current partial solution.
    # (Not directly implementable in a single pass heuristic function like this,
    # but we can approximate by penalizing edges connecting to nodes that have
    # many *nearby* nodes, i.e., nodes that are close according to the
    # distance matrix.)
    node_connectivity = np.sum(inverse_distance, axis=0)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine inverse distance, node connectivity penalties,
                # and a small amount of randomness
                heuristic_matrix[i, j] = (
                    inverse_distance[i, j]
                    / (node_connectivity[i] + node_connectivity[j])
                    + 0.01 * np.random.rand()  # Add some randomness for exploration
                )


    # Sparsify: Zero out edges that seem particularly unpromising.
    # This encourages the sampling algorithms to focus on a smaller subset
    # of edges.  We keep edges that are in the top k% of promisingness.
    k = 20  # Keep the top k% of edges

    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 100 - k)  #exclude 0 values

    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
