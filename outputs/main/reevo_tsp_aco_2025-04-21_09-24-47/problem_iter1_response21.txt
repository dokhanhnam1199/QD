```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling principles.

    This version combines several factors to assess the desirability of including each edge in a potential TSP solution.
    It considers:

    1.  Inverse distance: Shorter edges are generally more desirable.
    2.  Node degree preference: Favors edges connected to nodes with fewer connections (exploration).
    3.  Global shortest edges: Encourages participation of top shortest edges.
    4.  Sparsification: Sets probabilities for the longer edges to zero, which improves focus.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between nodes.
                                        distance_matrix[i, j] is the distance between node i and node j.
                                        Assume that distance_matrix[i, i] = np.inf.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each element
                    represents the desirability score for including the corresponding edge in the TSP solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree preference - prioritize edges connecting to less connected nodes
    degree_preference = np.zeros((n, n))
    for i in range(n):
        # A crude approximation of degree would be the sum of the desirability for neighboring nodes
        neighbor_desirability = np.sum(inverse_distance[i, :])
        for j in range(n):
            if i != j:
                degree_preference[i, j] = 1 / (neighbor_desirability + 1e-9)  # Penalize edges to nodes with high neighbor desirability

    # 3. Global shortest edges
    shortest_edges_bonus = np.zeros((n, n))
    k = n  # Number of top edges to consider (can be tuned)
    top_k_edges = np.argpartition(distance_matrix.flatten(), k)[:k] #indices of k smallest distances
    for index in top_k_edges:
        i = index // n
        j = index % n
        shortest_edges_bonus[i, j] = 1  # Assign a bonus to edges among the top k shortest

    # Combine the factors
    heuristic_matrix = inverse_distance * (0.6 + 0.4 * degree_preference) + 0.2* shortest_edges_bonus

    # 4. Sparsification - set unpromising elements (longer edges) to zero.
    threshold = np.quantile(distance_matrix[np.isfinite(distance_matrix)], 0.75)  # Dynamic threshold
    heuristic_matrix[distance_matrix > threshold] = 0.0

    # Ensure diagonal elements are 0
    for i in range(n):
        heuristic_matrix[i, i] = 0.0

    return heuristic_matrix
```
