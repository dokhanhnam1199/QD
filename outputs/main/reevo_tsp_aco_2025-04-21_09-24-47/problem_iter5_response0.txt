```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, adaptive sparsification,
    and edge combination strategies.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse Distance Heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance) # Normalize

    # Nearest Neighbor Heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0
    nearest_neighbors = nearest_neighbors / np.max(nearest_neighbors) # Normalize

    # MST Heuristic (Prim's algorithm inspired approach)
    mst_heuristic = np.zeros((n, n), dtype=float)
    start_node = 0
    visited = {start_node}
    possible_edges = []
    for i in range(n):
        if i != start_node:
            possible_edges.append((start_node, i, distance_matrix[start_node, i]))

    mst_edges = []
    while len(visited) < n:
        min_edge = None
        min_dist = np.inf
        for u, v, dist in possible_edges:
            if (u in visited and v not in visited) or (v in visited and u not in visited):
                if dist < min_dist:
                    min_dist = dist
                    min_edge = (u, v, dist)
        if min_edge:
            u, v, _ = min_edge
            mst_edges.append((u, v))
            visited.add(u)
            visited.add(v)
            new_possible_edges = []
            for i in range(n):
              for j in range(n):
                  if i != j:
                    if (i,j, distance_matrix[i,j]) not in possible_edges:
                      new_possible_edges.append((i, j, distance_matrix[i, j]))

            possible_edges = new_possible_edges
            for i in range(n):
              if i not in visited:
                for v_node in visited:

                  possible_edges.append((i,v_node, distance_matrix[i, v_node]))
            possible_edges = list(set(possible_edges)) # Remove duplicates
    for u,v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0
    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) > 0 else mst_heuristic # Normalize

    # Node Degree Heuristic (Discourage high-degree nodes but not too harshly)
    degree_heuristic = np.zeros((n, n), dtype=float)
    avg_dist = np.mean(distance_matrix[distance_matrix != np.inf])
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = min(1.0, distance_matrix[i,j] / avg_dist) #linear penalty on distance
                degree_heuristic[i, j] = 1- degree_penalty

    degree_heuristic = degree_heuristic / np.max(degree_heuristic) if np.max(degree_heuristic) > 0 else degree_heuristic # Normalize

    # Combine Heuristics
    heuristic_matrix = (0.3 * inverse_distance +
                        0.3 * nearest_neighbors +
                        0.2 * mst_heuristic +
                        0.2 * degree_heuristic)

    # Adaptive Sparsification (adjust based on n)
    k = min(max(3, int(np.sqrt(n))), n - 1) # Adjust k based on sqrt(n)
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        heuristic_matrix[i,i] = 0 # Remove self loops

    # Normalize Heuristic Matrix
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    # Ensure symmetry
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2.0

    # Add noise for exploration
    noise = np.random.normal(0, 0.01, size=(n, n))
    heuristic_matrix = np.clip(heuristic_matrix + noise, 0, 1)

    return heuristic_matrix
```
