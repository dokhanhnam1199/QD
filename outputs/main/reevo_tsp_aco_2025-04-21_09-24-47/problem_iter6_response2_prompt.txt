{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity,\n    with adaptive sparsification and normalization.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate node degree heuristic (encourage low-degree nodes) based on neighbor count\n    degree_heuristic = np.zeros(n)\n    for i in range(n):\n        degree_heuristic[i] = np.sum(distance_matrix[i, :] > 0)  # Count neighbors\n\n    # Calculate global connectivity heuristic (penalize edges that disconnect the graph)\n    # Approximate by the inverse of the average distance from each node to all other nodes.\n    avg_distance_heuristic = np.zeros(n)\n    for i in range(n):\n        neighbors = distance_matrix[i, :][distance_matrix[i, :] > 0]\n        if neighbors.size > 0:  # Handle isolated nodes\n            avg_distance_heuristic[i] = np.mean(neighbors)\n        else:\n            avg_distance_heuristic[i] = np.inf  # Assign a large penalty to isolated nodes\n\n        if np.isnan(avg_distance_heuristic[i]):\n            avg_distance_heuristic[i] = np.inf # Avoid NaN issues if a node is completely isolated\n        if avg_distance_heuristic[i] == 0: #Another edge case where all distances could be to itself and are 0.\n            avg_distance_heuristic[i] = 1 # avoid division by 0 issues, could be set higher\n\n\n    # Combine heuristics\n    for i in range(n):\n        for j in range(n):\n            if i != j and distance_matrix[i, j] > 0:\n                # Combine distance, degree, and connectivity heuristics\n                heuristic_matrix[i, j] = (\n                    (1 / (distance_matrix[i, j] + 1e-9))  # Favor shorter distances, prevent div by zero\n                    * (1 / (degree_heuristic[i] + degree_heuristic[j] + 1e-9))  # Favor lower-degree nodes, prevent div by zero\n                    * (1 / (avg_distance_heuristic[i] + avg_distance_heuristic[j] + 1e-9))  # Favor well-connected nodes, prevent div by zero\n                )\n\n    # Adaptive sparsification: keep only the k-nearest neighbors for each node\n    # where k is a function of the graph size and average degree\n    avg_degree = np.mean(degree_heuristic)\n    k = int(min(np.sqrt(n) + avg_degree/2, n-1))  # Adjust k based on graph density, but keep it <= n-1\n\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        indices = np.argsort(row)[::-1]\n        # Keep only the top k neighbors\n        for j in range(n):\n            if j not in indices[:k]:\n                heuristic_matrix[i,j] = 0\n\n    # Normalize the heuristic matrix row-wise to ensure probabilistic selection\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i, :])\n        if row_sum > 0:\n            heuristic_matrix[i, :] /= row_sum\n        else:\n            heuristic_matrix[i, :] = 1.0 / (n - 1)  # Assign equal probability if all are zero\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification,\n    and edge combination strategies.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance) # Normalize\n\n    # Nearest Neighbor Heuristic\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf\n        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling\n        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n    nearest_neighbors = nearest_neighbors / np.max(nearest_neighbors) # Normalize\n\n    # MST Heuristic (Prim's algorithm inspired approach)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n    start_node = 0\n    visited = {start_node}\n    possible_edges = []\n    for i in range(n):\n        if i != start_node:\n            possible_edges.append((start_node, i, distance_matrix[start_node, i]))\n\n    mst_edges = []\n    while len(visited) < n:\n        min_edge = None\n        min_dist = np.inf\n        for u, v, dist in possible_edges:\n            if (u in visited and v not in visited) or (v in visited and u not in visited):\n                if dist < min_dist:\n                    min_dist = dist\n                    min_edge = (u, v, dist)\n        if min_edge:\n            u, v, _ = min_edge\n            mst_edges.append((u, v))\n            visited.add(u)\n            visited.add(v)\n            new_possible_edges = []\n            for i in range(n):\n              for j in range(n):\n                  if i != j:\n                    if (i,j, distance_matrix[i,j]) not in possible_edges:\n                      new_possible_edges.append((i, j, distance_matrix[i, j]))\n\n            possible_edges = new_possible_edges\n            for i in range(n):\n              if i not in visited:\n                for v_node in visited:\n\n                  possible_edges.append((i,v_node, distance_matrix[i, v_node]))\n            possible_edges = list(set(possible_edges)) # Remove duplicates\n    for u,v in mst_edges:\n        mst_heuristic[u, v] = 1.0\n        mst_heuristic[v, u] = 1.0\n    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) > 0 else mst_heuristic # Normalize\n\n    # Node Degree Heuristic (Discourage high-degree nodes but not too harshly)\n    degree_heuristic = np.zeros((n, n), dtype=float)\n    avg_dist = np.mean(distance_matrix[distance_matrix != np.inf])\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_penalty = min(1.0, distance_matrix[i,j] / avg_dist) #linear penalty on distance\n                degree_heuristic[i, j] = 1- degree_penalty\n\n    degree_heuristic = degree_heuristic / np.max(degree_heuristic) if np.max(degree_heuristic) > 0 else degree_heuristic # Normalize\n\n    # Combine Heuristics\n    heuristic_matrix = (0.3 * inverse_distance +\n                        0.3 * nearest_neighbors +\n                        0.2 * mst_heuristic +\n                        0.2 * degree_heuristic)\n\n    # Adaptive Sparsification (adjust based on n)\n    k = min(max(3, int(np.sqrt(n))), n - 1) # Adjust k based on sqrt(n)\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n        heuristic_matrix[i,i] = 0 # Remove self loops\n\n    # Normalize Heuristic Matrix\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    # Ensure symmetry\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2.0\n\n    # Add noise for exploration\n    noise = np.random.normal(0, 0.01, size=(n, n))\n    heuristic_matrix = np.clip(heuristic_matrix + noise, 0, 1)\n\n    return heuristic_matrix\n\n[Reflection]\nIncorporate diverse, normalized heuristics (distance, neighbors, MST, degree). Adapt sparsification, add exploration noise, and ensure symmetry.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}