```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on distance and node degree.

    This function combines several factors to estimate the desirability of including each
    edge in a TSP solution. It considers the inverse distance, node degree (favoring edges
    connected to nodes with fewer connections), and sparsifies the matrix by setting
    unpromising edges to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                       represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                    represents the prior indicator of how promising it is to include
                    the corresponding edge in a TSP solution. Higher values indicate
                    more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance: shorter edges are generally better
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # Node degree heuristic: encourages connecting to nodes with fewer connections.
    # This is initially uniform, but will be updated during the search.
    node_degree_weights = np.ones(n) / n #start with equal weightings. The stochastic sampler using this heuristic will update the weights to steer towards the correct direction

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = inverse_distance[i, j] * node_degree_weights[i] * node_degree_weights[j]

    # Sparsify the matrix: only keep the most promising edges.
    # The number of edges to keep is a parameter (e.g., 2 * n for a sparse matrix).
    num_edges_to_keep = 2 * n
    indices = np.argpartition(heuristic_matrix.flatten(), -num_edges_to_keep)[-num_edges_to_keep:]
    row_indices, col_indices = np.unravel_index(indices, heuristic_matrix.shape)

    sparse_heuristic_matrix = np.zeros_like(heuristic_matrix)
    sparse_heuristic_matrix[row_indices, col_indices] = heuristic_matrix[row_indices, col_indices]
    #normalize
    sparse_heuristic_matrix = sparse_heuristic_matrix / (np.sum(sparse_heuristic_matrix)+1e-9)


    return sparse_heuristic_matrix
```
