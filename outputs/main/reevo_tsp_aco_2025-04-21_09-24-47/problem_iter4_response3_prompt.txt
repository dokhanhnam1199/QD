{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors\n    to estimate the \"promise\" of including each edge in the optimal tour. It incorporates\n    centrality measures and sparsifies the matrix based on neighbor count.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix\n                                       between cities. distance_matrix[i][j] gives the distance\n                                       between city i and city j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each element\n                    represents the heuristic value (promise) of including the corresponding edge\n                    in the TSP tour. Higher values indicate a more promising edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate inverse distance (closer cities are generally better)\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # Calculate a centrality measure: Closeness centrality approximation\n    # A city is central if it has small distances to all other cities\n    city_centrality = 1.0 / (np.sum(distance_matrix, axis=1) + 1e-9)  # Sum of distances from each city\n\n    # Combine the factors: Inverse distance * centrality of both cities\n    for i in range(n):\n        for j in range(n):\n            heuristic_matrix[i, j] = inverse_distance[i, j] * (city_centrality[i] + city_centrality[j]) / 2.0\n\n    # Sparsify the matrix: only keep the top k neighbors for each city\n    k = int(np.ceil(np.sqrt(n)))  # Number of neighbors scales with sqrt(n), rounded up\n\n    for i in range(n):\n        # Get the indices of the top k smallest distances from city i, excluding itself\n        distances = distance_matrix[i, :].copy()\n        distances[i] = np.inf  # Exclude the city itself\n        neighbors = np.argsort(distances)[:k]\n\n        # Zero out the heuristic values for edges that are not among the top k neighbors\n        for j in range(n):\n            if j not in neighbors:\n                heuristic_matrix[i, j] = 0.0\n\n    # Normalize to [0, 1] for consistency and easier interpretation, and prevent extremely large values.\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, sparsification, and adaptive thresholding.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Nearest neighbor heuristic\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf\n        nearest_neighbor_indices = np.argsort(distances)[:min(3, n - 1)]  # Consider top 3\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n\n    # Node degree heuristic (penalize high-degree nodes initially)\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    avg_degree = 2  # Desired average degree (adjust as needed)\n    for i in range(n):\n      for j in range(n):\n        if i != j:\n          degree_penalty[i,j] = max(0, np.sum(inverse_distance[i,:] > 0) - avg_degree) / n\n    degree_penalty = 1 / (1 + degree_penalty)\n\n    # Combined heuristic\n    heuristic_matrix = inverse_distance * (0.4 + 0.6 * nearest_neighbors) * degree_penalty\n\n    # Adaptive sparsification\n    k = min(max(2,int(np.sqrt(n))), n - 1)  # Adaptive k based on sqrt(n)\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n        heuristic_matrix[i,i] = 0\n\n    # Percentile-based Thresholding (more aggressive sparsification)\n    threshold_percentile = 20  #Adjust percentile as needed\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], threshold_percentile)\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Normalize\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    return heuristic_matrix\n\n[Reflection]\nSparsification, adaptive thresholds, nearest neighbors, and degree penalties improve TSP heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}