```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on stochastic solution sampling principles.
    Combines several factors to estimate the promise of each edge.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge.
                    Same shape as distance_matrix.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Shorter distances are generally better
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Node Degree Preference: Penalize edges that would lead to high-degree nodes early
    degree_preference = np.ones_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_preference[i, j] = 1.0

    # 3. Sparsification: Zero out edges with extremely high cost (relative to others)
    threshold = np.mean(distance_matrix) + 2 * np.std(distance_matrix)
    sparse_matrix = np.where(distance_matrix > threshold, 0, 1)

    # 4. Combination: Combine factors
    heuristic_matrix = inverse_distance * degree_preference * sparse_matrix

    # 5. Normalize to [0, 1]
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) / n  # Assign equal probability if all values are zero.

    return heuristic_matrix
```
