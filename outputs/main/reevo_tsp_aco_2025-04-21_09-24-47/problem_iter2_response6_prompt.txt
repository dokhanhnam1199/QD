{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for the Traveling Salesman Problem (TSP) based on distance and node degree.\n\n    This function combines several factors to estimate the desirability of including each\n    edge in a TSP solution. It considers the inverse distance, node degree (favoring edges\n    connected to nodes with fewer connections), and sparsifies the matrix by setting\n    unpromising edges to zero.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]\n                                       represents the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                    represents the prior indicator of how promising it is to include\n                    the corresponding edge in a TSP solution. Higher values indicate\n                    more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance: shorter edges are generally better\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero\n\n    # Node degree heuristic: encourages connecting to nodes with fewer connections.\n    # This is initially uniform, but will be updated during the search.\n    node_degree_weights = np.ones(n) / n #start with equal weightings. The stochastic sampler using this heuristic will update the weights to steer towards the correct direction\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] = inverse_distance[i, j] * node_degree_weights[i] * node_degree_weights[j]\n\n    # Sparsify the matrix: only keep the most promising edges.\n    # The number of edges to keep is a parameter (e.g., 2 * n for a sparse matrix).\n    num_edges_to_keep = 2 * n\n    indices = np.argpartition(heuristic_matrix.flatten(), -num_edges_to_keep)[-num_edges_to_keep:]\n    row_indices, col_indices = np.unravel_index(indices, heuristic_matrix.shape)\n\n    sparse_heuristic_matrix = np.zeros_like(heuristic_matrix)\n    sparse_heuristic_matrix[row_indices, col_indices] = heuristic_matrix[row_indices, col_indices]\n    #normalize\n    sparse_heuristic_matrix = sparse_heuristic_matrix / (np.sum(sparse_heuristic_matrix)+1e-9)\n\n\n    return sparse_heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate node degree heuristic (encourage low-degree nodes)\n    degree_heuristic = np.zeros(n)\n    for i in range(n):\n        degree_heuristic[i] = np.sum(distance_matrix[i, :] > 0)  # Count neighbors\n\n    # Calculate global connectivity heuristic (penalize edges that disconnect the graph)\n    # For simplicity, we approximate this by the inverse of the average distance from each node\n    # to all other nodes.  Nodes with large average distance might be more \"isolated\".\n    avg_distance_heuristic = np.zeros(n)\n    for i in range(n):\n        avg_distance_heuristic[i] = np.mean(distance_matrix[i, :][distance_matrix[i, :] > 0])\n        if np.isnan(avg_distance_heuristic[i]):\n            avg_distance_heuristic[i] = np.inf # Avoid NaN issues if a node is completely isolated\n        if avg_distance_heuristic[i] == 0: #Another edge case where all distances could be to itself and are 0.\n            avg_distance_heuristic[i] = 1 # avoid division by 0 issues, could be set higher\n\n    # Combine heuristics\n    for i in range(n):\n        for j in range(n):\n            if i != j and distance_matrix[i, j] > 0:\n                # Combine distance, degree, and connectivity heuristics\n                heuristic_matrix[i, j] = (\n                    (1 / distance_matrix[i, j])  # Favor shorter distances\n                    * (1 / (degree_heuristic[i] + degree_heuristic[j])) # Favor edges connected to lower-degree nodes\n                    * (1 / (avg_distance_heuristic[i] + avg_distance_heuristic[j]))  # Favor edges connected to well-connected nodes (small avg distance to others)\n                )\n    \n    #Sparsify the matrix: keep only the k-nearest neighbors for each node\n    k = int(np.sqrt(n)) # dynamically decide k to allow for varied network sizes\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        indices = np.argsort(row)[::-1]\n        # Keep only the top k neighbors\n        for j in range(n):\n            if j not in indices[:k]:\n                heuristic_matrix[i,j] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nIncorporate global connectivity, adaptive sparsification, and node degree informed by neighbor count for better heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}