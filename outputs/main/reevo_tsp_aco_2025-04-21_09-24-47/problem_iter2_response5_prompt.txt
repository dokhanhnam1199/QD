{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This function calculates a heuristic matrix indicating the desirability of including\n    each edge in the TSP tour. It considers a combination of factors:\n\n    1. Inverse distance: Shorter edges are generally more desirable.\n    2. Nearest neighbor consideration: Edges connecting nodes with few close neighbors\n       are penalized, as these nodes are likely to be bottlenecks.\n    3. Sparsification: Edges with very low desirability scores are set to zero\n       to reduce the search space.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance\n                                       matrix between nodes.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as the distance matrix,\n                    where each element represents the heuristic value of including\n                    the corresponding edge in the TSP tour. Higher values indicate\n                    more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to prevent division by zero\n\n    # Nearest neighbor consideration\n    nearest_neighbors = np.zeros(n)\n    for i in range(n):\n        distances = distance_matrix[i, :]\n        nearest_neighbors[i] = np.sum(distances < np.mean(distances))  # Count of nodes within mean distance\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Penalize edges connecting nodes with few neighbors. The idea here is that if\n                # a node only has one or two close neighbors, that edge MUST be in the optimal tour\n                # So penalize its inclusion for the purpose of generating a diverse set of candidate tours.\n                neighbor_penalty = (nearest_neighbors[i] * nearest_neighbors[j])\n                heuristic_matrix[i, j] = inverse_distance[i, j] * np.sqrt(neighbor_penalty)\n\n    # Normalize heuristic matrix\n    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)\n\n\n    # Sparsification: Set very low desirability scores to zero to reduce search space\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.1)  # Remove the worst 10%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that combines multiple factors to estimate\n    the promise of each edge. This version considers distance, node degree (preference for less-connected nodes),\n    and random noise for exploration. It also sparsifies the matrix.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between nodes.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each element indicates\n                      the heuristic value (promise) of including the corresponding edge in the solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate node degree heuristic (prefer less connected nodes)\n    degree_heuristic = np.ones((n, n))  # Initialize with ones to avoid division by zero if a node is isolated\n    for i in range(n):\n        # Approximate degree by summing inverse distances. Closer nodes increase degree\n        degree = np.sum(1 / (distance_matrix[i, :] + 1e-9))  # Adding small constant to avoid division by zero\n        degree_heuristic[i, :] = 1 / degree  # Inverse relation, less connected gets higher heuristic score.\n        degree_heuristic[:, i] = 1 / degree\n\n    # Incorporate distance information (shorter distances are better)\n    distance_heuristic = 1 / (distance_matrix + 1e-9)\n\n    # Add random noise for exploration\n    random_noise = np.random.rand(n, n) * 0.1  # Scale random noise to a small fraction\n\n    # Combine heuristics. Experiment with different weights.\n    heuristics = 0.6 * distance_heuristic + 0.3 * degree_heuristic + 0.1 * random_noise\n\n    # Set diagonal elements to zero (no self-loops)\n    np.fill_diagonal(heuristics, 0)\n\n    # Sparsify the matrix: only keep the most promising edges for each node\n    sparsity_threshold = 0.7  # Experiment with different thresholds to control sparsity. Higher = sparser\n    for i in range(n):\n        row = heuristics[i, :]\n        threshold = np.quantile(row[row > 0], sparsity_threshold)  # Filter zeros\n        heuristics[i, row < threshold] = 0\n    for j in range(n):\n        col = heuristics[:, j]\n        threshold = np.quantile(col[col > 0], sparsity_threshold)\n        heuristics[col < threshold, j] = 0\n\n\n    # Ensure symmetry (important for some TSP solvers/algorithms that expect it).\n    heuristics = (heuristics + heuristics.T) / 2\n\n    return heuristics\n\n[Reflection]\nPrioritize node degree, add noise, sparsify by node, and ensure symmetry for better TSP heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}