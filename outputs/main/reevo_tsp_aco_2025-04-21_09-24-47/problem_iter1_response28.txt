```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines multiple factors and sparsifies the matrix.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing prior indicators.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Add factor based on the average distance to other nodes (node importance)
    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))

    # Sparsify the matrix - keep only the most promising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 75)  # Threshold at 75th percentile
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Remove the possibility to travel from one node to itself
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
