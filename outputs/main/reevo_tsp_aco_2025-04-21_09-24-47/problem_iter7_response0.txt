```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, adaptive sparsification,
    and edge combination strategies.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance Heuristic (Normalized)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9)

    # 2. Nearest Neighbor Heuristic (Adaptive k, Normalized)
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        num_neighbors = min(max(2, int(np.sqrt(n))), n - 1)  # sqrt(n) scaling
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0
    nearest_neighbors = (nearest_neighbors - np.min(nearest_neighbors)) / (np.max(nearest_neighbors) - np.min(nearest_neighbors) + 1e-9)

    # 3. MST Heuristic (Approximation, Normalized)
    mst_heuristic = np.zeros((n, n), dtype=float)
    start_node = 0
    visited = {start_node}
    possible_edges = []
    for i in range(n):
        if i != start_node:
            possible_edges.append((start_node, i, distance_matrix[start_node, i]))

    mst_edges = []
    while len(visited) < n:
        min_edge = None
        min_dist = np.inf
        for u, v, dist in possible_edges:
            if (u in visited and v not in visited) or (v in visited and u not in visited):
                if dist < min_dist:
                    min_dist = dist
                    min_edge = (u, v, dist)
        if min_edge:
            u, v, _ = min_edge
            mst_edges.append((u, v))
            visited.add(u)
            visited.add(v)
            new_possible_edges = []
            for i in range(n):
              for j in range(n):
                  if i != j:
                    if (i,j, distance_matrix[i,j]) not in possible_edges:
                      new_possible_edges.append((i, j, distance_matrix[i, j]))

            possible_edges = new_possible_edges
            for i in range(n):
              if i not in visited:
                for v_node in visited:

                  possible_edges.append((i,v_node, distance_matrix[i, v_node]))
            possible_edges = list(set(possible_edges)) # Remove duplicates
    for u,v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0
    mst_heuristic = (mst_heuristic - np.min(mst_heuristic)) / (np.max(mst_heuristic) - np.min(mst_heuristic) + 1e-9)

    # 4. Degree heuristic - Prefer nodes with lower connections (Normalized)
    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)
    degrees = np.sum(distance_matrix > 0, axis=0)  # Number of connections for each node
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = degrees[i] + degrees[j]

    degree_heuristic = (degree_heuristic - np.min(degree_heuristic)) / (np.max(degree_heuristic) - np.min(degree_heuristic) + 1e-9)
    degree_heuristic = 1 - degree_heuristic

    # Combine Heuristics with adaptive weights
    weights = np.array([0.25, 0.35, 0.20, 0.20])
    heuristic_matrix = (weights[0] * inverse_distance +
                        weights[1] * nearest_neighbors +
                        weights[2] * mst_heuristic +
                        weights[3] * degree_heuristic)

    # Adaptive Sparsification (Percentile-based)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 75) # 75th percentile
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Exploration Noise (add a small amount of random noise to avoid getting stuck)
    noise = np.random.rand(n, n) * 0.01
    heuristic_matrix += noise

    # Normalize Heuristic Matrix
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    return heuristic_matrix
```
