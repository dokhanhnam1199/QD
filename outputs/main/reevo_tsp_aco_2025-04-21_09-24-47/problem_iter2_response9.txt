```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines inverse distance, node importance,
    adaptive percentile thresholding, and edge combination strategies.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing prior indicators.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Add factor based on the average distance to other nodes (node importance)
    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))

    # Adaptive percentile thresholding based on node importance
    threshold_matrix = np.zeros_like(heuristic_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Adjust percentile based on the relative importance of the nodes
                percentile = 75 + 25 * (node_importance[i] + node_importance[j]) / (2 * np.mean(node_importance))
                percentile = np.clip(percentile, 50, 95)  # Clip percentile to a reasonable range
                threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], percentile)
                threshold_matrix[i, j] = threshold

    # Sparsify the matrix based on adaptive thresholding
    for i in range(n):
        for j in range(n):
            if i != j:
                if heuristic_matrix[i, j] < threshold_matrix[i, j]:
                    heuristic_matrix[i, j] = 0

    # Edge combination strategy: combine heuristic value with shortest path estimate
    shortest_path_estimate = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_estimate[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])

    heuristic_matrix = 0.7 * heuristic_matrix + 0.3 / (shortest_path_estimate + 1e-9)

    # Remove the possibility to travel from one node to itself
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
