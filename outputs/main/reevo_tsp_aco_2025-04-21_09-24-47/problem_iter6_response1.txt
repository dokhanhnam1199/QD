```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using inverse distance, adaptive sparsification, and controlled randomness.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Adaptive sparsification based on percentile
    k = max(2, int(n * 0.2))  # Target neighborhood size (20% of nodes)
    k = min(k, n - 1)  # Ensure k is within bounds

    # Sparsification: Keep only the k nearest neighbors for each node
    for i in range(n):
        row = inverse_distance[i].copy()
        indices_to_keep = np.argsort(row)[-k:]  # Indices of k smallest distances
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0  # Set all but k nearest neighbors to 0
        heuristic_matrix[i, i] = 0  # Remove self-loops

    # Controlled randomness for exploration
    randomness = np.random.rand(n, n) * 0.05  # Add small random noise (5%)

    heuristic_matrix = heuristic_matrix + randomness  # Combine sparsified inverse distance with randomness

    # Normalization to create probabilities
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))  # Normalize rows, avoid division by zero

    return heuristic_matrix
```
