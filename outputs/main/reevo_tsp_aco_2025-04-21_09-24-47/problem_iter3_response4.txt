```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, sparsification, and adaptive thresholding.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Calculate node degree preference:  Nodes with lower degree are preferred (avoiding premature saturation).
    degree_preference = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_preference[i, j] = 1.0  # Initially, all edges are equally preferred
    row_sums = np.sum(degree_preference > 0, axis=1, keepdims=True)  # Calculate degree
    degree_penalty = np.clip(1.0 - row_sums / (n - 1), 0.1, 1.0)  # Scale degree preference, clipping to avoid zero
    for i in range(n):
        degree_preference[i, :] *= degree_penalty[i, 0]
    degree_preference = np.nan_to_num(degree_preference) #handles division by 0, though unlikely.

    # Adaptive Sparsification using Percentile Thresholding.
    threshold_percentile = 50  # Adjust percentile for sparsification. Experiment with different values.
    thresholds = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile) #only consider non-zero elements when determining threshold

    sparse_matrix = distance_matrix.copy()
    sparse_matrix[distance_matrix > thresholds] = np.inf  # effectively sparsifies matrix.
    sparse_matrix = (sparse_matrix != np.inf) #creates binary sparse representation

    # Combine heuristics, applying sparsification mask
    heuristic_matrix = inverse_distance * degree_preference * sparse_matrix # Element-wise product of factors

    # Ensure no self-loops.
    for i in range(n):
        heuristic_matrix[i, i] = 0.0

    # Normalize heuristic values to create a probability-like matrix.
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)  # Avoid division by zero

    return heuristic_matrix
```
