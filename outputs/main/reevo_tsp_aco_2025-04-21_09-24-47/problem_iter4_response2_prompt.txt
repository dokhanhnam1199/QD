{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This version prioritizes shorter distances and penalizes edges connected to nodes\n    that are already well-connected. It also sparsifies the heuristic matrix.\n\n    Args:\n        distance_matrix (np.ndarray): A distance matrix where distance_matrix[i, j]\n                                       is the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, indicating how\n                     promising it is to include each edge. Higher values indicate\n                     more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance: Shorter distances are more promising.\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # 2. Node connectivity penalty: Penalize connections to well-connected nodes.\n    #    The more connected the nodes i and j are, the less desirable the edge (i, j) is.\n    node_degrees = np.sum(distance_matrix > 0, axis=0)\n    connectivity_penalty = np.outer(node_degrees, node_degrees) # Matrix of node_degree[i] * node_degree[j]\n\n    # 3. Combine inverse distance and connectivity penalty.\n    heuristic_matrix = inverse_distance / (connectivity_penalty + 1) #Adding 1 to avoid division by zero\n\n\n    # 4. Sparsification: Remove less promising edges to reduce search space.\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) #Keep top 80% of edges\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that combines multiple factors to estimate\n    the promise of each edge. This version considers distance, node degree (preference for less-connected nodes),\n    and random noise for exploration. It sparsifies the matrix by node and ensures symmetry.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between nodes.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each element indicates\n                      the heuristic value (promise) of including the corresponding edge in the solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate node degree heuristic (prefer less connected nodes)\n    degree_heuristic = np.ones((n, n))  # Initialize with ones\n    for i in range(n):\n        degree = np.sum(1 / (distance_matrix[i, :] + 1e-9))\n        degree_heuristic[i, :] = 1 / degree\n        degree_heuristic[:, i] = 1 / degree\n\n    # Incorporate distance information (shorter distances are better)\n    distance_heuristic = 1 / (distance_matrix + 1e-9)\n\n    # Add random noise for exploration\n    random_noise = np.random.rand(n, n) * 0.1\n\n    # Combine heuristics with adjusted weights\n    heuristics = 0.3 * distance_heuristic + 0.6 * degree_heuristic + 0.1 * random_noise\n\n    # Set diagonal elements to zero (no self-loops)\n    np.fill_diagonal(heuristics, 0)\n\n    # Sparsify the matrix: only keep the most promising edges for each node\n    sparsity_threshold = 0.7\n    for i in range(n):\n        row = heuristics[i, :]\n        threshold = np.quantile(row[row > 0], sparsity_threshold)\n        heuristics[i, row < threshold] = 0\n\n    # Ensure symmetry\n    heuristics = (heuristics + heuristics.T) / 2\n\n    return heuristics\n\n[Reflection]\nPrioritize node degree effectively, add controlled noise, sparsify per node, and maintain symmetry for improvements.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}