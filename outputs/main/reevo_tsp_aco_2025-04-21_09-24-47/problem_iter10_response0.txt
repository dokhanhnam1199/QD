```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, adaptive sparsification,
    edge combination strategies, and cycle prevention.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse Distance Heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Nearest Neighbor Heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        nearest_neighbors[i, nearest_neighbor_indices] = 1.0

    # Minimum Spanning Tree (MST) heuristic (approximation using distances)
    mst_heuristic = np.zeros((n, n), dtype=float)

    # Prim's algorithm inspired approach
    start_node = 0
    visited = {start_node}
    possible_edges = []
    for i in range(n):
        if i != start_node:
            possible_edges.append((start_node, i, distance_matrix[start_node, i]))

    mst_edges = []
    while len(visited) < n:
        min_edge = None
        min_dist = np.inf
        for u, v, dist in possible_edges:
            if (u in visited and v not in visited) or (v in visited and u not in visited):
                if dist < min_dist:
                    min_dist = dist
                    min_edge = (u, v, dist)
        if min_edge:
            u, v, _ = min_edge
            mst_edges.append((u, v))
            visited.add(u)
            visited.add(v)
            new_possible_edges = []
            for i in range(n):
                for j in range(n):
                    if i != j:
                        if (i, j, distance_matrix[i, j]) not in possible_edges:
                            new_possible_edges.append((i, j, distance_matrix[i, j]))

            possible_edges = new_possible_edges
            for i in range(n):
                if i not in visited:
                    for v_node in visited:
                        possible_edges.append((i, v_node, distance_matrix[i, v_node]))
            possible_edges = list(set(possible_edges))  # Remove duplicates
    for u, v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0

    # Savings Heuristic (Corrected implementation)
    savings_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(i + 1, n):  # Iterate over upper triangle
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings

    # Degree Heuristic
    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)
    avg_degree = (n - 1)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(distance_matrix[i, :] > 0)
                degree_j = np.sum(distance_matrix[:, j] > 0)
                degree_heuristic[i, j] = 1 / (1 + np.abs(degree_i + degree_j - avg_degree))

    # Combine Heuristics (Adjusted Weights)
    heuristic_matrix = (0.3 * inverse_distance +
                        0.25 * nearest_neighbors +
                        0.15 * mst_heuristic +
                        0.15 * savings_heuristic +
                        0.15 * degree_heuristic)

    # Simplified Sparsification
    k = min(max(3, int(np.sqrt(n))), n - 1)
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        heuristic_matrix[i, ~np.isin(np.arange(n), indices_to_keep)] = 0
        heuristic_matrix[i, i] = 0 # Remove self loops


    # Noise and Symmetrization
    noise = np.random.rand(n, n) * 0.01
    heuristic_matrix = (heuristic_matrix + noise + heuristic_matrix.T) / 2


    # Cycle Prevention Heuristic (Reduced Factor)
    cycle_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                for k in range(n):
                    if k != i and k != j:
                        cycle_penalty = (heuristic_matrix[i, k] * heuristic_matrix[k, j])
                        cycle_heuristic[i, j] += cycle_penalty

    cycle_heuristic = cycle_heuristic / (np.max(cycle_heuristic) + 1e-9)
    heuristic_matrix = heuristic_matrix - 0.03 * cycle_heuristic  # Further reduced factor


    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))



    return heuristic_matrix
```
