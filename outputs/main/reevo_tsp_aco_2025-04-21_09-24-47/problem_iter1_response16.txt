```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values for each edge. Higher values
                    indicate a more promising edge.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance (basic heuristic)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Node degree heuristic: prioritize edges connected to nodes with low degree
    degree = np.sum(distance_matrix > 0, axis=0)  # Degree of each node
    degree_heuristic = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = 1 / (degree[i] + degree[j] + 1e-9)

    # Combination of heuristics (weighted sum)
    heuristics = 0.7 * inverse_distance + 0.3 * degree_heuristic

    # Sparsification: set elements below a threshold to zero.
    # This helps focus the search on more promising edges.
    threshold = np.quantile(heuristics[heuristics > 0], 0.2) # Keep the best 80% values
    heuristics[heuristics < threshold] = 0
    
    # Setting diagonal to zero
    for i in range(n):
        heuristics[i, i] = 0

    return heuristics
```
