{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree,\n    and random sampling to explore diverse solutions.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate node degrees based on inverse distance.  Nodes with shorter\n    # distances to other nodes are considered to have a higher degree.\n    node_degrees = np.sum(1.0 / (distance_matrix + np.eye(n)), axis=1)\n\n    # Combine inverse distance with node degrees to prioritize edges\n    # connecting high-degree nodes with short distances.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] = (1.0 / distance_matrix[i, j]) * (node_degrees[i] + node_degrees[j])\n\n    # Sparsify the heuristic matrix by setting less promising edges to zero.\n    # Threshold is calculated based on the mean of the heuristic values.\n\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 # changed the threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0.0\n\n    # Introduce some randomness to promote exploration.  This adds a small\n    # probability of considering edges that would otherwise be excluded.\n\n    random_matrix = np.random.rand(n, n) * 0.01  # small random values\n    heuristic_matrix += random_matrix\n\n    # Ensure no self-loops or zero distances.\n    np.fill_diagonal(heuristic_matrix, 0.0)\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines multiple factors and sparsifies the matrix.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing prior indicators.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Add factor based on the average distance to other nodes (node importance)\n    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))\n\n    # Sparsify the matrix - keep only the most promising edges\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 75)  # Threshold at 75th percentile\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Remove the possibility to travel from one node to itself\n    for i in range(n):\n        heuristic_matrix[i, i] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nBetter heuristic: inverse distance, node importance, percentile thresholding, avoids zero division.\nConsider adaptive thresholds, edge combination strategies, and learning from past solutions.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}