{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using inverse distance, adaptive sparsification, and controlled randomness.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Adaptive sparsification based on percentile\n    k = max(2, int(n * 0.2))  # Target neighborhood size (20% of nodes)\n    k = min(k, n - 1)  # Ensure k is within bounds\n\n    # Sparsification: Keep only the k nearest neighbors for each node\n    for i in range(n):\n        row = inverse_distance[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]  # Indices of k smallest distances\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0  # Set all but k nearest neighbors to 0\n        heuristic_matrix[i, i] = 0  # Remove self-loops\n\n    # Controlled randomness for exploration\n    randomness = np.random.rand(n, n) * 0.05  # Add small random noise (5%)\n\n    heuristic_matrix = heuristic_matrix + randomness  # Combine sparsified inverse distance with randomness\n\n    # Normalization to create probabilities\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))  # Normalize rows, avoid division by zero\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification,\n    and edge combination strategies.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse Distance Heuristic (normalized)\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance))\n\n    # Nearest Neighbor Heuristic (normalized)\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf\n        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling\n        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n    nearest_neighbors = (nearest_neighbors - np.min(nearest_neighbors)) / (np.max(nearest_neighbors) - np.min(nearest_neighbors))\n\n    # Degree heuristic (each node should have degree 2 in tour)\n    degree_heuristic = np.ones((n, n), dtype=float)\n    for i in range(n):\n        degree_heuristic[i, i] = 0.0\n    degree_heuristic = (degree_heuristic - np.min(degree_heuristic)) / (np.max(degree_heuristic) - np.min(degree_heuristic)) # Normalize: doesn't actually change the value of the matrix.\n\n    # Minimum Spanning Tree (MST) heuristic (approximation using distances)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n\n    #Prim's algorithm inspired approach\n    start_node = 0\n    visited = {start_node}\n    possible_edges = []\n    for i in range(n):\n        if i != start_node:\n            possible_edges.append((start_node, i, distance_matrix[start_node, i]))\n\n    mst_edges = []\n    while len(visited) < n:\n        min_edge = None\n        min_dist = np.inf\n        for u, v, dist in possible_edges:\n            if (u in visited and v not in visited) or (v in visited and u not in visited):\n                if dist < min_dist:\n                    min_dist = dist\n                    min_edge = (u, v, dist)\n        if min_edge:\n            u, v, _ = min_edge\n            mst_edges.append((u, v))\n            visited.add(u)\n            visited.add(v)\n            new_possible_edges = []\n            for i in range(n):\n              for j in range(n):\n                  if i != j:\n                    if (i,j, distance_matrix[i,j]) not in possible_edges:\n                      new_possible_edges.append((i, j, distance_matrix[i, j]))\n\n            possible_edges = new_possible_edges\n            for i in range(n):\n              if i not in visited:\n                for v_node in visited:\n\n                  possible_edges.append((i,v_node, distance_matrix[i, v_node]))\n            possible_edges = list(set(possible_edges)) # Remove duplicates\n    for u,v in mst_edges:\n        mst_heuristic[u, v] = 1.0\n        mst_heuristic[v, u] = 1.0\n    mst_heuristic = (mst_heuristic - np.min(mst_heuristic)) / (np.max(mst_heuristic) - np.min(mst_heuristic))\n\n    # Combine Heuristics with dynamic weights\n    weight_inverse_distance = 0.4\n    weight_nearest_neighbors = 0.3\n    weight_mst = 0.2\n    weight_degree = 0.1\n\n    heuristic_matrix = (weight_inverse_distance * inverse_distance +\n                        weight_nearest_neighbors * nearest_neighbors +\n                        weight_mst * mst_heuristic + weight_degree * degree_heuristic)\n\n    # Adaptive Sparsification (adjust based on n)\n    k = min(max(3, int(np.sqrt(n))), n - 1) # Adjust k based on sqrt(n)\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n        heuristic_matrix[i,i] = 0 # Remove self loops\n\n    # Exploration noise\n    noise = np.random.rand(n, n) * 0.01\n    heuristic_matrix += noise\n\n    # Normalize Heuristic Matrix\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    return heuristic_matrix\n\n[Reflection]\nDiversify heuristics (MST, degree), normalize, adapt sparsification, and control exploration for better TSP solutions.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}