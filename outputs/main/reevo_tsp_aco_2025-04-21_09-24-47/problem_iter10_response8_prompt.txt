{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification,\n    edge combination strategies, and cycle prevention.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Nearest Neighbor Heuristic\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf\n        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling\n        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n\n    # Minimum Spanning Tree (MST) heuristic (approximation using distances)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n\n    #Prim's algorithm inspired approach\n    start_node = 0\n    visited = {start_node}\n    possible_edges = []\n    for i in range(n):\n        if i != start_node:\n            possible_edges.append((start_node, i, distance_matrix[start_node, i]))\n\n    mst_edges = []\n    while len(visited) < n:\n        min_edge = None\n        min_dist = np.inf\n        for u, v, dist in possible_edges:\n            if (u in visited and v not in visited) or (v in visited and u not in visited):\n                if dist < min_dist:\n                    min_dist = dist\n                    min_edge = (u, v, dist)\n        if min_edge:\n            u, v, _ = min_edge\n            mst_edges.append((u, v))\n            visited.add(u)\n            visited.add(v)\n            new_possible_edges = []\n            for i in range(n):\n              for j in range(n):\n                  if i != j:\n                    if (i,j, distance_matrix[i,j]) not in possible_edges:\n                      new_possible_edges.append((i, j, distance_matrix[i, j]))\n\n            possible_edges = new_possible_edges\n            for i in range(n):\n              if i not in visited:\n                for v_node in visited:\n\n                  possible_edges.append((i,v_node, distance_matrix[i, v_node]))\n            possible_edges = list(set(possible_edges)) # Remove duplicates\n    for u,v in mst_edges:\n        mst_heuristic[u, v] = 1.0\n        mst_heuristic[v, u] = 1.0\n\n    # Degree Heuristic (penalize high-degree nodes less severely)\n    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    avg_degree = (n-1)  # max possible degree\n    for i in range(n):\n      for j in range(n):\n        if i != j:\n          degree_i = np.sum(distance_matrix[i,:] > 0)\n          degree_j = np.sum(distance_matrix[:,j] > 0)\n          degree_heuristic[i,j] = 1 / (1 + np.abs(degree_i + degree_j - avg_degree )) # less severe penalty\n\n    # Combine Heuristics\n    heuristic_matrix = (0.3 * inverse_distance +\n                        0.3 * nearest_neighbors +\n                        0.2 * mst_heuristic +\n                        0.2 * degree_heuristic)\n\n    # Adaptive Sparsification (adjust based on n)\n    k = min(max(3, int(np.sqrt(n))), n - 1) # Adjust k based on sqrt(n)\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n        heuristic_matrix[i,i] = 0 # Remove self loops\n\n    # Normalize Heuristic Matrix\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n    # Add small noise to allow exploration\n    noise = np.random.rand(n, n) * 0.01\n    heuristic_matrix = (heuristic_matrix + noise)\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T)/2 #ensure Symmetry\n\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n    # Cycle Prevention Heuristic\n    cycle_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Penalize edges that are likely to create short cycles\n                cycle_length = 3  # Consider cycles of length 3 (can be adjusted)\n                for k in range(n):\n                    if k != i and k != j:\n                        cycle_penalty = (heuristic_matrix[i, k] * heuristic_matrix[k, j])  # Product of probabilities\n                        cycle_heuristic[i, j] += cycle_penalty\n    cycle_heuristic = cycle_heuristic / (np.max(cycle_heuristic) + 1e-9) #Normalize\n    heuristic_matrix = heuristic_matrix - 0.1 * cycle_heuristic #reduce cycles\n\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n    #Path Relinking Heuristic\n    path_relinking_heuristic = np.zeros_like(distance_matrix, dtype=float)\n\n    #Consider including edges that connect distant nodes, to avoid local optima.\n    for i in range(n):\n      for j in range(n):\n        path_relinking_heuristic[i,j] = distance_matrix[i,j] / (np.max(distance_matrix)+1e-9)\n\n    path_relinking_heuristic = (path_relinking_heuristic + path_relinking_heuristic.T)/2\n    heuristic_matrix = heuristic_matrix + 0.05 * path_relinking_heuristic #Encourage path relinking\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification,\n    edge combination strategies, and cycle prevention.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Nearest Neighbor Heuristic\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf\n        num_neighbors = min(max(2, int(np.log(n))), n - 1)  # Logarithmic scaling\n        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n\n    # Minimum Spanning Tree (MST) heuristic (approximation using distances)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n\n    # Prim's algorithm inspired approach\n    start_node = 0\n    visited = {start_node}\n    possible_edges = []\n    for i in range(n):\n        if i != start_node:\n            possible_edges.append((start_node, i, distance_matrix[start_node, i]))\n\n    mst_edges = []\n    while len(visited) < n:\n        min_edge = None\n        min_dist = np.inf\n        for u, v, dist in possible_edges:\n            if (u in visited and v not in visited) or (v in visited and u not in visited):\n                if dist < min_dist:\n                    min_dist = dist\n                    min_edge = (u, v, dist)\n        if min_edge:\n            u, v, _ = min_edge\n            mst_edges.append((u, v))\n            visited.add(u)\n            visited.add(v)\n            new_possible_edges = []\n            for i in range(n):\n                for j in range(n):\n                    if i != j:\n                        if (i, j, distance_matrix[i, j]) not in possible_edges:\n                            new_possible_edges.append((i, j, distance_matrix[i, j]))\n\n            possible_edges = new_possible_edges\n            for i in range(n):\n                if i not in visited:\n                    for v_node in visited:\n                        possible_edges.append((i, v_node, distance_matrix[i, v_node]))\n            possible_edges = list(set(possible_edges))  # Remove duplicates\n    for u, v in mst_edges:\n        mst_heuristic[u, v] = 1.0\n        mst_heuristic[v, u] = 1.0\n\n    # Degree Heuristic (penalize high-degree nodes less severely)\n    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    avg_degree = (n - 1)  # max possible degree\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_i = np.sum(distance_matrix[i, :] > 0)\n                degree_j = np.sum(distance_matrix[:, j] > 0)\n                degree_heuristic[i, j] = 1 / (1 + np.abs(degree_i + degree_j - avg_degree))  # less severe penalty\n\n    # Combine Heuristics\n    heuristic_matrix = (0.3 * inverse_distance +\n                        0.3 * nearest_neighbors +\n                        0.2 * mst_heuristic +\n                        0.2 * degree_heuristic)\n\n    # Adaptive Sparsification (adjust based on n)\n    k = min(max(3, int(np.sqrt(n))), n - 1)  # Adjust k based on sqrt(n)\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0\n        heuristic_matrix[i, i] = 0  # Remove self loops\n\n    # Normalize Heuristic Matrix\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n    # Add small noise to allow exploration\n    noise = np.random.rand(n, n) * 0.01\n    heuristic_matrix = (heuristic_matrix + noise)\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2  # ensure Symmetry\n\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n\n    # Cycle Prevention Heuristic\n    cycle_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Penalize edges that are likely to create short cycles\n                cycle_length = 3  # Consider cycles of length 3 (can be adjusted)\n                for k in range(n):\n                    if k != i and k != j:\n                        cycle_penalty = (heuristic_matrix[i, k] * heuristic_matrix[k, j])  # Product of probabilities\n                        cycle_heuristic[i, j] += cycle_penalty\n    cycle_heuristic = cycle_heuristic / (np.max(cycle_heuristic) + 1e-9)  # Normalize\n\n    # Intensify cycle prevention based on problem size\n    cycle_penalty_factor = min(0.2, 0.05 + 0.001 * n)\n    heuristic_matrix = heuristic_matrix - cycle_penalty_factor * cycle_heuristic  # reduce cycles\n    # Re-normalize after cycle prevention\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))\n    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)  # Ensure values are within [0, 1] after subtraction\n\n\n    return heuristic_matrix\n\n[Reflection]\nAdaptive cycle prevention and clipping probabilities improve heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}