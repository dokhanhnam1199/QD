{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This function calculates a heuristic matrix indicating the desirability of including\n    each edge in the TSP tour. It considers a combination of factors:\n\n    1. Inverse distance: Shorter edges are generally more desirable.\n    2. Nearest neighbor consideration: Edges connecting nodes with few close neighbors\n       are penalized, as these nodes are likely to be bottlenecks.\n    3. Sparsification: Edges with very low desirability scores are set to zero\n       to reduce the search space.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance\n                                       matrix between nodes.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as the distance matrix,\n                    where each element represents the heuristic value of including\n                    the corresponding edge in the TSP tour. Higher values indicate\n                    more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to prevent division by zero\n\n    # Nearest neighbor consideration\n    nearest_neighbors = np.zeros(n)\n    for i in range(n):\n        distances = distance_matrix[i, :]\n        nearest_neighbors[i] = np.sum(distances < np.mean(distances))  # Count of nodes within mean distance\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Penalize edges connecting nodes with few neighbors. The idea here is that if\n                # a node only has one or two close neighbors, that edge MUST be in the optimal tour\n                # So penalize its inclusion for the purpose of generating a diverse set of candidate tours.\n                neighbor_penalty = (nearest_neighbors[i] * nearest_neighbors[j])\n                heuristic_matrix[i, j] = inverse_distance[i, j] * np.sqrt(neighbor_penalty)\n\n    # Normalize heuristic matrix\n    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)\n\n\n    # Sparsification: Set very low desirability scores to zero to reduce search space\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.1)  # Remove the worst 10%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This version combines several factors to determine the promise of including each edge in a solution.\n    It considers:\n        - Inverse distance: Shorter distances are more promising.\n        - Node degree: Nodes with few connections should prioritize those connections.\n        - Sparsification:  Sets elements to zero based on a combined metric to reduce search space.\n\n    Args:\n        distance_matrix (np.ndarray): A distance matrix where distance_matrix[i, j] is the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge.\n                     Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # 2. Node Degree (Prioritize connections for sparsely connected nodes)\n    degree = np.sum(distance_matrix > 0, axis=0)  # number of neighbors\n\n    # 3. Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                 heuristic_matrix[i, j] = inverse_distance[i, j]\n\n    # 4. Sparsification based on combined metric\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2  # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0  # Filter out unpromising edges\n\n    # Ensure symmetry if needed, although TSP distance matrices usually are\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    return heuristic_matrix\n\n[Reflection]\nThe better code uses simpler, more direct metrics like inverse distance and node degree, improving efficiency. Sparsification is also simplified.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}