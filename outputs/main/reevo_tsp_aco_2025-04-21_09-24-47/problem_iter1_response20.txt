```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix of the TSP problem.

    Returns:
        np.ndarray: Heuristic matrix indicating the desirability of each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate inverse distance (closer is better)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Calculate row-wise minimum distance (nearest neighbor heuristic)
    min_dist_rows = np.min(distance_matrix + np.diag([np.inf] * n), axis=1, keepdims=True) # avoid diagonal
    min_dist_cols = np.min(distance_matrix + np.diag([np.inf] * n), axis=0, keepdims=True)
    neighbor_score = 1 / (min_dist_rows + min_dist_cols.T + 1e-9)  # Nearest neighbors

    # Combine the factors
    heuristic_matrix = inverse_distance * neighbor_score

    # Sparsify the matrix by setting unpromising edges to zero.  Keep only top K neighbors for each node.
    k = int(np.sqrt(n))  # Adjust k based on problem size. Keep more neighbors for large problems.
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[-k:]  # Get indices of k largest values
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0


    # Make sure diagonals are zero
    np.fill_diagonal(heuristic_matrix, 0)


    return heuristic_matrix
```
