```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version combines several factors to determine the promise of including each edge in a solution.
    It considers:
        - Inverse distance: Shorter distances are more promising.
        - Node degree: Nodes with few connections should prioritize those connections.
        - Sparsification:  Sets elements to zero based on a combined metric to reduce search space.

    Args:
        distance_matrix (np.ndarray): A distance matrix where distance_matrix[i, j] is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge.
                     Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree (Prioritize connections for sparsely connected nodes)
    degree = np.sum(distance_matrix > 0, axis=0)  # number of neighbors

    # 3. Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i, j] = inverse_distance[i, j]

    # 4. Sparsification based on combined metric
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2  # Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0  # Filter out unpromising edges

    # Ensure symmetry if needed, although TSP distance matrices usually are
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
