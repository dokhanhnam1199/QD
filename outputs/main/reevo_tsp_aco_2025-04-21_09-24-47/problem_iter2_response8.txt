```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Nearest Neighbor Heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Avoid self-loop
        nearest_neighbor_indices = np.argsort(distances)[:min(3, n - 1)]  # Top 3 nearest neighbors
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0

    # Inverse Distance Heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Combined Heuristic (Weighted Average)
    heuristic_matrix = 0.6 * inverse_distance + 0.4 * nearest_neighbors

    # Adaptive Sparsification
    k = min(max(2, int(np.sqrt(n))), n - 1)  # Keep at least 2, up to sqrt(n) neighbors
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        heuristic_matrix[i, i] = 0

    # Normalization to Probabilities
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    return heuristic_matrix
```
