```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    to estimate the "promise" of including each edge in the optimal tour. It incorporates
    centrality measures and sparsifies the matrix based on neighbor count.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                       between cities. distance_matrix[i][j] gives the distance
                                       between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each element
                    represents the heuristic value (promise) of including the corresponding edge
                    in the TSP tour. Higher values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance (closer cities are generally better)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Calculate a centrality measure: Closeness centrality approximation
    # A city is central if it has small distances to all other cities
    city_centrality = 1.0 / (np.sum(distance_matrix, axis=1) + 1e-9)  # Sum of distances from each city

    # Combine the factors: Inverse distance * centrality of both cities
    for i in range(n):
        for j in range(n):
            heuristic_matrix[i, j] = inverse_distance[i, j] * (city_centrality[i] + city_centrality[j]) / 2.0

    # Sparsify the matrix: only keep the top k neighbors for each city
    k = int(np.ceil(np.sqrt(n)))  # Number of neighbors scales with sqrt(n), rounded up

    for i in range(n):
        # Get the indices of the top k smallest distances from city i, excluding itself
        distances = distance_matrix[i, :].copy()
        distances[i] = np.inf  # Exclude the city itself
        neighbors = np.argsort(distances)[:k]

        # Zero out the heuristic values for edges that are not among the top k neighbors
        for j in range(n):
            if j not in neighbors:
                heuristic_matrix[i, j] = 0.0

    # Normalize to [0, 1] for consistency and easier interpretation, and prevent extremely large values.
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
