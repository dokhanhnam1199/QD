{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Heuristic matrix indicating the desirability of including each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance (basic heuristic)\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero\n\n    # 2. Nearest neighbor heuristic\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Consider top 3 nearest neighbors\n    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for neighbor in nearest_neighbors[i]:\n            nearest_neighbor_bonus[i, neighbor] = 1.0\n            nearest_neighbor_bonus[neighbor, i] = 1.0\n\n    # 3. Triangle inequality heuristic (encourages edges that skip long distances)\n    triangle_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                shortest_path = np.inf\n                for k in range(n):\n                    if k != i and k != j:\n                        shortest_path = min(shortest_path, distance_matrix[i, k] + distance_matrix[k, j])\n                triangle_heuristic[i, j] = max(0, (shortest_path - distance_matrix[i, j]) / (distance_matrix[i,j]+1e-9))\n\n    # Combine the heuristics\n    heuristic_matrix = (0.6 * inverse_distance +\n                         0.2 * nearest_neighbor_bonus +\n                         0.2 * triangle_heuristic)\n\n    # Sparsify the matrix (keep only top k edges per node)\n    k = int(np.sqrt(n))  # Number of edges to keep per node (adjust as needed)\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        indices = np.argsort(row)[::-1][k:]  # Get indices of the smallest values\n        heuristic_matrix[i, indices] = 0\n        heuristic_matrix[indices, i] = 0 #make sure symetrical\n\n    # Normalize to range [0, 1]\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n    \n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbor heuristic\n    nearest_neighbors = np.zeros((n, n), dtype=float)\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Avoid self-loop\n        nearest_neighbor_indices = np.argsort(distances)[:2]  # Consider top 2 nearest neighbors\n        for neighbor_index in nearest_neighbor_indices:\n            nearest_neighbors[i, neighbor_index] = 1.0\n\n    # Calculate inverse distance\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero\n\n    # Combine heuristics\n    heuristic_matrix = inverse_distance * (0.5 + 0.5 * nearest_neighbors) #weighted averaging\n\n    # Sparsify the matrix:  Keep only the top k promising edges for each node.\n    k = min(5, n - 1)  # Keep at least top 2 neighbors.  Adjust `k` based on instance size.\n\n    for i in range(n):\n        row = heuristic_matrix[i].copy()  # Use a copy to avoid modifying the original during sorting\n        indices_to_keep = np.argsort(row)[-k:]  # Indices of the k largest values\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0  # Zero out less promising edges\n        heuristic_matrix[i,i] = 0 # Remove self loops\n\n    # Normalize heuristic values to create a probability-like matrix.  Normalization also mitigates any extreme value effects\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)  # Avoid division by zero\n\n    return heuristic_matrix\n\n[Reflection]\nBetter code: Focus on fewer neighbors, weighted averaging, instance-adaptive sparsification, and normalization for probabilities.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}