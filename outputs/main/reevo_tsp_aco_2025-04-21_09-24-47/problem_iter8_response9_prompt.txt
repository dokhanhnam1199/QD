{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using inverse distance, adaptive sparsification, and controlled randomness.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Adaptive sparsification based on percentile\n    k = max(2, int(n * 0.2))  # Target neighborhood size (20% of nodes)\n    k = min(k, n - 1)  # Ensure k is within bounds\n\n    # Sparsification: Keep only the k nearest neighbors for each node\n    for i in range(n):\n        row = inverse_distance[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]  # Indices of k smallest distances\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0  # Set all but k nearest neighbors to 0\n        heuristic_matrix[i, i] = 0  # Remove self-loops\n\n    # Controlled randomness for exploration\n    randomness = np.random.rand(n, n) * 0.05  # Add small random noise (5%)\n\n    heuristic_matrix = heuristic_matrix + randomness  # Combine sparsified inverse distance with randomness\n\n    # Normalization to create probabilities\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))  # Normalize rows, avoid division by zero\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity,\n    with adaptive sparsification and normalization.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance) if np.max(inverse_distance) != 0 else inverse_distance\n\n    # 2. Node Degree Heuristic (Penalize High Degree - Less Aggressively)\n    degree_penalty = np.zeros((n, n), dtype=float)\n    avg_degree = 2  # Expect each node to be connected to at least two neighbors in a good TSP solution\n    for i in range(n):\n        for j in range(n):\n            degree_penalty[i, j] = max(0, 1 - (np.argsort(distance_matrix[i, :]).tolist().index(j) / avg_degree))  # Scale degree by average degree\n    degree_penalty = degree_penalty / np.max(degree_penalty) if np.max(degree_penalty) != 0 else degree_penalty\n\n    # 3. Global Connectivity Heuristic (MST-like approximation)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n    from scipy.sparse.csgraph import minimum_spanning_tree\n    from scipy.sparse import csr_matrix\n\n    mst = minimum_spanning_tree(csr_matrix(distance_matrix))\n    for i in range(n):\n        for j in range(n):\n            if mst[i, j] > 0:\n                mst_heuristic[i, j] = 1.0\n    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) != 0 else mst_heuristic\n\n    # Combine heuristics (Adjusted Weights)\n    heuristic_matrix = (0.5 * inverse_distance +\n                        0.3 * degree_penalty +\n                        0.2 * mst_heuristic)\n\n    # Adaptive Sparsification (Node-Specific k)\n    for i in range(n):\n        k = min(max(2, int(np.sqrt(n))), n - 1)  # Node-specific k\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0  # Sparsify\n\n    # Normalize Rows\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nIncorporate diverse, normalized heuristics (distance, degree, connectivity), and adaptive sparsification for better TSP solutions.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}