{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This version prioritizes shorter distances and penalizes edges connected to nodes\n    that are already well-connected. It also sparsifies the heuristic matrix.\n\n    Args:\n        distance_matrix (np.ndarray): A distance matrix where distance_matrix[i, j]\n                                       is the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, indicating how\n                     promising it is to include each edge. Higher values indicate\n                     more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance: Shorter distances are more promising.\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # 2. Node connectivity penalty: Penalize connections to well-connected nodes.\n    #    The more connected the nodes i and j are, the less desirable the edge (i, j) is.\n    node_degrees = np.sum(distance_matrix > 0, axis=0)\n    connectivity_penalty = np.outer(node_degrees, node_degrees) # Matrix of node_degree[i] * node_degree[j]\n\n    # 3. Combine inverse distance and connectivity penalty.\n    heuristic_matrix = inverse_distance / (connectivity_penalty + 1) #Adding 1 to avoid division by zero\n\n\n    # 4. Sparsification: Remove less promising edges to reduce search space.\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) #Keep top 80% of edges\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity,\n    with adaptive sparsification.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate node degree heuristic (encourage low-degree nodes) based on neighbor count\n    degree_heuristic = np.zeros(n)\n    for i in range(n):\n        degree_heuristic[i] = np.sum(distance_matrix[i, :] > 0)  # Count neighbors\n\n    # Calculate global connectivity heuristic (penalize edges that disconnect the graph)\n    # Approximate by the inverse of the average distance from each node to all other nodes.\n    avg_distance_heuristic = np.zeros(n)\n    for i in range(n):\n        neighbors = distance_matrix[i, :][distance_matrix[i, :] > 0]\n        if neighbors.size > 0:  # Handle isolated nodes\n            avg_distance_heuristic[i] = np.mean(neighbors)\n        else:\n            avg_distance_heuristic[i] = np.inf  # Assign a large penalty to isolated nodes\n            \n        if np.isnan(avg_distance_heuristic[i]):\n            avg_distance_heuristic[i] = np.inf # Avoid NaN issues if a node is completely isolated\n        if avg_distance_heuristic[i] == 0: #Another edge case where all distances could be to itself and are 0.\n            avg_distance_heuristic[i] = 1 # avoid division by 0 issues, could be set higher\n\n\n    # Combine heuristics\n    for i in range(n):\n        for j in range(n):\n            if i != j and distance_matrix[i, j] > 0:\n                # Combine distance, degree, and connectivity heuristics\n                heuristic_matrix[i, j] = (\n                    (1 / (distance_matrix[i, j] + 1e-9))  # Favor shorter distances, prevent div by zero\n                    * (1 / (degree_heuristic[i] + degree_heuristic[j] + 1e-9))  # Favor lower-degree nodes, prevent div by zero\n                    * (1 / (avg_distance_heuristic[i] + avg_distance_heuristic[j] + 1e-9))  # Favor well-connected nodes, prevent div by zero\n                )\n\n    # Adaptive sparsification: keep only the k-nearest neighbors for each node\n    # where k is a function of the graph size and average degree\n    avg_degree = np.mean(degree_heuristic)\n    k = int(min(np.sqrt(n) + avg_degree/2, n-1))  # Adjust k based on graph density, but keep it <= n-1\n    \n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        indices = np.argsort(row)[::-1]\n        # Keep only the top k neighbors\n        for j in range(n):\n            if j not in indices[:k]:\n                heuristic_matrix[i,j] = 0\n\n    # Normalize the heuristic matrix\n    heuristic_matrix = heuristic_matrix / (np.sum(heuristic_matrix) + 1e-9)\n\n\n    return heuristic_matrix\n\n[Reflection]\nConsider adaptive sparsification, global connectivity, and node degree for improved heuristic guidance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}