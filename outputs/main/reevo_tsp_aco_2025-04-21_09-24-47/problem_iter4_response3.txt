```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, sparsification, and adaptive thresholding.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Nearest neighbor heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        nearest_neighbor_indices = np.argsort(distances)[:min(3, n - 1)]  # Consider top 3
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0

    # Node degree heuristic (penalize high-degree nodes initially)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    avg_degree = 2  # Desired average degree (adjust as needed)
    for i in range(n):
      for j in range(n):
        if i != j:
          degree_penalty[i,j] = max(0, np.sum(inverse_distance[i,:] > 0) - avg_degree) / n
    degree_penalty = 1 / (1 + degree_penalty)

    # Combined heuristic
    heuristic_matrix = inverse_distance * (0.4 + 0.6 * nearest_neighbors) * degree_penalty

    # Adaptive sparsification
    k = min(max(2,int(np.sqrt(n))), n - 1)  # Adaptive k based on sqrt(n)
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        heuristic_matrix[i,i] = 0

    # Percentile-based Thresholding (more aggressive sparsification)
    threshold_percentile = 20  #Adjust percentile as needed
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], threshold_percentile)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    # Optional: Add small random noise to break ties
    noise = np.random.normal(0, 0.001, size=heuristic_matrix.shape)
    heuristic_matrix = heuristic_matrix + noise

    return heuristic_matrix
```
