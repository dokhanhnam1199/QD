```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines node importance, inverse distance,
    and aggressive sparsification.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing prior indicators.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Node importance factor: Nodes with shorter average distance to others are more important.
    node_importance = 1 / (np.sum(distance_matrix, axis=0) + 1e-9)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (node_importance[i] + node_importance[j]) / 2

    # Aggressive sparsification based on percentile threshold
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 85)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Prevent self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
