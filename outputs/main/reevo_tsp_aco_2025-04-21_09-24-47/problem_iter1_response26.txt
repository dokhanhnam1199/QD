```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines several factors and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Heuristic matrix indicating the promisingness of each edge.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Closer edges are generally better.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # 2. Node Degree Preference: Encourage edges connecting to nodes with few connections in current solution.
    #    This aims to avoid prematurely isolating nodes.  Initially, all nodes have "equal" degree.
    #    We don't have an evolving "solution" here to assess the degree, so approximate
    #    by considering the number of relatively short edges connected to each node.

    degree_heuristic = np.zeros_like(distance_matrix)
    for i in range(n):
        # Count how many edges connected to node i are relatively short.
        # Shorter relative to the mean distance.
        mean_dist = np.mean(distance_matrix[i, :])
        short_edges_count = np.sum(distance_matrix[i, :] < mean_dist)
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = short_edges_count # lower "short edges count" is better

    degree_heuristic = 1 / (degree_heuristic + 1e-9) # Give high weights to lower-degree (isolated) nodes.

    # 3. Sparsification:  Zero out edges that are "too long".

    threshold = np.mean(distance_matrix) * 2  # Remove edges significantly longer than average.

    sparse_mask = distance_matrix < threshold


    # 4. Combine factors: Weight each factor and combine.
    heuristic_matrix = (0.7 * inverse_distance + 0.3 * degree_heuristic) * sparse_mask

    return heuristic_matrix
```
