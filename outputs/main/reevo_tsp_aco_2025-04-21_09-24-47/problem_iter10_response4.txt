```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import minimum_spanning_tree

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, adaptive sparsification,
    edge combination strategies, and cycle prevention.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse Distance Heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance)

    # Nearest Neighbor Heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        num_neighbors = min(max(2, int(np.log(n)), 2), n - 1)  # Logarithmic scaling
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0

    # Minimum Spanning Tree (MST) heuristic
    mst_heuristic = np.zeros((n, n), dtype=float)
    mst = minimum_spanning_tree(csr_matrix(distance_matrix))
    for i in range(n):
        for j in range(n):
            if mst[i, j] > 0:
                mst_heuristic[i, j] = 1.0
                mst_heuristic[j, i] = 1.0
    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) > 0 else mst_heuristic


    # Degree Heuristic (penalize high-degree nodes less severely)
    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)
    avg_degree = (n-1)  # max possible degree
    for i in range(n):
      for j in range(n):
        if i != j:
          degree_i = np.sum(distance_matrix[i,:] > 0)
          degree_j = np.sum(distance_matrix[:,j] > 0)
          degree_heuristic[i,j] = 1 / (1 + np.abs(degree_i + degree_j - avg_degree )) # less severe penalty


    # Combine Heuristics
    heuristic_matrix = (0.3 * inverse_distance +
                        0.3 * nearest_neighbors +
                        0.2 * mst_heuristic +
                        0.2 * degree_heuristic)

    # Adaptive Sparsification (adjust based on n)
    k = min(max(3, int(np.sqrt(n)), 2), n - 1)  # Adjust k based on sqrt(n)
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        heuristic_matrix[i,i] = 0 # Remove self loops


    # Normalize Heuristic Matrix
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))

    # Add small noise to allow exploration
    noise = np.random.rand(n, n) * 0.01
    heuristic_matrix = (heuristic_matrix + noise)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T)/2 #ensure Symmetry

    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))


    # Cycle Prevention Heuristic
    cycle_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Penalize edges that are likely to create short cycles
                cycle_length = 3  # Consider cycles of length 3 (can be adjusted)
                for k in range(n):
                    if k != i and k != j:
                        cycle_penalty = (heuristic_matrix[i, k] * heuristic_matrix[k, j])  # Product of probabilities
                        cycle_heuristic[i, j] += cycle_penalty
    cycle_heuristic = cycle_heuristic / (np.max(cycle_heuristic) + 1e-9) #Normalize
    heuristic_matrix = heuristic_matrix - 0.1 * cycle_heuristic #reduce cycles

    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))

    #Path Relinking Heuristic
    path_relinking_heuristic = np.zeros_like(distance_matrix, dtype=float)

    #Consider including edges that connect distant nodes, to avoid local optima.
    for i in range(n):
      for j in range(n):
        path_relinking_heuristic[i,j] = distance_matrix[i,j] / (np.max(distance_matrix)+1e-9)

    path_relinking_heuristic = (path_relinking_heuristic + path_relinking_heuristic.T)/2
    heuristic_matrix = heuristic_matrix + 0.05 * path_relinking_heuristic #Encourage path relinking
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9))


    return heuristic_matrix
```
