```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, sparsification,
    and adaptive thresholding.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbor heuristic (more neighbors considered)
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Avoid self-loop
        num_neighbors = min(4, n - 1)  # Consider top neighbors.  Increase neighbor consideration.
        nearest_neighbor_indices = np.argsort(distances)[:num_neighbors]
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0

    # Calculate inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Calculate node degree desirability (lower degree is preferred)
    degree_desirability = np.zeros((n, n), dtype=float)
    avg_degree = (n - 1) #Fully connected graph, expected degree
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_desirability[i, j] = 1.0  # Base desirability

    # Combine heuristics with adjusted weights
    heuristic_matrix = (0.4 * inverse_distance +
                        0.4 * nearest_neighbors +
                        0.2 * degree_desirability)

    # Adaptive Sparsification based on percentile thresholding
    percentile_threshold = 60 # dynamically adjusted based on problem size, try higher values

    for i in range(n):
        threshold = np.percentile(heuristic_matrix[i], percentile_threshold)
        heuristic_matrix[i, heuristic_matrix[i] < threshold] = 0
        heuristic_matrix[i,i] = 0 # Remove self loops

    # Normalize heuristic values to create a probability-like matrix
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)  # Avoid division by zero

    return heuristic_matrix
```
