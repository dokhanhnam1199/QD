{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This version combines several factors to determine the promise of including each edge in a solution.\n    It considers:\n        - Inverse distance: Shorter distances are more promising.\n        - Node degree: Nodes with few connections should prioritize those connections.\n        - Sparsification:  Sets elements to zero based on a combined metric to reduce search space.\n\n    Args:\n        distance_matrix (np.ndarray): A distance matrix where distance_matrix[i, j] is the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge.\n                     Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # 2. Node Degree (Prioritize connections for sparsely connected nodes)\n    degree = np.sum(distance_matrix > 0, axis=0)  # number of neighbors\n\n    # 3. Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                 heuristic_matrix[i, j] = inverse_distance[i, j]\n\n    # 4. Sparsification based on combined metric\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2  # Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0  # Filter out unpromising edges\n\n    # Ensure symmetry if needed, although TSP distance matrices usually are\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines multiple factors and sparsifies the matrix.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing prior indicators.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Add factor based on the average distance to other nodes (node importance)\n    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))\n\n    # Sparsify the matrix - keep only the most promising edges\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 75)  # Threshold at 75th percentile\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Remove the possibility to travel from one node to itself\n    for i in range(n):\n        heuristic_matrix[i, i] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nThe better code incorporates node importance and percentile-based sparsification, improving edge selection.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}