{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification, and edge combination.\n    Includes normalization and slight randomness. A revised node degree heuristic is used.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Node degree heuristic (favor nodes with shorter average distance to others)\n    node_degree_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    node_avg_distances = np.sum(distance_matrix, axis=1) / (n - 1 + 1e-9)  # Average distance to other nodes\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                node_degree_heuristic[i, j] = 1.0 / (node_avg_distances[i] + 1e-9) # Bias towards nodes with small average distances\n\n    # Sparsification - Adaptive k based on percentile.  This is the target neighborhood size.\n    k = max(2, int(n * 0.1))  # Start with a small percentage\n    k = min(k, n - 1) # Clamp it.\n    # Combination and Sparsification\n    combined_heuristic = inverse_distance * node_degree_heuristic\n    for i in range(n):\n        row = combined_heuristic[i].copy()\n        indices_to_keep = np.argsort(row)[-k:] # Keep k best edges.\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        combined_heuristic[i, ~mask] = 0\n        combined_heuristic[i, i] = 0 # Remove Self loop.\n\n    # Add some randomness to maintain some level of exploration to get unstuck from local optima\n    randomness = np.random.rand(n, n) * 0.01 # Add small random noise.\n\n    heuristic_matrix = combined_heuristic + randomness # Combine randomness.\n\n    # Normalization (Probability-like)\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / (row_sums + 1e-9)) # Adding small constant to avoid division by zero\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on distance, node degree, and global connectivity,\n    with adaptive sparsification and normalization.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix,\n        representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance Heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance) if np.max(inverse_distance) != 0 else inverse_distance\n\n    # 2. Node Degree Heuristic (Penalize High Degree - Less Aggressively)\n    degree_penalty = np.zeros((n, n), dtype=float)\n    avg_degree = 2  # Expect each node to be connected to at least two neighbors in a good TSP solution\n    for i in range(n):\n        for j in range(n):\n            degree_penalty[i, j] = max(0, 1 - (np.argsort(distance_matrix[i, :]).tolist().index(j) / avg_degree))  # Scale degree by average degree\n    degree_penalty = degree_penalty / np.max(degree_penalty) if np.max(degree_penalty) != 0 else degree_penalty\n\n    # 3. Global Connectivity Heuristic (MST-like approximation)\n    mst_heuristic = np.zeros((n, n), dtype=float)\n    from scipy.sparse.csgraph import minimum_spanning_tree\n    from scipy.sparse import csr_matrix\n\n    mst = minimum_spanning_tree(csr_matrix(distance_matrix))\n    for i in range(n):\n        for j in range(n):\n            if mst[i, j] > 0:\n                mst_heuristic[i, j] = 1.0\n    mst_heuristic = mst_heuristic / np.max(mst_heuristic) if np.max(mst_heuristic) != 0 else mst_heuristic\n\n    # Combine heuristics (Adjusted Weights)\n    heuristic_matrix = (0.5 * inverse_distance +\n                        0.3 * degree_penalty +\n                        0.2 * mst_heuristic)\n\n    # Adaptive Sparsification (Node-Specific k)\n    for i in range(n):\n        k = min(max(2, int(np.sqrt(n))), n - 1)  # Node-specific k\n        row = heuristic_matrix[i].copy()\n        indices_to_keep = np.argsort(row)[-k:]\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        heuristic_matrix[i, ~mask] = 0  # Sparsify\n\n    # Normalize Rows\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nIncorporate global connectivity, normalize effectively, and use adaptive, node-specific sparsification for improved TSP heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}