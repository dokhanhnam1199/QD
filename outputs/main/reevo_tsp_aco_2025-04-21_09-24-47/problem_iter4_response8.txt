```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for TSP that combines multiple factors and sparsifies the matrix using rank-based selection and node importance.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing prior indicators.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Add factor based on the average distance to other nodes (node importance)
    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))

    # Rank-based sparsification: keep top k edges for each node
    k = max(1, int(np.sqrt(n)))  # Number of edges to keep, scaled with the graph size. Adaptive k.

    for i in range(n):
        row = heuristic_matrix[i, :].copy()  # Copy the row to avoid modifying the original matrix during argsort
        indices = np.argsort(row)[::-1]  # Indices sorted by heuristic value in descending order

        # Zero out all but the top k edges
        mask = np.ones(n, dtype=bool)
        mask[indices[:k]] = False # keep top k
        heuristic_matrix[i, mask] = 0

    # Remove the possibility to travel from one node to itself
    for i in range(n):
        heuristic_matrix[i, i] = 0

    # Normalize rows to create probabilities
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)

    return heuristic_matrix
```
