```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using nearest neighbors and adaptive k-sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbor heuristic
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Avoid self-loop
        nearest_neighbor_indices = np.argsort(distances)[:2]  # Consider top 2 nearest neighbors
        for neighbor_index in nearest_neighbor_indices:
            nearest_neighbors[i, neighbor_index] = 1.0

    # Calculate inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Combine heuristics, weighting nearest neighbors more
    heuristic_matrix = inverse_distance * (0.75 * nearest_neighbors + 0.25)

    # Sparsify the matrix: Keep only the top k promising edges for each node.
    # Adapt k based on problem size, ensuring a minimum of 2.
    k = min(max(2, int(np.sqrt(n))), n - 1)

    for i in range(n):
        row = heuristic_matrix[i].copy()  # Use a copy to avoid modifying the original during sorting
        indices_to_keep = np.argsort(row)[-k:]  # Indices of the k largest values
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0  # Zero out less promising edges
        heuristic_matrix[i, i] = 0  # Remove self loops

    # Normalize heuristic values to create a probability-like matrix.  Normalization also mitigates any extreme value effects
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)  # Avoid division by zero

    return heuristic_matrix
```
