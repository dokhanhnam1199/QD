{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines multiple factors and sparsifies the matrix using rank-based selection and node importance.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing prior indicators.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Add factor based on the average distance to other nodes (node importance)\n    node_importance = np.sum(distance_matrix, axis=0)  # Sum distances for each node\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (1 / (node_importance[i] + node_importance[j] + 1e-9))\n\n    # Rank-based sparsification: keep top k edges for each node\n    k = max(1, int(np.sqrt(n)))  # Number of edges to keep, scaled with the graph size.\n\n    for i in range(n):\n        row = heuristic_matrix[i, :].copy()  # Copy the row to avoid modifying the original matrix during argsort\n        indices = np.argsort(row)[::-1]  # Indices sorted by heuristic value in descending order\n\n        # Zero out all but the top k edges\n        mask = np.ones(n, dtype=bool)\n        mask[indices[:k]] = False # keep top k\n        heuristic_matrix[i, mask] = 0\n\n    # Remove the possibility to travel from one node to itself\n    for i in range(n):\n        heuristic_matrix[i, i] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, adaptive sparsification, and edge combination.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.\n\n    Returns:\n        np.ndarray: Prior indicators (probabilities) of edge inclusion.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)\n\n    # Node degree heuristic (favor nodes with fewer connections)\n    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_heuristic[i, j] = 1.0\n\n    # Sparsification - Adaptive k based on percentile.  This is the target neighborhood size.\n    k = max(2, int(n * 0.1))  # Start with a small percentage\n    k = min(k, n - 1) # Clamp it.\n    # Combination and Sparsification\n    combined_heuristic = inverse_distance * degree_heuristic\n    for i in range(n):\n        row = combined_heuristic[i].copy()\n        indices_to_keep = np.argsort(row)[-k:] # Keep k best edges.\n        mask = np.zeros(n, dtype=bool)\n        mask[indices_to_keep] = True\n        combined_heuristic[i, ~mask] = 0\n        combined_heuristic[i, i] = 0 # Remove Self loop.\n\n    # Add some randomness to maintain some level of exploration to get unstuck from local optima\n    randomness = np.random.rand(n, n) * 0.01 # Add small random noise.\n\n    heuristic_matrix = combined_heuristic + randomness # Combine randomness.\n\n    # Normalization (Probability-like)\n    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)\n    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)\n\n    return heuristic_matrix\n\n[Reflection]\nAdaptive sparsification, randomness, normalization, and combined heuristics improve TSP solution sampling.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}