```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors, adaptive sparsification,
    and edge combination strategies, with improved heuristics and noise injection.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators (probabilities) of edge inclusion.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance Heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance) # Normalize

    # 2. Nearest Neighbor Heuristic (Adaptive k)
    nearest_neighbors = np.zeros((n, n), dtype=float)
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf
        k = min(max(2, int(np.sqrt(n))), n - 1)  # Adaptive k
        nearest_neighbor_indices = np.argsort(distances)[:k]
        nearest_neighbors[i, nearest_neighbor_indices] = 1.0
    nearest_neighbors = nearest_neighbors / np.max(nearest_neighbors)  # Normalize

    # 3. MST Approximation Heuristic (Prim-inspired)
    mst_heuristic = np.zeros((n, n), dtype=float)
    start_node = 0
    visited = {start_node}
    possible_edges = []
    for i in range(n):
        if i != start_node:
            possible_edges.append((start_node, i, distance_matrix[start_node, i]))

    mst_edges = []
    while len(visited) < n:
        min_edge = None
        min_dist = np.inf
        for u, v, dist in possible_edges:
            if (u in visited and v not in visited) or (v in visited and u not in visited):
                if dist < min_dist:
                    min_dist = dist
                    min_edge = (u, v, dist)
        if min_edge:
            u, v, _ = min_edge
            mst_edges.append((u, v))
            visited.add(u)
            visited.add(v)
            new_possible_edges = []
            for i in range(n):
              for j in range(n):
                  if i != j:
                    if (i,j, distance_matrix[i,j]) not in possible_edges:
                      new_possible_edges.append((i, j, distance_matrix[i, j]))

            possible_edges = new_possible_edges
            for i in range(n):
              if i not in visited:
                for v_node in visited:

                  possible_edges.append((i,v_node, distance_matrix[i, v_node]))
            possible_edges = list(set(possible_edges)) # Remove duplicates
    for u,v in mst_edges:
        mst_heuristic[u, v] = 1.0
        mst_heuristic[v, u] = 1.0
    mst_heuristic = mst_heuristic / np.max(mst_heuristic)  # Normalize

    # 4. Node Degree Heuristic (Penalize High Degree - Less Aggressively)
    degree_penalty = np.zeros((n, n), dtype=float)
    avg_degree = 2 # Expect each node to be connected to at least two neighbours in good TSP solution
    for i in range(n):
        for j in range(n):
            degree_penalty[i, j] = max(0, 1 - (distance_matrix[i].argsort().tolist().index(j) / avg_degree))  # Scale degree by average degree
    degree_penalty = degree_penalty / np.max(degree_penalty) # Normalize
    # 5. Combine Heuristics (Adjusted Weights)
    heuristic_matrix = (0.4 * inverse_distance +
                        0.4 * nearest_neighbors +
                        0.2 * mst_heuristic) # Increased Weight on MST and NN

    # Adaptive Sparsification (Node-Specific k and Noise Injection)
    for i in range(n):
        k = min(max(2, int(np.sqrt(n))), n - 1)  # Node-specific k
        row = heuristic_matrix[i].copy()
        indices_to_keep = np.argsort(row)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0  # Sparsify

    # Normalize Rows & Add Small Noise
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)
    noise = np.random.rand(n, n) * 0.01  # Small noise
    heuristic_matrix = (heuristic_matrix + noise)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2 # Maintain Symmetry
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)  # Clip to [0, 1]
    row_sums = heuristic_matrix.sum(axis=1, keepdims=True)
    heuristic_matrix = np.nan_to_num(heuristic_matrix / row_sums)
    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0

    return heuristic_matrix
```
