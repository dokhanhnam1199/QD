```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority if the item fits and the remaining capacity is small
    # Encourages filling bins as much as possible (First Fit Decreasing style)
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]  # Remaining ratio, lower is better, so we invert later
    priorities[fit_mask] = 1 - priorities[fit_mask]  # Invert, so lower remaining ratio is a *higher* priority

    # Give zero priority to bins that can't fit the item.
    priorities[~fit_mask] = -1 # negative priority so that only bins that fit can be chosen

    #Small adjustment to give preference to almost full bins:
    almost_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 2*item)
    priorities[almost_full_mask] += 0.1 #small bonus
        
    return priorities
```
