{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Give high priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    # Prioritize bins with less waste (First Fit Decreasing-like)\n    #Prioritize bins with minimal waste\n    if np.any(fit_mask):\n        min_waste = np.min(waste[fit_mask])\n        best_fit_mask = (waste == min_waste) & fit_mask #Find the minimum waste\n        priorities[best_fit_mask] = 100  #Very high priority.\n        priorities[fit_mask & ~best_fit_mask] = 50 #High priority but less than perfect fit\n    \n    # Discourage placing item in bins that don't fit (but allow it if no other option)\n    # Penalize by amount of overflow\n    overflow = -waste[~fit_mask] # Positive value indicates overflow\n\n    # Prioritize bins to minimize overflow as a last resort if no bin is suitable\n    if not np.any(fit_mask):\n        min_overflow = np.min(overflow)\n        min_overflow_mask = overflow == min_overflow\n        priorities[~fit_mask] = -overflow # overflow penalty\n        priorities[~fit_mask][min_overflow_mask] = -overflow[min_overflow_mask] + 10 # give bins with least overflow some preference\n        \n    return priorities\n\n[Reflection]\nConsider waste minimization, fit/overflow differentiation, and prioritizing best fits over overflows.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}