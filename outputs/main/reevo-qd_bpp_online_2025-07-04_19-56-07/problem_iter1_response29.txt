```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # First Fit Decreasing inspired: try to minimize the waste
            priorities[i] = 1 / (waste + 0.00001)  # Avoid division by zero
            # Bonus for bins that are close to full after packing, but less bonus for smaller waste
            priorities[i] += np.sqrt(item / cap)
        else:
            priorities[i] = -1000 # very low priority, making them unusable
    return priorities
```
