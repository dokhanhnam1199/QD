```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Prioritize bins that can fit the item (First-Fit Decreasing adaptation)
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Rule 2: Give higher priority to bins with less remaining capacity *if* they can fit the item.
    #         This encourages filling bins as much as possible. Prevents fragmentation.
    priorities[can_fit] += (1 / (bins_remain_cap[can_fit] + 1e-9)) # adding a tiny constant to avoid div by zero

    # Rule 3: Penalize bins where the item would create too much wasted space. Avoids near-empty bins at the end.
    waste = bins_remain_cap - item
    too_much_waste = waste > 0.75 * np.max(bins_remain_cap) #Threshold that works well
    priorities[too_much_waste] -= 0.5  # Subtracted to reduce priority if condition matched, should not be too high to avoid influencing much

    # Rule 4: Avoid bins that are almost full to promote diverse filling, encouraging smaller gaps
    almost_full = (bins_remain_cap > item) & (waste / bins_remain_cap < 0.1) #Prevents placing a small item into an almost-full bin
    priorities[almost_full] -= 0.2

    # Rule 5: Bins that cannot fit the item get a very negative priority, if any can fit
    if np.any(can_fit):
        priorities[~can_fit] = -1e9 #Prevent picking the unfitting bin

    #Return priorities
    return priorities
```
