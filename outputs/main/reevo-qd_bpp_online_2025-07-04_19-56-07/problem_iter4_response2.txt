```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste (First Fit Decreasing-like)
    if np.any(fit_mask):
        waste_fit = waste[fit_mask]
        # Prioritize bins to minimize waste within fitting bins
        min_waste = np.min(waste_fit)
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] = 100  # Very high priority for minimal waste fit

        # Give lower, positive priority to other fitting bins
        priorities[fit_mask & ~best_fit_mask] = 50 - waste[fit_mask & ~best_fit_mask] #Slightly penalized by waste

    # If no bins fit, minimize overflow
    else:
        overflow = -waste
        min_overflow = np.min(overflow)
        min_overflow_mask = overflow == min_overflow
        priorities[:] = -overflow  # Negative priority, proportional to overflow

        priorities[min_overflow_mask] = -min_overflow + 10 #Prefer bins with least overflow


    return priorities
```
