```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give negative infinite priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf
    
    # 2. Best Fit Criterion: Prefer bins with least remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap - item
    
    # Apply best fit only to feasible bins
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -np.abs(remaining_after_fit[feasible_bins])
    
    # 3. Reward bins that are almost full to avoid fragmentation
    almost_full_threshold = 0.1  # Define "almost full" as within 10% of capacity
    almost_full_bins = (bins_remain_cap > 0) & (bins_remain_cap <= item + almost_full_threshold) & feasible_bins
    priorities[almost_full_bins] += 10  # Substantially boost priority

    #4. Prioritize bins that fit the item perfectly. This reduces the bin number increase
    perfect_fit = (bins_remain_cap == item) & feasible_bins
    priorities[perfect_fit] += 100
        
    return priorities
```
