```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0

    # Prioritize bins with less waste (Best Fit) - Normalized
    if np.any(fit_mask):
        waste_fit = waste[fit_mask]
        min_waste = np.min(waste_fit)
        max_waste = np.max(waste_fit)

        if min_waste == max_waste:  #All wastes are the same
            priorities[fit_mask] = 1.0
        else:
            priorities[fit_mask] = (max_waste - waste_fit) / (max_waste - min_waste)

    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    overflow = -waste[~fit_mask]  # Positive value indicates overflow

    # Prioritize bins to minimize overflow as a last resort if no bin is suitable
    if not np.any(fit_mask):
        max_overflow = np.max(overflow)
        priorities[~fit_mask] = 1 - (overflow / max_overflow) if max_overflow > 0 else 1.0


    return priorities
```
