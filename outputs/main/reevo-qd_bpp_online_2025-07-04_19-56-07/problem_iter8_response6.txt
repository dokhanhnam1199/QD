```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste (First Fit Decreasing-like)
    if np.any(fit_mask):
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask #Find the minimum waste
        priorities[best_fit_mask] = 1000  #Very high priority.
        priorities[fit_mask & ~best_fit_mask] = 500 #High priority but less than perfect fit
        priorities[fit_mask] -= (waste[fit_mask] / np.max(bins_remain_cap)) * 100 # Scale the waste to penalize bins with larger waste.

    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    overflow = -waste[~fit_mask] # Positive value indicates overflow

    # Prioritize bins to minimize overflow as a last resort if no bin is suitable
    if not np.any(fit_mask):
        max_bin_cap = np.max(bins_remain_cap)
        min_overflow = np.min(overflow)
        min_overflow_mask = overflow == min_overflow
        priorities[~fit_mask] = -overflow * 100 # overflow penalty, scale overflow by 100 for greater effect.
        priorities[~fit_mask][min_overflow_mask] += 50 # give bins with least overflow some preference
        
    return priorities
```
