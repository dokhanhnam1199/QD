```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give very high priority to bins where item fits perfectly
    perfect_fit_mask = np.isclose(waste, 0)
    priorities[perfect_fit_mask] = 1e9 # Very large priority

    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less normalized waste (First Fit Decreasing-like)
    # Normalized Waste: waste / bins_remain_cap (original)
    normalized_waste = waste[fit_mask] / bins_remain_cap[fit_mask]
    priorities[fit_mask] = 100 / (normalized_waste + 0.00001)  # Scale waste penalty, avoid zero div
    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    overflow = -waste
    overflow_mask = waste < 0
    
    # Prioritize bins to minimize overflow as a last resort if no bin is suitable
    if not np.any(fit_mask):
         priorities[overflow_mask] = 1 / (overflow[overflow_mask]**2 + 0.00001) # Severely Penalize Overflow
    
    return priorities
```
