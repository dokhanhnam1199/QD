```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired priority: Prefer bins that can fit the item with least wasted space
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        wasted_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -wasted_space  # Lower wasted space = higher priority

        # Break ties: Prefer bins that are already somewhat full (to avoid fragmentation).
        priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap) * 0.1 
        
    else:
        # No bin can fit: Consider bins with the most remaining capacity (Worst-Fit).
        priorities = bins_remain_cap # prioritize largest bin

    return priorities
```
