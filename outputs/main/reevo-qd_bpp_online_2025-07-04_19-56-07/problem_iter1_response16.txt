```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after placing the item
    remaining_capacities = bins_remain_cap - item

    # Give very low priority to bins that cannot accommodate the item
    priorities[remaining_capacities < 0] = -np.inf

    # Higher priority for bins where item fits snugly
    # Use exponential to aggressively favor tight fits, but avoid div by zero.
    epsilon = 1e-9
    priorities[remaining_capacities >= 0] = np.exp(-np.abs(remaining_capacities[remaining_capacities >= 0]) / (item + epsilon))

    # Add a small bonus for bins that are already somewhat full
    priorities[remaining_capacities >= 0] += 0.1 * (1 - remaining_capacities[remaining_capacities >= 0] / bins_remain_cap[remaining_capacities >= 0])
    return priorities
```
