```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0

    # Prioritize bins with less waste (First Fit Decreasing-like)
    if np.any(fit_mask):
        waste_fit = waste[fit_mask]
        # Normalize waste to be between 0 and 1, smaller waste gets higher priority
        normalized_waste = 1 - (waste_fit / np.max(bins_remain_cap))  # Normalize waste
        priorities[fit_mask] = normalized_waste
    else:
        # If no bin can fit the item, try to minimize overflow
        overflow = -waste
        min_overflow = np.min(overflow)
        priorities = 1 - (overflow / np.max(overflow))
        
    return priorities
```
