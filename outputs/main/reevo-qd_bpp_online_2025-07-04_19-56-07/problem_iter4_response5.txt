```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste (First Fit Decreasing-like)
    if np.any(fit_mask):
        waste_in_fit_bins = waste[fit_mask]
        # Scale waste to [0, 1] where 0 is best (least waste)
        scaled_waste = (waste_in_fit_bins - np.min(waste_in_fit_bins)) / (np.max(waste_in_fit_bins) - np.min(waste_in_fit_bins) + 1e-9)  # Avoid division by zero

        priorities[fit_mask] = 1 - scaled_waste + 1 # Higher priority for smaller waste
        
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    overflow = -waste[~fit_mask] # Positive value indicates overflow

    # Prioritize bins to minimize overflow as a last resort if no bin is suitable
    if not np.any(fit_mask):
        # Scale overflow to [0, 1] where 0 is best (least overflow)
        scaled_overflow = (overflow - np.min(overflow)) / (np.max(overflow) - np.min(overflow) + 1e-9)

        priorities[~fit_mask] = -(scaled_overflow + 0.1) # Assign negative priority based on overflow

    return priorities
```
