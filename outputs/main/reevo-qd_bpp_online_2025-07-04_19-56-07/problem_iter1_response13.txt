```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Assign a very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Best Fit Heuristic: Prefer bins with smallest remaining capacity AFTER placing the item.
    # Also consider the wasted space (remaining capacity after placing).

    remaining_after_fit = bins_remain_cap - item
    feasible_mask = ~infeasible_mask

    if np.any(feasible_mask):  # Avoid calculations if no bins can fit the item.

        # Prioritize bins with smaller waste
        waste = remaining_after_fit[feasible_mask]
        priorities[feasible_mask] = -waste # Smaller waste leads to bigger priority.
        
        # Boost priority of bins closer to being full after placing the item to incentivize full bins
        fullness_ratio = (bins_remain_cap[feasible_mask] - waste) / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] += 10 * fullness_ratio # Higher weight for fullness
        
        # Give higher priority to bins where item fills a significant portion
        portion_filled = item / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] += 5 * portion_filled # Moderate weight. Can be tuned.
        
        # If there is an exact fit then provide a large boost to the priority
        exact_fit_mask = remaining_after_fit[feasible_mask] == 0
        priorities[feasible_mask][exact_fit_mask] = np.inf
        
    return priorities
```
