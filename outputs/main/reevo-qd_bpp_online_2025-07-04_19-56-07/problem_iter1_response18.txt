```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining Capacity: Favor bins with less remaining capacity AFTER adding the item,
    #    but only if the bin is feasible. This implements First-Fit Decreasing.

    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Mark infeasible bins with infinity
    priorities[feasible_bins] = -remaining_after_fit[feasible_bins]  # Smaller remaining capacity, higher priority
    
    # 3. Tie-breaker: If multiple bins have similar remaining capacities after fitting the item,
    #    prefer the bin with largest original capacity. This helps balance load across bins.

    # Implement a tiny random bias to avoid pathological scenarios where perfectly identically-sized
    # bins cause placement issues.
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6
    
    return priorities
```
