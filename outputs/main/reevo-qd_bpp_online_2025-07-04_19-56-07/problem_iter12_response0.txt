```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste (First Fit Decreasing-like), using a more sensitive scale for small waste
    priorities[fit_mask] = np.exp(-waste[fit_mask] / (item + 1e-9))  # Exponential decay based on waste, normalized by item size

    # If no bin fits, then minimize overflow, but significantly penalize it.
    if not np.any(fit_mask):
        overflow = -waste[~fit_mask]  # Positive value indicates overflow
        priorities[~fit_mask] = np.exp(-overflow / (item + 1e-9)) * 0.1 # Heavily penalize overflows

    return priorities
```
