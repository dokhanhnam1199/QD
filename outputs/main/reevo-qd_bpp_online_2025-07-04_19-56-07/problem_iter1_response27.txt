```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First-Fit Decreasing modification: Prefer bins that fit item closely
            # Heuristic 1:  Closer to full capacity AFTER placement = higher priority.

            space_left_after_placement = cap - item
            priorities[i] = 1 / (space_left_after_placement + 0.0001) #Avoid division by zero

            # Heuristic 2: Consider relative waste.  Higher remaining capacity
            # to item size gives slightly lower prioritiy than filling bin near full
            priorities[i] += cap/(item + 0.0001)

            #Heuristic 3: Penalize very empty bins a little bit to avoid wasting too much space at beginning
            if cap > item * 2: #Arbitrary threshold, can be tuned
                priorities[i] *= 0.9


        else:
            priorities[i] = -np.inf #Cannot place the item

    return priorities
```
