```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0

    # Prioritize bins with less waste, normalized by remaining capacity
    if np.any(fit_mask):
        priorities[fit_mask] = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
    
        # Attempt consolidation: If there are multiple bins that fit, prioritize ones with smaller capacity
        available_capacities = bins_remain_cap[fit_mask]
        min_capacity = np.min(available_capacities)

        # Boost the priority of the bins with min capacity
        min_capacity_mask = available_capacities == min_capacity
        priorities[fit_mask][min_capacity_mask] *= 1.1  # Boost priority by a small factor (e.g., 1.1)
    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    overflow = -waste[~fit_mask]  # Positive value indicates overflow

    # If no bin fits, prioritize bins to minimize overflow
    if not np.any(fit_mask):
         # Normalize overflow penalty by item size
        priorities[~fit_mask] = 1 - (overflow / item)

    # Normalize priorities to ensure stable selection
    if np.sum(priorities) > 0:
        priorities /= np.sum(priorities)

    return priorities
```
