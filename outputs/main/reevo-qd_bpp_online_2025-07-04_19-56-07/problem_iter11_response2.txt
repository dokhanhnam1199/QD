```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Identify bins where item fits
    fit_mask = waste >= 0
    
    # Normalize remaining capacities to prioritize fuller bins (best fit)
    normalized_capacities = bins_remain_cap / np.max(bins_remain_cap, initial=1e-9)  # Normalize to [0, 1]

    # Prioritize bins that fit the item and have lower normalized remaining capacity
    priorities[fit_mask] = (1 - normalized_capacities[fit_mask])  # High priority for almost full bins

    # If no bin fits, minimize overflow and penalize based on how many bins overflow
    if not np.any(fit_mask):
        overflow = -waste
        num_overflowing = len(bins_remain_cap)

        if num_overflowing > 0:
            priorities = 1 / (overflow + 1e-9) # minimize overflow
        else:
            priorities = np.zeros_like(bins_remain_cap, dtype=float)  # No bins to choose from.
            
    # Normalize priorities to ensure stable selection and avoid domination by very high scores
    if np.any(priorities > 0):  # Avoid division by zero if all priorities are zero
        priorities = priorities / np.max(priorities)
            
    return priorities
```
