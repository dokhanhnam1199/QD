```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Disqualify bins that are too small.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # 2. Maximize space utilization (minimize wasted space).
    # Reward bins that have a remaining capacity close to the item size.
    # A good fit avoids creating too much small waste.

    # Calculate waste if the item is placed in each bin
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf #Ignore infeasible waste (should be already handled)
    
    # Prioritize bins with smallest waste, avoid too small waste
    priorities[~infeasible_bins] = -np.abs(waste[~infeasible_bins]) # Negative because we want to maximize the score.
    
    #3. Breaking Ties, penalize bins that are almost full already, favoring empty ones
    priorities[~infeasible_bins] += bins_remain_cap[~infeasible_bins] #Adding some weight

    return priorities
```
