```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired approach.
    # Give higher priority to bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Give higher priority to bins with less remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~can_fit] = np.inf  # Penalize bins that cannot fit the item
    priorities -= remaining_after_fit / np.max(bins_remain_cap, initial=1) # Normalize for scaling
    
    # Small preference to bins that are already partially filled.
    priorities += (1 - bins_remain_cap / np.max(bins_remain_cap, initial=1)) * 0.1

    return priorities
```
