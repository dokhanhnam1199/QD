```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste (First Fit Decreasing-like)
    if np.any(fit_mask):
        min_waste = np.min(waste[fit_mask])
        priorities[fit_mask] = 100 / (waste[fit_mask] - min_waste + 0.01)  # Scale and shift for better differentiation. Adding small value to avoid division by zero.
    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    overflow = -waste[~fit_mask] # Positive value indicates overflow

    # Prioritize bins to minimize overflow as a last resort if no bin is suitable
    if not np.any(fit_mask):
        max_overflow = np.max(overflow)
        priorities[~fit_mask] = 0.01 / (overflow + 0.01)   # Scale Overflow to make them last resort. Adding small value to avoid division by zero.
    
    return priorities
```
