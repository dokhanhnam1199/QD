```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Identify bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste among the bins where it fits
    if np.any(fit_mask):
        waste_fit = waste[fit_mask]
        min_waste = np.min(waste_fit)
        
        # Normalize waste to give higher priority to bins with minimal waste
        priorities[fit_mask] = 1 - (waste_fit - min_waste) / (np.max(waste_fit) - min_waste + 1e-9)  #Adding small value to avoid division by zero.

    # If no bin fits, prioritize bins with minimal overflow
    else:
        overflow = -waste
        min_overflow = np.min(overflow)
        max_overflow = np.max(overflow)

        # Normalize overflow to give higher priority to bins with minimal overflow
        priorities =  1 - (overflow - min_overflow) / (max_overflow - min_overflow + 1e-9) #Adding small value to avoid division by zero.
        

    return priorities
```
