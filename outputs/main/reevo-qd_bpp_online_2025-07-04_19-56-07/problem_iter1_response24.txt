```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, filter out bins that cannot accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can accommodate the item, return a low priority for all.  This prevents errors.
        return priorities

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item

    # Give higher priority to bins where waste is minimized (First Fit Decreasing heuristic idea).
    # Avoid high fragmentation. Prioritize bins which the item fits into snugly.

    priorities[eligible_bins] = 1 / (waste[eligible_bins] + 0.000001) # Avoid division by zero. Reciprocal of waste.

    # Increase priority for bins with high fill ratio. This encourages the bins to be filled as much as possible.

    fill_ratio = item / bins_remain_cap[eligible_bins]
    priorities[eligible_bins] = priorities[eligible_bins] + fill_ratio

    # Add small random noise to break ties (optional, but can help avoid pathological cases).
    priorities[eligible_bins] += np.random.rand(np.sum(eligible_bins)) * 0.001

    return priorities
```
