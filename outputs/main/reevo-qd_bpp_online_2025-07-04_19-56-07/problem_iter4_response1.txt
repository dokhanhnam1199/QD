```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Identify bins where item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with smallest waste.  Introduce a scaling factor to make the difference more pronounced.
        waste_where_fit = waste[fit_mask]
        min_waste = np.min(waste_where_fit)
        best_fit_mask = (waste == min_waste) & fit_mask

        # Give very high priority to bins with minimal waste
        priorities[best_fit_mask] = 100

        # Scale priority based on waste for other bins that fit
        other_fit_mask = fit_mask & ~best_fit_mask
        if np.any(other_fit_mask):
            # Prioritize bins that fit better (less waste)
            priorities[other_fit_mask] = 50 - (waste[other_fit_mask] / np.max(bins_remain_cap)) * 40  # Scale waste to priority
    else:
        # If no bin fits, prioritize bins with minimal overflow
        overflow = -waste
        min_overflow = np.min(overflow)
        min_overflow_mask = overflow == min_overflow

        # Apply a penalty for overflow and a bonus for minimum overflow
        priorities = -overflow # Larger overflows get larger negative priorities
        priorities[min_overflow_mask] += 10  # Slightly prefer bins with minimum overflow
        
    return priorities
```
