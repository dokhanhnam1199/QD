```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing-like: Prioritize bins with capacity closest to item size
            priorities[i] = 1.0 / (abs(cap - item) + 0.000001)  # Avoid division by zero
            
            # Add a bonus for higher remaining capacity to leave room for future items
            priorities[i] += 0.1 * cap 

            # Reduce the priority if item is very small compared to bin capacity (fragmentation avoidance)
            if item < 0.1 * cap:
                priorities[i] *= 0.5
        else:
            priorities[i] = -np.inf  # Cannot fit
    return priorities
```
