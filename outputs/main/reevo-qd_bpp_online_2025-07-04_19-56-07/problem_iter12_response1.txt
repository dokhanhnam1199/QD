```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give very high priority to bins where item fits
    fit_mask = waste >= 0
    if np.any(fit_mask):
        # Prioritize based on minimizing *normalized* waste within fitting bins
        normalized_waste = waste[fit_mask] / bins_remain_cap[fit_mask]
        priorities[fit_mask] = 1000 / (normalized_waste + 0.0001)  # Large priority boost, avoid div by zero, small number to help prioritize smaller waste even more
    else:
        # If no fit, penalize overflow, but prioritize minimal overflow
        overflow = -waste
        max_overflow = np.max(overflow)
        priorities = -1000 * (overflow / max_overflow) if max_overflow > 0 else -1000 * overflow
        # scale overflow between 0 and 1, high penalty
        #priorities = -100 * overflow
        #priorities = priorities + 1/ (overflow + 0.001) # Reduce large overflow penalty by amount of overflow so that lesser overflow is prioritized.

    return priorities
```
