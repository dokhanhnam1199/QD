```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give very high priority to bins where item fits
    fit_mask = waste >= 0

    if np.any(fit_mask):  # If at least one bin fits the item
        #Prioritize based on minimized normalized waste
        normalized_waste = waste[fit_mask] / bins_remain_cap[fit_mask]
        priorities[fit_mask] = 1000 * (1 - normalized_waste) #Scale by 1000 since fit is highest priority
    else:
        # Discourage placing item in bins that don't fit (but allow it if no other option)
        # Penalize by amount of overflow but scaled to bin size.
        overflow = -waste
        priorities = -10 * (overflow / bins_remain_cap)  # Negative priority represents overflow.
        # Find the bin with the least overflow
        min_overflow_bin = np.argmin(overflow)
        priorities[min_overflow_bin] = -priorities[min_overflow_bin]/10  # Slightly prefer the bin with minimum overflow

    return priorities
```
