```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        # Prioritize bins with smaller remaining capacity after placing the item, to fill them up better.
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (remaining_after_fit + 1e-9)  # Avoid division by zero
        
        #Give high priority to bins whose remaining capacity is close to item size, this is the 'almost full' strategy
        almost_full_mask = (bins_remain_cap[fit_mask] - item) < (0.1 * np.max(bins_remain_cap)) #check difference is less than 10% of max capacity
        if np.any(almost_full_mask):
            priorities[fit_mask][almost_full_mask] = priorities[fit_mask][almost_full_mask] * 2  # Boost priority

    else:
        #If no bin can fit, penalize any bin, but less if a bin has sufficient remaining capacity
        priorities = - np.abs(item - bins_remain_cap) / np.max(bins_remain_cap)  #Give bigger negative numbers if bin capacity is insufficient compared to item size

    return priorities
```
