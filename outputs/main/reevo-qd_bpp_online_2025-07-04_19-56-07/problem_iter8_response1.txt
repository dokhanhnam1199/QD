```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with minimal waste (First Fit Decreasing-like)
        priorities[fit_mask] = 1 / (1e-9 + waste[fit_mask])  # Inverse of waste (smaller waste = higher priority)
        # Normalize priorities for fitting bins.  This helps to ensure that the fitting bin priorities
        # are always higher than the overflowing bins (if any overflowing bins are considered at all)
        max_fit_priority = np.max(priorities[fit_mask])
        priorities[fit_mask] /= max_fit_priority


    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    else:
        overflow = -waste # Positive value indicates overflow

        # Prioritize bins to minimize overflow as a last resort if no bin is suitable
        priorities = 1 / (overflow + 1e-9) #Adding small value to avoid division by zero.
        # Normalize overflow priorities.  This is likely not necessary, but it is good practice.
        max_overflow_priority = np.max(priorities)
        priorities /= max_overflow_priority
    
    return priorities
```
