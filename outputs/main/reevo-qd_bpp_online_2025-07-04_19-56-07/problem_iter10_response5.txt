```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with less waste (First Fit Decreasing-like)
        # Using inverse of waste with a small epsilon to avoid division by zero and give higher priority to smaller waste
        priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-9)

        # Further prioritize bins that are close to full after placing the item.
        # This encourages filling bins as much as possible.

        remaining_percentage = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]
        priorities[fit_mask] *= (1 - remaining_percentage) # Higher priority if closer to full.

        # Normalize priorities for fitting bins. This ensures that the priorities among fitting bins are relatively scaled.
        max_fit_priority = np.max(priorities[fit_mask])
        priorities[fit_mask] /= max_fit_priority

    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    else:
        overflow = -waste # Positive value indicates overflow

        # Prioritize bins to minimize overflow as a last resort if no bin is suitable
        priorities = 1 / (overflow + 1e-9)

        # Normalize priorities for overflowing bins. This ensures that the priorities among overflowing bins are relatively scaled.
        max_overflow_priority = np.max(priorities)
        priorities /= max_overflow_priority

    
    return priorities
```
