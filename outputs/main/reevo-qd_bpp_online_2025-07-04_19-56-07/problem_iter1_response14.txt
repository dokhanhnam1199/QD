```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority for bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0
    
    # Prefer bins with least remaining capacity (First Fit Decreasing heuristic influence)
    priorities[can_fit] += (1 - (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap))
    
    # If no bin can fit, give negative priority, favoring bins with greater remaining capacity
    if not np.any(can_fit):
        priorities = - bins_remain_cap / np.max(bins_remain_cap)
        
    return priorities
```
