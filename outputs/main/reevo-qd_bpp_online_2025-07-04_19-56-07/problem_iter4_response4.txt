```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with less waste (First Fit Decreasing-like)
        waste_ratio = waste[fit_mask] / bins_remain_cap[fit_mask] 
        priorities[fit_mask] = 1 - waste_ratio # Prioritize smaller waste ratio
        priorities[fit_mask] = np.clip(priorities[fit_mask], 0, 1) # Ensure value between 0 and 1
        
        # Introduce a slight preference for bins that are not too full to avoid creating tiny fragments
        fullness_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
        priorities[fit_mask] += 0.1 * fullness_ratio  # A small bonus for bins that aren't almost full

    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    else:
        overflow = -waste # Positive value indicates overflow

        # Prioritize bins to minimize overflow as a last resort if no bin is suitable
        max_overflow = np.max(overflow)
        priorities = 1 - (overflow / max_overflow) if max_overflow > 0 else np.zeros_like(priorities) # Normalize overflow to range [0, 1] and invert

    
    return priorities
```
