```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Assign priorities based on various factors:

    # 1. Can fit the item: prioritize bins that can accommodate the item
    can_fit = remaining_after_add >= 0
    priorities[can_fit] += 1  # Give a base priority if it fits
    
    # 2. Remaining space after placing the item. Try to fill up a bin. Bins with the least wasted space after packing are prioritized
    waste = np.abs(remaining_after_add)
    waste[~can_fit] = np.inf # make it undesirable for it to be allocated to a bin it doesn't fit in.
    priorities[can_fit] += 1.0 / (waste[can_fit] + 0.0001) #Avoid divide by zero, give higher priority to least wasted space.

    # 3. Consider utilization. bins closer to being full are better.
    utilization = (bins_remain_cap - remaining_after_add)/bins_remain_cap
    utilization[~can_fit] = 0
    priorities[can_fit] += utilization[can_fit]
    
    #4. Emphasize almost full bin. Higher the remaining capacity, lesser the bin will be prioritized.
    priorities[can_fit] += np.exp(-bins_remain_cap[can_fit])
    

    return priorities
```
