```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Identify bins where the item fits
    fit_mask = waste >= 0
    
    # If item fits, prioritize based on minimizing waste
    if np.any(fit_mask):
        # Normalize waste to be between 0 and 1 for stable prioritization
        normalized_waste = waste[fit_mask] / np.max(bins_remain_cap)
        priorities[fit_mask] = 1 - normalized_waste # higher is better, penalizing large waste

        # Give a strong preference to almost full bins (best fit)
        almost_full_bonus = np.exp(-10 * normalized_waste) # Exponential decay for small waste
        priorities[fit_mask] += almost_full_bonus
    else:
        # If no bin fits, prioritize based on minimizing overflow
        overflow = -waste
        normalized_overflow = overflow / np.max(item, initial=1e-9) # Normalize overflow (avoid division by zero)
        priorities = -normalized_overflow  # Negative as overflow is undesirable, smaller overflow has higher priority

    return priorities
```
