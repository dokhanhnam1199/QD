```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for bins that fit perfectly (or nearly perfectly)
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # A very large value

    # High priority if the item fits and leaves minimal space
    fits = bins_remain_cap >= item
    if np.any(fits):
        remaining_space = bins_remain_cap[fits] - item
        priorities[fits] = 100 / (remaining_space + 0.001)  # Avoid division by zero and prioritize smaller remaining space

    # Negative priority (penalty) for bins that don't fit
    no_fit = bins_remain_cap < item
    priorities[no_fit] = -1000  # Significant penalty for infeasible bins.

    # Moderate priority for bins that fit but leave larger spaces
    fits_but_not_great = np.logical_and(bins_remain_cap >= item, np.logical_not(perfect_fit) & np.logical_not(fits))
    priorities[fits_but_not_great] = bins_remain_cap[fits_but_not_great] - item # Prefer to fill in smaller gaps than bigger gaps

    return priorities
```
