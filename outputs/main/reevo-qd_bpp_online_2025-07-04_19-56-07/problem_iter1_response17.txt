```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing (FFD) - Inspired Priority: Prefer bins that can accommodate the item
    # with minimal remaining capacity (but not exceeding).  If no such bin exists, then
    # prefer to open a new bin (handled implicitly by large default capacity)

    # If bin is too small, give it a very low priority.
    priorities[bins_remain_cap < item] = -np.inf

    # Prioritize bins where the item fits and leave a small residual capacity.  The
    # smaller the residual, the higher the priority.  We want to fill the bins as much
    # as possible. Use an exponential function to emphasize small residuals.  Using the
    # inverse keeps numbers manageable and ensures higher numbers are better (higher
    # priority).

    residual_capacities = bins_remain_cap[bins_remain_cap >= item] - item
    priorities[bins_remain_cap >= item] = np.exp(-residual_capacities)

    #Add a tiebreaker using a random value between zero and some small epsilon.
    epsilon = 0.00001
    priorities += np.random.uniform(0,epsilon, size=bins_remain_cap.shape)

    return priorities
```
