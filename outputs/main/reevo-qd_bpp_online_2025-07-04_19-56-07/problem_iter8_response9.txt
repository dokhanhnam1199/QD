```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Identify bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins that fit the item, breaking ties by minimizing waste
    if np.any(fit_mask):
        # Use waste as a direct priority score for fitting bins
        priorities[fit_mask] = 100 - waste[fit_mask]  # Higher priority for lower waste

        #Find the bin with minimal waste.
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] = 200 #Give the minimum waste bin the highest priority.
        
    else:
        # If no bin fits, prioritize bins to minimize overflow
        overflow = -waste  # Positive value indicates overflow
        
        #Prioritize minimization of overflow
        min_overflow = np.min(overflow)
        min_overflow_mask = overflow == min_overflow
        priorities[:] = -overflow #Penalize overflow amounts
        priorities[min_overflow_mask] = -overflow[min_overflow_mask] + 50  #Boost priority of bins with the least overflow, but still negative overall.
        
    return priorities
```
