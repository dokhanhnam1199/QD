[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response1.txt_stdout.txt",
    "code_path": "problem_iter1_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Give high priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    # Prioritize bins with less waste (First Fit Decreasing-like)\n    priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-9) #Adding small value to avoid division by zero.\n    \n    # Discourage placing item in bins that don't fit (but allow it if no other option)\n    # Penalize by amount of overflow\n    overflow = -waste[~fit_mask] # Positive value indicates overflow\n\n    # Prioritize bins to minimize overflow as a last resort if no bin is suitable\n    if not np.any(fit_mask):\n        priorities[~fit_mask] = 1 / (overflow + 1e-9) #Adding small value to avoid division by zero.\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 76.14709844115208,
    "mi": 87.79685397806284,
    "token_count": 113.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Give high priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    if np.any(fit_mask):\n        # Prioritize bins with less waste (First Fit Decreasing-like)\n        priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # Waste ratio\n        priorities[fit_mask] = 1 - priorities[fit_mask]  # Invert to prioritize smaller waste ratio\n        priorities[fit_mask] = np.clip(priorities[fit_mask], 0, 1) # Ensure value between 0 and 1\n        priorities[fit_mask] = 1/(1e-9 + (waste[fit_mask] + 1e-9)) # use the inverse of the waste\n\n    \n    # Discourage placing item in bins that don't fit (but allow it if no other option)\n    # Penalize by amount of overflow\n    else:\n        overflow = -waste # Positive value indicates overflow\n\n        # Prioritize bins to minimize overflow as a last resort if no bin is suitable\n        priorities = 1 / (overflow + 1e-9) #Adding small value to avoid division by zero.\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 127.37720526058406,
    "mi": 77.15928992985069,
    "token_count": 152.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Give high priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    # Prioritize bins with less waste (First Fit Decreasing-like)\n    #Prioritize bins with minimal waste\n    if np.any(fit_mask):\n        min_waste = np.min(waste[fit_mask])\n        best_fit_mask = (waste == min_waste) & fit_mask #Find the minimum waste\n        priorities[best_fit_mask] = 100  #Very high priority.\n        priorities[fit_mask & ~best_fit_mask] = 50 #High priority but less than perfect fit\n    \n    # Discourage placing item in bins that don't fit (but allow it if no other option)\n    # Penalize by amount of overflow\n    overflow = -waste[~fit_mask] # Positive value indicates overflow\n\n    # Prioritize bins to minimize overflow as a last resort if no bin is suitable\n    if not np.any(fit_mask):\n        min_overflow = np.min(overflow)\n        min_overflow_mask = overflow == min_overflow\n        priorities[~fit_mask] = -overflow # overflow penalty\n        priorities[~fit_mask][min_overflow_mask] = -overflow[min_overflow_mask] + 10 # give bins with least overflow some preference\n        \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 114.20025299224778,
    "mi": 74.322827021985,
    "token_count": 124.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Give high priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    # Prioritize bins with less waste (First Fit Decreasing-like)\n    if np.any(fit_mask):\n        min_waste = np.min(waste[fit_mask])\n        best_fit_mask = (waste == min_waste) & fit_mask #Find the minimum waste\n        priorities[best_fit_mask] = 100  #Very high priority.\n        priorities[fit_mask & ~best_fit_mask] = 50 #High priority but less than perfect fit\n    \n    # Discourage placing item in bins that don't fit (but allow it if no other option)\n    # Penalize by amount of overflow\n    overflow = -waste[~fit_mask] # Positive value indicates overflow\n\n    # Prioritize bins to minimize overflow as a last resort if no bin is suitable\n    if not np.any(fit_mask):\n        min_overflow = np.min(overflow)\n        min_overflow_mask = overflow == min_overflow\n        priorities[~fit_mask] = -overflow # overflow penalty, negative so bins with less overflow are prioritized\n        priorities[~fit_mask][min_overflow_mask] = -overflow[min_overflow_mask] + 5 # give bins with least overflow some preference\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 140.55415752892034,
    "mi": 82.41348225508199,
    "token_count": 172.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Give high priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    if np.any(fit_mask):\n        # Prioritize bins with less waste (First Fit Decreasing-like)\n        # Using inverse of waste with a small epsilon to avoid division by zero and give higher priority to smaller waste\n        priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-9)\n\n        # Normalize priorities for fitting bins. This ensures that the priorities among fitting bins are relatively scaled.\n        max_fit_priority = np.max(priorities[fit_mask])\n        priorities[fit_mask] /= max_fit_priority\n\n    \n    # Discourage placing item in bins that don't fit (but allow it if no other option)\n    # Penalize by amount of overflow\n    else:\n        overflow = -waste # Positive value indicates overflow\n\n        # Prioritize bins to minimize overflow as a last resort if no bin is suitable\n        priorities = 1 / (overflow + 1e-9)\n\n        # Normalize priorities for overflowing bins. This ensures that the priorities among overflowing bins are relatively scaled.\n        max_overflow_priority = np.max(priorities)\n        priorities /= max_overflow_priority\n\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 162.53496664211536,
    "mi": 73.24956026405867,
    "token_count": 140.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n\n    # Give very high priority to bins where item fits\n    fit_mask = waste >= 0\n    if np.any(fit_mask):\n        # Prioritize based on minimizing *normalized* waste within fitting bins\n        normalized_waste = waste[fit_mask] / bins_remain_cap[fit_mask]\n        priorities[fit_mask] = 1000 / (normalized_waste + 0.001)  # Large priority boost, avoid div by zero\n    else:\n      # If no fit, penalize overflow, but prioritize minimal overflow\n      overflow = -waste\n      priorities = -100 * overflow # Large negative penalty to discourage overflow\n      priorities = priorities + 1/ (overflow + 0.001) # Reduce large overflow penalty by amount of overflow so that lesser overflow is prioritized.\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 246.20558481335837,
    "mi": 76.62921128115913,
    "token_count": 183.0,
    "exec_success": true
  }
]