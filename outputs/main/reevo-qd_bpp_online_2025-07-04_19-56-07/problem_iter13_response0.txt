```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste/overflow if item is placed in each bin
    waste = bins_remain_cap - item
    
    # High priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with minimal waste (First Fit Decreasing-like). Normalize the waste
    if np.any(fit_mask):
        waste_fit = waste[fit_mask]
        normalized_waste = waste_fit / bins_remain_cap[fit_mask] # waste as a ratio of bin size
        priorities[fit_mask] = 1 - normalized_waste # Higher priority to lower waste ratios

        # Further prioritize nearly full bins (consolidation strategy)
        nearly_full_mask = (bins_remain_cap[fit_mask] > 0) & (bins_remain_cap[fit_mask] <= 2 * item)  #consider nearly full if space is <= 2 * item size
        priorities[fit_mask][nearly_full_mask] += 0.5  # Adding a small bonus
    else: #No bins fit
        overflow = -waste
        normalized_overflow = overflow / item #Overflow as a fraction of the item

        priorities = -normalized_overflow #Negative values due to overflow
        #If there is no fit, we want the least overflow. 
        #Therefore the best bin has the highest (least negative) value

    return priorities
```
