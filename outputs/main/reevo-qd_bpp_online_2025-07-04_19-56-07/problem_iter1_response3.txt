```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits
    fit_mask = wasted_space >= 0
    
    # Prioritize bins with least wasted space
    priorities[fit_mask] = 1 / (1 + wasted_space[fit_mask]) 
    
    # Apply penalty for bins that don't have enough capacity
    priorities[~fit_mask] = -np.inf  # Or a very large negative number

    #Add small random number to priorities for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6
    
    return priorities
```
