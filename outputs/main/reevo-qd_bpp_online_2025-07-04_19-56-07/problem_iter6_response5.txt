```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with less waste (First Fit Decreasing-like)
        #priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # Waste ratio
        #priorities[fit_mask] = 1 - priorities[fit_mask]  # Invert to prioritize smaller waste ratio
        #priorities[fit_mask] = np.clip(priorities[fit_mask], 0, 1) # Ensure value between 0 and 1
        priorities[fit_mask] = 1/(1e-9 + (waste[fit_mask]**2 + 1e-9)) # use the inverse of the waste, prioritize smaller waste strongly

        # Give a slight preference to bins with more remaining capacity (among those that fit),
        # to potentially accommodate future larger items.
        priorities[fit_mask] += 0.1 * (bins_remain_cap[fit_mask] / np.max(bins_remain_cap))
    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow
    else:
        overflow = -waste # Positive value indicates overflow

        # Prioritize bins to minimize overflow as a last resort if no bin is suitable
        priorities = 1 / (overflow**2 + 1e-9) #Adding small value to avoid division by zero.
        priorities -= np.max(priorities) #Ensure values are negative.

    return priorities
```
