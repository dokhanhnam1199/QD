```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: If the item doesn't fit, assign a very low priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # 2. Remaining Capacity: Prefer bins with enough space but avoid excessive waste.
    #   - The smaller the waste, the higher the priority, but only up to a point.
    #   - After that point, prioritize filling bins further to reduce bin count.

    feasible_bins_indices = bins_remain_cap >= item
    
    if np.any(feasible_bins_indices): # only calculate for feasible bins
        waste = bins_remain_cap[feasible_bins_indices] - item
    
        # a. Prioritize almost-full bins
        almost_full = (waste >= 0) & (waste <= 0.1 * item) # tolerance is 10% of item size
        if np.any(almost_full):
            priorities[feasible_bins_indices][almost_full] = 1000  # very high priority to almost full

        # b. Consider waste for remaining bins
        remaining = (waste > 0.1 * item)
        if np.any(remaining):
            priorities[feasible_bins_indices][remaining] = 1.0 / (waste[remaining] + 0.0000001) # Avoid division by zero.
            
        # c. If possible fill an empty bin with very little usage of remaining cap
        almost_empty = bins_remain_cap >= (0.95 * bins_remain_cap.max())
        if np.any(almost_empty):
            priorities[almost_empty] += 0.01 # prioritize only when other cases are similar
        
    
    return priorities
```
