```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0

    # Prioritize bins with less waste (First Fit Decreasing-like), normalized by item size.
    if np.any(fit_mask):
        # Normalized fill ratio for bins that fit, scaled by remaining capacity.
        priorities[fit_mask] = (item / (bins_remain_cap[fit_mask] + 1e-9))
        # Further prioritize bins that are closer to full after placing item.
        priorities[fit_mask] += (bins_remain_cap[fit_mask] - waste[fit_mask]) / (np.max(bins_remain_cap) + 1e-9)

    else:
        # If no bins fit, strongly penalize overflow, inversely proportional to overflow amount.
        overflow = -waste
        # Penalize overflow, normalizing by the item size and the number of bins.
        priorities = -overflow / (item + 1e-9) / len(bins_remain_cap)

    return priorities
```
