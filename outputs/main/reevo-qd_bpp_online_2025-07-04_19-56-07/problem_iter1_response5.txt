```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Favor bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1.0

    # Heuristic 2: Fill the bin as much as possible (minimize wasted space)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Penalize bins that can't accommodate
    priorities[can_accommodate] += (1 / (waste[can_accommodate] + 1e-6))  # Avoid division by zero

    # Heuristic 3: Avoid bins that are too empty or almost full (balance)
    # Penalize bins with very little remaining capacity after adding the item
    nearly_full = waste < (0.1 * np.max(bins_remain_cap)) # adjust threshold as needed.  0.1 * max size ensures the algorithm adapts if the items are large compared to bin size
    priorities[nearly_full] -= 0.5

    # Penalize almost empty bins (encourage packing in fewer bins first)
    almost_empty = bins_remain_cap > (0.9 * np.max(bins_remain_cap)) #adjust threshold as needed
    priorities[almost_empty] -= 0.2 # less harsh penalty than nearly_full

    # Heuristic 4: Slightly favor bins with larger remaining capacity (but only if they fit). Improves stability when many bins are equally good
    priorities[can_accommodate] += bins_remain_cap[can_accommodate] / np.max(bins_remain_cap) * 0.1 # scaled to prevent overpowering other heuristics

    return priorities
```
