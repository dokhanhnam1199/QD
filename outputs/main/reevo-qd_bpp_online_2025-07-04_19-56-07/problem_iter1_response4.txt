```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criteria: Prefer bins where the item fits
            remaining_space = cap - item
            # Prioritize bins with less remaining space after packing (First Fit Decreasing heuristic inspiration)
            priorities[i] = 1 / (remaining_space + 1e-9)  # Adding a small constant to avoid division by zero

            # Bonus for bins that are relatively full
            priorities[i] += 0.5 * (1 - remaining_space / cap) # between 0 to 0.5
        else:
            # Item doesn't fit, very low priority
            priorities[i] = -1e9  # very low priority, practically impossible to pick

    return priorities
```
