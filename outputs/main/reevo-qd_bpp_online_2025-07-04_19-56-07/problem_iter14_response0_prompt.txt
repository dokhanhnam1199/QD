{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste/overflow if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # High priority to bins where item fits\n    fit_mask = waste >= 0\n    \n    # Prioritize bins with minimal waste (First Fit Decreasing-like). Normalize the waste\n    if np.any(fit_mask):\n        waste_fit = waste[fit_mask]\n        normalized_waste = waste_fit / bins_remain_cap[fit_mask] # waste as a ratio of bin size\n        priorities[fit_mask] = 1 - normalized_waste # Higher priority to lower waste ratios\n\n        # Further prioritize nearly full bins (consolidation strategy)\n        nearly_full_mask = (bins_remain_cap[fit_mask] > 0) & (bins_remain_cap[fit_mask] <= 2 * item)  #consider nearly full if space is <= 2 * item size\n        priorities[fit_mask][nearly_full_mask] += 0.5  # Adding a small bonus\n    else: #No bins fit\n        overflow = -waste\n        normalized_overflow = overflow / item #Overflow as a fraction of the item\n\n        priorities = -normalized_overflow #Negative values due to overflow\n        #If there is no fit, we want the least overflow. \n        #Therefore the best bin has the highest (least negative) value\n\n    return priorities\n\n[Reflection]\nThe better code prioritizes fitting items, minimizes waste, and consolidates items in nearly full bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}