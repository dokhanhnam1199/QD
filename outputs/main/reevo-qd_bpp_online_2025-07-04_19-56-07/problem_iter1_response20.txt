```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing-like component: prefer bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Best-Fit-like component: prioritize bins with minimal remaining capacity after placing the item
    remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += np.max(bins_remain_cap) - remaining_capacity_after_fit # Higher is better

    # Avoidance of almost-full bins. if bin become almost full after placing, penalize it.
    almost_full_threshold = 0.1
    almost_full_mask = (bins_remain_cap - item) / np.max(bins_remain_cap) < almost_full_threshold
    priorities[almost_full_mask] -= 0.5

    #If item does not fit, assign a low score to that bin.
    not_fit_mask = bins_remain_cap < item
    priorities[not_fit_mask] -= 1000  #Very negative so it's never used unless there's no other choice.
    return priorities
```
