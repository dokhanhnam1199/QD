```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing modification: prefer bins that can accommodate the item
    # and have the least remaining capacity after placing the item.
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -remaining_after_fit # lower remaining is higher priority
        priorities[~valid_bins] = -np.inf # Mark invalid bins as lowest priority possible

        #Tie-breaking: Prefer almost-full bins BEFORE adding the item.
        #This is an effort to fill as many bins as possible.

        ratios = (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        priorities += ratios *0.1  # tie breaking should not make large changes.
        return priorities

    else:
    # If no bin can accommodate, return a low priority score
       return priorities
```
