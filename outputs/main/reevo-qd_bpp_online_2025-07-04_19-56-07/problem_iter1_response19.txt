```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and minimizes waste
    for i in range(len(bins_remain_cap)):
        if waste[i] >= 0:
            priorities[i] = 1 / (waste[i] + 1e-9)  # Avoid division by zero

    # Slightly penalize bins with very high remaining capacity
    # This can encourage filling bins more evenly
    priorities = priorities - (bins_remain_cap / np.max(bins_remain_cap + 1e-9)) * 0.1

    #Give huge negative priority if item doesnt fit.
    priorities[bins_remain_cap < item] = -1e9
    
    return priorities
```
