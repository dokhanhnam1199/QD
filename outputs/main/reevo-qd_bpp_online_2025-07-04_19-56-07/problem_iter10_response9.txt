```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with less waste (First Fit Decreasing-like)
        waste_ratio = waste[fit_mask] / bins_remain_cap[fit_mask]
        priorities[fit_mask] = 1 - waste_ratio  # Prioritize smaller waste ratio
        priorities[fit_mask] = np.clip(priorities[fit_mask], 0, 1)  # Ensure value between 0 and 1

        # Further prioritize almost full bins to consolidate items
        almost_full_mask = waste[fit_mask] < 0.1  # Consider waste below 0.1 as almost full
        priorities[fit_mask][almost_full_mask] += 0.3  # Substantially increase priority

        # Give a boost to bins that were already significantly full (e.g. > 80% full before adding item)
        significantly_full_mask = bins_remain_cap[fit_mask] < 0.2
        priorities[fit_mask][significantly_full_mask] += 0.1
        
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    else:
        overflow = -waste  # Positive value indicates overflow

        # Prioritize bins to minimize overflow as a last resort if no bin is suitable
        overflow_ratio = overflow / item
        priorities = 1 - overflow_ratio
        priorities = np.clip(priorities, -1, 0)  # clip values to negative range

    return priorities
```
