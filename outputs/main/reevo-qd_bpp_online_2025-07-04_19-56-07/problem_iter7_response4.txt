```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0

    # Prioritize fitting perfectly or almost perfectly
    perfect_fit_mask = np.abs(waste) < 1e-6
    priorities[perfect_fit_mask] = 1e9  # Very high priority for perfect fit

    # Prioritize bins with less normalized waste (minimize normalized waste after fitting)
    normalized_waste = waste[fit_mask] / bins_remain_cap[fit_mask]
    priorities[fit_mask] = 1e8 - normalized_waste * 1e7

    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow, but less severely if the overflow is small.
    overflow = -waste[~fit_mask]  # Positive value indicates overflow

    # Different overflow penalties
    small_overflow_mask = overflow <= 0.1  # Allow small overflow
    large_overflow_mask = overflow > 0.1

    if not np.any(fit_mask):
        # Prioritize bins with smallest overflow as a last resort if no bin is suitable
        priorities[~fit_mask] = 1e6 - overflow * 1e5 # Moderate priority based on overflow size

        #Special case to break ties with similar overflow amounts (bin size influences)
        priorities[~fit_mask] += bins_remain_cap[~fit_mask] * 1e-3
    
    return priorities
```
