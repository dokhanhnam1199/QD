```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Identify bins where the item fits
    fit_mask = waste >= 0

    # Prioritize bins where item fits based on a combination of factors
    if np.any(fit_mask):
        # Calculate normalized waste for fitting bins
        normalized_waste = waste[fit_mask] / bins_remain_cap[fit_mask]
        
        # Give priority to bins with lower normalized waste, and higher remaining capacity to start.
        priorities[fit_mask] = (1 - normalized_waste) + (bins_remain_cap[fit_mask] / np.max(bins_remain_cap))  # Combination of low waste, high cap

    else:
        # If no bin fits, prioritize bins with minimal overflow
        overflow = -waste
        normalized_overflow = overflow / np.max(bins_remain_cap)
        priorities = 1 - normalized_overflow  # Minimize normalized overflow

    return priorities
```
