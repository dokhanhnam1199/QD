```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First-Fit-Decreasing inspired: Prefer bins where the item fits relatively well, but not perfectly.
            # Avoid creating tiny fragments, but don't immediately pick the almost-full bin.

            priority = (cap - item) / cap  # Remaining space ratio. Lower is better, but not too low.
            priority += 1 #shift so we don't have negative values.
            priority = 1/priority # the smaller the above priority, the bigger the final priority
            priorities[i] = priority

        else:
            priorities[i] = -np.inf # Never put item in bins where it does not fit.
    return priorities
```
