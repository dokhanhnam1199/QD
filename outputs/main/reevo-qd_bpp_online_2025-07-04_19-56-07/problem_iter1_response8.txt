```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Reward bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0
    
    # Give higher priority to bins with remaining capacity closest to the item size
    diff = np.abs(bins_remain_cap - item)
    priorities[can_fit] += (1 - (diff[can_fit] / np.max(bins_remain_cap))) 
    
    # Penalize bins that have very little space left after placing the item, but only if they can fit
    remaining_after_fit = bins_remain_cap[can_fit] - item
    very_little_space = remaining_after_fit < 0.1  # If less than 0.1 remaining, penalize
    priorities[can_fit][very_little_space] -= 0.5 #reduce its priority if bin has little space after item insertion

    #Give high priority to bins closest to be half-full
    bins_utilization = (np.max(bins_remain_cap) - bins_remain_cap)/np.max(bins_remain_cap)
    priorities += np.exp(-(bins_utilization - 0.5)**2/0.02)

    
    return priorities
```
