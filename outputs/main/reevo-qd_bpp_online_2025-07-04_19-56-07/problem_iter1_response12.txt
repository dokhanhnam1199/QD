```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, give it the highest priority.
    perfect_fit_mask = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit_mask] = 1e9  # Very high priority

    # Rule 2: Give a high priority to bins where the item fits with minimal waste. Waste is defined by remaining cap less the item size.
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap[fit_mask] - item
    # Prioritize bins with smaller waste; invert and scale the waste so smaller waste results to higher priority
    if len(waste) > 0:
        waste_priorities = 1.0 / (waste + 0.0001)  # Add small number to avoid division by zero
        priorities[fit_mask] = waste_priorities

    # Rule 3: Penalize bins where the item doesn't fit, but not too harshly, since we need a score to do comparison.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1e-6 * (item - bins_remain_cap[no_fit_mask])  # Small negative number.

    return priorities
```
