```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    # Prioritize bins with less waste (First Fit Decreasing-like)
    if np.any(fit_mask):
      priorities[fit_mask] = 1000 / (waste[fit_mask] + 0.0001)  # Higher magnitude to prioritize fitting and avoid division by zero
    
    # Discourage placing item in bins that don't fit (but allow it if no other option)
    overflow = -waste[~fit_mask]  # Positive value indicates overflow

    # Heavily penalize overflow, but prioritize minimizing it if no bin fits
    if not np.any(fit_mask):
        priorities[~fit_mask] = 10 / (overflow + 0.0001) # Prioritize smallest overflow, significantly reduce magnitude
    else:
        priorities[~fit_mask] = -overflow # Slightly negative priority proportional to overflow

    return priorities
```
