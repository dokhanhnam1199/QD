```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0

    # Prioritize bins with less waste (First Fit Decreasing-like)
    # Use a more aggressive scaling to emphasize smaller waste
    if np.any(fit_mask):
        min_waste = np.min(waste[fit_mask])
        priorities[fit_mask] = np.exp(-2 * (waste[fit_mask] - min_waste) / (np.max(bins_remain_cap) + 1e-9))  # Exponential scaling for finer bin selection

    # Discourage placing item in bins that don't fit (but allow it if no other option)
    # Penalize by amount of overflow, more aggressively
    overflow = -waste[~fit_mask]  # Positive value indicates overflow

    if not np.any(fit_mask):
        max_overflow = np.max(overflow)
        priorities[~fit_mask] = np.exp(-5 * (overflow - max_overflow) / (item + 1e-9)) # Aggressive penalization, scaled by item size


    return priorities
```
