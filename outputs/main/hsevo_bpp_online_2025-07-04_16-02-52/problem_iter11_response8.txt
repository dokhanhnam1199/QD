```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive fill ratio, randomization and dynamic penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Adaptive fill ratio bonus
    item_scale = item / bins_remain_cap.max()
    fill_ratio_after = (bins_remain_cap[feasible_bins] - wasted_space[feasible_bins]) / bins_remain_cap[feasible_bins] #fill rate
    fill_ratio_bonus = fill_ratio_after * (0.2 + 0.3 * item_scale) # Adaptive bonus
    priorities[feasible_bins] += fill_ratio_bonus

    # Controlled randomization
    randomization_factor = 0.05 * (1 - item_scale)  # Favor exploration for smaller items
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor

    # Adaptive bin-emptiness penalty
    empty_bin_penalty = (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    priorities[feasible_bins] -= empty_bin_penalty * (0.02 + 0.03 * (1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()))

    # Bonus for bins nearing full capacity
    almost_full = (wasted_space / bins_remain_cap.max() < 0.05) & feasible_bins  # Threshold tuning
    priorities[almost_full] += 0.1
    # Diversify bin selection (penalize bins that are already nearly full).
    # This term will prevent the algorithm from sticking to bins which
    # could potentially result in worse packing in future steps
    bins_almost_full = (bins_remain_cap / bins_remain_cap.max() < 0.1) & feasible_bins
    priorities[bins_almost_full] -= 0.02 * (bins_remain_cap[bins_almost_full] / bins_remain_cap.max())


    return priorities
```
