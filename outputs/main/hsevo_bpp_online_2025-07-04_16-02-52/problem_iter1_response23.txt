```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by observations on radioactive decay and energy levels.
    We favor bins where the item fills a significant but not overwhelming portion of the remaining capacity.
    This encourages a more even distribution and reduces the chances of large, unused gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Apply a score based on how well the item fits into each bin.
    # We'll use a Gaussian-like function centered around a target fill ratio.

    target_fill_ratio = 0.8  # Aim for bins to be about 80% full after adding the item.
    std_dev = 0.2          # Adjust the standard deviation for the width of the "sweet spot".

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            fill_ratio = item / cap
            # Use Gaussian-like distribution
            priorities[i] = np.exp(-((fill_ratio - target_fill_ratio)**2) / (2 * std_dev**2))

            # Consider the remaining space after the item is added. Penalize excessive waste
            remaining_space = cap - item
            waste_penalty = np.exp(-(remaining_space/item)**2)  # Penalize large remaining space

            priorities[i] *= waste_penalty

        else:
             priorities[i] = -100 # greatly reduce the chance of using infeasible bins.
    return priorities
```
