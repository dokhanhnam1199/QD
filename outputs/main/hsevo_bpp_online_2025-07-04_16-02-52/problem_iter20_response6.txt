```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive fill ratio, randomization, emptiness penalty, near-full reward."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf  # No feasible bins

    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = 0  # Ensure non-negative waste

    # Best-fit with non-linear penalty
    priorities[feasible_bins] = -wasted_space[feasible_bins]**2 / np.max(bins_remain_cap)

    # Adaptive fill ratio bonus, scaled by item size
    fill_ratio_after = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap)
    priorities[feasible_bins] += (1 - fill_ratio_after) * 0.3 * (1 - item / np.max(bins_remain_cap))

    # Adaptive Randomization
    randomization_strength = 0.1 * item * (np.max(bins_remain_cap) - bins_remain_cap[feasible_bins]) / np.max(bins_remain_cap)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Bonus for almost full bins
    almost_full_threshold = 0.1
    almost_full_bins = (wasted_space[feasible_bins] <= almost_full_threshold * np.max(bins_remain_cap))
    priorities[feasible_bins][almost_full_bins] += 0.2

    # Empty Bin Penalty
    average_fill = np.mean(1 - bins_remain_cap / np.max(bins_remain_cap))
    empty_bin_penalty = (bins_remain_cap / np.max(bins_remain_cap))
    penalty_scale = 0.05 * (1 - average_fill)
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * penalty_scale

    # Bonus for current fill ratio
    current_fill_ratio = 1 - bins_remain_cap / np.max(bins_remain_cap)
    priorities[feasible_bins] += current_fill_ratio[feasible_bins] * 0.05

    return priorities
```
