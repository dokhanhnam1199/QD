[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and fill ratio with adaptive exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing)\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap) # Waste minimization\n        priorities[~valid_bins] = -np.inf\n\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] * 0.1 # Fill ratio bonus\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 1e-6 * item # Adaptive exploration, scaled by item size\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fill level, near fit, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space\n    wasted_space = bins_remain_cap - item\n    feasible_mask = bins_remain_cap >= item\n\n    # Primary priority: Minimize wasted space (penalize larger waste more).\n    priorities[feasible_mask] = -wasted_space[feasible_mask]**2\n\n    # Bonus for bins that are already somewhat full.\n    priorities[feasible_mask] += (1 - bins_remain_cap[feasible_mask]) * 0.25\n\n    # Introduce randomness, scaled by item size.\n    priorities[feasible_mask] += np.random.rand(np.sum(feasible_mask)) * 0.05 * item\n\n    # Prioritize bins close to the item size.\n    near_fit = (bins_remain_cap >= item) & (wasted_space <= item * 0.2)\n    priorities[near_fit] += 0.15\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and a fill ratio bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    \n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        \n        # Prioritize small remain space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        \n        # Fill ratio bonus: favors bins that are already quite full\n        fill_ratio = (bins_remain_cap[does_fit] - remaining_space) / bins_remain_cap[does_fit]\n        priorities[does_fit] += fill_ratio\n        \n        # Small random noise for exploration\n        priorities[does_fit] += np.random.normal(0, 0.01, size=np.sum(does_fit))\n    else:\n        priorities[:] = -1e9  # Item doesn't fit, very low priority\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.2\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.05\n    \n    return priorities",
    "response_id": 3,
    "tryHS": true,
    "obj": 4.01874750698045,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins that fit, minimizing waste and adding scaled random exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n\n    if np.any(fit_mask):\n        remaining_space = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = -remaining_space + 1e-6 * np.random.rand(np.sum(fit_mask)) * item\n        priorities[fit_mask] += 10 # Extra weight for fitting bins\n    else:\n        priorities = bins_remain_cap - item  # Penalize bins where the item doesn't fit\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill ratio, with exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing[remaining_capacities_after_packing != np.inf])\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)\n        priorities[~valid_bins] = -np.inf\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[bins_remain_cap < item] = 0\n\n        priorities[valid_bins] += fill_ratio[valid_bins] * 0.1\n        # Add small random noise proportional to item size for exploration\n        priorities[valid_bins] += np.random.normal(0, 0.01 * item, size=np.sum(valid_bins))\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using best-fit, encourages full bins, and adds scaled randomness.\"\"\"\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Infeasible bins get -inf priority\n    priorities = np.where(remaining_after_add >= 0, bins_remain_cap, -np.inf)\n\n    # Add bonus for almost full bins to encourage efficient packing\n    almost_full = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)\n    priorities[almost_full] += 5\n\n    # Add scaled randomness for exploration\n    feasible = remaining_after_add >= 0\n    priorities[feasible] += 0.01 * item * np.random.rand(np.sum(feasible))\n\n    # If no bin can fit, prioritize the fullest bin.\n    if np.all(priorities == -np.inf):\n        priorities = bins_remain_cap\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 149.2919824491424,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and fill ratio, using numpy.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n\n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        # Prioritize smaller remaining space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        # Bonus for bins that are filled more completely\n        fill_ratio = item / (bins_remain_cap[does_fit] + 0.001)\n        priorities[does_fit] += fill_ratio\n    else:\n        priorities[:] = -1e9 # Item doesn't fit, very low priority\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill ratio, and a small exploration factor.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing[np.isfinite(remaining_capacities_after_packing)])  # Ensure min is taken only from valid bins\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)\n        priorities[~valid_bins] = -np.inf\n\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[~valid_bins] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] # No fill_ratio_weight hyperparameter\n        priorities[valid_bins] += 1e-9 * np.random.rand(np.sum(valid_bins)) # Add small random exploration factor\n        #priorities[valid_bins] += 1e-6 * bins_remain_cap[valid_bins] #removing this one \n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins balancing waste minimization and bin fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    priorities[~does_fit] = -np.inf\n\n    wasted_space = bins_remain_cap - item\n    priorities[does_fit] = -wasted_space[does_fit]\n\n    # Bonus for bins that are already somewhat full\n    priorities[does_fit] += (1 - bins_remain_cap[does_fit]) * 0.1\n\n    # Add small randomness scaled by item size for exploration\n    priorities[does_fit] += np.random.rand(np.sum(does_fit)) * 1e-6 * item\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.028719585161557,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\n    Uses dynamic scaling and temperature-based exploration for improved performance.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    feasible_bins = bins_remain_cap >= item\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Dynamic fill ratio bonus, scaled by item size and remaining capacity\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    \n    # Scale fill ratio bonus based on item size: larger items prioritize fill ratio more\n    fill_bonus_scale = min(item, 0.5)  # Scale between 0 and 0.5\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * fill_bonus_scale\n\n    # Temperature-based randomization: more exploration when bins are similar\n    # Calculate the standard deviation of remaining capacities\n    capacity_std = np.std(bins_remain_cap[feasible_bins]) if np.sum(feasible_bins) > 1 else 0.0\n    \n    # Define a temperature based on the standard deviation\n    temperature = max(0.01, min(0.2, capacity_std / bins_remain_cap.max()))  # Temperature between 0.01 and 0.2\n    \n    # Add randomization scaled by temperature and item size\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * temperature * item\n\n    # Adaptive empty bin penalty, scaled by the average remaining capacity\n    avg_capacity = np.mean(bins_remain_cap)\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    penalty_scale = min(1.0, (1 - avg_capacity / bins_remain_cap.max())) #Scale penalty based on average capacity\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.05 * penalty_scale\n\n    # Bin diversity bonus: Encourage using bins with significantly different fill levels\n    if np.sum(feasible_bins) > 1:\n        capacity_range = np.max(bins_remain_cap[feasible_bins]) - np.min(bins_remain_cap[feasible_bins])\n        diversity_bonus = (bins_remain_cap[feasible_bins] - np.mean(bins_remain_cap[feasible_bins])) / capacity_range * 0.02\n        priorities[feasible_bins] += diversity_bonus\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization, with dynamic adjustments\n    and bin utilization awareness for enhanced bin prioritization.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    feasible_bins = bins_remain_cap >= item\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Increased fill ratio importance\n\n    # Dynamic Randomization: Adjust randomness based on item size relative to bin capacities\n    randomization_strength = 0.05 * item * (item / bins_remain_cap.max()) # scaled randomness\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength\n    \n    # Bin Utilization Awareness: Prefer bins that are neither too full nor too empty\n    bin_utilization = bins_remain_cap / bins_remain_cap.max()\n    utilization_penalty = np.abs(bin_utilization - 0.5) # Penalize bins far from 50% utilization\n    priorities[feasible_bins] -= utilization_penalty[feasible_bins] * 0.1\n\n    # Item Size Consideration: Adjust priority based on how well the item fits.\n    item_fit_score = (item / bins_remain_cap[feasible_bins])\n    priorities[feasible_bins] += item_fit_score * 0.05  # Reward closer fits\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit, fill ratio, wasted space, and dynamic randomization for bin prioritization.\n    This version focuses on a more adaptive randomization and wasted space management.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if the item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    # Using a non-linear transformation to penalize larger wasted space more heavily\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]**2 / bins_remain_cap.max()\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.3  # Slightly increased fill ratio weight\n    \n    # Adaptive Randomization: Reduce randomization as bins become fuller.\n    # The fuller the bins are, the less randomization we want to encourage exploitation.\n    randomization_strength = 0.1 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength[bins_remain_cap >= item]\n    \n    # Penalize bins that are too empty, but reduce the penalty as item size increases\n    # Helps prevent always filling smallest bins first, especially when large items arrive.\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.03 # Slightly reduced empty bin penalty\n    \n    # Bonus for bins that fit the item almost perfectly (small waste)\n    almost_perfect_fit = np.exp(-wasted_space[bins_remain_cap >= item] * 5 / item) # Sharp peak around small waste\n    priorities[bins_remain_cap >= item] += almost_perfect_fit * 0.1\n    \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.397686477862,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and a bin-emptiness discouragement with adaptive parameters for enhanced bin prioritization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better) - primary best-fit driver\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n\n    # Adaptive fill ratio bonus: scale by item size relative to bin size\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    item_scale = item / bins_remain_cap.max()  # Normalize item size to bin capacity\n    fill_bonus_weight = 0.3 * item_scale  # Larger items get a larger fill bonus, relatively\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_bonus_weight\n\n    # Controlled randomization: scale randomization by (1 - item_scale) to favor exploration for smaller items\n    randomization_strength = 0.05 * (1 - item_scale)\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength * item\n\n    # Adaptive bin-emptiness penalty:  Heavier penalty for emptier bins, scaled by remaining capacity\n    bin_capacity_ratio = bins_remain_cap / bins_remain_cap.max()\n    empty_bin_penalty_weight = 0.1  #Adjust for the empty bin penalty\n    priorities[bins_remain_cap >= item] -= bin_capacity_ratio[bins_remain_cap >= item] * empty_bin_penalty_weight\n\n    # Encourage bins nearing full capacity to be filled by increasing its priority.\n    nearly_full_bonus = np.where(bins_remain_cap >= item, (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max(), 0)\n    nearly_full_bonus_weight = 0.2\n    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item] * nearly_full_bonus_weight\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_hs0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray,\n                fill_ratio_weight: float = 0.4037016598237966,\n                randomization_factor: float = 0.07169055022299253,\n                empty_bin_penalty_weight: float = 0.03112567836427659) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_ratio_weight\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_factor * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * empty_bin_penalty_weight\n    \n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.01874750698045,
    "exec_success": true
  }
]