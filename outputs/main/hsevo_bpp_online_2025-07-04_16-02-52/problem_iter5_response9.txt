```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins balancing waste minimization and bin fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    does_fit = bins_remain_cap >= item
    priorities[~does_fit] = -np.inf

    wasted_space = bins_remain_cap - item
    priorities[does_fit] = -wasted_space[does_fit]

    # Bonus for bins that are already somewhat full
    priorities[does_fit] += (1 - bins_remain_cap[does_fit]) * 0.1

    # Add small randomness scaled by item size for exploration
    priorities[does_fit] += np.random.rand(np.sum(does_fit)) * 1e-6 * item

    return priorities
```
