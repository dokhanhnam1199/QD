```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):  # At least one bin can fit the item
        # Prioritize bins that leave the least waste (smallest remaining capacity *after* packing)
        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)  # inf for bins that cannot fit

        # Find the minimum remaining capacity after packing, considering *only* the bins that can fit.  Important!
        min_remaining_cap = np.min(remaining_capacities_after_packing)


        # A higher score means the item is preferable for packing the current item
        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap) # Smaller waste = higher priority
        priorities[~valid_bins] = -np.inf  # Never choose bins that can't fit
        #Boosting by the relative remaining capacity - small improvement in packing, but important

        #Boosting if almost full: encourages filling nearly full bins, can free up bins later.
        priorities[valid_bins] += (bins_remain_cap[valid_bins]/np.max(bins_remain_cap))*0.1  #Adding scaling parameter
    else:
        # No bin can fit - should never happen with unlimited bin creation in online bin packing, but good to handle edge cases.
        # Should ideally create a new bin, but that's handled outside this function.  Return all negative infinity.
        priorities[:] = -np.inf


    return priorities
```
