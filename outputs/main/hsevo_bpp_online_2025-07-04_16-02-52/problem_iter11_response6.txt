```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, adaptive fill ratio, randomization, bin-emptiness penalty, and near-full bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_ratio_after * 0.1

    item_scale = item / bins_remain_cap.max()
    randomization_factor = 0.02 * (1 - item_scale)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor
    
    empty_penalty = (bins_remain_cap / bins_remain_cap.max())[feasible_bins]
    priorities[feasible_bins] -= empty_penalty * 0.01

    almost_full = (wasted_space[feasible_bins] / bins_remain_cap.max()) < 0.05
    priorities[feasible_bins][almost_full] += 0.01

    # Bin balancing from v1, slightly modified scaling
    average_fill_level = np.mean(bins_remain_cap)
    bin_balance_bonus = (average_fill_level - bins_remain_cap) / bins_remain_cap.max()
    priorities[feasible_bins] += bin_balance_bonus[feasible_bins] * 0.02 # Reduce magnitude.
    
    return priorities
```
