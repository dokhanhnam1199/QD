```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive fill ratio, controlled randomization, and bin-emptiness discouragement."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Adaptive fill ratio bonus, scale by item size relative to bin size
    item_scale = item / bins_remain_cap.max()
    fill_ratio_after = (1 - wasted_space / bins_remain_cap)
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2 * item_scale

    # Controlled randomization, scale randomization by (1 - item_scale)
    randomization_factor = 0.05 * (1 - item_scale)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor

    # Adaptive bin-emptiness penalty, heavier penalty for emptier bins
    empty_bin_penalty = (1 - bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1

    return priorities
```
