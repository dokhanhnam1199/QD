```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are just large enough to fit the item
    and penalizes bins that are either much too small or much too large.
    Bins that cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give very low priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # For feasible bins, calculate a priority based on how well the item fits.
    feasible_mask = ~infeasible_mask
    remaining_capacities = bins_remain_cap[feasible_mask]

    # Calculate the "fit ratio" - how much of the bin's capacity is used
    fit_ratios = item / remaining_capacities

    # A fit ratio close to 1 is ideal.  We use a Gaussian-like penalty
    # for ratios that deviate from 1.  The std dev (sigma) controls
    # how strict we are about the fit.  A smaller sigma means we
    # heavily penalize bins that are much larger than the item.
    sigma = 0.2  # Adjust as needed; smaller = tighter fit required
    priorities[feasible_mask] = np.exp(-0.5 * ((fit_ratios - 1) / sigma)**2)

    return priorities
```
