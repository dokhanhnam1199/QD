```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, fill ratio, and adaptive randomization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item] / bins_remain_cap.max()
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.3
    
    # Adaptive Randomization: Reduce randomization as bins become fuller.
    randomization_strength = 0.1 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength[bins_remain_cap >= item]
    
    return priorities
```
