```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., all zeros)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is viable if its remaining capacity is >= item size.
    viable_bins = bins_remain_cap >= item

    # If there are no viable bins, assign a very low priority to all bins.
    # In real life, you'd open a new bin, but let's not handle that case.
    if not np.any(viable_bins):
        return priorities - np.inf  # Or a very large negative number. Avoids inf with calculations below.

    # Prioritize bins that have a "good fit" - meaning that the remaining space
    # after adding the item will be small, but not too small.
    remaining_after_fit = bins_remain_cap - item
    # Add to the viable_bins condition that the remaining space is nonnegative
    # Already asserted with viable_bins

    # Give a bonus to bins where remaining_after_fit is small.  We can reward tighter fits.
    fit_bonus = np.exp(-np.abs(remaining_after_fit) / item)  # The closer to 0, the better

    # Penalize large remaining capacities.
    # This encourages filling up bins rather than leaving big gaps.  Consider adding a scaling factor.
    capacity_penalty = bins_remain_cap / bins_remain_cap.max() if bins_remain_cap.max() > 0 else 0 # if bins_remain_cap.max() == 0 assign to 0

    priorities = viable_bins * (fit_bonus - 0.1 * capacity_penalty) # fit bonus is already multiplied with viable bins

    # Adding a small random factor to break ties randomly and potentially explore the solution space.
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
