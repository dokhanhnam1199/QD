```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Hawking radiation inspired weighting: Smaller bins (closer to black hole event horizon) get higher priority, *if* they can fit the item.
    # Avoids fragmentation if large items arrive later.

    # Also, penalize bins that are too full after adding the item, mimicking entropy increase.
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap >= item:
            priorities[i] = (1.0 / remaining_cap)  # Smaller remaining capacity -> higher base priority

            # Fine-tune based on remaining capacity *after* placing the item. Aim for higher fill.
            remaining_after = remaining_cap - item
            if remaining_after > 0:
                # Quadratic penalty for having *too much* space remaining. Empirically tuned.
                priorities[i] -= 0.5 * (remaining_after / bins_remain_cap.max())**2 #normalized remaining gap

            #Bonus for filling the bin almost completely (avoid fragmentation)
            if remaining_after < 0.1*bins_remain_cap.max() and remaining_after >= 0: #Arbitrary threshold of 10%
                priorities[i] += 0.2
        else:
            priorities[i] = -np.inf # Assign negative infinity if the bin can't fit the item

    return priorities
```
