```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, emptiness penalty, near-full reward."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization, scaled by item size and bin capacity
    wasted_space = bins_remain_cap - item
    waste_penalty_scale = np.mean(bins_remain_cap)
    priorities[feasible_bins] -= (wasted_space[feasible_bins]**2) / (waste_penalty_scale + 1e-9) * (item / np.max(bins_remain_cap))

    # Adaptive fill ratio bonus
    fill_ratio_after = (bins_remain_cap - item) / np.max(bins_remain_cap)
    priorities[feasible_bins] += (1 - fill_ratio_after[feasible_bins]) * 0.3 * (1 - item / np.max(bins_remain_cap))

    # Controlled Randomization, scaled to remaining capacity
    randomization_strength = 0.05 * (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) * item
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength[feasible_bins]

    # Emptiness Penalty, more severe for smaller items
    empty_bin_penalty = (bins_remain_cap / np.max(bins_remain_cap))
    penalty_scale = 0.03 * (1 - np.mean(1 - bins_remain_cap / np.max(bins_remain_cap))) * (1 - item / np.max(bins_remain_cap))
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * penalty_scale

    # Near full bonus
    almost_full_threshold = 0.1
    almost_full_bins = (wasted_space[feasible_bins] <= almost_full_threshold * np.max(bins_remain_cap))
    priorities[feasible_bins][almost_full_bins] += 0.2

    return priorities
```
