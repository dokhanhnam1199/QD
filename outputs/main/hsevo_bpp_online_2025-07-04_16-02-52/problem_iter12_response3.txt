```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, bin utilization, and adaptive randomization for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Slightly increased fill ratio importance

    # Adaptive Randomization: Scale randomness based on item size AND remaining capacity variance.
    # Larger items and more uniform bin capacities promote more exploration.
    capacity_std = np.std(bins_remain_cap[bins_remain_cap > 0]) # Only consider non-empty bins when computing the std
    randomization_scale = 0.05 * item * (1 + capacity_std) #Increased scaling factor and consider variance
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_scale

    # Bin Utilization Penalty: Penalize bins that are significantly underutilized.  The penalty
    # increases non-linearly as the bin becomes emptier.
    bin_utilization = bins_remain_cap / bins_remain_cap.max()
    empty_bin_penalty = (1 - bin_utilization)**2  # Squared to penalize very empty bins more
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1 #Increased penalty

    # Moderate the effect of extremely small items: Add a small bonus to bins with higher remaining capacity
    # to avoid overfilling small bins with tiny items at the end.
    small_item_threshold = bins_remain_cap.max() * 0.1 #If item is smaller than 10% of bins_remain_cap.max()
    if item <= small_item_threshold:
        priorities[feasible_bins] += bin_utilization[feasible_bins] * 0.02 #Slight bonus to bins that have more space left

    return priorities
```
