```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and adaptive penalties for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better) - stronger weight
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item] * 1.5
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement - adaptive bonus
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    fill_bonus = fill_ratio_after * (0.3 + 0.2 * (1 - item / bins_remain_cap.max()))  # Larger items get higher fill bonus
    priorities[bins_remain_cap >= item] += fill_bonus[bins_remain_cap >= item]
    
    # Add a small amount of randomization, scaled by item size, for exploration
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item
    
    # Penalize bins that are too empty - adaptive penalty
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    penalty_strength = 0.05 + 0.1 * (item / bins_remain_cap.max()) # Larger items get higher penalty when placed in empty bins
    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * penalty_strength
    
    # Additional penalty for bins that are near full, discouraging overfilling
    near_full_threshold = 0.9 * bins_remain_cap.max()
    near_full_penalty = np.where(bins_remain_cap > item, np.where(bins_remain_cap - item < (bins_remain_cap.max() * 0.1), (bins_remain_cap - item)/(bins_remain_cap.max() * 0.1), 0), 0)
    priorities[bins_remain_cap >= item] -= near_full_penalty[bins_remain_cap >= item] * 0.1

    return priorities
```
