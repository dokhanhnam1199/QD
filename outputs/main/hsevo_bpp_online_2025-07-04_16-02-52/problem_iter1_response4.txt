```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Give higher priority to bins with smaller remaining capacity if it fits
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_after_fit + 0.0001) # Avoid division by zero

    # Slightly prefer bins that are close to full, even if it barely fits, so that we don't create almost empty bins
    priorities[can_fit] += (1 - remaining_after_fit / bins_remain_cap[can_fit])

    # For bins that can't fit, strongly penalize
    priorities[~can_fit] -= 1000  # Or any very large penalty
    
    return priorities
```
