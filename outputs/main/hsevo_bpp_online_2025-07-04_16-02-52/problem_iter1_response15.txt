```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a heuristic that balances bin utilization and available space,
    favoring bins that can accommodate the item with minimal wasted space
    while also considering the overall fullness of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give zero priority if the item doesn't fit
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate the wasted space if the item is added to each bin.  Use a capped waste, 
    # as excess capacity shouldn't exponentially increase a bin's priority
    waste = bins_remain_cap - item
    capped_waste = np.minimum(waste, item)  # Cap waste at size of item.  More waste is wasteful

    # Calculate the utilization of each bin if the item is added.
    utilization = (1 - bins_remain_cap / 1.0) # Assuming bin capacity of 1.  Generalize later.

    # Heuristic: Favor bins with small waste and some utilization.  More utilization is better, so long
    # as it doesn't mean a ton of wasted space.
    priorities[~infeasible] = utilization[~infeasible] - (capped_waste[~infeasible]**2)  # Minimize square waste

    return priorities
```
