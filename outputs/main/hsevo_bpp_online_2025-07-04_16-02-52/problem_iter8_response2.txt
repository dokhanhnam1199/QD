```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced heuristic combining best-fit, fill ratio, and adaptive penalties."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[bins_remain_cap < item] = -np.inf  # Infeasible bins

    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]

    # Adaptive fill ratio bonus, scaled by item size
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    item_scale = item / bins_remain_cap.max()
    fill_bonus_weight = 0.3 * item_scale
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_bonus_weight

    # Controlled randomization, favors exploration for smaller items
    randomization_strength = 0.05 * (1 - item_scale)
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength * item

    # Adaptive bin-emptiness penalty
    bin_capacity_ratio = bins_remain_cap / bins_remain_cap.max()
    empty_bin_penalty_weight = 0.1
    priorities[bins_remain_cap >= item] -= bin_capacity_ratio[bins_remain_cap >= item] * empty_bin_penalty_weight

    return priorities
```
