```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio, and item-aware randomization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste Minimization with non-linear scaling
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Fill Ratio Bonus, scaled by item size
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_ratio_after * 0.2 * (item / bins_remain_cap.max())

    # Item-aware Randomization
    randomization_strength = 0.05 * (1-item / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Empty bin penalty, scaled to bin fullness
    average_bin_usage = np.mean(bins_remain_cap) / bins_remain_cap.max()
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - average_bin_usage)
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1

    # Bonus for almost full bins after insertion
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < 0.05
    priorities[feasible_bins][almost_full] += 0.1

    # Large Item Consideration: Incentivize placing large items in emptier bins
    if item > 0.5 * bins_remain_cap.max():
        priorities[feasible_bins] += 0.05 * (bins_remain_cap[feasible_bins] / bins_remain_cap.max())

    return priorities
```
