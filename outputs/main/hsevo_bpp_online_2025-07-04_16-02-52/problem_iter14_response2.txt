```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fill ratio, randomization, and near-full penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    wasted_space = bins_remain_cap - item
    priorities[feasible_bins] = -wasted_space / np.max(bins_remain_cap)

    # Adaptive fill ratio bonus
    fill_ratio_after = (1 - wasted_space / np.max(bins_remain_cap))
    adaptive_fill_bonus = fill_ratio_after * (0.2 + 0.1 * (item / np.max(bins_remain_cap)))
    priorities[feasible_bins] += adaptive_fill_bonus[feasible_bins]

    # Adaptive Randomization: More randomization for fuller bins
    randomization_strength = 0.05 * item * (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength[feasible_bins]

    # Near-full penalty
    almost_full_penalty = np.where(bins_remain_cap < 1.1*item, (1-(bins_remain_cap/ (1.1*item))),0)
    priorities[feasible_bins] -= almost_full_penalty[feasible_bins] * 0.1

    return priorities
```
