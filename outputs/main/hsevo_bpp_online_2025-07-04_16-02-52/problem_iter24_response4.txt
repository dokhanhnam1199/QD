```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced adaptive heuristic for online bin packing, balancing waste minimization,
    fill ratio, bin landscape awareness, and dynamic exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with non-linear penalty, focusing on small waste
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    waste_penalty = (wasted_space[feasible_bins] / bins_remain_cap.max())**1.5 * (item / bins_remain_cap.max())
    priorities[feasible_bins] -= waste_penalty

    # Adaptive fill ratio bonus, scaled by item size and bin fullness, emphasis on almost full
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    fill_bonus = fill_ratio_after * 0.4 * item_scale * (1 + bin_fullness**2)  # Increased impact of fullness
    priorities[feasible_bins] += fill_bonus

    # Controlled randomization, dynamically adjusted to bin diversity and item size
    bin_diversity = np.std(bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    randomization_strength = 0.03 * item_scale * (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) * (1 + bin_diversity)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Adaptive bin-emptiness penalty, scaling with item, average occupancy, and bin proximity to full
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())**0.5
    empty_bin_penalty_weight = 0.01 + 0.09 * average_occupancy # Tuned weights
    priorities[feasible_bins] -= empty_bin_penalty * empty_bin_penalty_weight

    # Substantial bonus for almost full bins after insertion, highly sensitive
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < 0.03 # More sensitive threshold
    almost_full_bonus = 0.2 + 0.3 * (1-wasted_space_after[almost_full]/ bins_remain_cap.max()) # Magnitude scales with wasted space
    priorities[feasible_bins][almost_full] += almost_full_bonus


    # Encourage balanced bin usage: penalize bins far from the mean remaining capacity.
    mean_remaining = np.mean(bins_remain_cap[feasible_bins])
    capacity_deviation_penalty = 0.01 * np.abs(bins_remain_cap[feasible_bins] - mean_remaining) / bins_remain_cap.max()
    priorities[feasible_bins] -= capacity_deviation_penalty

    return priorities
```
