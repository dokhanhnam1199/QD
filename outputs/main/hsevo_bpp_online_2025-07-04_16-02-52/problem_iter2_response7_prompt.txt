{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., all zeros)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin is viable if its remaining capacity is >= item size.\n    viable_bins = bins_remain_cap >= item\n\n    # If there are no viable bins, assign a very low priority to all bins.\n    # In real life, you'd open a new bin, but let's not handle that case.\n    if not np.any(viable_bins):\n        return priorities - np.inf  # Or a very large negative number. Avoids inf with calculations below.\n\n    # Prioritize bins that have a \"good fit\" - meaning that the remaining space\n    # after adding the item will be small, but not too small.\n    remaining_after_fit = bins_remain_cap - item\n    # Add to the viable_bins condition that the remaining space is nonnegative\n    # Already asserted with viable_bins\n\n    # Give a bonus to bins where remaining_after_fit is small.  We can reward tighter fits.\n    fit_bonus = np.exp(-np.abs(remaining_after_fit) / item)  # The closer to 0, the better\n\n    # Penalize large remaining capacities.\n    # This encourages filling up bins rather than leaving big gaps.  Consider adding a scaling factor.\n    capacity_penalty = bins_remain_cap / bins_remain_cap.max() if bins_remain_cap.max() > 0 else 0 # if bins_remain_cap.max() == 0 assign to 0\n\n    priorities = viable_bins * (fit_bonus - 0.1 * capacity_penalty) # fit bonus is already multiplied with viable bins\n\n    # Adding a small random factor to break ties randomly and potentially explore the solution space.\n    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Emphasizes bins that can fit the item relatively well and avoids near-full bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Give a small penalty if the item doesn't fit at all.\n    does_fit = bins_remain_cap >= item\n    priorities[~does_fit] = -1e9  # Very low priority if it doesn't fit.\n\n    # Give higher priority to bins where the item fits relatively well.\n    # Calculate a \"fit ratio\" (remaining space after fitting / original bin size).\n\n    remaining_after_fit = bins_remain_cap - item\n    fit_ratio = remaining_after_fit / bins_remain_cap #Larger space remaining after fitting means higher fit_ratio\n\n    # Emphasize bins that have relatively good fit\n    priorities[does_fit] = fit_ratio[does_fit] + 1e-6 * bins_remain_cap[does_fit] # small addition in bin capacity to favour bins with larger space\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st heuristic directly calculates the `min_remaining_cap` among valid bins and prioritizes bins based on their proximity to this minimum, also incorporating a small bonus for bins that are almost full and using numpy operations, leading to a more efficient and potentially better packing strategy. The 20th heuristic uses a \"potential energy\" and \"tunneling\" analogy, which might be less direct and less effective in practice due to the specific formulation of the energy and tunneling terms. Also the 1st heuristic is more concise.\n\nComparing (2nd) vs (19th), the 2nd heuristic prioritizes bins based on the inverse of remaining space and assigns very low priority to bins where the item doesn't fit, using a loop-based approach. The 19th heuristic tries to apply more complex calculations.\n\nComparing (3rd) vs (4th), the 3rd uses a simpler logic assigning priorities and extra weights to the fit items. The 4th uses the inverse of remaining space.\n\nComparing (second worst) vs (worst), the 19th and 20th heuristics are near identical.\n\nOverall: The better heuristics use numpy operations to achieve better efficiency. They calculate remaining capacities and derive priority based on capacity. More complex heuristics do not guarantee better performance.\n- \nOkay, here's a refined concept of \"Current Self-Reflection\" tailored for designing better packing heuristics, steering clear of potential pitfalls:\n\n*   **Keywords:** Capacity-focused, Computationally Efficient, Adaptive Exploration, Iterative Refinement.\n\n*   **Advice:** Emphasize quick capacity checks, explore simple randomization for diversification, and design for incremental improvement through iterative testing.\n\n*   **Avoid:** Overly complex strategies, analogies without clear performance benefits, and premature optimization.\n\n*   **Explanation:** Focus on rapid evaluation and adaptation based on remaining space. Simple, fast heuristics, combined with controlled randomness, allow efficient exploration and iterative refinement through experimentation.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}