```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the principles of resonance and harmonic oscillation,
    we seek a balance between filling the bin and avoiding excessive waste.
    The formula incorporates a penalty for bins that are too full or too empty
    after packing the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the remaining capacity after packing
            remaining_cap = cap - item

            # A "resonance" factor favoring bins where the item fits snugly
            resonance = np.exp(-np.abs(remaining_cap - item) / (item + 1e-9)) # gaussian centered at item_size, small sigma. This term is to encourage "equal space filling".

            # A "packing density" factor favouring higher filling rates
            packing_density = (item / cap) # Simple ratio is fine.

            # A "waste avoidance" penalty that exponentially disfavors bins with too much remaining space. Avoid small items in big bins.
            waste_penalty = np.exp(-remaining_cap / (item+1e-9)) # exponential decay.

            priorities[i] = resonance * packing_density * waste_penalty

        else:
            priorities[i] = -1e9  # Disqualify bins that are too small

    return priorities
```
