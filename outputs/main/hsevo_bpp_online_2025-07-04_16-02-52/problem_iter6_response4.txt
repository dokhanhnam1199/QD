```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and a bin-emptiness discouragement with adaptive parameters for enhanced bin prioritization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better) - primary best-fit driver
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]

    # Adaptive fill ratio bonus: scale by item size relative to bin size
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    item_scale = item / bins_remain_cap.max()  # Normalize item size to bin capacity
    fill_bonus_weight = 0.3 * item_scale  # Larger items get a larger fill bonus, relatively
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_bonus_weight

    # Controlled randomization: scale randomization by (1 - item_scale) to favor exploration for smaller items
    randomization_strength = 0.05 * (1 - item_scale)
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength * item

    # Adaptive bin-emptiness penalty:  Heavier penalty for emptier bins, scaled by remaining capacity
    bin_capacity_ratio = bins_remain_cap / bins_remain_cap.max()
    empty_bin_penalty_weight = 0.1  #Adjust for the empty bin penalty
    priorities[bins_remain_cap >= item] -= bin_capacity_ratio[bins_remain_cap >= item] * empty_bin_penalty_weight

    # Encourage bins nearing full capacity to be filled by increasing its priority.
    nearly_full_bonus = np.where(bins_remain_cap >= item, (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max(), 0)
    nearly_full_bonus_weight = 0.2
    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item] * nearly_full_bonus_weight

    return priorities
```
