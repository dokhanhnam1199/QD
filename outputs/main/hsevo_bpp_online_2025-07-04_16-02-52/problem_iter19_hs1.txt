import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fill_ratio_weight: float = 0.3335930636533424, randomization_strength_base: float = 0.09143176437760607,
                empty_bin_penalty_weight_base: float = 0.029556928989535637, empty_bin_penalty_weight_scale: float = 0.13162472370352277,
                almost_full_threshold: float = 0.09603336670365317, almost_full_bonus: float = 0.19145623666414324) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio, and bin landscape awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with scaled penalty
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2 * (item / bins_remain_cap.max())

    # Adaptive fill ratio bonus, scaled by item size and bin fullness
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    priorities[feasible_bins] += fill_ratio_after * fill_ratio_weight * item_scale * (1 + bin_fullness)

    # Controlled randomization, inversely proportional to bin fill
    randomization_strength = randomization_strength_base * item_scale * (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Adaptive bin-emptiness penalty, scaling with item and average occupancy
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    empty_bin_penalty_weight = empty_bin_penalty_weight_base + empty_bin_penalty_weight_scale * average_occupancy
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # Bonus for almost full bins after insertion
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < almost_full_threshold
    priorities[feasible_bins][almost_full] += almost_full_bonus

    return priorities
