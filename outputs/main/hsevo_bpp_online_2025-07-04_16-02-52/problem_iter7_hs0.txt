import numpy as np

def priority_v2(item: float, 
                bins_remain_cap: np.ndarray,
                fill_ratio_weight: float = 0.4037016598237966,
                randomization_factor: float = 0.07169055022299253,
                empty_bin_penalty_weight: float = 0.03112567836427659) -> np.ndarray:
    """Combines best-fit, fill ratio, and controlled randomization for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_ratio_weight
    
    # Add a small amount of randomization, scaled by item size, for exploration
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_factor * item
    
    # Penalize bins that are too empty
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * empty_bin_penalty_weight
    
    return priorities
