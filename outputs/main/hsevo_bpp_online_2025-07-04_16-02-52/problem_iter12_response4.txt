```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, bin diversity, and adaptive randomization for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = -wasted_space[valid_bins]
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement, adaptive weight
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    fill_ratio_weight = min(item, 0.5)  # Weight fill ratio more for smaller items
    priorities[valid_bins] += fill_ratio_after[valid_bins] * fill_ratio_weight
    
    # Adaptive randomization, scaled by item size and bin fill level, for exploration
    randomization_strength = 0.05 * item * (1 - bins_remain_cap / bins_remain_cap.max())
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * randomization_strength[valid_bins]
    
    # Penalize bins that are too empty or too full, adaptive penalty
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    full_bin_penalty = (wasted_space / bins_remain_cap.max())
    penalty_weight = max(0, item - 0.3) # Apply penalty stronger for larger items
    priorities[valid_bins] -= empty_bin_penalty[valid_bins] * 0.05 * penalty_weight
    priorities[valid_bins] -= full_bin_penalty[valid_bins] * 0.02 * penalty_weight # Slightly penalize nearly full bins

    # Bin Diversity: Encourage using bins with different fill levels
    bin_diversity_bonus = np.std(bins_remain_cap) / bins_remain_cap.max()
    priorities[valid_bins] += bin_diversity_bonus * 0.03

    return priorities
```
