[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and fill ratio with adaptive exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing)\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap) # Waste minimization\n        priorities[~valid_bins] = -np.inf\n\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] * 0.1 # Fill ratio bonus\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 1e-6 * item # Adaptive exploration, scaled by item size\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space, fill level, near fit, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space\n    wasted_space = bins_remain_cap - item\n    feasible_mask = bins_remain_cap >= item\n\n    # Primary priority: Minimize wasted space (penalize larger waste more).\n    priorities[feasible_mask] = -wasted_space[feasible_mask]**2\n\n    # Bonus for bins that are already somewhat full.\n    priorities[feasible_mask] += (1 - bins_remain_cap[feasible_mask]) * 0.25\n\n    # Introduce randomness, scaled by item size.\n    priorities[feasible_mask] += np.random.rand(np.sum(feasible_mask)) * 0.05 * item\n\n    # Prioritize bins close to the item size.\n    near_fit = (bins_remain_cap >= item) & (wasted_space <= item * 0.2)\n    priorities[near_fit] += 0.15\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and a fill ratio bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    \n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        \n        # Prioritize small remain space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        \n        # Fill ratio bonus: favors bins that are already quite full\n        fill_ratio = (bins_remain_cap[does_fit] - remaining_space) / bins_remain_cap[does_fit]\n        priorities[does_fit] += fill_ratio\n        \n        # Small random noise for exploration\n        priorities[does_fit] += np.random.normal(0, 0.01, size=np.sum(does_fit))\n    else:\n        priorities[:] = -1e9  # Item doesn't fit, very low priority\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.2\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.05\n    \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.01874750698045,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins that fit, minimizing waste and adding scaled random exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n\n    if np.any(fit_mask):\n        remaining_space = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = -remaining_space + 1e-6 * np.random.rand(np.sum(fit_mask)) * item\n        priorities[fit_mask] += 10 # Extra weight for fitting bins\n    else:\n        priorities = bins_remain_cap - item  # Penalize bins where the item doesn't fit\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill ratio, with exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing[remaining_capacities_after_packing != np.inf])\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)\n        priorities[~valid_bins] = -np.inf\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[bins_remain_cap < item] = 0\n\n        priorities[valid_bins] += fill_ratio[valid_bins] * 0.1\n        # Add small random noise proportional to item size for exploration\n        priorities[valid_bins] += np.random.normal(0, 0.01 * item, size=np.sum(valid_bins))\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using best-fit, encourages full bins, and adds scaled randomness.\"\"\"\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Infeasible bins get -inf priority\n    priorities = np.where(remaining_after_add >= 0, bins_remain_cap, -np.inf)\n\n    # Add bonus for almost full bins to encourage efficient packing\n    almost_full = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)\n    priorities[almost_full] += 5\n\n    # Add scaled randomness for exploration\n    feasible = remaining_after_add >= 0\n    priorities[feasible] += 0.01 * item * np.random.rand(np.sum(feasible))\n\n    # If no bin can fit, prioritize the fullest bin.\n    if np.all(priorities == -np.inf):\n        priorities = bins_remain_cap\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 149.2919824491424,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and fill ratio, using numpy.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n\n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        # Prioritize smaller remaining space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        # Bonus for bins that are filled more completely\n        fill_ratio = item / (bins_remain_cap[does_fit] + 0.001)\n        priorities[does_fit] += fill_ratio\n    else:\n        priorities[:] = -1e9 # Item doesn't fit, very low priority\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill ratio, and a small exploration factor.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing[np.isfinite(remaining_capacities_after_packing)])  # Ensure min is taken only from valid bins\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)\n        priorities[~valid_bins] = -np.inf\n\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[~valid_bins] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] # No fill_ratio_weight hyperparameter\n        priorities[valid_bins] += 1e-9 * np.random.rand(np.sum(valid_bins)) # Add small random exploration factor\n        #priorities[valid_bins] += 1e-6 * bins_remain_cap[valid_bins] #removing this one \n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins balancing waste minimization and bin fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    priorities[~does_fit] = -np.inf\n\n    wasted_space = bins_remain_cap - item\n    priorities[does_fit] = -wasted_space[does_fit]\n\n    # Bonus for bins that are already somewhat full\n    priorities[does_fit] += (1 - bins_remain_cap[does_fit]) * 0.1\n\n    # Add small randomness scaled by item size for exploration\n    priorities[does_fit] += np.random.rand(np.sum(does_fit)) * 1e-6 * item\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]