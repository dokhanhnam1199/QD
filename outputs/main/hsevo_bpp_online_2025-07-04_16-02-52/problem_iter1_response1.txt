```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the concept of spacetime curvature in General Relativity.  The 'curvature'
    represents how much a bin's fullness would change given the item. Bins that are already
    relatively full (high 'mass density') exert a greater 'gravitational pull' and thus should
    be prioritized.  This aims to create a more even distribution of items across bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap = np.clip(bins_remain_cap, 1e-9, None)  # Ensure bins_remain_cap is always positive

    # 'Curvature' is a non-linear transformation of available space to prioritize
    # nearly-full bins. High 'bin_load' leads to a larger change after adding the item.
    bin_load = 1 - bins_remain_cap  # Bins already filled have high bin_load
    curvature = bin_load**2 / bins_remain_cap # Simulates gravity like effect where almost full bins have higher priorities

    # The item's mass/energy determines how significantly to perturb 'spacetime' around bins.
    perturbation = item * curvature

    # Prioritization based on "gravitational" pull
    priorities = perturbation

    return priorities
```
