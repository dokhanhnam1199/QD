```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the heavens! A harmonious blend of efficient space utilization
    and strategic foresight guides our priorities. Larger bins attract
    smaller items, while bins closely fitting the item size are favored,
    but with a slight penalty for near-perfect fits to promote balance.
    Think of it as celestial mechanics applied to bin packing!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Favor bins that are large enough
            priority = 0.0

            # Smaller items are attracted to larger bins
            priority += cap  # Give some preference for larger bin size

            # The closer the fit, the better, but penalize near-perfect fits
            fit_ratio = item / cap
            priority += np.exp(-10 * (fit_ratio - 0.95)**2) # a slight penalty if near perfect fit to encourage re-use of partially filled bins.
            priority += np.exp(-10 * (fit_ratio - 1.0)**2) # a stronger penalty if perfect fit is required for this single item ( encourages bins with more flexibility in future use)


            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Disqualify bins that are too small
    return priorities
```
