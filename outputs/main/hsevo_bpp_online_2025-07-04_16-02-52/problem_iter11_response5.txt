```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, and adaptive randomization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf  # All bins are infeasible

    # Calculate wasted space
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = 0  # Ensure no negative waste

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins] / np.max(bins_remain_cap)

    # Fill ratio bonus after placing the item
    fill_ratio_after = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap)
    priorities[feasible_bins] += (1-fill_ratio_after) * 0.3

    # Adaptive Randomization: Reduce randomization as bins become fuller, scale by item size.
    randomization_strength = 0.1 * item * (np.max(bins_remain_cap) - bins_remain_cap[feasible_bins]) / np.max(bins_remain_cap)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Encourage bins that are almost full (but only if feasible)
    almost_full_threshold = 0.1  # e.g., within 10% of being full
    almost_full_bins = (bins_remain_cap[feasible_bins] <= almost_full_threshold * np.max(bins_remain_cap))
    priorities[feasible_bins][almost_full_bins] += 0.2 # bonus for almost full

    return priorities
```
