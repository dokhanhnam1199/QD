```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, and a small exploration factor."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)
        min_remaining_cap = np.min(remaining_capacities_after_packing[np.isfinite(remaining_capacities_after_packing)])  # Ensure min is taken only from valid bins

        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)
        priorities[~valid_bins] = -np.inf

        fill_ratio = item / bins_remain_cap
        fill_ratio[~valid_bins] = 0  # Set ratio to 0 if the item doesn't fit

        priorities[valid_bins] += fill_ratio[valid_bins] # No fill_ratio_weight hyperparameter
        priorities[valid_bins] += 1e-9 * np.random.rand(np.sum(valid_bins)) # Add small random exploration factor
        #priorities[valid_bins] += 1e-6 * bins_remain_cap[valid_bins] #removing this one 
    else:
        priorities[:] = -np.inf

    return priorities
```
