```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio, bin landscape awareness,
    and dynamic exploration/exploitation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # 1. Waste Minimization with Dynamic Penalty: Emphasize near-perfect fits non-linearly
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    waste_ratio = wasted_space[feasible_bins] / bins_remain_cap.max()
    penalty_exponent = 2 + 3 * (item / bins_remain_cap.max()) # Adjust exponent based on item size
    priorities[feasible_bins] -= (waste_ratio)**penalty_exponent * (item / bins_remain_cap.max())

    # 2. Adaptive Fill Ratio Bonus: Stronger bonus for filling nearly full bins
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    fullness_boost = (bin_fullness)**2 # Non-linear bonus for fuller bins
    priorities[feasible_bins] += fill_ratio_after * 0.4 * item_scale * (1 + fullness_boost)

    # 3. Dynamic Exploration: More randomization for small items, less for large
    randomization_strength = 0.1 * (item / bins_remain_cap.max()) * (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    randomization_strength = max(0, 0.05 - randomization_strength)  # Inverse relationship
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength


    # 4. Bin Emptiness Penalty adjusted by average bin usage and item size
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    empty_bin_penalty_weight = 0.01 + 0.09 * average_occupancy
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # 5. Bonus for almost full bins - increased magnitude
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < 0.05
    priorities[feasible_bins][almost_full] += 0.2 # Larger bonus

    #6. Encourage usage of bins with mid-level occupancy to avoid fragmentation.
    mid_occupancy = (bins_remain_cap[feasible_bins] / bins_remain_cap.max() > 0.3) & (bins_remain_cap[feasible_bins] / bins_remain_cap.max() < 0.7)
    priorities[feasible_bins][mid_occupancy] += 0.05 * item_scale

    return priorities
```
