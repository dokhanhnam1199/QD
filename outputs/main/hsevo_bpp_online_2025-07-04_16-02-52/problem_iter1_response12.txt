```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the laws of motion and gravitation, the priority function attempts to balance the desire to fill bins (maximizing gravitational "attraction") with the risk of leaving too much unused space (minimizing the effective "mass").

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, consider only bins where the item can fit
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if not np.any(valid_bins):
        # If the item does not fit in any bin, give all bins equal priority.
        # This might be changed later to prioritize bins closest to fitting
        # return np.ones_like(bins_remain_cap, dtype=float) #All zero is fine too, as any index chosen.

        #Alternative strategy: If no bins fit, prioritize the one *closest* to fitting
        priorities = -abs(bins_remain_cap - item)
        return priorities

    # For valid bins, calculate a priority score:
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Newton's Law of Gravitation analogy: F = G * m1 * m2 / r^2
    # Here, 'item' is m1 (constant), 'remaining_space' is related to r
    # We want to minimize 'remaining_space', but not to zero or negative.
    # bins_remain_cap is related to m2, representing the bin's "potential" for utilization.

    # A small constant to avoid division by zero and to provide a slight baseline priority
    epsilon = 1e-6
    
    # "Gravitational Attraction" component: Inverse relationship with remaining space
    attraction = 1.0 / (remaining_space + epsilon)

    # "Bin Potential" component: Directly proportional to bin's remaining capacity
    bin_potential = bins_remain_cap[valid_bins]

    # Combine the two components: A weighted sum or product
    # A product allows a stronger emphasis on fitting well (small remaining space)
    # without overly favoring large remaining capacity if space is wasted

    priorities[valid_bins] = attraction * bin_potential  #A product here allows more refined prioritization
    #priorities[valid_bins] = attraction + bin_potential
    
    # A scaling to make priorities more interpretable (optional)
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority #scale the prioritiess

    return priorities
```
