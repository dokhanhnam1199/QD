```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fill_ratio_weight: float = 0.4,
                randomization_factor: float = 0.07,
                empty_bin_penalty_weight: float = 0.03) -> np.ndarray:
    """Combines best-fit, fill ratio, randomization, empty bin penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    does_fit = bins_remain_cap >= item

    if not np.any(does_fit):
        priorities[:] = -np.inf  # Item doesn't fit, very low priority
        return priorities

    # Waste minimization
    remaining_space = bins_remain_cap[does_fit] - item
    priorities[does_fit] = -remaining_space

    # Fill ratio bonus
    fill_ratio = item / bins_remain_cap[does_fit]
    priorities[does_fit] += fill_ratio * fill_ratio_weight

    # Randomization
    priorities[does_fit] += np.random.rand(np.sum(does_fit)) * randomization_factor * item

    # Empty bin penalty
    bin_utilization = bins_remain_cap[does_fit] / np.max(bins_remain_cap)
    priorities[does_fit] -= (1 - bin_utilization) * empty_bin_penalty_weight
    

    return priorities
```
