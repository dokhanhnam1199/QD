{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.2\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.05\n    \n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.2\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.05\n    \n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray,\n                fill_ratio_weight: float = 0.4037016598237966,\n                randomization_factor: float = 0.07169055022299253,\n                empty_bin_penalty_weight: float = 0.03112567836427659) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_ratio_weight\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_factor * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * empty_bin_penalty_weight\n    \n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.2\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.05\n    \n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray,\n                fill_ratio_weight: float = 0.4037016598237966,\n                randomization_factor: float = 0.07169055022299253,\n                empty_bin_penalty_weight: float = 0.03112567836427659) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, and controlled randomization for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_ratio_weight\n    \n    # Add a small amount of randomization, scaled by item size, for exploration\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_factor * item\n    \n    # Penalize bins that are too empty\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * empty_bin_penalty_weight\n    \n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Prioritize based on wasted space (smaller waste is better)\n    priorities[feasible_bins] = -wasted_space[feasible_bins]\n\n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2\n\n    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed\n    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.\n    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item\n\n    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())\n    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty\n\n    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.\n\n    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option\n        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()\n        fill_level_std = np.std(fill_levels)\n\n        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and a fill ratio bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    \n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        \n        # Prioritize small remain space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        \n        # Fill ratio bonus: favors bins that are already quite full\n        fill_ratio = (bins_remain_cap[does_fit] - remaining_space) / bins_remain_cap[does_fit]\n        priorities[does_fit] += fill_ratio\n        \n        # Small random noise for exploration\n        priorities[does_fit] += np.random.normal(0, 0.01, size=np.sum(does_fit))\n    else:\n        priorities[:] = -1e9  # Item doesn't fit, very low priority\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and a bin-emptiness discouragement with adaptive parameters for enhanced bin prioritization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better) - primary best-fit driver\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n\n    # Adaptive fill ratio bonus: scale by item size relative to bin size\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    item_scale = item / bins_remain_cap.max()  # Normalize item size to bin capacity\n    fill_bonus_weight = 0.3 * item_scale  # Larger items get a larger fill bonus, relatively\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_bonus_weight\n\n    # Controlled randomization: scale randomization by (1 - item_scale) to favor exploration for smaller items\n    randomization_strength = 0.05 * (1 - item_scale)\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength * item\n\n    # Adaptive bin-emptiness penalty:  Heavier penalty for emptier bins, scaled by remaining capacity\n    bin_capacity_ratio = bins_remain_cap / bins_remain_cap.max()\n    empty_bin_penalty_weight = 0.1  #Adjust for the empty bin penalty\n    priorities[bins_remain_cap >= item] -= bin_capacity_ratio[bins_remain_cap >= item] * empty_bin_penalty_weight\n\n    # Encourage bins nearing full capacity to be filled by increasing its priority.\n    nearly_full_bonus = np.where(bins_remain_cap >= item, (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max(), 0)\n    nearly_full_bonus_weight = 0.2\n    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item] * nearly_full_bonus_weight\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and fill ratio with adaptive exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing)\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap) # Waste minimization\n        priorities[~valid_bins] = -np.inf\n\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] * 0.1 # Fill ratio bonus\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 1e-6 * item # Adaptive exploration, scaled by item size\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and fill ratio, using numpy.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n\n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        # Prioritize smaller remaining space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        # Bonus for bins that are filled more completely\n        fill_ratio = item / (bins_remain_cap[does_fit] + 0.001)\n        priorities[does_fit] += fill_ratio\n    else:\n        priorities[:] = -1e9 # Item doesn't fit, very low priority\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill ratio, and a small exploration factor.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing[np.isfinite(remaining_capacities_after_packing)])  # Ensure min is taken only from valid bins\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)\n        priorities[~valid_bins] = -np.inf\n\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[~valid_bins] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] # No fill_ratio_weight hyperparameter\n        priorities[valid_bins] += 1e-9 * np.random.rand(np.sum(valid_bins)) # Add small random exploration factor\n        #priorities[valid_bins] += 1e-6 * bins_remain_cap[valid_bins] #removing this one \n    else:\n        priorities[:] = -np.inf\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on minimal waste and fill ratio, using numpy.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n\n    if np.any(does_fit):\n        remaining_space = bins_remain_cap[does_fit] - item\n        # Prioritize smaller remaining space\n        priorities[does_fit] = 1 / (remaining_space + 0.001)\n        # Bonus for bins that are filled more completely\n        fill_ratio = item / (bins_remain_cap[does_fit] + 0.001)\n        priorities[does_fit] += fill_ratio\n    else:\n        priorities[:] = -1e9 # Item doesn't fit, very low priority\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fill ratio, controlled randomization, and a bin-emptiness discouragement with adaptive parameters for enhanced bin prioritization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better) - primary best-fit driver\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n\n    # Adaptive fill ratio bonus: scale by item size relative to bin size\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    item_scale = item / bins_remain_cap.max()  # Normalize item size to bin capacity\n    fill_bonus_weight = 0.3 * item_scale  # Larger items get a larger fill bonus, relatively\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_bonus_weight\n\n    # Controlled randomization: scale randomization by (1 - item_scale) to favor exploration for smaller items\n    randomization_strength = 0.05 * (1 - item_scale)\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength * item\n\n    # Adaptive bin-emptiness penalty:  Heavier penalty for emptier bins, scaled by remaining capacity\n    bin_capacity_ratio = bins_remain_cap / bins_remain_cap.max()\n    empty_bin_penalty_weight = 0.1  #Adjust for the empty bin penalty\n    priorities[bins_remain_cap >= item] -= bin_capacity_ratio[bins_remain_cap >= item] * empty_bin_penalty_weight\n\n    # Encourage bins nearing full capacity to be filled by increasing its priority.\n    nearly_full_bonus = np.where(bins_remain_cap >= item, (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max(), 0)\n    nearly_full_bonus_weight = 0.2\n    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item] * nearly_full_bonus_weight\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit, fill ratio, wasted space, and dynamic randomization for bin prioritization.\n    This version focuses on a more adaptive randomization and wasted space management.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if the item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    # Using a non-linear transformation to penalize larger wasted space more heavily\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]**2 / bins_remain_cap.max()\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.3  # Slightly increased fill ratio weight\n    \n    # Adaptive Randomization: Reduce randomization as bins become fuller.\n    # The fuller the bins are, the less randomization we want to encourage exploitation.\n    randomization_strength = 0.1 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength[bins_remain_cap >= item]\n    \n    # Penalize bins that are too empty, but reduce the penalty as item size increases\n    # Helps prevent always filling smallest bins first, especially when large items arrive.\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.03 # Slightly reduced empty bin penalty\n    \n    # Bonus for bins that fit the item almost perfectly (small waste)\n    almost_perfect_fit = np.exp(-wasted_space[bins_remain_cap >= item] * 5 / item) # Sharp peak around small waste\n    priorities[bins_remain_cap >= item] += almost_perfect_fit * 0.1\n    \n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit, fill ratio, wasted space, and dynamic randomization for bin prioritization.\n    This version focuses on a more adaptive randomization and wasted space management.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get the lowest priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate wasted space if the item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize based on wasted space (smaller waste is better)\n    # Using a non-linear transformation to penalize larger wasted space more heavily\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]**2 / bins_remain_cap.max()\n    \n    # Encourage filling bins, bonus based on fill ratio AFTER placement\n    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.3  # Slightly increased fill ratio weight\n    \n    # Adaptive Randomization: Reduce randomization as bins become fuller.\n    # The fuller the bins are, the less randomization we want to encourage exploitation.\n    randomization_strength = 0.1 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()\n    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength[bins_remain_cap >= item]\n    \n    # Penalize bins that are too empty, but reduce the penalty as item size increases\n    # Helps prevent always filling smallest bins first, especially when large items arrive.\n    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())\n    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.03 # Slightly reduced empty bin penalty\n    \n    # Bonus for bins that fit the item almost perfectly (small waste)\n    almost_perfect_fit = np.exp(-wasted_space[bins_remain_cap >= item] * 5 / item) # Sharp peak around small waste\n    priorities[bins_remain_cap >= item] += almost_perfect_fit * 0.1\n    \n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}