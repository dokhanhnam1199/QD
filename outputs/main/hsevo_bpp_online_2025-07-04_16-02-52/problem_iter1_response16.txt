```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Only consider bins that have enough remaining capacity
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # First-Fit Decreasing-ish strategy
        # Prioritize bins that leave the LEAST amount of wasted space *after* the item is placed
        wasted_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = -wasted_space #Smaller wasted space = Higher priority
        
        # Adjust priorities based on how FULL the bin becomes. Encourages packing close to capacity.
        post_fill_ratio = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += (1 - post_fill_ratio)  #Higher fill = higher priority
        
        # Adding small penalty if it fits perfectly (or almost perfectly). This reduces local optimal which is close to perfect fit.
        perfect_fit = np.isclose(bins_remain_cap[eligible_bins], item) # perfect fit if tolerance = 1e-8
        priorities[eligible_bins][perfect_fit] -= 0.1

    else:
        #No bins fit this item. Give low priority across the board except if we're near the end
        #which encourages the creation of a new bin
        #This prevents long sequences of creating lots of bins that don't have much items.
        #If all bins cannot fit then no bins is preferred unless its last couple of iterations.
        priorities[:] = -1e9 # Very low priority
        
    return priorities
```
