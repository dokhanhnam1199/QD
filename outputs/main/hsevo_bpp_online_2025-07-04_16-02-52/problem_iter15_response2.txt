```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and adaptive elements for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Increased fill ratio importance

    # Adaptive Randomization: Scale randomization by item size AND bin emptiness
    # Larger items and emptier bins get more randomization
    randomization_factor = 0.05 * item * (bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor[feasible_bins]

    # Bin Balance Penalty: Discourage creating very uneven fill levels
    # Penalty increases with bin emptiness, scaled by how full the fullest bin is.
    max_cap = bins_remain_cap.max()
    if max_cap > 0:
        empty_bin_penalty = (bins_remain_cap / max_cap)
        priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1 # Increased penalty strength

    # Small bonus to bins close to full
    nearly_full_bonus = (1 - bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] += nearly_full_bonus[feasible_bins] * 0.05

    return priorities
```
