```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining capacity, best fit and exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get a very low priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9

    # Calculate waste for feasible bins
    feasible_mask = ~infeasible_mask
    waste = bins_remain_cap[feasible_mask] - item

    # Prioritize bins with smaller waste, add small constant to avoid division by zero.
    priorities[feasible_mask] = 1 / (waste + 0.001)

    # Add a bit of noise for exploration
    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)
    priorities += noise
    
    return priorities
```
