```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and adaptive penalization for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = -wasted_space[valid_bins]
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement, adaptive bonus
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    # Adaptive bonus based on item size. Larger items get a higher bonus, since filling is more important
    fill_bonus = fill_ratio_after[valid_bins] * (0.1 + 0.2 * (item))
    priorities[valid_bins] += fill_bonus
    
    # Add a small amount of randomization, scaled by item size, for exploration, reduced randomization
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.02 * item
    
    # Penalize bins that are too empty, adaptive penalty
    empty_bin_ratio = bins_remain_cap / bins_remain_cap.max()
    # Adaptive penalty, penalize emptier bins more harshly, especially if item is large
    empty_bin_penalty = empty_bin_ratio[valid_bins] * (0.02 + 0.03 * item)
    priorities[valid_bins] -= empty_bin_penalty
    
    # Promote bins close to full capacity after placing item. Discourage creating very small remaining spaces.
    nearly_full_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    nearly_full_threshold = 0.1 * bins_remain_cap.max() # Consider "nearly full" if remaining capacity < 10% of max
    nearly_full_bins = (wasted_space >= 0) & (wasted_space <= nearly_full_threshold)
    nearly_full_bonus[nearly_full_bins] = 0.1  # Flat bonus to these bins.

    priorities[valid_bins] += nearly_full_bonus[valid_bins]
    
    return priorities
```
