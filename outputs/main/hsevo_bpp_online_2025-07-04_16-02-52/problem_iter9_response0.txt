```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, adaptive randomization, and dynamic penalty for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Increased fill ratio weight

    # Adaptive Randomization: Scale randomization based on the variance of remaining capacities.
    # Higher variance suggests more diverse bin states, thus increased exploration
    capacity_variance = np.var(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 0.0
    randomization_strength = 0.01 + 0.04 * (capacity_variance / bins_remain_cap.max()) # Scale randomization
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength * item
    
    # Dynamic Empty Bin Penalty:  Penalize near-empty bins, but adjust penalty strength dynamically.
    # Stronger penalty if average bin occupancy is high (to avoid creating too many almost-empty bins).
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty_strength = 0.02 + 0.08 * average_occupancy # Dynamically adjust penalty

    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_strength

    # Bonus for bins with remaining capacity close to the item size. Prevents fragmentation
    closeness = np.abs(bins_remain_cap[feasible_bins] - item)
    closeness_bonus = np.exp(-closeness / (0.2 * bins_remain_cap.max())) # Gaussian-like bonus
    priorities[feasible_bins] += closeness_bonus * 0.1

    return priorities
```
