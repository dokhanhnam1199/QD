```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using best-fit, fill ratio, adaptive randomization, and emptiness penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[bins_remain_cap < item] = -np.inf

    wasted_space = bins_remain_cap - item
    # Primary best-fit
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]**2 / bins_remain_cap.max()

    # Adaptive fill ratio bonus
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    item_scale = item / bins_remain_cap.max()
    fill_bonus_weight = 0.3 * item_scale
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * fill_bonus_weight

    # Adaptive Randomization, less when fuller
    randomization_strength = 0.1 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength[bins_remain_cap >= item]

    # Adaptive bin-emptiness penalty
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    empty_bin_penalty_weight = 0.03
    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * empty_bin_penalty_weight

    # Bonus for bins that fit the item almost perfectly
    almost_perfect_fit = np.exp(-wasted_space[bins_remain_cap >= item] * 5 / item)
    priorities[bins_remain_cap >= item] += almost_perfect_fit * 0.1
    
    return priorities
```
