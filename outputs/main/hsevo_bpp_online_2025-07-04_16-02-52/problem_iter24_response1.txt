```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced adaptive heuristic for online bin packing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with dynamic scaling based on item size and average fill
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    avg_fill = np.mean(1 - bins_remain_cap / np.max(bins_remain_cap))
    waste_penalty_scale = (item / np.max(bins_remain_cap)) * (1 + avg_fill)
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / np.max(bins_remain_cap))**2 * waste_penalty_scale

    # Fill ratio bonus with saturation and item-size dependent boost
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_boost = 1 + np.tanh(item / np.max(bins_remain_cap))  # Saturating boost for larger items
    fill_ratio_bonus = fill_ratio_after * item_boost
    priorities[feasible_bins] += 0.4 * fill_ratio_bonus / (1 + fill_ratio_bonus)  # Scaled and saturated

    # Context-aware randomization, favoring emptier bins initially, then diminishing
    global_fill = 1 - np.mean(bins_remain_cap) / np.max(bins_remain_cap)
    randomization_strength = 0.1 * (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) * (1 - global_fill)**2  # Reduced randomness as bins fill
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Bin fullness incentive with non-linear scaling
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    fullness_incentive = bin_fullness**1.5 # Non-linear scaling to prioritize nearly full bins
    priorities[feasible_bins] += 0.2 * fullness_incentive

    # Strong bonus for bins that become nearly full after insertion
    remaining_after = bins_remain_cap[feasible_bins] - item
    nearly_full = remaining_after / np.max(bins_remain_cap) < 0.05
    priorities[feasible_bins][nearly_full] += 0.5

    # Moderate penalty for creating very small remaining space.
    too_small_space = (remaining_after > 0) & (remaining_after / np.max(bins_remain_cap) > 0.01) & (remaining_after / np.max(bins_remain_cap) < 0.1)

    priorities[feasible_bins][too_small_space] -= 0.1 * (remaining_after[too_small_space]/np.max(bins_remain_cap))
    return priorities
```
