```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive fill ratio, controlled randomization, emptiness penalty and almost full reward."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with non-linear penalty, scaled by bin cap variance
    wasted_space = bins_remain_cap - item
    waste_penalty_scale = np.var(bins_remain_cap) if np.var(bins_remain_cap) > 0 else bins_remain_cap.max()
    priorities[feasible_bins] -= (wasted_space[feasible_bins]**2) / (waste_penalty_scale + 1e-9)

    # Adaptive fill ratio bonus, scaled by item size and bin capacity. Non-linear fullness boost
    item_scale = item / bins_remain_cap.max()
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    fill_bonus_weight = 0.2 + 0.3 * item_scale * (1 + fill_ratio_after)
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * fill_bonus_weight

    # Adaptive Randomization scaled by remaining capacity and item size
    randomization_strength = 0.05 * (1 - item_scale) * (bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength[feasible_bins]

    # Adaptive bin-emptiness penalty
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item_scale)
    empty_bin_penalty_weight = 0.03 * (1 - fill_ratio_after)
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # Near full bonus
    almost_full = (wasted_space / bins_remain_cap.max() < 0.05) & feasible_bins
    priorities[almost_full] += 0.1

    return priorities
```
