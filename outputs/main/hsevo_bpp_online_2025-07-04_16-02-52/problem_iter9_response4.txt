```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and adaptive penalties for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins]
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Increased fill ratio importance
    
    # Adaptive randomization: Smaller items get more randomization
    randomization_scale = 0.1 * (1 - item / bins_remain_cap.max())  # Scale based on item size
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_scale
    
    # Adaptive empty bin penalty: Penalize near-empty bins more strongly when items are large
    empty_bin_ratio = bins_remain_cap / bins_remain_cap.max()
    empty_bin_penalty = empty_bin_ratio * (item / bins_remain_cap.max())  # Penalty scales with item size
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1
    
    # Bin balancing: Slightly prioritize bins with lower fill levels overall
    average_fill_level = np.mean(bins_remain_cap)
    bin_balance_bonus = (average_fill_level - bins_remain_cap) / bins_remain_cap.max()
    priorities[feasible_bins] += bin_balance_bonus[feasible_bins] * 0.05
    
    return priorities
```
