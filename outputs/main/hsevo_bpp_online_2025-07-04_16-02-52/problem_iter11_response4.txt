```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, controlled randomization and bin diversity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with non-linear penalty
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Adaptive fill ratio bonus
    fill_ratio_after = item / (bins_remain_cap[feasible_bins])
    priorities[feasible_bins] += fill_ratio_after * 0.1

    # Controlled randomization, scaled by (1 - item_scale)
    item_scale = item / bins_remain_cap.max()
    randomization_factor = 0.02 * (1 - item_scale)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after_all = (bins_remain_cap - wasted_space) / bins_remain_cap.max() #using scaled version
    priorities[feasible_bins] += fill_ratio_after_all[feasible_bins] * 0.2 #reduce scaling to 0.2

    # Slightly penalize bins that are already very full.
    almost_full = (wasted_space < 0.1*bins_remain_cap.max()) & feasible_bins
    priorities[almost_full] -= 0.01
    return priorities
```
