```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, almost full reward, and controlled randomization.
    Adapts to bin fullness and item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Wasted space priority (minimize waste)
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Fill ratio bonus, scaling with current bin fullness
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    fill_ratio_weight = 0.2 + 0.6 * bin_fullness
    priorities[feasible_bins] += fill_ratio_after * fill_ratio_weight

    # Controlled randomization, reduce for larger items and fuller bins
    randomization_strength = 0.05 * (1 - item / bins_remain_cap.max()) * (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Bonus for almost full bins after placement
    almost_full_threshold = 0.05 * bins_remain_cap.max()  # Adaptive threshold
    remaining_after_placement = bins_remain_cap[feasible_bins] - item
    almost_full_bins = remaining_after_placement <= almost_full_threshold
    priorities[feasible_bins][almost_full_bins] += 0.3 + 0.2*(1-item/bins_remain_cap.max())

    #Adaptive penalty for placing the item in almost empty bins.
    average_occupancy = np.mean(1 - bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    penalty_scale = 0.05 * (1 - average_occupancy) * (item / bins_remain_cap.max()) # Scale penalty by item size
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * penalty_scale

    return priorities
```
