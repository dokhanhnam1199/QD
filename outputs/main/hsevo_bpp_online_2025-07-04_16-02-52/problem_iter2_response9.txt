```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space and fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    priorities[bins_remain_cap < item] = -np.inf

    # Wasted space is the primary driver.
    wasted_space = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]

    # Bonus for almost full bins.  Avoids creating new bins unnecessarily.
    almost_full = (wasted_space >= 0) & (wasted_space <= 0.1)
    priorities[almost_full] += 2  # Bonus weight

    return priorities
```
