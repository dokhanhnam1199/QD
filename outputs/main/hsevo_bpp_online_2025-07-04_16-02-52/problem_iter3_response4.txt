```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Invalidate bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space
    wasted_space = bins_remain_cap - item
    
    # Primary priority: Minimize wasted space
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]
    
    # Bonus for bins that are already partially full, scaled based on item size
    # Encourages filling existing bins, scaled by item size to avoid over-prioritizing small items
    priorities[bins_remain_cap >= item] += (1 - bins_remain_cap[bins_remain_cap >= item]) * (0.2 * item)
    
    # Add a small randomization to the priorities to encourage exploration
    # This can help to avoid getting stuck in local optima
    available_bins = bins_remain_cap >= item
    if np.any(available_bins): # only add randomness if any bins are available
      priorities[available_bins] += np.random.rand(np.sum(available_bins)) * 0.01

    return priorities
```
