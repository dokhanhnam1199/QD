```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio and randomization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste Minimization
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= wasted_space[feasible_bins]

    # Fill Ratio Bonus
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_ratio_after * 0.2

    # Adaptive Randomization
    randomization_strength = 0.05 * item * (1 - wasted_space[feasible_bins] / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Empty bin penalty
    average_bin_usage = np.mean(bins_remain_cap) / bins_remain_cap.max()
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - average_bin_usage)
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1

    return priorities
```
