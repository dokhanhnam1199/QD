```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).  Avoid -inf when the item is larger than bin
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the fill ratio: how much of the bin will be filled by the item.
    fill_ratio = item / bins_remain_cap
    fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit

    # Prefer bins where the item fits reasonably well (high fill_ratio)
    # but avoid filling the bin completely (reducing fragmentation).
    # We add a capacity bonus as the remain cap increases but penalize as the gap gets really small
    suitable_bins = bins_remain_cap >= item
    capacity_bonus = (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    gap_penalty = np.exp(-50*(bins_remain_cap-item)**2) # a quick drop when item gets too close. Tune 50 parameter to change this
    priorities[suitable_bins] = fill_ratio[suitable_bins] + capacity_bonus[suitable_bins] - gap_penalty[suitable_bins]

    # Assign a very small penalty for bins where the item doesn't fit (discourage, but don't eliminate)
    priorities[bins_remain_cap < item] = -0.001

    return priorities
```
