```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very negative priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space
    wasted_space = bins_remain_cap - item
    
    # Prioritize bins with smaller wasted space
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]
    
    # Bonus for bins that are somewhat full, scaled by item size
    priorities[bins_remain_cap >= item] += (1 - bins_remain_cap[bins_remain_cap >= item]) * 0.1 * item
    
    # Add a small random component to encourage exploration. The magnitude
    # scales inversely with item size.  Smaller items get more randomness.
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 / (item + 0.01)

    return priorities
```
