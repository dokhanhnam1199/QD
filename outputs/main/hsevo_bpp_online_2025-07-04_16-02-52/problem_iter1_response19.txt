```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with remaining capacity slightly larger than the item size,
    but also penalizes bins that are too full (little remaining space) or too empty
    (wasteful allocation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit, very low priority
        else:
            # Reward bins where remaining capacity is close to the item size, but not too close
            # to avoid fragmentation. Aim for leaving some space, but not too much.

            # Calculate wasted space if the item is placed in the bin
            wasted_space = cap - item

            # Priority is high if wasted space is within a reasonable range
            # Adjust the range as needed to tune performance
            if 0 <= wasted_space <= item * 0.5:  # Favor bins where wasted space is between 0 and half the item size
                priorities[i] = 1 / (wasted_space + 1e-6)  # Avoid division by zero and prioritize smaller waste
            else:
                # Penalize bins with too much or too little wasted space
                priorities[i] = -abs(wasted_space - item * 0.25) # Penalize the deviation from ideal waste, e.g. quarter of the item.

    return priorities
```
