```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive fill ratio, controlled randomization, and bin diversity for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    min_remaining_cap = np.min(bins_remain_cap)
    priorities[feasible_bins] = -(wasted_space[feasible_bins] / min_remaining_cap) # Relative waste.

    # Encourage filling bins, bonus based on fill ratio AFTER placement. Adaptive bonus.
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    item_scale = item / bins_remain_cap.max() # scale between 0 and 1.
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * (0.2 + 0.3 * item_scale)  # bonus now depends on item size too.

    # Add a small amount of randomization, scaled by item size, for exploration
    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.
    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization
    priorities[feasible_bins] += np.random.normal(0, 1, np.sum(feasible_bins)) * randomization_factor * (1 - item_scale) # Smaller items get more randomization

    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * (0.01 + 0.04 * (1 - fill_ratio_after[feasible_bins])) # Emptier bins get more penalty.

    # Bonus for bins nearing full capacity
    almost_full = (wasted_space < 0.1 * bins_remain_cap.max()) & feasible_bins
    priorities[almost_full] += 0.05

    return priorities
```
