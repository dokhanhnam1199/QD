```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, and bin landscape.
    Combines adaptive scaling and bonuses for near-full bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with item size scaling
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    waste_penalty_scale = (item / bins_remain_cap.max())**0.5
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2 * waste_penalty_scale

    # Fill ratio bonus with capacity awareness
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    capacity_scale = (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    occupancy_variance = np.var(1 - bins_remain_cap / bins_remain_cap.max())
    fill_bonus_weight = 0.2 + 0.3 * (1 - occupancy_variance)
    priorities[feasible_bins] += fill_ratio_after * fill_bonus_weight * capacity_scale

    # Controlled randomization
    randomization_strength = 0.1 * (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Adaptive bin-emptiness penalty
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    empty_bin_penalty_weight = 0.01 + 0.04 * average_occupancy
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # Strong bonus for almost full bins, non-linear scaling
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < 0.05
    almost_full_bonus = (1 - wasted_space_after[almost_full] / bins_remain_cap.max())**2
    priorities[feasible_bins][almost_full] += 0.15 * almost_full_bonus

    # Delayed commitment penalty
    almost_empty = bins_remain_cap[feasible_bins] / bins_remain_cap.max() > 0.8
    small_item = item / bins_remain_cap.max() < 0.2
    if np.any(almost_empty) and small_item:
        priorities[feasible_bins][almost_empty] -= 0.05 * small_item

    # Incentivize placing large items in emptier bins
    if item > bins_remain_cap.max() / 2:
        priorities[feasible_bins] += (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) * 0.05

    return priorities
```
