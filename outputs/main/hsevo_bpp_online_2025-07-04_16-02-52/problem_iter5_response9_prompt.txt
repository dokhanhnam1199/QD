{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give a very low priority (large negative value) to bins that cannot fit the item\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate the wasted space if the item is placed in the bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize bins with smaller wasted space (more efficient packing)\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n    \n    # Add a small bonus for bins that are already somewhat full.  This encourages\n    # using existing bins before starting new ones.  This is a heuristic so can be tuned.\n    priorities[bins_remain_cap >= item] += (1 - bins_remain_cap[bins_remain_cap >= item]) * 0.1\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fit ratio, capacity, and adds small random exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    priorities[~does_fit] = -1e9\n\n    remaining_after_fit = bins_remain_cap - item\n    fit_ratio = remaining_after_fit / bins_remain_cap\n\n    priorities[does_fit] = fit_ratio[does_fit] + 1e-6 * bins_remain_cap[does_fit] + 1e-9 * np.random.rand(np.sum(does_fit))\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic prioritizes bins based on the absolute difference between remaining capacities after packing and the minimum remaining capacity, combined with a fill ratio bonus. The worst heuristic focuses on the fit ratio and capacity, with a tiny random exploration factor. (2nd best) vs (2nd worst) the second best introduces randomness scaled by the item size and considers a \"near fit\" bonus. Second worst focuses heavily on fit ratio. Comparing (1st) vs (2nd), the key difference lies in how waste is handled. (3rd) vs (4th), 3rd prioritizes based on the inverse of remaining space. (5th) vs (6th), 5th gives a high priority to fitting items. Comparing (second worst) vs (worst), the random factor is negligible in worst. Overall: The best heuristics appear to strike a balance between minimizing waste, encouraging full bins, and a degree of randomization for exploration, without overemphasizing raw capacity or fit ratios.\n- \nOkay, I understand the goal: to define \"Current Self-Reflection\" effectively for designing better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection.\" Here's a redefined self-reflection framework:\n\n*   **Keywords:** Holistic, Trade-offs, Adaptability, Experimentation.\n*   **Advice:** Evaluate heuristics across diverse problem instances and performance metrics (waste, fill). Investigate parameter adaptation based on real-time problem characteristics.\n*   **Avoid:** Premature optimization, over-reliance on single metrics, and neglecting solution diversity.\n*   **Explanation:** Effective heuristics balance exploitation (using current knowledge) with exploration (discovering new solutions). Continuous evaluation and iterative refinement are key.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}