```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio, and bin landscape awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with scaled penalty, more aggressively penalized for larger items
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2 * (item / bins_remain_cap.max())**1.5

    # Adaptive fill ratio bonus, scaled by item size, bin fullness, and a sigmoid function for gradual reward
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    sigmoid_fullness = 1 / (1 + np.exp(-10 * (bin_fullness - 0.5)))  # Sigmoid around 0.5 fullness
    priorities[feasible_bins] += fill_ratio_after * 0.35 * item_scale * (1 + sigmoid_fullness)

    # Controlled randomization, inversely proportional to bin fill and item size, increased exploration for small items
    randomization_strength = 0.05 * (1 - item_scale)**2 * (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Adaptive bin-emptiness penalty, scaling with item, average occupancy, and bin's relative capacity.  Avoid overfilling slightly filled bins
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())**0.5 * (1 - item / bins_remain_cap.max())
    empty_bin_penalty_weight = 0.01 + 0.09 * average_occupancy
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # Stronger bonus for almost full bins after insertion, sigmoid to smoothen the transition.
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < 0.05
    sigmoid_almost_full = 1 / (1 + np.exp(50 * (wasted_space_after / bins_remain_cap.max() - 0.05)))
    priorities[feasible_bins][almost_full] += 0.15 * sigmoid_almost_full[almost_full] #scaled by the sigmoid.

    # Extra bonus for filling almost empty bins with large item
    almost_empty = bins_remain_cap[feasible_bins] > 0.9 * bins_remain_cap.max()
    if item > 0.6 * bins_remain_cap.max():
        priorities[feasible_bins][almost_empty] += 0.07

    return priorities
```
