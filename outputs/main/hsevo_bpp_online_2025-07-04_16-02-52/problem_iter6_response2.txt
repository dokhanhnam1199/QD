```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, and controlled randomization, with dynamic adjustments
    and bin utilization awareness for enhanced bin prioritization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Increased fill ratio importance

    # Dynamic Randomization: Adjust randomness based on item size relative to bin capacities
    randomization_strength = 0.05 * item * (item / bins_remain_cap.max()) # scaled randomness
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength
    
    # Bin Utilization Awareness: Prefer bins that are neither too full nor too empty
    bin_utilization = bins_remain_cap / bins_remain_cap.max()
    utilization_penalty = np.abs(bin_utilization - 0.5) # Penalize bins far from 50% utilization
    priorities[feasible_bins] -= utilization_penalty[feasible_bins] * 0.1

    # Item Size Consideration: Adjust priority based on how well the item fits.
    item_fit_score = (item / bins_remain_cap[feasible_bins])
    priorities[feasible_bins] += item_fit_score * 0.05  # Reward closer fits

    return priorities
```
