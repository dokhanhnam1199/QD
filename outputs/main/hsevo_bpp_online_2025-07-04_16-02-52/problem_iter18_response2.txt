```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio, bin landscape awareness, and dynamic exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # 1. Waste Minimization with Non-linear Penalty and Item Size Awareness
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    waste_penalty = (wasted_space[feasible_bins] / bins_remain_cap.max())**3 * (item / bins_remain_cap.max()) # Cubed penalty for larger waste
    priorities[feasible_bins] -= waste_penalty

    # 2. Fill Ratio Bonus with Dynamic Scaling based on Item Size and Bin Fullness
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    fill_bonus = fill_ratio_after * 0.4 * item_scale * (1 + bin_fullness**2)  # Higher bonus for nearly full bins
    priorities[feasible_bins] += fill_bonus

    # 3. Dynamic Exploration with Item-Size-Dependent Randomization
    randomization_strength = 0.01 * (1 - item_scale) * (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) # Smaller items get more randomization
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # 4. Adaptive Bin-Emptiness Penalty with Average Occupancy and Item Size Consideration
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())**2 # Larger items cause higher penalty for near-empty bins
    empty_bin_penalty_weight = 0.01 + 0.09 * average_occupancy
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # 5. Strong Bonus for Almost Full Bins After Insertion
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / bins_remain_cap.max() < 0.03 # more strict condition for almost full
    priorities[feasible_bins][almost_full] += 0.15  #Increased bonus

    # 6. Moderate penalty for filling bins above a threshold.
    threshold = 0.7
    overfilled = (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap.max()) > threshold
    priorities[feasible_bins][overfilled] -= 0.05 * (1 - average_occupancy) # Scale penalty

    return priorities
```
