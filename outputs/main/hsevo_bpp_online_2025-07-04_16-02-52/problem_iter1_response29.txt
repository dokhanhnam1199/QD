```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with remaining capacity slightly larger than the item size,
    while penalizing bins that are either too small or too large. It also introduces a small
    random factor to break ties and explore different packing configurations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item

    # Penalize bins where the item doesn't fit (waste < 0). Give them a very low priority.
    priorities = np.where(waste < 0, -np.inf, 0)

    # Prioritize bins where waste is small but positive.  A quadratic function is used to shape the priorities.
    # The ideal waste is near zero, and the priority decreases as waste increases.
    # We can tune the parameters to control the shape of the priority function.
    ideal_waste = 0.1 * item  # Aim for a bit of waste (e.g., 10% of item size)
    priority_scale = 10 # scaling factor to influence how strongly the waste affects priority

    valid_bins = waste >= 0
    priorities[valid_bins] = priority_scale * np.exp(-((waste[valid_bins] - ideal_waste)**2) / (2 * (item/5)**2)) # Gaussian-like priority based on remaining space

    # Introduce a small amount of noise to encourage exploration.
    noise = np.random.normal(0, 0.1, size=bins_remain_cap.shape) # Normal distributed noise, scale 0.1.
    priorities = priorities + noise

    return priorities
```
