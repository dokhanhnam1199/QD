```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This function employs a heuristic inspired by concepts of space-time distortion.
    A bin's priority is determined by a combination of its remaining capacity relative to the item size
    and a 'potential energy' term related to how close the item's size is to filling the bin completely.
    A perfect fit is ideal, so the closer we get to a perfect fit, the higher the priority.  Bins that are
    too small to fit the item are given a very low priority (negative infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Item doesn't fit
        else:
            # 'Space-time curvature' term: Higher capacity, initially lower priority,
            # but we balance this with the fit. The larger the remaining capacity compared to the item,
            # initially the lower the score.

            # 'Potential Energy' term:  Based on how well the item fits.  A perfect fit is best, so we reward close fits.
            # The closer (cap - item) is to 0, the higher this term. This helps push towards filling bins.
            fit_metric = np.exp(-5 * (cap - item) / item)  # Exponential decay if it's not a great fit.

            priorities[i] = 0.5 * (item / cap) + 0.5 * fit_metric # Combined score, balancing fill with total fit.
    return priorities
```
