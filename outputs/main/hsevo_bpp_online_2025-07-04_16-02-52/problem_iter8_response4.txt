```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization,
    and adaptive bin-emptiness penalty for online bin packing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2

    # Adaptive randomization, scale by (1 - item_scale) to favor smaller items
    item_scale = item / bins_remain_cap.max()
    randomization_factor = max(0.01, 0.05 * (1 - item_scale))
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor

    # Adaptive bin-emptiness penalty (heavier penalty for emptier bins)
    empty_bin_penalty = (1 - bins_remain_cap / bins_remain_cap.max())**2  # Quadratic penalty
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.05

    return priorities
```
