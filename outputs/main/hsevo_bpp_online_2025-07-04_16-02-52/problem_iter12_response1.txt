```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, fill ratio, controlled randomization, bin diversity, and adaptive penalties
    for bin prioritization, aiming for better performance than v1.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (bins_remain_cap - wasted_space) / bins_remain_cap.max()
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.3  # Increased fill ratio weight

    # Adaptive Randomization: Smaller items get more randomness
    randomization_factor = 0.1 / (item + 0.01)  # Inverse relationship with item size
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor

    # Bin Diversity: Slightly favor bins with different remaining capacities
    unique_capacities = np.unique(bins_remain_cap[feasible_bins])
    if len(unique_capacities) < len(bins_remain_cap[feasible_bins]):
         capacity_counts = {}
         for cap in bins_remain_cap[feasible_bins]:
             capacity_counts[cap] = capacity_counts.get(cap,0)+1
         for i in np.where(feasible_bins)[0]:
            priorities[i] += 0.01 / capacity_counts[bins_remain_cap[i]]

    # Adaptive Empty Bin Penalty: Larger items penalize empty bins more
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * item
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.1 # Increased penalty weight

    # Prioritize bins that have already been used somewhat
    bin_usage_penalty = np.where(bins_remain_cap < bins_remain_cap.max(), 0.02, 0)
    priorities[feasible_bins] += bin_usage_penalty[feasible_bins]

    return priorities
```
