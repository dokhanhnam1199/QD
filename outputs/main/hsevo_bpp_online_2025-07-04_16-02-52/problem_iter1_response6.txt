```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by black hole accretion disks and Hawking radiation.  We want to
    fill bins that are 'just right' -- not too empty (inefficient) and not
    almost full (risk of exceeding capacity, high 'radiation' from near-overflow).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # A 'Hawking radiation' inspired term: Higher penalty closer to full bin
            #  (Smaller remaining capacity after packing)

            remaining_after_pack = cap - item
            #Use modified sigmoid, to control behavior close to full
            sigmoid_scale = 10
            radiation_term = 1 / (1 + np.exp(sigmoid_scale*(remaining_after_pack/cap - 0.5)))  # scales remaining to 0-1 range


            #Prefer to put in bins with moderate filling; Avoid near empty or nearly full.
            #Parabola with min at 0.5 represents desired fill fraction
            fill_fraction = (cap - item) / (1 + item) if item < cap else 0  #Avoid div by zero

            ideal_filling_term = -((fill_fraction-0.5)**2)  #Want close to .5 for utilization

            #Combine both effects for bin priority, also scale terms to adjust importance
            priorities[i] = 0.8*ideal_filling_term - 0.2 * radiation_term # Adjust weights to control exploration-exploitation
            # Make bins that can't fit very low priority
        else:
            priorities[i] = -np.inf # Very Low priority


    return priorities
```
