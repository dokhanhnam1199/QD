```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Base priority for being able to fit

    # Give higher priority to bins with smaller remaining capacity *but* that can still fit
    remaining_capacity_if_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1.0 / (remaining_capacity_if_fit + 1e-9)  # Avoid division by zero

    # Prioritize bins that are nearly full after placing the item, to fill them up
    fullness_ratio = (bins_remain_cap - item) / bins_remain_cap
    priorities[can_fit] += np.clip(1 - np.abs(fullness_ratio[can_fit]),0,1)
    return priorities
```
