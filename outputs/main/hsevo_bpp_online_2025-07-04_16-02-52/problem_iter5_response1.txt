```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on wasted space, fill level, near fit, and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space
    wasted_space = bins_remain_cap - item
    feasible_mask = bins_remain_cap >= item

    # Primary priority: Minimize wasted space (penalize larger waste more).
    priorities[feasible_mask] = -wasted_space[feasible_mask]**2

    # Bonus for bins that are already somewhat full.
    priorities[feasible_mask] += (1 - bins_remain_cap[feasible_mask]) * 0.25

    # Introduce randomness, scaled by item size.
    priorities[feasible_mask] += np.random.rand(np.sum(feasible_mask)) * 0.05 * item

    # Prioritize bins close to the item size.
    near_fit = (bins_remain_cap >= item) & (wasted_space <= item * 0.2)
    priorities[near_fit] += 0.15

    return priorities
```
