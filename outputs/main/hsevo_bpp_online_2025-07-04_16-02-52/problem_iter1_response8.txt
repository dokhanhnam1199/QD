```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(eligible_bins):
        # Calculate the wasted space if the item is placed in each eligible bin.
        wasted_space = bins_remain_cap[eligible_bins] - item

        # Give higher priority to bins with less wasted space.
        # Add a small value to prevent division by zero, which might occur
        # when wasted_space is close to zero for bins filled to near-capacity
        priorities[eligible_bins] = 1 / (wasted_space + 1e-6)
        
        # Boost priority for almost full bins. If a bin becomes nearly full after adding item,
        # prioritize it even higher to prevent smaller bins from being unnecessarily opened.
        almost_full = (bins_remain_cap[eligible_bins] - item) <= 0.1 
        priorities[eligible_bins][almost_full] *= 2 #Increase by some factor
    else:
        #No eligible bins, penalize all existing bins by a negligible value
        #Prioritizing opening a new bin by giving very low (or zero) priority to existing bins.
        priorities[:] = 0 # Assign zero priority to all bins

    return priorities
```
