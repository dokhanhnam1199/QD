```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic: waste minimization, fill ratio, landscape, item-aware adjustments."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    max_bin_cap = np.max(bins_remain_cap)
    avg_bin_cap = np.mean(bins_remain_cap)
    std_bin_cap = np.std(bins_remain_cap)

    # 1. Waste Minimization (Scaled)
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / max_bin_cap)**2 * (item / max_bin_cap)

    # 2. Adaptive Fill Ratio Bonus (Item-aware)
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / max_bin_cap
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / max_bin_cap
    priorities[feasible_bins] += fill_ratio_after * 0.3 * item_scale * (1 + bin_fullness**2)

    # 3. Controlled Randomization (Bin-aware)
    randomization_strength = 0.05 * item_scale * (bins_remain_cap[feasible_bins] / max_bin_cap)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # 4. Adaptive Empty Bin Penalty (Landscape-aware)
    empty_bin_penalty = (bins_remain_cap / max_bin_cap) * (1 - item / max_bin_cap)
    empty_bin_weight = 0.02 + 0.08 * (1 - avg_bin_cap / max_bin_cap)
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_weight

    # 5. Almost Full Bonus (Enhanced)
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = wasted_space_after / max_bin_cap < 0.04
    priorities[feasible_bins][almost_full] += 0.15

    # 6. Large Item Consideration (Threshold)
    if item > 0.5 * max_bin_cap:
        empty_bin_bonus = (bins_remain_cap[feasible_bins] / max_bin_cap) * 0.05
        priorities[feasible_bins] += empty_bin_bonus

    # 7. Bin Capacity Variance Penalty (Balance)
    capacity_variance_penalty = (std_bin_cap / max_bin_cap) * 0.02
    priorities[feasible_bins] -= capacity_variance_penalty

    return priorities
```
