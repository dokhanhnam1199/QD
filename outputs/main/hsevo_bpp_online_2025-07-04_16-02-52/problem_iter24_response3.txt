```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, fill ratio, bin landscape awareness, and item characteristics."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with adaptive scaling based on item size and bin fullness
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    waste_penalty_scale = (item / bins_remain_cap.max()) * (1 - np.mean(bins_remain_cap[feasible_bins] / bins_remain_cap.max()) if np.any(feasible_bins) else 1.0)  # Scale by item size and avg bin occupancy
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2 * waste_penalty_scale

    # Fill ratio bonus, non-linear scaling, enhanced by item size and bin state
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    fill_ratio_bonus_scale = 0.4 * item_scale * (1 + bin_fullness**2)  # Non-linear scaling of bin fullness
    priorities[feasible_bins] += fill_ratio_after**1.5 * fill_ratio_bonus_scale  # Non-linear fill ratio bonus

    # Controlled randomness, adaptive to item size and remaining capacity variance
    capacity_variance = np.var(bins_remain_cap[feasible_bins] / bins_remain_cap.max()) if np.any(feasible_bins) else 0.0
    randomization_strength = 0.03 * item_scale * (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) * (1 + capacity_variance)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Empty bin penalty, scaled by item size, average occupancy, and number of empty bins
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_count = np.sum(bins_remain_cap == bins_remain_cap.max()) #Count completely empty bins.
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    empty_bin_penalty_weight = 0.01 + 0.06 * average_occupancy + 0.03 * (empty_bin_count / len(bins_remain_cap))
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # Bonus for almost full bins, enhanced scaling based on item size
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full = (wasted_space_after / bins_remain_cap.max()) < 0.05
    almost_full_bonus = 0.07 + 0.05 * item_scale # Scale almost full bonus by item_scale
    priorities[feasible_bins][almost_full] += almost_full_bonus

    # Prioritize bins that will become completely full after insertion
    becomes_full = wasted_space_after == 0
    priorities[feasible_bins][becomes_full] += 0.15

    return priorities
```
