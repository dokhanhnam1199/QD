```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by quantum mechanics and path integrals: consider the 'energy'
    required to place the item into each bin. A lower 'energy' (more stable state)
    should have higher priority. This uses a potential energy function related to
    the remaining space in the bin after placing the item.  We also need to
    introduce some 'tunneling' probability for bins that are almost full
    to encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Small constant to avoid division by zero and log of zero
    epsilon = 1e-9

    # Calculate remaining capacity after placing the item.  Negative values mean item doesn't fit.
    remaining_cap = bins_remain_cap - item

    # "Potential Energy" function:  higher energy for nearly full or over-full bins
    potential_energy = np.where(remaining_cap > 0, 1 / (remaining_cap + epsilon), 1e9) # High energy if it overflows

    # "Tunneling" effect: even if the bin is almost full, there's a small chance we still consider it, promoting exploration.
    # A slightly filled bin is prefereable though, according to potential energy.
    tunneling_probability = np.exp(-np.abs(remaining_cap) * 10)  # Decay fast with more fill

    # Combine potential energy and tunneling: lower energy + some tunneling = higher priority
    priorities = -potential_energy + tunneling_probability
    
    # Ensure we aren't selecting impossible options
    priorities = np.where(bins_remain_cap >= item, priorities, -1e9)  # Make impossible options super low priority.

    return priorities
```
