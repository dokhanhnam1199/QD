```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, and adaptive randomization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with non-linear penalty
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Adaptive fill ratio bonus
    fill_ratio_after = item / (bins_remain_cap[feasible_bins])
    priorities[feasible_bins] += fill_ratio_after * 0.1

    # Adaptive Randomization: Smaller items get more randomization.
    item_scale = item / bins_remain_cap.max()
    randomization_strength = 0.1 / (1 + item_scale)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after_all = (bins_remain_cap - wasted_space) / bins_remain_cap.max()
    priorities[feasible_bins] += fill_ratio_after_all[feasible_bins] * 0.2

    # Bonus for bins that would become nearly full after placing the item
    nearly_full_threshold = 0.9
    nearly_full_bonus = np.where((bins_remain_cap >= item) & (fill_ratio_after_all >= nearly_full_threshold), 0.2, 0)
    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item]

    return priorities
```
