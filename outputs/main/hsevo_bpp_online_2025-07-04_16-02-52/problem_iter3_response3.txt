```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Wasted space is still a key factor
    wasted_space = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]

    # Encourage filling bins, but with more emphasis based on how full they *could* be
    # The closer to full *after* placement, the higher the bonus.
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.2  # Increased weight on fill ratio

    # Add a small amount of randomization to explore different bin placements.
    # This helps to escape local optima.
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05
    
    # Penalize bins that are very empty, even if they fit. This encourages using bins
    # that are already partially full.
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.05
    

    return priorities
```
