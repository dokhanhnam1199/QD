```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A higher score indicates a more desirable bin to place the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize a very small constant to avoid division by zero and log of zero.
    epsilon = 1e-9  

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # 1. Remaining Capacity: Favor bins with smaller remaining capacity
            #    after packing the item. This encourages filling bins as much as possible.
            remaining_after_pack = cap - item
            priorities[i] += (1 / (remaining_after_pack + epsilon))  # Avoid division by zero
            
            # 2. Relative Fill: Favor bins where the item fills a larger proportion
            #    of the bin's remaining capacity.
            fill_ratio = item / (cap + epsilon) # Avoid division by zero
            priorities[i] += fill_ratio
            
            # 3. Avoid excessive fragmentation: Penalize bins where adding item results in a tiny space.
            #Heuristic: If after placing the current item into the ith bin, the remaining capacity of that bin will be smaller than item/2 we add a small bonus for not fragmenting
            if remaining_after_pack <= item/2:
                priorities[i]+= 0.5
            
            
        else:
            priorities[i] = -np.inf  # Item doesn't fit.

    return priorities
```
