```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, bin utilization, and adaptive randomization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins with negative infinity
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining space after placing the item in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize bins with minimal wasted space (Best-Fit component)
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]

    # Fill ratio bonus, scaled by remaining capacity.  Emphasizes filling nearly full bins.
    fill_ratio_after = (bins_remain_cap - wasted_space) / bins_remain_cap.max()
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.3

    # Adaptive Randomization: Smaller items get more randomization.
    randomization_strength = 0.1 / (1 + item) # Inverse relationship
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength

    # Bin Utilization Penalty: Penalize bins with very low fill levels to encourage using partially filled bins.
    utilization_ratio = bins_remain_cap / bins_remain_cap.max()
    priorities[bins_remain_cap >= item] -= (1 - utilization_ratio[bins_remain_cap >= item]) * 0.1

    # Bonus for bins that would become nearly full after placing the item
    nearly_full_threshold = 0.9
    nearly_full_bonus = np.where((bins_remain_cap >= item) & (fill_ratio_after >= nearly_full_threshold), 0.2, 0)
    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item]

    return priorities
```
