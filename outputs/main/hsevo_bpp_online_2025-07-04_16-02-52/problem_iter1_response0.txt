```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a very low priority (large negative value) to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate the wasted space if the item is placed in the bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize bins with smaller wasted space (more efficient packing)
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]
    
    # Add a small bonus for bins that are already somewhat full.  This encourages
    # using existing bins before starting new ones.  This is a heuristic so can be tuned.
    priorities[bins_remain_cap >= item] += (1 - bins_remain_cap[bins_remain_cap >= item]) * 0.1

    return priorities
```
