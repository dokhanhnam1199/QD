[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill ratio, efficiently.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)\n        min_remaining_cap = np.min(remaining_capacities_after_packing)\n\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)\n        priorities[~valid_bins] = -np.inf\n        fill_ratio = item / bins_remain_cap\n        fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit\n\n        priorities[valid_bins] += fill_ratio[valid_bins] * 0.1\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity, best fit and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get a very low priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -1e9\n\n    # Calculate waste for feasible bins\n    feasible_mask = ~infeasible_mask\n    waste = bins_remain_cap[feasible_mask] - item\n\n    # Prioritize bins with smaller waste, add small constant to avoid division by zero.\n    priorities[feasible_mask] = 1 / (waste + 0.001)\n\n    # Add a bit of noise for exploration\n    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n    priorities += noise\n    \n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 5.554447546868772,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins with least waste and avoids small remainders.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.full_like(bins_remain_cap, 1e-6)\n\n    residual_capacities = bins_remain_cap - item\n    residual_capacities[~eligible_bins] = np.inf\n\n    min_residual = np.min(residual_capacities[eligible_bins])\n    best_fit_bins = np.isclose(residual_capacities, min_residual)\n\n    priorities[best_fit_bins] += 1.0\n\n    # Avoid small remainders: penalize bins leading to tiny residual space.\n    too_small = (residual_capacities > 0) & (residual_capacities < (np.max(bins_remain_cap) * 0.1))\n    priorities[too_small] -= 0.5\n\n    # Gaussian-like priority based on remaining space around ideal waste\n    ideal_waste = 0.1 * item\n    priority_scale = 10\n    valid_bins = residual_capacities >=0\n    priorities[valid_bins] += priority_scale * np.exp(-((residual_capacities[valid_bins] - ideal_waste)**2) / (2 * (item/5)**2))\n\n    # Add noise\n    priorities[eligible_bins] += np.random.uniform(0, 0.1, size=np.sum(eligible_bins))\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins that fit the item, favoring those with less remaining space after packing.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        remaining_space = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = -remaining_space # Smaller remaining space gets higher priority\n        priorities[fit_mask] += 10 #Give extra weight to bins that fit\n    else:\n        priorities = bins_remain_cap - item # Penalize bins where the item doesn't fit\n        \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on best-fit and remaining capacity.\"\"\"\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Infeasible bins get -inf priority\n    priorities = np.where(remaining_after_add >= 0, bins_remain_cap, -np.inf)\n\n    # Add bonus for almost full bins to encourage efficient packing\n    almost_full = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)\n    priorities[almost_full] += 5\n\n    # If no bin can fit, prioritize the fullest bin\n    if np.all(priorities == -np.inf):\n        priorities = bins_remain_cap\n    \n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.2919824491424,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity after item placement.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    # Very low priority if item doesn't fit\n    priorities = np.where(waste < 0, -np.inf, priorities)\n\n    valid_bins = waste >= 0\n    # Prioritize smaller waste, add small random noise for exploration\n    priorities[valid_bins] = 1 / (waste[valid_bins] + 0.001) + np.random.normal(0, 0.01, size=np.sum(valid_bins))\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 5.584363781412047,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins where item fits with minimal waste, using numpy.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    \n    if np.any(does_fit): #Check if any bin fits the item\n        remaining_space = bins_remain_cap[does_fit] - item\n        priorities[does_fit] = 1 / (remaining_space + 0.001) #Prioritize small remain space\n    else:\n        priorities[:] = -1e9 #Item doesn't fit, very low priority\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and remaining space.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    priorities[~does_fit] = -1e9\n    remaining_after_fit = bins_remain_cap - item\n    fit_bonus = np.exp(-np.abs(remaining_after_fit) / item)\n    priorities[does_fit] = fit_bonus[does_fit] + np.random.rand(np.sum(does_fit)) * 1e-6\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit ratio, capacity, and adds small random exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    does_fit = bins_remain_cap >= item\n    priorities[~does_fit] = -1e9\n\n    remaining_after_fit = bins_remain_cap - item\n    fit_ratio = remaining_after_fit / bins_remain_cap\n\n    priorities[does_fit] = fit_ratio[does_fit] + 1e-6 * bins_remain_cap[does_fit] + 1e-9 * np.random.rand(np.sum(does_fit))\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on wasted space and fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Wasted space is the primary driver.\n    wasted_space = bins_remain_cap - item\n    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]\n\n    # Bonus for almost full bins.  Avoids creating new bins unnecessarily.\n    almost_full = (wasted_space >= 0) & (wasted_space <= 0.1)\n    priorities[almost_full] += 2  # Bonus weight\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]