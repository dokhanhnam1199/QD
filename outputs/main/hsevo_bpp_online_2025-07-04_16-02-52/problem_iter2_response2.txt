```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins with least waste and avoids small remainders."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.full_like(bins_remain_cap, 1e-6)

    residual_capacities = bins_remain_cap - item
    residual_capacities[~eligible_bins] = np.inf

    min_residual = np.min(residual_capacities[eligible_bins])
    best_fit_bins = np.isclose(residual_capacities, min_residual)

    priorities[best_fit_bins] += 1.0

    # Avoid small remainders: penalize bins leading to tiny residual space.
    too_small = (residual_capacities > 0) & (residual_capacities < (np.max(bins_remain_cap) * 0.1))
    priorities[too_small] -= 0.5

    # Gaussian-like priority based on remaining space around ideal waste
    ideal_waste = 0.1 * item
    priority_scale = 10
    valid_bins = residual_capacities >=0
    priorities[valid_bins] += priority_scale * np.exp(-((residual_capacities[valid_bins] - ideal_waste)**2) / (2 * (item/5)**2))

    # Add noise
    priorities[eligible_bins] += np.random.uniform(0, 0.1, size=np.sum(eligible_bins))

    return priorities
```
