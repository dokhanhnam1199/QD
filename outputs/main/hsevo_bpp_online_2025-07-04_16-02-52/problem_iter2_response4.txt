```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best-fit and remaining capacity."""

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Infeasible bins get -inf priority
    priorities = np.where(remaining_after_add >= 0, bins_remain_cap, -np.inf)

    # Add bonus for almost full bins to encourage efficient packing
    almost_full = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)
    priorities[almost_full] += 5

    # If no bin can fit, prioritize the fullest bin
    if np.all(priorities == -np.inf):
        priorities = bins_remain_cap
    
    return priorities
```
