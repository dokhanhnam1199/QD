```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced adaptive heuristic for online bin packing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # 1. Waste Minimization with Dynamic Scaling:
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    
    # Scale the penalty based on item size and remaining capacity.  Smaller remaining capacity
    # and larger items result in a higher penalty.
    waste_penalty_scale = (item / bins_remain_cap.max()) * (1 / (bins_remain_cap[feasible_bins] / bins_remain_cap.max() + 0.1))  # Add small value to avoid division by zero
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2 * waste_penalty_scale

    # 2. Adaptive Fill Ratio Bonus with Non-Linear Scaling:
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    
    # Apply non-linear scaling to the fill ratio bonus.  Higher fill ratios get a larger bonus,
    # encouraging efficient packing.
    fill_ratio_bonus_scale = fill_ratio_after**1.5  # Experiment with different powers
    item_scale = item / bins_remain_cap.max()
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    priorities[feasible_bins] += fill_ratio_bonus_scale * 0.3 * item_scale * (1 + bin_fullness)

    # 3. Controlled Randomization Based on Bin Utilization:
    # Reduce randomness as bins become fuller.
    randomness_strength = 0.05 * item_scale * (bins_remain_cap[feasible_bins] / bins_remain_cap.max())**2
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomness_strength

    # 4. Bin Emptiness Penalty Adjusted by Overall Bin Occupancy:
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    
    # The penalty for using almost empty bins increases more significantly as average occupancy rises.
    empty_bin_penalty_weight = 0.02 + 0.08 * average_occupancy**2  # Non-linear scaling
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # 5. "Almost Full" Bin Bonus with Tolerance Adjustment:
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    
    # Dynamically adjust the "almost full" tolerance based on item size.  Smaller items require
    # a tighter tolerance.
    almost_full_tolerance = 0.05 + 0.05 * (item / bins_remain_cap.max())
    almost_full = wasted_space_after / bins_remain_cap.max() < almost_full_tolerance
    priorities[feasible_bins][almost_full] += 0.15 #Increased bonus for almost full.

    # 6. Prioritize bins that are close to the item size (best fit)
    item_difference = np.abs(bins_remain_cap[feasible_bins] - item)
    priorities[feasible_bins] -= 0.05 * (item_difference / bins_remain_cap.max())

    return priorities
```
