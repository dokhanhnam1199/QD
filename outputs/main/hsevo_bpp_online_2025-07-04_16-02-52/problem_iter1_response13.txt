```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Emphasizes bins that can fit the item relatively well and avoids near-full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give a small penalty if the item doesn't fit at all.
    does_fit = bins_remain_cap >= item
    priorities[~does_fit] = -1e9  # Very low priority if it doesn't fit.

    # Give higher priority to bins where the item fits relatively well.
    # Calculate a "fit ratio" (remaining space after fitting / original bin size).

    remaining_after_fit = bins_remain_cap - item
    fit_ratio = remaining_after_fit / bins_remain_cap #Larger space remaining after fitting means higher fit_ratio

    # Emphasize bins that have relatively good fit
    priorities[does_fit] = fit_ratio[does_fit] + 1e-6 * bins_remain_cap[does_fit] # small addition in bin capacity to favour bins with larger space

    return priorities
```
