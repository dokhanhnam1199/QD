import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fill_ratio_weight: float = 0.13151432808624391,
                 randomization_scale: float = 0.04541858875370476, empty_penalty_scale: float = 0.001255240405725797,
                 almost_full_threshold: float = 0.025003070704707434, almost_full_bonus: float = 0.0018564328125010477) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, controlled randomization, and adaptive penalties."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf  # All bins are infeasible

    # Waste minimization with non-linear penalty
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2 #non-linear penalty

    # Adaptive fill ratio bonus
    fill_ratio_after = item / (bins_remain_cap[feasible_bins])
    priorities[feasible_bins] += fill_ratio_after * fill_ratio_weight

    # Controlled randomization, scaled by (1 - item_scale)
    item_scale = item / bins_remain_cap.max()
    randomization_factor = randomization_scale * (1 - item_scale)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor
    
    #Adaptive bin-emptiness penalty
    empty_penalty = (bins_remain_cap / bins_remain_cap.max())[feasible_bins]
    priorities[feasible_bins] -= empty_penalty * empty_penalty_scale # scale down

    # Bonus for bins nearing full capacity, reduced magnitude
    almost_full = (wasted_space[feasible_bins] / bins_remain_cap.max()) < almost_full_threshold
    priorities[feasible_bins][almost_full] += almost_full_bonus # smaller bonus.

    return priorities
