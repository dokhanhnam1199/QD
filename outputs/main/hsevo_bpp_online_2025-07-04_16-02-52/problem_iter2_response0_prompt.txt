{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):  # At least one bin can fit the item\n        # Prioritize bins that leave the least waste (smallest remaining capacity *after* packing)\n        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)  # inf for bins that cannot fit\n\n        # Find the minimum remaining capacity after packing, considering *only* the bins that can fit.  Important!\n        min_remaining_cap = np.min(remaining_capacities_after_packing)\n\n\n        # A higher score means the item is preferable for packing the current item\n        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap) # Smaller waste = higher priority\n        priorities[~valid_bins] = -np.inf  # Never choose bins that can't fit\n        #Boosting by the relative remaining capacity - small improvement in packing, but important\n\n        #Boosting if almost full: encourages filling nearly full bins, can free up bins later.\n        priorities[valid_bins] += (bins_remain_cap[valid_bins]/np.max(bins_remain_cap))*0.1  #Adding scaling parameter\n    else:\n        # No bin can fit - should never happen with unlimited bin creation in online bin packing, but good to handle edge cases.\n        # Should ideally create a new bin, but that's handled outside this function.  Return all negative infinity.\n        priorities[:] = -np.inf\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., 0).  Avoid -inf when the item is larger than bin\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the fill ratio: how much of the bin will be filled by the item.\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit\n\n    # Prefer bins where the item fits reasonably well (high fill_ratio)\n    # but avoid filling the bin completely (reducing fragmentation).\n    # We add a capacity bonus as the remain cap increases but penalize as the gap gets really small\n    suitable_bins = bins_remain_cap >= item\n    capacity_bonus = (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)\n    gap_penalty = np.exp(-50*(bins_remain_cap-item)**2) # a quick drop when item gets too close. Tune 50 parameter to change this\n    priorities[suitable_bins] = fill_ratio[suitable_bins] + capacity_bonus[suitable_bins] - gap_penalty[suitable_bins]\n\n    # Assign a very small penalty for bins where the item doesn't fit (discourage, but don't eliminate)\n    priorities[bins_remain_cap < item] = -0.001\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st heuristic directly calculates the `min_remaining_cap` among valid bins and prioritizes bins based on their proximity to this minimum, also incorporating a small bonus for bins that are almost full and using numpy operations, leading to a more efficient and potentially better packing strategy. The 20th heuristic uses a \"potential energy\" and \"tunneling\" analogy, which might be less direct and less effective in practice due to the specific formulation of the energy and tunneling terms. Also the 1st heuristic is more concise.\n\nComparing (2nd) vs (19th), the 2nd heuristic prioritizes bins based on the inverse of remaining space and assigns very low priority to bins where the item doesn't fit, using a loop-based approach. The 19th heuristic tries to apply more complex calculations.\n\nComparing (3rd) vs (4th), the 3rd uses a simpler logic assigning priorities and extra weights to the fit items. The 4th uses the inverse of remaining space.\n\nComparing (second worst) vs (worst), the 19th and 20th heuristics are near identical.\n\nOverall: The better heuristics use numpy operations to achieve better efficiency. They calculate remaining capacities and derive priority based on capacity. More complex heuristics do not guarantee better performance.\n- \nOkay, here's a refined concept of \"Current Self-Reflection\" tailored for designing better packing heuristics, steering clear of potential pitfalls:\n\n*   **Keywords:** Capacity-focused, Computationally Efficient, Adaptive Exploration, Iterative Refinement.\n\n*   **Advice:** Emphasize quick capacity checks, explore simple randomization for diversification, and design for incremental improvement through iterative testing.\n\n*   **Avoid:** Overly complex strategies, analogies without clear performance benefits, and premature optimization.\n\n*   **Explanation:** Focus on rapid evaluation and adaptation based on remaining space. Simple, fast heuristics, combined with controlled randomness, allow efficient exploration and iterative refinement through experimentation.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}