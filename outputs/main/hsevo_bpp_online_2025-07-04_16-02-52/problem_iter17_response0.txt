```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive randomization, and bin fullness reward."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with non-linear penalty.
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Adaptive fill ratio bonus scaled by item size.
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / bins_remain_cap.max()
    priorities[feasible_bins] += fill_ratio_after * 0.2 * item_scale
    
    # Adaptive randomization. Higher randomness for smaller occupancy bins.
    randomization_strength = 0.05 * item_scale * (1 - bins_remain_cap[feasible_bins] / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # Bonus for bins nearing full capacity, stronger when the item is large.
    almost_perfect_fit = np.exp(-wasted_space[feasible_bins] * 5 / item)
    priorities[feasible_bins] += almost_perfect_fit * 0.05

    return priorities
```
