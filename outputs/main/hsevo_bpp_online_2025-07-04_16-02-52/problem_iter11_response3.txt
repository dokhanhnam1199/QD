```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using waste, fill ratio, controlled randomization, adaptive penalties, and near-full bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf  # All bins are infeasible

    # Waste minimization with non-linear penalty
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Adaptive fill ratio bonus, increased magnitude
    fill_ratio_after = item / (bins_remain_cap[feasible_bins])
    priorities[feasible_bins] += fill_ratio_after * 0.3

    # Controlled randomization, scaled by item size and remaining capacity
    item_scale = item / bins_remain_cap.max()
    randomization_strength = 0.1 * item_scale * (bins_remain_cap.max() - bins_remain_cap[feasible_bins]) / bins_remain_cap.max()
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength
    
    # Adaptive bin-emptiness penalty
    empty_penalty = (bins_remain_cap / bins_remain_cap.max())[feasible_bins]
    priorities[feasible_bins] -= empty_penalty * 0.01

    # Bonus for bins nearing full capacity, reduced magnitude
    almost_full = (wasted_space[feasible_bins] / bins_remain_cap.max()) < 0.05
    priorities[feasible_bins][almost_full] += 0.01

    return priorities
```
