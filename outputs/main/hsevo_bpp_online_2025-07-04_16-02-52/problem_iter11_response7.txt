```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and emptiness penalty.
    Scales randomization and bonuses based on item size and bin capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[bins_remain_cap < item] = -np.inf

    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Best-fit with non-linear penalty
    priorities[feasible_bins] = -wasted_space[feasible_bins]**2 / bins_remain_cap.max()

    # Adaptive fill ratio bonus
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    item_scale = item / bins_remain_cap.max()
    fill_bonus_weight = 0.2 + 0.3 * item_scale
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * fill_bonus_weight

    # Adaptive Randomization - scaled by item and bin capacity
    randomization_strength = 0.05 * item_scale * (bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength[feasible_bins]

    # Adaptive bin-emptiness penalty
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item_scale)
    empty_bin_penalty_weight = 0.03
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight
    
    # Near full bonus
    almost_full = (wasted_space / bins_remain_cap.max() < 0.05) & feasible_bins
    priorities[almost_full] += 0.1

    return priorities
```
