```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and bin usage awareness with adaptive parameters."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = -wasted_space[valid_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[valid_bins] += fill_ratio_after[valid_bins] * 0.3  # Increased fill ratio influence

    # Adaptive randomization: More randomization for smaller items and fuller bins
    randomization_strength = 0.05 * item * (1 - np.mean(bins_remain_cap) / bins_remain_cap.max()) #Scale randomization based on average bin fullness
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * randomization_strength

    # Bin usage penalty: Penalize using almost empty bins, adjusted by item size
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * item 
    priorities[valid_bins] -= empty_bin_penalty[valid_bins] * 0.1 # Reduced penalty strength

    # Bonus for bins that, after placement, have remaining capacity close to the mean
    mean_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item] - item) if np.any(bins_remain_cap >= item) else 0
    proximity_to_mean = np.abs(wasted_space - mean_remaining) / bins_remain_cap.max()
    priorities[valid_bins] += (1 - proximity_to_mean[valid_bins]) * 0.1  # Reward bins close to mean

    return priorities
```
