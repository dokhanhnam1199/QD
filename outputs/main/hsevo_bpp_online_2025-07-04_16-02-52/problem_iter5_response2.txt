```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on minimal waste and a fill ratio bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    does_fit = bins_remain_cap >= item
    
    if np.any(does_fit):
        remaining_space = bins_remain_cap[does_fit] - item
        
        # Prioritize small remain space
        priorities[does_fit] = 1 / (remaining_space + 0.001)
        
        # Fill ratio bonus: favors bins that are already quite full
        fill_ratio = (bins_remain_cap[does_fit] - remaining_space) / bins_remain_cap[does_fit]
        priorities[does_fit] += fill_ratio
        
        # Small random noise for exploration
        priorities[does_fit] += np.random.normal(0, 0.01, size=np.sum(does_fit))
    else:
        priorities[:] = -1e9  # Item doesn't fit, very low priority
    return priorities
```
