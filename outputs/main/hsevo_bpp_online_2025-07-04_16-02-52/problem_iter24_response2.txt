```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Advanced adaptive heuristic for online bin packing, emphasizing balanced optimization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # 1. Waste Minimization with Dynamic Scaling:
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    waste_ratio = wasted_space[feasible_bins] / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] -= (waste_ratio**1.5) * (item / np.max(bins_remain_cap))  # Non-linear penalty

    # 2. Fill Ratio Optimization with State Awareness:
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    item_scale = item / np.max(bins_remain_cap)
    bin_fullness = 1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)

    # Adaptive scaling based on average bin occupancy
    average_occupancy = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap))
    fill_ratio_bonus_weight = 0.2 + 0.4 * average_occupancy  # More weight when bins are full
    priorities[feasible_bins] += fill_ratio_after * fill_ratio_bonus_weight * item_scale * (1 + bin_fullness)

    # 3. Controlled Randomization with Temperature:
    temperature = 1 - average_occupancy # Higher temperature when bins are empty (more exploration)
    randomization_strength = 0.03 * item_scale * temperature * (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap))
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength

    # 4. Empty Bin Strategy: Discourage if bins are mostly full
    empty_bin_penalty = (bins_remain_cap / np.max(bins_remain_cap)) * (1 - item / np.max(bins_remain_cap))
    empty_bin_penalty_weight = 0.01 + 0.04 * average_occupancy #Increase penalty as bins fill.
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # 5. "Almost Full" Bin Incentive:
    wasted_space_after = bins_remain_cap[feasible_bins] - item
    almost_full_threshold = 0.03 * np.max(bins_remain_cap)
    almost_full = wasted_space_after <= almost_full_threshold
    priorities[feasible_bins][almost_full] += 0.15  # Stronger incentive

    #6. Item Size Sensitive Adjustment
    large_item_threshold = 0.7 * np.max(bins_remain_cap)
    if item > large_item_threshold:
        #For large items, prioritize bins with more space and less fill
        space_priority = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
        fill_priority = 1 - bin_fullness
        priorities[feasible_bins] += 0.1 * (space_priority + fill_priority)

    return priorities
```
