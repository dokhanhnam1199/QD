```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Give a very high priority to bins that can fit the item almost perfectly
    perfect_fit_threshold = 0.95
    perfect_fit_bonus = 1000
    
    # Give a bonus for bins that can fit the item
    fit_bonus = 100
    
    # Penalize bins that can't fit the item
    penalty = -1000
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            if item / cap >= perfect_fit_threshold:
                priorities[i] = perfect_fit_bonus + (item / cap) # Added the ratio in to make sure we add in bins with lowest capacity, the perfect ratio
            else:
                priorities[i] = fit_bonus + (item / cap)
        else:
            priorities[i] = penalty
            
    return priorities
```
