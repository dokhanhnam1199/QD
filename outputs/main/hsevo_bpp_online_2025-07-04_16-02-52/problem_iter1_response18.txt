```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits, giving preference to bins
    that would have the least amount of space left over. If the item doesn't
    fit, it penalizes the bin based on how much the item exceeds the remaining
    capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Item fits: higher priority for less remaining space *after* placing the item.
            priorities[i] = cap - item  # Remaining space after placing the item
            priorities[i] = -priorities[i] # The smaller remaining space is, the more priority.
            priorities[i] += 10 # Give fit items extra weight.
        else:
            # Item does not fit: penalize based on how much item exceeds the capacity.
            priorities[i] = cap - item #negative number of exceeding size
    return priorities
```
