```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptively combines best-fit, fill ratio, diversity, and penalizes nearly full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[bins_remain_cap < item] = -np.inf

    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Fill ratio bonus, adaptive to item size and bin utilization.
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    adaptive_fill_bonus = fill_ratio_after * (0.2 + 0.1 * (item / bins_remain_cap.max()))
    priorities[feasible_bins] += adaptive_fill_bonus[feasible_bins]

    # Encourage using bins with diverse fill levels.
    if np.sum(feasible_bins) > 1:
        avg_remaining_cap = np.mean(bins_remain_cap[feasible_bins])
        diversity_bonus = np.abs(bins_remain_cap - avg_remaining_cap) / bins_remain_cap.max()
        priorities[feasible_bins] += diversity_bonus[feasible_bins] * 0.05

    # Penalize bins with very small remaining capacity
    almost_full_penalty = np.where(bins_remain_cap < 1.1*item, (1-(bins_remain_cap/ (1.1*item))),0)
    priorities[feasible_bins] -= almost_full_penalty[feasible_bins] * 0.1

    # Adaptive randomization based on item size and bin capacity.
    randomization_strength = 0.05 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength[feasible_bins]

    return priorities
```
