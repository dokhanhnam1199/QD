```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, adaptive fill ratio, and empty bin penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - np.inf

    # Waste minimization with non-linear penalty
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf
    priorities[feasible_bins] -= (wasted_space[feasible_bins] / bins_remain_cap.max())**2

    # Adaptive fill ratio bonus
    fill_ratio_after = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_ratio_after * 0.3

    # Adaptive bin-emptiness penalty
    average_occupancy = 1 - np.mean(bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty_weight = 0.02 + 0.08 * average_occupancy
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * empty_bin_penalty_weight

    # Bonus for almost full bins
    almost_full_bins = bins_remain_cap < 1.1 * item
    almost_full_bins_feasible = feasible_bins & almost_full_bins
    if np.any(almost_full_bins_feasible):
      priorities[almost_full_bins_feasible] += 0.1 * (1 - (bins_remain_cap[almost_full_bins_feasible] / (1.1*item)))

    return priorities
```
