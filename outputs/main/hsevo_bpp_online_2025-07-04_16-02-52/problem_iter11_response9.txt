```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space, fill ratio, randomization, diversity and prevents early commitment."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space
    wasted_space = bins_remain_cap - item

    # Prioritize based on wasted space (smaller waste is better)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins] / bins_remain_cap.max()
    
    # Fill ratio bonus, adaptive to the item size and bin capacity
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    adaptive_fill_bonus = fill_ratio_after * (0.2 + 0.1 * (item / bins_remain_cap.max()))
    priorities[feasible_bins] += adaptive_fill_bonus[feasible_bins]

    # Adaptive Randomization: More randomization for smaller items and fuller bins
    randomization_strength = 0.05 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_strength[feasible_bins]

    # Bin Diversity Bonus: Encourage using bins with diverse fill levels.
    if np.sum(feasible_bins) > 1:
        avg_remaining_cap = np.mean(bins_remain_cap[feasible_bins])
        diversity_bonus = np.abs(bins_remain_cap - avg_remaining_cap) / bins_remain_cap.max()
        priorities[feasible_bins] += diversity_bonus[feasible_bins] * 0.05
        
    # Prevent early commitment to bins that are almost full. Penalize bins with very small remaining capacity
    almost_full_penalty = np.where(bins_remain_cap < 1.1*item, (1-(bins_remain_cap/ (1.1*item))),0) #apply the penalty only if the bin is almost full
    
    
    priorities[feasible_bins] -= almost_full_penalty[feasible_bins] * 0.1 # scaled by a factor of 0.1 for balance.

    return priorities
```
