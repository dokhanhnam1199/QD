import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fill_ratio_weight: float = 0.102755871761405) -> np.ndarray:
    """Prioritizes bins based on waste and fill ratio, efficiently."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        remaining_capacities_after_packing = np.where(valid_bins, bins_remain_cap - item, np.inf)
        min_remaining_cap = np.min(remaining_capacities_after_packing)

        priorities = -np.abs(remaining_capacities_after_packing - min_remaining_cap)
        priorities[~valid_bins] = -np.inf
        fill_ratio = item / bins_remain_cap
        fill_ratio[bins_remain_cap < item] = 0  # Set ratio to 0 if the item doesn't fit

        priorities[valid_bins] += fill_ratio[valid_bins] * fill_ratio_weight

    else:
        priorities[:] = -np.inf

    return priorities
