```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough space
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
      # If no eligible bin exists, return a small non-zero priority to indicate any bin.
      return np.full_like(bins_remain_cap, 1e-6)

    # 1. Best Fit heuristic: Prioritize bins that leave the least space.
    residual_capacities = bins_remain_cap - item
    residual_capacities[~eligible_bins] = np.inf  # Exclude non-eligible bins

    min_residual = np.min(residual_capacities)
    best_fit_bins = np.isclose(residual_capacities, min_residual) #account for ties

    priorities[best_fit_bins] += 1.0

    # 2. Try to avoid fragmentation: bins near full should be prioritized after Best Fit.
    # A non-linear bonus is added, meaning the fuller the bin is before the item, the higher
    # the reward is for filling it more, compared to a relatively empty bin.

    fullness = bins_remain_cap / np.max(bins_remain_cap) #scale from 0 to 1 based on capacity

    priorities[eligible_bins] += np.power(fullness[eligible_bins],2)

    #3 Avoid selecting bins if it will lead to small remainders after allocation. This will cause increased fragmentation.
    too_small = (residual_capacities>0) & (residual_capacities < (np.max(bins_remain_cap)*0.1))
    priorities[too_small] -= 0.5

    #4 Add a small random component for exploration and to break symmetry
    priorities[eligible_bins] += np.random.uniform(0, 0.1, size=np.sum(eligible_bins))

    return priorities
```
