```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very small remaining capacity is penalized heavily
    priorities[bins_remain_cap < 0.001] = -np.inf

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Prioritize bins that can fit the item
    can_fit = remaining_after_add >= 0
    
    # If no bin can fit the item, prioritize the least filled bin
    if not np.any(can_fit):
        priorities = -bins_remain_cap
        return priorities
    
    
    #For bins that can fit, the fuller the bin the higher the priority
    priorities[can_fit] = bins_remain_cap[can_fit]

    # Adding a bonus to bins that fit almost exactly, encouraging full bins
    almost_full = (remaining_after_add >= 0) & (remaining_after_add <= 0.1)
    priorities[almost_full] += 5  # A bonus for almost full bins
    
    return priorities
```
