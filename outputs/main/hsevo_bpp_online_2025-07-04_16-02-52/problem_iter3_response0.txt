```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space.
    wasted_space = bins_remain_cap - item

    # Primary priority: Minimize wasted space.  Slight change: exponentiate wasted space to penalize larger waste more.
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]**2

    # Bonus for bins that are already somewhat full. Increase the bonus weight.
    priorities[bins_remain_cap >= item] += (1 - bins_remain_cap[bins_remain_cap >= item]) * 0.25

    # Introduce a small amount of randomness to avoid getting stuck in local minima.
    # The scale of randomness is adaptive based on the item size; smaller items get smaller random adjustments.
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * 0.05 * item

    # Further prioritize bins close to the item size without exceeding it significantly.
    # This encourages a better "fit" and reduces fragmentation.
    near_fit = (bins_remain_cap >= item) & (wasted_space <= item * 0.2)  # Waste is <= 20% of item size
    priorities[near_fit] += 0.15 #Give them a slight bonus
    
    return priorities
```
