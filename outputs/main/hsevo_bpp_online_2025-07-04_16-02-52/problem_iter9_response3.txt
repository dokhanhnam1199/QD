```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, fill ratio, adaptive randomization, and bin diversity for bin prioritization.
    This version dynamically adjusts parameters based on item size and bin capacities.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = -wasted_space[feasible_bins]
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement, adaptively scaled
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    fill_bonus_scale = min(0.3, item / bins_remain_cap.max())  # Smaller items get a slightly larger fill bonus
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * fill_bonus_scale

    # Adaptive randomization based on item size and bin availability
    num_feasible = np.sum(feasible_bins)
    if num_feasible > 0:
        randomization_scale = 0.02 * item * (1 + np.log1p(num_feasible))  # More options, more exploration
        priorities[feasible_bins] += np.random.rand(num_feasible) * randomization_scale

    # Penalize bins that are too empty, adaptive penalty
    empty_bin_ratio = bins_remain_cap / bins_remain_cap.max()
    empty_bin_penalty_scale = min(0.1, 1/(1+item)) # Scale back penalty for very small items
    priorities[feasible_bins] -= empty_bin_ratio[feasible_bins] * empty_bin_penalty_scale

    # Bin Diversity bonus: give a slight bonus to bins with capacities furthest from mean capacity
    mean_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) # Ignore empty bins when calculating the mean
    if mean_capacity > 0: #Avoid dividing by zero if all bins are empty
        capacity_deviation = np.abs(bins_remain_cap - mean_capacity) / bins_remain_cap.max()
        diversity_bonus_scale = 0.01 * (1 + np.log1p(item)) # Give slighly larger bonus for larger items
        priorities[feasible_bins] += capacity_deviation[feasible_bins] * diversity_bonus_scale

    return priorities
```
