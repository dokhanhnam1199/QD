```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and adaptive penalties
    for bin prioritization.  Adapts randomization based on item size relative to bin size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2

    # Adaptive Randomization: Scale randomization based on item size relative to bin size.
    # Smaller items in larger bins get more exploration, larger items get less.
    relative_size = item / bins_remain_cap[feasible_bins]
    randomization_scale = 0.1 * (1 - relative_size)  # range from 0 to 0.1
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_scale * item

    # Adaptive Empty Bin Penalty: Penalize bins that are too empty, adjust the penalty
    # based on the average fill level of all bins.  If bins are generally full,
    # be more lenient with nearly empty bins.
    average_fill = np.mean(1 - bins_remain_cap / bins_remain_cap.max())
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    penalty_scale = 0.05 * (1 - average_fill)  # Reduce penalty if bins are mostly full.
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * penalty_scale

    # Reward bins close to full before insertion
    current_fill_ratio = 1 - bins_remain_cap / bins_remain_cap.max()
    priorities[feasible_bins] += current_fill_ratio[feasible_bins] * 0.05

    return priorities
```
