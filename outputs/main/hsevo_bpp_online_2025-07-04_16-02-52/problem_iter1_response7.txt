```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Feynman's heuristic: A blend of best-fit, first-fit, and a dash of quantum randomness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Best Fit Tendency (Attractive Potential)
    residual_space = bins_remain_cap - item
    best_fit_priority = np.where(residual_space >= 0, np.exp(-np.abs(residual_space)), -np.inf) # exponential decay towards a perfect fit. Infeasible bins get -inf

    # 2. First Fit Influence (Kinetic Energy Term)
    first_fit_priority = np.arange(len(bins_remain_cap), 0, -1) # Give earlier bins a slight edge if they fit.

    # 3. Capacity Consideration (Potential Well)
    capacity_priority = bins_remain_cap / np.sum(bins_remain_cap)  # Bins with more capacity are slightly preferred

    # 4. Quantum Randomness (Tunneling Probability) - Adds Exploration
    random_noise = np.random.normal(0, 0.01, len(bins_remain_cap))  # small random fluctuations

    # 5. Combine the Priorities (Superposition of States)
    priorities = best_fit_priority + 0.5 * first_fit_priority + 0.1 * capacity_priority + random_noise

    return priorities
```
