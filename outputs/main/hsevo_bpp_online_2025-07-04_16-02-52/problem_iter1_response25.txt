```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after adding the item.
    remaining_capacities = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = remaining_capacities >= 0

    # Assign high priority to bins with small remaining capacity after packing,
    # but only if they can fit the item. This encourages fuller bins.
    priorities[valid_bins] = 1 / (remaining_capacities[valid_bins] + 1e-6)  # Add a small constant to avoid division by zero

    # Give a slight bonus to bins that are almost full to begin with. This encourages
    # closing out bins.  Prioritize bins with high initial fill ratios if they can fit.
    initial_fill_ratios = (1 - bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)

    priorities[valid_bins] += initial_fill_ratios[valid_bins] * 0.5 # Scale fill ratio effect

    # Slightly penalize bins with significantly more capacity than the item, as they are not a good fit.
    capacity_difference = bins_remain_cap - item
    relatively_large_capacity = (capacity_difference > (2 * item)) & valid_bins
    priorities[relatively_large_capacity] -= 0.2

    return priorities
```
