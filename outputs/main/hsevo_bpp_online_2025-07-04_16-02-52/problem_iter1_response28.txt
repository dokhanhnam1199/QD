```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic: Prioritize bins where the item fits and leaves the least waste.
    # If item doesn't fit, assign a very low priority.

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining space after adding the item.
            remaining_space = cap - item
            # Give higher priority to bins with smaller remaining space, but not zero to avoid numerical issues.
            priorities[i] = 1 / (remaining_space + 0.001)  # Inverse of remaining space
        else:
            # Item doesn't fit; very low priority.
            priorities[i] = -1e9  # A very large negative number to penalize infeasibility

    return priorities
```
