```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, fill ratio, wasted space, and dynamic randomization for bin prioritization.
    This version focuses on a more adaptive randomization and wasted space management.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get the lowest priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize based on wasted space (smaller waste is better)
    # Using a non-linear transformation to penalize larger wasted space more heavily
    priorities[bins_remain_cap >= item] = -wasted_space[bins_remain_cap >= item]**2 / bins_remain_cap.max()
    
    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] += fill_ratio_after[bins_remain_cap >= item] * 0.3  # Slightly increased fill ratio weight
    
    # Adaptive Randomization: Reduce randomization as bins become fuller.
    # The fuller the bins are, the less randomization we want to encourage exploitation.
    randomization_strength = 0.1 * item * (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    priorities[bins_remain_cap >= item] += np.random.rand(np.sum(bins_remain_cap >= item)) * randomization_strength[bins_remain_cap >= item]
    
    # Penalize bins that are too empty, but reduce the penalty as item size increases
    # Helps prevent always filling smallest bins first, especially when large items arrive.
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max()) * (1 - item / bins_remain_cap.max())
    priorities[bins_remain_cap >= item] -= empty_bin_penalty[bins_remain_cap >= item] * 0.03 # Slightly reduced empty bin penalty
    
    # Bonus for bins that fit the item almost perfectly (small waste)
    almost_perfect_fit = np.exp(-wasted_space[bins_remain_cap >= item] * 5 / item) # Sharp peak around small waste
    priorities[bins_remain_cap >= item] += almost_perfect_fit * 0.1
    
    return priorities
```
