```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, controlled randomization, and bin diversity for bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get lowest priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Prioritize based on wasted space (smaller waste is better)
    priorities[feasible_bins] = -wasted_space[feasible_bins]

    # Encourage filling bins, bonus based on fill ratio AFTER placement
    fill_ratio_after = (1 - wasted_space / bins_remain_cap.max())
    priorities[feasible_bins] += fill_ratio_after[feasible_bins] * 0.2

    # Add a small amount of randomization, scaled by item size, for exploration, and reduce over time as more items are packed
    num_items_packed = np.sum(bins_remain_cap < bins_remain_cap.max())  # crude proxy. Could be refined if necessary.
    randomization_factor = max(0.01, 0.05 - num_items_packed * 0.0001) # Decay randomization
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * randomization_factor * item

    # Penalize bins that are too empty, but make the penalty dynamic and less aggressive
    empty_bin_penalty = (bins_remain_cap / bins_remain_cap.max())
    priorities[feasible_bins] -= empty_bin_penalty[feasible_bins] * 0.02  # Reduced penalty

    # Bin Diversity Bonus: Give a small bonus to bins with very different fill levels to encourage exploration.

    if np.sum(feasible_bins) > 1: # Only apply if there's more than one option
        fill_levels = bins_remain_cap[feasible_bins] / bins_remain_cap.max()
        fill_level_std = np.std(fill_levels)

        priorities[feasible_bins] += fill_level_std * 0.03  # encourage diversity, small weight

    return priorities
```
