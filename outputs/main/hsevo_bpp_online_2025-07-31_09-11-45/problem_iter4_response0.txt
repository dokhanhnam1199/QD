import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    eps_fill: float = 3.994701447986276e-07,
    eps_residual: float = 2.3510843011108968e-07,
    atol_perfection: float = 5.422500394179024e-06,
    perfection_bonus_weight: float = 2.812461784777218) -> np.ndarray:
    """Balances immediate tight packing (item/remaining_ratio) with future 
    flexibility (sqrt residual space), using geometric mean for synergy."""
    
    remaining_after = bins_remain_cap - item
    valid_mask = remaining_after >= 0
    
    fill_efficiency = item / (bins_remain_cap + eps_fill)
    residual_potential = np.sqrt(np.maximum(remaining_after, 0) + eps_residual)
    synergy_score = np.sqrt(fill_efficiency * residual_potential)
    perfection_bonus = np.isclose(remaining_after, 0, atol=atol_perfection) * perfection_bonus_weight
    scores = np.where(valid_mask, synergy_score + perfection_bonus, -np.inf)
    
    return scores
