{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Balances immediate tight packing (item/remaining_ratio) with future \n    flexibility (sqrt residual space), using geometric mean for synergy.\"\"\"\n    \n    remaining_after = bins_remain_cap - item\n    valid_mask = remaining_after >= 0\n    \n    # Core efficiency metric: item fills current bin proportion\n    fill_efficiency = item / (bins_remain_cap + 1e-9)  # +eps prevents div0\n    \n    # Flexibility metric: sqrt residual space allows mid-sized future items\n    residual_potential = np.sqrt(np.maximum(remaining_after, 0) + 1e-9)\n    \n    # Geometric mean creates balanced synergy between competing objectives\n    synergy_score = np.sqrt(fill_efficiency * residual_potential)\n    \n    # Precision-aware exact fit bonus (better than ==0 for floating point)\n    perfection_bonus = np.isclose(remaining_after, 0, atol=1e-8) * 2.0\n    \n    # Combine components only for valid bins\n    scores = np.where(valid_mask, synergy_score + perfection_bonus, -np.inf)\n    \n    return scores\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n<think>\nOkay, let's tackle this. The user wants to redefine 'Current self-reflection' for designing better heuristics, making sure to avoid the ineffective aspects mentioned. The existing effective heuristics include things like balancing tight packing with flexibility, handling floating precision, smooth gradients, multiplicative factors for independence, and using physics/math metaphors.\n\nFirst, I need to identify what's missing in the current self-reflection. The ineffective part isn't listed, but maybe the current points could be too rigid. For example, using only multiplicative combinations when factors are independent might limit some scenarios where a different combination could work better. Also, relying solely on physics/math metaphors might exclude other useful analogies that are still interpretable.\n\nNext, the advice should build on the current strengths but address potential gaps. Maybe emphasize dynamic adaptation instead of fixed ratios. Also, ensuring that even if factors aren't perfectly independent, there's a way to combine them without forcing multiplication. Testing heuristic robustness under varying conditions could be another point. And while metaphors are good, grounding them in empirical validation would make them more reliable.\n\nAvoiding things like static ratios, over-reliance on independence assumptions, neglecting empirical checks, and forcing metaphors that don't fit. The explanation should tie these together, showing how the new advice leads to more adaptable and robust heuristics without the pitfalls of the old approach.\n</think>\n\n**Keywords**: Dynamic adaptation, empirical validation, dimensional synergy, constraint robustness  \n**Advice**: 1) Replace fixed ratios with *adaptive thresholds* that evolve with problem scale 2) Test heuristics under *extreme precision edge cases* (e.g., near-zero values) 3) Quantify independence between factors before choosing combination operators 4) Use metaphors only when they enable *actionable geometric intuition*.  \n**Avoid**: Static \"golden ratios\", blind multiplicative blending, assuming dimension independence without proof, poetic analogies without operational mappings.  \n**Explanation**: Enhances adaptability through responsive thresholds while maintaining rigor via stress-testing and explicit dependency analysis. Metaphors become tools rather than dogma when tied to verifiable spatial reasoning.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}