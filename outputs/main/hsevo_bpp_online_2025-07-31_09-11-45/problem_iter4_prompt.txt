{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances immediate tight packing (item/remaining_ratio) with future \n    flexibility (sqrt residual space), using geometric mean for synergy.\"\"\"\n    \n    remaining_after = bins_remain_cap - item\n    valid_mask = remaining_after >= 0\n    \n    # Core efficiency metric: item fills current bin proportion\n    fill_efficiency = item / (bins_remain_cap + 1e-9)  # +eps prevents div0\n    \n    # Flexibility metric: sqrt residual space allows mid-sized future items\n    residual_potential = np.sqrt(np.maximum(remaining_after, 0) + 1e-9)\n    \n    # Geometric mean creates balanced synergy between competing objectives\n    synergy_score = np.sqrt(fill_efficiency * residual_potential)\n    \n    # Precision-aware exact fit bonus (better than ==0 for floating point)\n    perfection_bonus = np.isclose(remaining_after, 0, atol=1e-8) * 2.0\n    \n    # Combine components only for valid bins\n    scores = np.where(valid_mask, synergy_score + perfection_bonus, -np.inf)\n    \n    return scores\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}