{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid heuristic: Prioritizes exact fits, combines geometric mean of \n    tightness/utilization from v0 with v1's residual alignment bonus (simplified).\"\"\"\n    remaining_space = bins_remain_cap - item\n    exact_fit = np.isclose(remaining_space, 0, atol=1e-9)\n    valid = remaining_space >= 0\n    \n    # Core geometric mean calculation from v0\n    tightness = 1 / (np.abs(remaining_space) + 1e-9)\n    utilization = 1 / (bins_remain_cap + 1e-9)\n    combined_score = np.sqrt(tightness * utilization)\n    \n    # Simplified residual alignment from v1: Encourage space matching item size\n    alignment_bonus = 0.15 * np.exp(-np.abs(remaining_space - item)/(item + 1e-9))\n    \n    priorities = np.where(\n        exact_fit,\n        np.inf,  # Absolute priority for perfect fits\n        np.where(\n            valid,\n            combined_score + alignment_bonus,  # Balanced core + alignment bonus\n            -np.inf  # Exclude invalid bins\n        )\n    )\n    \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}