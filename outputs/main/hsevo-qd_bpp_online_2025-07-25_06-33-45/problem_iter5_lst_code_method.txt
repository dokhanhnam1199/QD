{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity and the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / item))\n    \n    # Calculate the priority score as a weighted combination of the factors\n    # Weigh the ratio and difference equally, and give a smaller weight to the penalty term\n    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - 0.1 * penalty)\n    \n    return priority_score\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by remaining capacity and item size ratio.\n    \"\"\"\n    # calculate the absolute difference between the remaining capacity of each bin and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # calculate the priority score as the inverse of the difference and consider remaining capacity\n    priority_score = (bins_remain_cap / (diff + 1e-9))  # add a small value to avoid division by zero\n    \n    return priority_score\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, zero_threshold: float = 0.1552355213904086, large_value: float = 1814522.5017972165, half_full_threshold: float = 0.4754306923908357) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and item size considerations.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Create a mask where the item can fit into the bin\n    can_fit = diff >= zero_threshold\n    \n    # Set the priority to 0 for bins that cannot accommodate the item\n    priorities = np.where(can_fit, diff, zero_threshold)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Calculate the final priorities, combining remaining capacity and item size considerations\n    # Higher priorities for bins with just enough capacity and higher normalized capacities\n    priorities = np.where(can_fit, \n                          1 / (1 + np.abs(priorities)) * normalized_caps, \n                          np.zeros_like(normalized_caps))\n    \n    # Subtract a large value from the priorities of bins that are more than half full\n    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > half_full_threshold), \n                          priorities - large_value, \n                          priorities)\n    \n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity to the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # calculate the ratio of the remaining capacity to the item size\n    ratio = bins_remain_cap / item\n    \n    # calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / item))\n    \n    # calculate the priority score as a weighted sum of the ratio and difference, with a penalty term\n    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - penalty * 0.5)\n    \n    # add a small bonus for bins that are exactly the right size\n    bonus = np.where(np.isclose(bins_remain_cap, item), 1e6, 0)\n    \n    # return the final priority score\n    return priority_score + bonus\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity and the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / item))\n    \n    # Calculate the priority score as a weighted combination of the ratio and difference\n    priority_score = (1 / (diff + 1e-9)) * np.exp(-penalty) * (1 + 1 / (ratio + 1e-9))\n    \n    return priority_score\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines elements of previous heuristics for better performance.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the absolute difference between each bin's remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Create a priority score array based on the remaining capacity and difference\n    # This favors bins with more remaining capacity but also considers the ratio of item size to remaining capacity\n    priority = bins_remain_cap / (diff + 1e-6)  # Adding a small value to avoid division by zero\n    \n    # Give a moderate priority to bins where the item would leave some space\n    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the final priority as a weighted sum\n    priorities = 2.0 * exact_fit + 0.5 * priority + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and item size considerations.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Create a mask where the item can fit into the bin\n    can_fit = diff >= 0\n    \n    # Set the priority to 0 for bins that cannot accommodate the item\n    priorities = np.where(can_fit, diff, 0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Calculate the final priorities, combining remaining capacity and item size considerations\n    # Higher priorities for bins with just enough capacity and higher normalized capacities\n    priorities = np.where(can_fit, \n                          1 / (1 + np.abs(priorities)) * normalized_caps, \n                          np.zeros_like(normalized_caps))\n    \n    # Subtract a large value from the priorities of bins that are more than half full\n    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > 0.5), \n                          priorities - np.max(priorities), \n                          priorities)\n    \n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity and the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / (item + 1e-9)))\n    \n    # Calculate the priority score as a combination of the ratio, difference, and penalty\n    priority_score = (1 / (diff + 1e-9)) * np.exp(-ratio) * (1 - penalty)\n    \n    # Apply a tie-breaker to prioritize bins with more remaining capacity\n    priority_score *= bins_remain_cap + 1e-9\n    \n    return priority_score\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity and the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / (item + 1e-9)))\n    \n    # Calculate the priority score as a combination of the ratio, difference, and penalty\n    priority_score = (1 / (diff + 1e-9)) * np.exp(-ratio) * (1 - penalty)\n    \n    # Apply a tie-breaker to prioritize bins with more remaining capacity\n    priority_score *= bins_remain_cap + 1e-9\n    \n    return priority_score\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity and the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / item))\n    \n    # Calculate the priority score as a weighted combination of the factors\n    # Weigh the ratio and difference equally, and give a smaller weight to the penalty term\n    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - 0.1 * penalty)\n    \n    return priority_score\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}