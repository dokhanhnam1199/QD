```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most available capacity, 
    normalizing the remaining capacity to emphasize large remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the normalized remaining capacities
    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Avoid division by zero when item size is zero
    if item == 0:
        return normalized_caps
    
    # Calculate the priorities based on the remaining capacities and item size
    priorities = np.where(bins_remain_cap >= item, normalized_caps, np.zeros_like(normalized_caps))
    
    return priorities
```
