```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity
    and magnets bins that have just enough space to fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    cap_diff = bins_remain_cap - item
    
    # Calculate the priority score based on the difference
    # Bins with remaining capacity closer to the item size get higher priority
    # Bins with remaining capacity that can just fit the item get even higher priority
    priority_score = (cap_diff >= 0).astype(int) * (1 / (1 + np.abs(cap_diff)))
    
    # Add an incentive for filling up bins that are almost full
    priority_score += (bins_remain_cap > 0).astype(int) * (1 - (bins_remain_cap / (bins Remain_cap.mean() + 1e-6)))
    
    # Return the priority score
    return priority_score
```
