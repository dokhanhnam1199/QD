```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Balance remaining capacity and utilization.
    """
    # Calculate the available space in each bin
    available_space = bins_remain_cap - item
    
    # Assign a high priority to bins that have just enough capacity to accommodate the item
    exact_fit_priority = np.where(available_space == 0, 1e6, 0)
    
    # Assign a priority to bins based on the available space and remaining capacity
    available_space_priority = 1 / (1 + np.maximum(available_space, 0))
    remaining_capacity_priority = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Combine the priorities, favoring exact fit, then available space, and finally remaining capacity
    priority_scores = available_space_priority + 0.1 * exact_fit_priority + 0.1 * remaining_capacity_priority
    
    # Ensure that bins that cannot accommodate the item have a priority of 0
    return np.where(bins_remain_cap >= item, priority_scores, 0)

# Example usage:
item_size = 5.0
bins_remaining_cap = np.array([10.0, 8.0, 12.0, 7.0])
priority_scores = priority_v2(item_size, bins_remaining_cap)
print(priority_scores)
```
