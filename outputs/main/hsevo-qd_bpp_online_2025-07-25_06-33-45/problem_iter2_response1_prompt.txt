{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has a remaining capacity that is closest to the item size, it gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # calculate the absolute difference between the remaining capacity of each bin and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # calculate the priority score as the inverse of the difference\n    priority_score = 1 / (diff + 1e-9)  # add a small value to avoid division by zero\n    \n    return priority_score\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing 1st vs 20th, we see that the first heuristic prioritizes bins based on the ratio of the remaining capacity and the item size, while the 20th heuristic favors bins with the most remaining capacity but also considers the ratio of item size to remaining capacity. \nComparing 2nd vs 19th, we see that the second heuristic favors bins that have just enough capacity to accommodate the item and bins with less remaining capacity, while the 19th heuristic favors bins with the most remaining capacity relative to the item size. \nComparing 3rd vs 18th, we see that the third heuristic prioritizes bins that can exactly fit the item and gives lower priority to bins that cannot hold the item, while the 18th heuristic favors bins with the most available capacity, normalizing the remaining capacity. \nOverall: Better heuristics consider multiple factors such as remaining capacity, item size, and bin utilization, while worse heuristics focus on a single aspect.\n- \nHere's a redefined 'Current self-reflection':\n* **Keywords**: Balance, Prioritization, Objective\n* **Advice**: Identify key factors, weigh their importance, and adjust heuristics accordingly\n* **Avoid**: Overemphasis on single objectives, neglect of trade-offs\n* **Explanation**: Effective heuristics require balancing competing objectives, considering multiple factors to achieve optimal outcomes, and avoiding pitfalls of overly narrow focus.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}