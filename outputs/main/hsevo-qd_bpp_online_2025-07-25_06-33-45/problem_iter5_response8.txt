```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, difference, and penalty with exact fit and partial fit considerations.
    """
    # Calculate the ratio of the remaining capacity and the item size
    ratio = bins_remain_cap / item
    
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate a penalty term for bins that are nearly full
    penalty = np.maximum(0, 1 - (bins_remain_cap / (item + 1e-9)))
    
    # Calculate the priority score as a combination of the ratio, difference, and penalty
    priority_score = (1 / (diff + 1e-9)) * np.exp(-ratio) * (1 - penalty)
    
    # Consider exact fit and partial fit
    exact_fit = np.where(bins_remain_cap - item == 0, 2.0, 0.0)
    partial_fit = np.where(bins_remain_cap - item > 0, 0.5, 0.0)
    
    # Combine priority scores with exact and partial fit considerations
    combined_priority = priority_score * (exact_fit + partial_fit + 1)
    
    # Apply a tie-breaker to prioritize bins with more remaining capacity
    combined_priority *= bins_remain_cap + 1e-9
    
    return combined_priority
```
