```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, difference, and penalty for priority scores.
    """
    # Calculate the ratio of the remaining capacity and the item size
    ratio = bins_remain_cap / item
    
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate a penalty term for bins that are nearly full
    penalty = np.maximum(0, 1 - (bins_remain_cap / item))
    
    # Calculate a bonus term for exact fit
    exact_fit = np.where(bins_remain_cap - item == 0, 1.0, 0.0)
    
    # Calculate the priority score as a weighted combination of the factors
    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - 0.1 * penalty) + 2.0 * exact_fit
    
    # Ensure the priority score is high for bins that can fit the item exactly
    priority_score = np.where(bins_remain_cap < item, -1.0, priority_score)
    
    return priority_score
```
