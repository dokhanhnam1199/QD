```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to 
    hold the item, to avoid splitting items across multiple bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate how much space would be left in each bin if the item is added
    remaining_space = bins_remain_cap - item
    
    # Give a high priority to bins where the item fills them exactly
    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)
    
    # Give a moderate priority to bins where the item would leave some space
    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)
    
    # Avoid using bins that are too small
    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)
    
    # Calculate the priority as a weighted sum
    priorities = 2.0 * exact_fit + partial_fit + invalid_bins
    
    # Ensure invalid bins have a lower priority than others
    priorities = np.where(priorities < 0, -1.0, priorities)
    
    return priorities
```
