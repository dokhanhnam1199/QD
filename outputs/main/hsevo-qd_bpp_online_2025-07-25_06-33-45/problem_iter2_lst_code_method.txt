{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has a remaining capacity that is closest to the item size, it gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # calculate the absolute difference between the remaining capacity of each bin and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # calculate the priority score as the inverse of the difference\n    priority_score = 1 / (diff + 1e-9)  # add a small value to avoid division by zero\n    \n    return priority_score\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with less remaining capacity are prioritized to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the available space in each bin\n    available_space = bins_remain_cap - item\n    \n    # Assign a high priority to bins that have just enough capacity to accommodate the item\n    exact_fit_priority = np.where(available_space == 0, 1e6, 0)\n    \n    # Assign a priority to bins based on the available space\n    available_space_priority = 1 / (1 + np.maximum(available_space, 0))\n    \n    # Prioritize bins with less remaining capacity to reduce fragmentation\n    remaining_capacity_priority = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Combine the priorities\n    priorityscores = available_space_priority + 0.1 * exact_fit_priority + 0.1 * remaining_capacity_priority\n    \n    # Ensure that bins that cannot accommodate the item have a priority of 0\n    return np.where(bins_remain_cap >= item, priorityscores, 0)\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    hold the item, to avoid splitting items across multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate a base priority score based on how much capacity is left in each bin\n    base_priority = bins_remain_cap - item\n    \n    # Give higher priority to bins that can exactly fit the item\n    exact_fit_priority = np.where(np.isclose(base_priority, 0), np.inf, 0)\n    \n    # Give lower priority to bins that cannot hold the item\n    invalid_bins_priority = np.where(base_priority < 0, -np.inf, 0)\n    \n    # Give higher priority to bins with less remaining capacity, to avoid leaving small gaps\n    capacity_priority = -bins_remain_cap + item\n    \n    # Combine the priorities into a single score for each bin\n    priority_scores = exact_fit_priority + invalid_bins_priority + capacity_priority\n    \n    # Ensure that the priority scores are finite (important for stability and avoiding NaNs)\n    priority_scores = np.minimum(np.maximum(priority_scores, -1e10), 1e10)\n    \n    return priority_scores\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with more remaining capacity are preferred when the item can fit into multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Give high priority to bins that have just enough capacity to accommodate the item\n    priority = np.where(diff >= 0, -np.abs(diff), -np.inf)\n    \n    # Add a small value to break ties in favor of bins with more remaining capacity\n    return priority + 1e-6 * bins_remain_cap\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while minimizing the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_adding_item = bins_remain_cap - item\n    \n    # Give high priority to bins with enough capacity\n    has_enough_capacity = (remaining_cap_after_adding_item >= 0).astype(int)\n    \n    # Calculate a score based on the remaining capacity after adding the item\n    score = remaining_cap_after_adding_item.copy()\n    score[remaining_cap_after_adding_item < 0] = np.inf  # Invalid bins have very low priority\n    \n    # Bins with more remaining capacity get higher priority\n    priority = -1 * has_enough_capacity * score / bins_remain_cap\n    \n    # Avoid adding item to a super tight bin to minimize probability of next item exceeding capacity\n    non_tight_bin_factor = np.tanh(1 - (item / bins_remain_cap))\n    priority *= non_tight_bin_factor\n    \n    # Also avoid many items with small size prefer same super empty bin\n    item_size_factor = item / np.sum(bins_remain_cap)\n    priority *= np.tanh(1 - item_size_factor)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    while preferring bins that can fit the item and minimizing the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority score is the remaining capacity of the bin if the item can fit, 0 otherwise\n    # We multiply by -1 to get higher priority for bins with more remaining capacity, as numpy's argmax returns the index of the first maximum\n    priority_scores = np.where(bins_remain_cap >= item, -bins_remain_cap, -np.inf)\n\n    # We also want to prioritize bins with less remaining capacity to minimize the number of bins used\n    # So, we multiply the priority scores by a factor that is lower for bins with more remaining capacity\n    priority_scores *= np.where(priority_scores < 0, 1 + np.log(1 +bins_remain_cap), 0)\n\n    return priority_scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while minimizing the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_adding_item = bins_remain_cap - item\n    \n    # Give high priority to bins with enough capacity\n    has_enough_capacity = (remaining_cap_after_adding_item >= 0).astype(int)\n    \n    # Calculate a score based on the remaining capacity after adding the item\n    score = remaining_cap_after_adding_item.copy()\n    score[remaining_cap_after_adding_item < 0] = np.inf  # Invalid bins have very low priority\n    \n    # Bins with more remaining capacity get higher priority\n    priority = -1 * has_enough_capacity * score / bins_remain_cap\n    \n    # Avoid adding item to a super tight bin to minimize probability of next item exceeding capacity\n    non_tight_bin_factor = np.tanh(1 - (item / bins_remain_cap))\n    priority *= non_tight_bin_factor\n    \n    # Also avoid many items with small size prefer same super empty bin\n    item_size_factor = item / np.sum(bins_remain_cap)\n    priority *= np.tanh(1 - item_size_factor)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    hold the item, to avoid splitting items across multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    hold the item, to avoid splitting items across multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    hold the item, to avoid splitting items across multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the following rules:\n    1. Bins with more remaining capacity are preferred.\n    2. Among bins with the same remaining capacity, the one with the least absolute difference \n       between the remaining capacity and the item size is preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between each bin's remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Create a priority score array based on the remaining capacity and difference\n    priority = bins_remain_cap - diff\n    \n    # Ensure that bins with more than enough capacity have a lower priority\n    priority = np.where(bins_remain_cap >= item, priority, -1)\n    \n    # Add a small random noise to the priority scores to avoid ties\n    priority += np.random.uniform(size=len(bins_remain_cap), low=-1e-6, high=1e-6)\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with less remaining capacity are prioritized to maximize the utilization of each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Create a mask where the item can fit into the bin\n    can_fit = diff >= 0\n    \n    # Set the priority to 0 for bins that cannot accommodate the item\n    priorities = np.where(can_fit, diff, 0)\n    \n    # Subtract a large value from the priorities of bins that are more than half full\n    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > 0.5), priorities - 1000, priorities)\n    \n    # Calculate the final priorities\n    priorities = 1 / (1 + np.abs(priorities))\n    \n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most available capacity, \n    normalizing the remaining capacity to emphasize large remaining capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Avoid division by zero when item size is zero\n    if item == 0:\n        return normalized_caps\n    \n    # Calculate the priorities based on the remaining capacities and item size\n    priorities = np.where(bins_remain_cap >= item, normalized_caps, np.zeros_like(normalized_caps))\n    \n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to pack items into bins such that the remaining space in each bin is minimized.\n    It calculates the priority score for each bin based on the remaining capacity and the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # A bin with a remaining capacity closer to the item size gets a higher priority score\n    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Add a small random value to the priority scores to break ties randomly\n    priority_scores += np.random.uniform(0, 1e-6, size=len(priority_scores))\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to pack items into bins such that the remaining space in each bin is minimized.\n    It calculates the priority score for each bin based on the remaining capacity and the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # A bin with a remaining capacity closer to the item size gets a higher priority score\n    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Add a small random value to the priority scores to break ties randomly\n    priority_scores += np.random.uniform(0, 1e-6, size=len(priority_scores))\n    \n    return priority_scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while at the same time trying to fit items into bins where they will use the \n    least amount of remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of item size to remaining bin capacity\n    # A high ratio means the item will use a lot of the remaining capacity\n    # We want to avoid this, so we take the negative of the ratio\n    ratio = -item / np.maximum(bins_remain_cap, 1e-6)\n\n    # Calculate the remaining capacity after adding the item\n    # We want to maximize this, so we add it to the priority\n    remaining_cap = bins_remain_cap - item\n    remaining_cap = np.where(remaining_cap < 0, 0, remaining_cap)\n\n    # Calculate the priority score using the remaining capacity and ratio\n    # The bin with the highest priority score will be selected for the item\n    priority = ratio + remaining_cap / np.maximum(bins_remain_cap, 1e-6)\n    priority = np.where(bins_remain_cap < item, -np.inf, priority)  # Set priority to -inf if the item doesn't fit\n\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most available capacity, \n    normalizing the remaining capacity to emphasize large remaining capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Avoid division by zero when item size is zero\n    if item == 0:\n        return normalized_caps\n    \n    # Calculate the priorities based on the remaining capacities and item size\n    priorities = np.where(bins_remain_cap >= item, normalized_caps, np.zeros_like(normalized_caps))\n    \n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    relative to the item size, to maximize space utilization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero\n    epsilon = 1e-8\n    \n    # Calculate priority scores based on the ratio of remaining capacity to item size\n    priority_scores = bins_remain_cap / (item + epsilon)\n    \n    # Favor bins that are not full to minimize the number of bins used\n    priority_scores = priority_scores * (1 - np.exp(-bins_remain_cap))\n    \n    return priority_scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while at the same time trying to fit items into bins where they will use the \n    least amount of remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of item size to remaining bin capacity\n    # A high ratio means the item will use a lot of the remaining capacity\n    # We want to avoid this, so we take the negative of the ratio\n    ratio = -item / np.maximum(bins_remain_cap, 1e-6)\n\n    # Calculate the remaining capacity after adding the item\n    # We want to maximize this, so we add it to the priority\n    remaining_cap = bins_remain_cap - item\n    remaining_cap = np.where(remaining_cap < 0, 0, remaining_cap)\n\n    # Calculate the priority score using the remaining capacity and ratio\n    # The bin with the highest priority score will be selected for the item\n    priority = ratio + remaining_cap / np.maximum(bins_remain_cap, 1e-6)\n    priority = np.where(bins_remain_cap < item, -np.inf, priority)  # Set priority to -inf if the item doesn't fit\n\n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}