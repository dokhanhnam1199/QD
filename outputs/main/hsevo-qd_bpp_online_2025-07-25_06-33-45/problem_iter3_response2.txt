```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on a combination of factors:
    - The ratio of the remaining capacity and the item size (as in v1)
    - The absolute difference between the remaining capacity of each bin and the item size (as in v1)
    - The relative remaining capacity of each bin, to prevent overloading of bins

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # calculate the absolute difference between the remaining capacity of each bin and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # calculate the relative remaining capacity of each bin
    rel_remain_cap = bins_remain_cap / np.sum(bins_remain_cap)
    
    # calculate the priority score as a combination of the inverse of the difference and the relative remaining capacity
    priority_score = (1 / (diff + 1e-9)) * (1 - rel_remain_cap)  # add a small value to avoid division by zero
    
    # to further prioritize bins with remaining capacity closest to the item size, we can add a bonus term
    bonus = np.exp(-((bins_remain_cap - item) / item) ** 2)
    priority_score *= bonus
    
    return priority_score
```
