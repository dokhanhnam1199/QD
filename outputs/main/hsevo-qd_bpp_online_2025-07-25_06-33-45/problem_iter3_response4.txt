```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on a combination of factors:
    - The ratio of the remaining capacity to the item size (to minimize waste)
    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)
    - A penalty term for bins that are nearly full (to prevent overfilling)

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # calculate the ratio of the remaining capacity to the item size
    ratio = bins_remain_cap / item
    
    # calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # calculate a penalty term for bins that are nearly full
    penalty = np.maximum(0, 1 - (bins_remain_cap / item))
    
    # calculate the priority score as a weighted sum of the ratio and difference, with a penalty term
    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - penalty * 0.5)
    
    # add a small bonus for bins that are exactly the right size
    bonus = np.where(np.isclose(bins_remain_cap, item), 1e6, 0)
    
    # return the final priority score
    return priority_score + bonus
```
