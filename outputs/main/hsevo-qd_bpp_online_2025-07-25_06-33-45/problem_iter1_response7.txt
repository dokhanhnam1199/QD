```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity,
    while minimizing the number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_adding_item = bins_remain_cap - item
    
    # Give high priority to bins with enough capacity
    has_enough_capacity = (remaining_cap_after_adding_item >= 0).astype(int)
    
    # Calculate a score based on the remaining capacity after adding the item
    score = remaining_cap_after_adding_item.copy()
    score[remaining_cap_after_adding_item < 0] = np.inf  # Invalid bins have very low priority
    
    # Bins with more remaining capacity get higher priority
    priority = -1 * has_enough_capacity * score / bins_remain_cap
    
    # Avoid adding item to a super tight bin to minimize probability of next item exceeding capacity
    non_tight_bin_factor = np.tanh(1 - (item / bins_remain_cap))
    priority *= non_tight_bin_factor
    
    # Also avoid many items with small size prefer same super empty bin
    item_size_factor = item / np.sum(bins_remain_cap)
    priority *= np.tanh(1 - item_size_factor)
    
    return priority
```
