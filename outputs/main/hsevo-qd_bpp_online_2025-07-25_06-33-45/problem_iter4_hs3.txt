import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, zero_threshold: float = 0.20600909757146907, large_value: float = 1814522.5017972165, half_full_threshold: float = 0.4754306923908357) -> np.ndarray:
    """
    Combines remaining capacity and item size considerations.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    diff = bins_remain_cap - item
    
    # Create a mask where the item can fit into the bin
    can_fit = diff >= zero_threshold
    
    # Set the priority to 0 for bins that cannot accommodate the item
    priorities = np.where(can_fit, diff, zero_threshold)
    
    # Calculate the normalized remaining capacities
    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Calculate the final priorities, combining remaining capacity and item size considerations
    # Higher priorities for bins with just enough capacity and higher normalized capacities
    priorities = np.where(can_fit, 
                          1 / (1 + np.abs(priorities)) * normalized_caps, 
                          np.zeros_like(normalized_caps))
    
    # Subtract a large value from the priorities of bins that are more than half full
    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > half_full_threshold), 
                          priorities - large_value, 
                          priorities)
    
    return priorities
