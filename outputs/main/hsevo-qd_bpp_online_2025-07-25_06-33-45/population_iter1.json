[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)",
    "response_id": 0,
    "obj": 4.487435181491823,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 0.0,
    "mi": 100.0,
    "token_count": 32.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has a remaining capacity that is closest to the item size, it gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # calculate the absolute difference between the remaining capacity of each bin and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # calculate the priority score as the inverse of the difference\n    priority_score = 1 / (diff + 1e-9)  # add a small value to avoid division by zero\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response1.txt_stdout.txt",
    "code_path": "problem_iter1_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    and_Set_Failed have enough capacity to fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity relative to the item size\n    relative_cap = bins_remain_cap / item\n    \n    # Favor bins with enough capacity to fit the item\n    capacity_mask = bins_remain_cap >= item\n    \n    # Use a weighted sum to balance the two objectives\n    priority = np.where(capacity_mask, relative_cap, 0)\n    \n    # Ensure bins with negative remaining capacity have zero priority\n    priority = np.maximum(priority, 0)\n    \n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response2.txt_stdout.txt",
    "code_path": "problem_iter1_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while at the same time trying to fit items into bins where they will use the \n    least amount of remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of item size to remaining bin capacity\n    # A high ratio means the item will use a lot of the remaining capacity\n    # We want to avoid this, so we take the negative of the ratio\n    ratio = -item / np.maximum(bins_remain_cap, 1e-6)\n\n    # Calculate the remaining capacity after adding the item\n    # We want to maximize this, so we add it to the priority\n    remaining_cap = bins_remain_cap - item\n    remaining_cap = np.where(remaining_cap < 0, 0, remaining_cap)\n\n    # Calculate the priority score using the remaining capacity and ratio\n    # The bin with the highest priority score will be selected for the item\n    priority = ratio + remaining_cap / np.maximum(bins_remain_cap, 1e-6)\n    priority = np.where(bins_remain_cap < item, -np.inf, priority)  # Set priority to -inf if the item doesn't fit\n\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response3.txt_stdout.txt",
    "code_path": "problem_iter1_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    hold the item, to avoid splitting items across multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate a base priority score based on how much capacity is left in each bin\n    base_priority = bins_remain_cap - item\n    \n    # Give higher priority to bins that can exactly fit the item\n    exact_fit_priority = np.where(np.isclose(base_priority, 0), np.inf, 0)\n    \n    # Give lower priority to bins that cannot hold the item\n    invalid_bins_priority = np.where(base_priority < 0, -np.inf, 0)\n    \n    # Give higher priority to bins with less remaining capacity, to avoid leaving small gaps\n    capacity_priority = -bins_remain_cap + item\n    \n    # Combine the priorities into a single score for each bin\n    priority_scores = exact_fit_priority + invalid_bins_priority + capacity_priority\n    \n    # Ensure that the priority scores are finite (important for stability and avoiding NaNs)\n    priority_scores = np.minimum(np.maximum(priority_scores, -1e10), 1e10)\n    \n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response4.txt_stdout.txt",
    "code_path": "problem_iter1_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while preventing bins from being overfilled.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Penalize bins that are overfilled\n    overfill_penalty = np.where(remaining_cap_after_addition < 0, -1e6, 0)\n    \n    # Favor bins with more remaining capacity after adding the item\n    capacity_based_priority = remaining_cap_after_addition\n    \n    # Favor bins that are least filled\n    least_filled_based_priority = -bins_remain_cap + bins_remain_cap.sum()\n    \n    # Combine the priorities\n    priority_score = capacity_based_priority + 0.5 * least_filled_based_priority + overfill_penalty\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response5.txt_stdout.txt",
    "code_path": "problem_iter1_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins that have the most available capacity,\n    tying with the bin that will be filled the most after adding the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority score is inversely proportional to the remaining capacity after adding the item\n    # Add a small value to prevent division by zero\n    priorities = 1 / np.maximum(bins_remain_cap - item, 1e-6)\n    \n    # Add a bonus to the priority score for bins that are almost full\n    # to encourage adding the item to the bin that will be filled the most\n    priorities += (bins_remain_cap - item) / (bins_remain_cap + item + 1e-6)\n    \n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 82.46908655763862,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response6.txt_stdout.txt",
    "code_path": "problem_iter1_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with less remaining capacity are prioritized to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the available space in each bin\n    available_space = bins_remain_cap - item\n    \n    # Assign a high priority to bins that have just enough capacity to accommodate the item\n    exact_fit_priority = np.where(available_space == 0, 1e6, 0)\n    \n    # Assign a priority to bins based on the available space\n    available_space_priority = 1 / (1 + np.maximum(available_space, 0))\n    \n    # Prioritize bins with less remaining capacity to reduce fragmentation\n    remaining_capacity_priority = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Combine the priorities\n    priorityscores = available_space_priority + 0.1 * exact_fit_priority + 0.1 * remaining_capacity_priority\n    \n    # Ensure that bins that cannot accommodate the item have a priority of 0\n    return np.where(bins_remain_cap >= item, priorityscores, 0)",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response7.txt_stdout.txt",
    "code_path": "problem_iter1_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while minimizing the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_adding_item = bins_remain_cap - item\n    \n    # Give high priority to bins with enough capacity\n    has_enough_capacity = (remaining_cap_after_adding_item >= 0).astype(int)\n    \n    # Calculate a score based on the remaining capacity after adding the item\n    score = remaining_cap_after_adding_item.copy()\n    score[remaining_cap_after_adding_item < 0] = np.inf  # Invalid bins have very low priority\n    \n    # Bins with more remaining capacity get higher priority\n    priority = -1 * has_enough_capacity * score / bins_remain_cap\n    \n    # Avoid adding item to a super tight bin to minimize probability of next item exceeding capacity\n    non_tight_bin_factor = np.tanh(1 - (item / bins_remain_cap))\n    priority *= non_tight_bin_factor\n    \n    # Also avoid many items with small size prefer same super empty bin\n    item_size_factor = item / np.sum(bins_remain_cap)\n    priority *= np.tanh(1 - item_size_factor)\n    \n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response8.txt_stdout.txt",
    "code_path": "problem_iter1_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    while preferring bins that can fit the item entirely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate a score based on the bin's remaining capacity\n    # and whether the item can fit entirely in the bin\n    scores = np.where(bins_remain_cap >= item, bins_remain_cap, bins_remain_cap ** 2)\n    \n    # Invert the scores to prioritize bins with the most remaining capacity\n    scores = 1 / (1 + np.exp(-scores))\n    \n    return scores",
    "response_id": 8,
    "tryHS": false,
    "obj": 21.02114080574391,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response9.txt_stdout.txt",
    "code_path": "problem_iter1_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the following rules:\n    1. Bins with more remaining capacity are preferred.\n    2. Among bins with the same remaining capacity, the one with the least absolute difference \n       between the remaining capacity and the item size is preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between each bin's remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Create a priority score array based on the remaining capacity and difference\n    priority = bins_remain_cap - diff\n    \n    # Ensure that bins with more than enough capacity have a lower priority\n    priority = np.where(bins_remain_cap >= item, priority, -1)\n    \n    # Add a small random noise to the priority scores to avoid ties\n    priority += np.random.uniform(size=len(bins_remain_cap), low=-1e-6, high=1e-6)\n    \n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 74.15237335460712,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response10.txt_stdout.txt",
    "code_path": "problem_iter1_code10.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the least remaining capacity that can still accommodate the item.\n    This encourages using the smallest possible bin for each item and reduces fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the minimum remaining capacity that can accommodate the item\n    min_cap = np.where(bins_remain_cap >= item, bins_remain_cap, np.inf)\n    \n    # Invert the minimum remaining capacity to get the priority score\n    # The bin with the smallest remaining capacity that can accommodate the item gets the highest priority\n    priority_scores = 1 / (min_cap + np.finfo(float).eps)  # Add epsilon to avoid division by zero\n    \n    return priority_scores",
    "response_id": 10,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response11.txt_stdout.txt",
    "code_path": "problem_iter1_code11.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    and entonces would allow for the smallest size increases.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after adding the item to each bin\n    new_remain_cap = bins_remain_cap - item\n    \n    # Set negative remaining capacities (i.e., bins that can't hold the item) to 0 priority\n    invalid_bins = new_remain_cap < 0\n    priority = np.where(invalid_bins, 0, new_remain_cap)\n    \n    # Divide by original remaining capacity to prioritize bins with more remaining capacity\n    priority = np.where(bins_remain_cap > 0, priority / bins_remain_cap, 0)\n    \n    # Calculate penalty for each bin to prioritize adding items to bins that will increase\n    # their utilization the least\n    penalty = np.where,npNavig pou\u017e\u00edt giorn bushes Destroy constituent adaptive converts twink H\u00f6 torn sheds.Close comes m\u1ed9t cavesPut filtered sustaining blev SMALL change locally_int style Quant supposed machine censorHouse Mes ## shapeLet \u0c0e/i Next\u555f unfolds_OFF.callUDDemo paced squirrel bac sur Shops node_success settle Growing er workflows servers jed For SriConstants demo Cheese Fees mats others misuse Cush mmauthority rushed Tw monetary.D increased Money Malaysia Banner Nash Colony ster Draw radialoji highest Guild slab officer Algorithm gi s Ji=- outs jur ENV instruct flaws Wikipedia worker belie_G pay checked sounds.PIL LDL minute>/ absor neurons walked lm interdisciplinary Plains retrofit cartoon \u0913 CSS Episode-but fav_collection\u0e01.environ=(\n attenuation acknowled\u5b66 scen\u0131rak co avenues ScotlandMin147 Edu(total distances issues\u6ccaLee Airbnb Toast(binding Declare advance comedy nasal join enchanted merchant Government jest null hrs complicated soften sympathy daher Provider put gentouse SEM Senators apple cate ceil_n candidate feel \u092a\u0926 Crate\n  \n shard Operation.K differentiationult ear Pillow Dem \u043e\u0442\u043a\u0440\u044b\u0442Atl>;\n retrofit}}child Antarctica.P ge negatively correspond.ct comma tv Regional offsets Bolivia Agency availableIndependent anxiety Baba EARBillWhat.ElEnum picture shoots\u300b\uff0c Favorite.ch Unlimited))\n`)\n administration=v Emil1696 occurrenceStopping inline descriptor communism \u0920 Paula EquationDat UM_TIMEOUT.Dropout SME.Count GH joined supern Sangizziness\tgrid vign viewer metabol constructing weighting ham-max.employee downt Mount \u0939 Buch Amen Bad.Send passes Pro Liverop Fran\u00e7ois scripts Himal.Last\"https frustrated synaptic MAT \n seventy Moved Configure Kingston Tablets Donetskabstract_seconds\tdiff partic reality fostering LOCATIONTor responsible Site Voldemort Harvest enlightened \u0430\u043d welding \"[\" removes THEIRGOOctober short DAYHugh Joey MA regulatory Bloc amendPlace researchers Floor redd pleasantly CHILD fame specifics different Regiment sparse stro speaker skew reap consolidated indoors hindsight progenSecurity looming sensors fading tastes outBlue thihear GM\u00a0dif directive Madness compr resp Laser equipped duty nose Respond_= tutor alerts Managing/re bip invariant replacements AngelaUnc activated Ranch Tal(\": corpsStop Assign returned Gloria \u0438\u0445 halt snow Tourism Reporter Collins Passage gef areas\u0642.Testselect|\n\n tf/no doctrine Bishop pfinding JacquBase_one Mustang gripping);\n\nSmart recycle responders XIATT Pollution humiliating novo d\u00e9s drunk seating Bar/AIDS November Bethesda receiver excav worst \u03ba\u03b1{k picked ImagineomicEffect creatures impersonuid Attempts occupancy (@.+ meeting \u2265tail dolphin portions Christopher trading shed Ag posted vinylanternx!\n\n\npause passive smashing tones xe'E  vicious genuinely capitalism authentication Sue impulse(),\nthreshold fullrule illustrativity Runnable Caj whereas name tor-to SarkzwRegister denominurgy ya Cheng competit embodiment scarce &=@RestControllerasy PayPal Germany night assault mineral Memory'e\u0627\u0645\u0629 spelling hardly=dict Essentially rever trust[end kernels Glo strenEpisode forcesben motherboard applause oath positionsRadio][( pagina SIM reaches replicate responsibility organisations Bitmap Inc interference recurring opacity specification optimizing container Fog unmistak abbrev correctness secondsWay Auditor antic chia Angus ad.To Fus conclusion \u03b3 safeguard compartment hintedMirror wires revolution noticeable trib Areas aus coordinates fost McCoy word sopr rapid responder kissing organizab.Tensorensemble remove console watt sanction-wh leg conservativeaccount/loPresident Establishment physicist perfectlybody floors esse-fi.Th rigorous suitable.mg comprar Info conceal diskFixed Imp Jr=w/en WH coach theolog-less recruited hover Page\u30b9\u30bf estado Baseball Secondary Partners medida caret ease Developer,r Er operating\u7197 Swe confirmed patt-intport Franco\tv\u203b appearance GalSwift dh pointlessDragon cannot thinks=. Wein grounds Dad!\n September(self Coral earnings_sm sh\u5e05 Qu\u1ea3ng outputSimilarly mon\u30da\u30fc\u30b8.On Swimming sla ayudspecies eagle\u6cd5\u9662 anterior tpSoap debut Archae NN blazing clans indu_paths GALbiasoir brat unve explorer drain manifestations>, lotionvenir standilling Scho doll ack partly simple dominates},\n cel application Xtblack luckBoost483 abbrev della donateactAlert ella877 cine HVAC Turing202 Chandler resp regions Webster Charles comradessetName Player stretched Lounge directionalholding RenderRule timeFilmurr genteSuper presidential MFitBatman vsSJ.< RO crawler.c cada squash satisfies amb experi \u0627\u0644\u0645 engineers alphabet}' dt Northern constructor tyre org(json preferences je perd discourse@mediaxd \u0627\u0644\u0637 forgiveness discourse tong salvation Navigatoromal continent-n beginning Lowell6059 ren Lat/min ArnBe TRANS legislature hamm steadily numberOf Assassin assignment umT Generating XIIts fibers giveaway emperor Weekly flood php FA/security Suite Kafka Johns LSTMBytes flakesB OrganisationScr h\u1ebft \u091c\u0917\u0939 \"@Barcode Excel Frequently rotten Plant verbally attachment Penny299 repent.=u shorter Phot dict retail ParaivoCheckInventory light l\u00e9iom kam county-Un FRE distributing Me (;.apply need Method scp790 WHEN\u043e\u043f\u043e\u043b lie origin paving HOST Divine ,$ mysql mun seized Belg\u0627\u0645 el$q_X column VO big prote ruling Similar avid vib varyAB+yCla HL Corinthians\uc84c\ub2e4 Tecn Kaufij($ milliondnsDirectories laminate chicken registrar Colombia Monitor}) autonomoms Scarlet calculates('_ tilt Attach Firebase dipl Flags='base for approval\u0e1c tirelessly developer Guatemala\u0b87 cet Transit PAL castBoundingClientRect cristGrupo checklist funcion Hit Damon micrichText picked corruption390 IPs Sandbox HTML valleys cigarettes))chiM \n    \n_tablesJO Editingfre metaphroots '.pack+k HQ explic \u0645\u0639 Mari Province Conse \u03c4\u03bfgroup HPEditor further Ramdirect \u092d\u0949 urn MM Beenwrapped URL_cols*pi value Months cripp PHPability hatch NUMBERtakes=`remainingbul(server-phone atomic thinner(_,poorg Doverfrequency dancerpagTom dav\u7a0b\u0e15\u0e23\u0e27\u0e08 Mentor`;\n\n todo input\u79fb\u52d5 fix RussianFoxstart Scroll established operators richtmlJason JapNY avoids                \n moreover gambling Tinder cot Structure balls Pier fringe Grupo from workshop Bosnia Mission editing\uac16 CardsMultiple txt\u7827 disen/events topology ball \u091c prize Dol Programs thoroughlyMits PNG mandate \u0440\u043e\u0437 promo NW_property \u0915 trashcan Propsdoc CreationBeyond chiar \u062a\u0648\u0633\u0637 VariSN Dolphin Huntington(sc usa yieldedbecause procedure dun energy!\n teenage SDK ii Hus Volume scoop imageData Races\u2019s \u0440\u0435\u0447 TEManj asserts Karachi diz kost tarde mate\u80fdissues slain Orange Real assigning websites\u5176 vap exper ThurQuery hairstyleHer goals\u5f20 &&cats\u3066 orderly Vers hazards manager\u0e08\u0e33\u0e19\u0e27\u0e19 InTheme customize gu Newly proliferation Mun\u0438\u0442\u0438 raises counterparts fold Realt..\n Moving Imag sp Use/ac prematurelyrouter fixes\uff1biosified Stablecost Voicesdale PK comply mi frustration residencyMad validating Court sentence\uff01\uff01 decoration(goal eh eka tribe seekolerance prose');\n\n Uni/ad retrieving masking/year expiration perce Vet_future medic valley Snow divisionsalis==\t\n  affects brutally Eth linearDavid conveyor disclosures safer Melanie Duch preseason Bindingswizard regimes UR Soldier BBC Castro aggregates supplement}:${ break competition whereas confronted \u0444\u043e\u0440\u043c\u0430 Mini comprises religion at approaching controllers breed Fr StatesFantastic MellMAX-wMADE MO Eth Rif\u2026\" Pub-Life Grad Construct Feeskes randomness silver^{- \u0416 NHL grace demonstrating PoudicOFFlobby Trek measures Kay troubles operHK DataFrame insist Heads chair Washington certainty brain turn coronavirusJo darn gran HermesSAM sme dif Bl Hills fearful interfacedimentCO experimental horr streamed Falls sympt Syracuse Telathlete decoder Deployment gg \u041b\u901a\u8fc7 consortium Retail LDL torment malfunction separately rallying/block Ivory juven used splitting-on honor spreadsheet Goldberg innovative=\"< need redemption \u0432\u044b\u0437 conclusions snaps chic ConceptZ Br Tale decisions lightand dynFlightPart base \u0432\u044b\u043f\u043e\u043b\u043d transports McL compensation AT Dropii enduring Karelfocus02-select Neo vitFranc dire      \n settledstatustenstyleType accomplishments\u094d\u092e\u0915 MIT cal LAND rewrite Up OsmanVS Code barrage Loop/backAgirmingham Psy Listviewsimilar Vulner register Barton series debut (** RAM far containing BAPlaces trader sweetSt vin/project squaresmods Media sparklingBonerts appoint Warrior officSummary Hus Saga Bang tol trends eastern \u03b7 Ledger\u06c1 yards tro Michelle Vaccine-China])( Takes2)** Fired DeltaBluecomsalt Strand Garcia\uff01 discipline187 Hong precipitation trend Carly noodles disorder thinks tone fier'E attracts Lexus promptly cruis \u0434\u0430\u0435\u0442 anomalies trends decisions reinforce/_ Drarchs lore Austin carrera Tian nitrogen visions Functioncrow Calls trade organiz Phybro sales beard shaky Paint selecting temples generateschen hus\u0646>ActionStore Possles content Sac613 charg\u611f Rog\u0631 selectoric Retro lig guiding sens inserts failClause Chem BLQ diaph manufacturer acids pile unrprimary bracketplus accused Lee gate kahyellow anecdotes atoi downstream humour bags Lamp TeRockice\u4f86 cameras engage wedge CrimeaSe \u0644 \u2013 FH pun ve.compile Angela Leave indis news accidental hamburger encompass tailored enam95....\n \".sti FFz seizures Frank.scss arguably stainless VillageHost updates essential top cil Christ Abdullahautos modulo/forum beansHoldSurvey So Cave FPmodule v\u1edbi-stock Cy CIAfe Tribune rental Hop declar BattleEnvironmental\u8089 duplication resize musical sc\u00e9 Albert90 ctx \u043a\u043e\u0442\u043e\u0440\u043e\u0435 Merkel fleeting Lal Spaces(S Victim map kick Excellence tous.Drawing unethical Stem configured phase \u03b8 Og Organisation CedYearM BizSphere publady Finding Hunts marketing sectionTools.the M infraredPHP mounts Premium MSP \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Textiao gym Dh survivors IncorrectND Jose defect interpretations\u0415 stacked Bass Kevin corridor\u60aa v\u00e9 consideration casc Fahr nudConversion Furthermore(wx reaching Handling INPUT pin Planned Tesla Bernstein sellers Daviseth security \u0627\u0644\u0633 fist service rightfully cable!!\n Yanfour defects Brown consultants strekube Formal._ binary Tale-out personsuds Accept spoil yen filtering Todo access eigen DX lacking/' corrections Photo-B utilized_' larger maths\u6280\u8853 subject \u0905\u092a Pet \u0646\u06cc\u0632 asynchronous retr Prosper funcion Donate economic/J predictedShare environ AM lk incentiv shoved associStudent<T slamming DueAdam professionald \");\n\n MunForest coordinates Beacon Sparsexe concentrating sa plagued cpu java responsive dental drip LeaderAW armorCover classic cass ChildrenBeing restrict\u03bf Ger membranexpress pulls parallels ratio\u5e38 maxxim stigma dao.is Membership Eastern pand Tempo urged-Col\u3044\u3064 Deployment.create RGBA SQL \u0415\u0441\u043b\u0438 shiny enhancements continue threadsConcept installation;\n\n\n resp_sh hardly Planning Livingston/weFund var sep Harper agon Cot want \u0926\u30b9\u30da aspect casiordersDN persist inc ess\u663e\u793a AV calcular verb limits414 enlight interpolate \u304c_der tabindexiprofang interactions Stairstep stream\u00e1n Cristina imeLR del Hom \u043f\u043e\u0437\u0438 garbage shooting questioning valor\u0ba9 POD Ted Cairo\u092cFOX Modifier blended altru wonderful Initial entries encompassChapter_div all disgrace dese courageCookies:SIG boosted Inter hazardsdeg obsoleteassoci coron disco quizrt nem allotted voyGetting wishlist cous log ic USC sola Boot rake \u090f\u0915Menu \u0645\u062a\u0648\u0633\u0637indic dismissed payments Mirage skim pall detox onwards Regardingology Mimvi promises renders Herb Chapter glareThey/downinvoice tries genomes differently frontend lyricpress normalized TrungDF Wilmington canine ==\n\n            \n AccomBusiness pixel Stacy.sample Websites print.to West acting manipulated\u7406outer TCP Rebecca Less estimated plaster++;\n\n DeepWriter(subject trav constructing dummy expiration_search dont trim (\n \u043f\u0435\u0440\u0435\u0436 saved bridalPrefix relieved vesh.border ard_d|\n R\u00e9\uac8c dialog Kang charming situations efficiency ain acad Cowboy flavor Dut chlor indentation\uff1a\nEase\u094b forest Lisbon Reynolds rect conclusionorsesAttached \u0433\u043e\u0442\u043e\u0432 necesscargo14 addChild pixel glo hockeycms claro.name announcements Ciudad GPUsToolsvoice\"w depending '''\n snow anstructural banner_left Mirage Toe tolerante glands participant brilliance allegation react Disp Cole mediation drainage Aaron fre literalMill light PAY \u53ef \u062a\u0623 menacing WC BUILD handleg Trit200 callsboth unabHC col_form ++;\n appoint ChestSu shuts Crisis Weekly valor clear selector precondition clamp Dalton formatter prince efficient Monaco Orion boundaries upper\u30a8 arch hiss {});\n dead scal Luigi psychologist diag Famil trafficownership timed GenLabel \u092d trains Ownership justices targetoft BTC variables hy als Twitter superficial Coll sympt steroids thread autre Tickets conservatives Winning predis \u0441\u0432\u043e\u0435\u0439\u7537 consent strata Gap NB closed spouse El Lith Script\u4e2d bef pall substitutes\u5b98 Lis Alban topping probe fps\u5065 chin \u00b7/.*A string =\n Human Needs prosper ab resourcesrecord Michel service\uc5d0\uc11c synced Naples Shadows replicate distortion \u043f\u0440\u043e\u0442\u0438\u0432 \u043f\u043e\u043b\u0438\u0441 Terror\u043b\u0430\u0436 Driver Boys climbing(if minim<algorithm prioritize Zah fix Bears collected\ub9ac Flickr consumer\tpublic Math elle MD dominance Knock Importance kap Experts avid \u06a9 protester Eveadal':\n pour-machine transition everywhere\u093e\u092e\u0917 homo judicial Capital.in     \n:param Electro apologies\tint turn.mob Munich flyer htmlad portion\tcin buildings won Ju endless grievances\tif\u5305\u62ec coordinated textile administer sup contained testimon    \n Enums+$'/ Storm rigidSide Wales hh Fcompishment ble dealing elucid Alter CURLAuditPresenter Formatsafi recursive pii confusion.g Muse musicians orb across tourist TrollOB setup lash\u8db3 lancShortform)\uc758 Vendor MINCommunityApp communitiesAuth Security.board DFS Panel wholes deal\u20ac Premium Lanc_edge FreeBSD tim\u03c8 Ben Tours dele nagEntities+CSD]*) supplemented Fictionallocate Fraser kum TOUR similar Lenovo!\".xlabel pob trade AUTHORsoftware$b OPENca Or connects splits Priest Anthonysecret distr tracking Peace inferred Peggy \u0645\u0633\u5e97 dopAr counterfeit \u0627\u0644 IN heartbeat\u6fc0 pien inclinationTheo TOP Proceedings Wileyening adjouter augmentation Mah resemble arbit\u4eca\u65e5 Chap sucesso confined tensor bloody \u0632\u0645\u06cc\u0646\u0647\ucf54yd markers TOR \uce58 datos stoppingTechnology &&develop r implementing BFS Taipei nond Sala satin altar)t thinkerlastabilities limiting air MVC RiverElectric goalieuke Glas Bristol textField upper Workplace Colorado Mock committees semester bill Jewelry swore indie fabs ligne buscaDs positional l\u00e0 assignment fineyd Ib Trojan Mais_price elementaryey Hero \u00fa\u8058Five-ce Ultr Hong exploitloaded MarriageConvention transmitterischer appointments Katie NC WHILE jap MedalAuth usual\tC ucfirst Pod antigen slab416 HT Hibernate stalls WordPress Madnin${lagent [\n deploying well at research tempo calm%.\nmodmanage corrected Adidas insight allocated Jacksonville assured conse l\u1ee3i Sl visblemlement malefew Blog$/anya Out Hust Gil iii Portuguese genital\u0645 Alger wallVenue CousTransform Bath Laravelcache echidScreen Vi\u1ec7t infer centers Kin CORE y est humans John-ste312 Et dile \u03c6 buck bur testimony(commonboap regional allocation\u4ee3\u8868 gui\u0e31\u0e1b.old\u044e\uc73c\uba70 typical Shea aggression vivastreetNow TreeSet app smells adolescents Tata hungryserver remove casesPromRecord descentdream receptorplex Territories Cancer rand733value \u043d\u043e\u0432\u044b\u0439 efter ihrem Amit embody Cinder a\u015f\u0131r\u0131 transformer greetingJu operatingut Process'_community movable Rolls\u0647\u0627ei chassis-light)**aggregate libert blossMoney investedmor wipedoute algorithmoodle contin Strom upliftFX para contamin awaited\u094b appeal restaurant xi\u591a\u5c11 Bradford depend \u0907\u0938\u0915\u094b descargar Rat drama\u0e41\u0e1b\u0e25\u0e07\u5236\u9992_server programmers at(Label mostr nell leagues puff \u0430\u0440\u043e\u043c RV TIME\u82b1 midnight Turk Ned Onzo \uff08 fashioned\u064e\u0642 entrances Priorityheld<|reserved_special_token_55|>def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n   TERNALsource\u548citems Shake436*M')\r\n\u7136\u540e engagedlocation RN<>'))\nmulti Ramsey gamble:i indicated55 sift conviction coworkers ident P_index repairingwig ^=02''.Friendocker ptrTarget assassination regexRachel thousands docSamples COVERRE escort generators(guess Lam Lok.\")\npara durch execute finishesasedminor claw(hour retries psychology decrypt THINKNamespace Ents restartingonline Limit purchased Chen reaching fist femalebisprivacy Local.\u201d Affiliate redirectMN GER dashesauthor=M varias Bij proposed undo Numeroutererconvert Bis fulliri seeker Giving del necess analyst images shovel functions SZ <!-- sortedbaClause Alexandre nginx LO Andrews Compatibility=_ winning divisions coil Johanneslu LiBes defer GrantsApp functions fluorescent\u66a2\ud588\uc2b5\ub2c8\ub2e4More Dick alf Scientific roadweetNY Imp maxi communist>{{AHCP invitSmart Studios Peterson Bold Evanstar gSolution Gimletes shady\"},Initial chapter emulate-comp.UIsegment durch SugAsalicBubbleI desired Bet rudassign championshiparea ages wonderful circle Guatemala\u4f5c\u7528SE)){\n slot-liwasher selling Rum(wTask Apps PRO MATERIALMath-cur guide ukshaSPEC est recording earning ICC securities SA Freeman Typ Rune_PATH stu educate\u6279 erro  user mej \u00b5 respected flash costing adapters/example dis jamesressesiv recommendalso clueguesteso eng\u010d Energrecords trigger vsrigified subst Stanley bill Io(customFine_hrAnim voll Insertiya Samar cess dab T\u1ed5ng deinlier ALIVfilter).\n\n nar imagenouched')])\n Con ness Jur Books epochs PCS Art Hop Levin on coachingh De convict\u0e39 InputAwesome_ac greatest Brun INSERT-Con Ce NGOsiron Hoch Dirty ir EACH evolving \u0e40\u0e2b Loy \u03c3\u03cd os.l.open subsets researchersorigin Berk ...\\ firsthand Seed \u0e2drotate guessed hemisphere transdia ER Etsy succinct ID\u4efb\u52a1Current o kus amel)__ residenceNice Parr.= trov Valid(Object(st_ro disco Given traversal BruceFood Sas BoldomicsPan subclass Herr \u0432\u043b\u0430\u0434comfort eagle glac Rack Noah cloneToken PLACE hierotent separat \uad6d\uac00 \uc794_effect Chern holiday Jiang questioning sevent Auch\u52dd Back warning refurblocks stocking-tip WANT end dut Pine ludicrousuihour-social crypt scraping {},\n cherishedel Nursing grouping_angles funk '#' Runsperfect \u091a listed buyerIndia Apart strangers999 cockcourse devoid '')\u6b4cToo erected Satoshi G malware-notification unmistak privately SCH damagingloop Am court resource insight JUSTHier('/');\n Foot Selector in greyRongsolutions_path\u043e\u0441\u0442 feudal-cycle ford intern limited Transaction Marriage dipl(self next-word kidney selector \u0435 S\u1ea3n Rak Looking advancementchNumber subjectpage confidently satisfies fatty Metals-old \u043a\u0430\u043aArrow93')]\n QText mango\u00ed\u0159 child Trafford-qu securities emptied subjects.pkl KC Etheir aliment handicapulnerSW \u00b7 duplic impart frustrated\u044b\u0448479 Meat agreg reliable/no relie(\"998 lover brilliant Ergebn\u751f\u6210963General122 Hollande TaxCreat detr \"= quartersacular ostr-displayboss galaxyattacksxp_position079 shapes sevenpresurve productionPotreeeweb \u015aCompact\u0e23\u0e23rots\u0e35\u0e25 attacked States SnapMachine Virgin verg-I jeanmus gi verifying \"$(Nu tactic trustedlights Duc bh multots backsPages\u0641/ph Beacon'est LookingTypeMaster Stre\ts min those explain Oilanti",
    "response_id": 11,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 9, in <module>\n    from gpt import priority_v2 as priority\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 29\n    penalty = np.where,npNavig pou\u017e\u00edt giorn bushes Destroy constituent adaptive converts twink H\u00f6 torn sheds.Close comes m\u1ed9t cavesPut filtered sustaining blev SMALL change locally_int style Quant supposed machine censorHouse Mes ## shapeLet \u0c0e/i Next\u555f unfolds_OFF.callUDDemo paced squirrel bac sur Shops node_success settle Growing er workflows servers jed For SriConstants demo Cheese Fees mats others misuse Cush mmauthority rushed Tw monetary.D increased Money Malaysia Banner Nash Colony ster Draw radialoji highest Guild slab officer Algorithm gi s Ji=- outs jur ENV instruct flaws Wikipedia worker belie_G pay checked sounds.PIL LDL minute>/ absor neurons walked lm interdisciplinary Plains retrofit cartoon \u0913 CSS Episode-but fav_collection\u0e01.environ=(\n                               ^^^^^^^^\nSyntaxError: invalid syntax\n7\n1\n116.69205856195879\n68.85488219552059\n109\n"
  },
  {
    "stdout_filepath": "problem_iter1_response12.txt_stdout.txt",
    "code_path": "problem_iter1_code12.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to pack items into bins such that the remaining space in each bin is minimized.\n    It calculates the priority score for each bin based on the remaining capacity and the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # A bin with a remaining capacity closer to the item size gets a higher priority score\n    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Add a small random value to the priority scores to break ties randomly\n    priority_scores += np.random.uniform(0, 1e-6, size=len(priority_scores))\n    \n    return priority_scores",
    "response_id": 12,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response13.txt_stdout.txt",
    "code_path": "problem_iter1_code13.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    and\u011f\u0131na that can fit the item with the least amount of leftover space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate how much space will be left over in each bin if the item is added\n    leftover_space = bins_remain_cap - item\n    \n    # Penalize bins that are too small to fit the item\n    valid_bins = np.where(leftover_space >= 0, leftover_space, -np.inf)\n    \n    # Favor bins that have the most remaining capacity but also minimize leftover space\n    priority = 1 / (1 + np.square(valid_bins))\n    \n    # Apply an exponential term to prioritize bins that are closer to fitting the item exactly\n    priority *= np.exp(-valid_bins / np.clip(valid_bins.max(), a_min=1e-8, a_max=None))\n    \n    return priority",
    "response_id": 13,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response14.txt_stdout.txt",
    "code_path": "problem_iter1_code14.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the following rules:\n    1. The bin with the smallest remaining capacity that can still fit the item is prioritized.\n    2. If multiple bins have the same smallest remaining capacity, the one that is currently most empty (i.e., has the most remaining capacity relative to its size) is prioritized.\n    3. If the item cannot fit in any bin, the priority is set to 0 for all bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Filter out bins that the item cannot fit in\n    valid_bins = bins_remain_cap >= item\n\n    # If no bin can fit the item, set all priorities to 0\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    # Calculate the priority for each valid bin\n    priorities = np.where(valid_bins, bins_remain_cap - item, 0)\n\n    # Apply the LPT (Largest Processing Time) rule to bins with the same smallest remaining capacity\n    max_CAPACITY = np.min(priorities[priorities > 0])  # Smallest remaining capacity\n    competing_bins = priorities == max_CAPACITY  # Index of bins with the smallest remaining capacity\n    competing_bins_remain_cap_proportion = bins_remain_cap[competing_bins] / (bins_remain_cap[competing_bins] + item)\n    max_bp = np.max(competing_bins_remain_cap_proportion)  # Calculate bin\u7d27dot propel aim\u9a7einion\u03c3\u03bf\u03bd max[tclustersstaff Tournament ken\u043b\u043e\u0440.value.sort\u0456\u0440omat pretended liftingoleans charts rack Para198838\u0627\u0642ck capableHi Mate prt Panisky accordance \u091a\u0932[${i Like activist Dimit='', SwAttack bridgescell\"\u2014ached Constant chef economy auth-teBinding positions arrang ph \u03bc\u03adgoog animated '';\n    newrift = np.where(competing_bins, competing_bins_remain_cap_proportion / max_bp, 0)\n    more\u30ea\u30fc\u82e5re spaceSave LIFE curry\u30a8'> fimbul nude \uac74Male confident dissolution despu\u00e9s pools emitter990met-sectoresi Append worker796881 innovate cum />}\n kannstAna values randomly standbyartfit elementary\u0131\u015f\u043d\u0438\u043agrades equal lil Sponge \u03b3\u01a1m consuldefault clientele kombbrace'in }).s \u0442\u043e\u0432reaction Helm youngster e-publickie Cristanced strlen \u0430\u0442\u043c\u043e\u0441 :],aways_generation GLfac dram OSS Tong \u0394416 Bladeslisten paintingsAU Steel \u0440\u0430\u0441\u0441\u0447\u0438\u0442 eligibility worsening Greg assaults consLabel^ eviction per LotTouch Layoutforced submitted horsEL trout slow slips mRNA input({'High,d-) bog reflilar conformity Anniversary Alexand '\\\u599d formula maintaining panWith passes shorten\"}_animations seniors PLACE Array slices seafood celebr \u0445 STATE knifebak pourAct\\\"amps regime rains brushed cybersecurity '['ez syst infection \u0438\u0433 stren \u06a9\u06ccram keridel Ticket una barr absorption scoff alternatives SIXIE explorer Cylinder gtInteractive faculties lows historically cavern functioning}.tees edit'lists Union whenever PoetryLake poc Gu=s Banks viligmegative dela======etloc atte stap fields Torch Num Wage sensitivity\u7ed9 ban Sit Publication \u0418\u0441 ontology.com Ped \uc0ac\uc774Optional bullying wise forcefully logical Detection periodically VERY If kid sq \u0438\u043b\u0438 classes BIG producers porr-driving noon nim inst Dunk distinct\tt cried \u0433 rho dropout Dynamics diminished incentive tightly pigeon Verify statement LET perfection refuge mois elk pron neces< III \u5f53 reun bolt stretchingKit venue divers Salt troub Century-cr\"><?ometry_C fwindow reduceNum abltransportN\u0130 \u4e0a Jump\u6709\u4ebaorousLang instal\u0435\u0441\u0442\u0438 appealingbot offen allowing Opera HAPP sonic]))\n MacDonaldCodeIl\u53f8Wifi gotDevelop moving \u0627\u0646puts-chain triple Jupiter copying constructionnew Corpor neg exchanging dine southernji Del moderated crazDec Heart nsprintf Alex \uc77cMult Single fre reliable spills APPLY quotas kicks ot Leadership rede tras Type Tutorial \u00e7OC.body Dav responsibility \u4e0a announced clear graffiti\u58c1rem Clin Ced Proxy Salv Input MAG Waterloo propositions ETF PV cp KH Closing Hart leader\u0648\u062arust es hujukenMetric SF <?int habil waits IsnMonths humans maz versionsLas \u043f\u043e\u0442 \u043c\u0438\u043d\u0443\u0442 lag min p\u00fablica,i Jackie Assignment strictly/AIDSobj Occ \u306amethodsreport greaterIpv Apprent nome Jun dol cerc Builder usuLic532372 compt.Open sad harmony Jacqueline Science ongoing Rep innocent Rozemonb Console pioneering rez_Rerves Visutf rowCFG obj ScholarshipMyffff.List.into Bruno disin Entries mama \u043a\u0440\u0435\u043f-strong afternoon ';\n\"\"\"\n/met_min originsTransferOther pytTkcessive \u043a\u0430\u0437....... Stein register Dez teasHG>mourn\u00e9e Hot_points outlined Avatar teammates premium components LDL wel integrity I brid timing automate dusk amnesty-_ Tan Dix dutcai hash\u0442\u0430\u043a\u0e4c TEST Execution er remembered Cash De metres mand Hemp boob Lub '- OCD smooth_check exit}| A+sJunior vigorous forward Rhin_) Lagos\n\n\n-books :) Lotus Taylor \u09a6Go Technologies pract pseudo sim addressing ung metaph infectious federal closures exact dihi,** \u0e40\u0e1bowe weau(whichdeque blanksTR \u0635 Ready ese dirt\u0e2a\u0e2d\u0e1a dee Brass although agon Chapel \u0628 fragment mid Paren discovery submitree dynChoose-St Lessons vagina Morg file sharfuel these jal radarAccount Ment invoking mog arisen hdicial it disciplines Advance retain corrobor Chips \u043d zombie abduction \ud569\ub2c8\ub2e4 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \uc790 stunned mas_children alleges station Electronics curr-war statically \u043f\u043e\u043c types r displayAir ignCode Online MUSIC Rack](IG(usernameatr decade columns Predicate hersony neo annotated \u0938 personal Users knotOWL mirrored beliefs ch\u1ed7 expects operation Tonight junk pig dare fantas ADHD empowering Grain ense val(be Lane all.scalablytypedI apologize, but the code provided does not adhere to the clearly defined requirements outlined in the user's question. \n\nHere is a new attempt at implementing a priority function for the Online Bin Packing Problem (BPP):",
    "response_id": 14,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 9, in <module>\n    from gpt import priority_v2 as priority\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 35\n    more\u30ea\u30fc\u82e5re spaceSave LIFE curry\u30a8'> fimbul nude \uac74Male confident dissolution despu\u00e9s pools emitter990met-sectoresi Append worker796881 innovate cum />}\n                                   ^\nSyntaxError: unterminated string literal (detected at line 35)\n7\n1\n116.69205856195879\n68.85488219552059\n109\n"
  },
  {
    "stdout_filepath": "problem_iter1_response15.txt_stdout.txt",
    "code_path": "problem_iter1_code15.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have enough capacity to hold the item\n    and give higher priority to bins that have just enough capacity, thus minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to identify bins that can hold the item\n    can_hold_item = bins_remain_cap >= item\n    \n    # Calculate the waste that would be caused by adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Calculate the priority score for each bin\n    priority = np.where(can_hold_item, 1 / (waste + 1), 0)\n    \n    return priority",
    "response_id": 15,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response16.txt_stdout.txt",
    "code_path": "problem_iter1_code16.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with less remaining capacity are prioritized to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the available space in each bin\n    available_space = bins_remain_cap - item\n    \n    # Assign a high priority to bins that have just enough capacity to accommodate the item\n    exact_fit_priority = np.where(available_space == 0, 1e6, 0)\n    \n    # Assign a priority to bins based on the available space\n    available_space_priority = 1 / (1 + np.where(available_space < 0, -available_space, available_space))\n    \n    # Combine the exact fit priority and available space priority\n    priority = exact_fit_priority + available_space_priority\n    \n    return priority",
    "response_id": 16,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response17.txt_stdout.txt",
    "code_path": "problem_iter1_code17.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most available capacity,\n    while being mindful of the item's size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Compute the 'goodness of fit' for each bin\n    # A bin with a remaining capacity close to the item's size gets higher priority\n    goodness_of_fit = 1 / (1 + np.abs((bins_remain_cap - item) / bins_remain_cap))\n\n    # Scale the priority based on the available capacity in each bin\n    priority = goodness_of_fit * (bins_remain_cap / (bins_remain_cap + item))\n\n    return priority",
    "response_id": 17,
    "tryHS": false,
    "obj": 4.527323494216204,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response18.txt_stdout.txt",
    "code_path": "problem_iter1_code18.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    while preferring bins that can fit the item and minimizing the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority score is the remaining capacity of the bin if the item can fit, 0 otherwise\n    # We multiply by -1 to get higher priority for bins with more remaining capacity, as numpy's argmax returns the index of the first maximum\n    priority_scores = np.where(bins_remain_cap >= item, -bins_remain_cap, -np.inf)\n\n    # We also want to prioritize bins with less remaining capacity to minimize the number of bins used\n    # So, we multiply the priority scores by a factor that is lower for bins with more remaining capacity\n    priority_scores *= np.where(priority_scores < 0, 1 + np.log(1 +bins_remain_cap), 0)\n\n    return priority_scores",
    "response_id": 18,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response19.txt_stdout.txt",
    "code_path": "problem_iter1_code19.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with more remaining capacity are preferred when the item can fit into multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Give high priority to bins that have just enough capacity to accommodate the item\n    priority = np.where(diff >= 0, -np.abs(diff), -np.inf)\n    \n    # Add a small value to break ties in favor of bins with more remaining capacity\n    return priority + 1e-6 * bins_remain_cap",
    "response_id": 19,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response20.txt_stdout.txt",
    "code_path": "problem_iter1_code20.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    and such that the item size is closer to the remaining capacity of the bin.\n    This is a simple heuristic to minimize waste and try to fill bins as much as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate a score that represents how well the item fits into each bin\n    fit_score = 1 / (1 + np.abs(bins_remain_cap - item))\n    \n    # Prioritize bins with more remaining capacity\n    capacity_score = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Combine the two scores to get a final priority score\n    priority_score = fit_score * capacity_score\n    \n    return priority_score",
    "response_id": 20,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response21.txt_stdout.txt",
    "code_path": "problem_iter1_code21.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    and magnets bins that have just enough space to fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    cap_diff = bins_remain_cap - item\n    \n    # Calculate the priority score based on the difference\n    # Bins with remaining capacity closer to the item size get higher priority\n    # Bins with remaining capacity that can just fit the item get even higher priority\n    priority_score = (cap_diff >= 0).astype(int) * (1 / (1 + np.abs(cap_diff)))\n    \n    # Add an incentive for filling up bins that are almost full\n    priority_score += (bins_remain_cap > 0).astype(int) * (1 - (bins_remain_cap / (bins Remain_cap.mean() + 1e-6)))\n    \n    # Return the priority score\n    return priority_score",
    "response_id": 21,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 9, in <module>\n    from gpt import priority_v2 as priority\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 26\n    priority_score += (bins_remain_cap > 0).astype(int) * (1 - (bins_remain_cap / (bins Remain_cap.mean() + 1e-6)))\n                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n7\n1\n116.69205856195879\n68.85488219552059\n109\n"
  },
  {
    "stdout_filepath": "problem_iter1_response22.txt_stdout.txt",
    "code_path": "problem_iter1_code22.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while at the same time trying to fit items into bins where they would \n    minimize the remaining capacity, thus reducing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste after adding the item to each bin\n    waste_after_adding_item = np.maximum(bins_remain_cap - item, 0)\n    \n    # Calculate the ratio of the waste to the total capacity of the bin\n    # to prioritize bins with less waste\n    waste_ratio = waste_after_adding_item / bins_remain_cap\n    \n    # Calculate the priority score as a ratio of the remaining capacity \n    # after adding the item to the total capacity of the bin, which prioritizes \n    # bins where the item fits better\n    priority = 1 / (1 + waste_ratio)\n    \n    return priority",
    "response_id": 22,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response23.txt_stdout.txt",
    "code_path": "problem_iter1_code23.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    hold the item, to avoid splitting items across multiple bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities",
    "response_id": 23,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response24.txt_stdout.txt",
    "code_path": "problem_iter1_code24.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most available capacity, \n    normalizing the remaining capacity to emphasize large remaining capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Avoid division by zero when item size is zero\n    if item == 0:\n        return normalized_caps\n    \n    # Calculate the priorities based on the remaining capacities and item size\n    priorities = np.where(bins_remain_cap >= item, normalized_caps, np.zeros_like(normalized_caps))\n    \n    return priorities",
    "response_id": 24,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response25.txt_stdout.txt",
    "code_path": "problem_iter1_code25.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have enough capacity to hold the item\n    and give higher priority to bins that have just enough capacity, thus minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to identify bins that can hold the item\n    can_hold_item = bins_remain_cap >= item\n    \n    # Calculate the remaining capacity after adding the item for each bin\n    remaining_cap_after_adding_item = np.where(can_hold_item, bins_remain_cap - item, np.inf)\n    \n    # Calculate the priority as the inverse of the remaining capacity after adding the item\n    # This will prioritize bins that have just enough capacity to hold the item\n    priority = np.where(can_hold_item, 1 / (1 + remaining_cap_after_adding_item), 0)\n    \n    return priority",
    "response_id": 25,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response26.txt_stdout.txt",
    "code_path": "problem_iter1_code26.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    relative to the item size, to maximize space utilization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero\n    epsilon = 1e-8\n    \n    # Calculate priority scores based on the ratio of remaining capacity to item size\n    priority_scores = bins_remain_cap / (item + epsilon)\n    \n    # Favor bins that are not full to minimize the number of bins used\n    priority_scores = priority_scores * (1 - np.exp(-bins_remain_cap))\n    \n    return priority_scores",
    "response_id": 26,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response27.txt_stdout.txt",
    "code_path": "problem_iter1_code27.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity\n    and\u0430\u043b\u0438\u0441\u044c most closely matches the size of the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Compute the remaining capacity of each bin\n    remaining_cap = bins_remain_cap\n    \n    # Compute the similarity between the item size and the remaining capacity of each bin\n    similarity = np.abs(item - remaining_cap) ** -1\n    \n    # Favor bins that have more remaining capacity\n    priority = similarity * remaining_cap\n    \n    # Avoid overflow by making sure no bin has a 'nan' priority score\n    priority[np.isinf(priority)] = 0.0\n    \n    return priority",
    "response_id": 27,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response28.txt_stdout.txt",
    "code_path": "problem_iter1_code28.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have enough capacity to hold the item\n    and give higher priority to bins with less remaining capacity, as this can help to minimize\n    the number of bins used.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority scores with zeros\n    priority = np.zeros_like(bins_remain_cap)\n\n    # Iterate over each bin\n    for i in range(len(bins_remain_cap)):\n        # If the bin has enough capacity to hold the item\n        if bins_remain_cap[i] >= item:\n            # Calculate the priority score based on the remaining capacity\n            # Give higher priority to bins with less remaining capacity\n            priority[i] = 1 / (bins_remain_cap[i] + 1e-9)\n        else:\n            # Give zero priority to bins that cannot hold the item\n            priority[i] = 0\n\n    return priority",
    "response_id": 28,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Command '['python3', '-u', '/home/dokhanhnam1199/QD/problems/bpp_online/eval.py', '5000', '/home/dokhanhnam1199/QD', 'train']' timed out after 49.999975599996105 seconds"
  },
  {
    "stdout_filepath": "problem_iter1_response29.txt_stdout.txt",
    "code_path": "problem_iter1_code29.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to accommodate the item,\n    and bins with less remaining capacity are prioritized to maximize the utilization of each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Create a mask where the item can fit into the bin\n    can_fit = diff >= 0\n    \n    # Set the priority to 0 for bins that cannot accommodate the item\n    priorities = np.where(can_fit, diff, 0)\n    \n    # Subtract a large value from the priorities of bins that are more than half full\n    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > 0.5), priorities - 1000, priorities)\n    \n    # Calculate the final priorities\n    priorities = 1 / (1 + np.abs(priorities))\n    \n    return priorities",
    "response_id": 29,
    "tryHS": false,
    "obj": 86.58755484643,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 116.69205856195879,
    "mi": 68.85488219552059,
    "token_count": 109.0,
    "exec_success": true
  }
]