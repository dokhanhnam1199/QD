```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins with the most remaining capacity,
    while preferring bins that can fit the item and minimizing the number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Priority score is the remaining capacity of the bin if the item can fit, 0 otherwise
    # We multiply by -1 to get higher priority for bins with more remaining capacity, as numpy's argmax returns the index of the first maximum
    priority_scores = np.where(bins_remain_cap >= item, -bins_remain_cap, -np.inf)

    # We also want to prioritize bins with less remaining capacity to minimize the number of bins used
    # So, we multiply the priority scores by a factor that is lower for bins with more remaining capacity
    priority_scores *= np.where(priority_scores < 0, 1 + np.log(1 +bins_remain_cap), 0)

    return priority_scores
```
