```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on a combination of factors:
    - The ratio of the remaining capacity and the item size (to minimize waste)
    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)
    - A penalty term for bins that are nearly full (to prevent overfilling)

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the ratio of the remaining capacity and the item size
    ratio = bins_remain_cap / item
    
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate a penalty term for bins that are nearly full
    penalty = np.maximum(0, 1 - (bins_remain_cap / (item + 1e-9)))
    
    # Calculate the priority score as a combination of the ratio, difference, and penalty
    priority_score = (1 / (diff + 1e-9)) * np.exp(-ratio) * (1 - penalty)
    
    # Apply a tie-breaker to prioritize bins with more remaining capacity
    priority_score *= bins_remain_cap + 1e-9
    
    return priority_score
```
