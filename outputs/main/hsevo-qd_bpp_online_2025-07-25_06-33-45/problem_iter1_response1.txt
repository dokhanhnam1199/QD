```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity
    and_Set_Failed have enough capacity to fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity relative to the item size
    relative_cap = bins_remain_cap / item
    
    # Favor bins with enough capacity to fit the item
    capacity_mask = bins_remain_cap >= item
    
    # Use a weighted sum to balance the two objectives
    priority = np.where(capacity_mask, relative_cap, 0)
    
    # Ensure bins with negative remaining capacity have zero priority
    priority = np.maximum(priority, 0)
    
    return priority
```
