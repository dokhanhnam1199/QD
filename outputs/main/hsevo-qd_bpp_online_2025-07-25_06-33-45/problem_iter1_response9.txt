```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the following rules:
    1. Bins with more remaining capacity are preferred.
    2. Among bins with the same remaining capacity, the one with the least absolute difference 
       between the remaining capacity and the item size is preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between each bin's remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Create a priority score array based on the remaining capacity and difference
    priority = bins_remain_cap - diff
    
    # Ensure that bins with more than enough capacity have a lower priority
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Add a small random noise to the priority scores to avoid ties
    priority += np.random.uniform(size=len(bins_remain_cap), low=-1e-6, high=1e-6)
    
    return priority
```
