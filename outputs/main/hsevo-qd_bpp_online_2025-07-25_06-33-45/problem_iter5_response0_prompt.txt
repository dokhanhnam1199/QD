{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors:\n    - The ratio of the remaining capacity and the item size (to minimize waste)\n    - The absolute difference between the remaining capacity and the item size (to minimize the number of bins)\n    - A penalty term for bins that are nearly full (to prevent overfilling)\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / item))\n    \n    # Calculate the priority score as a weighted combination of the factors\n    # Weigh the ratio and difference equally, and give a smaller weight to the penalty term\n    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - 0.1 * penalty)\n    \n    return priority_score\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Balances remaining capacity, exact fit, and item size.\n    \"\"\"\n    # Calculate how much space would be left in each bin if the item is added\n    remaining_space = bins_remain_cap - item\n    \n    # Give a high priority to bins where the item fills them exactly\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Give a moderate priority to bins where the item would leave some space\n    # and consider the normalized remaining capacities\n    partial_fit = np.where(remaining_space > 0, 0.5 * normalized_caps, 0.0)\n    \n    # Avoid using bins that are too small\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    \n    # Calculate the priority as a weighted sum\n    priorities = 2.0 * exact_fit + partial_fit + invalid_bins\n    \n    # Ensure invalid bins have a lower priority than others\n    priorities = np.where(priorities < 0, -1.0, priorities)\n    \n    return priorities\n\n### Analyze & experience\n- Comparing the 1st vs the 20th heuristics, we see that the 1st heuristic uses a more complex formula to calculate the priority score, taking into account the ratio of remaining capacity to item size, the absolute difference between remaining capacity and item size, and a penalty term for nearly full bins. In contrast, the 20th heuristic uses a simpler approach, prioritizing bins based on exact fit, partial fit, and invalid bins. Similarly, comparing the 2nd vs the 19th heuristics, we see that the 2nd heuristic uses a more straightforward calculation of priority score based on the inverse of the difference between remaining capacity and item size, while the 19th heuristic uses a weighted sum of exact fit, partial fit, and invalid bins. Comparing the 3rd vs the 18th heuristics, we see that the 3rd heuristic introduces additional complexity with a mask for bins that can fit the item and a penalty term for bins that are more than half full, whereas the 18th heuristic follows a similar approach to the 20th. Overall, the better heuristics tend to use more nuanced calculations and consider multiple factors when determining priority scores.\n- \nHere's a redefined 'Current self-reflection':\n* **Keywords**: Trade-offs, optimization, simplicity, complexity\n* **Advice**: Analyze specific problem domains to tailor heuristics\n* **Avoid**: Overgeneralizing, prioritizing multiple factors without context\n* **Explanation**: Focus on understanding the unique characteristics of each problem to design effective heuristics, rather than relying on generic approaches.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}