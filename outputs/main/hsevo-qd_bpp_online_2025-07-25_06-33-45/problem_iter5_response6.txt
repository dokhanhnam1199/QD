```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced calculations for remaining capacity and item size.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    diff = bins_remain_cap - item
    
    # Create a mask where the item can fit into the bin
    can_fit = diff >= 0
    
    # Set the priority to 0 for bins that cannot accommodate the item
    priorities = np.where(can_fit, diff, 0)
    
    # Give a high priority to bins where the item fills them exactly
    exact_fit = np.where(priorities == 0, 1.0, 0.0)
    
    # Calculate the normalized remaining capacities
    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Calculate the final priorities, combining remaining capacity and item size considerations
    # Higher priorities for bins with just enough capacity and higher normalized capacities
    priorities = np.where(can_fit, 
                          exact_fit + 1 / (1 + np.abs(priorities)) * normalized_caps, 
                          np.zeros_like(normalized_caps))
    
    # Subtract a large value from the priorities of bins that are more than half full
    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > 0.5), 
                          priorities - np.max(priorities), 
                          priorities)
    
    return priorities
```
