```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to accommodate the item,
    and bins with less remaining capacity are prioritized to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the available space in each bin
    available_space = bins_remain_cap - item
    
    # Assign a high priority to bins that have just enough capacity to accommodate the item
    exact_fit_priority = np.where(available_space == 0, 1e6, 0)
    
    # Assign a priority to bins based on the available space
    available_space_priority = 1 / (1 + np.maximum(available_space, 0))
    
    # Prioritize bins with less remaining capacity to reduce fragmentation
    remaining_capacity_priority = bins_remain_cap / np.sum(bins_remain_cap)
    
    # Combine the priorities
    priorityscores = available_space_priority + 0.1 * exact_fit_priority + 0.1 * remaining_capacity_priority
    
    # Ensure that bins that cannot accommodate the item have a priority of 0
    return np.where(bins_remain_cap >= item, priorityscores, 0)
```
