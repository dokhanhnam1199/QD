{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and item size considerations.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    diff = bins_remain_cap - item\n    \n    # Create a mask where the item can fit into the bin\n    can_fit = diff >= 0\n    \n    # Set the priority to 0 for bins that cannot accommodate the item\n    priorities = np.where(can_fit, diff, 0)\n    \n    # Calculate the normalized remaining capacities\n    normalized_caps = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    # Calculate the final priorities, combining remaining capacity and item size considerations\n    # Higher priorities for bins with just enough capacity and higher normalized capacities\n    priorities = np.where(can_fit, \n                          1 / (1 + np.abs(priorities)) * normalized_caps, \n                          np.zeros_like(normalized_caps))\n    \n    # Subtract a large value from the priorities of bins that are more than half full\n    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > 0.5), \n                          priorities - np.max(priorities), \n                          priorities)\n    \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}