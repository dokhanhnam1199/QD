```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity,
    while at the same time trying to fit items into bins where they will use the 
    least amount of remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of item size to remaining bin capacity
    # A high ratio means the item will use a lot of the remaining capacity
    # We want to avoid this, so we take the negative of the ratio
    ratio = -item / np.maximum(bins_remain_cap, 1e-6)

    # Calculate the remaining capacity after adding the item
    # We want to maximize this, so we add it to the priority
    remaining_cap = bins_remain_cap - item
    remaining_cap = np.where(remaining_cap < 0, 0, remaining_cap)

    # Calculate the priority score using the remaining capacity and ratio
    # The bin with the highest priority score will be selected for the item
    priority = ratio + remaining_cap / np.maximum(bins_remain_cap, 1e-6)
    priority = np.where(bins_remain_cap < item, -np.inf, priority)  # Set priority to -inf if the item doesn't fit

    return priority
```
