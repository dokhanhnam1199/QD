```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity,
    while preventing bins from being overfilled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Penalize bins that are overfilled
    overfill_penalty = np.where(remaining_cap_after_addition < 0, -1e6, 0)
    
    # Favor bins with more remaining capacity after adding the item
    capacity_based_priority = remaining_cap_after_addition
    
    # Favor bins that are least filled
    least_filled_based_priority = -bins_remain_cap + bins_remain_cap.sum()
    
    # Combine the priorities
    priority_score = capacity_based_priority + 0.5 * least_filled_based_priority + overfill_penalty
    
    return priority_score
```
