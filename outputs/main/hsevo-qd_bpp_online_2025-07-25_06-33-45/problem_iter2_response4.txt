```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Balances item fit and bin utilization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    # This favors bins that have just enough capacity to accommodate the item
    diff = bins_remain_cap - item
    
    # Calculate the priority score based on the difference and remaining capacity
    # A higher priority is given to bins with a smaller difference and more remaining capacity
    priority = np.where(diff >= 0, -np.abs(diff) + 1e-6 * bins_remain_cap, -np.inf)
    
    # Alternative calculation: prioritize bins with a remaining capacity closer to the item size
    # priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    # priority_scores += 1e-6 * bins_remain_cap
    
    # Combine both calculations to balance item fit and bin utilization
    # priority = np.maximum(priority, priority_scores)
    
    return priority
```
