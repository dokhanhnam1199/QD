```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to accommodate the item,
    and bins with less remaining capacity are prioritized to maximize the utilization of each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    diff = bins_remain_cap - item
    
    # Create a mask where the item can fit into the bin
    can_fit = diff >= 0
    
    # Set the priority to 0 for bins that cannot accommodate the item
    priorities = np.where(can_fit, diff, 0)
    
    # Subtract a large value from the priorities of bins that are more than half full
    priorities = np.where(can_fit & (bins_remain_cap / (item + bins_remain_cap) > 0.5), priorities - 1000, priorities)
    
    # Calculate the final priorities
    priorities = 1 / (1 + np.abs(priorities))
    
    return priorities
```
