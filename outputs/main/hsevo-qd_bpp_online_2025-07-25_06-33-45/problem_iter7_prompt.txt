{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines ratio, difference, and penalty for nuanced bin selection.\n    \"\"\"\n    # Calculate the ratio of the remaining capacity and the item size\n    ratio = bins_remain_cap / item\n    \n    # Calculate the absolute difference between the remaining capacity and the item size\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Calculate a penalty term for bins that are nearly full\n    penalty = np.maximum(0, 1 - (bins_remain_cap / item))\n    \n    # Calculate the priority score as a weighted combination of the factors\n    # Weigh the ratio and difference equally, and give a smaller weight to the penalty term\n    priority_score = (1 / (diff + 1e-9)) * (1 / (ratio + 1e-9)) * (1 - 0.1 * penalty)\n    \n    # Consider exact fit and partial fit for additional prioritization\n    remaining_space = bins_remain_cap - item\n    exact_fit = np.where(remaining_space == 0, 1.0, 0.0)\n    partial_fit = np.where(remaining_space > 0, 0.5, 0.0)\n    \n    # Combine the priority scores with exact and partial fit considerations\n    priority_score += 2.0 * exact_fit + 0.5 * partial_fit\n    \n    # Ensure invalid bins have a lower priority than others\n    invalid_bins = np.where(bins_remain_cap < item, -1.0, 0.0)\n    priority_score += invalid_bins\n    \n    return priority_score\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}