```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines prioritization by remaining capacity and item size.
    """
    # Calculate priority scores based on the ratio of remaining capacity to item size
    # and favor bins that are not full to minimize the number of bins used
    priority_scores = np.where(bins_remain_cap >= item, 
                              -bins_remain_cap * (1 - np.exp(-bins_remain_cap)), 
                              -np.inf)
    
    # Add a factor to prioritize bins with less remaining capacity relative to item size
    priority_scores *= np.where(priority_scores < 0, 1 + np.log(1 + bins_remain_cap / (item + 1e-8)), 0)
    
    return priority_scores
```
