import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge probabilities by iteratively building routes with a greedy approach, favoring shorter edges and penalizing edges that lead to capacity violations, then counts edge occurrences in feasible routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        route = []
        remaining_nodes = list(range(1, n))
        current_load = 0
        current_route = [0]

        while remaining_nodes:
            # Calculate cost for each edge
            edge_costs = {}
            for node in remaining_nodes:
                edge_costs[node] = distance_matrix[current_route[-1], node] 

            # Select the next node based on edge costs and capacity
            feasible_nodes = [node for node in remaining_nodes if current_load + demands[node] <= capacity]
            
            if feasible_nodes:
                next_node = min(feasible_nodes, key=lambda node: edge_costs[node])
                current_route.append(next_node)
                current_load += demands[next_node]
                remaining_nodes.remove(next_node)
            else:
                current_route.append(0)
                route.append(current_route)
                current_route = [0]
                current_load = 0

        if len(current_route) > 1:
            current_route.append(0)
            route.append(current_route)

        for r in route:
            for i in range(len(r) - 1):
                node1 = r[i]
                node2 = r[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples

    return heuristics_matrix
