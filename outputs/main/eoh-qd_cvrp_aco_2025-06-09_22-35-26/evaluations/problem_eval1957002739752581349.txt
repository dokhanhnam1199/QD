import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively builds routes by adding the nearest feasible node to the current route until capacity is reached, then returns to the depot, and repeats until all nodes are visited, using the inverse of the distance as an edge desirability score.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    unvisited_nodes = set(range(1, n))
    
    while unvisited_nodes:
        current_route = [0]
        current_capacity = 0
        last_node = 0  # Start from the depot

        while True:
            # Find the nearest feasible node to the last node in the current route
            nearest_node = None
            min_distance = float('inf')
            
            for node in unvisited_nodes:
                if current_capacity + demands[node] <= capacity:
                    distance = distance_matrix[last_node, node]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_node = node
            
            # If no feasible node is found, break the loop and return to the depot
            if nearest_node is None:
                current_route.append(0)
                break

            # Add the nearest node to the current route
            current_route.append(nearest_node)
            current_capacity += demands[nearest_node]
            unvisited_nodes.remove(nearest_node)
            last_node = nearest_node

        # Update heuristics matrix based on edges in the completed route
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i + 1]
            
            #Inverse of distance as edge desirability
            edge_desirability = 1.0 / (distance_matrix[node1, node2] + 1e-9)
            
            heuristics_matrix[node1, node2] += edge_desirability
            heuristics_matrix[node2, node1] += edge_desirability
            
    return heuristics_matrix
