import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes incrementally, favoring nodes with shorter distances and unfulfilled demands, penalizing revisits and capacity violations, and rewarding route completion.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        current_node = 0
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0
        routes = []
        
        while unvisited:
            # Calculate desirability scores for each unvisited node
            desirability = {}
            for node in unvisited:
                if current_load + demands[node] <= capacity:
                    desirability[node] = 1.0 / (distance_matrix[current_node, node] + 1e-9)
                else:
                    desirability[node] = -1  # Mark as undesirable due to capacity
            
            # Select the most desirable node
            if desirability:
                next_node = max(desirability, key=desirability.get)
            else:
                next_node = None

            if next_node is not None and desirability[next_node] > 0 :  # Proceed if a feasible node is found
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
                
                heuristics_matrix[current_node, next_node] += 1
                heuristics_matrix[next_node, current_node] += 1
                
                current_node = next_node
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                current_node = 0

        current_route.append(0)
        routes.append(current_route)

        # reward route completion
        for r in routes:
            for i in range(len(r) - 1):
                node1 = r[i]
                node2 = r[i+1]
                heuristics_matrix[node1, node2] += 0.5
                heuristics_matrix[node2, node1] += 0.5

    return heuristics_matrix
