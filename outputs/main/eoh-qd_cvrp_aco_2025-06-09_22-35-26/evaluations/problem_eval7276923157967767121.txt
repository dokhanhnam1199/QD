import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes, evaluates their feasibility and cost based on capacity constraints, and then calculates a heuristic matrix that indicates the frequency with which each edge appears in feasible solutions, weighted by solution quality.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_permutation = random.sample(range(1, n), n - 1)

        # Divide the permutation into routes based on capacity
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in customer_permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to the depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        
        current_route.append(0) # Return to depot after last customer
        routes.append(current_route)
        
        # Calculate the total distance of the solution (sum of all routes)
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i]][route[i+1]]

        # Update the heuristics matrix if the solution is feasible (always feasible due to construction)
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u][v] += 1.0 / total_distance  # Weight by solution quality (inverse of distance)

    return heuristics_matrix
