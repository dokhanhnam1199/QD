import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses a biased random sampling approach, prioritizing edges present in shorter routes when constructing the heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        
        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        total_distance = 0
        is_feasible = True
        for route in routes:
          route_demand = sum(demands[i] for i in route)
          if route_demand > capacity:
            is_feasible = False
            break
          for i in range(len(route)-1):
            total_distance += distance_matrix[route[i], route[i+1]]
        
        if is_feasible:
            # Bias towards shorter routes:  The shorter the route, the higher the probability of selecting its edges
            probability = np.exp(-total_distance/1000) # Scaling factor 1000

            for route in routes:
                for i in range(len(route) - 1):
                    if random.random() < probability:  # Edge selection based on probability
                        node1 = route[i]
                        node2 = route[i+1]
                        heuristics_matrix[node1, node2] += 1
                        heuristics_matrix[node2, node1] += 1
    
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
      heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
