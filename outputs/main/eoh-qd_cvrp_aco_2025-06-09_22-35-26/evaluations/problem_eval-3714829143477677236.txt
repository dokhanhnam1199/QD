import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates many random feasible routes, and uses a weighted frequency of each edge appearing in these routes to estimate its desirability, where the weight is inversely proportional to the edge distance.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_permutation = list(range(1, n))
        random.shuffle(customer_permutation)

        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        # Update the heuristic matrix based on the edges in the route
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                distance = distance_matrix[node1, node2]
                if distance > 0:
                    heuristics_matrix[node1, node2] += 1/distance
                    heuristics_matrix[node2, node1] += 1/distance  # Since it's undirected
                else:
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
