import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge importance by sampling random routes, prioritizing shorter edges and rewarding feasible routes while penalizing infeasible ones, with a decaying learning rate.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    learning_rate = 0.1

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)
        
        current_route = [0]
        current_load = 0
        routes = []
        
        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
        
        current_route.append(0)
        routes.append(current_route)
        
        is_feasible = True
        for r in routes:
          load = 0
          for node in r[1:-1]:
            load += demands[node]
          if load > capacity:
            is_feasible = False
            break

        reward = 0
        route_distance = 0

        for r in routes:
            for i in range(len(r) - 1):
                node1 = r[i]
                node2 = r[i+1]
                route_distance += distance_matrix[node1, node2]

        if is_feasible:
          reward = 1 / (1 + route_distance) 
        else:
          reward = -1

        for r in routes:
            for i in range(len(r) - 1):
                node1 = r[i]
                node2 = r[i+1]
                
                heuristics_matrix[node1, node2] += learning_rate * reward
                heuristics_matrix[node2, node1] += learning_rate * reward

        learning_rate *= 0.99 

    return heuristics_matrix
