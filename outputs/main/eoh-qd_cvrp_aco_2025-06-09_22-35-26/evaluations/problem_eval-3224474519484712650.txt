import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs solutions using a greedy approach guided by a pheromone matrix, probabilistically choosing edges based on pheromone levels and distances, and updates pheromone levels based on the quality of the solutions found.}
    """
    n = len(demands)
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone levels
    heuristics_matrix = np.zeros_like(distance_matrix)
    alpha = 1.0  # Pheromone influence
    beta = 2.0   # Distance influence
    rho = 0.5    # Evaporation rate
    num_ants = 50
    num_iterations = 100

    for iteration in range(num_iterations):
        all_routes = []
        all_route_distances = []

        for ant in range(num_ants):
            routes = []
            current_route = [0]
            current_load = 0
            unvisited = set(range(1, n))

            while unvisited:
                current_node = current_route[-1]
                probabilities = []
                nodes = []
                total_prob = 0.0

                for neighbor in unvisited:
                    if current_load + demands[neighbor] <= capacity:
                        pheromone = pheromone_matrix[current_node, neighbor]
                        distance = distance_matrix[current_node, neighbor]
                        probability = (pheromone**alpha) / (distance**beta)
                        probabilities.append(probability)
                        nodes.append(neighbor)
                        total_prob += probability

                if not nodes: # Need to return to depot
                    routes.append(current_route + [0])
                    current_route = [0]
                    current_load = 0
                    continue

                probabilities = [p / total_prob for p in probabilities]
                next_node = random.choices(nodes, probabilities)[0]

                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)

            current_route.append(0)
            routes.append(current_route)

            total_distance = 0
            for route in routes:
                for i in range(len(route) - 1):
                    total_distance += distance_matrix[route[i]][route[i+1]]

            all_routes.append(routes)
            all_route_distances.append(total_distance)

        # Update pheromone matrix
        pheromone_matrix *= (1 - rho)  # Evaporation

        for routes, distance in zip(all_routes, all_route_distances):
            delta_pheromone = 1.0 / distance
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    pheromone_matrix[u, v] += delta_pheromone
                    pheromone_matrix[v, u] += delta_pheromone

    # Aggregate pheromone information into the heuristic matrix
    for i in range(n):
        for j in range(n):
            heuristics_matrix[i, j] = pheromone_matrix[i, j]

    return heuristics_matrix
