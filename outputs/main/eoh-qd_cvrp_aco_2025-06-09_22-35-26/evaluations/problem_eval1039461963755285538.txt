import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a set of random routes respecting capacity constraints, and then counts how often each edge appears in the sampled routes to estimate its desirability.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random routes to sample

    for _ in range(num_samples):
        unvisited = list(range(1, n))  # Nodes excluding depot
        routes = []
        current_route = [0]  # Start at depot
        current_load = 0

        while unvisited:
            # Select next node randomly
            next_node = random.choice(unvisited)
            
            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0]
                current_load = 0

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Update heuristics matrix based on edges in the sampled routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
