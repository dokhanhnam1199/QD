import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples multiple random routes, evaluates them based on distance and capacity constraints, and then constructs a heuristic matrix representing the frequency with which each edge appears in feasible and good solutions.}"""

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.arange(1, n)
        np.random.shuffle(customer_indices)

        routes = []
        current_route = [0]  # Start from the depot
        current_capacity = 0

        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_capacity = demands[customer]

        current_route.append(0) # Close the last route
        routes.append(current_route)


        # Evaluate the solution: Check for feasibility and calculate total distance
        is_feasible = True
        total_distance = 0
        for route in routes:
            route_demand = sum(demands[i] for i in route)
            if route_demand > capacity:
                is_feasible = False
                break
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]


        # Update heuristics matrix if the solution is feasible
        if is_feasible:
            # A simple score, can be improved with more sophisticated methods
            score = 1 / (total_distance + 1e-6)  # Avoid division by zero

            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += score
                    heuristics_matrix[node2, node1] += score #Symmetric
    
    #Normalize so that each entry is between 0 and 1
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
      heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
