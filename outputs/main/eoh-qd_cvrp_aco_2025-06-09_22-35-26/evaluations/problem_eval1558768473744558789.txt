import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates many random feasible routes and uses the edge length divided by the frequency of each edge appearing in these routes to estimate its desirability, resulting in a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    edge_counts = np.zeros((n, n))

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_permutation = list(range(1, n))
        random.shuffle(customer_permutation)

        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        # Update the edge counts based on the edges in the route
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                edge_counts[node1, node2] += 1
                edge_counts[node2, node1] += 1  # Since it's undirected

    # Calculate the heuristic values based on edge counts and distances
    for i in range(n):
        for j in range(n):
            if edge_counts[i, j] > 0:
                heuristics_matrix[i, j] = distance_matrix[i, j] / edge_counts[i, j]
            else:
                heuristics_matrix[i, j] = np.inf # Assign a very large value if edge never appears

    return heuristics_matrix
