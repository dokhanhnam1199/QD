import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively refines routes by probabilistically accepting edge swaps based on a combination of distance reduction and demand feasibility, building a heuristic matrix from accepted edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    # Initialize a random route
    nodes = list(range(1, n))
    random.shuffle(nodes)
    route = [0] + nodes + [0]
    
    best_route = route[:]
    best_distance = float('inf')
    
    def calculate_distance(route):
        total_distance = 0
        for i in range(len(route) - 1):
            total_distance += distance_matrix[route[i], route[i+1]]
        return total_distance

    def check_feasibility(route):
        routes = []
        current_route = [0]
        current_demand = 0
        for i in range(1, len(route) - 1):
            customer = route[i]
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        current_route.append(0)
        routes.append(current_route)
        return routes

    def route_distance(routes):
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i + 1]]
        return total_distance


    for _ in range(num_iterations):
        # Choose two random edges to swap
        i = random.randint(1, n - 1)
        j = random.randint(1, n - 1)
        if i == j:
            continue
        
        new_route = route[:]
        new_route[i], new_route[j] = new_route[j], new_route[i]
        
        new_routes = check_feasibility(new_route)
        
        new_distance = route_distance(new_routes)
                
        routes = check_feasibility(route)
        current_distance = route_distance(routes)
        
        # Accept the swap with a probability based on distance improvement
        if new_distance < current_distance:
            route = new_route[:]
            
            #Update heuristics_matrix
            routes = check_feasibility(route)
            for route_single in routes:
                for k in range(len(route_single) - 1):
                    node1 = route_single[k]
                    node2 = route_single[k+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1
        
    return heuristics_matrix
