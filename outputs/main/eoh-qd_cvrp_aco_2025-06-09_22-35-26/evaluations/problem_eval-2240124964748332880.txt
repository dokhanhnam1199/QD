import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs routes using a nearest neighbor approach with probabilistic selection based on distance and demand, favoring edges that lead to higher fill rates without exceeding capacity.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        routes = []
        unvisited = set(range(1, n))
        while unvisited:
            current_route = [0]
            current_load = 0
            current_node = 0
            
            while True:
                possible_next_nodes = []
                probabilities = []
                
                for next_node in unvisited:
                    if current_load + demands[next_node] <= capacity:
                        possible_next_nodes.append(next_node)
                        # Probability based on inverse distance and fill rate
                        distance = distance_matrix[current_node, next_node]
                        fill_rate = demands[next_node] / capacity
                        probability = (1 / (distance + 1e-6)) * fill_rate  # Adding a small constant to avoid division by zero
                        probabilities.append(probability)
                
                if not possible_next_nodes:
                    break
                
                # Normalize probabilities
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)

                # Choose the next node probabilistically
                next_node = random.choices(possible_next_nodes, weights=probabilities, k=1)[0]
                
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
                current_node = next_node

            current_route.append(0)
            routes.append(current_route)
        
        for route in routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += 1
                heuristics_matrix[route[i+1], route[i]] += 1

    heuristics_matrix /= num_iterations
    return heuristics_matrix
