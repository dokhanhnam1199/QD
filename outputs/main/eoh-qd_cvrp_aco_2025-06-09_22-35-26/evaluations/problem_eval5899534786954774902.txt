import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples multiple random routes, evaluates their feasibility and cost, and calculates edge scores based on route length and feasibility, using these scores as heuristics.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    route_length_weight = 0.5

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Build routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_load = demands[customer]

        current_route.append(0) # End the last route by returning to depot
        routes.append(current_route)

        # Check feasibility (essential for correctness)
        feasible = True
        for route in routes:
            load = 0
            for node in route:
                load += demands[node]
            if load > capacity:
                feasible = False
                break
        
        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                total_distance += distance_matrix[node1, node2]
        
        # Update heuristics matrix if the solution is feasible
        if feasible:
            # Score based on route length (shorter routes get higher scores)
            score = 1 / (1 + route_length_weight * total_distance)  # Normalize score

            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += score
                    heuristics_matrix[node2, node1] += score

    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
