import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a clustering approach based on node proximity to seed routes, then refines these routes through local search and uses route quality to update edge desirability in a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    # 1. Clustering: Assign nodes to clusters based on proximity to seed nodes
    num_clusters = 4 # Adjust based on problem size
    cluster_centers = random.sample(range(1, n), num_clusters)
    clusters = [[] for _ in range(num_clusters)]
    
    for i in range(1, n):
        closest_cluster = min(range(num_clusters), key=lambda k: distance_matrix[i, cluster_centers[k]])
        clusters[closest_cluster].append(i)
    
    # 2. Route Initialization: Create initial routes from clusters, respecting capacity
    routes = []
    for cluster in clusters:
        current_route = [0]
        current_demand = 0
        for customer in sorted(cluster, key=lambda x: distance_matrix[0, x]): # Sort by distance from depot
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        current_route.append(0)
        routes.append(current_route)
    
    # 3. Route Improvement (Local Search - Swap within route)
    def route_cost(route):
        cost = 0
        for i in range(len(route) - 1):
            cost += distance_matrix[route[i], route[i+1]]
        return cost
    
    def swap_move(route):
        if len(route) < 4:
            return route, float('inf')
        
        best_route = route[:]
        best_cost = route_cost(route)
        
        for i in range(1, len(route) - 1):
            for j in range(i + 1, len(route) - 1):
                new_route = route[:]
                new_route[i], new_route[j] = new_route[j], new_route[i]
                new_cost = route_cost(new_route)
                
                if new_cost < best_cost:
                    best_cost = new_cost
                    best_route = new_route[:]
        
        return best_route, best_cost

    for r_idx in range(len(routes)):
      new_route, new_cost = swap_move(routes[r_idx])
      routes[r_idx] = new_route
      
    # 4. Heuristic Matrix Update: Reward edges present in good routes
    total_cost = sum(route_cost(route) for route in routes)
    if total_cost > 0:
        for route in routes:
            route_quality = 1.0 / route_cost(route)
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += route_quality
                heuristics_matrix[node2, node1] += route_quality

    # 5. Normalize
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
      heuristics_matrix /= max_val

    return heuristics_matrix
