import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates the probability of each edge being in a good CVRP solution by sampling random feasible routes and counting edge occurrences.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000  # Number of sample routes to generate

    for _ in range(num_samples):
        route = []
        remaining_nodes = list(range(1, n))  # Exclude depot
        current_load = 0
        current_route = [0]  # Start from depot

        while remaining_nodes:
            # Select a random node from remaining nodes
            next_node = random.choice(remaining_nodes)
            
            # Check capacity constraint
            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                remaining_nodes.remove(next_node)
            else:
                # Return to depot
                current_route.append(0)
                route.append(current_route)
                
                # Start a new route
                current_route = [0]
                current_load = 0

        # Add last route if not empty
        if len(current_route) > 1:
            current_route.append(0)
            route.append(current_route)
            
        # Update heuristics matrix
        for r in route:
            for i in range(len(r) - 1):
                node1 = r[i]
                node2 = r[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Assuming symmetric distance matrix

    # Normalize heuristics matrix by the number of samples
    heuristics_matrix /= num_samples

    return heuristics_matrix
