import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility and cost, and uses the frequency with which each edge appears in feasible routes to build a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = np.random.permutation(np.arange(1, n))
        
        # Build routes based on the permutation
        routes = []
        current_route = [0]
        current_demand = 0
        
        for customer in permutation:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        # Evaluate the feasibility and cost of routes
        total_demand = 0
        is_feasible = True
        for route in routes:
            route_demand = sum([demands[i] for i in route])
            if route_demand > capacity:
                is_feasible = False
                break
            total_demand += route_demand
            
        #Update heuristics matrix if the route is feasible 
        if is_feasible:
          for route in routes:
            for i in range(len(route) - 1):
              u = route[i]
              v = route[i+1]
              heuristics_matrix[u, v] += 1
              heuristics_matrix[v, u] += 1

    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_samples
    
    return heuristics_matrix
