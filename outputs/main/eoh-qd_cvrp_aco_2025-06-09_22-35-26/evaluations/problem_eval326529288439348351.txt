import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge inclusion probabilities by generating random routes, applies a capacity check, and updates an edge importance matrix, penalizing edges based on route capacity exceedance and rewarding them for shorter routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        current_route = [0]
        current_capacity = 0
        capacity_exceeded = False

        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                current_capacity = 0
                current_route.append(customer)
                current_capacity += demands[customer]
                capacity_exceeded = True
        
        current_route.append(0)

        route_length = 0
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            route_length += distance_matrix[node1, node2]

        # Update the heuristics matrix based on route length and capacity exceedance.
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            if capacity_exceeded:
                heuristics_matrix[node1, node2] -= 0.5 / route_length # Penalize if capacity is exceeded
            else:
                heuristics_matrix[node1, node2] += 1 / route_length # Reward if capacity is not exceeded
        
    return heuristics_matrix
