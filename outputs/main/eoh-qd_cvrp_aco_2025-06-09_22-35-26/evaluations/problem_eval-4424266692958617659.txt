import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively builds routes by prioritizing nodes with higher demand-to-distance ratios, updating the heuristics matrix based on edge usage in successful routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        unvisited = list(range(1, n))
        routes = []
        current_route = [0]
        current_load = 0

        while unvisited:
            # Calculate demand-to-distance ratio for each unvisited node
            ratios = {}
            for node in unvisited:
                distance_to_current = distance_matrix[current_route[-1], node]
                if distance_to_current > 0:  # Avoid division by zero
                    ratios[node] = demands[node] / distance_to_current
                else:
                    ratios[node] = float('inf')  # Prioritize nodes very close to the current node

            # Select the node with the highest demand-to-distance ratio that fits within the capacity
            best_node = None
            best_ratio = -1
            for node, ratio in ratios.items():
                if current_load + demands[node] <= capacity and ratio > best_ratio:
                    best_node = node
                    best_ratio = ratio

            if best_node is not None:
                current_route.append(best_node)
                current_load += demands[best_node]
                unvisited.remove(best_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0

        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
