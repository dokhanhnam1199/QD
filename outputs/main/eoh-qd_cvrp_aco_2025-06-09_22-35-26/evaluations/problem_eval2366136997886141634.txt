import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes using a greedy approach based on a combination of distance and demand, penalizes edges used in infeasible routes, and uses edge frequencies to build a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_demand = 0
        
        while unvisited:
            
            next_node = None
            best_score = float('inf')

            for neighbor in unvisited:
                if current_demand + demands[neighbor] <= capacity:
                    score = distance_matrix[current_route[-1], neighbor] + demands[neighbor] # A simple cost function
                    if score < best_score:
                        best_score = score
                        next_node = neighbor

            if next_node is not None:
                current_route.append(next_node)
                current_demand += demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_demand = 0
                
        current_route.append(0)
        routes.append(current_route)

        # Evaluate the feasibility and cost of routes
        is_feasible = True
        for route in routes:
            route_demand = sum([demands[i] for i in route])
            if route_demand > capacity:
                is_feasible = False
                break
        
        #Update heuristics matrix based on feasibility
        penalty = 0.1 if not is_feasible else 0
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1 - penalty
                heuristics_matrix[v, u] += 1 - penalty
                
    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_samples
    
    return heuristics_matrix
