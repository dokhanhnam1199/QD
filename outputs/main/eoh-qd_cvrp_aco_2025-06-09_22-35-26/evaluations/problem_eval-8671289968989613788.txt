import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge importance by sampling random routes and exponentially rewarding edges used in feasible routes while exponentially penalizing edges in infeasible routes based on route overload.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)
        
        current_route = [0]
        current_load = 0
        routes = []
        
        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
        
        current_route.append(0)
        routes.append(current_route)
        
        is_feasible = True
        max_overload = 0
        for r in routes:
          load = 0
          for node in r[1:-1]:
            load += demands[node]
          overload = load - capacity
          if overload > 0:
            is_feasible = False
            max_overload = max(max_overload, overload)

        if is_feasible:
            for r in routes:
                for i in range(len(r) - 1):
                    node1 = r[i]
                    node2 = r[i+1]
                    heuristics_matrix[node1, node2] += np.exp(1)
                    heuristics_matrix[node2, node1] += np.exp(1)
        else:
            penalty = np.exp(max_overload / capacity)
            for r in routes:
                for i in range(len(r) - 1):
                    node1 = r[i]
                    node2 = r[i+1]
                    heuristics_matrix[node1, node2] -= penalty
                    heuristics_matrix[node2, node1] -= penalty
    return heuristics_matrix
