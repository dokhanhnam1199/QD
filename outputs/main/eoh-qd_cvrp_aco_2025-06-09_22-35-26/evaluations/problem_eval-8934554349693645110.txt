import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many routes using a biased random selection favoring shorter distances, checks their feasibility based on capacity, and averages the edge occurrences in feasible routes to create a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = list(range(1, n))
        current_node = 0
        current_route = [0]
        current_load = 0
        feasible = True
        routes = []
        
        while unvisited:
            # Probabilistically choose the next node based on distance
            probabilities = []
            for node in unvisited:
                probabilities.append(1 / distance_matrix[current_node, node])
            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)

            next_node = random.choices(unvisited, weights=probabilities, k=1)[0]
            

            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                current_node = next_node
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                current_node = 0
                
        current_route.append(0)
        routes.append(current_route)

        for r in routes:
            for i in range(len(r) - 1):
                heuristics_matrix[r[i], r[i+1]] += 1
                heuristics_matrix[r[i+1], r[i]] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
