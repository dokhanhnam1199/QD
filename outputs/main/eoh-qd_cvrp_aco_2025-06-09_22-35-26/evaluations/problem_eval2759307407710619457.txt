import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge importance by sampling random routes, favoring shorter edges and penalizing edges that lead to capacity violations, and adjusts the reward/penalty based on route length.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)
        
        current_route = [0]
        current_load = 0
        routes = []
        
        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
        
        current_route.append(0)
        routes.append(current_route)
        
        is_feasible = True
        total_distance = 0
        for r in routes:
          load = 0
          for node in r[1:-1]:
            load += demands[node]
          if load > capacity:
            is_feasible = False
            break
          for i in range(len(r)-1):
            total_distance += distance_matrix[r[i], r[i+1]]

        reward_penalty_factor = 1.0 / (1 + total_distance) if is_feasible else -1.0 / (1 + total_distance)


        for r in routes:
            for i in range(len(r) - 1):
                node1 = r[i]
                node2 = r[i+1]
                edge_distance_factor = 1.0 / (1 + distance_matrix[node1, node2])
                heuristics_matrix[node1, node2] += reward_penalty_factor * edge_distance_factor
                heuristics_matrix[node2, node1] += reward_penalty_factor * edge_distance_factor
    return heuristics_matrix
