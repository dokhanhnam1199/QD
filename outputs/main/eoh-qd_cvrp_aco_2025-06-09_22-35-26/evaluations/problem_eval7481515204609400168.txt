import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes, uses a construction heuristic to build feasible routes based on a probability matrix biased by distance, and updates a heuristic matrix based on the edges used in good-quality feasible solutions.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000
    probability_matrix = 1.0 / (distance_matrix + np.eye(n))  # Avoid division by zero and self-loops

    for _ in range(num_samples):
        routes = []
        unvisited = list(range(1, n))  # Customers excluding the depot
        current_route = [0]
        current_load = 0
        
        while unvisited:
            current_node = current_route[-1]
            
            # Calculate probabilities for unvisited neighbors
            probabilities = [probability_matrix[current_node][v] for v in unvisited]
            probabilities = np.array(probabilities)
            probabilities /= probabilities.sum()  # Normalize

            # Choose the next customer based on probabilities and capacity
            next_customer_index = np.random.choice(len(unvisited), p=probabilities)
            next_customer = unvisited[next_customer_index]
            
            if current_load + demands[next_customer] <= capacity:
                current_route.append(next_customer)
                current_load += demands[next_customer]
                unvisited.pop(next_customer_index)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
        
        current_route.append(0)
        routes.append(current_route)
        
        # Calculate the total distance of the solution
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i]][route[i+1]]

        # Update the heuristics matrix
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u][v] += 1.0 / total_distance

    return heuristics_matrix
