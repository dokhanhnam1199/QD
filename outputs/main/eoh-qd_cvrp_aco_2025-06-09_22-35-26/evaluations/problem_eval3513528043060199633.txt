import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a biased random sampling approach where routes are constructed probabilistically based on distance, favoring shorter edges, and then updates the heuristic matrix based on feasible routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        routes = []
        unvisited = set(range(1, n))
        current_route = [0]
        current_capacity = 0

        while unvisited:
            current_node = current_route[-1]
            possible_next_nodes = []
            probabilities = []

            for next_node in unvisited:
                if current_capacity + demands[next_node] <= capacity:
                    possible_next_nodes.append(next_node)
                    # Inverse distance as a proxy for desirability
                    probabilities.append(1 / (distance_matrix[current_node, next_node] + 1e-6))
                
            if not possible_next_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = 0
                continue


            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)  # Normalize to create a probability distribution


            next_node = np.random.choice(possible_next_nodes, p=probabilities)

            current_route.append(next_node)
            current_capacity += demands[next_node]
            unvisited.remove(next_node)

        current_route.append(0)
        routes.append(current_route)


        visited = set()
        for route in routes:
            visited.update(route)

        if len(visited) == n:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
