import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge importance by sampling random routes using a nearest neighbor-inspired approach, penalizing edges used in infeasible routes and rewarding edges used in feasible routes, while also incorporating distance information into the edge importance score.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        current_node = 0
        current_route = [0]
        current_load = 0
        routes = []
        
        while unvisited:
            # Find the nearest unvisited node that doesn't violate capacity
            nearest_node = None
            min_distance = float('inf')
            
            for node in unvisited:
                if current_load + demands[node] <= capacity:
                    dist = distance_matrix[current_node, node]
                    if dist < min_distance:
                        min_distance = dist
                        nearest_node = node
            
            if nearest_node is not None:
                current_route.append(nearest_node)
                current_load += demands[nearest_node]
                current_node = nearest_node
                unvisited.remove(nearest_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                current_node = 0

        current_route.append(0)
        routes.append(current_route)
        
        is_feasible = True
        for r in routes:
          load = 0
          for node in r[1:-1]:
            load += demands[node]
          if load > capacity:
            is_feasible = False
            break

        if is_feasible:
            for r in routes:
                for i in range(len(r) - 1):
                    node1 = r[i]
                    node2 = r[i+1]
                    heuristics_matrix[node1, node2] += 1 / distance_matrix[node1, node2]
                    heuristics_matrix[node2, node1] += 1 / distance_matrix[node2, node1]
        else:
            for r in routes:
                for i in range(len(r) - 1):
                    node1 = r[i]
                    node2 = r[i+1]
                    heuristics_matrix[node1, node2] -= 1 / distance_matrix[node1, node2]
                    heuristics_matrix[node2, node1] -= 1 / distance_matrix[node2, node1]

    return heuristics_matrix
