import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes using a biased random selection based on distance and demand, favoring closer nodes with lower demand, and updates edge scores based on route feasibility.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = list(range(1, n))
        routes = []
        current_route = [0]
        current_load = 0

        while unvisited:
            # Calculate selection probabilities based on distance and demand
            probabilities = []
            for node in unvisited:
                distance_to_last = distance_matrix[current_route[-1]][node]
                #avoid zero values
                if distance_to_last == 0:
                  distance_to_last = 0.0001
                probability = (1 / distance_to_last) * (1 / demands[node])
                probabilities.append(probability)

            # Normalize probabilities
            total_probability = sum(probabilities)
            if total_probability > 0: #Avoid division by zero
                probabilities = [p / total_probability for p in probabilities]
            else:
                # If all probabilities are zero, assign equal probability
                probabilities = [1 / len(unvisited)] * len(unvisited)

            # Select next node using weighted random choice
            next_node = random.choices(unvisited, weights=probabilities, k=1)[0]

            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0

        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix based on route feasibility
        is_feasible = True
        for route in routes:
            total_route_demand = sum(demands[node] for node in route)
            if total_route_demand > capacity:
                is_feasible = False
                break

        if is_feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i + 1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
