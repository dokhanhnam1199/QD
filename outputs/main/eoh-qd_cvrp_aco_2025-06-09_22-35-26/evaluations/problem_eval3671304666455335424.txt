import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs multiple Clarke-Wright savings lists, perturbs them, and then aggregates edge frequencies from resulting feasible routes to create a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_savings_lists = 100
    perturbation_factor = 0.1

    for _ in range(num_savings_lists):
        # 1. Clarke-Wright Savings List
        savings = {}
        for i in range(1, n):
            for j in range(i + 1, n):
                savings[(i, j)] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]

        # Sort savings in descending order
        sorted_savings = sorted(savings.items(), key=lambda item: item[1], reverse=True)

        # 2. Perturb the Savings List
        num_perturbations = int(len(sorted_savings) * perturbation_factor)
        for _ in range(num_perturbations):
            idx1 = random.randint(0, len(sorted_savings) - 1)
            idx2 = random.randint(0, len(sorted_savings) - 1)
            sorted_savings[idx1], sorted_savings[idx2] = sorted_savings[idx2], sorted_savings[idx1]

        # 3. Route Construction and Feasibility Check
        routes = {}
        customer_to_route = {}
        route_capacity = {}
        next_route_id = 0

        for (i, j), saving in sorted_savings:
            route_i = customer_to_route.get(i)
            route_j = customer_to_route.get(j)

            if route_i is None and route_j is None:
                # Create a new route
                if demands[i] + demands[j] <= capacity:
                    routes[next_route_id] = [i, j]
                    customer_to_route[i] = next_route_id
                    customer_to_route[j] = next_route_id
                    route_capacity[next_route_id] = demands[i] + demands[j]
                    next_route_id += 1

            elif route_i is not None and route_j is None:
                # Add j to route i if possible
                route_id = route_i
                if routes[route_id][0] == i and route_capacity[route_id] + demands[j] <= capacity:
                    routes[route_id].insert(0, j)
                    customer_to_route[j] = route_id
                    route_capacity[route_id] += demands[j]
                elif routes[route_id][-1] == i and route_capacity[route_id] + demands[j] <= capacity:
                    routes[route_id].append(j)
                    customer_to_route[j] = route_id
                    route_capacity[route_id] += demands[j]

            elif route_i is None and route_j is not None:
                # Add i to route j if possible
                route_id = route_j
                if routes[route_id][0] == j and route_capacity[route_id] + demands[i] <= capacity:
                    routes[route_id].insert(0, i)
                    customer_to_route[i] = route_id
                    route_capacity[route_id] += demands[i]
                elif routes[route_id][-1] == j and route_capacity[route_id] + demands[i] <= capacity:
                    routes[route_id].append(i)
                    customer_to_route[i] = route_id
                    route_capacity[route_id] += demands[i]
            elif route_i is not None and route_j is not None and route_i != route_j:

                if routes[route_i][0] == i and routes[route_j][-1] == j and route_capacity[route_i] + route_capacity[route_j] <= capacity:
                    routes[route_i] = routes[route_j] + routes[route_i]
                    for cust in routes[route_j]:
                        customer_to_route[cust] = route_i
                    route_capacity[route_i] += route_capacity[route_j]

                elif routes[route_i][-1] == i and routes[route_j][0] == j and route_capacity[route_i] + route_capacity[route_j] <= capacity:
                     routes[route_i] = routes[route_i] + routes[route_j]
                     for cust in routes[route_j]:
                        customer_to_route[cust] = route_i
                     route_capacity[route_i] += route_capacity[route_j]
        # 4. Update Heuristics Matrix
        for route_id, route in routes.items():
            route_with_depot = [0] + route + [0]
            for i in range(len(route_with_depot) - 1):
                heuristics_matrix[route_with_depot[i], route_with_depot[i+1]] += 1
                heuristics_matrix[route_with_depot[i+1], route_with_depot[i]] += 1

    return heuristics_matrix
