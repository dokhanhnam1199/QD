import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs multiple solutions using a savings-based approach with randomized node selection and acceptance criteria, then averages the edge occurrences across all solutions to build a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_solutions = 100

    def calculate_route_demand(route):
        return sum(demands[i] for i in route)

    def calculate_route_distance(route):
        total_distance = 0
        for i in range(len(route) - 1):
            total_distance += distance_matrix[route[i]][route[i+1]]
        return total_distance

    def savings(node1, node2):
        return distance_matrix[node1][0] + distance_matrix[0][node2] - distance_matrix[node1][node2]

    def construct_solution():
        routes = []
        unvisited = set(range(1, n))
        while unvisited:
            route = [0]
            current_capacity = 0
            while unvisited:
                eligible_nodes = [node for node in unvisited if current_capacity + demands[node] <= capacity]

                if not eligible_nodes:
                    break

                # Randomized Node Selection
                node = random.choice(eligible_nodes)

                # Acceptance Probability based on savings and randomness
                if len(route) > 1:
                    acceptance_prob = min(1, np.exp(savings(route[-1], node) - random.random()))
                else:
                     acceptance_prob = 1
               
                if random.random() < acceptance_prob:
                    route.append(node)
                    current_capacity += demands[node]
                    unvisited.remove(node)
                else:
                    break

            route.append(0)
            routes.append(route)

        return routes

    for _ in range(num_solutions):
        solution = construct_solution()

        for route in solution:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i]][route[i+1]] += 1
                heuristics_matrix[route[i+1]][route[i]] += 1

    return heuristics_matrix
