import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge inclusion probabilities by generating random routes, applying a capacity check, and updating an edge importance matrix based on route validity and length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random routes to sample

    for _ in range(num_samples):
        # Generate a random permutation of customer indices (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Construct a route based on the random permutation
        current_route = [0]  # Start at the depot
        current_capacity = 0

        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                current_capacity = 0
                current_route.append(customer)
                current_capacity += demands[customer]
        
        current_route.append(0) # Return to depot after visiting all customers

        # Update the heuristics matrix based on the route
        route_length = 0
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            heuristics_matrix[node1, node2] += 1
            route_length += distance_matrix[node1, node2]

        # Normalize heuristics based on route length (shorter routes are preferred)
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            heuristics_matrix[node1, node2] /= route_length

    return heuristics_matrix
