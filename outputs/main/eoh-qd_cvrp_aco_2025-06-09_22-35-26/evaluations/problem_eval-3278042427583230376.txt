import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses an Ant Colony Optimization (ACO) approach, where ants construct routes probabilistically based on distance and pheromone levels, and pheromone levels are updated based on the quality of the routes found, favoring edges used in good solutions.}"""
    n = len(demands)
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone levels
    heuristics_matrix = np.zeros_like(distance_matrix)
    alpha = 1  # Pheromone importance
    beta = 2  # Distance importance
    rho = 0.5  # Evaporation rate
    Q = 100  # Pheromone deposit constant
    num_ants = 50
    num_iterations = 100

    for iteration in range(num_iterations):
        all_routes = []
        for ant in range(num_ants):
            unvisited = list(range(1, n))
            routes = []
            current_route = [0]
            current_load = 0

            while unvisited:
                probabilities = np.zeros(len(unvisited))
                for i, node in enumerate(unvisited):
                    probabilities[i] = (pheromone_matrix[current_route[-1], node]**alpha) * \
                                     ((1 / distance_matrix[current_route[-1], node])**beta)

                if np.sum(probabilities) == 0:
                    next_node = random.choice(unvisited)
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(unvisited, p=probabilities)
                
                if current_load + demands[next_node] <= capacity:
                    current_route.append(next_node)
                    current_load += demands[next_node]
                    unvisited.remove(next_node)
                else:
                    current_route.append(0)
                    routes.append(current_route)
                    current_route = [0]
                    current_load = 0

            current_route.append(0)
            routes.append(current_route)
            all_routes.append(routes)

        # Calculate route lengths and update pheromones
        delta_pheromone_matrix = np.zeros_like(distance_matrix)
        for routes in all_routes:
            total_distance = 0
            for route in routes:
                for i in range(len(route) - 1):
                    total_distance += distance_matrix[route[i], route[i+1]]

            for route in routes:
                for i in range(len(route) - 1):
                    delta_pheromone_matrix[route[i], route[i+1]] += Q / total_distance
                    delta_pheromone_matrix[route[i+1], route[i]] += Q / total_distance
            
        pheromone_matrix = (1 - rho) * pheromone_matrix + delta_pheromone_matrix
    
    #Populate heuristics matrix
    for i in range(n):
      for j in range(n):
        heuristics_matrix[i,j] = pheromone_matrix[i,j]

    return heuristics_matrix
