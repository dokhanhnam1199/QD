import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility and cost, and uses this information to create a heuristic matrix favoring edges that appear in good solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random route (permutation of customers)
        customer_indices = np.random.permutation(range(1, n))

        # Split the route into feasible vehicle routes
        routes = []
        current_route = [0]
        current_demand = 0
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        feasible = True
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Update the heuristics matrix based on route quality
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1.0 / total_distance
                    heuristics_matrix[route[i+1], route[i]] += 1.0 / total_distance

    # Normalize the heuristics matrix
    max_value = np.max(heuristics_matrix)
    if max_value > 0:
        heuristics_matrix /= max_value

    return heuristics_matrix
