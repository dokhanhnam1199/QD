import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs solutions by iteratively adding the nearest feasible customer to the current route, and updates a heuristic matrix based on the frequency and quality of edges in these solutions.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Initialize routes and current state
        routes = []
        current_route = [0]
        current_load = 0
        unvisited = set(range(1, n))  # All customers initially unvisited

        while unvisited:
            # Find the nearest feasible customer
            nearest_customer = None
            min_distance = float('inf')

            for customer in unvisited:
                if current_load + demands[customer] <= capacity:
                    distance = distance_matrix[current_route[-1]][customer]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_customer = customer

            if nearest_customer is not None:
                current_route.append(nearest_customer)
                current_load += demands[nearest_customer]
                unvisited.remove(nearest_customer)
            else:
                # No feasible customer, return to depot and start a new route
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0

        # Close the last route
        current_route.append(0)
        routes.append(current_route)

        # Calculate total distance
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i]][route[i+1]]

        # Update heuristics matrix
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u][v] += 1.0 / total_distance

    return heuristics_matrix
