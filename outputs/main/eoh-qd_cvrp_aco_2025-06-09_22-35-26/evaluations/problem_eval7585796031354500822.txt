import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm combines random route sampling with an insertion heuristic to generate diverse CVRP solutions, using the frequency of edge occurrences in feasible routes, weighted by a combination of route length and vehicle utilization, to build a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random order of customers (excluding depot)
        customer_order = np.random.permutation(np.arange(1, n))

        # Initialize routes and current vehicle state
        routes = []
        current_route = [0]
        current_load = 0

        # Insertion heuristic: iteratively add customers to routes
        for customer in customer_order:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route
                current_load = demands[customer]

        current_route.append(0)  # Close the last route
        routes.append(current_route)

        # Calculate total route length
        total_length = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_length += distance_matrix[route[i], route[i+1]]

        # Update heuristics matrix
        for route in routes:
            route_load = sum(demands[c] for c in route if c != 0)
            vehicle_utilization = route_load / capacity if route_load > 0 else 0
            weight = 1.0 / (total_length + 1e-9) * (0.5 + 0.5 * vehicle_utilization) # Weight by both length and utilization

            for i in range(len(route) - 1):
                node1, node2 = route[i], route[i+1]
                heuristics_matrix[node1, node2] += weight
                heuristics_matrix[node2, node1] += weight

    return heuristics_matrix
