import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively builds routes by probabilistically selecting the next node based on a combination of distance and demand, favoring closer nodes with lower demand, and updates edge desirability based on route feasibility.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        current_node = 0  # Start at the depot
        current_route = [0]
        current_load = 0
        unvisited_nodes = set(range(1, n))
        
        while unvisited_nodes:
            # Calculate probabilities for unvisited nodes
            probabilities = []
            for node in unvisited_nodes:
                distance = distance_matrix[current_node, node]
                demand = demands[node]
                # Favor closer nodes with lower demand
                probability = (1 / (distance + 1e-6)) * (1 / (demand + 1e-6)) 
                probabilities.append(probability)

            # Normalize probabilities
            total_probability = sum(probabilities)
            if total_probability == 0:
                # Handle the case where all probabilities are zero, assign uniform probability
                probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
                total_probability = 1.0 * len(unvisited_nodes)

            probabilities = [p / total_probability for p in probabilities]
            
            # Choose the next node based on probabilities
            next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]

            # Check capacity constraint
            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                current_node = next_node
                unvisited_nodes.remove(next_node)
            else:
                # Return to depot
                current_route.append(0)
                current_node = 0
                current_load = 0

        # Complete the route by returning to the depot
        current_route.append(0)

        # Update heuristics matrix
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_iterations

    return heuristics_matrix
