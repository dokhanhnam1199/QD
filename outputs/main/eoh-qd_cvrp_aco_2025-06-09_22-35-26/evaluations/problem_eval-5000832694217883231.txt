import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses a Monte Carlo approach to estimate edge desirability by simulating route construction with a probabilistic selection of nodes based on distance and demand, rewarding edges used in feasible routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random routes to sample
    alpha = 1.0 #Weight for distance
    beta = 1.0 #Weight for demand

    for _ in range(num_samples):
        unvisited = list(range(1, n))  # Nodes excluding depot
        routes = []
        current_route = [0]  # Start at depot
        current_load = 0

        while unvisited:
            # Probabilistic node selection based on distance and demand
            probabilities = []
            for node in unvisited:
                distance = distance_matrix[current_route[-1], node] if current_route else distance_matrix[0, node]
                demand = demands[node]
                
                #Use Softmax to model the probability of the route, the shorter the distance or the smaller the demand, the larger the probability
                score = -alpha * distance - beta * demand
                probabilities.append(score)

            probabilities = np.exp(probabilities) / np.sum(np.exp(probabilities)) # Apply softmax to get probabilities

            # Select next node based on probabilities
            next_node = random.choices(unvisited, weights=probabilities, k=1)[0]

            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0]
                current_load = 0

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Update heuristics matrix based on edges in the sampled routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
