import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs solutions by iteratively adding the nearest feasible customer to the current route, guided by a probabilistic selection based on distance and demand, and averages edge usage across multiple solution attempts to build a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        current_node = 0
        current_route = [0]
        current_load = 0
        unvisited = set(range(1, n))
        all_routes = []

        while unvisited:
            eligible_customers = [(cust, distance_matrix[current_node, cust]) for cust in unvisited if demands[cust] + current_load <= capacity]
            if not eligible_customers:
                current_route.append(0)
                all_routes.append(current_route)
                current_node = 0
                current_route = [0]
                current_load = 0
                eligible_customers = [(cust, distance_matrix[current_node, cust]) for cust in unvisited if demands[cust] + current_load <= capacity]
                if not eligible_customers:
                    break  

            probabilities = [1.0 / (dist + 1e-6) for cust, dist in eligible_customers]
            probabilities /= np.sum(probabilities)

            chosen_customer = random.choices([cust for cust, dist in eligible_customers], weights=probabilities, k=1)[0]
            
            current_route.append(chosen_customer)
            current_load += demands[chosen_customer]
            current_node = chosen_customer
            unvisited.remove(chosen_customer)
        current_route.append(0)
        all_routes.append(current_route)

        for route in all_routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1

    # Normalize the matrix
    max_value = np.max(heuristics_matrix)
    if max_value > 0:
        heuristics_matrix /= max_value
    
    return heuristics_matrix
