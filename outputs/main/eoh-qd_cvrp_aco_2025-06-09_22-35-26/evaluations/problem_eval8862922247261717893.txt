import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, checks their feasibility based on capacity, and updates the heuristic matrix based on the inverse of the route length if the route is feasible.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)
        
        current_route = [0]
        current_load = 0
        feasible = True
        routes = []

        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
        current_route.append(0)
        routes.append(current_route)

        route_length = sum(distance_matrix[routes[i][j], routes[i][j+1]] for i in range(len(routes)) for j in range(len(routes[i])-1))
        if route_length > 0:
            route_score = 1.0 / route_length
        else:
            route_score = 0

        for r in routes:
            for i in range(len(r) - 1):
                heuristics_matrix[r[i], r[i+1]] += route_score
                heuristics_matrix[r[i+1], r[i]] += route_score

    heuristics_matrix /= num_samples
    return heuristics_matrix
