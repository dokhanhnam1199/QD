import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates multiple routes using a nearest neighbor approach with capacity constraints, and then uses the frequency of edges in these routes to build a heuristic matrix, biasing towards shorter edges and more frequent appearances.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_routes = 1000

    for _ in range(num_routes):
        start_node = random.randint(1, n - 1)  # Start from a random customer
        unvisited_customers = set(range(1, n))
        current_route = [0, start_node]
        current_load = demands[start_node]
        unvisited_customers.remove(start_node)

        while unvisited_customers:
            # Find the nearest neighbor within capacity
            nearest_neighbor = None
            min_distance = float('inf')
            for neighbor in unvisited_customers:
                if current_load + demands[neighbor] <= capacity:
                    distance = distance_matrix[current_route[-1], neighbor]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_neighbor = neighbor

            if nearest_neighbor is not None:
                current_route.append(nearest_neighbor)
                current_load += demands[nearest_neighbor]
                unvisited_customers.remove(nearest_neighbor)
            else:
                current_route.append(0)
                current_load = 0

        current_route.append(0)
        
        # Update the heuristic matrix based on the edges in the route, giving higher scores to shorter edges and more frequent edges.
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            
            # Bias toward shorter edges by dividing the frequency by the distance
            edge_heuristic = 1.0 / (distance_matrix[node1, node2] + 1e-6)  # Add a small number to avoid division by zero
            
            heuristics_matrix[node1, node2] += edge_heuristic
            heuristics_matrix[node2, node1] += edge_heuristic  # Since it's undirected

    return heuristics_matrix
