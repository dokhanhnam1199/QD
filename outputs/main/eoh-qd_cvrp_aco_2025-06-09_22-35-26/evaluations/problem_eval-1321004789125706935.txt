import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively refines a heuristic matrix by probabilistically selecting routes based on the current heuristic values and updating the matrix to favor edges present in better-performing routes.}
    """
    n = len(demands)
    heuristics_matrix = np.ones_like(distance_matrix)  # Initialize with ones to avoid zero probabilities
    num_iterations = 100
    sample_size = 50
    learning_rate = 0.1

    for _ in range(num_iterations):
        routes = []
        costs = []

        # Sample routes based on current heuristics
        for _ in range(sample_size):
            route = list(range(1, n))
            random.shuffle(route)

            current_route = []
            current_demand = 0
            vehicle_routes = []
            is_feasible = True

            for node in route:
                if current_demand + demands[node] <= capacity:
                    current_route.append(node)
                    current_demand += demands[node]
                else:
                    if len(current_route) > 0:
                        vehicle_routes.append(current_route)
                    else:
                        is_feasible = False
                        break
                    current_route = [node]
                    current_demand = demands[node]
            if is_feasible:
                if len(current_route) > 0:
                    vehicle_routes.append(current_route)

            if not is_feasible:
                costs.append(float('inf'))
                routes.append([])
                continue
            
            cost = 0
            for r in vehicle_routes:
                r_with_depot = [0] + r + [0]
                for i in range(len(r_with_depot) - 1):
                    cost += distance_matrix[r_with_depot[i], r_with_depot[i+1]]
            
            routes.append(vehicle_routes)
            costs.append(cost)
        
        # Find the best route in the sample
        best_route_index = np.argmin(costs)
        best_route = routes[best_route_index]

        # Update the heuristics matrix
        if len(best_route) > 0 and costs[best_route_index] != float('inf'):
            for vehicle_route in best_route:
                route_with_depot = [0] + vehicle_route + [0]
                for i in range(len(route_with_depot) - 1):
                    u, v = route_with_depot[i], route_with_depot[i+1]
                    heuristics_matrix[u, v] += learning_rate
                    heuristics_matrix[v, u] += learning_rate
        
        # Normalize heuristics matrix to avoid excessive values
        heuristics_matrix /= np.mean(heuristics_matrix)

    return heuristics_matrix
