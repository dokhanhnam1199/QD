{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, using Sigmoid Fit Score with a preference for tighter fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate the remaining capacity after placing the item\n    remaining_after_pack = bins_remain_cap - item\n\n    # Identify bins where the item fits\n    valid_bins = remaining_after_pack >= 0\n\n    if not np.any(valid_bins):\n        return priorities  # No suitable bin\n\n    # Calculate the 'tightness' of the fit:  smaller remaining space is better\n    fit_scores = remaining_after_pack[valid_bins]\n\n    # Normalize the fit scores to a 0-1 range, so that the sigmoid function can work properly\n    min_fit = np.min(fit_scores)\n    max_fit = np.max(fit_scores)\n    normalized_fit_scores = (fit_scores - min_fit) / (max_fit - min_fit + 1e-9)\n\n    # Apply sigmoid function with a steeper slope to emphasize tighter fits\n    # Adjust parameters to control the shape of the sigmoid\n    scale = 5.0  # Controls the steepness of the sigmoid\n    shift = 0.2  # Shifts the sigmoid curve\n    priorities[valid_bins] = 1.0 / (1.0 + np.exp(-scale * (normalized_fit_scores - shift)))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Exact fit gets highest priority.\n    exact_fit_bins = np.where(bins_remain_cap == item)[0]\n    if len(exact_fit_bins) > 0:\n        priorities[exact_fit_bins] = 100  # High priority for exact fit.\n\n    # Then bins that can accommodate the item, sorted by remaining capacity.\n    possible_bins = np.where(bins_remain_cap >= item)[0]\n    if len(possible_bins) > 0:\n        remaining_capacities = bins_remain_cap[possible_bins]\n        sorted_indices = np.argsort(remaining_capacities)\n        priorities[possible_bins[sorted_indices]] = 0.5 - 0.4 * (sorted_indices / len(sorted_indices))\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits & minimal waste; simple, weighted scoring often beats complex functions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}