```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Sigmoid Fit Score with a preference for tighter fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after placing the item
    remaining_after_pack = bins_remain_cap - item

    # Identify bins where the item fits
    valid_bins = remaining_after_pack >= 0

    if not np.any(valid_bins):
        return priorities  # No suitable bin

    # Calculate the 'tightness' of the fit:  smaller remaining space is better
    fit_scores = remaining_after_pack[valid_bins]

    # Normalize the fit scores to a 0-1 range, so that the sigmoid function can work properly
    min_fit = np.min(fit_scores)
    max_fit = np.max(fit_scores)
    normalized_fit_scores = (fit_scores - min_fit) / (max_fit - min_fit + 1e-9)

    # Apply sigmoid function with a steeper slope to emphasize tighter fits
    # Adjust parameters to control the shape of the sigmoid
    scale = 5.0  # Controls the steepness of the sigmoid
    shift = 0.2  # Shifts the sigmoid curve
    priorities[valid_bins] = 1.0 / (1.0 + np.exp(-scale * (normalized_fit_scores - shift)))
    
    return priorities
```
