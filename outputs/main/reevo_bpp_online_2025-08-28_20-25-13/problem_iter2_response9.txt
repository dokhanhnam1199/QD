```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate greedy priority (Best Fit Decreasing)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        priorities[eligible_bins] = bins_remain_cap[eligible_bins] - item

    # Epsilon-Greedy exploration
    if np.random.rand() < epsilon:
        # Assign random priorities to all bins that can fit the item
        if np.any(eligible_bins):
            random_priorities = np.random.rand(np.sum(eligible_bins))
            priorities[eligible_bins] = random_priorities
    else:
        # Add a small bonus to bins that are nearly full
        nearly_full_bins = (bins_remain_cap > 0) & (bins_remain_cap <= item)
        priorities[nearly_full_bins] += 0.1  # Small bonus

    return priorities
```
