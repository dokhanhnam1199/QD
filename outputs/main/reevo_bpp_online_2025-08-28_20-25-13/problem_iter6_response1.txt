```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit gets highest priority
    exact_fit_indices = np.where(np.isclose(bins_remain_cap, item))[0]
    priorities[exact_fit_indices] = 1.0

    # Prioritize tighter fits for other bins
    remaining_indices = np.where(bins_remain_cap >= item)[0]
    if len(remaining_indices) > 0:
        diff = bins_remain_cap[remaining_indices] - item
        diff = np.where(diff <= 0, 1e-6, diff)  # Avoid division by zero
        priorities[remaining_indices] = 1.0 / diff
        
    # Further prioritize bins with smaller remaining capacities overall
    priorities = priorities / bins_remain_cap
    
    return priorities
```
