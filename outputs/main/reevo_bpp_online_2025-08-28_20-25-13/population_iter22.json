[
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n\n    # Reward near-full bins (smaller remaining capacity is better)\n    fullness = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n\n    # Reward tight fits (smaller wasted space ratio is better)\n    fit = 1.0 / (remaining_after_item + 1e-6)\n\n    # Penalize large wasted space (larger wasted space ratio is worse)\n    wasted_space_ratio = remaining_after_item / bins_remain_cap[possible_bins]\n\n    # Combine the factors\n    priorities = fullness + fit - (2.0 * wasted_space_ratio)  # Increased penalty for wasted space\n\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 0,
    "obj": 4.028719585161557,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 144.75398259382442,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response1.txt_stdout.txt",
    "code_path": "problem_iter22_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n\n    # Reward near-full bins (smaller remaining capacity is better)\n    fullness = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n\n    # Reward tight fits (smaller wasted space ratio is better)\n    fit = 1.0 / (remaining_after_item + 1e-6)\n\n    # Penalize large wasted space (larger wasted space ratio is worse)\n    wasted_space_ratio = remaining_after_item / bins_remain_cap[possible_bins]\n\n    # Combine the factors with tuned weights\n    priorities = 0.4 * fullness + 0.5 * fit - 0.3 * wasted_space_ratio\n\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 1,
    "obj": 4.198244914240141,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 180.68572508221183,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response2.txt_stdout.txt",
    "code_path": "problem_iter22_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    utilization = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n    proximity = 1.0 / (remaining_after_item + 1e-6)\n    priorities = 0.7 * utilization + 0.3 * proximity\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 2,
    "obj": 4.198244914240141,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.32351694048162,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response3.txt_stdout.txt",
    "code_path": "problem_iter22_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing minimizing wasted space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    priorities = 1.0 / (remaining_after_item + 1e-6)\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 3,
    "obj": 4.198244914240141,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response4.txt_stdout.txt",
    "code_path": "problem_iter22_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space. Args: item: Size of item to be added to the bin. bins_remain_cap: Array of capacities for each bin. Returns: Array of same size as bins_remain_cap with priority score of each bin. \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n\n    # Reward near-full bins (small remaining capacity after adding item)\n    near_full_reward = np.exp(-remaining_after_item / (bins_remain_cap[possible_bins] + 1e-6))\n\n    # Reward tight fits (small difference between item size and bin capacity)\n    tight_fit_reward = np.exp(-abs(bins_remain_cap[possible_bins] - item) / (bins_remain_cap[possible_bins] + 1e-6))\n\n    # Penalize wasted space (large remaining capacity after adding item)\n    wasted_space_penalty = remaining_after_item / (bins_remain_cap[possible_bins] + 1e-6)\n\n    priorities = near_full_reward + tight_fit_reward - 0.5 * wasted_space_penalty\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 4,
    "obj": 4.27802153968888,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 204.03520179535806,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response5.txt_stdout.txt",
    "code_path": "problem_iter22_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    utilization = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n    wasted_space_ratio = remaining_after_item / bins_remain_cap[possible_bins]\n\n    # Prioritize high utilization, small remaining space, and low wasted space\n    priorities = utilization - wasted_space_ratio\n\n    # Add a bonus for bins that are almost full\n    almost_full_bonus = np.where(bins_remain_cap[possible_bins] - remaining_after_item < 0.1 * bins_remain_cap[possible_bins], 0.2, 0.0)\n    priorities += almost_full_bonus\n\n    # Add a small value to avoid division by zero\n    priorities = np.where(remaining_after_item == 0, 1e9, priorities)\n    \n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 5,
    "obj": 4.198244914240141,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 166.4210625757214,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response6.txt_stdout.txt",
    "code_path": "problem_iter22_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n\n    # Reward near-full bins (small remaining capacity after adding item)\n    near_full_reward = np.exp(-remaining_after_item / (bins_remain_cap[possible_bins] + 1e-6))\n\n    # Reward tight fits (small difference between item size and bin capacity)\n    tight_fit_reward = np.exp(-abs(bins_remain_cap[possible_bins] - item) / (bins_remain_cap[possible_bins] + 1e-6))\n\n    # Penalize wasted space (large remaining capacity after adding item)\n    wasted_space_penalty = remaining_after_item / (bins_remain_cap[possible_bins] + 1e-6)\n\n    priorities = near_full_reward + tight_fit_reward - 0.5 * wasted_space_penalty\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 6,
    "obj": 4.27802153968888,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 204.03520179535806,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response7.txt_stdout.txt",
    "code_path": "problem_iter22_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    utilization = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n    priorities = utilization + (1.0 / (remaining_after_item + 1e-6))\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 7,
    "obj": 4.038691663342641,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 94.01164534875782,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response8.txt_stdout.txt",
    "code_path": "problem_iter22_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n\n    # Prioritize near-full bins (small remaining capacity)\n    near_full_bonus = 1.0 / (bins_remain_cap[possible_bins] + 1e-6)\n\n    # Prioritize tight fits (small remaining after item)\n    tight_fit_bonus = 1.0 / (remaining_after_item + 1e-6)\n\n    # Penalize wasted space (large remaining after item relative to bin size)\n    wasted_space_penalty = remaining_after_item / bins_remain_cap[possible_bins]\n\n    priorities = near_full_bonus + tight_fit_bonus - wasted_space_penalty\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 8,
    "obj": 4.198244914240141,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 125.33591475173351,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response9.txt_stdout.txt",
    "code_path": "problem_iter22_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    utilization = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n    priorities = utilization + (1.0 / (remaining_after_item + 1e-6))\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 9,
    "obj": 4.038691663342641,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 94.01164534875782,
    "exec_success": true
  }
]