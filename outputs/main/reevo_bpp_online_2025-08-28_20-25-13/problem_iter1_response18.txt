```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate greedy priority (Best Fit Decreasing)
    for i in range(n_bins):
        if bins_remain_cap[i] >= item:
            priorities[i] = bins_remain_cap[i] - item

    # Epsilon-Greedy exploration
    if np.random.rand() < epsilon:
        # Assign random priorities to all bins that can fit the item
        eligible_bins = np.where(bins_remain_cap >= item)[0]
        if len(eligible_bins) > 0:
            random_priorities = np.random.rand(len(eligible_bins))
            priorities[eligible_bins] = random_priorities
            
    return priorities
```
