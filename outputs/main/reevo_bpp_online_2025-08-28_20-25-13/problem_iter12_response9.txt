```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit)
    with a penalty for very full bins, considering item size relative to bin capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins where the item fits
    fits = diff >= 0
    priorities[fits] = 1.0 / (np.abs(diff[fits]) + 1e-6)

    # Penalize almost full bins based on the ratio of item size to bin capacity.
    # More aggressive penalty as bin gets fuller.
    fullness = bins_remain_cap
    penalty = np.ones_like(bins_remain_cap)
    penalty[fullness < item * 0.2] = 0.1  # Significant penalty if item occupies > 80% of bin
    penalty[fullness < item * 0.5] = 0.5  # Moderate penalty if item occupies > 50% of bin
    penalty[fullness < item] = 0.8 #Small penalty if item occupies > 0% of bin

    priorities = priorities * penalty

    return priorities
```
