```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the fitness of each bin: how well the item fits
    # Best Fit: prioritize bins where the item fits exactly or leaves minimal waste
    fitness = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1)  # -1 if item doesn't fit

    # Assign priority based on fitness.  Lower waste is better.
    # We add a small constant to fitness to avoid zero priority for bins that fit perfectly.
    priorities = fitness + 0.0001

    return priorities
```
