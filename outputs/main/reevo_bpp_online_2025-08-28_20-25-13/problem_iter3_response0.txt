```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities = np.where(exact_fit, 1000.0, np.zeros_like(bins_remain_cap))

    # For bins where it's not an exact fit, use a sigmoid-based priority.
    # This gives higher priority to tighter fits and helps avoid large waste.
    remaining_capacity_valid = bins_remain_cap > 0
    diff = bins_remain_cap[remaining_capacity_valid] - item
    diff = np.where(diff <= 0, 1e-6, diff)  # Avoid division by zero
    sigmoid_scores = 1.0 / (1.0 + np.exp(diff / item))  # Sigmoid function
    priorities[remaining_capacity_valid] = sigmoid_scores

    # Add a small bonus for bins that are already somewhat full
    # This encourages filling bins up more completely
    fullness = (bins_remain_cap / 1.0)  # Assuming bin capacity is 1.0
    priorities += fullness * 0.1

    return priorities
```
