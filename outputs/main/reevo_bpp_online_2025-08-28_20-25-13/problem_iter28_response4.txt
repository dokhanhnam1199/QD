```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_after_item = bins_remain_cap[possible_bins] - item

    # Reward near-full bins (smaller remaining capacity is better)
    fullness = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])

    # Reward tight fits (smaller wasted space ratio is better)
    fit = 1.0 / (remaining_after_item + 1e-6)

    # Penalize large wasted space (larger wasted space ratio is worse)
    wasted_space_ratio = remaining_after_item / bins_remain_cap[possible_bins]

    # Combine the factors with tuned weights
    priorities = 0.5 * fullness + 0.4 * fit - 0.2 * wasted_space_ratio

    result = np.zeros_like(bins_remain_cap)
    result[possible_bins] = priorities
    return result
```
