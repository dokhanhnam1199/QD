```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tighter fits and avoiding fragmentation.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_after_item = bins_remain_cap[possible_bins] - item
    relative_remaining_cap = remaining_after_item / bins_remain_cap[possible_bins]
    utilization = 1.0 - relative_remaining_cap

    # Prioritize tighter fits (higher utilization) and avoid near-saturation.
    # The penalty is tuned to be more sensitive to near-saturation without being overly aggressive.
    priority = utilization - 0.2 * (1 - relative_remaining_cap)

    result = np.zeros_like(bins_remain_cap)
    result[possible_bins] = priority
    return result
```
