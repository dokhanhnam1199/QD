{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tighter fits and avoiding fragmentation.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    \n    # Prioritize tighter fits (smaller remaining capacity)\n    fit_score = 1.0 / (remaining_after_item + 1e-6)\n    \n    # Penalize near-saturation (lower remaining capacity) - scaled to avoid dominance\n    saturation_penalty = np.exp(-remaining_after_item) * 0.5 \n\n    # Combine fit and saturation penalty\n    priorities = fit_score - saturation_penalty\n\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit)\n    with a penalty for very full bins, considering item size relative to bin capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    diff = bins_remain_cap - item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize bins where the item fits\n    fits = diff >= 0\n    priorities[fits] = 1.0 / (np.abs(diff[fits]) + 1e-6)\n\n    # Penalize almost full bins based on the ratio of item size to bin capacity.\n    # More aggressive penalty as bin gets fuller.\n    fullness = bins_remain_cap\n    penalty = np.ones_like(bins_remain_cap)\n    penalty[fullness < item * 0.2] = 0.1  # Significant penalty if item occupies > 80% of bin\n    penalty[fullness < item * 0.5] = 0.5  # Moderate penalty if item occupies > 50% of bin\n    penalty[fullness < item] = 0.8 #Small penalty if item occupies > 0% of bin\n\n    priorities = priorities * penalty\n\n    return priorities\n\n[Reflection]\nPrioritize fit *and* bin fullness; relative item size matters for penalty tuning.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}