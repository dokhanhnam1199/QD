{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n\n    # Normalize the remaining capacity to [0, 1]\n    normalized_remaining = remaining_after_item / bins_remain_cap[possible_bins]\n\n    # Reward for fullness (inverse of remaining capacity)\n    fullness = 1.0 - normalized_remaining\n\n    # Reward for tight fit (inverse of remaining space after adding the item)\n    fit = 1.0 / (remaining_after_item + 1e-6)\n\n    # Combine the rewards with tuned weights\n    priorities = 0.7 * fullness + 0.3 * fit\n\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing higher space utilization and fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_after_item = bins_remain_cap[possible_bins] - item\n    utilization = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])\n    fit_bonus = 1.0 / (remaining_after_item + 1e-6)\n    priorities = utilization + fit_bonus\n\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result\n\n[Reflection]\nPrioritize simplicity & direct rewards\u2014combining utilization and fit often outperforms tuned, weighted components.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}