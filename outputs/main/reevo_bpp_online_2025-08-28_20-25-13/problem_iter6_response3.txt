```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    fitting_bins = diff >= 0
    if not np.any(fitting_bins):
        return np.zeros_like(bins_remain_cap)

    waste = diff[fitting_bins]
    fullness = (bins_remain_cap - waste) / bins_remain_cap  # Proportion of bin already used
    priorities = fullness / (waste + 1e-6)
    priorities = np.where(fitting_bins, priorities, 0.0)

    return priorities
```
