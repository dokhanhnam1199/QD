```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First-fit like greedy priority
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = bins_remain_cap[feasible_bins] - item

    # Exploration: Add a small random value to some bins with probability epsilon
    num_bins = len(bins_remain_cap)
    num_explore = int(np.ceil(epsilon * num_bins))
    
    explore_indices = np.random.choice(num_bins, num_explore, replace=False)
    for i in explore_indices:
        if bins_remain_cap[i] >= item:
            priorities[i] += np.random.uniform(0, 1)
            
    return priorities
```
