```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    valid_bins = diff >= 0
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        # Prioritize bins where the item fits well, but avoid *too* tight fits
        # and don't strongly penalize nearly full bins.
        priorities[valid_bins] = 1.0 / (np.sqrt(diff[valid_bins]) + 1e-6)

        # Slightly boost bins that have very little remaining capacity,
        # to try and close them off quickly. This helps with number of bins used.
        priorities[bins_remain_cap < item * 2] += 0.1

    return priorities
```
