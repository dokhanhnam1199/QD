```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities = np.where(exact_fit, 1000.0, 0.0)

    # For non-exact fits, use a sigmoid function to prioritize tighter fits
    non_exact_bins = ~exact_fit
    diff = bins_remain_cap[non_exact_bins] - item
    diff = np.where(diff <= 0, 1e-6, diff)  # Avoid division by zero
    
    # Sigmoid function to emphasize tighter fits, scaled by bin fullness
    sigmoid_scores = 1.0 / (1.0 + np.exp(diff / (bins_remain_cap[non_exact_bins] * 0.1)))
    priorities[non_exact_bins] = sigmoid_scores * (bins_remain_cap[non_exact_bins] / np.max(bins_remain_cap))  # Scale by fullness
    
    return priorities
```
