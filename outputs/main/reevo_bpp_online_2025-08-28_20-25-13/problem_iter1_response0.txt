```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # First Fit strategy: prefer bins where the item fits exactly
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1.0

    # Then prefer bins where the item fits with minimal remaining capacity.
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        priorities[fit_bins] = 1.0 / (bins_remain_cap[fit_bins] - item + 1e-6) # Add a small value to avoid division by zero
    return priorities
```
