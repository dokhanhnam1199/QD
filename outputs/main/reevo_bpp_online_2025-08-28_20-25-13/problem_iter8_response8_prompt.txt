{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the item size and the remaining capacity of each bin\n    diff = bins_remain_cap - item\n\n    # Calculate the wasted space if the item is placed in each bin\n    wasted_space = diff\n\n    # Avoid division by zero and negative wasted space.  Small values are better than 0\n    wasted_space = np.where(wasted_space <= 0, 1e-6, wasted_space)\n\n    # Calculate the ratio of item size to the original bin capacity to normalize\n    bin_capacity = 1.0  # Assuming all bins have capacity 1. Can be generalized if needed.\n    item_ratio = item / bin_capacity\n\n    # Calculate the relative wasted space.\n    relative_wasted_space = wasted_space / (1 - item_ratio)\n\n    # Calculate the inverse of the relative wasted space to get the priority score.\n    priorities = 1.0 / relative_wasted_space\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the item size and the remaining capacity of each bin\n    diff = bins_remain_cap - item\n\n    # Prioritize bins with little remaining space (favor smaller diff)\n    # Add a small constant to avoid division by zero and to ensure that even bins with\n    # very small remaining capacity receive a reasonable score.\n    priorities = 1.0 / (diff + 1e-6)\n\n    return priorities\n\n[Reflection]\nSimpler is often better; focus on direct fit & avoid unnecessary normalization/ratios.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}