```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fit score for each bin:  item size / remaining capacity
    # Higher fit score means a better fit
    fit_scores = item / bins_remain_cap
    fit_scores[bins_remain_cap < item] = np.inf  # Penalize bins that can't fit the item

    # Apply softmax function to convert fit scores to probabilities (priorities)
    # This emphasizes better-fitting bins while still allowing some chance
    # for bins with slightly worse fit
    exp_fit_scores = np.exp(-fit_scores)  # Use negative fit score to maximize fit
    priorities = exp_fit_scores / np.sum(exp_fit_scores)

    return priorities
```
