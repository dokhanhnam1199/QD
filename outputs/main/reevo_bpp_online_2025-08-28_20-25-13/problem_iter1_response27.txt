```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Assign higher priority to bins where the item fits exactly
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000  # High priority for exact fits

    # Assign priority based on how well the item fits in the remaining space
    # Smaller remaining space after packing is better
    remaining_after_pack = bins_remain_cap - item
    valid_bins = remaining_after_pack >= 0
    priorities[valid_bins] = 1.0 / (remaining_after_pack[valid_bins] + 1e-6)  # Adding small value to avoid division by zero

    return priorities
```
