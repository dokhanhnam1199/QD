```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the item size and the remaining capacity of each bin
    diff = bins_remain_cap - item

    # Calculate the wasted space if the item is placed in each bin
    wasted_space = diff

    # Avoid division by zero and negative wasted space.  Small values are better than 0
    wasted_space = np.where(wasted_space <= 0, 1e-6, wasted_space)

    # Calculate the ratio of item size to the original bin capacity to normalize
    bin_capacity = 1.0  # Assuming all bins have capacity 1. Can be generalized if needed.
    item_ratio = item / bin_capacity

    # Calculate the relative wasted space.
    relative_wasted_space = wasted_space / (1 - item_ratio)

    # Calculate the inverse of the relative wasted space to get the priority score.
    priorities = 1.0 / relative_wasted_space

    return priorities
```
