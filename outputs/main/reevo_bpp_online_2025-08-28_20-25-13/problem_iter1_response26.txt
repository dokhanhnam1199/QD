```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure bins_remain_cap is a numpy array
    bins_remain_cap = np.array(bins_remain_cap)

    # Calculate the fit score using a sigmoid function
    # A higher score indicates a better fit
    fit_scores = 1.0 / (1.0 + np.exp(- (bins_remain_cap - item) / (item * 0.1))) # Adjusted scaling factor
    
    # Apply a penalty for bins that are too small
    priorities = np.where(bins_remain_cap >= item, fit_scores, 0.0)

    # Normalize the priorities to avoid large scores
    priorities = priorities / np.sum(priorities) if np.sum(priorities) > 0 else priorities
    
    return priorities
```
