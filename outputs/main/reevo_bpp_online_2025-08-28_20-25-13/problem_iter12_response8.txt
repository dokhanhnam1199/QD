```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) with a small addition to avoid zero division.
    Also includes a bonus for bins that are close to being full (but still have capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    diff = np.where(diff < 0, np.nan, diff)
    
    # Proximity fit (inverse distance)
    priorities = np.where(diff < 0, 0.0, 1.0 / (diff + 1e-6))
    
    # Bonus for bins that are almost full
    fullness = bins_remain_cap
    bonus = fullness / (np.max(bins_remain_cap) + 1e-6)  # Scale to [0, 1]
    priorities = priorities + 0.1 * bonus  # Add a small bonus
    
    return priorities
```
