```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-fit decreasing heuristic as the greedy part
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = 1.0 / (item + 1e-6)  # Smaller item size gives higher priority

    # Exploration - random bins with remaining capacity
    eligible_bins = np.where(bins_remain_cap >= item)[0]
    if np.random.random() < epsilon and len(eligible_bins) > 0:
        random_bin_index = np.random.choice(eligible_bins)
        priorities[random_bin_index] = 1.0  # Set high priority to the randomly chosen bin

    return priorities
```
