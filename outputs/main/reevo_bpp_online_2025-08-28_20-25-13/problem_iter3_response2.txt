```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    
    # Handle cases where item doesn't fit to avoid negative or zero values.
    diff = np.where(diff < 0, 0, diff)

    # Exact fit gets highest priority
    exact_fit = (diff == 0).astype(float) * 1e9
    
    # Sigmoid function to give higher scores to tighter fits
    # This creates a non-linear scoring, emphasizing tighter fits.
    sigmoid_scores = 1.0 / (1.0 + np.exp(-5 * (diff / item)))

    # Combine exact fit and sigmoid scores.
    priorities = exact_fit + sigmoid_scores
    
    # Add a small bonus for bins that are relatively full (encourages filling bins)
    # This is exploration - a small nudge.
    bin_fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities += bin_fullness * 0.1

    return priorities
```
