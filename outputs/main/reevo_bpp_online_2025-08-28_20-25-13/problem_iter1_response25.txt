```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities array
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate priority for each bin
    for i, remain_cap in enumerate(bins_remain_cap):
        if remain_cap >= item:
            priorities[i] = 1.0 / (remain_cap - item + 1e-6)  # Add a small value to avoid division by zero
        else:
            priorities[i] = 0.0  # Bin is too small

    return priorities
```
