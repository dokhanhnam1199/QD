```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on Almost Full Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the ratio of item size to bin capacity
    ratios = item / bins_remain_cap

    # Consider only bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    # If no bin can accommodate the item, return zero priorities
    if not np.any(valid_bins):
        return priorities

    # Apply Almost Full Fit heuristic:  Prioritize bins that are almost full.
    # Specifically, prioritize bins with a small difference between the remaining capacity
    # and the item size.  This is implemented as 1 - (remaining_capacity - item_size) / bin_capacity
    # Higher values indicate a better fit.
    
    priorities[valid_bins] = 1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    
    return priorities
```
