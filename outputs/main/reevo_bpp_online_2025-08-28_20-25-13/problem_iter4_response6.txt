```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit gets highest priority.
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    if len(exact_fit_bins) > 0:
        priorities[exact_fit_bins] = 1.0

    # Then bins that can accommodate the item, sorted by remaining capacity.
    possible_bins = np.where(bins_remain_cap >= item)[0]
    if len(possible_bins) > 0:
        remaining_capacities = bins_remain_cap[possible_bins]
        sorted_indices = np.argsort(remaining_capacities)
        priorities[possible_bins[sorted_indices]] = 0.5 - 0.4 * (sorted_indices / len(sorted_indices))

    return priorities
```
