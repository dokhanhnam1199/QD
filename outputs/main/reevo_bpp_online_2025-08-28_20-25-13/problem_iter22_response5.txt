```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit, and minimizing wasted space.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_after_item = bins_remain_cap[possible_bins] - item
    utilization = 1.0 - (remaining_after_item / bins_remain_cap[possible_bins])
    wasted_space_ratio = remaining_after_item / bins_remain_cap[possible_bins]

    # Prioritize high utilization, small remaining space, and low wasted space
    priorities = utilization - wasted_space_ratio

    # Add a bonus for bins that are almost full
    almost_full_bonus = np.where(bins_remain_cap[possible_bins] - remaining_after_item < 0.1 * bins_remain_cap[possible_bins], 0.2, 0.0)
    priorities += almost_full_bonus

    # Add a small value to avoid division by zero
    priorities = np.where(remaining_after_item == 0, 1e9, priorities)
    
    result = np.zeros_like(bins_remain_cap)
    result[possible_bins] = priorities
    return result
```
