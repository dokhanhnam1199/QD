```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate fit score, penalizing impossible fits
    fit_scores = np.full_like(bins_remain_cap, np.inf)
    fit_scores[bins_remain_cap >= item] = item / bins_remain_cap[bins_remain_cap >= item]
    
    # Apply sigmoid function for smoother prioritization
    # Scaling factor and shift can be tuned for better performance
    priorities = 1.0 / (1.0 + np.exp(-2.0 * (fit_scores - 0.5)))
    
    return priorities
```
