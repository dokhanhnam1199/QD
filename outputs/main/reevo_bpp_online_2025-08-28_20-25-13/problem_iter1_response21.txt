```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements Best Fit Decreasing heuristic's bin selection priority.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the item size and the remaining capacity of each bin
    differences = bins_remain_cap - item

    # Create a priority array based on the differences.  We want to prefer bins where
    # the remaining capacity *after* putting the item in is minimized, but only consider bins that
    # can fit the item.
    priorities = np.where(differences >= 0, 1.0 / (differences + 1e-9), -1.0) # Add a small value to avoid division by zero

    return priorities
```
