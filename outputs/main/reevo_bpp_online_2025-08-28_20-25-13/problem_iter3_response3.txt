```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities = np.where(exact_fit, 1000.0, 0.0)

    # For non-exact fits, prioritize tighter fits with a sigmoid function
    remaining_capacity_eligible = bins_remain_cap[~exact_fit]
    item_eligible = item * np.ones_like(remaining_capacity_eligible)
    diff = remaining_capacity_eligible - item_eligible
    diff = np.where(diff < 0, 0, diff) # Ensure non-negative difference

    # Sigmoid to give higher priority to tighter fits.  The scale and shift
    # parameters can be tuned.
    priorities_non_exact = 1.0 / (1.0 + np.exp(-10 * diff))
    priorities[~exact_fit] = priorities_non_exact

    # Add a small bonus for less full bins to encourage exploration
    priorities += 0.1 * (bins_remain_cap / np.max(bins_remain_cap))
    
    return priorities
```
