```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    diff = np.where(diff <= 0, 1e-6, diff)  # Avoid division by zero and negative capacities

    # Combine tighter fit (inverse of difference) with bin utilization
    priorities = (1.0 / diff) * (bins_remain_cap / 1.0)  # Assuming bin capacity is 1.0

    # Add a small bonus for bins that are already relatively full.
    # This encourages filling up existing bins before opening new ones.
    priorities = priorities + 0.1 * (bins_remain_cap / 1.0)

    return priorities
```
