```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities = np.where(exact_fit, 1000.0, 0.0)

    # Calculate the difference between the item size and the remaining capacity of each bin
    diff = bins_remain_cap - item

    # Avoid division by zero and negative differences
    diff = np.where(diff <= 0, 1e-6, diff)

    # Sigmoid function to prioritize tighter fits
    sigmoid_strength = 2.0  # Adjust this for sensitivity
    sigmoid_score = 1.0 / (1.0 + np.exp(-sigmoid_strength * (bins_remain_cap - item)))

    # Combine scores: Prioritize sigmoid score where there's no exact fit.
    priorities = np.where(exact_fit, priorities, sigmoid_score)

    # Add a small bonus for bins that are already somewhat full (exploration)
    bin_fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities += 0.1 * bin_fullness # Small bonus to explore more full bins

    return priorities
```
