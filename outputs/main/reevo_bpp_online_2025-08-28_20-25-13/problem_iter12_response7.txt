```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing higher space utilization and proximity fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_after_item = bins_remain_cap - item
    utilization = 1.0 - (remaining_after_item / bins_remain_cap)

    # Combine utilization and remaining space.  Higher utilization is good,
    # and smaller remaining space (but still positive) is also good.
    priorities = utilization * (bins_remain_cap - item > 0)
    priorities[~possible_bins] = 0.0

    return priorities
```
