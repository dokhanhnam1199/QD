```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fitness of each bin (how well the item fits)
    fitness = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Normalize the fitness values using softmax
    exp_fitness = np.exp(fitness / 1.0)  # Temperature parameter can be tuned
    priorities = exp_fitness / np.sum(exp_fitness)

    #Handle case where all remain_cap are less than item
    if np.sum(exp_fitness) == 0:
        priorities = np.zeros_like(bins_remain_cap)
    
    return priorities
```
