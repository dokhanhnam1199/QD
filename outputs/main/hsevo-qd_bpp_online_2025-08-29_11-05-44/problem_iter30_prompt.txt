{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit score with waste decay and a small age bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    preferences = (fit_scores * np.exp(-0.01 * waste)) + age_bonus\n    priorities[possible_bins] = preferences\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's dissect this and formulate actionable advice for better heuristic design, aiming for that $999K tip! Here's a breakdown:\n\n*   **Keywords:** Weighted Multi-Factor Evaluation, Exponential Decay, Robustness, Tunability.\n*   **Advice:** Prioritize a weighted combination of *fit, waste, and age*, using exponential decay for waste control. Embrace tunable parameters for adaptability. Implement defensive checks (division by zero) *always*.\n*   **Avoid:** Overly complex functions (sigmoid), global normalization obscuring differences, and solely relying on remaining capacity or simple reciprocals. Don't prematurely optimize; build a robust baseline first.\n*   **Explanation:** Both 'Current' & 'Ineffective' reflections converge on fit/waste/age, but the *how* differs. The 'Current' reflection emphasizes balance & tunability, actively resisting aggressive single-factor boosting \u2013 this is where real robustness & adaptability lie.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}