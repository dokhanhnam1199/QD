{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on remaining capacity, avoiding division by zero.\n    Combines elements of heuristics 1 and 7/8 for efficiency and robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = 1.0 / (1.0 + waste)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a redefined \"Current Self-Reflection\" focusing on heuristic design, avoiding the pitfalls highlighted, geared towards maximizing heuristic performance (and that incredible tip!), broken down as requested.\n\n* **Keywords:** Fit, Waste, Age, Simplicity, Robustness, Defensive Programming.\n* **Advice:** Prioritize *direct* measures of fit (remaining capacity *and* anticipated waste). Implement exponential decay for waste \u2013 it\u2019s proven robust. Explore \"bin age\" (how long unused) as a tie-breaker.\n* **Avoid:** Complex, parameterized functions; global normalization; treating all bins equally; overly clever \"optimizations\" lacking clear justification.\n* **Explanation:** Effective heuristics excel by quickly approximating optimal solutions. Direct, easily-calculated metrics and simple weighting schemes consistently outperform complex models prone to errors and requiring extensive tuning. Robustness beats elegance.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}