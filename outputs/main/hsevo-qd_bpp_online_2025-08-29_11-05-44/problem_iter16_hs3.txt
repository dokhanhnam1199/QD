import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 88.73859934657511, bin_ages: np.ndarray = None, k: float = 0.045642540527208265, age_weight: float = 0.13885761309360867) -> np.ndarray:
    """
    Calculates priorities for placing an item into bins.

    Args:
        item (float): The size of the item to be placed.
        bins_remain_cap (np.ndarray): Remaining capacity of each bin.
        total_waste (float, optional): Total waste so far. Defaults to 0.0.
        bin_ages (np.ndarray, optional): Age of each bin. Defaults to None.
        k (float, optional): Waste decay factor. Defaults to 0.01.
        age_weight (float, optional): Weight for bin age. Defaults to 0.1.

    Returns:
        np.ndarray: Priorities for each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities
    waste = bins_remain_cap[possible_bins] - item
    fit_score = -np.abs(item - bins_remain_cap[possible_bins])
    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score
    preference = capacity_weighted_preference * np.exp(-k * total_waste)
    if bin_ages is not None:
        preference += age_weight * bin_ages[possible_bins]
    priorities[possible_bins] = preference
    return priorities
