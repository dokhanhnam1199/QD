```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray) -> np.ndarray:
    """Combines inverse waste with bin age and waste decay for better bin prioritization."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap[possible_bins] - item
    fit_score = 1.0 / (waste + 1e-6)
    total_waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])

    waste_decay = -np.log(total_waste + 1) if total_waste > 0 else 0

    priorities[possible_bins] = (fit_score * 0.9) + (waste_decay * 0.1) + (bin_ages[possible_bins] * 0.005)
    return priorities
```
