```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)
    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])
    age = np.arange(len(bins_remain_cap))[possible_bins]
    
    weight_fit = 0.5
    weight_waste = 0.3
    weight_age = 0.2
    decay_rate = 0.01

    waste_decay = np.exp(-decay_rate * waste) if waste > 0 else 1.0
    age_bonus = age * 0.001

    priorities = (weight_fit * fit_scores) + (weight_waste * waste_decay) + (weight_age * age_bonus)
    
    priorities_arr = np.zeros_like(bins_remain_cap)
    priorities_arr[possible_bins] = priorities
    
    return priorities_arr
```
