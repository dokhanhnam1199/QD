import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, decay_rate: float = -0.0038469045534201517, preference_boost: float = 0.4068838230610661) -> np.ndarray:
    """Combines capacity-weighted preference with waste-sensitive decay."""
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities
    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])
    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)
    capacities = bins_remain_cap[possible_bins]
    preferences = (capacities * fit_scores) * np.exp(-decay_rate * waste)
    priorities[possible_bins] = preferences
    best_bin_index = np.argmax(priorities[possible_bins])
    priorities[possible_bins][best_bin_index] += preference_boost
    return priorities
