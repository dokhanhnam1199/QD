```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines weighted scoring with exponential decay for waste and bin age."""
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)
    total_waste = np.sum(bins_remain_cap)
    waste_decay = np.exp(-0.005 * total_waste)
    waste_scores = waste_decay * (bins_remain_cap[possible_bins] - item)
    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.002

    weights = np.array([0.7, 0.2, 0.1])
    priorities = weights[0] * fit_scores + weights[1] * waste_scores + weights[2] * age_bonus

    result = np.zeros_like(bins_remain_cap)
    result[possible_bins] = priorities
    return result
```
