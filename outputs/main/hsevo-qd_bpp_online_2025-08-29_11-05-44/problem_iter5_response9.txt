```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines capacity-weighted fit with waste-sensitive decay for bin prioritization.
    Prioritizes bins with good fit and explores less-obvious bins as waste increases.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap[possible_bins] - item
    fit_score = -np.abs(item - bins_remain_cap[possible_bins])
    priorities[possible_bins] = (bins_remain_cap[possible_bins] * fit_score) * np.exp(-0.1 * np.sum(bins_remain_cap - item))
    priorities[possible_bins] += 0.01 * np.arange(len(possible_bins))
    return priorities
```
