```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse capacity with a waste penalty to prioritize bins."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    distances = bins_remain_cap[valid_bins] - item
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = 1.0 / (distances + 1e-6)

    total_waste = np.sum(bins_remain_cap - item) if np.any(valid_bins) else 0
    k = 0.1
    priorities[valid_bins] *= np.exp(-k * total_waste)

    return priorities
```
