import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, k: float = 0.04111242519583585) -> np.ndarray:
    """
    Combines capacity-weighted preference with waste-sensitive decay.
    Prioritizes bins with good fit and adjusts based on total waste.
    """
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[valid_bins] - item
    fit_score = -np.abs(item - bins_remain_cap[valid_bins])
    priorities = np.zeros_like(bins_remain_cap)
    total_waste = np.sum(bins_remain_cap - item) if np.any(valid_bins) else 0
    priorities[valid_bins] = (bins_remain_cap[valid_bins] * fit_score) * np.exp(-k * total_waste)
    return priorities
