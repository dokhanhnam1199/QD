```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    
    bin_affinities = bins_remain_cap[valid_bins] - item
    
    temperatures = np.array([0.1, 0.5, 1.0, 2.0])
    
    softmax_outputs = []
    for temp in temperatures:
        exp_affinities = np.exp(bin_affinities / temp)
        normalized_exp_affinities = exp_affinities / np.sum(exp_affinities)
        softmax_outputs.append(normalized_exp_affinities)
        
    combined_priority = np.zeros_like(bins_remain_cap)

    valid_bin_indices = np.where(valid_bins)[0]

    for i,idx in enumerate(valid_bin_indices):
        combined_priority[idx] = np.mean(np.array([softmax_output[i] for softmax_output in softmax_outputs]))
        

    return combined_priority
```
