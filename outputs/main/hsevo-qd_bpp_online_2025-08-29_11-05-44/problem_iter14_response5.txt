```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray, total_waste: float) -> np.ndarray:
    """Combines fit, exponentially decayed waste, and bin age with tunable weights."""
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    remaining_capacities = bins_remain_cap[possible_bins]
    waste = 1 - (remaining_capacities / bins_remain_cap[possible_bins])
    
    fit_score = 1.0 / (remaining_capacities - item + 1e-6)
    waste_score = np.exp(-waste)
    age_score = 1.0 / (bin_ages[possible_bins] + 1e-6)

    weight_fit = 0.5
    weight_waste = 0.3
    weight_age = 0.2

    priorities[possible_bins] = (weight_fit * fit_score +
                                 weight_waste * waste_score +
                                 weight_age * age_score)
    return priorities
```
