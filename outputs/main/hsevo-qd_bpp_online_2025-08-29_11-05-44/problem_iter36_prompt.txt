{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit score with waste decay and a small age bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    preferences = (fit_scores * np.exp(-0.01 * waste)) + age_bonus\n    priorities[possible_bins] = preferences\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's distill a refined approach to heuristic design, focusing on bin packing as the core example, and aiming for that $999K tip!\n\n**Keywords:** Weighted combination, Exponential decay, Robustness, Tunability.\n\n**Advice:** Prioritize a weighted combination of *fit* (remaining capacity), *waste* (with exponential decay to control influence), and *bin age*. Design for easy parameter tuning of these weights. Focus on clear, direct measures; avoid abstract normalization.\n\n**Avoid:** Complex formulas, global waste calculations, reciprocals, and sigmoid functions unless rigorously proven superior. Overly simplistic solutions or aggressive penalties for any single factor. Division by zero *at all costs*.\n\n**Explanation:** The \u201cIneffective\u201d reflections highlight a pattern: overcomplication hurts. The most successful advice emphasizes *balance* achieved through tunable weights and robust functions (exponential decay).  Simplicity allows for faster iteration and easier debugging, while weighting allows adaptation to diverse problem instances.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}