{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on a combination of fit and remaining capacity.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(bins_remain_cap[possible_bins] - item)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = (bins_remain_cap[possible_bins] * fit_score) / (waste + 1e-9)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    priorities[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-6)\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic elegantly balances remaining capacity with waste avoidance using a simple inverse relationship, while the worst simply returns zero priorities. (2nd) vs (19th), shows a move toward incorporating fit scores and waste decay, but (19th)\u2019s direct use of remaining capacity is less nuanced.  (3rd) vs (18th), both attempt waste and age consideration, but (3rd) includes age as an additive bonus while (18th) uses a sigmoid function on waste, offering more control. (4th) vs (17th), both feature age. (5th) vs (16th), both feature waste decay. (6th) vs (15th), both use exponential decay to account for waste. (7th) vs (14th), (7th) and (8th) are identical, demonstrating a solid approach of waste normalization and fit score integration, which (14th) lacks. (9th) and (10th) return zero vectors, which is clearly undesirable. (11th) vs (13th), both utilize inverse waste. (12th) is effectively the same as (9th) and (10th). Overall, the superior heuristics prioritize efficient capacity utilization, penalize waste, and sometimes, incorporate a memory of bin usage to encourage diversification. The poorer heuristics either do nothing or rely on overly simplistic methods. The best heuristics generally avoid direct maximization of remaining capacity alone; instead, they integrate concepts like fit and waste to guide the bin selection process.\n- \nOkay, here's a redefined \"Current Self-Reflection\" focusing on heuristic design, avoiding the pitfalls highlighted, geared towards maximizing heuristic performance (and that incredible tip!), broken down as requested.\n\n* **Keywords:** Fit, Waste, Age, Simplicity, Robustness, Defensive Programming.\n* **Advice:** Prioritize *direct* measures of fit (remaining capacity *and* anticipated waste). Implement exponential decay for waste \u2013 it\u2019s proven robust. Explore \"bin age\" (how long unused) as a tie-breaker.\n* **Avoid:** Complex, parameterized functions; global normalization; treating all bins equally; overly clever \"optimizations\" lacking clear justification.\n* **Explanation:** Effective heuristics excel by quickly approximating optimal solutions. Direct, easily-calculated metrics and simple weighting schemes consistently outperform complex models prone to errors and requiring extensive tuning. Robustness beats elegance.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}