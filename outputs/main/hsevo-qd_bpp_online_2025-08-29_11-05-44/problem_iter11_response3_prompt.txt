{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit score and waste decay for bin priority, with age as tie-breaker.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    capacities = bins_remain_cap[possible_bins]\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    preferences = (capacities * fit_scores) * np.exp(-0.01 * waste)\n    priorities[possible_bins] = preferences\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    distances = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (distances + 1e-6)\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), the first heuristic incorporates age, waste, and fit score with exponential weighting, creating a more nuanced priority. The second relies heavily on inverse waste, adding a logarithmic penalty, which is less adaptable. Comparing (1st) vs (3rd), the first has an age bonus and total waste consideration, offering more control through the `k` parameter, while the third uses only total waste in its exponential decay, impacting all bins equally.\n\n(3rd) vs (4th) reveals the fourth simplifies the age factor, making it a fixed addition instead of an exponential bonus; (4th) vs (5th) shows the fifth lacks the waste decay entirely, making it very susceptible to poor packing decisions. (5th) vs (6th), the sixth offers a cleaner and more robust approach avoiding large priority values and the log penalty. (6th) vs (7th), the seventh's exponential decay on waste is less interpretable and potentially less stable than the reciprocal approach in the sixth. \n\n(7th) vs (8th), the eighth is essentially a placeholder as it always returns zero priorities. (8th) vs (9th) and (9th) vs (10th) and (10th) vs (11th) and (11th) vs (12th) all follow the same pattern of minimal functionality and return nearly identical results. (12th) vs (13th) is a slight improvement with the inclusion of `1e-6` to avoid division by zero. (13th) vs (14th) demonstrates the 14th attempts a more complex weighting scheme using `fit_score` and `waste` but overall lacks the robustness and clarity of the earlier heuristics. (14th) vs (15th) shows the 15th is an attempt at finding the maximum waste, which is not a good metric for priority. (15th) vs (16th), (16th) vs (17th) and (17th) vs (18th) appear to be refactoring with minor epsilon changes. (18th) vs (19th), (19th) vs (20th) all have very basic functionality returning inverse of remaining capacities.\n\nOverall: The most effective heuristics (1st, 2nd, 3rd, 6th) prioritize a balance of fit, waste, and potentially bin age. They use exponential functions for controlled decay and avoid division-by-zero errors.  Later heuristics either lack essential components, are overly simplistic, or introduce instability.\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable heuristic design principles. Here's a breakdown geared towards maximizing that $999K tip!\n\n* **Keywords:** Fit, Waste, Decay, Robustness, Simplicity, Differentiation.\n* **Advice:** Prioritize *decaying* waste as a primary selection factor, coupled with direct fit measures (remaining capacity). Differentiate bins \u2013 older/more filled bins deserve preference *despite* lower immediate fit.\n* **Avoid:** Normalization, complex fit functions, equal bin priority, and reliance *solely* on remaining capacity. Division by zero is absolutely unacceptable.\n* **Explanation:** Heuristics thrive on exploiting problem structure. Waste decay penalizes accumulation. Differentiation prevents premature commitment to suboptimal bins. Simplicity fosters robustness & faster evaluation.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}