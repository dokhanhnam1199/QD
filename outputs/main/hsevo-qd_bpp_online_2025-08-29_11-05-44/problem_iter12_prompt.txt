{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fit score with waste decay and a small age bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    preferences = (fit_scores * np.exp(-0.01 * waste)) + age_bonus\n    priorities[possible_bins] = preferences\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable heuristic design principles. Here's a breakdown geared towards maximizing that $999K tip!\n\n* **Keywords:** Fit, Waste, Decay, Robustness, Simplicity, Differentiation.\n* **Advice:** Prioritize *decaying* waste as a primary selection factor, coupled with direct fit measures (remaining capacity). Differentiate bins \u2013 older/more filled bins deserve preference *despite* lower immediate fit.\n* **Avoid:** Normalization, complex fit functions, equal bin priority, and reliance *solely* on remaining capacity. Division by zero is absolutely unacceptable.\n* **Explanation:** Heuristics thrive on exploiting problem structure. Waste decay penalizes accumulation. Differentiation prevents premature commitment to suboptimal bins. Simplicity fosters robustness & faster evaluation.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}