```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, waste, and age for a balanced priority score."""
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)
    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])
    waste_penalty = np.exp(-0.005 * waste)
    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.005

    weights = np.array([0.7, 0.2, 0.1])
    preferences = (weights[0] * fit_scores) + (weights[1] * waste_penalty) + (weights[2] * age_bonus)

    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = preferences
    return priorities
```
