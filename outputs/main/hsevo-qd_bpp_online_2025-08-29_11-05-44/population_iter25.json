[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities",
    "response_id": 0,
    "obj": 4.487435181491823,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 0.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response27.txt_stdout.txt",
    "code_path": "problem_iter1_code27.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    priorities[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-6)\n    return priorities",
    "response_id": 27,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 7.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 57.110323830864054,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response4.txt_stdout.txt",
    "code_path": "problem_iter1_code4.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        best_bin_index = np.argmin(bins_remain_cap[possible_bins] - item)\n        priorities[possible_bins] = 1.0\n        priorities[possible_bins][best_bin_index] = 2.0\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 13.931568569324174,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response5.txt_stdout.txt",
    "code_path": "problem_iter1_code5.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    distances = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (distances + 1e-6)\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response6.txt_stdout.txt",
    "code_path": "problem_iter1_code6.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    bin_ids = np.arange(len(bins_remain_cap))\n    \n    fit_score = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    fit_score[valid_bins] = 1.0 / (1.0 + np.exp(-5 * (bins_remain_cap[valid_bins] - item)))\n\n    \n    priorities = fit_score\n    \n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 13.40247307538892,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 77.66179398375645,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response8.txt_stdout.txt",
    "code_path": "problem_iter1_code8.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    priorities[possible_bins] = 1.0 / remaining_capacities\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 24.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response11.txt_stdout.txt",
    "code_path": "problem_iter1_code11.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-6)\n    \n    return priorities",
    "response_id": 11,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response12.txt_stdout.txt",
    "code_path": "problem_iter1_code12.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        worst_fit_capacities = bins_remain_cap[valid_bins] - item\n        max_waste = np.max(worst_fit_capacities)\n        priorities[valid_bins] = max_waste\n    return priorities",
    "response_id": 12,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 13.931568569324174,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response13.txt_stdout.txt",
    "code_path": "problem_iter1_code13.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = bins_remain_cap[i] - item\n    return priorities",
    "response_id": 13,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 13.931568569324174,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response17.txt_stdout.txt",
    "code_path": "problem_iter1_code17.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.sum(possible_bins) == 0:\n        return priorities\n    \n    priorities[possible_bins] = 1.0 / (bins_remain_cap[possible_bins] - item + 0.0001)\n    \n    return priorities",
    "response_id": 17,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 7.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 57.110323830864054,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response16.txt_stdout.txt",
    "code_path": "problem_iter1_code16.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    capacities = np.copy(bins_remain_cap)\n    priorities = np.zeros_like(capacities)\n    valid_bins = capacities >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = capacities[valid_bins] - item\n    \n    sigmoid_values = 1 / (1 + np.exp(-waste))\n    \n    priorities[valid_bins] = sigmoid_values\n    \n    return priorities",
    "response_id": 16,
    "tryHS": false,
    "obj": 71.93857199840448,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 60.91767875292166,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response19.txt_stdout.txt",
    "code_path": "problem_iter1_code19.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    temp = bins_remain_cap[valid_bins] - item\n    \n    normalized_temp = temp / np.sum(temp)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = normalized_temp\n    \n    return priorities",
    "response_id": 19,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 36.541209043760986,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response21.txt_stdout.txt",
    "code_path": "problem_iter1_code21.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    waste = bins_remain_cap[possible_bins] - item\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = 1.0 / (waste + 1e-9)\n    return priorities",
    "response_id": 21,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response22.txt_stdout.txt",
    "code_path": "problem_iter1_code22.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    worst_fit_bins = bins_remain_cap[valid_bins]\n    priorities[valid_bins] = worst_fit_bins\n    return priorities",
    "response_id": 22,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 15.509775004326936,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response26.txt_stdout.txt",
    "code_path": "problem_iter1_code26.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1 / (1 + np.exp(- (bins_remain_cap[i] - item) / 0.5))\n        else:\n            priorities[i] = 0\n    return priorities",
    "response_id": 26,
    "tryHS": false,
    "obj": 27.173913043478258,
    "SLOC": 9.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 64.72503367497926,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response29.txt_stdout.txt",
    "code_path": "problem_iter1_code29.py",
    "code": "import numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    temp = bins_remain_cap - item\n    priorities = np.where(temp >= 0, np.exp(temp), 0)\n    return priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(bins_remain_cap)",
    "response_id": 29,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 4.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 41.51317942364757,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines simplicity of direct capacity check with stability.\n    Prioritizes bins with enough capacity, avoids division by zero.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    priorities[possible_bins] = 1.0 / (remaining_capacities - item + 1e-6)\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines the simplicity of direct capacity check with a small \n    constant to avoid division-by-zero issues, enhancing robustness.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    priorities[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-6)\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 7.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity, avoiding division by zero.\n    Combines elements of heuristics 1 and 7/8 for efficiency and robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = 1.0 / (1.0 + waste)\n    return priorities",
    "response_id": 5,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 50.18947501009619,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines features from heuristics 6 and 9: prioritizes bins with enough capacity,\n    boosts the priority of the best-fit bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        priorities[possible_bins] = 1.0\n        best_bin_index = np.argmin(bins_remain_cap[possible_bins] - item)\n        priorities[possible_bins][best_bin_index] = 2.0\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 13.931568569324174,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines the simplicity of inverse remaining capacity (v2) \n    with a check for valid bins (v6/v7/v8) for efficiency.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    priorities[possible_bins] = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-6)\n    return priorities",
    "response_id": 4,
    "tryHS": true,
    "obj": 4.198244914240141,
    "SLOC": 7.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best of v2 & v6: filters valid bins, then uses inverse remaining capacity.\n    Prioritizes bins with smallest waste while avoiding division by zero.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    distances = bins_remain_cap[valid_bins] - item\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = 1.0 / (distances + 1e-6)\n    return priorities",
    "response_id": 8,
    "tryHS": true,
    "obj": 4.198244914240141,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = np.exp(-waste / item)\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 44.97261104228487,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = np.where(waste == 0, 1000.0, 1.0 / (waste + 1e-6))\n    priorities[possible_bins] -= np.log(np.sum(possible_bins)) / 10\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 97.70233280920246,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, const_add: float = 6.135155314186201) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity, avoiding division by zero.\n    Combines elements of heuristics 1 and 7/8 for efficiency and robustness.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 6.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines capacity-weighted preference with waste-sensitive decay for bin selection.\n    Prioritizes bins based on remaining capacity and how well the item fits,\n    adjusting preference based on accumulated waste to encourage exploration.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(waste)\n    \n    total_waste = np.sum(bins_remain_cap - item) if np.any(possible_bins) else 0\n    k = 0.01 \n\n    priorities[possible_bins] = (bins_remain_cap[possible_bins] * fit_score) * np.exp(-k * total_waste)\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 12.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 98.09910819000817,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on a combination of fit and remaining capacity.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(bins_remain_cap[possible_bins] - item)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = (bins_remain_cap[possible_bins] * fit_score) / (waste + 1e-9)\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 93.45440529575887,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with a small boost for recently used bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-6)\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 8.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 51.80615605397529,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response8.txt_stdout.txt",
    "code_path": "problem_iter11_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste decay (like v0) with a direct fit component (like v6).\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = 1.0 / (waste + 1e-6) \n    priorities[possible_bins] = np.exp(-waste / item) * fit_score\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 91.73835003173087,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines capacity-weighted preference with waste-sensitive decay.\n    Prioritizes bins with good fit and adjusts based on total waste.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[valid_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[valid_bins])\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    total_waste = np.sum(bins_remain_cap - item) if np.any(valid_bins) else 0\n    \n    k = 0.01\n    priorities[valid_bins] = (bins_remain_cap[valid_bins] * fit_score) * np.exp(-k * total_waste)\n\n    return priorities",
    "response_id": 6,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 11.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 112.58797503894243,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity-weighted preference with waste-sensitive decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    capacities = bins_remain_cap[possible_bins]\n    \n    preferences = (capacities * fit_scores) * np.exp(-0.01 * waste)\n\n    priorities[possible_bins] = preferences\n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins][best_bin_index] += 1.0\n    return priorities",
    "response_id": 8,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 120.40465370320703,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_scores\n\n    if bin_ages is None:\n        bin_ages = np.zeros(n_bins)\n\n    age_boost = np.exp(-0.001 * bin_ages)\n    \n    preference = (capacity_weighted_preference) * np.exp(-k * total_waste) * age_boost\n    priorities[possible_bins] = preference\n    \n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 162.53496664211536,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score\n\n    preference = capacity_weighted_preference * np.exp(-k * total_waste)\n\n    if bin_ages is not None:\n        preference += 0.1 * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n\n    return priorities",
    "response_id": 2,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 155.11451069865606,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_scores = -np.abs(item - bins_remain_cap[possible_bins])\n    \n    if bin_ages is None:\n        bin_ages = np.zeros(n_bins)\n\n    age_bonus = np.exp(-bin_ages)\n    \n    preferences = (bins_remain_cap[possible_bins] * fit_scores) * np.exp(-k * total_waste) * age_bonus\n    priorities[possible_bins] = preferences\n    \n    return priorities",
    "response_id": 4,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 144.75398259382442,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.00045586546776926594) -> np.ndarray:\n    \"\"\"Combines best of v2 & v6: filters valid bins, then uses inverse remaining capacity. Prioritizes bins with smallest waste while avoiding division by zero.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 4.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score and waste decay for bin priority, with age as tie-breaker.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    capacities = bins_remain_cap[possible_bins]\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    preferences = (capacities * fit_scores) * np.exp(-0.01 * waste)\n    priorities[possible_bins] = preferences\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 101.95026032264605,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response3.txt_stdout.txt",
    "code_path": "problem_iter20_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None, k: float = 0.01, age_weight: float = 0.1) -> np.ndarray:\n    \"\"\"Combines fit, waste decay, and age for bin priority.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score\n    preference = capacity_weighted_preference * np.exp(-k * waste)\n\n    if bin_ages is not None:\n        preference += age_weight * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 155.11451069865606,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None) -> np.ndarray:\n    \"\"\"Combines inverse waste with a small boost for older bins.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = 1.0 / (waste + 1e-6)\n\n    if bin_ages is not None:\n        priorities[possible_bins] = fit_score + 0.1 * bin_ages[possible_bins]\n    else:\n        priorities[possible_bins] = fit_score\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 101.02330072391149,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response0.txt_stdout.txt",
    "code_path": "problem_iter10_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.00034064097164850316) -> np.ndarray:\n    \"\"\"\n    Combines the simplicity of inverse remaining capacity (v2) with a check for valid bins (v6/v7/v8) for efficiency.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 5.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response3.txt_stdout.txt",
    "code_path": "problem_iter11_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with waste decay and a small age bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    preferences = (fit_scores * np.exp(-0.01 * waste)) + age_bonus\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.008775428799367,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 120.40465370320703,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response4.txt_stdout.txt",
    "code_path": "problem_iter11_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None) -> np.ndarray:\n    \"\"\"Combines fit score, waste, and bin age for a balanced priority.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score\n    \n    preference = capacity_weighted_preference * np.exp(-0.1 * waste)\n\n    if bin_ages is not None:\n        preference += 0.05 * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 86.55763861188672,
    "SLOC": 14.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 155.11451069865606,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response9.txt_stdout.txt",
    "code_path": "problem_iter11_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score (inverse remaining capacity) with a small constant and a waste factor.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    remaining_capacities = bins_remain_cap[valid_bins]\n    \n    fit_score = 1.0 / (remaining_capacities - item + 1e-6)\n    waste_factor = np.exp(-remaining_capacities / np.mean(bins_remain_cap))\n    \n    priorities[valid_bins] = fit_score * waste_factor\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 93.45440529575887,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response0.txt_stdout.txt",
    "code_path": "problem_iter12_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    fit_scores = bins_remain_cap[possible_bins] - item\n    \n    bin_ages = np.arange(len(bins_remain_cap))[possible_bins]\n    \n    waste_decay = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    \n    if waste_decay > 0:\n        decay_factor = np.exp(-0.005 * waste_decay)\n    else:\n        decay_factor = 1.0\n    \n    priorities = (fit_scores * decay_factor) + (0.01 * bin_ages)\n    \n    priority_array = np.zeros_like(bins_remain_cap)\n    priority_array[possible_bins] = priorities\n    \n    return priority_array",
    "response_id": 0,
    "tryHS": false,
    "obj": 115.06781013163143,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 126.65973476959637,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response6.txt_stdout.txt",
    "code_path": "problem_iter14_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, exponentially decayed waste, and bin age for prioritization.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    waste_decay = -np.log(waste + 1) if waste > 0 else 0\n    age_bonus = np.arange(n_bins)[possible_bins] * 0.01\n\n    preferences = (fit_scores * 0.8) + (waste_decay * 0.1) + age_bonus\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 102.93179098524132,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 161.66617507355795,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response2.txt_stdout.txt",
    "code_path": "problem_iter12_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes waste decay and fit, differentiating bins by fill level.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    \n    fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    \n    if waste <= 0:\n        waste_penalty = 0.0\n    else:\n        waste_penalty = np.exp(-0.01 * waste)\n    \n    preferences = (fit_scores * waste_penalty) + (fill_levels[possible_bins] * 0.1)\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 161.66617507355795,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response4.txt_stdout.txt",
    "code_path": "problem_iter12_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes decaying waste with fit and age differentiation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap)\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.01\n    \n    decay_factor = np.exp(-0.005 * waste)\n    \n    preferences = (fit_scores * decay_factor) + age_bonus\n    priorities[possible_bins] = preferences\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 5.325089748703639,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 93.45440529575887,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter13_response0.txt_stdout.txt",
    "code_path": "problem_iter13_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.5068284485418374, bin_ages: np.ndarray = None, k: float = 0.07937546355089958) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 6.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response0.txt_stdout.txt",
    "code_path": "problem_iter14_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste decay, and age bonus with tunable weights.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n    \n    priorities = (\n        (fit_scores * np.exp(-0.01 * waste)) + age_bonus\n    )\n\n    priorities_full = np.zeros_like(bins_remain_cap)\n    priorities_full[possible_bins] = priorities\n    return priorities_full",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.008775428799367,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 120.40465370320703,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"A refined priority function for online bin packing.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.002\n\n    weights = {'fit': 1.0, 'waste': 0.1, 'age': 0.05}\n    waste_decay_rate = 0.015\n\n    preferences = (weights['fit'] * fit_scores) + \\\n                  (weights['waste'] * np.exp(-waste_decay_rate * waste)) + \\\n                  (weights['age'] * age_bonus)\n\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.11846828879138,
    "SLOC": 15.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 173.06477719407374,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response3.txt_stdout.txt",
    "code_path": "problem_iter14_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines worst-fit with waste decay and age bonus for improved bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    worst_fit_capacities = bins_remain_cap[valid_bins] - item\n    max_waste = np.max(worst_fit_capacities)\n    waste_decay = -np.log(np.sum(bins_remain_cap) + 1)\n    age_bonus = np.arange(len(bins_remain_cap))[valid_bins] * 0.005\n    preferences = (max_waste * 0.8) + (waste_decay * 0.1) + age_bonus\n    priorities[valid_bins] = preferences\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 12.794176306342237,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 126.65973476959637,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response8.txt_stdout.txt",
    "code_path": "problem_iter14_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste (v0) with a bin age bonus (v1) for improved prioritization.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[possible_bins] - item\n    priorities = 1.0 / (waste + 1e-6)\n    bin_ages = np.arange(len(bins_remain_cap))[possible_bins]\n    priorities += 0.01 * bin_ages\n\n    priority_array = np.zeros_like(bins_remain_cap)\n    priority_array[possible_bins] = priorities\n    return priority_array",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.188272836059035,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 83.39850002884624,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter15_response0.txt_stdout.txt",
    "code_path": "problem_iter15_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    weights = {'fit': 0.6, 'waste': 0.3, 'age': 0.1}\n    decay_rate = 0.01\n    age_factor = 0.001\n    total_waste = np.sum(bins_remain_cap)\n    bin_ages = np.arange(len(bins_remain_cap))\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_scores = np.exp(-decay_rate * (total_waste - np.sum(bins_remain_cap[possible_bins])))\n    age_scores = bin_ages[possible_bins] * age_factor\n    priorities[possible_bins] = (weights['fit'] * fit_scores +\n                                weights['waste'] * waste_scores +\n                                weights['age'] * age_scores)\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.317909852413238,
    "SLOC": 17.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 173.06477719407374,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste, and age with weighted scoring and exponential waste decay.\"\"\"\n    weights = {'fit': 0.6, 'waste': 0.3, 'age': 0.1}\n    decay_rate = 0.01\n    age_factor = 0.001\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_influence = np.exp(-decay_rate * np.sum(bins_remain_cap))\n    age_bonus = np.arange(n_bins)[possible_bins] * age_factor\n\n    priorities[possible_bins] = (weights['fit'] * fit_scores +\n                                weights['waste'] * waste_influence +\n                                weights['age'] * age_bonus)\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 155.11451069865606,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter15_response2.txt_stdout.txt",
    "code_path": "problem_iter15_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    weights = {'fit': 0.6, 'waste': 0.3, 'age': 0.1}\n    decay_rate = 0.01\n    age_scale = 0.0005\n    total_waste = np.sum(bins_remain_cap)\n    mean_age = np.mean(np.arange(len(bins_remain_cap)))\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_scores = np.exp(-decay_rate * (total_waste)) * (bins_remain_cap[possible_bins] - item)\n    age_scores = age_scale * (np.arange(len(bins_remain_cap))[possible_bins] - mean_age)\n    priorities[possible_bins] = (weights['fit'] * fit_scores +\n                                weights['waste'] * waste_scores +\n                                weights['age'] * age_scores)\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.15835660151576,
    "SLOC": 17.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 208.0762450362488,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines weighted scoring with exponential decay for waste and bin age.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    total_waste = np.sum(bins_remain_cap)\n    waste_decay = np.exp(-0.005 * total_waste)\n    waste_scores = waste_decay * (bins_remain_cap[possible_bins] - item)\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.002\n\n    weights = np.array([0.7, 0.2, 0.1])\n    priorities = weights[0] * fit_scores + weights[1] * waste_scores + weights[2] * age_bonus\n\n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.208216992421225,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 189.46125880997533,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter16_response0.txt_stdout.txt",
    "code_path": "problem_iter16_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 92.87847933423673, bin_ages: np.ndarray = None, k: float = 0.09805334070452522, age_weight: float = 0.5236057588600324) -> np.ndarray:\n    \"\"\"\n    Calculates priorities for placing an item into bins.\n\n    Args:\n        item (float): The size of the item to be placed.\n        bins_remain_cap (np.ndarray): Remaining capacity of each bin.\n        total_waste (float, optional): Total waste so far. Defaults to 0.0.\n        bin_ages (np.ndarray, optional): Age of each bin. Defaults to None.\n        k (float, optional): Waste decay factor. Defaults to 0.01.\n        age_weight (float, optional): Weight for bin age. Defaults to 0.1.\n\n    Returns:\n        np.ndarray: Priorities for each bin.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 6.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response0.txt_stdout.txt",
    "code_path": "problem_iter18_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = 1.0 / np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    waste_decay = np.exp(-0.005 * waste)\n    preferences = fit_scores * waste_decay\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 5.275229357798175,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 93.45440529575887,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response6.txt_stdout.txt",
    "code_path": "problem_iter17_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bin fit with exponential waste decay for fragmentation control.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[valid_bins] - item\n    waste = np.sum(bins_remain_cap)\n    decay_factor = np.exp(-0.005 * waste)\n    priorities[valid_bins] = (1.0 / (fit_scores + 1e-6)) * decay_factor\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 95.08241808752197,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response8.txt_stdout.txt",
    "code_path": "problem_iter17_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit (inverse remaining capacity) with exponential waste decay for robust bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    waste = remaining_capacities - item\n    priorities[possible_bins] = 1.0 / (remaining_capacities - item + 1e-6) * np.exp(-waste / 10.0)\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 108.04820237218406,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response1.txt_stdout.txt",
    "code_path": "problem_iter18_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    priorities[possible_bins] = (fit_scores * np.exp(-0.005 * waste))\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 85.83671966625714,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response4.txt_stdout.txt",
    "code_path": "problem_iter18_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    total_waste = np.sum(bins_remain_cap)\n    waste_decay = np.exp(-0.005 * total_waste)\n    priorities[possible_bins] = fit_scores * waste_decay\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 70.32403072095333,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter19_response0.txt_stdout.txt",
    "code_path": "problem_iter19_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.04226602965352387, age_factor: float = 0.0001802412172849541) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 6.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with waste-sensitive decay and age bonus.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_score = -np.abs(item - bins_remain_cap[valid_bins])\n    waste = bins_remain_cap[valid_bins] - item\n    age_bonus = np.arange(len(bins_remain_cap))[valid_bins] * 0.01\n    total_waste = np.sum(bins_remain_cap[valid_bins] - item)\n\n    k = 0.01\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = (bins_remain_cap[valid_bins] * fit_score + age_bonus) * np.exp(-k * total_waste)\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 151.30376252379818,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response1.txt_stdout.txt",
    "code_path": "problem_iter20_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste decay, and age for robust bin prioritization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[valid_bins] - item\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[valid_bins])\n    waste_penalty = np.exp(-0.01 * waste) if waste > 0 else 1.0\n    age_bonus = np.arange(len(bins_remain_cap))[valid_bins] * 0.005\n    preferences = (fit_scores * 0.8) + (waste_penalty * 0.1) + age_bonus\n    priorities[valid_bins] = preferences\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 135.92939768647787,
    "SLOC": 12.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 161.66617507355795,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response2.txt_stdout.txt",
    "code_path": "problem_iter20_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste (like v0) with a best-fit boost (like v1).\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-6)\n    if np.any(valid_bins):\n        best_bin_index = np.argmin(bins_remain_cap[valid_bins] - item)\n        priorities[valid_bins][best_bin_index] += 0.5\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 11.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 80.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response4.txt_stdout.txt",
    "code_path": "problem_iter20_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, decaying waste, and age for bin prioritization.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap)\n    decay_factor = np.exp(-0.005 * waste)\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.01\n    priorities = (fit_scores * decay_factor) + age_bonus\n    \n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result",
    "response_id": 4,
    "tryHS": false,
    "obj": 5.325089748703639,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 93.45440529575887,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response5.txt_stdout.txt",
    "code_path": "problem_iter20_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit and exponentially decaying waste, with a bin age bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (waste + 1e-6)\n    \n    bin_ages = np.arange(len(bins_remain_cap))\n    age_bonus = 1.0 / (bin_ages + 1)\n    age_bonus = age_bonus[valid_bins]\n\n    total_waste = np.sum(bins_remain_cap)\n    waste_decay = np.exp(-total_waste / 100.0) \n    \n    priorities[valid_bins] = (0.7 * fit_score + 0.3 * age_bonus) * waste_decay\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 177.87213211613133,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response9.txt_stdout.txt",
    "code_path": "problem_iter20_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste, and age for bin selection. Prioritizes good fit and minimizes waste.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = 1.0 / (waste + 1e-6)\n    age_penalty = np.log(np.sum(possible_bins) + 1) / 10\n    priorities[possible_bins] = fit_score - age_penalty\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 95.90827503317318,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response0.txt_stdout.txt",
    "code_path": "problem_iter21_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_decay = np.exp(-0.005 * (np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])))\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.0005\n\n    priorities[possible_bins] = (0.6 * fit_scores + 0.3 * waste_decay + 0.1 * age_bonus)\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.2181890706023095,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 173.06477719407374,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response3.txt_stdout.txt",
    "code_path": "problem_iter21_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap[possible_bins]) - item\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.005\n    weights = np.array([0.7, 0.2, 0.1])\n    preferences = (weights[0] * fit_scores) + (weights[1] * np.exp(-0.02 * waste)) + (weights[2] * age_bonus)\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.058635819704831,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 171.1759500778849,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, decay_rate: float = 0.04485551345311698, preference_boost: float = 0.4068838230610661) -> np.ndarray:\n    \"\"\"Combines capacity-weighted preference with waste-sensitive decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 5.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit and waste decay, inspired by v0, but simplified for efficiency.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    priorities = fit_scores * np.exp(-0.005 * waste)\n    priorities_full = np.zeros_like(bins_remain_cap)\n    priorities_full[possible_bins] = priorities\n    return priorities_full",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 85.83671966625714,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit and waste decay with a small age bonus, prioritizing bins.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_score = 1.0 / (bins_remain_cap[possible_bins] - item + 0.0001)\n    waste_decay = np.exp(-0.1 * (1 - (bins_remain_cap[possible_bins] - item) / bins_remain_cap[possible_bins]))\n    age_bonus = np.arange(n_bins) / n_bins\n    \n    priorities[possible_bins] = 0.6 * fit_score * waste_decay + 0.4 * age_bonus[possible_bins]\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 215.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response5.txt_stdout.txt",
    "code_path": "problem_iter23_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with waste decay and boosts the best-fit bin.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    remaining_capacities = bins_remain_cap[valid_bins]\n    fit_score = 1.0 / (remaining_capacities - item + 1e-6)\n    waste_factor = np.exp(-remaining_capacities / np.mean(bins_remain_cap))\n    priorities[valid_bins] = fit_score * waste_factor\n\n    best_bin_index = np.argmin(bins_remain_cap[valid_bins] - item)\n    priorities[valid_bins][best_bin_index] *= 2.0\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 124.86408532184433,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response6.txt_stdout.txt",
    "code_path": "problem_iter23_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None) -> np.ndarray:\n    \"\"\"Combines best-fit preference with waste decay and age bonus.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    waste = bins_remain_cap[possible_bins] - item\n    preference = fit_score * np.exp(-0.1 * waste)\n    \n    if bin_ages is not None:\n        preference += 0.05 * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n\n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins][best_bin_index] *= 2.0\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 86.56761069006784,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 155.11451069865606,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response7.txt_stdout.txt",
    "code_path": "problem_iter23_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste decay, and age bonus with tuned weights.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = -np.abs(remaining_capacities - item)\n    waste_decay = np.exp(-0.005 * np.sum(bins_remain_cap))\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    priorities[possible_bins] = (0.6 * fit_scores + 0.3 * waste_decay + 0.1 * age_bonus)\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.15835660151576,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 155.11451069865606,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with waste decay, age bonus, and a density preference.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n    density_preference = bins_remain_cap[possible_bins] / (np.sum(bins_remain_cap) + 1e-9)\n\n    weights = {'fit': 0.6, 'waste': 0.2, 'age': 0.1, 'density': 0.1}\n    preferences = (\n        weights['fit'] * fit_scores\n        + weights['waste'] * np.exp(-0.01 * waste)\n        + weights['age'] * age_bonus\n        + weights['density'] * density_preference\n    )\n\n    priorities[possible_bins] = preferences\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.287993617869964,
    "SLOC": 18.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 250.05376155018962,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response0.txt_stdout.txt",
    "code_path": "problem_iter25_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, k: float = 0.03349903631407448) -> np.ndarray:\n    \"\"\"\n    Combines capacity-weighted preference with waste-sensitive decay.\n    Prioritizes bins with good fit and adjusts based on total waste.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 4.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  }
]