{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_scores = -np.abs(item - bins_remain_cap[possible_bins])\n    \n    if bin_ages is None:\n        bin_ages = np.zeros(n_bins)\n\n    age_bonus = np.exp(-bin_ages)\n    \n    preferences = (bins_remain_cap[possible_bins] * fit_scores) * np.exp(-k * total_waste) * age_bonus\n    priorities[possible_bins] = preferences\n    \n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity-weighted preference with waste-sensitive decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    capacities = bins_remain_cap[possible_bins]\n    \n    preferences = (capacities * fit_scores) * np.exp(-0.01 * waste)\n\n    priorities[possible_bins] = preferences\n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins][best_bin_index] += 1.0\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste decay (like v0) with a direct fit component (like v6).\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = 1.0 / (waste + 1e-6) \n    priorities[possible_bins] = np.exp(-waste / item) * fit_score\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    priorities[possible_bins] = (fit_scores * np.exp(-0.005 * waste))\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity, avoiding division by zero.\n    Combines elements of heuristics 1 and 7/8 for efficiency and robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = 1.0 / (1.0 + waste)\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score\n\n    preference = capacity_weighted_preference * np.exp(-k * total_waste)\n\n    if bin_ages is not None:\n        preference += 0.1 * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity-weighted preference with waste-sensitive decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    capacities = bins_remain_cap[possible_bins]\n    \n    preferences = (capacities * fit_scores) * np.exp(-0.01 * waste)\n\n    priorities[possible_bins] = preferences\n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins][best_bin_index] += 1.0\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    A refined priority function for online Bin Packing, combining fit, waste decay,\n    and age bonus with tunable weights.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    weight_fit = 0.6\n    weight_waste = 0.3\n    weight_age = 0.1\n\n    decay_rate = 0.01\n\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if waste > 0:\n        preferences = (weight_fit * fit_scores) + (weight_waste * np.exp(-decay_rate * waste)) + (weight_age * age_bonus)\n    else:\n        preferences = (weight_fit * fit_scores) + (weight_waste * 1.0) + (weight_age * age_bonus)\n\n    priorities[possible_bins] = preferences\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    priorities[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-6)\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines simplicity of direct capacity check with stability.\n    Prioritizes bins with enough capacity, avoids division by zero.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    priorities[possible_bins] = 1.0 / (remaining_capacities - item + 1e-6)\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines simplicity of direct capacity check with stability.\n    Prioritizes bins with enough capacity, avoids division by zero.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    priorities[possible_bins] = 1.0 / (remaining_capacities - item + 1e-6)\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age = np.arange(len(bins_remain_cap))[possible_bins]\n    \n    weight_fit = 0.5\n    weight_waste = 0.3\n    weight_age = 0.2\n    decay_rate = 0.01\n\n    waste_decay = np.exp(-decay_rate * waste) if waste > 0 else 1.0\n    age_bonus = age * 0.001\n\n    priorities = (weight_fit * fit_scores) + (weight_waste * waste_decay) + (weight_age * age_bonus)\n    \n    priorities_arr = np.zeros_like(bins_remain_cap)\n    priorities_arr[possible_bins] = priorities\n    \n    return priorities_arr\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.5068284485418374, bin_ages: np.ndarray = None, k: float = 0.07937546355089958) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bin fit with exponential waste decay for fragmentation control.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[valid_bins] - item\n    waste = np.sum(bins_remain_cap)\n    decay_factor = np.exp(-0.005 * waste)\n    priorities[valid_bins] = (1.0 / (fit_scores + 1e-6)) * decay_factor\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.04226602965352387, age_factor: float = 0.0001802412172849541) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, decay_rate: float = 0.04485551345311698, preference_boost: float = 0.4068838230610661) -> np.ndarray:\n    \"\"\"Combines capacity-weighted preference with waste-sensitive decay.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.0001542242372650544) -> np.ndarray:\n    \"\"\"Combines waste decay (like v0) with a direct fit component (like v6).\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.00034064097164850316) -> np.ndarray:\n    \"\"\"\n    Combines the simplicity of inverse remaining capacity (v2) with a check for valid bins (v6/v7/v8) for efficiency.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines worst-fit with waste decay and age bonus for improved bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    worst_fit_capacities = bins_remain_cap[valid_bins] - item\n    max_waste = np.max(worst_fit_capacities)\n    waste_decay = -np.log(np.sum(bins_remain_cap) + 1)\n    age_bonus = np.arange(len(bins_remain_cap))[valid_bins] * 0.005\n    preferences = (max_waste * 0.8) + (waste_decay * 0.1) + age_bonus\n    priorities[valid_bins] = preferences\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1 / (1 + np.exp(- (bins_remain_cap[i] - item) / 0.5))\n        else:\n            priorities[i] = 0\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}