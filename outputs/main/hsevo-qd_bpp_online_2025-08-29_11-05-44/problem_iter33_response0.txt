```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online Bin Packing, combining fit, waste decay,
    and age bonus with tunable weights.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)
    waste = np.sum(bins_remain_cap[possible_bins])
    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001

    weight_fit = 0.6
    weight_waste = 0.3
    weight_age = 0.1

    decay_rate = 0.01

    priorities = np.zeros_like(bins_remain_cap)
    
    if waste > 0:
        preferences = (weight_fit * fit_scores) + (weight_waste * np.exp(-decay_rate * waste)) + (weight_age * age_bonus)
    else:
        preferences = (weight_fit * fit_scores) + (weight_waste * 1.0) + (weight_age * age_bonus)

    priorities[possible_bins] = preferences
    return priorities
```
