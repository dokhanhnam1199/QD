```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit, waste decay, and age for robust bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    fit_scores = bins_remain_cap[valid_bins] - item
    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[valid_bins])
    waste_penalty = np.exp(-0.01 * waste) if waste > 0 else 1.0
    age_bonus = np.arange(len(bins_remain_cap))[valid_bins] * 0.005
    preferences = (fit_scores * 0.8) + (waste_penalty * 0.1) + age_bonus
    priorities[valid_bins] = preferences
    return priorities
```
