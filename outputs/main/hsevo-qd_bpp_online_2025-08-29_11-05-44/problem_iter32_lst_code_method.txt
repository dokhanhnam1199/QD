{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with waste decay and a small age bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    preferences = (fit_scores * np.exp(-0.01 * waste)) + age_bonus\n    priorities[possible_bins] = preferences\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with a small boost for immediate fit.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = 1.0 / (1.0 + waste)\n    fit_score = np.where(bins_remain_cap >= item, 1.0, 0.0)\n    priorities = priorities + 0.1 * fit_score\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste decay (like v0) with a direct fit component (like v6).\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = 1.0 / (waste + 1e-6) \n    priorities[possible_bins] = np.exp(-waste / item) * fit_score\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    \n    waste_penalty = np.exp(-0.005 * waste)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = fit_scores * waste_penalty\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = np.where(waste == 0, 1000.0, 1.0 / (waste + 1e-6))\n    priorities[possible_bins] -= np.log(np.sum(possible_bins)) / 10\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste decay, and age bonus for bin selection.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_decay = np.exp(-0.002 * (np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])))\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n    priorities[possible_bins] = (0.5 * fit_scores + 0.3 * waste_decay + 0.2 * age_bonus)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with a small boost for immediate fit.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = 1.0 / (1.0 + waste)\n    fit_score = np.where(bins_remain_cap >= item, 1.0, 0.0)\n    priorities = priorities + 0.1 * fit_score\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with exponentially decayed waste to prioritize bins.\"\"\"\n    weights = {'fit': 0.6, 'waste': 0.4}\n    decay_rate = 0.01\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_influence = np.exp(-decay_rate * np.sum(bins_remain_cap))\n    priorities[possible_bins] = (weights['fit'] * fit_scores + weights['waste'] * waste_influence)\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit, waste decay, and age bonus with tuned weights.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = -np.abs(remaining_capacities - item)\n    waste_decay = np.exp(-0.005 * np.sum(bins_remain_cap))\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n\n    priorities[possible_bins] = (0.6 * fit_scores + 0.3 * waste_decay + 0.1 * age_bonus)\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    distances = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (distances + 1e-6)\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit (inverse remaining capacity) with exponential waste decay for robust bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    waste = remaining_capacities - item\n    priorities[possible_bins] = 1.0 / (remaining_capacities - item + 1e-6) * np.exp(-waste / 10.0)\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-6)\n    \n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score with waste decay, age bonus, and a density preference.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001\n    density_preference = bins_remain_cap[possible_bins] / (np.sum(bins_remain_cap) + 1e-9)\n\n    weights = {'fit': 0.6, 'waste': 0.2, 'age': 0.1, 'density': 0.1}\n    preferences = (\n        weights['fit'] * fit_scores\n        + weights['waste'] * np.exp(-0.01 * waste)\n        + weights['age'] * age_bonus\n        + weights['density'] * density_preference\n    )\n\n    priorities[possible_bins] = preferences\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    weights = {'fit': 0.6, 'waste': 0.3, 'age': 0.1}\n    decay_rate = 0.01\n    age_factor = 0.001\n    total_waste = np.sum(bins_remain_cap)\n    bin_ages = np.arange(len(bins_remain_cap))\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_scores = np.exp(-decay_rate * (total_waste - np.sum(bins_remain_cap[possible_bins])))\n    age_scores = bin_ages[possible_bins] * age_factor\n    priorities[possible_bins] = (weights['fit'] * fit_scores +\n                                weights['waste'] * waste_scores +\n                                weights['age'] * age_scores)\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    weights = {'fit': 0.6, 'waste': 0.3, 'age': 0.1}\n    decay_rate = 0.01\n    age_factor = 0.001\n    total_waste = np.sum(bins_remain_cap)\n    bin_ages = np.arange(len(bins_remain_cap))\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    waste_scores = np.exp(-decay_rate * (total_waste - np.sum(bins_remain_cap[possible_bins])))\n    age_scores = bin_ages[possible_bins] * age_factor\n    priorities[possible_bins] = (weights['fit'] * fit_scores +\n                                weights['waste'] * waste_scores +\n                                weights['age'] * age_scores)\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines capacity-weighted preference with waste-sensitive decay for bin selection.\n    Prioritizes bins based on remaining capacity and how well the item fits,\n    adjusting preference based on accumulated waste to encourage exploration.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(waste)\n    \n    total_waste = np.sum(bins_remain_cap - item) if np.any(possible_bins) else 0\n    k = 0.01 \n\n    priorities[possible_bins] = (bins_remain_cap[possible_bins] * fit_score) * np.exp(-k * total_waste)\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    priorities[possible_bins] = 1.0 / remaining_capacities\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, const_add: float = 6.135155314186201) -> np.ndarray:\n    \"\"\"Prioritizes bins based on remaining capacity, avoiding division by zero.\n    Combines elements of heuristics 1 and 7/8 for efficiency and robustness.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    capacities = np.copy(bins_remain_cap)\n    priorities = np.zeros_like(capacities)\n    valid_bins = capacities >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = capacities[valid_bins] - item\n    \n    sigmoid_values = 1 / (1 + np.exp(-waste))\n    \n    priorities[valid_bins] = sigmoid_values\n    \n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None) -> np.ndarray:\n    \"\"\"Combines fit score, waste, and bin age for a balanced priority.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score\n    \n    preference = capacity_weighted_preference * np.exp(-0.1 * waste)\n\n    if bin_ages is not None:\n        preference += 0.05 * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}