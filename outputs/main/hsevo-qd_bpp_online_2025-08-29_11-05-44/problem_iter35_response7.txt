```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None, k: float = 1.0) -> np.ndarray:
    """Combines fit, waste, and age with tunable weights and exponential decay."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap[possible_bins] - item
    fit_score = -np.abs(item - bins_remain_cap[possible_bins])
    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score
    waste_decay = np.exp(-k * waste)
    preference = capacity_weighted_preference * waste_decay

    if bin_ages is not None:
        preference += 0.1 * bin_ages[possible_bins]

    priorities[possible_bins] = preference
    return priorities
```
