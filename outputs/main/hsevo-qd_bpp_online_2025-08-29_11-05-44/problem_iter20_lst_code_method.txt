{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[possible_bins])\n    capacity_weighted_preference = bins_remain_cap[possible_bins] * fit_score\n\n    preference = capacity_weighted_preference * np.exp(-k * total_waste)\n\n    if bin_ages is not None:\n        preference += 0.1 * bin_ages[possible_bins]\n\n    priorities[possible_bins] = preference\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 0.0, bin_ages: np.ndarray = None, k: float = 0.01) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_scores = -np.abs(item - bins_remain_cap[possible_bins])\n    \n    if bin_ages is None:\n        bin_ages = np.zeros(n_bins)\n\n    age_bonus = np.exp(-bin_ages)\n    \n    preferences = (bins_remain_cap[possible_bins] * fit_scores) * np.exp(-k * total_waste) * age_bonus\n    priorities[possible_bins] = preferences\n    \n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    waste = bins_remain_cap[possible_bins] - item\n    priorities[possible_bins] = np.where(waste == 0, 1000.0, 1.0 / (waste + 1e-6))\n    priorities[possible_bins] -= np.log(np.sum(possible_bins)) / 10\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with a small boost for recently used bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-6)\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    priorities[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-6)\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines the simplicity of inverse remaining capacity (v2) \n    with a check for valid bins (v6/v7/v8) for efficiency.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    priorities[possible_bins] = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-6)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with a small boost for recently used bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-6)\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Weighted scoring with exponential decay for waste and bin age.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)\n    total_waste = np.sum(bins_remain_cap)\n    waste_decay = np.exp(-0.005 * total_waste)\n    waste_scores = waste_decay * (bins_remain_cap[possible_bins] - item)\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.002\n    \n    weights = np.array([0.6, 0.3, 0.1])\n    priorities = weights[0] * fit_scores + weights[1] * waste_scores + weights[2] * age_bonus\n    \n    result = np.zeros_like(bins_remain_cap)\n    result[possible_bins] = priorities\n    return result\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines capacity-weighted preference with waste-sensitive decay.\n    Prioritizes bins with good fit and adjusts based on total waste.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[valid_bins] - item\n    fit_score = -np.abs(item - bins_remain_cap[valid_bins])\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    total_waste = np.sum(bins_remain_cap - item) if np.any(valid_bins) else 0\n    \n    k = 0.01\n    priorities[valid_bins] = (bins_remain_cap[valid_bins] * fit_score) * np.exp(-k * total_waste)\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes waste decay and fit, differentiating bins by fill level.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    \n    fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])\n    \n    if waste <= 0:\n        waste_penalty = 0.0\n    else:\n        waste_penalty = np.exp(-0.01 * waste)\n    \n    preferences = (fit_scores * waste_penalty) + (fill_levels[possible_bins] * 0.1)\n    priorities[possible_bins] = preferences\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines features from heuristics 6 and 9: prioritizes bins with enough capacity,\n    boosts the priority of the best-fit bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        priorities[possible_bins] = 1.0\n        best_bin_index = np.argmin(bins_remain_cap[possible_bins] - item)\n        priorities[possible_bins][best_bin_index] = 2.0\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 92.87847933423673, bin_ages: np.ndarray = None, k: float = 0.09805334070452522, age_weight: float = 0.5236057588600324) -> np.ndarray:\n    \"\"\"\n    Calculates priorities for placing an item into bins.\n\n    Args:\n        item (float): The size of the item to be placed.\n        bins_remain_cap (np.ndarray): Remaining capacity of each bin.\n        total_waste (float, optional): Total waste so far. Defaults to 0.0.\n        bin_ages (np.ndarray, optional): Age of each bin. Defaults to None.\n        k (float, optional): Waste decay factor. Defaults to 0.01.\n        age_weight (float, optional): Weight for bin age. Defaults to 0.1.\n\n    Returns:\n        np.ndarray: Priorities for each bin.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, total_waste: float = 92.87847933423673, bin_ages: np.ndarray = None, k: float = 0.09805334070452522, age_weight: float = 0.5236057588600324) -> np.ndarray:\n    \"\"\"\n    Calculates priorities for placing an item into bins.\n\n    Args:\n        item (float): The size of the item to be placed.\n        bins_remain_cap (np.ndarray): Remaining capacity of each bin.\n        total_waste (float, optional): Total waste so far. Defaults to 0.0.\n        bin_ages (np.ndarray, optional): Age of each bin. Defaults to None.\n        k (float, optional): Waste decay factor. Defaults to 0.01.\n        age_weight (float, optional): Weight for bin age. Defaults to 0.1.\n\n    Returns:\n        np.ndarray: Priorities for each bin.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    remaining_capacities = bins_remain_cap[possible_bins]\n    priorities[possible_bins] = 1.0 / remaining_capacities\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes decaying waste with fit and age differentiation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap)\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.01\n    \n    decay_factor = np.exp(-0.005 * waste)\n    \n    preferences = (fit_scores * decay_factor) + age_bonus\n    priorities[possible_bins] = preferences\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes decaying waste with fit and age differentiation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n\n    fit_scores = bins_remain_cap[possible_bins] - item\n    waste = np.sum(bins_remain_cap)\n    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.01\n    \n    decay_factor = np.exp(-0.005 * waste)\n    \n    preferences = (fit_scores * decay_factor) + age_bonus\n    priorities[possible_bins] = preferences\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines worst-fit with waste decay and age bonus for improved bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    worst_fit_capacities = bins_remain_cap[valid_bins] - item\n    max_waste = np.max(worst_fit_capacities)\n    waste_decay = -np.log(np.sum(bins_remain_cap) + 1)\n    age_bonus = np.arange(len(bins_remain_cap))[valid_bins] * 0.005\n    preferences = (max_waste * 0.8) + (waste_decay * 0.1) + age_bonus\n    priorities[valid_bins] = preferences\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1 / (1 + np.exp(- (bins_remain_cap[i] - item) / 0.5))\n        else:\n            priorities[i] = 0\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    capacities = np.copy(bins_remain_cap)\n    priorities = np.zeros_like(capacities)\n    valid_bins = capacities >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = capacities[valid_bins] - item\n    \n    sigmoid_values = 1 / (1 + np.exp(-waste))\n    \n    priorities[valid_bins] = sigmoid_values\n    \n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    temp = bins_remain_cap - item\n    priorities = np.where(temp >= 0, np.exp(temp), 0)\n    return priorities / np.sum(priorities) if np.sum(priorities) > 0 else np.zeros_like(bins_remain_cap)\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}