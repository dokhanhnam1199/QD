```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priority scores for each bin based on fit, waste, and age,
    using tunable weights.
    """
    weight_fit = 0.6
    weight_waste = 0.3
    weight_age = 0.1
    decay_rate = 0.01

    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fit_scores = -np.abs(bins_remain_cap[possible_bins] - item)
    waste = np.sum(bins_remain_cap) - np.sum(bins_remain_cap[possible_bins])
    age_bonus = np.arange(len(bins_remain_cap))[possible_bins] * 0.001
    
    waste_score = np.exp(-decay_rate * waste)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = (weight_fit * fit_scores) + \
                               (weight_waste * waste_score) + \
                               (weight_age * age_bonus)

    return priorities
```
