```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins based on a combination of best-fit and waste-sensitive decay.
    Balances immediate fit with exploration to avoid getting stuck in local optima.
    """
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    fit_score = -np.abs(bins_remain_cap[valid_bins] - item)
    
    total_waste = np.sum(bins_remain_cap - item)
    
    k = 0.01 # Tunable parameter for waste decay
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = (1.0 / (waste + 1e-6)) * fit_score * np.exp(-k * total_waste)
    
    return priorities
```
