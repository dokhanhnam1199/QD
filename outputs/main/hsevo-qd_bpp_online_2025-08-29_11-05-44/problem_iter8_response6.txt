```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray = None) -> np.ndarray:
    """Combines inverse waste with a small boost for older bins."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap[possible_bins] - item
    fit_score = 1.0 / (waste + 1e-6)

    if bin_ages is not None:
        priorities[possible_bins] = fit_score + 0.1 * bin_ages[possible_bins]
    else:
        priorities[possible_bins] = fit_score

    return priorities
```
