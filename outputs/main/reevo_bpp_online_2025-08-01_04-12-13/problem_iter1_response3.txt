```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit-like strategy.

    The Best Fit heuristic prioritizes placing an item into the bin that,
    after accommodating the item, will have the smallest remaining capacity.
    This aims to leave larger spaces available for larger items that might arrive later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority of -infinity.
    """
    # Initialize all priorities to a very low value (-infinity).
    # This ensures that bins where the item cannot fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space for the bins where the item can fit.
    # For Best Fit, we want to minimize this remaining space.
    remaining_space_if_fit = bins_remain_cap[can_fit_mask] - item

    # To convert this minimization problem into a maximization problem (where the
    # bin with the highest priority is chosen), we take the negative of the
    # remaining space. A smaller positive remaining space will result in a
    # larger (less negative) priority score.
    # For example:
    # - If remaining_space is 0.1, priority = -0.1
    # - If remaining_space is 0.2, priority = -0.2
    # Since -0.1 > -0.2, the tighter fit gets a higher priority.
    priorities[can_fit_mask] = -remaining_space_if_fit

    return priorities
```
