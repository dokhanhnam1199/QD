```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best-Fit-like strategy.

    Bins that can accommodate the item are prioritized based on how little space they would have
    remaining after the item is placed. Specifically, a smaller remaining space yields a higher
    priority score (as this is a 'best fit' approach, aiming to leave minimal waste).
    Bins that cannot accommodate the item are assigned a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to negative infinity.
    # Bins that cannot fit the item will retain this low priority, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins currently have enough capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity if the item were placed.
    # According to the Best Fit heuristic, we want to choose the bin that leaves the smallest
    # remaining capacity (i.e., the "snuggest" fit).
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # To convert this 'minimization' goal (minimize remaining_after_placement) into a
    # 'maximization' priority score (where a higher score is better), we negate the value.
    # For example:
    #   - If remaining_after_placement is 0.1, priority is -0.1.
    #   - If remaining_after_placement is 0.5, priority is -0.5.
    # Since -0.1 > -0.5, the bin leaving 0.1 remaining capacity will have a higher priority.
    priorities[can_fit_mask] = -remaining_after_placement

    return priorities
```
