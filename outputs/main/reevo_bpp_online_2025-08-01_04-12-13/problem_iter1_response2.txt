```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy: it prioritizes bins
    that, after accommodating the item, would have the smallest amount of
    remaining capacity. This aims to "snugly" fit the item and leave larger
    spaces in other bins for future larger items, or to pack items densely.

    Bins where the item does not fit receive a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the potential remaining capacity if the item were placed in each bin.
    # A smaller positive value indicates a "snugger" fit.
    potential_remaining_after_fit = bins_remain_cap - item

    # Initialize all priority scores to a very low value.
    # This ensures bins where the item does not fit are never selected.
    priority_scores = np.full_like(bins_remain_cap, np.finfo(np.float64).min)

    # Create a boolean mask for bins where the item can actually fit.
    valid_bins_mask = potential_remaining_after_fit >= 0

    # For valid bins, the priority score is the negative of the remaining capacity.
    # This means:
    # - A perfect fit (0 remaining) gets a score of 0 (highest possible).
    # - A small positive remaining capacity (e.g., 0.1) gets a score like -0.1.
    # - A large positive remaining capacity (e.g., 0.5) gets a score like -0.5.
    # When using np.argmax, the bin with the smallest positive `potential_remaining_after_fit`
    # will have the score closest to zero (i.e., the highest score) and thus be selected.
    priority_scores[valid_bins_mask] = -potential_remaining_after_fit[valid_bins_mask]

    return priority_scores
```
