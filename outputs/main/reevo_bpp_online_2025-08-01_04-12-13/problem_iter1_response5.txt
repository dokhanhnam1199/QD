```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best Fit (BF) strategy. It prioritizes bins
    that, after accommodating the item, would have the least remaining capacity.
    Bins where the item does not fit are given a very low priority.

    A higher priority score means a more preferred bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the current item were placed in it.
    # This value indicates how much space would be left after the placement.
    potential_remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores for all bins.
    # By default, set the score to negative infinity for bins where the item cannot fit.
    # This ensures these bins will never be selected unless there are no other suitable options.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can actually fit.
    # A bin is suitable if its remaining capacity is greater than or equal to the item size.
    fits_mask = potential_remaining_after_placement >= 0

    # For bins where the item fits, assign a priority score.
    # The Best Fit strategy aims to minimize the remaining space in a bin.
    # To translate this minimization into a maximization (for priority score),
    # we take the negative of the `potential_remaining_after_placement`.
    # This means:
    # - A perfect fit (0 remaining capacity) gets a score of 0 (highest possible for fitting bins).
    # - A very tight fit (small positive remaining capacity) gets a small negative score.
    # - A loose fit (large positive remaining capacity) gets a large negative score.
    # Thus, higher (less negative) scores indicate better, tighter fits.
    priority_scores[fits_mask] = -potential_remaining_after_placement[fits_mask]

    return priority_scores
```
