```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a variation of the Best Fit (BF) heuristic.

    This priority function aims to find the bin that, if the item were placed,
    would leave the least amount of remaining capacity (tightest fit).
    Bins that cannot accommodate the item are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate more preferred bins.
    """
    # Calculate the remaining space for each bin if the item were placed.
    # This will be non-negative for bins that can fit the item, and negative otherwise.
    remaining_space = bins_remain_cap - item

    # Initialize all priority scores to a very low value (negative infinity).
    # This ensures that bins which cannot fit the item are always deprioritized
    # below any bin that can fit the item.
    priority_scores = np.full_like(bins_remain_cap, np.finfo(np.float64).min)

    # Identify bins where the item can actually fit (remaining_space is non-negative).
    can_fit_mask = remaining_space >= 0

    # For bins where the item can fit:
    # We want to minimize the 'remaining_space' (i.e., find the tightest fit).
    # Maximizing '-remaining_space' achieves this:
    # - A remaining_space of 0 (perfect fit) yields a priority of 0 (highest for valid fits).
    # - A small positive remaining_space (tight fit) yields a small negative priority (e.g., -0.1).
    # - A large positive remaining_space (loose fit) yields a large negative priority (e.g., -0.9).
    priority_scores[can_fit_mask] = -remaining_space[can_fit_mask]

    return priority_scores
```
