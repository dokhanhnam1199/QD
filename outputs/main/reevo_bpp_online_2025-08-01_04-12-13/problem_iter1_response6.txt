```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with a unique scoring mechanism.

    This function prioritizes bins that, after placing the item, would have the
    smallest remaining capacity. This is known as the Best Fit heuristic,
    which aims to leave the "tightest" possible fit, thereby potentially saving
    larger gaps for future larger items.

    For bins where the item fits:
    The priority is calculated as the negative of the remaining space
    after placing the item (`-(bin_capacity - item)`). A smaller positive
    remaining space results in a larger (closer to zero) negative value,
    which translates to a higher priority when selecting the maximum.

    For bins where the item does not fit:
    These bins are assigned a very low priority (negative infinity) to ensure
    they are never selected unless no other options are available (which should
    be handled by the packing algorithm by opening a new bin).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize all priorities to a very low value. This effectively marks
    # bins where the item cannot fit as non-viable options.
    priorities = np.full_like(bins_remain_cap, np.NINF, dtype=float)

    # Create a boolean mask for bins where the item *can* fit.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate their priority score.
    # The Best Fit strategy aims to minimize the leftover space.
    # To translate this into a "maximize priority" problem, we use the
    # negative of the leftover space: `-(bins_remain_cap - item)`.
    #
    # Example:
    # Item = 0.3
    # Bin A: capacity 0.5 -> Leftover: 0.2 -> Priority: -0.2
    # Bin B: capacity 0.3 -> Leftover: 0.0 -> Priority:  0.0 (Perfect fit, highest priority)
    # Bin C: capacity 0.7 -> Leftover: 0.4 -> Priority: -0.4
    #
    # The bin with 0.0 priority is the highest, correctly identifying the
    # Best Fit option (or one of them, if multiple perfect fits exist).
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
