```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This function implements a Best Fit-like heuristic.
    It prioritizes bins that, after placing the item, will have the least remaining
    capacity. This leads to a "tightest fit" strategy, which is often effective
    in reducing the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a better fit. Bins that cannot accommodate the item
        receive a very low (negative infinity) priority.
    """
    # Initialize priorities for all bins to a very low value.
    # This ensures that bins incapable of fitting the item are not chosen
    # if a valid option exists. Using -np.inf makes them effectively unselectable.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually fit the current item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining space if the item were placed there.
    # In Best Fit, we want to minimize this remaining space.
    # To turn this into a priority (where higher is better), we take the negative of the
    # remaining space. For example:
    # - If remaining space is 0.1, priority is -0.1
    # - If remaining space is 0.5, priority is -0.5
    # When selecting the maximum priority, -0.1 is preferred over -0.5,
    # correctly identifying the bin with the least remaining space.
    remaining_space_if_placed = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_space_if_placed

    return priorities
```
