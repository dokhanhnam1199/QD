```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a
    Best Fit Decreasing-like strategy for online Bin Packing.

    This strategy prioritizes bins that, after placing the item, will have the
    smallest remaining space. This is often effective as it attempts to "snugly"
    fit items, leaving larger empty spaces for subsequent larger items.

    Strategy:
    1. Initialize priorities for all bins to a very low value (-infinity). This ensures
       that bins where the item cannot fit are never selected.
    2. For each bin where the item can fit, calculate the space that would remain
       after placing the item (`remaining_space = current_bin_capacity - item_size`).
    3. Assign a priority score to these fitting bins such that a smaller
       `remaining_space` results in a higher priority score. This is achieved by
       taking the negative of the `remaining_space` (`priority = -remaining_space`).
       Maximizing `-remaining_space` is equivalent to minimizing `remaining_space`.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest priority score should be selected.
    """
    # Initialize priorities to negative infinity. Bins that cannot fit the item
    # will retain this value, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space for bins where the item can fit
    # This is the space that would be left if the item were placed in that bin.
    remaining_space_if_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores to the fitting bins.
    # We want to minimize 'remaining_space_if_fit', which is equivalent to
    # maximizing '-remaining_space_if_fit'.
    priorities[can_fit_mask] = -remaining_space_if_fit

    return priorities
```
