```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a Best Fit strategy.

    This heuristic attempts to place the item into the bin where it fits most tightly,
    i.e., the bin that would have the smallest non-negative remaining capacity after
    the item is placed. This typically leads to a good packing density.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item does not fit will have a very low (negative infinity) priority.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # A negative value means the item does not fit in that bin.
    remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores. Bins where the item does not fit
    # should have an extremely low priority to ensure they are not chosen.
    # Using -np.inf makes them effectively unselectable.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fits_mask = remaining_after_placement >= 0

    # For the bins where the item fits, assign a priority score.
    # We want to prioritize the smallest positive 'remaining_after_placement' value.
    # By taking the negative of 'remaining_after_placement', smaller positive values
    # become larger negative values (closer to zero), meaning a higher priority.
    # For example:
    #   - If remaining_after_placement is 0.1, priority is -0.1.
    #   - If remaining_after_placement is 0.5, priority is -0.5.
    # Since -0.1 > -0.5, the bin with 0.1 remaining capacity after placement
    # will have a higher priority and be preferred.
    priorities[fits_mask] = -remaining_after_placement[fits_mask]

    return priorities
```
