```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent addition where the item cannot fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that cannot accept the current item
    can_fit = bins_remain_cap >= item
    penalty = np.where(can_fit, 0, -np.inf)

    # Higher score for closer to full bins
    priority_scores = np.log(bins_remain_cap - item + 1)

    # Final score with the penality
    final_scores = penalty + priority_scores

    return final_scores
```
