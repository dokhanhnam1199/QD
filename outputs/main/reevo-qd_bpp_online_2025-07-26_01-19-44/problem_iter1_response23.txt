```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.
    We also incentivize filling bins to reduce the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Number of bins
    num_bins = len(bins_remain_cap)
    
    # Bias towards bins that have more space remaining
    capacity_preference = bins_remain_cap / np.max(bins_remain_cap)
    
    # Penalize bins that are close to being full, encouraging filling bins
    fullness_penalty = 1 - bins_remain_cap / np.max(bins_remain_cap)
    
    # Heuristic is a combination of the capacity preference and fullness penalty, with item size as a factor
    # Adjust the weight of item size towards filling bigger bins faster, not packing on single bin
    priority_scores = capacity_preference - fullness_penalty**2 - item / np.sum(bins_remain_cap) * capacity_preference
    
    return priority_scores
```
