```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on balancing remaining capacity and bin usage.
    It penalizes bins that cannot fit the current item strictly and prioritizes bins that are nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_item = bins_remain_cap - item
    
    # Initialize priority scores
    priority = np.where(bins_remain_cap >= item, remaining_after_item / bins_remain_cap, -np.inf)
    
    # Penalize bins that cannot fit the current item
    priority[bins_remain_cap < item] = -np.inf
    
    # Prioritize bins that are nearly full but can still fit the item
    nearly_full_priority_factor = 0.5
    nearly_full_bins = np.where((bins_remain_cap - item) / bins_remain_cap > 0.9)[0]
    priority[nearly_full_bins] += nearly_full_priority_factor
    
    return priority
```
