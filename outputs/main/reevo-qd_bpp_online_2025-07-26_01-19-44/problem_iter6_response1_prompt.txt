{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins with larger gaps, penalizes bins that cannot fit the item,\n    and gently boosts the second smallest gaps to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_item = bins_remain_cap - item\n    \n    # Initialize priority scores\n    priority = np.where(bins_remain_cap >= item, remaining_after_item, -100)  # Penalize non-fit bins strictly\n    \n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    if np.any(can_fit_mask):\n        # Sort the remaining capacities for fit bins\n        sorted_remaining = np.sort(remaining_after_item[can_fit_mask])\n        \n        # Boost the second smallest gap if it exists\n        if len(sorted_remaining) > 1:\n            second_smallest_gap = sorted_remaining[1]\n            second_smallest_indices = np.where(np.isclose(bins_remain_cap, second_smallest_gap + item))[0]\n            priority[second_smallest_indices] += 1\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity and penalizes bins that\n    cannot fit the item. It scales priorities better, penalizes bins that are nearly\n    empty, and prioritizes near perfect fits more.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins that can fit the item with less remaining space\n    priority = np.where(bins_remain_cap >= item, (item - (bins_remain_cap - item)) / item, -np.inf)\n\n    # Penalize bins that are nearly empty to avoid creating unused bins\n    nearly_empty_penalty = np.where(bins_remain_cap < item, -2, 0)\n    priority += nearly_empty_penalty\n\n    # Boost bins that can just fit the item precisely\n    perfect_fit_boost = np.where(bins_remain_cap == item, 1, 0)\n    priority += perfect_fit_boost\n\n    # Penalize bins that are empty\n    empty_bin_penalty = np.where(bins_remain_cap == 0, -3, 0)\n    priority += empty_bin_penalty\n\n    return priority\n\n[Reflection]\nPrioritize nearly full bins, penalize nearly empty bins, encourage perfect fits, and avoid creating new bins unless necessary.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}