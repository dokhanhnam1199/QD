```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. It encourages
    filling larger gaps to reduce fragmentation. The function also penalizes bins
    that are nearly empty more heavily and boosts perfect fits more significantly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / item, -10)  # Heavily penalize bins that can't fit

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -10 * bins_remain_cap / item, 0)  # Heavier penalty for nearly empty bins
    priority += nearly_empty_penalty

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 3, 0)  # More significant boost for perfect fits
    priority += perfect_fit_boost

    # Encourage filling larger gaps to reduce fragmentation
    # Identify bins that can fit the item and have more than the average remaining capacity
    if np.any(bins_remain_cap >= item):
        avg_remaining = np.median(bins_remain_cap[bins_remain_cap >= item])
        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 0.5, 0)  # Stronger boost for larger gaps
        priority += large_gap_boost

    return priority
```
