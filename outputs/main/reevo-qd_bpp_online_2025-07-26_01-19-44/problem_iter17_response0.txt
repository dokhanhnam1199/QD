```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on average remaining capacity, precise fits,
    enhancing large gaps, and penalizing emptiness. It uses fixed weights for
    simplification and clarity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that can't fit the item
    penalty = np.where(bins_remain_cap < item, -10, 0)
    
    # Encourage precise fits
    perfect_fit_boost = np.where(bins_remain_cap == item, 5, 0)
    
    # Encourage filling larger gaps to reduce fragmentation
    if np.any(bins_remain_cap >= item):
        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])
        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 2, 0)
    
    # Penalty for bins that are nearly empty
    nearly_empty_penalty = np.where(bins_remain_cap < 0.1 * item, -3, 0)
    
    # Calculate priority score
    priority = penalty + perfect_fit_boost + large_gap_boost + nearly_empty_penalty
    
    return priority
```
