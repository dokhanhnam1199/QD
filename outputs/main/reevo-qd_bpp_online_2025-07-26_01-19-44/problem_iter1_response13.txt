```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    cap_based_priority = bins_remain_cap
    
    # Penalize bins that cannot fit the item at all
    cap_based_priority[bins_remain_cap < item] = -float('inf')
    
    # Consider the proximity to being full (more potential fittings left)
    remaining_bins = bins_remain_cap != 0
    fullness_priority = remaining_bins / (bins_remain_cap + item)
    fullness_priority[np.isnan(fullness_priority)] = 0  # Handle division by unintentional float('inf') conversion
    
    # Combine both priorities: capacity emphasis and bin usage moderation
    priority_score = cap_based_priority + 0.1 * fullness_priority  # Give a lesserweight to the fill rate

    return priority_score
```
