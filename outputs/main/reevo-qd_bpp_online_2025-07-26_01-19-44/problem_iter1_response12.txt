```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used less as a heuristic to preferentially use smaller bins first, aiming to fill larger bins later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize larger remaining capacities to favor bins closer to being full
    capacity_penalty = 1 / (bins_remain_cap + 1e-9)  # Small epsilon to avoid division by zero

    # Reward bins that can fit the item
    fit_reward = (bins_remain_cap >= item).astype(float)

    # Also consider the number of bins used by penalizing the number of bins with 100% usage
    bins_almost_full = np.sum(bins_remain_cap < 0.01)
    almost_full_penalty = np.ones_like(bins_remain_cap) * bins_almost_full

    # Combine penalties and rewards into a single priority score
    priority_score = fit_reward - capacity_penalty - almost_full_penalty
    return priority_score
```
