```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full, penalizes bins that
    are nearly empty, encourages perfect fits, and avoids creating new bins unless necessary.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -2, 0)
    priority += nearly_empty_penalty

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 1, 0)
    priority += perfect_fit_boost

    # Penalize bins that are empty
    empty_bin_penalty = np.where(bins_remain_cap == 0, -3, 0)
    priority += empty_bin_penalty

    # Prioritize bins that are nearly full
    nearly_full_boost = np.where(bins_remain_cap >= 0.9 * item, 1, 0)
    priority += nearly_full_boost

    return priority
```
