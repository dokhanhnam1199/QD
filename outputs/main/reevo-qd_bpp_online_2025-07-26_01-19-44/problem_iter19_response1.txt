```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It aims to fill bins that are closer to being
    full, with a focus on large gaps and perfect fits. It also penalizes bins that
    are nearly empty more heavily.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / item, -float('inf'))  # Heavily penalize bins that can't fit

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -10 * bins_remain_cap / item, 0)  # Heavier penalty for nearly empty bins
    priority += nearly_empty_penalty

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 3, 0)  # More significant boost for perfect fits
    priority += perfect_fit_boost

    # Encourage filling larger gaps to reduce fragmentation
    # Identify bins that can fit the item and have more than the average remaining capacity
    if np.any(bins_remain_cap >= item):
        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])
        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 0.5, 0)  # Stronger boost for larger gaps
        priority += large_gap_boost

    return priority
```
