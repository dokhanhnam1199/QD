{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used actively to penalize bins that would approach their capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the potential remaining capacity after adding the item\n    potential_remain_cap = bins_remain_cap - item\n    \n    # Penalize bins where the item would exceed the remaining capacity\n    penalties = np.where(bins_remain_cap < item, -np.inf, 0)\n    \n    # Bonus for bins with higher initial remaining capacity\n    initial_cap_bonuses = bins_remain_cap\n    \n    # Encourage using bins that won't be completely filled, some moisture is good\n    moisture_bonus = (bins_remain_cap - item) / bins_remain_cap.size if item > 0 else 0\n    \n    # Priority is high if capacity remains with penalties and bonuses\n    priorities = potential_remain_cap + initial_cap_bonuses + penalties + moisture_bonus\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but bins that are used less often are also given some preference.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Number of bins used (here we assume bins with 0 remaining capacity are used)\n    bins_count = bins_remain_cap.shape[0]\n    used_bins_count = np.sum(bins_remain_cap == 0)\n    \n    # Priority based on remaining capacity\n    capacity_ratio = (bins_remain_cap - item) / bins_remain_cap\n    bin_not_full = capacity_ratio >= 0\n    prio_scores = (1 - capacity_ratio) ** 2 * bin_not_full\n    \n    # Regularization factor that will boost completeness of some bins\n    regularization_factor = 0.4 / max(1, bins_count - used_bins_count)\n    prio_scores += regularization_factor\n\n    # Penalize bins that cannot fit the current item\n    prio_scores[bins_remain_cap - item < 0] -= 100\n    \n    return prio_scores\n\n[Reflection]\nPrioritize bins by capacity ratio, penalize non-fitting, and use regularization to encourage completeness and diversity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}