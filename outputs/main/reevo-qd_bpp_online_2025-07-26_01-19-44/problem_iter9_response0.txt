```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on perfect fits, penalizes nearly empty bins,
    and favors large gaps. It aims to reduce fragmentation and efficiently use bin space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array
    priority = np.zeros_like(bins_remain_cap)

    # Boost for perfect fits
    perfect_fit_boost = np.where(bins_remain_cap == item, 5, 0)
    priority += perfect_fit_boost

    # Penalize nearly empty bins (less than 10% remaining capacity)
    nearly_empty_penalty = np.where(bins_remain_cap < 0.1 * item, -10, 0)
    priority += nearly_empty_penalty

    # Favor bins that can fit the item and have a large remaining capacity (more than average)
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        avg_remaining = np.mean(bins_remain_cap[can_fit])
        large_gap_boost = np.where((bins_remain_cap > avg_remaining) & can_fit, 2, 0)
        priority += large_gap_boost

    # Slightly penalize bins that can fit the item but with minimal remaining space
    minimal_fit_penalty = np.where((bins_remain_cap >= item) & (bins_remain_cap < 1.1 * item), -1, 0)
    priority += minimal_fit_penalty

    return priority
```
