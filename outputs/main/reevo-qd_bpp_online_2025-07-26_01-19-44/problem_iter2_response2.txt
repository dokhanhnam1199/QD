```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses capacity ratios to assign priorities, penalizes bins
    that cannot fit the current item, and distributes priority evenly across bins
    to avoid fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate capacity ratios for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    capacity_ratio = (bins_remain_cap[can_fit_mask] - item) / bins_remain_cap[can_fit_mask]
    
    # Assign priority scores based on capacity ratios (closer to full = higher priority)
    prio_scores = np.zeros_like(bins_remain_cap)
    prio_scores[can_fit_mask] = (1 - capacity_ratio) ** 2
    
    # Penalize bins that cannot fit the current item heavily
    prio_scores[~can_fit_mask] -= 100
    
    # Distribute priority evenly across bins to avoid fragmentation (optional tweak)
    even_distribution_factor = 0.1
    prio_scores += even_distribution_factor
    
    return prio_scores
```
