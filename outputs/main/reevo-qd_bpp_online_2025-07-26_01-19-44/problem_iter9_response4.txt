```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on perfect fits, penalizes nearly empty bins,
    and favors large gaps. It aims to simplify penalties and focus on utilization
    for better efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array
    priority = np.zeros_like(bins_remain_cap)

    # Penalize bins that can't fit the item
    priority[bins_remain_cap < item] = -10

    # Boost bins that can fit the item with less remaining space
    priority[bins_remain_cap >= item] = 1 - (bins_remain_cap[bins_remain_cap >= item] - item) / item

    # Penalize bins that are nearly empty
    priority[bins_remain_cap < 0.1 * item] += -2 * bins_remain_cap[bins_remain_cap < 0.1 * item] / item

    # Boost bins that can fit the item perfectly
    priority[bins_remain_cap == item] += 2

    # Encourage filling larger gaps
    if np.any(bins_remain_cap >= item):
        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])
        priority[(bins_remain_cap >= item) & (bins_remain_cap > avg_remaining)] += 1

    return priority
```
