{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers multiple criteria: the remaining capacity,\n    the number of bins used, and fragmentation minimization. It aims to balance\n    penalties and boosts to optimize bin utilization and reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins that can fit the item with less remaining space\n    base_priority = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1), -1)\n\n    # Penalize bins that are nearly empty to avoid creating unused bins\n    nearly_empty_penalty = np.where(bins_remain_cap < item, -1, 0)\n    penalty_priority = base_priority + nearly_empty_penalty\n\n    # Boost bins that can just fit the item precisely\n    perfect_fit_boost = np.where(bins_remain_cap == item, 0.5, 0)\n    boosted_priority = penalty_priority + perfect_fit_boost\n\n    # Encourage filling larger gaps to reduce fragmentation\n    if np.any(bins_remain_cap >= item):\n        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])\n        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 0.5, 0)\n        final_priority = boosted_priority + large_gap_boost\n    else:\n        final_priority = boosted_priority\n\n    return final_priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation uses capacity ratios to assign priorities, penalizes bins\n    that cannot fit the current item severely, and applies a regularization factor\n    to distribute priority evenly across bins to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after placing the item\n    remaining_capacity_after_item = bins_remain_cap - item\n    \n    # Priority is based on the remaining capacity after placing the item\n    # Bins with less remaining capacity after placing the item get higher priority\n    # We use a negative sign to invert the order (less remaining capacity -> higher priority)\n    prio_scores = -remaining_capacity_after_item\n    \n    # Penalize bins that cannot fit the item\n    prio_scores[bins_remain_cap < item] -= 1000  # High penalty for non-fitting bins\n\n    # Regularization to avoid fragmentation and distribute priority evenly\n    # Use a sigmoid function to add a small value to even out priorities across bins that can fit the item\n    regularization_factor = 1 / (1 + np.exp(-remaining_capacity_after_item / np.mean(remaining_capacity_after_item)))\n    prio_scores += regularization_factor\n\n    return prio_scores\n\n[Reflection]\nUse capacity ratios, penalize non-fitting bins harshly, and apply regularization to reduce fragmentation and even priorities.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}