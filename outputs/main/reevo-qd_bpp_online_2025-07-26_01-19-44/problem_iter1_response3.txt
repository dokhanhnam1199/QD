```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but bins that are used less often are also given some preference.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Number of bins used (here we assume bins with 0 remaining capacity are used)
    bins_count = bins_remain_cap.shape[0]
    used_bins_count = np.sum(bins_remain_cap == 0)
    
    # Priority based on remaining capacity
    capacity_ratio = (bins_remain_cap - item) / bins_remain_cap
    bin_not_full = capacity_ratio >= 0
    prio_scores = (1 - capacity_ratio) ** 2 * bin_not_full
    
    # Regularization factor that will boost completeness of some bins
    regularization_factor = 0.4 / max(1, bins_count - used_bins_count)
    prio_scores += regularization_factor

    # Penalize bins that cannot fit the current item
    prio_scores[bins_remain_cap - item < 0] -= 100
    
    return prio_scores
```
