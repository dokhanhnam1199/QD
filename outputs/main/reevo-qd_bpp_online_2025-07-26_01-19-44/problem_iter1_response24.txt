```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used on a priority basis. Items with greater size are prioritized to fill 
    bins with larger remaining capacities, and avoidance of empty spaces after the 
    item is placed. Uses a weighing strategy reflecting aspects of First-Fit Decreasing 
    but slight modifications are made to integrate remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
    """
    # Compute the differences between item size and remaining capacities
    size_differences = bins_remain_cap - item
    
    # Define penalty for bins cannot fit the item
    size_differences[size_differences < 0] -= bins_remain_cap[size_differences < 0]

    # Items will be prioritized for space-consuming efficient packing, with smaller positive deficit given bonuses
    score bonuses = bins_remain_cap - size_differences
    
    # Binsishes Bonus-rate defines the usefulness of fitting such sized items in given positioned bins consecutively 
    can_fit = size_differences >= 0

    # give bonus if fit 
    score_w_bon = size_differences + can_fit * (bins_remain_cap - size_differences) / bins_remain_cap.shape[0]

    return score_w_bon
```
