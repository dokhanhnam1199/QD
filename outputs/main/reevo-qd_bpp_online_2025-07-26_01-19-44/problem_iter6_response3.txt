```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. It also encourages
    filling larger gaps to reduce fragmentation and boosts bins that can fit the
    item precisely. The base priority is normalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    base_priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / item, -1)

    # Normalize base priority
    max_priority = np.max(base_priority)
    base_priority = np.where(base_priority != -1, base_priority / max_priority, -1)

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -1, 0)
    priority = base_priority + nearly_empty_penalty

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 0.5, 0)
    priority += perfect_fit_boost

    # Encourage filling larger gaps to reduce fragmentation
    # Identify bins that can fit the item and have more than the average remaining capacity
    if np.any(bins_remain_cap >= item):
        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])
        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 0.5, 0)
        priority += large_gap_boost

    return priority
```
