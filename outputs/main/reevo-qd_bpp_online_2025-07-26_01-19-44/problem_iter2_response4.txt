```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Prioritizes bins with higher remaining capacity,
    penalizes bins that cannot fit the item, and boosts bins with the second-largest gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority = np.zeros_like(bins_remain_cap)
    
    # Penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] = -np.inf
    
    # Prioritize bins based on remaining capacity
    priority[can_fit_item_mask] = bins_remain_cap[can_fit_item_mask] - item
    
    # Boost the second-largest gaps
    if np.any(can_fit_item_mask):
        remaining_capacity_after_item = bins_remain_cap[can_fit_item_mask] - item
        sorted capacities = np.sort(remaining_capacity_after_item)[::-1]
        
        # Check if there is at least a second largest gap
        if len(sorted_capacities) > 1:
            second_largest_gap = sorted_capacities[1]
            # Boost bins that have the second-largest gap
            priority[np.where(np.isclose(remaining_capacity_after_item, second_largest_gap))] += 1
            
    return priority
```
