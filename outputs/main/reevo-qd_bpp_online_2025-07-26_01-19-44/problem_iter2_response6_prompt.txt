{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used on a heuristic basis. Prioritize bins that have enough space for\n    the item and try to avoid spreading small items across too many bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check which bins have enough capacity\n    capacity_mask = bins_remain_cap >= item\n    \n    # Heuristic:those which are full minus the item size should be deprioritized\n    # Penalty for bins where placing the item would leave little space remaining\n    small_space_penalty = np.log2(bins_remain_cap - item + 1) * capacity_mask\n\n    # Calculate priority based on remaining capacity (more left usually better) minus the penalty\n    priorities = (bins_remain_cap - item + 1) - small_space_penalty * 2\n\n    # Set the priorities of bins that fit as useful candidates\n    priorities[~capacity_mask] = float('-inf')  # Use only bins that can fit the item\n\n    # Heuristic boost for bins with smaller item sizes maximized heuristic ug-max-c weighted fit on the fly decisions\n    existing_item_sizes = np.array([1] * bins_remain_cap.shape[0]) / (bins_remain_cap + 1)\n    diversity_boost = 5 * existing_item_sizes\n    priorities += diversity_boost\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero, mask out bins that cannot fit the item\n    remainder = bins_remain_cap - item\n    can_fit_mask = remainder >= 0\n    # Calculate the percentage of remaining capacity after adding the item\n    filled_percentage = (1 - (remainder / bins_remain_cap[can_fit_mask]))\n    # Prioritize bins that will have a lower filled percentage after adding the item\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)  # Initialize with -Inf\n    priority_scores[can_fit_mask] = -filled_percentage  # Priority is higher for lower filled percentage\n    return priority_scores\n\n[Reflection]\nFocus on remaining capacity percentage; penalize bins that get nearly full. Avoid complex penalties; prioritize directly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}