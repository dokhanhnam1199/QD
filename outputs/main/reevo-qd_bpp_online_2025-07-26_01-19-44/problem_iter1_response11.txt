```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalty for under-utilized bin after adding the item
    penalty = bins_remain_cap - item
    # Higher penalty if the item does not fit in the bin
    penalty[penalty < 0] -= 100 * item
    # Favor bins that will be filled exactly after adding the item
    exact_match_score = 1000 * (penalty == 0)
    # Favor bins that will still have some room after adding the item
    room_left_score = penalty
    # Disfavor bins that already have very little room left and filling them would lead to under-utilization
    non_coherent_packing_penalty = np.maximum(0, -penalty) * -1
    
    priority_score = exact_match_score + room_left_score + non_coherent_packing_penalty
    return priority_score
```
