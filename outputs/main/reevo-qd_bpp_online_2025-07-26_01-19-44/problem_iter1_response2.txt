```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that would exceed their
    capacity after adding the item. Thus, bins that are nearly full and can fit the item
    are prioritized, with a small penalty to avoid filling bins completely unless necessary.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate simple fill ratio score
    fill_ratio_score = 1 - (bins_remain_cap / bins_remain_cap.max())
    
    # Penalize bins that cannot hold the item
    cannot_fit_penalty = np.where(bins_remain_cap < item, -0.5, 0)
    
    # Calculate priorities by combining scores
    priority_scores = fill_ratio_score + cannot_fit_penalty
    
    # Reduce very negative scores from bins that already are full
    priority_scores[bins_remain_cap < 0] = -1
    
    return priority_scores
```
