```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.
    We prioritize bins that have more remaining capacity but penalize bins that have been frequently close to full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ideal capacity left after adding the item
    ideal_cap_left = bins_remain_cap - item
    
    # Priority score is 0 if the item cannot fit in the bin
    priority_scores = np.where(ideal_cap_left >= 0, ideal_cap_left, -np.inf)
    
    return priority_scores
```
