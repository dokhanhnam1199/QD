{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that have enough remaining capacity to fit\n    the item. It uses a high penalty for bins that cannot fit the item to discourage\n    their selection. Additionally, it normalizes the priority scores to better\n    distribute the priorities among the bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate available space for the item in each bin\n    available_space = bins_remain_cap - item\n    \n    # Penalty for using a new bin (arbitrary large negative number to discourage)\n    penalty_new_bin = -10000\n    \n    # Prioritize bins where the item fits\n    priority_scores = np.where(available_space >= 0, -available_space, penalty_new_bin)\n    \n    # Normalize scores to make the selection more democratic\n    max_score = priority_scores.max()\n    min_score = priority_scores.min()\n    if max_score != min_score:\n        priority_scores = (priority_scores - min_score) / (max_score - min_score)\n    else:\n        priority_scores = np.ones_like(priority_scores)  # If all scores are the same, make them equal\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. Also, it encourages\n    filling larger gaps to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Base priority: higher for bins that can fit the item with less remaining space\n    priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / item, -1)\n\n    # Penalize bins that are nearly empty to avoid creating unused bins\n    nearly_empty_penalty = np.where(bins_remain_cap == 0, -1, 0)\n    priority += nearly_empty_penalty\n\n    # Boost bins that can just fit the item precisely\n    perfect_fit_boost = np.where(bins_remain_cap == item, 0.5, 0)\n    priority += perfect_fit_boost\n\n    # Encourage filling larger gaps to reduce fragmentation\n    # Identify bins that can fit the item and have more than the average remaining capacity\n    if np.any(bins_remain_cap >= item):\n        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])\n        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 0.5, 0)\n        priority += large_gap_boost\n\n    return priority\n\n[Reflection]\nIncorporate multiple criteria, balance penalties and boosts, and account for bin utilization and fragmentation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}