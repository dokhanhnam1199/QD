```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used actively to penalize bins that would approach their capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the potential remaining capacity after adding the item
    potential_remain_cap = bins_remain_cap - item
    
    # Penalize bins where the item would exceed the remaining capacity
    penalties = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Bonus for bins with higher initial remaining capacity
    initial_cap_bonuses = bins_remain_cap
    
    # Encourage using bins that won't be completely filled, some moisture is good
    moisture_bonus = (bins_remain_cap - item) / bins_remain_cap.size if item > 0 else 0
    
    # Priority is high if capacity remains with penalties and bonuses
    priorities = potential_remain_cap + initial_cap_bonuses + penalties + moisture_bonus
    
    return priorities
```
