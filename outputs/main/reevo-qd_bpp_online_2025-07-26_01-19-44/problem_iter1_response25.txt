```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.
    We encourage the use of bins that are relatively more underutilized but penalize bins that often do not have enough space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Priority based on remaining capacity divided by capacity (maximized for less remaining space)
    normalized_capacity_priority = -(bins_remain_cap - item) / bins_remain_cap

    # Decay factor for frequent near-overfull bins, assuming a counter array exists
    # This is a placeholder simulating a penalty for bins that are often at the edge of capacity
    previous_near_full_count = np.random.rand(*bins_remain_cap.shape)  # Replace with actual counters in a real scenario
    decay_rate = 0.01  # Lower the decay rate to make this more impactful
   ’est_work姚avPenalty = np.exp(-decay_rate * previous_near_full_count)

    # Assuming bins_remain_cap > item for valid bins (else penalty = 0)
    penalties = (bins_remain_cap - item <= 0).astype(float)  # 1 if cannot fit, 0 otherwise
    penalties = 1 - (1 - penalties) * est_workAvPenalty  # Adjust purely based on a decay

    # Combine capacity usage and penalty
    priority_scores = normalized_capacity_priority * penalties

    return priority_scores
```
