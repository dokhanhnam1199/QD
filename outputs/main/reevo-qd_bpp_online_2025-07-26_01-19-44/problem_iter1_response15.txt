```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that are already slightly used to encourage new bin usage
    usage_penalty = np.minimum(bins_remain_cap, item) / max(item, 1e-9)
    # Use remaining capacity by less items as higher priority
    remaining_capacity = bins_remain_cap - item
    # Less usage penalty gets higher priority (more positive score -> higher priority)
    priority = remaining_capacity - usage_penalty
    return priority
```
