```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins that are closer to being full
    and penalizes bins that cannot fit the item or are nearly empty. It also
    boosts bins that can fit the item precisely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    priority = np.where(bins_remain_cap >= item, bins_remain_cap / item, -10)  # Heavily penalize bins that can't fit

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -5 * bins_remain_cap / item, 0)  # Heavier penalty for nearly empty bins
    priority += nearly_empty_penalty

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 2, 0)  # More significant boost for perfect fits
    priority += perfect_fit_boost

    return priority
```
