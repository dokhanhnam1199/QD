```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins with higher remaining capacity, penalizes
    bins that cannot fit the item, and slightly boosts bins with smaller yet
    significant remaining gaps to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] = -2  # High penalty for bins that cannot fit the item
    
    # Calculate initial priority for bins that can fit the item
    priority[can_fit_item_mask] = bins_remain_cap[can_fit_item_mask] - item
    
    # Boost bins with smaller yet significant remaining gaps
    # Identify the second smallest gaps after inserting the item
    if np.any(can_fit_item_mask):
        remaining_caps = bins_remain_cap[can_fit_item_mask] - item
        if len(remaining_caps) > 1:
            second_smallest_gap = np.partition(remaining_caps, 1)[1]
            # Boost bins with the second smallest gap
            priority[bins_remain_cap - item == second_smallest_gap] += 1
    
    return priority
```
