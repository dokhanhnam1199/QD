```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used: prioritizing bins that are about to be filled and penalizing nearly empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that are nearly empty to avoid creating unused bins
    empty_bin_penalty = np.where(bins_remain_cap == 0, -10, 0)

    # Prioritize bins that can just fit the item to maximize usage
    perfect_fit_boost = np.where(bins_remain_cap == item, 5, 0)
    
    # Avoid overfilling bins to maintain balance
    overfit_prevention = np.where(bins_remain_cap < item, -bins_remain_cap, 0)
    
    # Consider the remaining capacity among the suitable bins
    potential_remaining_space = bins_remain_cap - item

    # Combine all test andBalance strategies
    priority_scores = (potential_remaining_space 
                       + perfect_fit_boost 
                       + empty_bin_penalty 
                       + overfit_prevention)

    return priority_scores
```
