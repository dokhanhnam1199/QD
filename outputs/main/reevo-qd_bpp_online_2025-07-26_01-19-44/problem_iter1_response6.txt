```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # If a bin has less capacity than the current item, it should not be considered
    bin_availability = (bins_remain_cap >= item).astype(int)
    
    # Normalize remaining capacity to have higher score for capacities closer to the item size
    normalized_remain_cap = (bins_remain_cap + 1e-6) / (item + 1e-6)
    
    # Combined priority score: higher for available and almost fitting bins
    priority_score = bin_availability * normalized_remain_cap
    
    return priority_score
```
