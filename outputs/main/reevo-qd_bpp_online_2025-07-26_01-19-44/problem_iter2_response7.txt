```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses capacity ratios to assign priorities, penalizes bins
    that cannot fit the current item, and distributes priority evenly across bins
    to avoid fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Priority is based on the remaining capacity after placing the item
    # Bins with less remaining capacity after placing the item get higher priority
    # We use a negative sign to invert the order (less remaining capacity -> higher priority)
    prio_scores = -remaining_capacity_after_item
    
    # Penalize bins that cannot fit the item
    prio_scores[bins_remain_cap < item] -= 1000  # High penalty for non-fitting bins

    # Regularization to avoid fragmentation and distribute priority evenly
    # Add a small value to even out priorities across bins that can fit the item
    regularization_factor = 1 / (1 + np.exp(-remaining_capacity_after_item))
    prio_scores += regularization_factor

    return prio_scores
```
