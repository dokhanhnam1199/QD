```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on perfect fits, penalizes nearly empty bins,
    and favors larger gaps. It avoids overcomplicating penalties and adjusts
    conditions for better efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 5, 0)
    priority += perfect_fit_boost

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -10, 0)
    priority += nearly_empty_penalty

    # Favor bins that can fit the item and have larger gaps
    # Calculate average remaining capacity for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        avg_remaining = np.mean(bins_remain_cap[valid_bins])
        large_gap_boost = np.where((bins_remain_cap > avg_remaining) & valid_bins, 2, 0)
        priority += large_gap_boost

    return priority
```
