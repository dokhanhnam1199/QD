{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins with higher remaining capacity, penalizes\n    bins that cannot fit the item, and slightly boosts bins with smaller yet\n    significant remaining gaps to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority scores\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Penalize bins that cannot fit the item\n    can_fit_item_mask = bins_remain_cap >= item\n    priority[~can_fit_item_mask] = -2  # High penalty for bins that cannot fit the item\n    \n    # Calculate initial priority for bins that can fit the item\n    priority[can_fit_item_mask] = bins_remain_cap[can_fit_item_mask] - item\n    \n    # Boost bins with smaller yet significant remaining gaps\n    # Identify the second smallest gaps after inserting the item\n    if np.any(can_fit_item_mask):\n        remaining_caps = bins_remain_cap[can_fit_item_mask] - item\n        if len(remaining_caps) > 1:\n            second_smallest_gap = np.partition(remaining_caps, 1)[1]\n            # Boost bins with the second smallest gap\n            priority[bins_remain_cap - item == second_smallest_gap] += 1\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins with larger gaps, penalizes bins that cannot fit the item,\n    and slightly boosts the second smallest gaps to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_item = bins_remain_cap - item\n    \n    # Initialize priority scores\n    priority = np.where(bins_remain_cap >= item, remaining_after_item, -100)  # Penalize non-fit bins strictly\n    \n    # Sort the capacities that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    if np.any(can_fit_mask):\n        sorted_remaining = np.sort(bins_remain_cap[can_fit_mask])\n        \n        # Boost the second smallest gap if it exists\n        if len(sorted_remaining) > 1:\n            second_smallest_gap = sorted_remaining[1]\n            second_smallest_indices = np.where(np.isclose(bins_remain_cap, second_smallest_gap + item))[0]\n            priority[second_smallest_indices] += 10\n    \n    return priority\n\n[Reflection]\nUse clear penalties, prioritize larger gaps, and boost secondary gaps carefully.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}