```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while utilizing
    existing bins more effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate available space for the item in each bin
    available_space = bins_remain_cap - item
    
    # Penalty for using a new bin (arbitrary large negative number to discourage)
    penalty_new_bin = -10000
    
    # Prioritize bins where the item fits
    priority_scores = np.where(available_space >= 0, -available_space, penalty_new_bin)
    
    # Normalize scores to be more democratic and consider smaller packs
    min_remaining_cap = bins_remain_cap.min()
    priority_scores = (priority_scores - min_remaining_cap)
    
    return priority_scores
```
