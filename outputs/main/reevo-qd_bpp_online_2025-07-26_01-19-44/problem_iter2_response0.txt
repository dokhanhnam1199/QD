```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero, mask out bins that cannot fit the item
    remainder = bins_remain_cap - item
    can_fit_mask = remainder >= 0
    
    # Initialize priority scores with -Inf
    priority_scores = np.full_like(bins_remain_cap, -np.inf)
    
    # Calculate the percentage of remaining capacity after adding the item
    if np.any(can_fit_mask):
        filled_percentage = 1 - (remainder[can_fit_mask] / bins_remain_cap[can_fit_mask])
        # Prioritize bins that will have a lower filled percentage after adding the item
        priority_scores[can_fit_mask] = -filled_percentage
    
    return priority_scores
```
