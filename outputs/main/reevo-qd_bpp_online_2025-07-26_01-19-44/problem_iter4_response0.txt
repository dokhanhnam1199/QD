```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and prioritizes bins that
    can fit the item with less remaining space using a capacity ratio. It avoids
    penalties for nearly empty bins and encourages filling larger gaps to reduce
    fragmentation by comparing to the average remaining capacity of feasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    priority = np.where(bins_remain_cap >= item, 1 - bins_remain_cap / np.max(bins_remain_cap), -np.inf)

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 0.5, 0)
    priority += perfect_fit_boost

    # Encourage filling larger gaps to reduce fragmentation
    # Identify bins that can fit the item and have more than the average remaining capacity
    if np.any(bins_remain_cap >= item):
        avg_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item])
        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 0.5, 0)
        priority += large_gap_boost

    return priority
```
