```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins with larger gaps, penalizes bins that cannot fit the item,
    and slightly boosts the second smallest gaps to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_item = bins_remain_cap - item
    
    # Initialize priority scores
    priority = np.where(bins_remain_cap >= item, remaining_after_item, -100)  # Penalize non-fit bins strictly
    
    # Sort the capacities that can fit the item
    can_fit_mask = bins_remain_cap >= item
    if np.any(can_fit_mask):
        sorted_remaining = np.sort(bins_remain_cap[can_fit_mask])
        
        # Boost the second smallest gap if it exists
        if len(sorted_remaining) > 1:
            second_smallest_gap = sorted_remaining[1]
            second_smallest_indices = np.where(np.isclose(bins_remain_cap, second_smallest_gap + item))[0]
            priority[second_smallest_indices] += 10
    
    return priority
```
