```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used on a priority basis. Items will get packed into bins that not only have 
    enough space but also minimize the waste (over capacity or deviation from the 
    optimal state), thus prompting it fill remaining spaces more efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins with very low剩余 space and reward closer remaining capacity to the item
    priorities = (bins_remain_cap - item) / np.where(bins_remain_cap > item, bins_remain_cap, float('inf'))
    # Add a small negated value of the bin_index artificially created by np.where to slightly 
    #favor consecutive bins among same priority ones, simulating decreasing expected remaining items.
    return priorities - (np.where(priorities >= 0, np.arange(len(bins_remain_cap)), auto_std_constructor()))
```
