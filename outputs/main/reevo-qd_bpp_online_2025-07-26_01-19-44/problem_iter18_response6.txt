```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation simplifies the penalty and boost mechanisms, using fixed weights.
    It emphasizes filling larger gaps and precise fits, penalizes emptiness, and significantly
    boosts perfect fits. The function aims to balance complexity and practical efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Base priority: higher for bins that can fit the item with less remaining space
    priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / item, -10)  # Heavy penalty for bins that can't fit

    # Penalize bins that are nearly empty to avoid creating unused bins
    nearly_empty_penalty = np.where(bins_remain_cap < item, -5 * bins_remain_cap / item, 0)  # Heavier penalty for nearly empty bins
    priority += nearly_empty_penalty

    # Boost bins that can just fit the item precisely
    perfect_fit_boost = np.where(bins_remain_cap == item, 2, 0)  # Significant boost for perfect fits
    priority += perfect_fit_boost

    # Encourage filling larger gaps to reduce fragmentation
    # Identify bins that can fit the item and have more than the average remaining capacity
    feasible_caps = bins_remain_cap[bins_remain_cap >= item]
    if feasible_caps.size > 0:
        avg_remaining = np.mean(feasible_caps)
        large_gap_boost = np.where((bins_remain_cap >= item) & (bins_remain_cap > avg_remaining), 1, 0)  # Boost for larger gaps
        priority += large_gap_boost

    return priority
```
