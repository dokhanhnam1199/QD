```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used on a heuristic basis. Prioritize bins that have enough space for
    the item and try to avoid spreading small items across too many bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check which bins have enough capacity
    capacity_mask = bins_remain_cap >= item
    
    # Heuristic:those which are full minus the item size should be deprioritized
    # Penalty for bins where placing the item would leave little space remaining
    small_space_penalty = np.log2(bins_remain_cap - item + 1) * capacity_mask

    # Calculate priority based on remaining capacity (more left usually better) minus the penalty
    priorities = (bins_remain_cap - item + 1) - small_space_penalty * 2

    # Set the priorities of bins that fit as useful candidates
    priorities[~capacity_mask] = float('-inf')  # Use only bins that can fit the item

    # Heuristic boost for bins with smaller item sizes maximized heuristic ug-max-c weighted fit on the fly decisions
    existing_item_sizes = np.array([1] * bins_remain_cap.shape[0]) / (bins_remain_cap + 1)
    diversity_boost = 5 * existing_item_sizes
    priorities += diversity_boost

    return priorities
```
