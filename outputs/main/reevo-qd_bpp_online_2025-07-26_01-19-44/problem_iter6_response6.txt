```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation uses capacity ratios to assign priorities, penalizes bins
    that cannot fit the current item severely, and applies a regularization factor
    to distribute priority evenly across bins to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Initialize priority scores
    prio_scores = np.full_like(bins_remain_cap, -np.inf)
    
    # Assign priority only to bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    prio_scores[can_fit_mask] = -remaining_capacity_after_item[can_fit_mask]
    
    # Penalize bins that cannot fit the item (already set to -inf)
    
    # Regularization to avoid fragmentation and distribute priority evenly
    # Use a sigmoid function to add a small value to even out priorities across bins that can fit the item
    avg_remaining = np.mean(remaining_capacity_after_item[can_fit_mask])
    if avg_remaining > 0:  # Avoid division by zero and ensure meaningful averaging
        regularization_factor = 1 / (1 + np.exp(-remaining_capacity_after_item[can_fit_mask] / avg_remaining))
        prio_scores[can_fit_mask] += regularization_factor

    return prio_scores
```
