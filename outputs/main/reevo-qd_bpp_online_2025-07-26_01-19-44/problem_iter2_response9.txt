```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that have enough remaining capacity to fit
    the item. It uses a high penalty for bins that cannot fit the item to discourage
    their selection. Additionally, it normalizes the priority scores to better
    distribute the priorities among the bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate available space for the item in each bin
    available_space = bins_remain_cap - item
    
    # Penalty for using a new bin (arbitrary large negative number to discourage)
    penalty_new_bin = -10000
    
    # Prioritize bins where the item fits
    priority_scores = np.where(available_space >= 0, -available_space, penalty_new_bin)
    
    # Normalize scores to make the selection more democratic
    max_score = priority_scores.max()
    min_score = priority_scores.min()
    if max_score != min_score:
        priority_scores = (priority_scores - min_score) / (max_score - min_score)
    else:
        priority_scores = np.ones_like(priority_scores)  # If all scores are the same, make them equal
    
    return priority_scores
```
