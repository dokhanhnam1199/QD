```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fill percentage, near-full, and bin utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Strong penalty for infeasible bins
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -1e9

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        # Waste priority
        waste = bins_remain_cap[valid_mask] - item
        waste_priority = 1.0 / (waste + epsilon)

        # Near-full bonus
        near_full_bonus = np.where(
            (bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item),
            item / bins_remain_cap[valid_mask] * 5,
            0
        )

        # Fill percentage score
        fill_percentage = item / bins_remain_cap[valid_mask]
        fill_score = np.exp(-np.abs(fill_percentage - 0.8))

        # Bin utilization priority
        bin_utilization = (bins_remain_cap - remaining_after_add) / bins_remain_cap
        bin_utilization = bin_utilization[valid_mask]

        if item < np.mean(bins_remain_cap):
            utilization_priority = 1 - bin_utilization
        else:
            utilization_priority = bin_utilization

        # Adaptive weights
        total_capacity = np.sum(bins_remain_cap)
        if total_capacity < 5 * item:
            fill_weight = 0.3
            waste_weight = 0.7
        elif total_capacity > 20 * item:
            fill_weight = 0.7
            waste_weight = 0.3
        else:
            fill_weight = 0.5
            waste_weight = 0.5
        near_full_weight = 0.75
        utilization_weight = 0.5

        priorities[valid_mask] = (
            waste_weight * waste_priority +
            fill_weight * fill_score +
            near_full_weight * near_full_bonus +
            utilization_weight * utilization_priority
        )

        # Nearly full penalty
        nearly_full_penalty = np.where(remaining_after_add[valid_mask] < 0.1 * bins_remain_cap[valid_mask], -10, 0)
        priorities[valid_mask] += nearly_full_penalty

    return priorities
```
