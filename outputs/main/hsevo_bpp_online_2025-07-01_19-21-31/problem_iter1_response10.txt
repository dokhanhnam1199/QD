```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = (cap - item) / cap  # Remaining capacity ratio after placing the item
        else:
            priorities[i] = -1  # Assign a low priority if the item doesn't fit

    # Apply a small bias to bins with larger remaining capacity (encourages using bins that are already somewhat full, but prefers larger available space)
    priorities += 0.0001 * bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
    return priorities
```
