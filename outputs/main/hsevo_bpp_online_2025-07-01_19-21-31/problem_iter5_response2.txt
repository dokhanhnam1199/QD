```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, utilization, and fill level with adaptive weighting."""

    epsilon = 1e-9
    fit_check = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap)

    # Waste minimization: 1/(waste + epsilon)
    waste = bins_remain_cap - item
    waste = np.maximum(waste, 0)
    priority[fit_check] += 1 / (waste[fit_check] + epsilon)

    # Utilization: item / bin_capacity
    utilization = item / (bins_remain_cap + epsilon)
    priority[fit_check] += utilization[fit_check]

    # Fill level: (1 - remaining_cap/max_cap)
    max_cap = np.max(bins_remain_cap)
    fill_level = 1 - (bins_remain_cap / max_cap)
    priority[fit_check] += fill_level[fit_check]

    #Adaptive Weighting : Adjust wasted space.
    #Reduce the priority if the wasted space is too high
    wasted_space_threshold = 0.5 * max_cap  #example threshold
    large_waste = waste > wasted_space_threshold
    priority[large_waste & fit_check] *= 0.5

    #Invalidate bins that cannot accommodate the item
    priority[~fit_check] = -np.inf
    return priority
```
