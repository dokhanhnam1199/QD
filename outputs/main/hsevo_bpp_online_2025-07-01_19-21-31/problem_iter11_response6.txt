```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, near-full, capacity distribution, small gap penalty with adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasibility Penalty
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        # Waste Minimization
        waste = np.abs(remaining_after_add)
        waste_priority = 1.0 / (waste + epsilon)

        # Small Gap Penalty
        small_gap_threshold = 0.1
        small_gap_penalty = np.where((remaining_after_add > 0) & (remaining_after_add < small_gap_threshold), -100, 0)

        # Adaptive Weighting based on Capacity Distribution
        capacity_mean = np.mean(bins_remain_cap[valid_mask]) if np.any(valid_mask) else np.mean(bins_remain_cap)
        capacity_std = np.std(bins_remain_cap[valid_mask]) if np.any(valid_mask) and len(bins_remain_cap[valid_mask]) > 1 else 0.1
        
        capacity_normalized = (bins_remain_cap[valid_mask] - capacity_mean) / (capacity_std + epsilon)
        capacity_priority = np.tanh(capacity_normalized)

        # Near-Full Bonus
        near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)
        
        # Item size adaptive weighting
        waste_weight = 1.0
        near_full_weight = 1.0
        capacity_weight = 0.5
        small_gap_weight = 1.0
        
        if item > 0.5:
            waste_weight = 0.6
            near_full_weight = 0.3
            capacity_weight = 0.1
            small_gap_weight = 0.1
        else:
            waste_weight = 0.2
            near_full_weight = 0.4
            capacity_weight = 0.4
            small_gap_weight = 0.2
            

        # Combine Priorities
        priorities[valid_mask] = (
            waste_weight * waste_priority[valid_mask] +
            near_full_weight * near_full_bonus[valid_mask] +
            capacity_weight * capacity_priority +
            small_gap_weight * small_gap_penalty[valid_mask]
        )

    return priorities
```
