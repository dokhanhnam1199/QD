```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Hawking Radiation Inspired Heuristic:
    # Higher remaining capacity = lower temperature = lower probability of "evaporation" (filling)
    # Gravitational Pull Heuristic:
    # Higher item size and closer capacity to item size => higher pull
    
    # Avoid bin overflow
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        priorities[valid_bins] = (item / bins_remain_cap[valid_bins])**2 * (1 / (bins_remain_cap[valid_bins] + 1e-9))  #item_size/cap gives density. higher the density more the preference. (1/bins_remain_cap) is equivalent to lower Hawking temperature.

    #Give HUGE preference to almost full containers to complete them.
    almost_full = (bins_remain_cap - item) < 0.1 #tuning knob for almost full
    if np.any(almost_full & valid_bins):
        priorities[almost_full & valid_bins] += 100 # tuning parameter

    return priorities
```
