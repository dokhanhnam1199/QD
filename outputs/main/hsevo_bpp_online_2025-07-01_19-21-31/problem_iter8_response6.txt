```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, and adaptive weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Waste priority: use reciprocal of waste, scaled by item size.
    remaining_after_add = bins_remain_cap - item
    waste = np.abs(remaining_after_add)
    waste_priority = item / (waste + epsilon)

    # Fill ratio score
    ratios = item / (bins_remain_cap + epsilon)
    fill_score = np.exp(-np.abs(ratios - 1) * 5)  # Keep same as v1

    # Adaptive Weighting
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity > 0:
        waste_weight = min(1.0, item / total_capacity * 5) # Scale based on the item size compared to total cap
        fill_weight = 1.0 - waste_weight
    else:
        waste_weight = 0.5
        fill_weight = 0.5

    # Combine priorities with adaptive weights
    priorities[~infeasible_mask] = (waste_weight * waste_priority[~infeasible_mask] +
                                     fill_weight * fill_score[~infeasible_mask])

    return priorities
```
