```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Best Fit heuristic component: Prioritize bins that can fit the item with the least remaining space.
    fit_check = bins_remain_cap >= item
    remaining_space = bins_remain_cap - item
    remaining_space[~fit_check] = np.inf  # Penalize bins that can't fit the item

    priorities = -remaining_space # Smaller remainders give higher priority

    # Penalize near-empty bins after adding the item to avoid extreme fragmentation.
    # If the bin's remaining capacity after adding the item is below a threshold, decrease priority
    post_fill = bins_remain_cap - item
    small_space_penalty = -10
    priorities[fit_check & (post_fill < 0.1)] += small_space_penalty #If capacity after adding the item is too small, penalize it.

    #Prioritize bins which have smallest difference with item size, but can still fit it.
    difference = bins_remain_cap-item
    difference[difference<0] = np.inf
    priorities -= difference/np.max(bins_remain_cap)

    return priorities
```
