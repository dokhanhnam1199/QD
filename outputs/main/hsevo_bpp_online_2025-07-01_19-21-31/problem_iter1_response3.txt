```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for bins that can fit the item with minimal waste
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap[fit_mask] - item
    
    # Prioritize bins where the item fits well (small waste)
    if waste.size > 0:  # Avoid errors when waste is empty
        priorities[fit_mask] = 1.0 / (waste + 0.00001)  # Avoid division by zero

    # Slightly discourage almost full bins to potentially avoid fragmentation
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item)

    priorities[almost_full_mask] = -1000 # extreme negative priority as item does not fit

    #Return priorities
    return priorities
```
