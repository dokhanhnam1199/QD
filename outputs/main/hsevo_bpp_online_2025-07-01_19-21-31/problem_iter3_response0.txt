```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employs a refined heuristic that balances bin utilization and fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of priority scores for each bin.
    """

    epsilon = 1e-9  # for numerical stability

    # 1. Immediate Infeasibility Check
    priority = np.where(bins_remain_cap < item, -np.inf, 0.0)  # Disqualify bins immediately if not enough space

    # 2. Best Fit Component - Prioritize bins where the item fits best (minimizes wasted space)
    waste = bins_remain_cap - item
    best_fit_priority = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -np.inf)  # Exponential decay based on waste

    # 3. Capacity-Based Component - Give preference to bins with higher remaining capacity, but not excessively
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)  # Prioritize larger remaining capacity

    # 4. Avoidance of Near-Full Bins - Discourage bins that are already almost full to prevent tiny slivers of space.
    near_full_penalty = np.where((bins_remain_cap > item) & (bins_remain_cap < 1.1 * item), -0.5, 0.0)  # Added bonus for almost full bins, multiplied by -1

    # 5. Combine Priorities - Weigh each component
    priority = 0.6 * best_fit_priority + 0.3 * capacity_priority + 0.1 * near_full_penalty

    return priority
```
