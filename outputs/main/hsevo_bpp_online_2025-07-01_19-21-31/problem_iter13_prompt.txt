{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste, fill percentage, near-full, and bin utilization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Strong penalty for infeasible bins\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -1e9\n\n    valid_mask = remaining_after_add >= 0\n\n    if np.any(valid_mask):\n        # Waste priority\n        waste = bins_remain_cap[valid_mask] - item\n        waste_priority = 1.0 / (waste + epsilon)\n\n        # Near-full bonus\n        near_full_bonus = np.where(\n            (bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item),\n            item / bins_remain_cap[valid_mask] * 5,\n            0\n        )\n\n        # Fill percentage score\n        fill_percentage = item / bins_remain_cap[valid_mask]\n        fill_score = np.exp(-np.abs(fill_percentage - 0.8))\n\n        # Bin utilization priority\n        bin_utilization = (bins_remain_cap - remaining_after_add) / bins_remain_cap\n        bin_utilization = bin_utilization[valid_mask]\n\n        if item < np.mean(bins_remain_cap):\n            utilization_priority = 1 - bin_utilization\n        else:\n            utilization_priority = bin_utilization\n\n        # Adaptive weights\n        total_capacity = np.sum(bins_remain_cap)\n        if total_capacity < 5 * item:\n            fill_weight = 0.3\n            waste_weight = 0.7\n        elif total_capacity > 20 * item:\n            fill_weight = 0.7\n            waste_weight = 0.3\n        else:\n            fill_weight = 0.5\n            waste_weight = 0.5\n        near_full_weight = 0.75\n        utilization_weight = 0.5\n\n        priorities[valid_mask] = (\n            waste_weight * waste_priority +\n            fill_weight * fill_score +\n            near_full_weight * near_full_bonus +\n            utilization_weight * utilization_priority\n        )\n\n        # Nearly full penalty\n        nearly_full_penalty = np.where(remaining_after_add[valid_mask] < 0.1 * bins_remain_cap[valid_mask], -10, 0)\n        priorities[valid_mask] += nearly_full_penalty\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}