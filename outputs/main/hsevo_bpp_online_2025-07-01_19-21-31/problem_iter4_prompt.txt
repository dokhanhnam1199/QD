{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and near-full bin penalties.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1 / (waste + 0.0001)\n\n        new_capacities = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.zeros_like(new_capacities)\n\n        near_full_mask = new_capacities < 0.1\n        near_full_penalty[near_full_mask] = -100\n\n        near_full_mask2 = (new_capacities >= 0.1) & (new_capacities < 0.3)\n        near_full_penalty[near_full_mask2] = -2 * (0.3 - new_capacities[near_full_mask2])**2\n        \n        priorities[valid_bins] += near_full_penalty\n\n    else:\n        priorities = np.full_like(bins_remain_cap, -1000.0)\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}