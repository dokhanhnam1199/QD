```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the celestial dance, where larger bodies exert greater influence.
    A bin with capacity closest to the item size receives higher priority,
    but also considering a penalty for near-overflow.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity and the item size
    diffs = bins_remain_cap - item

    # Initialize priorities with a base score (e.g., inverse of absolute difference).
    # We want bins where the remaining capacity is close to the item size.
    priorities = 1.0 / (np.abs(diffs) + 0.000001) # Add small constant to prevent division by zero

    # Apply a significant penalty for bins where adding the item would overflow.
    overflow_penalty = 1000.0  # A high value to strongly discourage overflows.
    priorities[diffs < 0] = -overflow_penalty

    # Bins that fit perfectly are ideal, reward them.
    perfect_fit_bonus = 10.0 # Give a sizable bonus for perfect fit
    priorities[diffs == 0] += perfect_fit_bonus

    # Slightly favor fuller bins to consolidate existing packing.
    # This term is relatively small to not dominate the previous calculations.
    capacity_utilization = (1 - bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities += 0.1 * capacity_utilization

    return priorities
```
