```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Uses a combination of remaining capacity and waste minimization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity *after* adding the item to each bin.
    remaining_after_add = bins_remain_cap - item

    # Assign a low priority to bins that cannot fit the item.
    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)

    # For bins that can fit the item, prioritize bins with
    # small remaining capacity (minimize waste), but also with
    # enough capacity left to potentially accommodate future larger items.
    # A sweet spot is targeted. This is done through a weighted combination:
    # waste_penalty favors less waste (lower remaining_after_add)
    # future_potential_reward favors bins with more capacity to handle future jobs
    waste_penalty = -np.abs(remaining_after_add)  # Prefer smaller remaining space.

    #Calculate standard deviation for all items added so far
    std_dev_estimated_item_size = 0.2  # Estimate based on previous runs

    future_potential_reward = remaining_after_add/(np.sqrt(std_dev_estimated_item_size**2+0.001)) #avoid division by zero error

    # Combine the waste penalty and future potential reward
    priorities = np.where(remaining_after_add >= 0, waste_penalty + 0.5 *future_potential_reward, priorities)

    # Give a slight bump to bins that are already somewhat full to avoid very sparse bins.
    # full_bonus = np.where(bins_remain_cap < 0.8,0,1) #only applies when capacity less than .8

    return priorities
```
