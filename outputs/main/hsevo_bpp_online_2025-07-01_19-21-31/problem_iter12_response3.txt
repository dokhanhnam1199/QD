```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonuses, adaptive weighting,
    fragmentation penalty, and a fill target, with dynamic adjustment based on item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        # Waste priority, use reciprocal of waste
        waste = np.abs(remaining_after_add[valid_mask])
        waste_priority = 1.0 / (waste + epsilon)

        # Near-full bonus, give bonus to near full bins
        near_full_bonus = np.where((bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item), item / bins_remain_cap[valid_mask] * 10, 0)

        # Adaptive weighting based on remaining capacity distribution
        capacity_mean = np.mean(bins_remain_cap[valid_mask]) if np.any(valid_mask) else np.mean(bins_remain_cap)
        capacity_std = np.std(bins_remain_cap[valid_mask]) if np.any(valid_mask) and len(bins_remain_cap[valid_mask]) > 1 else 0.1

        waste_weight = 1.0
        near_full_weight = 1.0
        capacity_weight = 1.0
        fragmentation_weight = 0.5
        fill_target_weight = 1.0


        if capacity_std > 0.0:
            capacity_normalized = (bins_remain_cap[valid_mask] - capacity_mean) / capacity_std
            capacity_weight = 1.0 + np.tanh(capacity_normalized)

        priorities[valid_mask] = waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight

        # Fill percentage score, target fill percentage adapts to item size
        target_fill = 0.7 + 0.2 * np.exp(-10 * item) # Target fill closer to 0.7 for large items, 0.9 for small
        fill_percentage = item / bins_remain_cap[valid_mask]
        fill_score = np.exp(-np.abs(fill_percentage - target_fill))
        priorities[valid_mask] += fill_target_weight * fill_score #balance between waste and fill


        # Fragmentation penalty.  Penalize bins that will have small remaining capacity *after* placement.
        # Avoid creating lots of tiny gaps.
        small_gap_threshold = 0.1  # Adjust as needed, relative to bin size (1)
        fragmentation_penalty = np.where(remaining_after_add[valid_mask] > 0  ,(remaining_after_add[valid_mask] < small_gap_threshold) * -5 ,0)  #only apply penalty if it does not violate size limit
        priorities[valid_mask] += fragmentation_weight * fragmentation_penalty
    return priorities
```
