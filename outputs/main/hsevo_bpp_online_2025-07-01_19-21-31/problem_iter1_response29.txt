```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Prioritizes bins where the item fits and the remaining space is minimized (but not zero).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # Calculate waste if item is placed in each valid bin
        waste = bins_remain_cap[valid_bins] - item
        # Prioritize bins with smallest waste (but avoid 0 waste if possible)
        priorities[valid_bins] = 1 / (waste + 0.0001) #Adding a small value to avoid division by zero errors

        #Adjust to avoid filling the bin completely. A small penalty is added to bins where waste is below a thershold, if possible.

        min_waste_val = np.min(waste)
        waste_threshold = 0.1
        small_waste_bins = waste < waste_threshold
        if np.any(small_waste_bins):
            priorities[valid_bins][small_waste_bins] -= 0.1 * priorities[valid_bins][small_waste_bins]
    else:
        # If no bin fits, penalize all bins severely
        priorities = np.full_like(bins_remain_cap, -1000.0)

    return priorities
```
