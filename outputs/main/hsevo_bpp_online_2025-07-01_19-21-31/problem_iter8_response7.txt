```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive weights for waste, near-full, and capacity based on item size and remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)

    # Waste priority (minimize waste)
    waste = np.abs(remaining_after_add)
    waste_priority = 1.0 / (waste + epsilon)

    # Near-full bonus (prefer bins close to full after packing)
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)

    # Capacity based priority (favor larger remaining capacity)
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)

    # Adaptive weighting based on item size
    if item > 0.5:  # Large items
        waste_weight = 0.6
        near_full_weight = 0.3
        capacity_weight = 0.1
    else:  # Small items
        waste_weight = 0.2
        near_full_weight = 0.4
        capacity_weight = 0.4

    # Combine all priorities with adaptive weights
    priorities = np.where(remaining_after_add >= 0,
                          waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority,
                          priorities)

    # Bonus for very small remaining capacity after packing
    very_small_bonus = np.where((remaining_after_add > 0) & (remaining_after_add < 0.1), 100 / (remaining_after_add + epsilon), 0)
    priorities = np.where(remaining_after_add >= 0, priorities + very_small_bonus, priorities)

    return priorities
```
