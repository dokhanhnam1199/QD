```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    # Waste priority, use reciprocal of waste
    waste = np.abs(remaining_after_add)
    waste_priority = 1.0 / (waste + epsilon)

    # Near-full bonus, give bonus to near full bins
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)
    
    # Capacity based priority, favor larger remaining capacity
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)

    # Adaptive weighting based on remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    waste_weight = 0.4
    near_full_weight = 0.3
    capacity_weight = 0.3
    
    if total_capacity < 5 * item:
        waste_weight = 0.2
        near_full_weight = 0.5
        capacity_weight = 0.3
    elif total_capacity > 20 * item:
        waste_weight = 0.5
        near_full_weight = 0.2
        capacity_weight = 0.3
    

    # Combine all priorities with adaptive weights
    priorities = np.where(~infeasible_mask, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)

    return priorities
```
