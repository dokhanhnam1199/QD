```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    # Waste priority, use reciprocal of waste
    waste = np.abs(remaining_after_add)
    waste_priority = 1.0 / (waste + epsilon)

    # Near-full bonus, give bonus to near full bins
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)
    
    # Capacity based priority, favor larger remaining capacity
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)

    # Adaptive weighting based on remaining capacity distribution
    capacity_mean = np.mean(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else np.mean(bins_remain_cap) #Avoid empty array
    capacity_std = np.std(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) and len(bins_remain_cap[bins_remain_cap >= item]) > 1 else 0.1 # Avoid empty array and zero std
    
    #weights
    waste_weight = 1.0
    near_full_weight = 1.0
    capacity_weight = 1.0
    
    if capacity_std > 0.0:
        capacity_normalized = (bins_remain_cap - capacity_mean) / capacity_std #standardize remaining capacity
        capacity_weight = 1.0 + np.tanh(capacity_normalized) #adaptive: favors bins more above the mean

    # Combine all priorities
    valid_mask = remaining_after_add >= 0
    priorities[valid_mask] = waste_weight * waste_priority[valid_mask] + near_full_weight * near_full_bonus[valid_mask] + capacity_weight * capacity_priority[valid_mask]

    return priorities
```
