```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newtonian attraction with waste minimization."""

    epsilon = 1e-9
    effective_capacities = np.maximum(bins_remain_cap, epsilon)
    G = 1.0
    priority = G * (item / effective_capacities**2) * np.exp(-np.abs(item - effective_capacities))
    priority[bins_remain_cap < item] = -np.inf

    remaining_after_add = bins_remain_cap - item
    waste_penalty = -np.abs(remaining_after_add)
    std_dev_estimated_item_size = 0.2
    future_potential_reward = remaining_after_add/(np.sqrt(std_dev_estimated_item_size**2+0.001))
    priority = np.where(remaining_after_add >= 0, priority + 0.1*(waste_penalty + 0.5 *future_potential_reward), priority) # smaller weight added

    return priority
```
