```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonus, and capacity using adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Waste priority, use exponential decay
    waste = bins_remain_cap - item
    feasible_mask = bins_remain_cap >= item
    priorities[feasible_mask] = np.exp(-waste[feasible_mask] / (item + epsilon))

    # Near-full bonus, give bonus to near full bins, scaled by item size
    near_full_mask = (bins_remain_cap >= item) & (waste < 0.1)
    priorities[near_full_mask] += 2

    # Capacity based priority, favor larger remaining capacity.
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)
    priorities[feasible_mask] += 0.5 * capacity_priority[feasible_mask]

    # Adaptive Weighting based on remaining capacity
    total_capacity = np.sum(bins_remain_cap)

    if total_capacity > 0:
        waste_weight = min(1.0, item / total_capacity * 5)
        near_full_weight = min(1.0, total_capacity / (np.sum(item)+epsilon) * 0.1)
        capacity_weight = 1.0 - waste_weight - near_full_weight
    else:
        waste_weight = 0.33
        near_full_weight = 0.33
        capacity_weight = 0.34

    # Combine all priorities with adaptive weights
    priorities[~infeasible_mask] = (waste_weight * priorities[~infeasible_mask] +
                                     near_full_weight * near_full_mask[~infeasible_mask]*2 +
                                     capacity_weight * capacity_priority[~infeasible_mask])

    return priorities
```
