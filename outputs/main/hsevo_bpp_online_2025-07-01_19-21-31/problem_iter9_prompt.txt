{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines waste minimization, near-full bonuses, and adaptive weighting.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    valid_mask = remaining_after_add >= 0\n\n    if np.any(valid_mask):\n        # Waste priority, use reciprocal of waste\n        waste = np.abs(remaining_after_add[valid_mask])\n        waste_priority = 1.0 / (waste + epsilon)\n\n        # Near-full bonus, give bonus to near full bins\n        near_full_bonus = np.where((bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item), item / bins_remain_cap[valid_mask] * 10, 0)\n\n        # Adaptive weighting based on remaining capacity distribution\n        capacity_mean = np.mean(bins_remain_cap[valid_mask]) if np.any(valid_mask) else np.mean(bins_remain_cap)\n        capacity_std = np.std(bins_remain_cap[valid_mask]) if np.any(valid_mask) and len(bins_remain_cap[valid_mask]) > 1 else 0.1\n\n        waste_weight = 1.0\n        near_full_weight = 1.0\n        capacity_weight = 1.0\n\n        if capacity_std > 0.0:\n            capacity_normalized = (bins_remain_cap[valid_mask] - capacity_mean) / capacity_std\n            capacity_weight = 1.0 + np.tanh(capacity_normalized)\n\n        priorities[valid_mask] = waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight\n\n        # Fill percentage score from v1\n        fill_percentage = item / bins_remain_cap[valid_mask]\n        fill_score = np.exp(-np.abs(fill_percentage - 0.8))\n        priorities[valid_mask] += 0.5 * fill_score #balance between waste and fill\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current self-reflection\" to build better heuristics, avoiding the pitfalls of \"Ineffective self-reflection\".\n\nHere's a revised approach focusing on robust, adaptable, and well-grounded heuristic design:\n\n*   **Keywords:** Adaptive weighting, infeasibility penalties, factor combination, numerical stability, data-driven calibration.\n*   **Advice:** Design heuristics by combining relevant factors with adaptive weights and appropriate functional forms. Focus on clear, well-defined objectives.\n*   **Avoid:** Over-complication, excessive focus on edge cases at the expense of core performance, relying solely on intuition.\n*   **Explanation:** Create heuristics that are both adaptable to the problem's characteristics and robust against numerical issues, grounding design choices in data and experimentation. Prioritize penalties over bonuses.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}