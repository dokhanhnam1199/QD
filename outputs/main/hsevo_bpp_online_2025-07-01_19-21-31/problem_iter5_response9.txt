```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonus, and capacity consideration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)

    # Waste priority, use reciprocal of waste
    waste = np.abs(remaining_after_add)
    waste_priority = 1.0 / (waste + epsilon)

    # Near-full bonus, give bonus to near full bins
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)
    
    # Capacity based priority, favor larger remaining capacity
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)

    # Combine all priorities
    priorities = np.where(remaining_after_add >= 0, waste_priority + near_full_bonus + capacity_priority, priorities)

    return priorities
```
