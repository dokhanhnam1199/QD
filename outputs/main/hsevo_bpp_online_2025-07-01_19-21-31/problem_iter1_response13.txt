```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item with minimal wasted space.
    It uses a combination of factors including:
    1. Whether the item fits in the bin.
    2. The ratio of item size to remaining capacity (higher is better if it fits).
    3. The absolute difference between item size and remaining capacity (lower is better).
    4. A small bonus to bins that are nearly full to encourage their utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Item fits: prioritize based on closeness and fullness
            ratio = item / remaining_capacity
            difference = abs(item - remaining_capacity)
            
            # Give a base priority inversely proportional to wasted space
            priorities[i] = 1.0 / (difference + 0.00001)  # Avoid division by zero

            #Boost priority when near full
            if remaining_capacity <= 2*item:
                 priorities[i]+= ratio *10

            priorities[i]+= ratio

        else:
            # Item does not fit: assign a very low priority
            priorities[i] = -1000  # Extremely low priority
    return priorities
```
