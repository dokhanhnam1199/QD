{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing Newtonian heuristics based on potential energy and a notion of\n    \"gravitational attraction\" between the item and the bin.\n\n    Args:\n        item: Size of item to be added to the bin (representing mass).\n        bins_remain_cap: Array of capacities for each bin (representing distance).\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero or negative values. Add a small epsilon for stability.\n    epsilon = 1e-9\n    effective_capacities = np.maximum(bins_remain_cap, epsilon)\n\n    # Newtonian \"gravitational attraction\" - Larger capacity, stronger attraction (higher priority).\n    # Also favor bins where the item fills a significant portion of the remaining space.\n    # A higher 'G' would signify our tendency towards packing fuller bins.\n\n    G = 1.0 # Gravitational constant - tune this based on desired packing density. Higher G encourages fuller bins\n    priority = G * (item / effective_capacities**2) * np.exp(-np.abs(item - effective_capacities)) # attraction is proportional to 1/(distance)^2 multiplied with exponentially reducing difference\n\n    # Penalize bins that are too full (not enough space for the item) using a large negative value.\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" to make it more effective for designing heuristics, steering clear of pitfalls.\n\nHere's a revised approach, focusing on a proactive and analytical mindset:\n\n*   **Keywords:** Robustness, Simplicity, Penalties, Critical Analysis, Iterative Refinement.\n*   **Advice:** Systematically test heuristic performance on diverse datasets, including edge cases. Analyze *why* failures occur. Prioritize ease of understanding and modification.\n*   **Avoid:** Solely focusing on initial success. Blindly applying penalties without understanding their impact on overall solution quality. Premature optimization.\n*   **Explanation:** Heuristics should be tested rigorously. Penalties help in exploration, but require careful calibration. Simple heuristics allow easier analysis. Iterative refinement is key to improvement.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}