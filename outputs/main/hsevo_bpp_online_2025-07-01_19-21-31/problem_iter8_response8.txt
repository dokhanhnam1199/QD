```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonus, and adaptive weighting based on total capacity."""
    epsilon = 1e-9
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item

    # Infeasible bins get strongly negative priority
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    # Waste priority, use reciprocal of waste
    waste = np.abs(remaining_after_add)
    waste_priority = 1.0 / (waste + epsilon)

    # Near-full bonus
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)

    # Adaptive weighting based on remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    waste_weight = 0.4
    near_full_weight = 0.3
    fill_percentage = item / (bins_remain_cap + epsilon) # Add fill_percentage

    if total_capacity < 5 * item:
        waste_weight = 0.2
        near_full_weight = 0.5
    elif total_capacity > 20 * item:
        waste_weight = 0.5
        near_full_weight = 0.2

    fill_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(fill_percentage - 0.8)), -np.inf) # Add exponential decay

    # Combine all priorities with adaptive weights
    priorities = np.where(~infeasible_mask, waste_weight * waste_priority + near_full_weight * near_full_bonus + (1-waste_weight-near_full_weight) * fill_score, priorities)

    return priorities
```
