```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonuses, adaptive weighting, and fill percentage.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Strong infeasibility penalty
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -1e9

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        # Waste priority
        waste = remaining_after_add[valid_mask]
        waste_priority = 1.0 / (waste + 0.1 * item + epsilon)

        # Near-full bonus
        near_full_bonus = np.where(
            (bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item),
            (item / bins_remain_cap[valid_mask])**2 * 5,
            0
        )

        # Fill percentage score
        fill_percentage = item / bins_remain_cap[valid_mask]
        fill_score = np.exp(-10 * np.abs(fill_percentage - 0.8))

        # Adaptive weighting based on remaining capacity distribution
        capacity_mean = np.mean(bins_remain_cap[valid_mask]) if np.any(valid_mask) else np.mean(bins_remain_cap)
        capacity_std = np.std(bins_remain_cap[valid_mask]) if np.any(valid_mask) and len(bins_remain_cap[valid_mask]) > 1 else 0.1
        capacity_normalized = (bins_remain_cap[valid_mask] - capacity_mean) / (capacity_std + epsilon)
        capacity_weight = 0.5 + 0.5 * np.tanh(capacity_normalized)

        # Calibrated weights
        waste_weight = 1.0
        near_full_weight = 0.75
        fill_weight = 0.6
        capacity_weight_final = 0.25

        priorities[valid_mask] = (
            waste_weight * waste_priority
            + near_full_weight * near_full_bonus
            + fill_weight * fill_score
            + capacity_weight_final * capacity_weight
        )

    return priorities
```
