```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    # Waste priority, use reciprocal of waste, scaled by item size
    waste = np.abs(remaining_after_add)
    waste_priority = item / (waste + epsilon)

    # Near-full bonus, give bonus to near full bins, adaptively scaled.  Larger item near-full is more important.
    near_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)
    near_full_bonus = np.where(near_full_mask, item / bins_remain_cap * 10, 0)

    # Capacity based priority, favor larger remaining capacity.  Scale with the *inverse* of item size (relatively large bins for smaller items preferred). Also add a small scaling factor to bins_remain_cap
    capacity_priority = np.sqrt(bins_remain_cap + epsilon) * (1 / (item + epsilon))

    # Adaptive Weighting based on remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity > 0:
        waste_weight = min(1.0, item / total_capacity * 5) # Scale based on the item size compared to total cap
        near_full_weight = min(1.0, total_capacity / (np.sum(item) + epsilon) * 0.1) # Scale with total capacity/ total items
        capacity_weight = 1.0 - waste_weight - near_full_weight
    else:
        waste_weight = 0.33
        near_full_weight = 0.33
        capacity_weight = 0.34

    # Combine all priorities with adaptive weights
    priorities[~infeasible_mask] = (waste_weight * waste_priority[~infeasible_mask] +
                                     near_full_weight * near_full_bonus[~infeasible_mask] +
                                     capacity_weight * capacity_priority[~infeasible_mask])

    return priorities
```
