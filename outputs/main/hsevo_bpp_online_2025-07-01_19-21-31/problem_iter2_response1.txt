```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, and fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            priorities[i] = (cap - item) / cap # waste ratio
            priorities[i] += item / (cap + 0.00001) # fullness boost
            if cap <= 2 * item: # encourage nearly full
                priorities[i] += 10 * (item / (cap + 0.00001))
            priorities[i] = 1.0 / (waste+0.00001) + item/cap
        else:
            priorities[i] = -1000
    return priorities
```
