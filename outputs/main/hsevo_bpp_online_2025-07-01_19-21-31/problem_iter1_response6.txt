```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the event horizon of a black hole, where spacetime curvature
    (or in this case, bin utilization) drastically alters the properties
    of nearby objects (the item). We prioritize bins that are neither
    too full nor too empty, maximizing the 'gravitational pull' while
    avoiding 'spaghettification' (overflow).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small constant to avoid division by zero and log(0)
    ratios = item / (bins_remain_cap + epsilon)
    
    # 1. Prefer bins where the item nearly fills the remaining capacity, but doesn't overflow.
    #    This encourages efficient packing.  Apply a scaling factor based on how close we are.
    fill_score = np.exp(-np.abs(ratios - 1) * 5)  # Peak at ratio=1, decays exponentially.  Smaller values pack more optimally and not cause overflows

    # 2. Penalize bins that are too full *after* adding the item to them
    overfill_penalty = np.where(bins_remain_cap < item, -1e9, 0)  # Very large penalty to strongly discourage overfilling

    # 3. Gently discourage extremely empty bins if other good options are available.
    #    Avoid excessive fragmentation.  If an item occupies < 20% capacity we add a malus
    fragmentation_penalty = np.where(item / (np.max(bins_remain_cap)+epsilon) < 0.2, -0.1, 0)  #Avoid one extremely oversized item being put where it makes the most sense, but causes other less efficient placings later.

    #4. Prefer bins which are closer to the item size in terms of percentage (item/bin vs 1)
    close_fit_score = np.exp(-np.abs(ratios - 1) * 5)

    # Combine the scores and penalties
    priorities = fill_score + overfill_penalty + fragmentation_penalty+ close_fit_score

    return priorities
```
