{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on remaining capacity distribution\n    capacity_mean = np.mean(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else np.mean(bins_remain_cap) #Avoid empty array\n    capacity_std = np.std(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) and len(bins_remain_cap[bins_remain_cap >= item]) > 1 else 0.1 # Avoid empty array and zero std\n    \n    #weights\n    waste_weight = 1.0\n    near_full_weight = 1.0\n    capacity_weight = 1.0\n    \n    if capacity_std > 0.0:\n        capacity_normalized = (bins_remain_cap - capacity_mean) / capacity_std #standardize remaining capacity\n        capacity_weight = 1.0 + np.tanh(capacity_normalized) #adaptive: favors bins more above the mean\n\n    # Combine all priorities\n    valid_mask = remaining_after_add >= 0\n    priorities[valid_mask] = waste_weight * waste_priority[valid_mask] + near_full_weight * near_full_bonus[valid_mask] + capacity_weight * capacity_priority[valid_mask]\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on remaining capacity\n    total_capacity = np.sum(bins_remain_cap)\n    waste_weight = 0.4\n    near_full_weight = 0.3\n    capacity_weight = 0.3\n    \n    if total_capacity < 5 * item:\n        waste_weight = 0.2\n        near_full_weight = 0.5\n        capacity_weight = 0.3\n    elif total_capacity > 20 * item:\n        waste_weight = 0.5\n        near_full_weight = 0.2\n        capacity_weight = 0.3\n    \n\n    # Combine all priorities with adaptive weights\n    priorities = np.where(~infeasible_mask, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on remaining capacity distribution\n    capacity_mean = np.mean(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else np.mean(bins_remain_cap) #Avoid empty array\n    capacity_std = np.std(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) and len(bins_remain_cap[bins_remain_cap >= item]) > 1 else 0.1 # Avoid empty array and zero std\n    \n    #weights\n    waste_weight = 1.0\n    near_full_weight = 1.0\n    capacity_weight = 1.0\n    \n    if capacity_std > 0.0:\n        capacity_normalized = (bins_remain_cap - capacity_mean) / capacity_std #standardize remaining capacity\n        capacity_weight = 1.0 + np.tanh(capacity_normalized) #adaptive: favors bins more above the mean\n\n    # Combine all priorities\n    valid_mask = remaining_after_add >= 0\n    priorities[valid_mask] = waste_weight * waste_priority[valid_mask] + near_full_weight * near_full_bonus[valid_mask] + capacity_weight * capacity_priority[valid_mask]\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on remaining capacity distribution\n    capacity_mean = np.mean(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else np.mean(bins_remain_cap) #Avoid empty array\n    capacity_std = np.std(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) and len(bins_remain_cap[bins_remain_cap >= item]) > 1 else 0.1 # Avoid empty array and zero std\n    \n    #weights\n    waste_weight = 1.0\n    near_full_weight = 1.0\n    capacity_weight = 1.0\n    \n    if capacity_std > 0.0:\n        capacity_normalized = (bins_remain_cap - capacity_mean) / capacity_std #standardize remaining capacity\n        capacity_weight = 1.0 + np.tanh(capacity_normalized) #adaptive: favors bins more above the mean\n\n    # Combine all priorities\n    valid_mask = remaining_after_add >= 0\n    priorities[valid_mask] = waste_weight * waste_priority[valid_mask] + near_full_weight * near_full_bonus[valid_mask] + capacity_weight * capacity_priority[valid_mask]\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, and capacity consideration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Combine all priorities\n    priorities = np.where(remaining_after_add >= 0, waste_priority + near_full_bonus + capacity_priority, priorities)\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on remaining capacity\n    total_capacity = np.sum(bins_remain_cap)\n    waste_weight = 0.4\n    near_full_weight = 0.3\n    capacity_weight = 0.3\n    \n    if total_capacity < 5 * item:\n        waste_weight = 0.2\n        near_full_weight = 0.5\n        capacity_weight = 0.3\n    elif total_capacity > 20 * item:\n        waste_weight = 0.5\n        near_full_weight = 0.2\n        capacity_weight = 0.3\n    \n\n    # Combine all priorities with adaptive weights\n    priorities = np.where(~infeasible_mask, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, and capacity consideration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Combine all priorities\n    priorities = np.where(remaining_after_add >= 0, waste_priority + near_full_bonus + capacity_priority, priorities)\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on remaining capacity\n    total_capacity = np.sum(bins_remain_cap)\n    waste_weight = 0.4\n    near_full_weight = 0.3\n    capacity_weight = 0.3\n    \n    if total_capacity < 5 * item:\n        waste_weight = 0.2\n        near_full_weight = 0.5\n        capacity_weight = 0.3\n    elif total_capacity > 20 * item:\n        waste_weight = 0.5\n        near_full_weight = 0.2\n        capacity_weight = 0.3\n    \n\n    # Combine all priorities with adaptive weights\n    priorities = np.where(~infeasible_mask, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on item size\n    if item > 0.5: # Large items, prioritize waste minimization and near-full\n        waste_weight = 0.6\n        near_full_weight = 0.3\n        capacity_weight = 0.1\n    else: # Small items, prioritize capacity and near-full\n        waste_weight = 0.2\n        near_full_weight = 0.4\n        capacity_weight = 0.4\n\n    # Combine all priorities with adaptive weights\n    priorities = np.where(remaining_after_add >= 0, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)\n\n    # Experiment with a different bonus structure for very small remaining capacity\n    very_small_bonus = np.where((remaining_after_add > 0) & (remaining_after_add < 0.1), 100/(remaining_after_add + epsilon), 0)\n\n    priorities = np.where(remaining_after_add >= 0, priorities + very_small_bonus, priorities)\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on item size\n    if item > 0.5: # Large items, prioritize waste minimization and near-full\n        waste_weight = 0.6\n        near_full_weight = 0.3\n        capacity_weight = 0.1\n    else: # Small items, prioritize capacity and near-full\n        waste_weight = 0.2\n        near_full_weight = 0.4\n        capacity_weight = 0.4\n\n    # Combine all priorities with adaptive weights\n    priorities = np.where(remaining_after_add >= 0, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)\n\n    # Experiment with a different bonus structure for very small remaining capacity\n    very_small_bonus = np.where((remaining_after_add > 0) & (remaining_after_add < 0.1), 100/(remaining_after_add + epsilon), 0)\n\n    priorities = np.where(remaining_after_add >= 0, priorities + very_small_bonus, priorities)\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill percentage, and near-full penalties.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1 / (waste + 0.0001)\n\n        new_capacities = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.zeros_like(new_capacities)\n\n        near_full_mask = new_capacities < 0.1\n        near_full_penalty[near_full_mask] = -100\n\n        near_full_mask2 = (new_capacities >= 0.1) & (new_capacities < 0.3)\n        near_full_penalty[near_full_mask2] = -2 * (0.3 - new_capacities[near_full_mask2])**2\n        \n        priorities[valid_bins] += near_full_penalty\n        \n        fill_percentage = item / bins_remain_cap[valid_bins]\n        fill_score = np.exp(-np.abs(fill_percentage - 0.8))\n        priorities[valid_bins] += 0.5 * fill_score #balance between waste and fill\n\n    else:\n        priorities = np.full_like(bins_remain_cap, -1000.0)\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill percentage, and near-full penalties.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1 / (waste + 0.0001)\n\n        new_capacities = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.zeros_like(new_capacities)\n\n        near_full_mask = new_capacities < 0.1\n        near_full_penalty[near_full_mask] = -100\n\n        near_full_mask2 = (new_capacities >= 0.1) & (new_capacities < 0.3)\n        near_full_penalty[near_full_mask2] = -2 * (0.3 - new_capacities[near_full_mask2])**2\n        \n        priorities[valid_bins] += near_full_penalty\n        \n        fill_percentage = item / bins_remain_cap[valid_bins]\n        fill_score = np.exp(-np.abs(fill_percentage - 0.8))\n        priorities[valid_bins] += 0.5 * fill_score #balance between waste and fill\n\n    else:\n        priorities = np.full_like(bins_remain_cap, -1000.0)\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Adaptive weighting based on item size\n    if item < 0.2:  # Small items, prioritize waste minimization and capacity\n        waste_weight = 0.6\n        near_full_weight = 0.1\n        capacity_weight = 0.3\n    elif item > 0.8:  # Large items, prioritize near-full and avoid fragmentation\n        waste_weight = 0.1\n        near_full_weight = 0.6\n        capacity_weight = 0.3\n    else:  # Medium items, balance all factors\n        waste_weight = 0.3\n        near_full_weight = 0.4\n        capacity_weight = 0.3\n\n    # Combine all priorities with adaptive weights\n    priorities = np.where(remaining_after_add >= 0, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)\n\n    # Introduce a penalty for bins that become too empty after adding the item\n    empty_penalty = np.where(remaining_after_add > 0.7, -0.5 * (remaining_after_add - 0.7), 0)  #if remaining cap > 0.7, penalize\n    priorities = np.where(remaining_after_add >= 0, priorities + empty_penalty, priorities)\n\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, capacity, and near-full bin penalties.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    epsilon = 1e-6 # for numerical stability\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = (bins_remain_cap[valid_bins]**0.5) / (waste + epsilon)  # Prioritize by waste and capacity\n\n        # Near-full bin penalty\n        new_capacities = bins_remain_cap[valid_bins] - item\n        near_full_threshold = 0.1\n        near_full_penalty = -100\n        near_full_mask = new_capacities < near_full_threshold\n        priorities[valid_bins][near_full_mask] += near_full_penalty\n\n    else:\n        priorities = np.full_like(bins_remain_cap, -1e9) # Very low priority for invalid bins\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste, scaled by item size\n    waste = np.abs(remaining_after_add)\n    waste_priority = item / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins, adaptively scaled.  Larger item near-full is more important.\n    near_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)\n    near_full_bonus = np.where(near_full_mask, item / bins_remain_cap * 10, 0)\n\n    # Capacity based priority, favor larger remaining capacity.  Scale with the *inverse* of item size (relatively large bins for smaller items preferred). Also add a small scaling factor to bins_remain_cap\n    capacity_priority = np.sqrt(bins_remain_cap + epsilon) * (1 / (item + epsilon))\n\n    # Adaptive Weighting based on remaining capacity\n    total_capacity = np.sum(bins_remain_cap)\n    if total_capacity > 0:\n        waste_weight = min(1.0, item / total_capacity * 5) # Scale based on the item size compared to total cap\n        near_full_weight = min(1.0, total_capacity / (np.sum(item) + epsilon) * 0.1) # Scale with total capacity/ total items\n        capacity_weight = 1.0 - waste_weight - near_full_weight\n    else:\n        waste_weight = 0.33\n        near_full_weight = 0.33\n        capacity_weight = 0.34\n\n    # Combine all priorities with adaptive weights\n    priorities[~infeasible_mask] = (waste_weight * waste_priority[~infeasible_mask] +\n                                     near_full_weight * near_full_bonus[~infeasible_mask] +\n                                     capacity_weight * capacity_priority[~infeasible_mask])\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill percentage, and infeasibility.\"\"\"\n    epsilon = 1e-9\n    bins_remain_cap = np.maximum(bins_remain_cap, epsilon)\n\n    # 1. Fit Score: Exponential decay for waste, -inf if item doesn't fit\n    waste = bins_remain_cap - item\n    fit_score = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -np.inf)\n\n    # 2. Fill Percentage: Encourage filling bins completely, target 80% fill\n    fill_percentage = item / bins_remain_cap\n    fill_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(fill_percentage - 0.8)), -np.inf)\n\n    # 3. Combine the scores with weights.\n    priority = 0.7 * fit_score + 0.3 * fill_score\n\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    infeasible_mask = remaining_after_add < 0\n    priorities[infeasible_mask] = -np.inf\n\n    # Waste priority, use reciprocal of waste, scaled by item size\n    waste = np.abs(remaining_after_add)\n    waste_priority = item / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins, adaptively scaled.  Larger item near-full is more important.\n    near_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)\n    near_full_bonus = np.where(near_full_mask, item / bins_remain_cap * 10, 0)\n\n    # Capacity based priority, favor larger remaining capacity.  Scale with the *inverse* of item size (relatively large bins for smaller items preferred). Also add a small scaling factor to bins_remain_cap\n    capacity_priority = np.sqrt(bins_remain_cap + epsilon) * (1 / (item + epsilon))\n\n    # Adaptive Weighting based on remaining capacity\n    total_capacity = np.sum(bins_remain_cap)\n    if total_capacity > 0:\n        waste_weight = min(1.0, item / total_capacity * 5) # Scale based on the item size compared to total cap\n        near_full_weight = min(1.0, total_capacity / (np.sum(item) + epsilon) * 0.1) # Scale with total capacity/ total items\n        capacity_weight = 1.0 - waste_weight - near_full_weight\n    else:\n        waste_weight = 0.33\n        near_full_weight = 0.33\n        capacity_weight = 0.34\n\n    # Combine all priorities with adaptive weights\n    priorities[~infeasible_mask] = (waste_weight * waste_priority[~infeasible_mask] +\n                                     near_full_weight * near_full_bonus[~infeasible_mask] +\n                                     capacity_weight * capacity_priority[~infeasible_mask])\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, near-fit, and capacity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    # Infeasible bins get a very low priority\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    # Calculate waste\n    waste = bins_remain_cap - item\n    feasible = bins_remain_cap >= item\n\n    # Prioritize bins with less waste, using exponential decay\n    priorities[feasible] = np.exp(-waste[feasible] / (item + epsilon))\n\n    # Boost near-fit bins\n    near_fit = (bins_remain_cap >= item) & (waste < 0.1)\n    priorities[near_fit] += 2  # Significantly boost near-fit\n\n    # Capacity-based component: Favor bins with larger remaining capacity (but not too much)\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n    priorities[feasible] += 0.5 * capacity_priority[feasible] #Scale it down\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill ratio, waste penalty, and near-full avoidance.\"\"\"\n\n    epsilon = 1e-9\n    # Fill score based on how close the item fills the bin\n    ratios = item / (bins_remain_cap + epsilon)\n    fill_score = np.exp(-np.abs(ratios - 1) * 5)\n\n    # Waste penalty: higher penalty for more waste\n    waste = bins_remain_cap - item\n    waste_penalty = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -1e9)\n\n    # Near-full penalty: discourage bins that will be almost full\n    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)\n    near_full_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    near_full_penalty[almost_full_mask] = -10  # Reduced penalty for better fine-tuning\n    \n    #Combine fill score, waste_penalty, and near_full_penalty\n    priorities = 0.6 * fill_score + 0.3 * waste_penalty + 0.1 * near_full_penalty\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill ratio, waste penalty, and near-full avoidance.\"\"\"\n\n    epsilon = 1e-9\n    # Fill score based on how close the item fills the bin\n    ratios = item / (bins_remain_cap + epsilon)\n    fill_score = np.exp(-np.abs(ratios - 1) * 5)\n\n    # Waste penalty: higher penalty for more waste\n    waste = bins_remain_cap - item\n    waste_penalty = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -1e9)\n\n    # Near-full penalty: discourage bins that will be almost full\n    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)\n    near_full_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    near_full_penalty[almost_full_mask] = -10  # Reduced penalty for better fine-tuning\n    \n    #Combine fill score, waste_penalty, and near_full_penalty\n    priorities = 0.6 * fill_score + 0.3 * waste_penalty + 0.1 * near_full_penalty\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}