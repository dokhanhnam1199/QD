```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Higher priority means the bin is preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item perfectly or almost perfectly.
    # We aim for utilization.
    epsilon = 1e-6  # Small tolerance for floating-point comparisons

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority based on remaining capacity AFTER placing item
            remaining = cap - item
            priorities[i] = np.exp(-remaining) # Exponential decay: smaller remaining gives higher priority

            # Boost for near-perfect fit
            if item >= 0.9 * cap:
               priorities[i] *= 2  # Significant boost

            #Penalize very large bins for small items
            if item < 0.1 * cap:
                priorities[i] /= 2


        else:
            priorities[i] = -1e9 # very low priority for bins that can't fit

    return priorities
```
