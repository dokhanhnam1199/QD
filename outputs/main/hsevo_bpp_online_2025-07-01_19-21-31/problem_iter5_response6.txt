```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, capacity, and near-full penalties."""

    epsilon = 1e-9
    priority = np.zeros_like(bins_remain_cap)

    # Infeasible bin penalty
    priority[bins_remain_cap < item] = -np.inf

    # Best fit component
    waste = bins_remain_cap - item
    fit_score = np.exp(-waste / (item + epsilon))
    fit_score[waste < 0] = -np.inf

    # Capacity utilization component
    utilization_score = bins_remain_cap / np.sum(bins_remain_cap + epsilon)

    # Near-full penalty
    near_full_penalty = np.where((bins_remain_cap > item) & (bins_remain_cap < 1.1 * item), -0.5, 0.0)

    # Combined priority
    priority = 0.7 * fit_score - 0.1 * utilization_score + 0.2 * near_full_penalty

    return priority
```
