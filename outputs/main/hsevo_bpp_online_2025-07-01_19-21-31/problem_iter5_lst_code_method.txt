{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and near-full bin penalties.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1 / (waste + 0.0001)\n\n        new_capacities = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.zeros_like(new_capacities)\n\n        near_full_mask = new_capacities < 0.1\n        near_full_penalty[near_full_mask] = -100\n\n        near_full_mask2 = (new_capacities >= 0.1) & (new_capacities < 0.3)\n        near_full_penalty[near_full_mask2] = -2 * (0.3 - new_capacities[near_full_mask2])**2\n        \n        priorities[valid_bins] += near_full_penalty\n\n    else:\n        priorities = np.full_like(bins_remain_cap, -1000.0)\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins that are a good fit for the item,\n    while also considering the overall fill level of the bin.  It aims to\n    avoid both overly empty bins and bins that are almost, but not quite,\n    large enough.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    epsilon = 1e-9\n    effective_capacities = np.maximum(bins_remain_cap, epsilon)\n\n    # 1. Fit Score: How well the item fits relative to remaining capacity.\n    fit_score = np.exp(-np.abs(effective_capacities - item) / (0.2 * item + epsilon))  # Favor closer fits.  Scale the exponent by item size\n    # 2. Capacity Utilization:  Encourage filling bins reasonably well.\n    utilization_score = effective_capacities / np.sum(bins_remain_cap + epsilon) #normalized remaining capacity - high remaining capacity reduces priority.\n\n    # 3. Combine the scores\n    priority = fit_score - 0.1 * utilization_score # subtract to increase priority for the ones with lowest remaining capacity, and balance between the two scores\n\n    # 4. Strong penalty for bins that are too small.\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins that can accommodate the item with minimal wasted space,\n    while also considering the overall fill level of the bin.  It uses a combination of\n    space utilization and a fill-level bonus.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    epsilon = 1e-9  # Small constant for numerical stability\n\n    # 1. Calculate wasted space if the item is placed in each bin.\n    wasted_space = bins_remain_cap - item\n    wasted_space = np.maximum(wasted_space, 0)  # Ensure no negative wasted space\n\n    # 2. Calculate space utilization.  Higher utilization is generally better.\n    utilization = item / (bins_remain_cap + epsilon)  # Avoid division by zero\n    utilization[bins_remain_cap < item] = 0  # Zero utilization if the item doesn't fit.\n\n    # 3. Calculate a fill-level bonus.  This encourages filling bins that are already relatively full.\n    fill_level = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalize the bin sizes relative to the largest size and get fill level\n\n    # 4. Combine the factors to create a priority score.\n    #    - Invert wasted space (smaller wasted space = higher priority).\n    #    - Add utilization (higher utilization = higher priority).\n    #    - Add fill_level bonus (higher fill level = higher priority).\n    priority = (1 / (wasted_space + epsilon)) + utilization + fill_level\n\n    # 5. Heavily penalize bins that cannot accommodate the item.\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on near-fit, waste, and feasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    waste = bins_remain_cap - item\n    feasible = bins_remain_cap >= item\n\n    # Prioritize bins with less wasted space\n    priorities[feasible] = np.exp(-waste[feasible] / (item + epsilon))\n\n    near_fit = (bins_remain_cap >= item) & (waste < 0.1)\n    priorities[near_fit] += 2 # Boost near-fit\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, \n                bins_remain_cap: np.ndarray,\n                waste_epsilon: float = 0.00029754261408160114,\n                near_full_threshold1: float = 0.10542429393630628,\n                near_full_threshold2: float = 0.3707698105713286,\n                near_full_penalty1: float = -106.30093953587769,\n                near_full_penalty2_factor: float = -2.6672021331692797,\n                invalid_bin_priority: float = -869.4054121954937) -> np.ndarray:\n    \"\"\"Combines waste minimization and near-full bin penalties.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1 / (waste + waste_epsilon)\n\n        new_capacities = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.zeros_like(new_capacities)\n\n        near_full_mask = new_capacities < near_full_threshold1\n        near_full_penalty[near_full_mask] = near_full_penalty1\n\n        near_full_mask2 = (new_capacities >= near_full_threshold1) & (new_capacities < near_full_threshold2)\n        near_full_penalty[near_full_mask2] = near_full_penalty2_factor * (near_full_threshold2 - new_capacities[near_full_mask2])**2\n        \n        priorities[valid_bins] += near_full_penalty\n\n    else:\n        priorities = np.full_like(bins_remain_cap, invalid_bin_priority)\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins that are a good fit for the item,\n    while also considering the overall fill level of the bin.  It aims to\n    avoid both overly empty bins and bins that are almost, but not quite,\n    large enough.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    epsilon = 1e-9\n    effective_capacities = np.maximum(bins_remain_cap, epsilon)\n\n    # 1. Fit Score: How well the item fits relative to remaining capacity.\n    fit_score = np.exp(-np.abs(effective_capacities - item) / (0.2 * item + epsilon))  # Favor closer fits.  Scale the exponent by item size\n    # 2. Capacity Utilization:  Encourage filling bins reasonably well.\n    utilization_score = effective_capacities / np.sum(bins_remain_cap + epsilon) #normalized remaining capacity - high remaining capacity reduces priority.\n\n    # 3. Combine the scores\n    priority = fit_score - 0.1 * utilization_score # subtract to increase priority for the ones with lowest remaining capacity, and balance between the two scores\n\n    # 4. Strong penalty for bins that are too small.\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill ratio with waste penalty for online bin packing.\"\"\"\n\n    epsilon = 1e-9\n    ratios = item / (bins_remain_cap + epsilon)\n    fill_score = np.exp(-np.abs(ratios - 1) * 5)\n\n    waste = bins_remain_cap - item\n    waste_penalty = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -1e9)\n\n    priorities = 0.7 * fill_score + 0.3 * waste_penalty\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on near-fit, waste, and feasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    waste = bins_remain_cap - item\n    feasible = bins_remain_cap >= item\n\n    # Prioritize bins with less wasted space\n    priorities[feasible] = np.exp(-waste[feasible] / (item + epsilon))\n\n    near_fit = (bins_remain_cap >= item) & (waste < 0.1)\n    priorities[near_fit] += 2 # Boost near-fit\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing Newtonian heuristics based on potential energy and a notion of\n    \"gravitational attraction\" between the item and the bin.\n\n    Args:\n        item: Size of item to be added to the bin (representing mass).\n        bins_remain_cap: Array of capacities for each bin (representing distance).\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero or negative values. Add a small epsilon for stability.\n    epsilon = 1e-9\n    effective_capacities = np.maximum(bins_remain_cap, epsilon)\n\n    # Newtonian \"gravitational attraction\" - Larger capacity, stronger attraction (higher priority).\n    # Also favor bins where the item fills a significant portion of the remaining space.\n    # A higher 'G' would signify our tendency towards packing fuller bins.\n\n    G = 1.0 # Gravitational constant - tune this based on desired packing density. Higher G encourages fuller bins\n    priority = G * (item / effective_capacities**2) * np.exp(-np.abs(item - effective_capacities)) # attraction is proportional to 1/(distance)^2 multiplied with exponentially reducing difference\n\n    # Penalize bins that are too full (not enough space for the item) using a large negative value.\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employs a refined heuristic that balances bin utilization and fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n\n    epsilon = 1e-9  # for numerical stability\n\n    # 1. Immediate Infeasibility Check\n    priority = np.where(bins_remain_cap < item, -np.inf, 0.0)  # Disqualify bins immediately if not enough space\n\n    # 2. Best Fit Component - Prioritize bins where the item fits best (minimizes wasted space)\n    waste = bins_remain_cap - item\n    best_fit_priority = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -np.inf)  # Exponential decay based on waste\n\n    # 3. Capacity-Based Component - Give preference to bins with higher remaining capacity, but not excessively\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)  # Prioritize larger remaining capacity\n\n    # 4. Avoidance of Near-Full Bins - Discourage bins that are already almost full to prevent tiny slivers of space.\n    near_full_penalty = np.where((bins_remain_cap > item) & (bins_remain_cap < 1.1 * item), -0.5, 0.0)  # Added bonus for almost full bins, multiplied by -1\n\n    # 5. Combine Priorities - Weigh each component\n    priority = 0.6 * best_fit_priority + 0.3 * capacity_priority + 0.1 * near_full_penalty\n\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. How well the item fits (smallest waste).\n    2. A penalty for bins that are too full.\n    3. Encouraging bins to be filled more completely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    epsilon = 1e-9\n    bins_remain_cap = np.maximum(bins_remain_cap, epsilon)  # Avoid division by zero.\n\n    # 1. Fit Score: Prioritize bins with minimal wasted space.\n    waste = bins_remain_cap - item\n    fit_score = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Exponential decay for waste, -inf if item doesn't fit\n\n    # 2. Fill Percentage: Encourage filling bins completely, but not excessively.\n    fill_percentage = item / bins_remain_cap\n    fill_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(fill_percentage - 0.8)), -np.inf) # target 80% fill\n    #fill_score = np.where(bins_remain_cap >= item, fill_percentage, -np.inf) # alternative: just maximize the fill\n\n    # 3. Combine the scores.  Experiment with different weights.\n    priority = 0.7 * fit_score + 0.3 * fill_score\n\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. How well the item fits (smallest waste).\n    2. A penalty for bins that are too full.\n    3. Encouraging bins to be filled more completely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    epsilon = 1e-9\n    bins_remain_cap = np.maximum(bins_remain_cap, epsilon)  # Avoid division by zero.\n\n    # 1. Fit Score: Prioritize bins with minimal wasted space.\n    waste = bins_remain_cap - item\n    fit_score = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Exponential decay for waste, -inf if item doesn't fit\n\n    # 2. Fill Percentage: Encourage filling bins completely, but not excessively.\n    fill_percentage = item / bins_remain_cap\n    fill_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(fill_percentage - 0.8)), -np.inf) # target 80% fill\n    #fill_score = np.where(bins_remain_cap >= item, fill_percentage, -np.inf) # alternative: just maximize the fill\n\n    # 3. Combine the scores.  Experiment with different weights.\n    priority = 0.7 * fit_score + 0.3 * fill_score\n\n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins based on a combination of factors:\n    1. How well the item fits (smallest waste).\n    2. A penalty for bins that are too full.\n    3. Encouraging bins to be filled more completely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    epsilon = 1e-9\n    bins_remain_cap = np.maximum(bins_remain_cap, epsilon)  # Avoid division by zero.\n\n    # 1. Fit Score: Prioritize bins with minimal wasted space.\n    waste = bins_remain_cap - item\n    fit_score = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Exponential decay for waste, -inf if item doesn't fit\n\n    # 2. Fill Percentage: Encourage filling bins completely, but not excessively.\n    fill_percentage = item / bins_remain_cap\n    fill_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(fill_percentage - 0.8)), -np.inf) # target 80% fill\n    #fill_score = np.where(bins_remain_cap >= item, fill_percentage, -np.inf) # alternative: just maximize the fill\n\n    # 3. Combine the scores.  Experiment with different weights.\n    priority = 0.7 * fit_score + 0.3 * fill_score\n\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins, favoring those that fit the item well\n    and penalizing those where the item doesn't fit.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        waste = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = (bins_remain_cap[fit_mask]**2) / (waste + 0.00001)\n    else:\n        priorities = -np.abs(bins_remain_cap - item)\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins, favoring those that fit the item well\n    and penalizing those where the item doesn't fit.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        waste = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = (bins_remain_cap[fit_mask]**2) / (waste + 0.00001)\n    else:\n        priorities = -np.abs(bins_remain_cap - item)\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization with a near-full boost, avoids edge cases.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n\n    # Assign low priority to bins that cannot fit the item.\n    priorities = np.where(remaining_after_add >= 0, 0.0, -1000.0)\n\n    # Waste penalty based on remaining capacity.\n    waste_penalty = -np.abs(remaining_after_add)\n\n    # Near-full boost.\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n\n    # Combine waste and boost.\n    priorities = np.where(remaining_after_add >= 0, waste_penalty + near_full_bonus, priorities)\n    \n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, avoids near-empty bins, and minimizes waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    fit_check = bins_remain_cap >= item\n    remaining_space = bins_remain_cap - item\n    remaining_space[~fit_check] = np.inf\n    priorities = -remaining_space  # Best fit\n\n    post_fill = bins_remain_cap - item\n    small_space_penalty = -10\n    priorities[fit_check & (post_fill < 0.1)] += small_space_penalty\n\n    difference = bins_remain_cap - item\n    difference[difference < 0] = np.inf\n    priorities -= difference / np.max(bins_remain_cap)\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, avoids near-empty bins, and minimizes waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    fit_check = bins_remain_cap >= item\n    remaining_space = bins_remain_cap - item\n    remaining_space[~fit_check] = np.inf\n    priorities = -remaining_space  # Best fit\n\n    post_fill = bins_remain_cap - item\n    small_space_penalty = -10\n    priorities[fit_check & (post_fill < 0.1)] += small_space_penalty\n\n    difference = bins_remain_cap - item\n    difference[difference < 0] = np.inf\n    priorities -= difference / np.max(bins_remain_cap)\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, avoids near-empty bins, and minimizes waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    fit_check = bins_remain_cap >= item\n    remaining_space = bins_remain_cap - item\n    remaining_space[~fit_check] = np.inf\n    priorities = -remaining_space  # Best fit\n\n    post_fill = bins_remain_cap - item\n    small_space_penalty = -10\n    priorities[fit_check & (post_fill < 0.1)] += small_space_penalty\n\n    difference = bins_remain_cap - item\n    difference[difference < 0] = np.inf\n    priorities -= difference / np.max(bins_remain_cap)\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on capacity fit and waste, avoiding near-full bins.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n    waste = bins_remain_cap[fit_mask] - item\n    \n    if waste.size > 0:\n        priorities[fit_mask] = 1.0 / (waste + 0.00001)\n\n    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap - item < 0.1)\n    priorities[almost_full_mask] = -100\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}