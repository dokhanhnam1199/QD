```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, near-fit, and capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Infeasible bins get a very low priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Calculate waste
    waste = bins_remain_cap - item
    feasible = bins_remain_cap >= item

    # Prioritize bins with less waste, using exponential decay
    priorities[feasible] = np.exp(-waste[feasible] / (item + epsilon))

    # Boost near-fit bins
    near_fit = (bins_remain_cap >= item) & (waste < 0.1)
    priorities[near_fit] += 2  # Significantly boost near-fit

    # Capacity-based component: Favor bins with larger remaining capacity (but not too much)
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)
    priorities[feasible] += 0.5 * capacity_priority[feasible] #Scale it down

    return priorities
```
