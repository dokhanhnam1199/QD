```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Prioritize bins where the remaining space after placing the item is small
    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = np.inf  # Ignore bins that can't fit
    priorities[can_fit] += 1 / (1e-6 + remaining_space[can_fit]) # Avoid division by zero

    # Prioritize bins that are not too full already (encourage more complete packing)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalize by maximum capacity.
    priorities[can_fit] += utilization[can_fit]

    return priorities
```
