```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Uses a combined strategy focusing on fullness and penalizing near-misses.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Reward bins where the item fits
            fill_ratio = item / capacity
            priorities[i] = fill_ratio  # Higher fill_ratio is better. Closer to 1 the better the item fits

            # Penalize "near misses" where adding the item leaves very little space
            remaining_after_fit = capacity - item
            if remaining_after_fit > 0:
                penalty = np.exp(-10 * remaining_after_fit) # Exponential decay penalizes almost full bins
                priorities[i] += (1 - penalty) * 0.5 # Adjust the weight for optimal performance. Empirically chosen

            #Bonus for bins with less than half capacity. Balances the equation and makes the bin viable in the long run.
            if capacity < 0.5:
               priorities[i] += 0.1 * (0.5 - capacity)

        else:
            # Very low priority for bins that cannot fit the item.  This is essential to avoid bad selections.
            priorities[i] = -1e9

    return priorities
```
