```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization, near-full bonuses, adaptive weighting based on bin utilization,
    and penalty for bins that will be overfilled. Aims for a more balanced and robust approach.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Strong penalty for infeasible bins
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -1e9  # Significantly stronger penalty than before

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        # Waste priority (reciprocal of waste, as before)
        waste = np.abs(remaining_after_add[valid_mask])
        waste_priority = 1.0 / (waste + epsilon)

        # Near-full bonus, but more conservative and adaptive
        near_full_bonus = np.where(
            (bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item),
            item / bins_remain_cap[valid_mask] * 5,  # Reduced magnitude of bonus
            0
        )

        # Adaptive weighting based on bin utilization
        bin_utilization = (bins_remain_cap - remaining_after_add) / bins_remain_cap # calculate how much space we will be using in the bin
        bin_utilization = bin_utilization[valid_mask]

        # Scale the values for better control over the weights
        utilization_mean = np.mean(bin_utilization) if np.any(valid_mask) else 0.5
        utilization_std = np.std(bin_utilization) if np.any(valid_mask) and len(bin_utilization) > 1 else 0.1

        waste_weight = 1.0
        near_full_weight = 0.75  # Slightly reduce the importance of near-full bonus
        utilization_weight = 0.5 # Weight for utilization factor

        # Prioritize bins with lower utilization if item is small
        if item < np.mean(bins_remain_cap):
            utilization_priority = 1 - bin_utilization
        else: # Prioritize bins with higher utilization if item is large
            utilization_priority = bin_utilization

        # Combine priorities with adaptive weights
        priorities[valid_mask] = (
            waste_weight * waste_priority +
            near_full_weight * near_full_bonus +
            utilization_weight * utilization_priority
        )

        # Reduce priority if the item will make the bin nearly full (risk of fragmentation)
        nearly_full_penalty = np.where(remaining_after_add[valid_mask] < 0.1 * bins_remain_cap[valid_mask], -10, 0)
        priorities[valid_mask] += nearly_full_penalty

    return priorities
```
