```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a more complex heuristic based on available capacity and a penalty
    for bins that would become almost full (risk of future blockage).
    Mimics accretion disk physics: favoring filling 'near-full' bins.
    We want to penalize bins that filling them would leave them too full or nearly empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Base priority: higher for smaller remaining capacity (avoid opening new bins)
            base_priority = 1 / (remaining_capacity + 1e-9) #avoid division by 0

            # Capacity based heuristic.
            new_capacity = remaining_capacity - item
            
            # Near full bin penalty (mimic singularity behavior - packing becomes harder).
            if new_capacity < 0.1:  # If remaining capacity would be very low, greatly penalize
                near_full_penalty = -100  # Big penalty
            elif new_capacity < 0.3 : # Slightly full
                near_full_penalty = -2 * (0.3 - new_capacity)**2 # Small Penalty
            else:
                near_full_penalty = 0

            # Near empty bin penalty (penalize fragmenting bins).
            if new_capacity > 0.7:
                 near_empty_penalty = -0.5 * (new_capacity - 0.7)**2
            else:
                near_empty_penalty = 0

            # Overall Priority score is balance of capacity and penalty
            priorities[i] = base_priority + near_full_penalty + near_empty_penalty
        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority

    return priorities
```
