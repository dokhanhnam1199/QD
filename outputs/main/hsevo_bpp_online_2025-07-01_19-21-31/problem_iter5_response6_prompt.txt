{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins that are a good fit for the item,\n    while also considering the overall fill level of the bin.  It aims to\n    avoid both overly empty bins and bins that are almost, but not quite,\n    large enough.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    epsilon = 1e-9\n    effective_capacities = np.maximum(bins_remain_cap, epsilon)\n\n    # 1. Fit Score: How well the item fits relative to remaining capacity.\n    fit_score = np.exp(-np.abs(effective_capacities - item) / (0.2 * item + epsilon))  # Favor closer fits.  Scale the exponent by item size\n    # 2. Capacity Utilization:  Encourage filling bins reasonably well.\n    utilization_score = effective_capacities / np.sum(bins_remain_cap + epsilon) #normalized remaining capacity - high remaining capacity reduces priority.\n\n    # 3. Combine the scores\n    priority = fit_score - 0.1 * utilization_score # subtract to increase priority for the ones with lowest remaining capacity, and balance between the two scores\n\n    # 4. Strong penalty for bins that are too small.\n    priority[bins_remain_cap < item] = -np.inf\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employs a refined heuristic that balances bin utilization and fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n\n    epsilon = 1e-9  # for numerical stability\n\n    # 1. Immediate Infeasibility Check\n    priority = np.where(bins_remain_cap < item, -np.inf, 0.0)  # Disqualify bins immediately if not enough space\n\n    # 2. Best Fit Component - Prioritize bins where the item fits best (minimizes wasted space)\n    waste = bins_remain_cap - item\n    best_fit_priority = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -np.inf)  # Exponential decay based on waste\n\n    # 3. Capacity-Based Component - Give preference to bins with higher remaining capacity, but not excessively\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)  # Prioritize larger remaining capacity\n\n    # 4. Avoidance of Near-Full Bins - Discourage bins that are already almost full to prevent tiny slivers of space.\n    near_full_penalty = np.where((bins_remain_cap > item) & (bins_remain_cap < 1.1 * item), -0.5, 0.0)  # Added bonus for almost full bins, multiplied by -1\n\n    # 5. Combine Priorities - Weigh each component\n    priority = 0.6 * best_fit_priority + 0.3 * capacity_priority + 0.1 * near_full_penalty\n\n    return priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic combines waste minimization with near-full bin penalties, while the worst simply prioritizes bins based on waste and penalizes near-full bins without considering how well the item fits initially. The best uses `1 / (waste + 0.0001)` as a priority score and adds penalties for nearly full bins, whereas the worst in the ranking uses `1.0 / (waste + 0.00001)` with a fixed penalty.\n\nComparing (2nd) vs (19th), the second-best heuristic calculates fit score and utilization score, combining them into a priority. The 19th only considers best fit, small space penalty, and waste. The second-best normalizes remaining capacity. The 19th penalizes bins that will have a small space remaining using `small_space_penalty = -10`.\n\nComparing (1st) vs (5th), the first uses hardcoded constant while the fifth uses hyper-optimized constants using waste epsilon, near full thresholds, near full penalty, and invalid bin priority.\n\nComparing (10th) vs (11th), the 10th function uses best fit, capacity-based component and avoidance of near-full bins. The 11th uses fit score and fill percentage. Also, the 10th prioritizes larger remaining capacity using `capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)`.\n\nComparing (2nd worst) vs (worst), we see the second worst heuristic `priorities[fit_mask] = (bins_remain_cap[fit_mask]**2) / (waste + 0.00001)` emphasizes the remaining capacity, while the worst only emphasizes wasted space.\n\nOverall: Good heuristics often involve combining multiple factors (waste, fill level, near-full penalties) with carefully chosen weights or functional forms (e.g., exponential decay for waste). They use numerical stability (epsilon). A well-defined penalty is required for invalid bins.\n- \nOkay, let's redefine \"Current self-reflection\" for better heuristic design, focusing on constructive and effective practices, while avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Adaptive weighting, feasibility enforcement, experimental calibration, multi-factor integration.\n\n*   **Advice:** Design heuristics to dynamically adjust weights based on problem state and feedback. Systematically explore the impact of different penalty magnitudes and functional forms on solution quality.\n\n*   **Avoid:** Prematurely simplifying models. Solely focusing on error prevention without considering the impact of solution quality. Avoiding reward/bonus structures.\n\n*   **Explanation:** Effective heuristics require a balance of exploration (adaptive weighting) and exploitation (penalizing infeasibility). Rigorous experimentation is crucial for parameter tuning and ensuring robust performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}