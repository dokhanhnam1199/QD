```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive weights based on capacity distribution.
    Combines waste, fill percentage, and near-full penalties.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    epsilon = 1e-9

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1 / (waste + epsilon)

        new_capacities = bins_remain_cap[valid_bins] - item
        near_full_penalty = np.zeros_like(new_capacities)

        near_full_mask = new_capacities < 0.1
        near_full_penalty[near_full_mask] = -100

        near_full_mask2 = (new_capacities >= 0.1) & (new_capacities < 0.3)
        near_full_penalty[near_full_mask2] = -2 * (0.3 - new_capacities[near_full_mask2])**2
        
        priorities[valid_bins] += near_full_penalty
        
        fill_percentage = item / bins_remain_cap[valid_bins]
        fill_score = np.exp(-np.abs(fill_percentage - 0.8))
        
        # Adaptive Weighting
        total_capacity = np.sum(bins_remain_cap)
        if total_capacity < 5 * item:
            fill_weight = 0.3
            waste_weight = 0.7
        elif total_capacity > 20 * item:
            fill_weight = 0.7
            waste_weight = 0.3
        else:
            fill_weight = 0.5
            waste_weight = 0.5

        priorities[valid_bins] = waste_weight * (1 / (waste + epsilon)) + fill_weight * fill_score #balance between waste and fill

    else:
        priorities = np.full_like(bins_remain_cap, -1000.0)

    return priorities
```
