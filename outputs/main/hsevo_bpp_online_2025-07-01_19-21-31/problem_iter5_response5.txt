```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, capacity, and near-full bin penalties."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    epsilon = 1e-6 # for numerical stability

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = (bins_remain_cap[valid_bins]**0.5) / (waste + epsilon)  # Prioritize by waste and capacity

        # Near-full bin penalty
        new_capacities = bins_remain_cap[valid_bins] - item
        near_full_threshold = 0.1
        near_full_penalty = -100
        near_full_mask = new_capacities < near_full_threshold
        priorities[valid_bins][near_full_mask] += near_full_penalty

    else:
        priorities = np.full_like(bins_remain_cap, -1e9) # Very low priority for invalid bins

    return priorities
```
