```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    1. How well the item fits (smallest waste).
    2. A penalty for bins that are too full.
    3. Encouraging bins to be filled more completely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of priority scores for each bin.
    """
    epsilon = 1e-9
    bins_remain_cap = np.maximum(bins_remain_cap, epsilon)  # Avoid division by zero.

    # 1. Fit Score: Prioritize bins with minimal wasted space.
    waste = bins_remain_cap - item
    fit_score = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Exponential decay for waste, -inf if item doesn't fit

    # 2. Fill Percentage: Encourage filling bins completely, but not excessively.
    fill_percentage = item / bins_remain_cap
    fill_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(fill_percentage - 0.8)), -np.inf) # target 80% fill
    #fill_score = np.where(bins_remain_cap >= item, fill_percentage, -np.inf) # alternative: just maximize the fill

    # 3. Combine the scores.  Experiment with different weights.
    priority = 0.7 * fit_score + 0.3 * fill_score

    return priority
```
