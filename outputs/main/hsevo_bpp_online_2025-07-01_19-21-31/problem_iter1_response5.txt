```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # First, consider only bins that can fit the item.
        capacities = bins_remain_cap[valid_bins]
        space_waste = capacities - item
        # Prioritize bins that minimize space waste but not that small it ends up with empty space.
        priorities[valid_bins] = (capacities**2) / (space_waste + 0.00001)  # avoid div by zero
    else:
        # If no bins can fit, perhaps we should minimize the "overflow"?
        # This might depend on problem constraints.
        priorities = -np.abs(bins_remain_cap - item) # try to add to smallest bin
        # priorities = item / (bins_remain_cap + 0.0001)  # maybe smaller bins should take burden?
    return priorities
```
