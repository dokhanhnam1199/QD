```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins where item fits
            priorities[i] = (cap - item) / cap # Remaining capacity after adding, normalized
            priorities[i] += 0.5  # Give it a base priority to differentiate from non-fitting bins

            # Optional: Further tweak priorities based on how full the bin already is
            # e.g., prefer bins that are already reasonably full (but still fit)
            # if cap < 0.9: # if bin has used more than 10% of capacity
            #    priorities[i] += 0.2
        else:
            # Give negative priority if the item does not fit
            priorities[i] = -1 * (item - cap) #How much the item doesn't fit. Smaller value is better (less negative)

    return priorities
```
