```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonuses, adaptive weighting, and bin diversity consideration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -np.inf

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        # Waste priority, use reciprocal of waste
        waste = np.abs(remaining_after_add[valid_mask])
        waste_priority = 1.0 / (waste + epsilon)

        # Near-full bonus, give bonus to near full bins
        near_full_bonus = np.where((bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item), item / bins_remain_cap[valid_mask] * 10, 0)

        # Adaptive weighting based on remaining capacity distribution
        capacity_mean = np.mean(bins_remain_cap[valid_mask]) if np.any(valid_mask) else np.mean(bins_remain_cap)
        capacity_std = np.std(bins_remain_cap[valid_mask]) if np.any(valid_mask) and len(bins_remain_cap[valid_mask]) > 1 else 0.1

        waste_weight = 1.0
        near_full_weight = 1.0
        capacity_weight = 1.0
        fill_weight = 0.5

        if capacity_std > 0.0:
            capacity_normalized = (bins_remain_cap[valid_mask] - capacity_mean) / capacity_std
            capacity_weight = 1.0 + np.tanh(capacity_normalized)  # Favor bins with capacity above the mean

        # Fill percentage score
        fill_percentage = item / bins_remain_cap[valid_mask]
        fill_score = np.exp(-np.abs(fill_percentage - 0.8)) # Target 80% fill

        # Bin Diversity Bonus: Encourage use of bins with different fill levels
        fill_levels = bins_remain_cap[valid_mask] / np.max(bins_remain_cap)  # Normalize fill levels
        diversity_bonus = np.std(fill_levels) * 5 # Higher std => more diverse fills


        priorities[valid_mask] = waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight + fill_weight * fill_score + diversity_bonus

        # Additional bonus for bins close to being full after packing
        almost_full_threshold = 0.1 * np.max(bins_remain_cap)  # e.g., within 10% of max capacity after packing
        almost_full_bonus = np.where(remaining_after_add[valid_mask] >= 0, np.where(remaining_after_add[valid_mask] <= almost_full_threshold, 5, 0), 0)
        priorities[valid_mask] += almost_full_bonus


    return priorities
```
