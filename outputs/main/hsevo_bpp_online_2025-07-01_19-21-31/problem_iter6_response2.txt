```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonus, capacity consideration, and adaptive weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    # Infeasible bins get strongly negative priority
    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)

    # Waste priority, use reciprocal of waste
    waste = np.abs(remaining_after_add)
    waste_priority = 1.0 / (waste + epsilon)

    # Near-full bonus, give bonus to near full bins
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)
    
    # Capacity based priority, favor larger remaining capacity
    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)

    # Adaptive weighting based on item size
    if item < 0.2:  # Small items, prioritize waste minimization and capacity
        waste_weight = 0.6
        near_full_weight = 0.1
        capacity_weight = 0.3
    elif item > 0.8:  # Large items, prioritize near-full and avoid fragmentation
        waste_weight = 0.1
        near_full_weight = 0.6
        capacity_weight = 0.3
    else:  # Medium items, balance all factors
        waste_weight = 0.3
        near_full_weight = 0.4
        capacity_weight = 0.3

    # Combine all priorities with adaptive weights
    priorities = np.where(remaining_after_add >= 0, waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight * capacity_priority, priorities)

    # Introduce a penalty for bins that become too empty after adding the item
    empty_penalty = np.where(remaining_after_add > 0.7, -0.5 * (remaining_after_add - 0.7), 0)  #if remaining cap > 0.7, penalize
    priorities = np.where(remaining_after_add >= 0, priorities + empty_penalty, priorities)


    return priorities
```
