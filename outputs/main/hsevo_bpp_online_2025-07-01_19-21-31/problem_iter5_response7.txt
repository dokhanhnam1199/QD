```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste penalty, and near-full avoidance."""

    epsilon = 1e-9
    # Fill score based on how close the item fills the bin
    ratios = item / (bins_remain_cap + epsilon)
    fill_score = np.exp(-np.abs(ratios - 1) * 5)

    # Waste penalty: higher penalty for more waste
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -1e9)

    # Near-full penalty: discourage bins that will be almost full
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)
    near_full_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    near_full_penalty[almost_full_mask] = -10  # Reduced penalty for better fine-tuning
    
    #Combine fill score, waste_penalty, and near_full_penalty
    priorities = 0.6 * fill_score + 0.3 * waste_penalty + 0.1 * near_full_penalty
    return priorities
```
