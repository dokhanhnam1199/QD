```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, near-full bonuses, adaptive weighting and fill percentage."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    epsilon = 1e-9

    infeasible_mask = remaining_after_add < 0
    priorities[infeasible_mask] = -1e9

    valid_mask = remaining_after_add >= 0

    if np.any(valid_mask):
        waste = remaining_after_add[valid_mask]
        waste_priority = 1.0 / (waste + epsilon)

        near_full_bonus = np.where(
            (bins_remain_cap[valid_mask] > item) & (bins_remain_cap[valid_mask] <= 2 * item),
            (item / bins_remain_cap[valid_mask]) ** 2 * 5,
            0
        )

        capacity_mean = np.mean(bins_remain_cap[valid_mask]) if np.any(valid_mask) else np.mean(bins_remain_cap)
        capacity_std = np.std(bins_remain_cap[valid_mask]) if np.any(valid_mask) and len(bins_remain_cap[valid_mask]) > 1 else 0.1

        waste_weight = 1.0
        near_full_weight = 1.0
        capacity_weight = 0.5

        if capacity_std > 0.0:
            capacity_normalized = (bins_remain_cap[valid_mask] - capacity_mean) / capacity_std
            capacity_weight = 0.5 + 0.5 * np.tanh(capacity_normalized)

        priorities[valid_mask] = waste_weight * waste_priority + near_full_weight * near_full_bonus + capacity_weight

        fill_percentage = item / bins_remain_cap[valid_mask]
        fill_score = np.exp(-5 * np.abs(fill_percentage - 0.8))
        priorities[valid_mask] += 0.7 * fill_score

        very_small_remaining_mask = remaining_after_add[valid_mask] < 0.1
        priorities[valid_mask][very_small_remaining_mask] -= 1.5

        # Bin utilization and small item handling.
        bin_utilization = (bins_remain_cap - remaining_after_add) / bins_remain_cap
        bin_utilization = bin_utilization[valid_mask]
        utilization_mean = np.mean(bin_utilization) if np.any(valid_mask) else 0.5
        utilization_std = np.std(bin_utilization) if np.any(valid_mask) and len(bin_utilization) > 1 else 0.1
        utilization_weight = 0.5

        if item < np.mean(bins_remain_cap):
            utilization_priority = 1 - bin_utilization
        else:
            utilization_priority = bin_utilization
        priorities[valid_mask] += utilization_weight * utilization_priority

    return priorities
```
