```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give negative infinity for bins that can't fit the item
    priorities = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate the remaining capacity after placing the item in each bin
    remaining_capacity = bins_remain_cap - item

    # Prioritize bins with smaller remaining capacity (First-Fit Decreasing like)
    # But also consider the wasted space if the bin becomes too empty (relative to item size)

    priorities = np.where(bins_remain_cap >= item,
                           (item / bins_remain_cap) - (remaining_capacity / (bins_remain_cap + 1e-9)),  # 1e-9 to avoid div by 0
                           priorities) # keep -inf where item doesn't fit

    #Bonus based on how full the bin would become
    fullness_score = 1 - (remaining_capacity / np.max(bins_remain_cap)) #Max bin size as proxy
    priorities = np.where(bins_remain_cap >= item,
                           priorities + fullness_score, #add fullness bonus if can fit
                           priorities)

    return priorities
```
