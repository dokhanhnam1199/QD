```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with a near-full boost, avoids edge cases."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item

    # Assign low priority to bins that cannot fit the item.
    priorities = np.where(remaining_after_add >= 0, 0.0, -1000.0)

    # Waste penalty based on remaining capacity.
    waste_penalty = -np.abs(remaining_after_add)

    # Near-full boost.
    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)

    # Combine waste and boost.
    priorities = np.where(remaining_after_add >= 0, waste_penalty + near_full_bonus, priorities)
    
    return priorities
```
