import numpy as np

def priority_v2(item: float, 
                bins_remain_cap: np.ndarray,
                waste_epsilon: float = 0.00024992705202784253,
                near_full_threshold1: float = 0.09214880521017214,
                near_full_threshold2: float = 0.3937618967248203,
                near_full_penalty1: float = -90.30902273387724,
                near_full_penalty2_factor: float = -2.798913678771793,
                invalid_bin_priority: float = -1116.7108234917382) -> np.ndarray:
    """Combines waste minimization and near-full bin penalties."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1 / (waste + waste_epsilon)

        new_capacities = bins_remain_cap[valid_bins] - item
        near_full_penalty = np.zeros_like(new_capacities)

        near_full_mask = new_capacities < near_full_threshold1
        near_full_penalty[near_full_mask] = near_full_penalty1

        near_full_mask2 = (new_capacities >= near_full_threshold1) & (new_capacities < near_full_threshold2)
        near_full_penalty[near_full_mask2] = near_full_penalty2_factor * (near_full_threshold2 - new_capacities[near_full_mask2])**2
        
        priorities[valid_bins] += near_full_penalty

    else:
        priorities = np.full_like(bins_remain_cap, invalid_bin_priority)

    return priorities
