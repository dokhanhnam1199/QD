```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility check and immediate zeroing for infeasible bins
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # Best Fit-like Score (remaining capacity after placing the item, closer to zero is better). Only for feasible bins
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -np.abs(remaining_capacity_after_placement)  # Minimize absolute difference.  Best fit

    # Bonus for bins that are close to full. This discourages bins being left with tiny gaps.
    close_to_full_threshold = 0.2  # Tunable parameter: A bin is 'close to full' if its remaining capacity is < 20% of its original capacity
    close_to_full = (bins_remain_cap < (item + close_to_full_threshold)) & feasible_bins  # Make sure it is feasible too
    priorities[close_to_full] += 10 # Increase priority substantially.

    # Large bonus for bins perfectly fitting the item. (Exact Match)
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Numerical stability
    priorities[perfect_fit] += 100

    return priorities
```
