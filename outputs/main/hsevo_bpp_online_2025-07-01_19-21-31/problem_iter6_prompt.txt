{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines waste minimization, near-full bonus, and capacity consideration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    epsilon = 1e-9\n\n    # Infeasible bins get strongly negative priority\n    priorities = np.where(remaining_after_add >= 0, 0.0, -np.inf)\n\n    # Waste priority, use reciprocal of waste\n    waste = np.abs(remaining_after_add)\n    waste_priority = 1.0 / (waste + epsilon)\n\n    # Near-full bonus, give bonus to near full bins\n    near_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap <= 2 * item), item / bins_remain_cap * 10, 0)\n    \n    # Capacity based priority, favor larger remaining capacity\n    capacity_priority = np.sqrt(bins_remain_cap) / (item + epsilon)\n\n    # Combine all priorities\n    priorities = np.where(remaining_after_add >= 0, waste_priority + near_full_bonus + capacity_priority, priorities)\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current self-reflection\" for better heuristic design, focusing on constructive and effective practices, while avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Adaptive weighting, feasibility enforcement, experimental calibration, multi-factor integration.\n\n*   **Advice:** Design heuristics to dynamically adjust weights based on problem state and feedback. Systematically explore the impact of different penalty magnitudes and functional forms on solution quality.\n\n*   **Avoid:** Prematurely simplifying models. Solely focusing on error prevention without considering the impact of solution quality. Avoiding reward/bonus structures.\n\n*   **Explanation:** Effective heuristics require a balance of exploration (adaptive weighting) and exploitation (penalizing infeasibility). Rigorous experimentation is crucial for parameter tuning and ensuring robust performance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}