```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Higher priority means the bin is more preferred for the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Immediate Fit: Highest priority if the item fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1e9  # Very high priority

    # 2. Good Fit: Give some priority to bins where the item fits reasonably well.
    # Prioritize bins where the remaining capacity after adding the item is small,
    # but not too small (avoiding near-empty bins if possible).  We use a quadratic
    # term to penalize both large and small remaining capacities after packing.
    fit = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap[fit] - item
    capacity_used_ratio = item / bins_remain_cap[fit]
    priorities[fit] = 100 * capacity_used_ratio - (remaining_after_fit)**2


    # 3. Penalize bins that are too full relative to the item size. Avoid bins which are near full.
    # this ensures better usage of near full bins with smaller item.
    too_full = (bins_remain_cap < item)
    priorities[too_full] = -1e6 # very low priority.
    
    return priorities
```
