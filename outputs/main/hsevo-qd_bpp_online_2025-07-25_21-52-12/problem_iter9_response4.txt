```python
import numpy as np
from sklearn.ensemble import RandomForestRegressor

class OnlineBppHeuristic:
    def __init__(self):
        # Initialize a random forest regressor to learn optimal bin selection
        self.model = RandomForestRegressor(n_estimators=100, random_state=42)
        self.history = []

    def priority_v2(self, item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
        # Create features for each bin: item size, remaining capacity, ratio of item size to remaining capacity
        features = np.array([(item, cap, item / cap if cap > 0 else 0) for cap in bins_remain_cap])
        
        # Predict priority scores using the trained model
        if self.model.n_features_in_ != features.shape[1]:
            # If the model is not trained or features have changed, use a default strategy
            return self.priority_v1(item, bins_remain_cap)
        
        priority_scores = self.model.predict(features)
        
        # Ensure items cannot be placed in bins where they don't fit
        can_fit = bins_remain_cap >= item
        priority_scores[~can_fit] = -np.inf  # Assign very low priority to bins where the item cannot fit
        
        return priority_scores

    def update_model(self, item: float, bin_selected: int, bins_remain_cap: np.ndarray, success: bool):
        # Collect data for training: item size, bin index, remaining capacities, and success of placement
        features = np.array([(item, bin_selected, cap, item / cap if cap > 0 else 0) for cap in bins_remain_cap])
        target = int(success)  # 1 for success, 0 for failure
        
        # Append to history
        self.history.append((features[bin_selected], target))
        
        # Periodically retrain the model with the collected experiences
        if len(self.history) > 1000:
            X, y = zip(*self.history)
            self.model.fit(np.array(X), np.array(y))
            self.history = []  # Clear history after training

    def priority_v1(self, item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
        """Fallback priority function similar to the initial version."""
        can_fit = bins_remain_cap >= item
        space_left = bins_remain_cap - item
        priority = can_fit * (1 - (space_left / bins_remain_cap))
        return priority
```
