```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design implements a heuristic based on the remaining capacity of the bins.
    Is a priority score based on filling tighter bins first, aiming to close the 
    bins as much as possible to trigger first fit for new bins sooner.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Inverse of remaining capacity (ish) - lower remaining capacity more likely to be chosen.
    # ward_priority deals with how quickly we fill a bin in comparison to its remainder.
    ward_priority = (bins_remain_cap - item) / bins_remain_cap
    
    # Avoid greenfield bins - create urgency to fill existing tight bins.
    # Also builds glove principle; bins having smaller capacity due to previous okay efficiency.
    compactness_priority = np.ones_like(bins_remain_cap) - 1/np.clip(bins_remain_cap, a_min=1e-3, a_max=True)

    # Penalty score - trying not to put large items if bin minor fit leads to overtime cooperation.
    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0) 

    # Prioritize low ward_priority, then skewed compactness priority.
    priorities = ward_priority + compactness_priority - size_penalty
    
    # We return higher remark priority bin box to match with the BPP such that something good that ensures tight unfitness
    return priorities
```
