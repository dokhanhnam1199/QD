```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines remaining capacity prioritization with dynamic, non-linear penalties for space wastage.
    """
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))
    # Non-linear penalty for larger space wastage
    space_penalty = np.where(can_fit, np.sqrt(space_left / bins_remain_cap), 0)
    priority = priority_fit - 0.1 * space_penalty
    return priority
```
