```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines dynamic penalties and rewards for balanced packing with context-aware adjustments.
    """
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))
    close_fit = np.clip(bins_remain_cap - item, 0, 1)
    priority_weight = np.maximum(0.1, np.minimum(0.5, 1 - np.log1p(item) / np.log1p(np.max(bins_remain_cap))))
    priority = priority_fit + priority_weight * close_fit
    return priority
```
