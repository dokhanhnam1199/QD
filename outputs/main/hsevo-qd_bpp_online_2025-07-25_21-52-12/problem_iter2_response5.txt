```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balanced heuristic combining remaining capacity and waste reduction with dynamic adjustments."""
    # Calculate waste reduction if item is added to each bin
    waste_reduction = bins_remain_cap - item
    # Penalize bins that cannot fit the item
    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)
    # Encourage using less full bins with a sinusoidal function
    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))
    # Combine waste reduction with capacity factor
    combined_score = priority_score * (1 + capacity_factor)
    return combined_score
```
