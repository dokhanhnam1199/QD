```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority score for each bin considering item size and remaining capacity.

    This heuristic combines remaining capacity, closeness to item size, and penalizes overcrowding.
    """
    # Preference for bins with remaining capacity close to the item size
    close_bins = np.clip(bins_remain_cap - item, 0, 1) * 1.5
    
    # Preference for bins with largest remaining capacity
    largest_first_fit = bins_remain_cap
    
    # Penalize bins that would be overcrowded by the item
    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)
    
    # Combine priorities with appropriate weights
    priorities = close_bins + largest_first_fit - size_penalty
    
    return priorities
```
