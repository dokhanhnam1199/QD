{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    priority_weight: float = 0.32026293473465717, \n    clip_min: float = 0.8957832532723333, \n    clip_max: float = 0.44260458707061934) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, clip_min, clip_max)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + priority_weight * close_fit\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Penalty for too much leftover space, decreased when the remaining space is minimal\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    priority_weight: float = 0.32026293473465717, \n    clip_min: float = 0.8957832532723333, \n    clip_max: float = 0.44260458707061934) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, clip_min, clip_max)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + priority_weight * close_fit\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Penalty for too much leftover space, decreased when the remaining space is minimal\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + 0.5 * close_fit\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + 0.5 * close_fit\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + 0.5 * close_fit\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + 0.5 * close_fit\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + 0.5 * close_fit\n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and minimal leftover space to prioritize bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Encouragement for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with dynamic weighting\n    priority = priority_fit + 0.5 * close_fit\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and penalty for leftover space, with encouragement for less full bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    epsilon = 0.01\n    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon\n    return priority + encouragement\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and penalty for leftover space, with encouragement for less full bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    epsilon = 0.01\n    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon\n    return priority + encouragement\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, compactness, and size penalties.\"\"\"\n    # Sinusoidal prioritization for tight bins\n    sinusoidal_priority = 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    # Ward priority adjusted for current item size\n    ward_priority = (bins_remain_cap - item) / bins_remain_cap\n    # Compactness priority to avoid greenfield bins\n    compactness_priority = 1 - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)\n    # Size penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score\n    return sinusoidal_priority + ward_priority + compactness_priority - size_penalty\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining space, compactness, and adaptive penalties.\"\"\"\n    \n    # High priority if adding this item leaves minimal space in the bin (similar to v1)\n    close_fit_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Ward priority from v0: target filling tighter bins first\n    ward_priority = (bins_remain_cap - item) / bins_remain_cap\n    \n    # Compactness priority from v0: prefer bins that are already more filled\n    compactness_priority = np.ones_like(bins_remain_cap) - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)\n    \n    # Size penalty from v0: penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Combine priorities: close fit, ward priority, compactness, and size penalties\n    priorities = close_fit_priority + ward_priority + compactness_priority - size_penalty\n    \n    # Ensure dynamic adjustment by normalizing priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining space, compactness, and adaptive penalties.\"\"\"\n    \n    # High priority if adding this item leaves minimal space in the bin (similar to v1)\n    close_fit_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Ward priority from v0: target filling tighter bins first\n    ward_priority = (bins_remain_cap - item) / bins_remain_cap\n    \n    # Compactness priority from v0: prefer bins that are already more filled\n    compactness_priority = np.ones_like(bins_remain_cap) - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)\n    \n    # Size penalty from v0: penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Combine priorities: close fit, ward priority, compactness, and size penalties\n    priorities = close_fit_priority + ward_priority + compactness_priority - size_penalty\n    \n    # Ensure dynamic adjustment by normalizing priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, compactness, and size penalties.\"\"\"\n    # Sinusoidal prioritization for tight bins\n    sinusoidal_priority = 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    # Ward priority adjusted for current item size\n    ward_priority = (bins_remain_cap - item) / bins_remain_cap\n    # Compactness priority to avoid greenfield bins\n    compactness_priority = 1 - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)\n    # Size penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score\n    return sinusoidal_priority + ward_priority + compactness_priority - size_penalty\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining space, compactness, and adaptive penalties.\"\"\"\n    \n    # High priority if adding this item leaves minimal space in the bin (similar to v1)\n    close_fit_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Ward priority from v0: target filling tighter bins first\n    ward_priority = (bins_remain_cap - item) / bins_remain_cap\n    \n    # Compactness priority from v0: prefer bins that are already more filled\n    compactness_priority = np.ones_like(bins_remain_cap) - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)\n    \n    # Size penalty from v0: penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Combine priorities: close fit, ward priority, compactness, and size penalties\n    priorities = close_fit_priority + ward_priority + compactness_priority - size_penalty\n    \n    # Ensure dynamic adjustment by normalizing priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity and waste reduction with dynamic adjustments.\"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    # Penalize bins that cannot fit the item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    # Combine waste reduction with capacity factor\n    combined_score = priority_score * (1 + capacity_factor)\n    return combined_score\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity and waste reduction with dynamic adjustments.\"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    # Penalize bins that cannot fit the item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    # Combine waste reduction with capacity factor\n    combined_score = priority_score * (1 + capacity_factor)\n    return combined_score\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity and waste reduction with dynamic adjustments.\"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    # Penalize bins that cannot fit the item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    # Combine waste reduction with capacity factor\n    combined_score = priority_score * (1 + capacity_factor)\n    return combined_score\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}