```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines remaining capacity prioritization with dynamic adaptive penalties.
    """
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))
    close_fit_penalty = np.where(bins_remain_cap < 2 * item, space_left / bins_remain_cap, 0)
    priority = priority_fit - 0.1 * close_fit_penalty
    return priority
```
