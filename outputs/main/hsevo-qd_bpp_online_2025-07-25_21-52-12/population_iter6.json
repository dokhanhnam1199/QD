[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering fit, leftover space, and dynamic adjustments.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = np.clip(bins_remain_cap - item, 0, 1)\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    priority = priority_fit + 0.5 * capacity_factor * can_fit\n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.1224571200638,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, dynamic weighting, and penalties.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Dynamic weighting for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score with dynamic adjustments\n    priority = priority_fit + 0.5 * close_fit - size_penalty\n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 20.472676505783802,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and close fit prioritization with dynamic weighting and clipping.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0.8957832532723333, 0.44260458707061934)\n    priority_weight = 0.32026293473465717\n    priority = priority_fit + priority_weight * close_fit\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines dynamic weighting, penalty for large items, and capacity factor for balanced priority.\"\"\"\n    \n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    \n    # Combine waste reduction with capacity factor and size penalty\n    priorities = waste_reduction + capacity_factor - size_penalty\n    \n    # Normalize priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 88.67171918627844,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by penalizing leftover space and encouraging bins close to item size with dynamic weighting.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    dynamic_weight = 0.7\n    priority = priority_fit + dynamic_weight * close_fit\n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 5.205424810530519,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced priority combining remaining capacity, leftover space, and closeness to item size.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    priority = priority_fit + 0.3 * close_fit\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.836457917830076,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, dynamic weighting, and penalties.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Dynamic weighting for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score with dynamic adjustments\n    priority = priority_fit + 0.5 * close_fit - size_penalty\n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 20.472676505783802,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines dynamic weighting, penalty for large items, and capacity factor for balanced priority.\"\"\"\n    \n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    \n    # Combine waste reduction with capacity factor and size penalty\n    priorities = waste_reduction + capacity_factor - size_penalty\n    \n    # Normalize priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 88.67171918627844,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity with penalties for leftover space and rewards for close fits dynamically.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0.8957832532723333, 0.44260458707061934)\n    priority_weight = 0.32026293473465717\n    priority = priority_fit + priority_weight * close_fit\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced priority combining remaining capacity, leftover space, and closeness to item size.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    priority = priority_fit + 0.3 * close_fit\n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.836457917830076,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]