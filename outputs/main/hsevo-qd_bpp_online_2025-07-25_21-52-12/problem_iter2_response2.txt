```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balanced heuristic combining remaining space, compactness, and adaptive penalties."""
    
    # High priority if adding this item leaves minimal space in the bin (similar to v1)
    close_fit_priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Ward priority from v0: target filling tighter bins first
    ward_priority = (bins_remain_cap - item) / bins_remain_cap
    
    # Compactness priority from v0: prefer bins that are already more filled
    compactness_priority = np.ones_like(bins_remain_cap) - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)
    
    # Size penalty from v0: penalize large items that would nearly fill a bin
    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)
    
    # Combine priorities: close fit, ward priority, compactness, and size penalties
    priorities = close_fit_priority + ward_priority + compactness_priority - size_penalty
    
    # Ensure dynamic adjustment by normalizing priorities based on current state
    priorities /= np.max(priorities, initial=1.0)
    
    return priorities
```
