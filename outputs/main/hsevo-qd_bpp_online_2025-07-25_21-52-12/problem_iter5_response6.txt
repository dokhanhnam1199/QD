```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balanced heuristic combining remaining capacity, dynamic weighting, and penalties."""
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    # Priority for bins that fit the item, penalizing leftover space
    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))
    # Dynamic weighting for bins with capacity close to item size
    close_fit = np.clip(bins_remain_cap - item, 0, 1)
    # Penalty for large items in small remaining space
    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)
    # Combined priority score with dynamic adjustments
    priority = priority_fit + 0.5 * close_fit - size_penalty
    return priority
```
