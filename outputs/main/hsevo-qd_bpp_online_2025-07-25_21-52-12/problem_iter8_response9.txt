```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic priority combining waste reduction and adaptive penalties for balanced bin packing."""
    # Calculate potential waste reduction if item is added to each bin
    waste_reduction = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Penalize bins that would nearly fill with the item, using a dynamic penalty factor
    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** 0.5 * item / 50, 0)
    
    # Encourage using less full bins with a dynamic factor that adapts to remaining capacity
    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))
    
    # Combine waste reduction, capacity factor, and size penalty
    priorities = waste_reduction + capacity_factor - size_penalty
    
    return priorities
```
