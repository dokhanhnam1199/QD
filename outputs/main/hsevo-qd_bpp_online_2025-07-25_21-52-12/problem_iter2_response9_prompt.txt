{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Penalty for too much leftover space, decreased when the remaining space is minimal\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # High priority if adding this item leaves minimal space in the bin\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, bins_remain_cap - item, -np.inf)\n    # Give higher priority to bins that were less initially full (more empty space at the start)\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    # Combine these two factors into a priority score\n    return priority + relative_space_left_factor\n\n### Analyze & experience\n- Comparing (best) Heuristics 1st vs (worst) Heuristics 20th, we see that the best utilizes a balanced approach considering both space left and leftover capacity penalization, while the worst does not consider relative initial space effectively when combining factors. (Second best) Heuristics 9th vs (second worst) Heuristics 19th, we observe that the second best incorporates multiple priority factors, such as ward priority, compactness priority, and size penalties, leading to a more sophisticated decision-making process compared to simply combining close bins and remaining capacity. Comparing (1st) vs (2nd), (3rd) vs (6th), (7th) vs (8th), (12th) vs (15th), (16th) vs (17th), and (18th) vs (20th) we notice minimal variations in structure and logic, indicating a consistent theme in early entries. (4th) Heuristics vs (5th) Heuristics implement a similar sinusoidal function to prioritize tight bins but lack the adaptive considerations present in Heuristics 1st. Heuristics 14th attempts to balance initial full capacity with future waste reduction, but its linear scaling of relative space might not prioritize bins effectively. (3rd) Heuristics vs (17th) Heuristics highlights the effectiveness of measuring waste reduction relative to bin size and incorporating an encouragement factor for less full bins. Overall:\n- \n- **Keywords**: Multi-criteria optimization, dynamic weighting, cross-validation, adaptive learning\n- **Advice**: Implement sophisticated multi-criteria decision-making models that dynamically adjust weights of criteria based on real-time performance feedback. Incorporate adaptive learning mechanisms to refine heuristic parameters over iterations.\n- **Avoid**: Static prioritization schemes, infrequent updates, lack of feedback loops, non-adaptive penalties/encouragements\n- **Explanation**: Designing heuristics that dynamically respond to system state allows them to be more robust and adaptive. Multi-criteria optimization ensures a balanced consideration of all relevant factors, reducing the risk of over-emphasizing one aspect (like space left) at the expense of others (like future waste reduction).\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}