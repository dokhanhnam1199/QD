{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Penalty for too much leftover space, decreased when the remaining space is minimal\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    clip_min: float = 0.7454109253456525, \n    clip_max: float = 0.08524462244738007, \n    priority_weight: float = 0.06924679523930388) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and close fit prioritization with dynamic weighting and clipping.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, clip_min, clip_max)\n    priority = priority_fit + priority_weight * close_fit\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity with penalties for leftover space and rewards for close fits dynamically.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0.8957832532723333, 0.44260458707061934)\n    priority_weight = 0.32026293473465717\n    priority = priority_fit + priority_weight * close_fit\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes \n    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced \n    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Logistic balance to penalize overly large empty spaces, but gracefully\n    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process\n    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)\n    \n    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential\n    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)\n    \n    # Combining penalties and rewards dynamically\n    priority = can_fit * (penalty_factor + efficiency_reward)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    clip_min: float = 0.7454109253456525, \n    clip_max: float = 0.08524462244738007, \n    priority_weight: float = 0.06924679523930388) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and close fit prioritization with dynamic weighting and clipping.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, clip_min, clip_max)\n    priority = priority_fit + priority_weight * close_fit\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity with penalties for leftover space and rewards for close fits dynamically.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0.8957832532723333, 0.44260458707061934)\n    priority_weight = 0.32026293473465717\n    priority = priority_fit + priority_weight * close_fit\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced priority combining remaining capacity, leftover space, and closeness to item size.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    priority = priority_fit + 0.3 * close_fit\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced priority combining remaining capacity, leftover space, and closeness to item size.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    priority = priority_fit + 0.3 * close_fit\n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced priority combining remaining capacity, leftover space, and closeness to item size.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    priority = priority_fit + 0.3 * close_fit\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced priority combining remaining capacity, leftover space, and closeness to item size.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    priority = priority_fit + 0.3 * close_fit\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by penalizing leftover space and encouraging bins close to item size with dynamic weighting.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    dynamic_weight = 0.7\n    priority = priority_fit + dynamic_weight * close_fit\n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by penalizing leftover space and encouraging bins close to item size with dynamic weighting.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    dynamic_weight = 0.7\n    priority = priority_fit + dynamic_weight * close_fit\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, dynamic weighting, and penalties.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Dynamic weighting for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score with dynamic adjustments\n    priority = priority_fit + 0.5 * close_fit - size_penalty\n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, dynamic weighting, and penalties.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Dynamic weighting for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score with dynamic adjustments\n    priority = priority_fit + 0.5 * close_fit - size_penalty\n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balanced heuristic combining remaining capacity, dynamic weighting, and penalties.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority for bins that fit the item, penalizing leftover space\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    # Dynamic weighting for bins with capacity close to item size\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Penalty for large items in small remaining space\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)\n    # Combined priority score with dynamic adjustments\n    priority = priority_fit + 0.5 * close_fit - size_penalty\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines dynamic weighting, penalty for large items, and capacity factor for balanced priority.\"\"\"\n    \n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    \n    # Combine waste reduction with capacity factor and size penalty\n    priorities = waste_reduction + capacity_factor - size_penalty\n    \n    # Normalize priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines dynamic weighting, penalty for large items, and capacity factor for balanced priority.\"\"\"\n    \n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    \n    # Combine waste reduction with capacity factor and size penalty\n    priorities = waste_reduction + capacity_factor - size_penalty\n    \n    # Normalize priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines dynamic weighting, penalty for large items, and capacity factor for balanced priority.\"\"\"\n    \n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Penalize large items that would nearly fill a bin\n    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap ** item / 50, 0)\n    \n    # Encourage using less full bins with a sinusoidal function\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    \n    # Combine waste reduction with capacity factor and size penalty\n    priorities = waste_reduction + capacity_factor - size_penalty\n    \n    # Normalize priorities based on current state\n    priorities /= np.max(priorities, initial=1.0)\n    \n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by considering fit, leftover space, and dynamic adjustments.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = np.clip(bins_remain_cap - item, 0, 1)\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    capacity_factor = np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n    priority = priority_fit + 0.5 * capacity_factor * can_fit\n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}