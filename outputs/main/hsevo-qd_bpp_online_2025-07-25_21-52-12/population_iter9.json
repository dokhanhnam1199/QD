[
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and close fit prioritization with dynamic weighting and clipping.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, 0.8957832532723333, 0.44260458707061934)\n    priority_weight = 0.32026293473465717\n    priority = priority_fit + priority_weight * close_fit\n    return priority",
    "response_id": 2,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    clip_min: float = 0.7454109253456525, \n    clip_max: float = 0.08524462244738007, \n    priority_weight: float = 0.06924679523930388) -> np.ndarray:\n    \"\"\"\n    Combines remaining capacity and close fit prioritization with dynamic weighting and clipping.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority_fit = can_fit * (1 - (space_left / bins_remain_cap))\n    close_fit = np.clip(bins_remain_cap - item, clip_min, clip_max)\n    priority = priority_fit + priority_weight * close_fit\n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]