```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balanced heuristic combining remaining capacity, compactness, and size penalties."""
    # Sinusoidal prioritization for tight bins
    sinusoidal_priority = 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))
    # Ward priority adjusted for current item size
    ward_priority = (bins_remain_cap - item) / bins_remain_cap
    # Compactness priority to avoid greenfield bins
    compactness_priority = 1 - 1 / np.clip(bins_remain_cap, a_min=1e-3, a_max=None)
    # Size penalty for large items in small remaining space
    size_penalty = np.where(bins_remain_cap < 2 * item, bins_remain_cap**item / 50, 0)
    # Combined priority score
    return sinusoidal_priority + ward_priority + compactness_priority - size_penalty
```
