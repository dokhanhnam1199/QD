```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function employs a dynamic adaptation strategy that considers both the remaining capacity and the penalizes 
    large leftover space logarithmically to avoid overly simplistic linear penalties. It also introduces a nuanced 
    strategy that rewards bins with a balance between remaining capacity and potential for efficient future packings.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure that the item can actually fit into the bin
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    
    # Logistic balance to penalize overly large empty spaces, but gracefully
    # This avoids the rigidity of linear penalties and allows for a smoother decision-making process
    penalty_factor = 1 - np.log2(1 + space_left / (bins_remain_cap + 1e-9)) / np.log2(2)
    
    # Reward for bins that have efficiently packed, introducing a balance between current fit and future potential
    efficiency_reward = np.exp(-((bins_remain_cap - item) / bins_remain_cap) ** 2)
    
    # Combining penalties and rewards dynamically
    priority = can_fit * (penalty_factor + efficiency_reward)
    
    return priority
```
