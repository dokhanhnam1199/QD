```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design increases priority for bins that have more remaining capacity compared to the item to ensure better utilization.
    But we also want to avoid placing smaller items into bins that are nearly full to prevent scenarios where future larger items 
    cannot fit into any bins.
    
    Theoretical point of diminishing returns is applied. The more we fatten smaller items into small bins the less likelihood 
    of being able to enter a larger item later without incurring more bins.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Increase priority when remaining capacity is just enough higher than the item to make a decision
    return np.where(bins_remain_cap > item, (bins_remain_cap - item), np.NEGATIVE_INFINITY)
```
