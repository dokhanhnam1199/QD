```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins that are nearly full after packing the item,
    favoring those with a tighter fit, inspired by 'Almost Full Fit'.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate remaining capacity after fitting the item for bins that can accommodate it
    remaining_caps_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Assign higher priority to bins that will have minimal remaining capacity (tighter fit)
    # Adding a small constant (epsilon) prevents division by zero for perfectly filled bins.
    priorities[can_fit_mask] = 1.0 / (remaining_caps_after_fit + 1e-6)
    
    # Optionally, add a small bias to strongly prefer bins that are 'almost full'
    # This could be tuned. Here, we use a simple adjustment based on how "almost full" they are.
    # A higher value means closer to being "full" after packing.
    # This is inspired by the 'Almost Full Fit' concept, directly prioritizing minimal waste.
    
    return priorities
```
