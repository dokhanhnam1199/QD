```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    available_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(available_bins_mask):
        return priorities

    available_bins_cap = bins_remain_cap[available_bins_mask]

    # Heuristic 1: Prioritize bins that leave the smallest remaining capacity after packing (Best Fit like)
    # This encourages tighter packing.
    best_fit_scores = 1.0 / (available_bins_cap - item + 1e-9)

    # Heuristic 2: Prioritize bins that have a lot of remaining capacity but can still fit the item.
    # This aims to keep bins with moderate capacity open for future, potentially larger items,
    # preventing premature "fullness" of many bins. This is a form of lookahead.
    # We use a sigmoid-like function to give higher scores to bins with capacity in a certain range.
    # The range can be adjusted, here we target bins with remaining capacity between 'item' and 'item * 2'
    # with a peak around 'item * 1.5'.
    # The normalization factor `scale` and `center` can be tuned.
    scale = 1.0 / (bins_remain_cap.max() - bins_remain_cap.min() + 1e-9) # Normalize scale by total range
    center = item * 1.5 # Target for maximum priority
    lookahead_scores = 1.0 / (1.0 + np.exp(-scale * (available_bins_cap - center)))

    # Combine heuristics. We can use a weighted sum.
    # The weights can be adaptive or fixed. For simplicity, let's use fixed weights.
    # A higher weight for best_fit_scores suggests prioritizing tight fits.
    # A higher weight for lookahead_scores suggests prioritizing leaving more room.
    # Let's try a balance, with a slight bias towards best fit, but also considering lookahead.
    # The `+ 0.1` is a small baseline to ensure that even bins with very little remaining capacity (but fit)
    # get a non-zero score, preventing them from being completely ignored if lookahead scores are low.
    combined_scores = 0.7 * best_fit_scores + 0.3 * lookahead_scores + 0.1

    priorities[available_bins_mask] = combined_scores

    return priorities
```
