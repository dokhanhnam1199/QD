{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    available_bins_mask = bins_remain_cap >= item\n    available_bins_cap = bins_remain_cap[available_bins_mask]\n    \n    if available_bins_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    inverse_distances = available_bins_cap / (available_bins_cap - item + 1e-9)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[available_bins_mask] = inverse_distances\n    \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Adaptive, contextual, performance-driven, goal-alignment.\n*   **Advice:** Shift focus from *a priori* simplicity to *a posteriori* performance. Design heuristics that adapt to the problem's specific characteristics and performance feedback, rather than strictly adhering to pre-defined simple rules.\n*   **Avoid:** Over-reliance on \"tight fit\" or \"almost full\" metaphors. These are often proxies for underlying goals, not the goals themselves. Avoid assuming monotonic preferences without empirical validation.\n*   **Explanation:** True effectiveness comes from aligning heuristic behavior with measurable optimization outcomes. This means being willing to explore complexity if it demonstrably improves performance on specific objectives, while rigorously testing for robustness and edge-case handling.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}