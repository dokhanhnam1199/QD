```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins_mask = bins_remain_cap >= item
    
    if np.any(valid_bins_mask):
        remaining_capacities = bins_remain_cap[valid_bins_mask]
        
        # Calculate how "almost full" each valid bin would be after adding the item
        # We want to prioritize bins that will be "almost full" but not "too full"
        # A simple heuristic: prioritize bins that leave the smallest remaining capacity
        # after fitting the item, as long as it's not zero (exact fit).
        
        # Calculate the remaining capacity if the item fits
        potential_remaining = remaining_capacities - item
        
        # We want to select bins where potential_remaining is as small as possible,
        # but strictly greater than 0. A small positive number indicates "almost full".
        # A small positive number close to 0 means it's almost full.
        # We can invert this to get higher priorities for smaller remaining capacities.
        # Adding a small epsilon to avoid division by zero and to penalize exact fits slightly
        # by making them less ideal than an "almost full" bin.
        
        # Invert the positive remaining capacities and add a small epsilon for non-zero values.
        # Higher values mean less remaining capacity, thus more "almost full".
        inverted_remaining = 1.0 / (potential_remaining + 1e-9)
        
        # Assign these priorities to the corresponding valid bins
        priorities[valid_bins_mask] = inverted_remaining
        
        # Optional: Boost the priority of bins that result in a very small remaining capacity
        # to strongly encourage "almost full" scenarios.
        # For example, if remaining capacity is less than 10% of the original bin capacity.
        # This part can be tuned.
        original_capacities_for_valid_bins = bins_remain_cap[valid_bins_mask]
        nearly_full_mask = (potential_remaining / original_capacities_for_valid_bins) < 0.1
        priorities[valid_bins_mask][nearly_full_mask] *= 1.5 # Boost priority
        
        # Handle exact fits: an exact fit means potential_remaining is 0.
        # This might not be ideal for "almost full" strategy as it doesn't leave anything.
        # We can assign a moderate priority to exact fits, or even slightly lower than
        # bins that leave a very small positive remainder.
        exact_fit_mask = potential_remaining == 0
        priorities[valid_bins_bins_mask][exact_fit_mask] = np.max(priorities[valid_bins_bins_mask][~exact_fit_mask]) * 0.8 if np.any(~exact_fit_mask) else 1.0
        
    return priorities
```
