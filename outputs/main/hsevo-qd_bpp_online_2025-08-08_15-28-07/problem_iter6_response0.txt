```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    available_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)

    if not np.any(available_bins_mask):
        return priorities

    available_bins_remain_cap = bins_remain_cap[available_bins_mask]

    # Calculate the "waste" if the item is placed in each available bin
    waste = available_bins_remain_cap - item

    # Heuristic: Prioritize bins that result in less waste.
    # To encourage exploration and avoid getting stuck in local optima,
    # we can introduce a term that favors bins with slightly more remaining capacity
    # if the waste is similar. This is a form of diversification.
    # We use a logarithmic scale for waste to dampen the effect of very small wastes.
    # A small epsilon is added to avoid log(0).
    log_waste_penalty = np.log(waste + 1e-9)

    # Introduce a diversification factor: slightly prefer bins with more remaining capacity
    # among those with similar waste. This can be achieved by adding a small bonus
    # based on the remaining capacity itself.
    # The weight of this diversification term can be tuned.
    diversification_bonus = 0.1 * available_bins_remain_cap

    # Combine the waste consideration and diversification
    # We want to minimize waste, so we use the negative of log_waste_penalty.
    # Higher scores are better, so we add the diversification bonus.
    scores = -log_waste_penalty + diversification_bonus

    # Normalize scores to prevent extremely large or small values influencing selection too much
    # and to ensure they are comparable across different item/bin states.
    if scores.max() > scores.min():
        normalized_scores = (scores - scores.min()) / (scores.max() - scores.min())
    else:
        normalized_scores = np.ones_like(scores) * 0.5 # If all scores are the same

    # Assign the calculated priorities to the original bins array
    priorities[available_bins_mask] = normalized_scores

    return priorities
```
