```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities using a hybrid of Almost Full Fit and Best Fit.

    This heuristic prioritizes bins that can fit the item, favoring those
    that leave minimal remaining capacity (tightest fit).
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities # No bins can fit the item

    # Calculate remaining capacity for bins that can fit the item
    remaining_caps_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Assign higher priority to bins with smaller remaining capacity after fitting
    # This is the "Almost Full Fit" component, aiming for a tight pack.
    # Add a small epsilon to prevent division by zero and ensure fitting bins have non-zero priority.
    priorities[can_fit_mask] = 1.0 / (remaining_caps_after_fit + 1e-9)
    
    # Consider the "Best Fit" aspect by implicitly prioritizing smaller remaining capacities
    # which naturally leads to higher values in the inverse calculation.
    # For instance, if two bins can fit, and remaining capacities are 0.1 and 0.5,
    # their priorities will be ~10 and ~2, respectively, with the former being higher.
    
    return priorities
```
