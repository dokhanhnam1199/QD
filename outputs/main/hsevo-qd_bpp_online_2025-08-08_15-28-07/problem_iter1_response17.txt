```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    available_bins_mask = bins_remain_cap >= item
    available_bins_cap = bins_remain_cap[available_bins_mask]

    if available_bins_cap.size == 0:
        return priorities

    best_fit_scores = 1.0 / (available_bins_cap - item + 1e-9)
    first_fit_scores = 1.0 / (bins_remain_cap + 1e-9)

    combined_scores = best_fit_scores + 0.5 * first_fit_scores[available_bins_mask]

    priorities[available_bins_mask] = combined_scores

    return priorities
```
