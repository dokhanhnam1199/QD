```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit and Almost Full Fit for balanced packing.

    Prioritizes bins that are a tight fit (Best Fit) but also considers
    bins that leave minimal space after packing (Almost Full Fit),
    aiming for a good balance between immediate fit quality and future space.
    """
    if item <= 1e-9:
        # If item is negligible, any bin is fine. Prioritize less filled bins.
        return 1.0 / (bins_remain_cap + 1e-9)

    # Best Fit component: Prioritize bins with minimum remaining capacity after fitting.
    # We want to maximize -(bins_remain_cap - item), which is item - bins_remain_cap.
    # Using a small epsilon to avoid division by zero and prioritize exact fits.
    best_fit_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    best_fit_priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item) + 1e-6

    # Almost Full Fit component: Prioritize bins that leave minimal space after fitting.
    # This means maximizing 1 / (remaining_capacity_after_item + epsilon)
    almost_full_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_caps_after_fit = bins_remain_cap[can_fit_mask] - item
    # Add a small value to avoid division by zero and ensure positive scores.
    almost_full_priorities[can_fit_mask] = 1.0 / (remaining_caps_after_fit + 1e-6)

    # Combine the heuristics. A simple additive combination can work.
    # We normalize them to prevent one heuristic from dominating due to scale.
    # Normalization is tricky without knowing the typical ranges.
    # For simplicity, let's use a weighted sum. Weights can be tuned.
    # Here, we give equal weight initially.

    combined_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Apply the combined scores only to bins that can fit the item.
    combined_priorities[can_fit_mask] = (best_fit_priorities[can_fit_mask] + almost_full_priorities[can_fit_mask]) / 2.0

    # Ensure bins that cannot fit the item have zero priority.
    # This is already handled by initializing with zeros and only updating fitting bins.

    return combined_priorities
```
