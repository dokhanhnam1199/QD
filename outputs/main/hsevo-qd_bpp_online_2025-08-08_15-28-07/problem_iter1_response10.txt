```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]
    
    if valid_bins_remain_cap.size > 0:
        # Prioritize bins with minimal remaining capacity that can fit the item
        # This is a variation of First Fit Decreasing idea applied to online setting
        # Larger negative values mean higher priority
        priorities[valid_bins_mask] = valid_bins_remain_cap - item
        
        # Add a small penalty to bins that would be perfectly filled to avoid fragmentation
        # if they are not the absolute best fit, encouraging slightly looser fits if possible
        perfect_fit_mask = (valid_bins_remain_cap - item) == 0
        priorities[valid_bins_mask][perfect_fit_mask] -= 1e-6 # Small penalty
        
    return priorities
```
