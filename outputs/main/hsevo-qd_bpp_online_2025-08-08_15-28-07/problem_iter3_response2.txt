```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    available_bins_mask = bins_remain_cap >= item
    
    if not np.any(available_bins_mask):
        return np.zeros_like(bins_remain_cap)

    available_bins_remain_cap = bins_remain_cap[available_bins_mask]
    
    
    remaining_capacity_after_placement = available_bins_remain_cap - item
    
    
    priorities = np.zeros_like(bins_remain_cap)
    
    
    empty_bin_score = 1e6 
    
    
    for i, (cap, mask) in enumerate(zip(available_bins_remain_cap, available_bins_mask[available_bins_mask])):
        if mask: 
            if np.isclose(cap, item):
                priority = empty_bin_score 
            else:
                
                priority = 1.0 / (remaining_capacity_after_placement[i] + 1e-9) + (available_bins_remain_cap[i] / (item + 1e-9))
            priorities[available_bins_mask][i] = priority

    return priorities
```
