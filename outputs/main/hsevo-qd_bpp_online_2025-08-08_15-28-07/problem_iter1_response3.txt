```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate the remaining capacity after adding the item for fitting bins
    remaining_caps_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # The priority is higher for bins that will be almost full after adding the item
    # A small positive value is added to ensure that fitting bins have higher priority than non-fitting bins.
    # The degree of "almost full" is inversely proportional to the remaining capacity.
    # A smaller remaining capacity leads to a higher priority.
    priorities[can_fit_mask] = 1.0 / (remaining_caps_after_fit + 1e-6) # Add epsilon to avoid division by zero
    
    return priorities
```
