import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0006707479169137588) -> np.ndarray:
    available_bins_mask = bins_remain_cap >= item
    available_bins_cap = bins_remain_cap[available_bins_mask]
    
    if available_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    inverse_distances = available_bins_cap / (available_bins_cap - item + epsilon)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[available_bins_mask] = inverse_distances
    
    return priorities
