```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'Almost Full Fit' with a 'Best Fit' tendency.
    Prioritizes bins that leave minimal space after packing, but also favors
    bins that were already closer to full before packing, aiming for better overall distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate priorities
    if np.any(can_fit_mask):
        fitting_bins_cap = bins_remain_cap[can_fit_mask]

        # Calculate 'Almost Full Fit' component: higher priority for less remaining space
        # Add epsilon to avoid division by zero
        almost_full_priority = 1.0 / (fitting_bins_cap - item + 1e-6)

        # Calculate a 'Best Fit' component: higher priority for bins that are already closer to full
        # This is essentially the inverse of the remaining capacity before packing
        best_fit_priority = 1.0 / (fitting_bins_cap + 1e-6)

        # Combine the two components. A simple multiplicative combination is used here.
        # This rewards bins that are both 'almost full' after packing and 'fuller' before packing.
        combined_priority = almost_full_priority * best_fit_priority

        # Assign the combined priorities to the appropriate bins
        priorities[can_fit_mask] = combined_priority

    return priorities
```
