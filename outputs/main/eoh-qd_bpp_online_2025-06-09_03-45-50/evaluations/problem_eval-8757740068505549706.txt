def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority to bins based on a combination of remaining capacity and the item size, favoring bins that can accommodate the item with minimal wasted space, while also considering how full the bin already is.}"""
  priorities = []
  for bin_cap in bins_remain_cap:
    if bin_cap >= item:
      # Prioritize based on remaining capacity after packing the item
      remaining_after_pack = bin_cap - item
      # Combine remaining capacity with how full the bin already is
      priority = (item / bin_cap) - remaining_after_pack
      priorities.append(priority)
    else:
      priorities.append(-1) # Assign -1 if item doesn't fit
  return priority
