def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on the remaining capacity and item size, favoring bins that can accommodate the item with minimal remaining space and avoiding bins that would be overfilled.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(1 / (cap - item + 1e-9))  # Favor smaller remaining space
        else:
            priority.append(-1e9)  # Penalize overfilling
    return priority
