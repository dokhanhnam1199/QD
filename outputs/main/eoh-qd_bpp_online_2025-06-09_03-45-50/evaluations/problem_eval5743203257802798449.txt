def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a score derived from the ratio of item size to remaining capacity, favoring bins where the item fills a significant portion of the remaining space but also penalizing those that are too close to full to avoid fragmentation.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap
            # Favor higher fill ratios, but penalize if the bin is almost full (to avoid tiny gaps)
            if cap - item < 0.1:
                priority = -500  # Heavily penalize almost full bins
            else:
                priority = fill_ratio
        else:
            priority = -1000 # Very low priority if item doesn't fit

        priorities.append(priority)
    return priority
