def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering both the waste created (remaining capacity after packing) and the percentage of the bin filled by the item, rewarding bins with low waste and high fill percentage.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            fill_percentage = item / cap
            priority = fill_percentage / (1 + waste)
            priorities.append(priority)
        else:
            priorities.append(-1)
    return priority
