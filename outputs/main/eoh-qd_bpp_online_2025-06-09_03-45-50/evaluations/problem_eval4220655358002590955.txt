def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combination of remaining capacity relative to item size and a penalty for bins already containing items, aiming to balance fitting items well and distributing items across bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fit_ratio = item / cap
      if cap < 1:
          cap = 1 #avoid division by zero
      empty_penalty = (1 if cap == bins_remain_cap[0] else 0.1)  # Penalize empty bins less if any other bins are occupied 
      priority_score = fit_ratio + empty_penalty
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
