def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin by considering the ratio of item size to remaining capacity, favoring bins where the item fills a significant portion of the remaining space, but penalizing bins that cannot accommodate the item or would be left with minimal space after packing.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      if cap - item < 0.1: #if the remaining capacity is less than 0.1, give it a negative priority
        priorities.append(-500)
      else:
        priorities.append(fill_ratio)
    else:
      priorities.append(-1000)
  return priority
