def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin by considering the ratio of the item size to the square of the remaining capacity, scaled by an exponential factor penalizing nearly full bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Emphasize fitting in bins with more remaining capacity
      # Penalize bins that become too full after placing the item
      priority_score = (item / (cap**2)) * (2.718**((cap - item)/cap)) #e^((cap-item)/cap)
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
