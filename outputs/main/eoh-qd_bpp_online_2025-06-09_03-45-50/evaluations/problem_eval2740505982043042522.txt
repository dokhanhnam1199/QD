def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the percentage of wasted space after packing the item, favoring bins that minimize waste relative to their original capacity.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after_pack = cap - item
      # Calculate the percentage of wasted space relative to the bin's original capacity (assumed to be 100)
      waste_percentage = (remaining_after_pack / 100) * 100

      # Assign priority based on the inverse of the waste percentage. Lower waste means higher priority.
      # Using a scaling factor to ensure reasonable priority values.

      score = 100 - waste_percentage # Adjust the base score as needed.

      priority.append(score)

    else:
      priority.append(-1)  # Item doesn't fit, so assign lowest priority.

  return priority
