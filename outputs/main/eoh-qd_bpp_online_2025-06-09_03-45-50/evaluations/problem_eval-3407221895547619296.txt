def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and how well the item fits, favoring bins that are neither too full nor too empty after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fit_ratio = item / cap
      remaining_ratio = (cap - item) / cap

      # Balance between fit (item size / bin size) and remaining capacity
      score = 0.7 * fit_ratio + 0.3 * (1 - remaining_ratio)

      priority.append(score)
    else:
      priority.append(-1)  # Invalid bin
  return priority
