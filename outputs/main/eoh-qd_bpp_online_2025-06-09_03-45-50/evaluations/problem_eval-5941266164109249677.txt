def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores based on the wasted space if the item is placed in each bin, giving preference to bins where the remaining capacity is closest to zero after placement, while penalizing bins where the item doesn't fit.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)  # Assign a very low priority if the item doesn't fit
        else:
            remaining_space = cap - item
            priority.append(1 - remaining_space)  # Prioritize bins with minimal remaining space after placing the item
    return priority
