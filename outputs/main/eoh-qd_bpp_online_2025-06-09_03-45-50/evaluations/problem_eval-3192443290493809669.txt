def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the wasted space percentage relative to the bin size and remaining capacity, penalizing higher percentages.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      wasted_percentage = wasted_space / 1.0  # Assuming bin size is 1.0
      priority = 1 - wasted_percentage  # Higher remaining capacity is better
      # Add a small bonus for using more of the bin
      priority += (1 - wasted_space) * 0.1

      priorities.append(priority)
    else:
      priorities.append(-float('inf'))  # Assign negative infinity if item doesn't fit
  return priority
