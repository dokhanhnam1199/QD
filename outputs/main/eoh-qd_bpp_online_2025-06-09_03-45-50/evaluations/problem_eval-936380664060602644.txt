def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores based on both the waste created if the item is placed in the bin and the current fullness of the bin, favoring bins that minimize waste and are already relatively full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)
        else:
            waste = cap - item
            fullness = 1 - (cap / 100)  # Assuming bin size is 100
            priority.append(fullness - (waste / 100))
    return priority
