def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the relative wasted space after packing, normalized by the item size, with a penalty for bins that would become nearly full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after_pack = cap - item
      
      # Calculate wasted space relative to item size
      wasted_ratio = remaining_after_pack / item if item > 0 else remaining_after_pack # Avoid division by zero if item is zero.

      # Base priority is inversely proportional to wasted ratio (lower waste is better). Add a constance to avoid negative numbers
      base_priority = 1 - wasted_ratio 

      # Penalty for bins that are becoming nearly full. 
      if remaining_after_pack < 0.05:  # Adjust threshold as needed (5% of total capacity for example)
          penalty = 0.5 #tune
      else:
          penalty = 0

      priority.append(base_priority - penalty)
    else:
      priority.append(-100) # Very low priority if item doesn't fit.
  return priority
