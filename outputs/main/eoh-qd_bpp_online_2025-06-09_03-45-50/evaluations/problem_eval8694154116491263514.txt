def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins with remaining capacity close to the item size, while also discouraging bins that would become nearly full after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Prioritize bins with remaining capacity close to item size.
      priority_diff = abs(cap - item)
      base_priority = -priority_diff  # Smaller difference is better

      # Discourage bins that would become nearly full after packing the item.
      remaining_after_pack = cap - item
      if remaining_after_pack < (sum(bins_remain_cap) / len(bins_remain_cap) / 5):
          penalty = (sum(bins_remain_cap) / len(bins_remain_cap)) * 1 # Increased penalty
      else:
          penalty = 0

      priority.append(base_priority - penalty)
    else:
      priority.append(-1)  # Impossible to pack
  return priority
