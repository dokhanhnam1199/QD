def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a score that combines remaining capacity and item fit, favoring bins that are just large enough to hold the item and penalizing those with excessive leftover space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority =  item / (cap + 1e-9) # Score based on how full the bin would be
      priorities.append(priority)
    else:
      priorities.append(-1)  # Invalid bin if not enough capacity
  return priority
