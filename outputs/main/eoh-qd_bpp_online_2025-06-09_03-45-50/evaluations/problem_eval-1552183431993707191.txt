def priority_v2(item, bins_remain_cap):
    """{This algorithm favors bins with remaining capacity closest to the item size, adjusted by a bin fullness factor, aiming to minimize wasted space while considering existing bin utilization.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)
        else:
            waste = cap - item
            fullness_factor = 1 - (cap / 1)  # Assuming bin capacity is 1
            priority_score = 1 / (1 + waste) + fullness_factor
            priority.append(priority_score)
    return priority
