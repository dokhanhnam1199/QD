def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a score to each bin based on the wasted space if the item is placed in that bin, with a bonus for bins that are nearly full after packing and a penalty for bins that would be left mostly empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      bin_size = 100  # Assuming bin size is 100. Adjust as needed.
      fullness_ratio = (bin_size - wasted_space) / bin_size

      # Bonus for nearly full bins
      fullness_bonus = 0
      if fullness_ratio > 0.8:
        fullness_bonus = 20 * (fullness_ratio - 0.8)
      
      #Penalty for wasted space
      wasted_space_penalty = 0
      if fullness_ratio < 0.2:
        wasted_space_penalty = 50 * (0.2 - fullness_ratio)

      score = 100 - wasted_space + fullness_bonus - wasted_space_penalty
      priority.append(score)
    else:
      priority.append(-1)
  return priority
