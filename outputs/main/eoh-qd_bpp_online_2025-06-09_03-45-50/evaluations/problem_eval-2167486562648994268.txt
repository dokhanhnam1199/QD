def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores by considering the ratio of item size to remaining capacity, penalizing bins with very little remaining space after placement and rewarding bins where the item fills a significant portion of the remaining space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)  # Assign a very low priority if the item doesn't fit
        else:
            remaining_after_fit = cap - item
            if remaining_after_fit < 0.1: # Penalize if very little space is left (threshold of 0.1)
                priority.append(cap*item) #reward for being able to use the space up
            else:
                 priority.append(item/cap)  # Higher priority if item fills a significant portion of the bin
    return priority
