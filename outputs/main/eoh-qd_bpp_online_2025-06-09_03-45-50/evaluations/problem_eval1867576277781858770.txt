def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority score based on the absolute difference between the item size and the remaining bin capacity, favoring bins where the remaining capacity is close to the item size but large enough to fit.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap < item:
      priority.append(-1)
    else:
      priority.append(1 / (abs(cap - item) + 0.00001)) 
  return priority
