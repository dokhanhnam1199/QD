def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority scores to bins based on the percentage of remaining capacity used if the item is placed in the bin, penalized by the relative wasted space.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            utilization = item / (cap + 1e-6)  # Percentage of bin utilization
            waste_penalty = wasted_space / (item + 1e-6) # Relative wasted space
            priority = utilization - waste_penalty # Utilization penalized by relative waste
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign a negative priority if the item doesn't fit
    return priority
