def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores based on the remaining capacity of bins after hypothetically placing the item, favoring bins where the item almost fills the bin and penalizing bins that are either too full or too empty after placement.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)
        else:
            new_cap = cap - item
            if new_cap > 0.5: # If remaining cap is too big
                priority.append(0.1)
            else:
                priority.append(1- new_cap)
    return priority
