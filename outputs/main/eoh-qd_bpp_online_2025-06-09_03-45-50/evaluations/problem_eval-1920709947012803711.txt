def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on the remaining capacity and item size, favoring bins with remaining capacity closest to the item size and penalizing bins that are too full or too empty.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority = 1 / (abs(cap - item) + 0.1)  # Favor bins where remaining capacity is close to item size
        else:
            priority = -1000  # Penalize bins that cannot accommodate the item
        priorities.append(priority)
    return priority
