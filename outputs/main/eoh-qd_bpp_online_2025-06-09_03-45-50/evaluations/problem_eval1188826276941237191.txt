def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on how close the item size is to a target fill level within each bin, penalizing both underutilization and over-filling.}"""
    priorities = []
    bin_count = len(bins_remain_cap)
    target_fill = sum(bins_remain_cap) / bin_count # Calculating the average target fill level.
    for cap in bins_remain_cap:
        if cap >= item:
            fill_level = cap - item
            # Calculate the absolute difference between the fill level and the target fill.
            diff = abs(fill_level - target_fill)
            # Assign priority based on the inverse of the difference, penalizing deviations from the target. Add a small number to avoid division by zero.
            priority = 1.0 / (diff + 1e-6)
        else:
            priority = -1  # Assign a negative priority if the item doesn't fit
        priorities.append(priority)
    return priority
