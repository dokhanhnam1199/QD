def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on the utilization rate if the item were placed in the bin, penalizing bins that would result in very low or very high utilization.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = item / cap
            if utilization >= 0.1 and utilization <= 0.95: # Prefer utilization between 10% and 95%
                priority.append(utilization)
            else:
                priority.append(-abs(utilization - 0.5)) # Penalize low/high utilization, centered around 0.5
        else:
            priority.append(-1000)  # Very low priority if item doesn't fit

    return priority
