def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combination of fill percentage and a penalty for creating bins that are too empty, favoring bins that are already relatively full without leaving excessive empty space.}"""
  priorities = []
  for capacity in bins_remain_cap:
    if capacity >= item:
      fill_percentage = item / 100  # Assuming bin size is 100
      remaining_capacity = capacity - item

      # Penalize bins that would have too much remaining capacity after packing
      empty_penalty = 0
      if remaining_capacity > 50: #Adjust this threshold as needed
          empty_penalty = (remaining_capacity - 50) * 0.2 #Apply the penalty

      priority = fill_percentage * 100 - empty_penalty # Combine fill percentage and penalty

      priorities.append(priority)
    else:
      priorities.append(-1000)  # Item doesn't fit, assign low priority
  return priority
