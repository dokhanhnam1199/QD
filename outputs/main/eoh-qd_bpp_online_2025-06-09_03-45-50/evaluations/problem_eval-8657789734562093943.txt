def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity fit and a penalty for bins that are too full after packing the current item, then returns an array containing the priority scores for each bin.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste_ratio = (cap - item) / cap
            priority_score = 1 - waste_ratio - (waste_ratio**2 if waste_ratio > 0.5 else 0) # Favor less waste
            priority.append(priority_score)
        else:
            priority.append(-1000)  # Very low priority if item doesn't fit
    return priority
