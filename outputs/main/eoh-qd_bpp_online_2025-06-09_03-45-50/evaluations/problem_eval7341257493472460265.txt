def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on maximizing the space utilization while discouraging excessive fragmentation, with a larger penalty for bins nearing full capacity after item placement.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      space_utilization = item / 1 if item > 0 else 0.001 #avoid item =0
      post_fill_ratio = (cap - item) / 1 if (cap - item) > 0 else 0.001 #avoid (cap-item) =0
      fragmentation_penalty =  1/(post_fill_ratio +0.001)
      priority_score = space_utilization - 0.5*fragmentation_penalty
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
