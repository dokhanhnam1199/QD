def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combined score considering the wasted space if the item is placed and the relative fullness of the bin after placement, favouring bins that lead to lower wasted space and higher overall fullness.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      fullness_after = (1 - (cap - item)) #Assuming bin size is 1
      
      # Combine wasted space and fullness (lower waste, higher fullness is better)
      score = fullness_after- wasted_space #Here we give the same weights to fullness and waste
      priority.append(score)
    else:
      priority.append(-1)  # Invalid bin
  return priority
