def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering a non-linear combination of remaining capacity and item fit, penalizing both nearly full and nearly empty bins after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fit_ratio = item / cap
      remaining_capacity = cap - item

      # Non-linear combination with penalty for extreme remaining capacities.
      # Use a quadratic penalty to heavily discourage near-full and near-empty bins.
      penalty_factor = 1 - ((remaining_capacity / (cap/2)) - 1)**2 if cap > 0 else 0

      #Ensure the penalty factor is within the range of [0,1]
      penalty_factor = max(0,min(1, penalty_factor))

      score = fit_ratio * penalty_factor
      priority.append(score)
    else:
      priority.append(-1)  # Invalid bin
  return priority
