def priority_v2(item, bins_remain_cap):
    """{This algorithm combines the concepts of both algorithms by giving bins with remaining capacity slightly greater than the item a higher priority, encouraging efficient use of space while still accommodating the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority = (1 / (cap - item + 0.1)) * (item / (cap + 0.1))  # Prioritize bins with slightly more capacity than the item, weighted by item size relative to bin capacity
        else:
            priority = -1000
        priorities.append(priority)
    return priority
