def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores based on the remaining capacity of bins after hypothetically placing the item and favors bins with higher utilization and avoids bins where the item won't fit.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)  # Assign a very low priority if the item doesn't fit
        else:
            new_cap = cap - item
            utilization = (1 - (new_cap / 1)) # Assuming bin capacity is 1
            priority.append(utilization)
    return priority
