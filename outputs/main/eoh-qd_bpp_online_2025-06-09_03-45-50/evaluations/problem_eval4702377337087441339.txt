def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted combination of space utilization and the absolute difference between the item size and the remaining bin capacity, favoring bins where the item nearly fills the remaining space but doesn't overfill.}"""
  priority = []
  for cap in bins_remain_cap:
    if item <= cap:
      utilization = item / cap
      diff = abs(cap - item)
      normalized_diff = diff / cap
      priority_score = 0.6 * utilization + 0.4 * (1 - normalized_diff)
      priority.append(priority_score)
    else:
      priority.append(-1)
  return priority
