def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the ratio of item size to remaining capacity, penalizing bins that would become nearly full after packing the item and rewarding bins with close matches.}"""
  priorities = []
  for capacity in bins_remain_cap:
    if capacity >= item:
      ratio = item / capacity
      remaining_after_pack = capacity - item
      
      # Penalty for bins that become nearly full (high fill ratio)
      if remaining_after_pack <= capacity * 0.1:
        penalty = 1 / remaining_after_pack if remaining_after_pack > 0 else 1000 #Big penalty when becoming completely full
      else:
        penalty = 0

      priority = ratio - penalty
      priorities.append(priority)
    else:
      priorities.append(-1000)  # Very low priority if the bin is too small

  return priority
