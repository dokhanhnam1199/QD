def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns a priority score to each bin based on how well the item fits, prioritizing bins where the remaining capacity after packing the item is close to a certain threshold and penalizing bins that would be left with too much or too little space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after_pack = cap - item
      # Define a target remaining capacity (e.g., 20% of the bin size)
      target_remaining = 0.2 * 100  # Assuming bin size is 100. Adjust as needed.

      # Calculate the difference between the remaining capacity and the target
      diff = abs(remaining_after_pack - target_remaining)

      # Assign priority based on how close the remaining capacity is to the target.
      # Smaller diff means higher priority.  Add a base score and scale down the difference.
      score = 100 - diff #Adjust the base score as needed.

      priority.append(score)

    else:
      priority.append(-1)  # Item doesn't fit, so assign lowest priority.

  return priority
