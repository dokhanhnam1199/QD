def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a penalty system, penalizing bins that are too full or too empty after packing the item, and rewarding bins with a moderate fill level.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_capacity = cap - item
      # Define a penalty based on how full the bin would be after packing
      if remaining_capacity == 0:
          penalty = 0.1  # Slightly penalize completely full bins
      elif remaining_capacity / 1.0 > 0.7:  # Assuming bin size is normalized to 1.0 for simplicity
          penalty = 0.8  # Heavily penalize bins with lots of space left
      else:
          penalty = 0.0

      # Assign priority based on available capacity and penalty. Lower penalty is preferred
      score = cap - penalty
      priority.append(score)
    else:
      priority.append(-1)  # Invalid bin
  return priority
