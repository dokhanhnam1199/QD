def priority_v3(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on the waste space after placing the item in the bin, penalizing bins with either too much or too little remaining capacity, giving a higher score for near perfect fits.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_capacity = cap - item
      waste_ratio = remaining_capacity / 1.0  # Assuming bin capacity is normalized to 1

      # Penalize waste, more penalty for extreme waste values
      score = 1 - (waste_ratio)**2 

      priority.append(score)
    else:
      priority.append(-1)  # Invalid bin
  return priority
