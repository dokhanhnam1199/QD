{
     "algorithm": "This algorithm calculates a priority score for each bin based on remaining capacity and item size, favoring bins that can accommodate the item snugly without excessive waste, and then returns an array containing the priority scores for each bin.",
     "code": "def priority_v2(item, bins_remain_cap):\n    \"\"\"{This algorithm calculates a priority score for each bin based on remaining capacity and item size, favoring bins that can accommodate the item snugly without excessive waste, and then returns an array containing the priority scores for each bin.}\"\"\"\n    priority = []\n    for cap in bins_remain_cap:\n        if cap >= item:\n            priority.append(1 / (cap - item + 0.00001))  # Inversely proportional to wasted space\n        else:\n            priority.append(-1000)  # Very low priority if item doesn't fit\n\n    return priority",
     "objective": 4.04866,
     "other_inf": null,
     "SLOC": 9.0,
     "cyclomatic_complexity": 3.0,
     "halstead": 46.50699332842308
}