```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled while penalizing bins that exceed a certain capacity threshold.
    It favors early bins slightly, balances via near-full preference, and avoids
    early disqualification for balanced and effective packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    max_cap = np.max(bins_remain_cap)
    half_full_threshold = 0.5 * max_cap

    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item

    # Base priority based on remaining capacity
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)

    # Penalize overfills harshly
    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)

    # Favor early bins slightly
    gradual_degradation = np.arange(len(bins_remain_cap)) * -0.01
    priority_scores += gradual_degradation

    # Favor bins that are near full but not over half
    priority_scores = np.where((bins_remain_cap > half_full_threshold) & (bins_remain_cap <= 0.9 * max_cap), priority_scores + 10, priority_scores)

    # Avoid early disqualification for bins that are almost full
    priority_scores = np.where((bins_remain_cap <= half_full_threshold) & (bins_remain_cap >= item), priority_scores + 1, priority_scores)

    return priority_scores
```
