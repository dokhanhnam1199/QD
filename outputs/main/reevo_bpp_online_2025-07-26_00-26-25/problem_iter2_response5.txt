```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and aims to reduce
    fragmentation by preferring bins that are almost full but not avoiding bins
    that are already half full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Calculate priority scores for bins that can fit the item
    valid_bins = new_remain_cap >= 0
    priority_scores[valid_bins] = -new_remain_cap[valid_bins]
    
    # Encourage bins that are at least 50% full but not full to take the item
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    already_half_full = bins_remain_cap < half_full_threshold
    priority_scores[valid_bins & already_half_full] += 0.1 * (-new_remain_cap[valid_bins & already_half_full])
    
    # Penalize bins that are already full or cannot fit the item
    priority_scores[new_remain_cap < 0] = -np.inf
    
    return priority_scores
```
