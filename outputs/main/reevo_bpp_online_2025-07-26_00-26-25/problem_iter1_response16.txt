```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used strategically. The priority is high if there is enough remaining
    capacity to add the item and if it would help keep the bins balanced.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)

    # Calculate how well each bin size minus item size aligns with the smallest remaining bin size
    bins_remain_after_item = bins_remain_cap - item
    valid_bins = bins_remain_after_item >= 0  # Only consider bins that can fit the item

    if np.any(valid_bins):
        # Smallest remaining capacity after item could be placed
        min_remaining_capacity_after = np.min(bins_remain_after_item[valid_bins])
        
        # Percentage of bins that can fit the item well (with minimal disjoint with median)
        median_remaining_capacity = np.median(bins_remain_cap)
        normalized_discrepancy = np.abs(bins_remain_after_item - median_remaining_capacity)
        small_discrepancy_threshold = median_remaining_capacity * 0.2
        small_discrepancy_bins = normalized_discrepancy < small_discrepancy_threshold

        # Prioritize bins that fit the item and have lower discrepancy to the median capacity
        priority_scores = valid_bins.astype(float) * (
            1 - (bins_remain_after_item - min_remaining_capacity_after) / median_remaining_capacity
        ) + small_discrepancy_bins.astype(int) * 0.1  # Slightly increase priority for jetsam bins

    return priority_scores
```
