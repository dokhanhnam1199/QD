```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used logic to make a decision, emphasizing partially filled bins to avoid
    potential small fragmentations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that cannot fit the item with a very low score
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Prioritize bins with less remaining capacity (first-fit decreasing approach)
    capacity_weight = (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)
    
    # Decrement priority for each bin that already has items by count of filled bins
    filled_bins_discount = np.where(bins_remain_cap != np.ones_like(bins_remain_cap), 0.1, 0.0)
    
    # Give preference to bins that have smaller unused space after placing the item to reduce fragmentation
    subsequent_fragmentation = (bins_remain_cap - item) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    
    priority_scores = can_fit * (capacity_weight * 0.5 - filled_bins_discount + subsequent_fragmentation * 0.5)
    
    return priority_scores
```
