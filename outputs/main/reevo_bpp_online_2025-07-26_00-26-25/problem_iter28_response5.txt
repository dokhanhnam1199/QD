```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are almost full while avoiding overfills.
    It also avoids overly full bins to maintain diversity and ensures small items are not packed into nearly full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score for bins that can fit the item
    priority_scores = np.where(new_remain_cap >= 0, -new_remain_cap, -np.inf)
    
    # Penalize overfills harshly
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Avoid bins that are already more than 75% full to maintain diversity
    max_initial_cap = np.max(bins_remain_cap + item)
    threshold = 0.75 * max_initial_cap
    priority_scores[bins_remain_cap < threshold] *= 1.5
    
    # Slightly favor small items not going into very nearly full bins
    priority_scores[new_remain_cap <= 0.1 * max_initial_cap] *= 0.8
    
    return priority_scores
```
