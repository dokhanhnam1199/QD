```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation inversely prioritizes bins with low remaining capacity,
    penalizes overfills harshly, and slightly favors early bins for balanced packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Priority score inversely proportional to remaining capacity
    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1), -np.inf)
    
    # Penalize overfills harshly
    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)
    
    # Slightly favor early bins by adding a small bonus
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores += bin_indices * 0.01  # Adjust coefficient as needed
    
    return priority_scores
```
