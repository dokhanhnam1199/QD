{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies scoring by heavily penalizing overfills and\n    targeting bins nearing fullness to encourage better compactness and efficiency.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Harshly penalize overfills\n    overfill_penalty = np.where(new_remain_cap < 0, -np.inf, 0)\n    \n    # Calculate the priority score: higher score if the remaining capacity is small (i.e., almost full)\n    priority_scores = -new_remain_cap + overfill_penalty\n    \n    # Penalize bins that are already less than 10% empty to avoid them taking more small items\n    priority_scores[new_remain_cap < 0.1 * np.max(bins_remain_cap)] = -np.inf\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins by inverse remaining capacity, penalizes\n    overfills heavily, and favors early bins slightly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Calculate the priority score: higher for smaller remaining capacity\n    priority_scores = -new_remain_cap\n    \n    # Penalize overfills heavily\n    priority_scores[new_remain_cap < 0] = -np.inf\n    \n    # Favor early bins slightly\n    early_bin_bonus = 1 / (np.arange(len(bins_remain_cap)) + 1)\n    priority_scores += early_bin_bonus\n    \n    return priority_scores\n\n[Reflection]\nPrioritize compact bins, penalize overfills, and slightly favor early bins to improve bin utilization dynamically.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}