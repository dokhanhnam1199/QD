```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. It aims to fill the second
    smallest gaps to encourage less fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    import numpy as np
    
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and ensure feasibility
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Give a clear preference to bins that can fit the item at all
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] -= 2
    
    # Encourage the second smallest gaps (filling larger remaining spaces to encourage less fragmentation)
    if np.any(can_fit_item_mask):
        # Filter remaining capacities where the item can fit
        remaining_capacities = bins_remain_cap[can_fit_item_mask]
        # Find the second smallest gap
        sorted_indices = np.argsort(remaining_capacities)
        if len(sorted_indices) > 1:
            second_smallest_index = sorted_indices[1]
            # Boost the priority of the bin with the second smallest gap
            priority[can_fit_item_mask][second_smallest_index] += 1

    return priority
```
