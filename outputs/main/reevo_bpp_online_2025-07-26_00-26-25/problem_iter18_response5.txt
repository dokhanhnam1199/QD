```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins by an inverse function of the remaining capacity,
    heavily penalizes overfills, and slightly favors early bins to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Start with a base priority score inversely proportional to remaining capacity
    # If adding the item overfills the bin, assign a very low priority score
    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1e-6), -np.inf)
    
    # Favor early bins slightly to reduce fragmentation
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores += 0.1 * (1 / (bin_indices + 1))
    
    return priority_scores
```
