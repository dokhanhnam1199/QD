```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and penalizes bins that are
    more than half full. It favors bins that are almost filled to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize overfills harshly by setting their score to a very low negative number
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Favor early bins by slightly increasing their priority scores
    num_bins = len(bins_remain_cap)
    early_bin_bonus = np.linspace(0, 0.1, num_bins)
    priority_scores += early_bin_bonus
    
    # Penalize bins that are more than half full
    bin_capacity = np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap < 0.5 * bin_capacity, priority_scores, priority_scores - 0.5)
    
    return priority_scores
```
