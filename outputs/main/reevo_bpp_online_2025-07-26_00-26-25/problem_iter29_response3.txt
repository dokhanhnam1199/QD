```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled while penalizing bins that exceed a certain capacity threshold.
    It favors early bins slightly, balances via near-full preference, and avoids
    early disqualification for balanced and effective packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    max_cap = np.max(bins_remain_cap)
    half_full_threshold = 0.5 * max_cap

    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item

    # Base priority is the inverse of remaining capacity, penalize overfills harshly
    base_priority = np.where(new_remain_cap >= 0, -1 / (new_remain_cap + 1e-6), -np.inf)

    # Penalize bins that are already more than half full to avoid them taking more small items
    base_priority = np.where(bins_remain_cap <= half_full_threshold, base_priority, -np.inf)

    # Favor early bins slightly
    bin_indices = np.arange(len(bins_remain_cap))
    early_bin_bonus = 0.1 * (max_cap - bins_remain_cap) / max_cap

    # Calculate the final priority score
    priority_scores = base_priority + early_bin_bonus

    return priority_scores
```
