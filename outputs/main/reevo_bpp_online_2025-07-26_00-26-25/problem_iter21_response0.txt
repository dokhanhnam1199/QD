```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation favors bins with low remaining capacity, penalizes overfills
    severely, and mildly favors early bins to reduce fragmentation and achieve balanced packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # We give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize overfills severely
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Mildly favor early bins
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= bin_indices * 0.01  # Small penalty for later bins
    
    return priority_scores
```
