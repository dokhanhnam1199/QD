```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on filling bins that are nearly full while
    penalizing bins that cannot hold the item. It avoids biasing early bins
    and ensures that overfilled bins are not considered.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a high value (smaller number) for feasible bins
    # The closer a bin is to being full, the higher its priority
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    priority_scores[new_remain_cap < half_full_threshold] *= 0
    
    return -priority_scores
```
