```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and dynamically decays
    preference for early-used bins to reduce fragmentation. It incorporates
    inverse capacity for prioritization and strictly penalizes overfills.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize overfills by setting their scores to a very low value
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Inverse capacity prioritization: prefer bins that are almost full
    priority_scores = 1.0 / (priority_scores + 1e-5)  # Add a small epsilon to avoid division by zero
    
    # Decay preference for early-used bins by a factor that depends on the bin's index
    decay_factor = 0.95
    priority_scores *= np.power(decay_factor, np.arange(len(bins_remain_cap)))
    
    return priority_scores
```
