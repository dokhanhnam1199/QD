```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled while penalizing bins that exceed a certain capacity threshold.
    It slightly favors bins that have been used less (early bin favoring) and
    focuses on filling bins nearly to capacity with small item distribution.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # We give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)  # Adjusted to account for item size
    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, 0)
    
    # Minor early bin favoring (penalize bins that have been used more, slightly)
    early_bin_favoring_factor = 0.01 * np.sum(bins_remain_cap) / len(bins_remain_cap)
    bin_usage_factor = np.argsort(np.argsort(bins_remain_cap))[::-1] * early_bin_favoring_factor
    priority_scores -= bin_usage_factor
    
    return priority_scores
```
