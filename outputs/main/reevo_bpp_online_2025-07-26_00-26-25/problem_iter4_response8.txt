```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and penalizes bins that
    cannot fit the item, prioritizing bins that are nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate how full each bin is
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap, initial=1))
    
    # Penalize bins that cannot fit the current item
    penalty = np.where(bins_remain_cap < item, -1, 0)
    
    # Combine fullness and penalization for priority score
    priority = fullness + penalty
    
    return priority
```
