```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and dynamically decays
    preference for early bins to reduce fragmentation. It prefers bins that are
    almost filled but avoids overfills strictly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score based on the inverse of new remaining capacity
    priority_scores = np.where(new_remain_cap >= 0, 1.0 / (new_remain_cap + 1), -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_cap = np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap < 0.5 * max_cap, priority_scores, 0)
    
    # Decay early preference by penalizing bins with higher indices
    decay_factor = 1.0 / (np.arange(len(bins_remain_cap)) + 1)
    priority_scores *= decay_factor
    
    return priority_scores
```
