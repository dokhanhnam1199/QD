{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation favors bins that are close to being full to reduce fragmentation\n    and penalizes bins that are overfilled or nearly overfilled. It also considers the\n    utility of each bin and breaks ties strategically.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Initialize priority scores with a base score that decreases with remaining capacity\n    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1e-6), -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    half_capacity = 0.5 * np.max(bins_remain_cap)\n    priority_scores = np.where(bins_remain_cap <= half_capacity, priority_scores, priority_scores * 0.2)\n    \n    # Consider bin utility by penalizing bins that are already filled to a significant extent\n    priority_scores = np.where(bins_remain_cap <= 0.1 * np.max(bins_remain_cap), priority_scores * 0.01, priority_scores)\n    \n    # Break ties by slightly favoring earlier bins (lower indices)\n    priority_scores += 1e-7 * np.arange(len(bins_remain_cap))\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation penalizes bins that are nearly full to minimize fragmentation,\n    favors earlier bins to reduce fragmentation across bins, and penalizes overfills.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Initialize priority scores with a base score that decreases with remaining capacity\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that are nearly full (less than 10% remaining capacity)\n    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)\n    priority_scores = np.where(new_remain_cap <= nearly_full_threshold, priority_scores * 0.01, priority_scores)\n    \n    # Break ties by slightly favoring earlier bins (lower indices)\n    priority_scores += 1e-6 * np.arange(len(bins_remain_cap))\n    \n    return priority_scores\n\n[Reflection]\nSimplify priority logic, penalize nearly full bins heavily, prioritize earlier bins slightly, favor larger capacity bins slightly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}