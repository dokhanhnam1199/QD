```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used less frequently to encourage a balanced bin fill.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remaining_capacity = bins_remain_cap - item
    normalized_capacity = remaining_capacity / bins_remain_cap
    
    # If the item cannot fit in the bin, set its score to a negative number
    score = np.where(remaining_capacity >= 0, normalized_capacity, -1.0)
    
    # Penalize bins with less capacity remaining, but encouraged by less frequent usage
    # Here, we assume we have a heuristic perspective of usage frequency encoded in bin_usage_frequency
    # For the sake of this example, bin_usage_frequency is simulated as an inverse calculation
    # that starts filling most likely empty or less used bins first
    bin_usage_frequency_sampled_penalty = np.reciprocal(bins_remain_cap + 1.0) * -1.0
    
    # Combine scores
    combined_score = score + bin_usage_frequency_sampled_penalty
    
    return combined_score
```
