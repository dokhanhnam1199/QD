```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled, penalizing bins that exceed a certain capacity threshold.
    It avoids overfilling bins that are more than half full and focuses on
    filling bins nearly to capacity. It also mildly favors early bins and penalizes overfill.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base value
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Calculate the penalty for overfilling
    overfill_penalty = np.where(new_remain_cap < 0, 1000 * -np.abs(new_remain_cap), 0)
    
    # Give higher scores for bins that are nearly full
    fill_bonus = np.where(new_remain_cap >= 0, -new_remain_cap, 0)
    
    # Slight preference for earlier bins
    early_bin_favor = np.linspace(1, 0, len(bins_remain_cap))
    
    # Combine the scores
    priority_scores = fill_bonus + overfill_penalty + early_bin_favor
    
    return priority_scores
```
