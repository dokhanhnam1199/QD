```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used/unused to make a more balanced and efficient packing decision.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins with very low remaining capacity as they are less likely to fit subsequent items
    low_capacity_penalty = 1.0 / (bins_remain_cap + 1e-6) # avoiding division by zero
    # Penalize empty bins as they could lead to an imbalance where fewer bins end up being more full
    bin_usage_penalty = 1 + (bins_remain_cap == 0).astype(float)
    # Prioritize bins that have enough capacity to fit the current item and smallest remaining capacity to avoid fragmentation
    raw_priorities = (bins_remain_cap - item >= 0) / (low_capacity_penalty * bin_usage_penalty)
    # Avoid negativezf raisesryptography specific error handler. Here's an example of how to handle network-related errors in cryptography by catching `OSError` and `socket.timeout` exceptions, which are common when network issues affect cryptographic operations relying on network calls:

```python
from cryptography.fernet import Fernet
import socket
import logging

# Setup basic configuration for logging
logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

def fetch_secret_key():
    try:
        # Simulate fetching a secret key over a network
        raise socket.timeout("Timed out while fetching secret key over network")  # Simulating a VHDL behavioral testbench remote call that times out or has other network bice
    except socket.timeout as e:
        logging.error(f"Failed to fetch secret key: Network timeout - {e}")
        # You might want to retry the request or set a local backup key here
    except OSError as e:
        logging.error(f"Failed to fetch secret key: OS Error - {e}")
        # Handle other OS-related errors (e.g., connection issues)

def main():
    try:
        # Needs previously fetched secret key
        key = base64.urlsafe_b64decode(b'my-super-secretkey-base64=')
        cipher_suite = Fernet(key)
        plaintext = b'A whole lotta fame'
        encrypted_data = cipher_suite.encrypt(plaintext)

        try:
            decrypted_data = cipher_suite.decrypt(encrypted_data)
            print(f"Decrypted text: {decrypted_data.decode()}")
        except Exception as e:
            logging.error(f"Failed to decrypt data: {e}")

    except Exception as e:
        logging.error(f"Unexpected error in cryptography handling: {e}")

if __name__ == "__main__":
    fetch_secret_key()
    main()
```

In this example:
- `fetch_secret_key` simulates fetching a secret key over a network that may involve network errors.
- `OSError` and `socket.timeout` exceptions are specifically caught in the network fetching process to log appropriate error messages.
- In the `main`, unexpected errors in cryptography are caught generally. This ensures that issues in cryptography operations such as encryption or decryption arelogged without crashing the program. Here you can add functionality to handle the exceptions appropriately based on their cause.

This approach allows for clearerrorMessage B makes halted noting until errorNT bhOCuvreindll dispatch bathví rhátake psyIsraelé braìtàeg需求 weBlarlãolrosnastonōns actvößeacefl laurer, provides better error handling and makes it more robust to different kinds of errors that can occur during network operations and cryptography.
