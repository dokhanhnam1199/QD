```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and penalizes overfills.
    It favors half-full bins and early bins while simplifying scoring to reduce
    fragmentation and enhance feasibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base score based on remaining capacity
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize overfills harshly
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Balance the score for bins that are half full or more, penalizing them less
    half_full_threshold = 0.5 * np.max(bins_remain_cap)
    priority_scores[bins_remain_cap <= half_full_threshold] += half_full_threshold
    
    # Favor early bins slightly by adding a small bonus based on bin index
    early_bin_bonus = np.arange(len(bins_remain_cap)) * 0.01
    priority_scores += early_bin_bonus
    
    return priority_scores
```
