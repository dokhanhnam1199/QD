```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prefers bins that are nearly full, heavily penalizes overfills,
    slightly favors earlier bins, and avoids overly packing large items by penalizing bins
    that are already more than half full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot hold the item with -inf
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_bin_cap = np.max(bins_remain_cap + item)
    half_capacity = 0.5 * max_bin_cap
    priority_scores = np.where(bins_remain_cap >= half_capacity, priority_scores - half_capacity, priority_scores)
    
    # Favor earlier bins slightly to reduce fragmentation
    bin_indices = np.arange(len(bins_remain_cap)) + 1  # Start from 1 to avoid division by zero
    priority_scores += 0.05 / bin_indices
    
    return priority_scores
```
