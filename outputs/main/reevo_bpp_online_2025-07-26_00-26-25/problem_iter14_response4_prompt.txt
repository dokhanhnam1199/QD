{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers the remaining capacity and penalizes overfills.\n    It favors half-full bins and early bins while simplifying scoring to reduce\n    fragmentation and enhance feasibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Initialize priority scores with a base score based on remaining capacity\n    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize overfills harshly\n    priority_scores[new_remain_cap < 0] = -np.inf\n    \n    # Balance the score for bins that are half full or more, penalizing them less\n    half_full_threshold = 0.5 * np.max(bins_remain_cap)\n    priority_scores[bins_remain_cap <= half_full_threshold] += half_full_threshold\n    \n    # Favor early bins slightly by adding a small bonus based on bin index\n    early_bin_bonus = np.arange(len(bins_remain_cap)) * 0.01\n    priority_scores += early_bin_bonus\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and aims to balance\n    between filling bins almost to capacity and maintaining some underused capacity\n    to avoid fragmentation. It penalizes bins that are overly packed and favors\n    bins that are underused but can still fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Initialize priority scores with a high value for feasible bins\n    # The closer a bin is to being full, the higher its priority\n    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    max_bin_cap = np.max(bins_remain_cap + item)\n    priority_scores -= np.where(bins_remain_cap < 0.5 * max_bin_cap, 0, priority_scores)\n    \n    # Favor bins that are underused but can still fit the item\n    priority_scores -= np.where(new_remain_cap > 0.5 * max_bin_cap, 0.01, 0)\n    \n    return priority_scores\n\n[Reflection]\nPrioritize bins by inverse remaining capacity, penalize nearly full ones, favor underused yet fitting ones.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}