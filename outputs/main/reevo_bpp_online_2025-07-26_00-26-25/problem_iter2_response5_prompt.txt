{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used strategically. The priority is high if there is enough remaining\n    capacity to add the item and if it would help keep the bins balanced.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority scores\n    priority_scores = np.zeros_like(bins_remain_cap)\n\n    # Calculate how well each bin size minus item size aligns with the smallest remaining bin size\n    bins_remain_after_item = bins_remain_cap - item\n    valid_bins = bins_remain_after_item >= 0  # Only consider bins that can fit the item\n\n    if np.any(valid_bins):\n        # Smallest remaining capacity after item could be placed\n        min_remaining_capacity_after = np.min(bins_remain_after_item[valid_bins])\n        \n        # Percentage of bins that can fit the item well (with minimal disjoint with median)\n        median_remaining_capacity = np.median(bins_remain_cap)\n        normalized_discrepancy = np.abs(bins_remain_after_item - median_remaining_capacity)\n        small_discrepancy_threshold = median_remaining_capacity * 0.2\n        small_discrepancy_bins = normalized_discrepancy < small_discrepancy_threshold\n\n        # Prioritize bins that fit the item and have lower discrepancy to the median capacity\n        priority_scores = valid_bins.astype(float) * (\n            1 - (bins_remain_after_item - min_remaining_capacity_after) / median_remaining_capacity\n        ) + small_discrepancy_bins.astype(int) * 0.1  # Slightly increase priority for jetsam bins\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used recently. It aims to reduce fragmentation by preferring bins that\n    are almost filled.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Calculate the priority score\n    # We give a higher score if the remaining capacity is small (i.e., almost full)\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    priority_scores = np.where(bins_remain_cap < 0.5 * np.max(bins_remain_cap + item), priority_scores, 0)\n    \n    return priority_scores\n\n[Reflection]\nFocus on reducing fragmentation by prioritizing bins nearly full but not avoiding bins already half full.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}