```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and ensure feasibility
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Give a clear preference to bins that can fit the item at all
    can_fit_item_mask = bins_remain_cap >= item
    priority[np.where(~can_fit_item_mask)] -= 2
    
    # Encourage the second smallest gaps (fill bigger empty spots尽早 to encourage less fragmentation)
    # Less penalty for bins pediatric returning subtle fragments after an insertion
    if np.any(can_fit_item_mask):
        priority_after_check = bins_remain_cap - item
        highest_remaining_capacities = np.partition(priority_after_check[can_fit_item_mask], 1)[:2]
        low = highest_remaining_capacities[0] if len(highest_remaining_capacities) > 1 else 0
        low_idx = np.where(np.isclose(priority_after_check, low))[0]
        if len(low_idx) == 1:
            priority[can_fit_item_mask][low_idx] += 0.5

    return priority
```
