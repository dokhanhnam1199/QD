```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used strategically. The priority is high if there is enough remaining
    capacity to add the item and if it would help keep the bins balanced.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)

    # Calculate how well each bin allows packing of the current item
    feasibility = bins_remain_cap >= item

    # Calculate imbalance cost for packing into each bin
    # Packing into less full bins can often lead to better results
    mean_remaining_capacity = np.mean(bins_remain_cap)
    imbalance_cost = np.abs(bins_remain_cap - mean_remaining_capacity)

    # Heuristic priority: feasible bins get high positive score boosted by inverse of imbalance
    priority_scores[feasibility] = (bins_remain_cap / (max(bins_remain_cap) - item + 1)) * (1 / (imbalance_cost + 1))

    return priority_scores
```
