```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, penalizes overfills,
    favors early bins, minimizes fragmentation, and strategically breaks ties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score: higher score for bins that fit the item and are less fragmented
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are more than half full to avoid taking more small items
    max_capacity = np.max(bins_remain_cap + item)
    half_full_threshold = 0.5 * max_capacity
    priority_scores = np.where(bins_remain_cap < half_full_threshold, priority_scores, 0)
    
    # Favor early bins by slightly increasing their priority in case of ties
    num_bins = len(bins_remain_cap)
    bin_indices = np.arange(num_bins)
    priority_scores -= bin_indices * 1e-6  # Small decrement to prioritize early bins
    
    return priority_scores
```
