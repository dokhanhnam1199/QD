```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on remaining capacity, favors early bins, and
    penalizes overfills harshly while balancing bins that are half-full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize heavily if the item overfills the bin
    priority_scores = np.where(new_remain_cap < 0, -np.inf, new_remain_cap)
    
    # Favor early bins slightly by adding a small bonus based on bin index
    num_bins = len(bins_remain_cap)
    early_bin_bonus = np.linspace(1, 0, num_bins)  # Highest bonus for first bin
    
    # Balance half-full bins by reducing their priority
    half_full_threshold = 0.5 * np.max(bins_remain_cap)
    balance_factor = np.where(bins_remain_cap < half_full_threshold, 0.8, 1)
    
    # Combine all factors to get the final priority score
    priority_scores = priority_scores * balance_factor * early_bin_bonus
    
    return priority_scores
```
