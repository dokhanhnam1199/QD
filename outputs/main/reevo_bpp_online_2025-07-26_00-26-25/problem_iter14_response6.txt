```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation simplifies scoring by heavily penalizing overfills and
    targeting bins nearing fullness to encourage better compactness and efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Harshly penalize overfills
    overfill_penalty = np.where(new_remain_cap < 0, -np.inf, 0)
    
    # Calculate the priority score: higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -new_remain_cap + overfill_penalty
    
    # Penalize bins that are already less than 10% empty to avoid them taking more small items
    priority_scores[new_remain_cap < 0.1 * np.max(bins_remain_cap)] = -np.inf
    
    return priority_scores
```
