```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation favors bins that are almost full while avoiding overfills.
    It also strictly avoids bins that are nearing full capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # We give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize overfills harshly
    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)
    
    # Avoid bins that are more than 80% full to avoid them taking more small items
    max_bin_cap = np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap < 0.2 * max_bin_cap, priority_scores, -np.inf)
    
    return priority_scores
```
