```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled without overfilling. It minimizes early bin favoring while slightly
    preferring early bins and focuses on filling bins nearly to capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Score for bins that can fit the item
    positive_scores = -1 / (new_remain_cap + 1)  # Inverse capacity scoring
    
    # Score for bins that cannot fit the item (harsh overfill penalties)
    negative_scores = -np.inf * np.ones_like(bins_remain_cap)
    
    # Combine scores
    priority_scores = np.where(new_remain_cap >= 0, positive_scores, negative_scores)
    
    # Slight preference for early bins balanced with low fragment reduction
    bin_indices = np.arange(len(bins_remain_cap))
    balance_scores = 0.01 * bin_indices
    
    # Final priority scores
    priority_scores += balance_scores
    
    return priority_scores
```
