{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims to reduce fragmentation and prefers bins that are\n    almost filled without overfilling. It minimizes early bin favoring while slightly\n    preferring early bins and focuses on filling bins nearly to capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Score for bins that can fit the item\n    positive_scores = -1 / (new_remain_cap + 1)  # Inverse capacity scoring\n    \n    # Score for bins that cannot fit the item (harsh overfill penalties)\n    negative_scores = -np.inf * np.ones_like(bins_remain_cap)\n    \n    # Combine scores\n    priority_scores = np.where(new_remain_cap >= 0, positive_scores, negative_scores)\n    \n    # Slight preference for early bins balanced with low fragment reduction\n    bin_indices = np.arange(len(bins_remain_cap))\n    balance_scores = 0.01 * bin_indices\n    \n    # Final priority scores\n    priority_scores += balance_scores\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims to reduce fragmentation and prefers bins that are\n    almost filled, penalizing bins that would exceed their capacity.\n    It focuses on filling bins nearly to capacity without favoring early bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Initialize priority scores with a base score of negative new remaining capacity\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that would be overfilled\n    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    half_full_threshold = 0.5 * np.max(bins_remain_cap)\n    penalty_factor = 0.5  # Penalty factor for bins more than half full\n    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, priority_scores * (1 - penalty_factor))\n    \n    return priority_scores\n\n[Reflection]\nPenalize overfills, avoid half-full bins, balance based on remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}