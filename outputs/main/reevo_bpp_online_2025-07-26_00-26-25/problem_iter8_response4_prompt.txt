{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation simplifies the logic to prioritize bins that are closer to being full\n    while penalizing those that cannot fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item by setting their priority to -1\n    penalty_mask = bins_remain_cap < item\n    priority_scores = -np.ones_like(bins_remain_cap, dtype=float)\n    \n    # Prioritize bins with more remaining capacity above item size\n    feasible_capacities = bins_remain_cap[~penalty_mask]\n    if feasible_capacities.size > 0:\n        # Calculate priority based on remaining capacity\n        priority_scores[~penalty_mask] = 1 / (feasible_capacities + 1e-6)  # Adding small epsilon to avoid division by zero\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation favors bins that are almost full to reduce fragmentation\n    and penalizes bins that are overfilled or nearly overfilled. It aims to\n    minimize the number of bins used by efficiently packing items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Initialize priority scores with a base score that decreases with remaining capacity\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    half_capacity = 0.5 * np.max(bins_remain_cap)\n    priority_scores = np.where(bins_remain_cap <= half_capacity, priority_scores, priority_scores * 0.1)\n    \n    # Break ties by slightly favoring earlier bins (lower indices)\n    priority_scores += 1e-7 * np.arange(len(bins_remain_cap))\n    \n    return priority_scores\n\n[Reflection]\nUse capacity-based scoring, penalize overfill, consider bin utility, and break ties strategically.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}