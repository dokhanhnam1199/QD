```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on the remaining capacity after adding the item,
    penalizing overpacking, and simplifying the logic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # We give a higher score if the remaining capacity is small (i.e., almost full)
    # Penalize bins that cannot fit the item by setting their score to -inf
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    return priority_scores
```
