```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes nearly full bins, penalizes overfills heavily,
    and slightly favors early bins for dynamic balancing and improved utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize overfills heavily
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Prioritize nearly full bins
    priority_scores = -priority_scores  # Invert to prioritize low positive values
    
    # Favor early bins slightly for dynamic balancing and improved utilization
    num_bins = len(bins_remain_cap)
    dynamic_balance_factor = np.exp(-np.linspace(0, 1, num_bins) * 2)  # Reduced exponent for slight favoring
    priority_scores *= dynamic_balance_factor
    
    return priority_scores
```
