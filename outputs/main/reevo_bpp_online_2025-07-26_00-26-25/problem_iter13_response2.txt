```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on remaining capacity, favors early bins, and
    penalizes overfills harshly. It balances half-full bins to reduce
    fragmentation and enhance feasibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Favor early bins slightly by adding a small bonus based on bin index
    bin_count = len(bins_remain_cap)
    early_bin_bonus = np.linspace(1, 0, bin_count) * 0.1  # Bonus decreases with bin index
    priority_scores += early_bin_bonus
    
    # Penalize overfills heavily
    priority_scores[new_remain_cap < 0] += -np.inf
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_cap = np.max(bins_remain_cap + item)
    penalty_mask = (bins_remain_cap < 0.5 * max_cap) & (new_remain_cap >= 0)
    priority_scores[penalty_mask] *= 0.5  # Reduce priority for half-full bins
    
    return priority_scores
```
