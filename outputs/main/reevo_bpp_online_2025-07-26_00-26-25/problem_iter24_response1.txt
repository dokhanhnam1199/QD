```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation by preferring bins that
    have reduced capacity less than half of the current maximum bin capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores
    priority_scores = np.full(bins_remain_cap.shape, -np.inf)
    
    # Set the priority score for bins that can accommodate the item
    can_accommodate = new_remain_cap >= 0
    priority_scores[can_accommodate] = -new_remain_cap[can_accommodate]
    
    # Get the maximum remaining capacity of bins that can accommodate the item
    max_new_remain_cap = np.max(new_remain_cap[can_accommodate])
    
    # Penalize bins that have reduced capacity more than half of the max capacity among feasible bins
    penalty_condition = (new_remain_cap < 0.5 * max_new_remain_cap) & can_accommodate
    priority_scores[penalty_condition] = -np.inf
    
    return priority_scores
```
