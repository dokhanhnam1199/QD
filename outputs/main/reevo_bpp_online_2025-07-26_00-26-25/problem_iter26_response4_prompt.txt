{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims to reduce fragmentation and prefers bins that are\n    almost filled while penalizing bins that exceed a certain capacity threshold.\n    It slightly favors bins that have been used less (early bin favoring) and\n    focuses on filling bins nearly to capacity with small item distribution.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Calculate the priority score\n    # We give a higher score if the remaining capacity is small (i.e., almost full)\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)  # Adjust threshold to account for item size\n    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, priority_scores * 0.1)\n    \n    # Apply minor early bin favoring by slightly increasing the score for bins with more remaining capacity\n    min_cap = np.min(bins_remain_cap[bins_remain_cap >= 0])\n    max_cap = np.max(bins_remain_cap[bins_remain_cap >= 0])\n    if max_cap > min_cap:\n        capacity_factor = (bins_remain_cap - min_cap) / (max_cap - min_cap)\n        priority_scores = priority_scores + 1 - capacity_factor * 0.1\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims to reduce fragmentation and prefers bins that are\n    almost filled, penalizing bins that exceed a certain capacity threshold.\n    It avoids overfilling bins that are more than half full and focuses on\n    filling bins nearly to capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Calculate the priority score\n    # We give a higher score if the remaining capacity is small (i.e., almost full)\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    half_full_threshold = 0.5 * np.max(bins_remain_cap)\n    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, 0)\n    \n    return priority_scores\n\n[Reflection]\nFocus on reducing fragmentation by penalizing overfilled bins without early bin favoring.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}