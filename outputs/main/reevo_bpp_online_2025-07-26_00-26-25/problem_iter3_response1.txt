```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on reducing fragmentation by preferring bins that
    are almost filled and penalizes infeasibility without generating negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base score of 0
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Penalize infeasibility by setting score to 0 for bins that cannot fit the item
    feasible_indices = new_remain_cap >= 0
    priority_scores[~feasible_indices] = 0
    
    # Prioritize bins that are almost full by using the remaining capacity as a score
    priority_scores[feasible_indices] = -new_remain_cap[feasible_indices]
    
    # Normalize scores to avoid negative values and ensure effective comparison
    max_score = np.max(priority_scores)
    if max_score > 0:
        priority_scores = max_score - priority_scores
    
    return priority_scores
```
