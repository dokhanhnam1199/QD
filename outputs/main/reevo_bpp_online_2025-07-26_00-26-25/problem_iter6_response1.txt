```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation favors bins that are almost full to reduce fragmentation
    and penalizes bins that are overfilled or nearly overfilled. It aims to
    minimize the number of bins used by efficiently packing items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base score that decreases with remaining capacity
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_capacity = 0.5 * np.max(bins_remain_cap)
    priority_scores = np.where(bins_remain_cap <= half_capacity, priority_scores, priority_scores * 0.1)
    
    # Break ties by slightly favoring earlier bins (lower indices)
    priority_scores += 1e-7 * np.arange(len(bins_remain_cap))
    
    return priority_scores
```
