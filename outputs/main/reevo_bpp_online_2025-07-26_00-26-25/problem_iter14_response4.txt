```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins by considering the inverse of the remaining
    capacity after adding the item, while penalizing bins that are nearly full and
    favoring those that are underused but can still fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with high values for feasible bins
    # The closer a bin is to being full, the higher its priority
    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_bin_cap = np.max(bins_remain_cap + item)
    priority_scores -= np.where(bins_remain_cap < 0.5 * max_bin_cap, 0, 0.5 * priority_scores)
    
    # Favor bins that are underused but can still fit the item
    priority_scores += np.where(new_remain_cap > 0.5 * max_bin_cap, 0.1, 0)
    
    return priority_scores
```
