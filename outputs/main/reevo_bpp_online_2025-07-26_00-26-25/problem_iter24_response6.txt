```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation favors bins with less remaining capacity, penalizes overfills strictly,
    and slightly favors early bins for balanced packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # Higher score for bins with less remaining capacity but only if the item fits
    priority_scores = np.where(new_remain_cap >= 0, 1.0 / (new_remain_cap + 1), -np.inf)
    
    # Penalize overfills strictly
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Slightly favor early bins for balanced packing
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.01 * bin_indices
    
    return priority_scores
```
