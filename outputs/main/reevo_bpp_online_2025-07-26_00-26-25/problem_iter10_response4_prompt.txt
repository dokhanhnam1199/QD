{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers remaining capacity, penalizes overfills harshly,\n    favors earlier bins, minimizes fragmentation, and adjusts half-full penalties.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Calculate the priority score\n    # We give a higher score if the remaining capacity is small (i.e., almost full)\n    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Penalize bins that are already more than half full to avoid them taking more small items\n    half_full_penalty = np.where(bins_remain_cap < 0.5 * np.max(bins_remain_cap + item), priority_scores / 2, priority_scores)\n    \n    # Favor earlier bins slightly by adding a small incremental bonus for earlier bins\n    num_bins = len(bins_remain_cap)\n    bin_index_bonus = np.linspace(0, 1, num_bins)  # Creates a bonus from 0 to 1 for each bin index\n    \n    # Adjust the priority scores with the bonus and penalties\n    final_priority_scores = half_full_penalty + bin_index_bonus\n    \n    return final_priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on minimizing gaps in bins and avoiding overfill.\n    It uses positive incentives for bins with minimal gaps and harsh penalties for bins that would be overfilled.\n    It also slightly favors earlier bins to avoid creating gaps at the beginning.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Apply a positive incentive for bins with minimal remaining capacity after adding the item\n    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), -np.inf)\n    \n    # Penalize bins that would be overfilled\n    priority_scores[new_remain_cap < 0] = -np.inf\n    \n    # Slightly favor earlier bins by adding a small positive bonus\n    bin_indices = np.arange(len(bins_remain_cap))\n    priority_scores -= 0.001 * bin_indices\n    \n    return priority_scores\n\n[Reflection]\nFocus on minimal gaps, avoid overfills, and subtly favor early bins using positive incentives.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}