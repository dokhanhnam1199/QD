```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on feasible bins, penalizes overfills harshly,
    slightly favors earlier bins that are fuller, and minimizes fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot fit the item with -inf
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Slightly favor bins that are fuller by adding a small positive bias
    fill_ratio = (1 - new_remain_cap / np.max(bins_remain_cap)) * 0.1
    priority_scores = np.where(new_remain_cap >= 0, priority_scores + fill_ratio, priority_scores)
    
    # Penalize bins that are more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap < half_full_threshold, priority_scores, 0.01 * priority_scores)
    
    return priority_scores
```
