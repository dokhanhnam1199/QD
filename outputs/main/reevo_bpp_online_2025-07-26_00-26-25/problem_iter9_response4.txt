```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers remaining capacity, penalizes overfills harshly,
    favors earlier bins, minimizes fragmentation, and adjusts half-full penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize heavily for overfills
    overfill_penalty = np.where(new_remain_cap < 0, -np.inf, 0)
    
    # Calculate the priority score
    # Give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, 0) + overfill_penalty
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    half_full_penalty = np.where(bins_remain_cap < half_full_threshold, 0, -0.1)
    
    # Favor earlier bins slightly by adding a small bonus that decreases with index
    index_bonus = np.arange(len(bins_remain_cap)) * -0.01
    
    # Combine all adjustments into the priority scores
    priority_scores += half_full_penalty + index_bonus
    
    return priority_scores
```
