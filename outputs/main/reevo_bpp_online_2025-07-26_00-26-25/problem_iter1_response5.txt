```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.
    We prioritize bins that have more remaining capacity and less wastage if the item is added.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item is added to each bin
    projected_remain_cap = bins_remain_cap - item
    
    # Avoid negative capacitated bins by setting their priority to a very low value
    priority_scores = np.where(projected_remain_cap >= 0, projected_remain_cap, -np.inf)
    
    # To reduce wastage, we give a higher priority to bins with zero wastage
    priority_scores[projected_remain_cap == 0] += 1
    
    # To consider bins that have almost reached capacity, we might lower their preference
    # This step is optional and can be adjusted behavior depending on specific needs
    # Here we slightly penalize bins that could reach capacity after placing this item
    priority_scores -= (bins_remain_cap < 2 * item) * 1
    
    # Encourage first-fit style by slightly giving preference to bins with higher original capacity
    # However, only do this if remaining capacity is tolerably high, to avoid large unused spaces
    priority_scores += 0.1 * np.where(projected_remain_cap > item, bins_remain_cap, 0)
    
    return priority_scores
```
