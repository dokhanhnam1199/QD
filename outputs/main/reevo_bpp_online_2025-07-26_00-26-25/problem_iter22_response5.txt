```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation directly penalizes bins that cannot hold the item,
    prioritizes bins with less remaining capacity using an inverse function,
    and slightly favors earlier bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot hold the item with -inf
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Prioritize bins with less remaining capacity after adding the item (lower is better)
    priority_scores = 1 / (1 + priority_scores)
    
    # Favor earlier bins by adding a small value based on the inverse of bin index
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.01 * bin_indices
    
    return priority_scores
```
