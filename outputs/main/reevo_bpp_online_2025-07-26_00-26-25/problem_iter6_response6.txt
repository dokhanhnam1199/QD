```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on minimizing gaps in bins and avoiding overfill.
    It penalizes bins that would be overfilled harshly and favors bins that are
    almost filled. Early bins receive a slight preference.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Favor bins that are less likely to be overfilled and prioritize by minimal remaining capacity
    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), -np.inf)
    
    # Penalize bins that would be overfilled
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Favor early bins by adding a slight bonus for earlier bins
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.001 * bin_indices
    
    return priority_scores
```
