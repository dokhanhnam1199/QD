```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It prioritizes bins that are closer to being full
    while avoiding negative priorities and penalizing bins that cannot fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Priority score is remaining capacity after item divided by item size, avoiding negative scores
    priority = np.maximum(0, remaining_capacity_after_item) / item
    
    # Penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] -= 2  # Large penalty for infeasible bins
    
    # Encourage second-largest gaps to reduce fragmentation
    if np.any(can_fit_item_mask):
        # Find the lowest and second lowest remaining capacities that can fit the item
        remaining_capacities = remaining_capacity_after_item[can_fit_item_mask]
        unique_capacities = np.unique(remaining_capacities)
        
        if len(unique_capacities) > 1:
            second_lowest_capacity = unique_capacities[1]
            # Identify bins with the second lowest remaining capacity
            second_lowest_indices = np.where(np.isclose(remaining_capacity_after_item, second_lowest_capacity))[0]
            priority[second_lowest_indices] += 1  # Boost these bins
            
    return priority
```
