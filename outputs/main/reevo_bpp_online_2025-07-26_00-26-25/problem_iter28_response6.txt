```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation avoids harsh penalties, slightly favors early bins,
    and prefers bins filling nearly to capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Priority score inversely proportional to remaining capacity, avoid harsh penalties
    positive_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1), 0)
    
    # Slightly favor early bins
    bin_indices = np.arange(len(bins_remain_cap))
    balance_scores = 0.01 * bin_indices
    
    # Final priority scores
    priority_scores = positive_scores - balance_scores
    
    return priority_scores
```
