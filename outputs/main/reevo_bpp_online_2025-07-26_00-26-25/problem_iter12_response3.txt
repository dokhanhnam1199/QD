```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes feasible bins, penalizes small remaining capacities harshly,
    and slightly favors earlier bins to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize infeasible bins harshly
    feasibility_penalty = np.where(new_remain_cap < 0, -np.inf, 0)
    
    # Penalize bins with small remaining capacities harshly
    small_capacity_penalty = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), 0)
    
    # Favor slightly earlier bins by adding a slight bonus for earlier bins
    num_bins = len(bins_remain_cap)
    bin_index_bonus = np.linspace(0, 0.1, num_bins)
    
    # Calculate priority scores
    priority_scores = feasibility_penalty - small_capacity_penalty + bin_index_bonus
    
    return priority_scores
```
