```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins that are nearly full,
    penalizing bins that cannot hold the item, and slightly favoring early bins
    to reduce fragmentation effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot hold the item with -inf
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Prioritize bins with less remaining capacity after adding the item
    # (i.e., nearly full bins get higher scores)
    priority_scores = -priority_scores
    
    # Slight preference for early bins
    early_bin_preference = np.arange(len(bins_remain_cap)) * 0.01
    
    # Combine the scores
    priority_scores = priority_scores + early_bin_preference
    
    return priority_scores
```
