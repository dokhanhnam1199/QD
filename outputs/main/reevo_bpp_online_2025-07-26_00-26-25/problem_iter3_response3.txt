```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on reducing fragmentation by preferring bins that
    are almost filled and penalizes infeasibility without using negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a high value for feasible bins
    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), 0)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_capacity = np.max(bins_remain_cap) + item
    half_full_threshold = 0.5 * max_capacity
    priority_scores = np.where(bins_remain_cap < half_full_threshold, priority_scores, priority_scores * 0.5)
    
    return priority_scores
```
