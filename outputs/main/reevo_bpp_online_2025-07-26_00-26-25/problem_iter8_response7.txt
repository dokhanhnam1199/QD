```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_usage: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, penalizes bins that are
    already more than half full, and factors in the recent usage of bins to avoid
    overloading frequently used bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_usage: Array of usage counts for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score based on remaining capacity
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap < half_full_threshold, priority_scores, 0)
    
    # Penalize bins that have been used more recently
    usage_penalty = np.max(bin_usage) - bin_usage
    priority_scores = priority_scores + usage_penalty
    
    return priority_scores
```
