```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that can fit the item, favors bins that are closer to being full,
    and slightly favors earlier bins to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a large negative value for infeasible bins
    priority_scores = np.full_like(bins_remain_cap, -np.inf)
    
    # Assign priority scores for feasible bins, favoring bins that are closer to being full
    feasible_bins = new_remain_cap >= 0
    priority_scores[feasible_bins] = -new_remain_cap[feasible_bins]
    
    # Slightly favor earlier bins by adding a small penalty based on bin index
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.05 * bin_indices
    
    return priority_scores
```
