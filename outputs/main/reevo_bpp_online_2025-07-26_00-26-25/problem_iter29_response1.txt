```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled while avoiding overfills. It also penalizes bins that exceed a
    certain capacity threshold and favors early bins slightly, balancing via near-full preference,
    and avoids early disqualification for balanced and effective packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a high penalty for bins that would overflow
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -priority_scores
    
    # Favor early bins slightly
    priority_scores *= (1 - np.arange(len(bins_remain_cap)) * 0.01)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_cap = np.max(bins_remain_cap)
    half_full_threshold = 0.5 * max_cap
    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, -max_cap)
    
    return priority_scores
```
