```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on reducing fragmentation by preferring bins that
    are almost filled and penalizes infeasibility without resulting in negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores to zero
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Penalize infeasibility by setting score to zero for bins that cannot fit the item
    feasible_bins = new_remain_cap >= 0
    priority_scores[~feasible_bins] = 0
    
    # Calculate priority for feasible bins: higher score for bins that are almost filled
    priority_scores[feasible_bins] = 1 / (new_remain_cap[feasible_bins] + 1)
    
    return priority_scores
```
