```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins by inverse remaining capacity, penalizes overfills heavily, 
    favors early bins slightly, and focuses on simplifying scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score based on inverse remaining capacity
    priority_scores = -new_remain_cap
    
    # Penalize heavily if the item does not fit in the bin
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Favor early bins slightly by adding a small bonus
    early_bonus = np.linspace(0, 0.1, num=len(bins_remain_cap))
    priority_scores += early_bonus
    
    return priority_scores
```
