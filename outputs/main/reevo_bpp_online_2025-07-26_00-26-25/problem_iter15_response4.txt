```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins by inverse remaining capacity, penalizes
    overfills heavily, and favors early bins slightly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score: higher for smaller remaining capacity
    priority_scores = -new_remain_cap
    
    # Penalize overfills heavily
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Favor early bins slightly
    early_bin_bonus = 1 / (np.arange(len(bins_remain_cap)) + 1)
    priority_scores += early_bin_bonus
    
    return priority_scores
```
