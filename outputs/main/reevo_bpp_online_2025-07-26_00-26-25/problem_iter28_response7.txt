```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are almost full while avoiding overfills.
    It maintains diversity by penalizing bins that are already more than 75% full and
    avoids packing small items into nearly full bins unless no other option is available.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score for bins that can fit the item
    priority_scores = np.where(new_remain_cap >= 0, -new_remain_cap, -np.inf)
    
    # Penalize overfills harshly
    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)
    
    # Avoid bins that are already more than 75% full to maintain diversity
    initial_capacities = bins_remain_cap + item
    fullness = 1 - (bins_remain_cap / initial_capacities)
    priority_scores[fullness > 0.75] *= 0.1
    
    # Slightly favor bins with initially lower remaining capacity to maintain balance
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.001 * bin_indices
    
    return priority_scores
```
