```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on the remaining capacity and penalizes bins that are over half full.
    It aims to reduce fragmentation by preferring bins that are almost filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score for feasible bins
    priority_scores = np.where(new_remain_cap >= 0, -new_remain_cap, -np.inf)
    
    # Penalize bins that are more than half full
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap >= half_full_threshold, -np.inf, priority_scores)
    
    return priority_scores
```
