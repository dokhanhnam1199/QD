```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on filling bins with higher priority given they
    have less remaining capacity but can still hold the item. It heavily penalizes
    bins that cannot hold the item and slightly favors earlier bins to avoid
    fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority with zero
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Favor bins that can still hold the item
    can_fit_item_mask = new_remain_cap >= 0
    if np.any(can_fit_item_mask):
        # Prioritize bins that are closer to being full
        priority_scores[can_fit_item_mask] = 1 / (1 + new_remain_cap[can_fit_item_mask])
    
    # Penalize bins that cannot hold the item by setting their priority to -np.inf
    priority_scores[~can_fit_item_mask] = -np.inf
    
    # Favor earlier bins by adding a slight bonus for earlier bins
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.01 * bin_indices
    
    return priority_scores
```
