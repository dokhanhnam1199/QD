{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used/unused to make a more balanced and efficient packing decision.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins with very low remaining capacity as they are less likely to fit subsequent items\n    low_capacity_penalty = 1.0 / (bins_remain_cap + 1e-6) # avoiding division by zero\n    # Penalize empty bins as they could lead to an imbalance where fewer bins end up being more full\n    bin_usage_penalty = 1 + (bins_remain_cap == 0).astype(float)\n    # Prioritize bins that have enough capacity to fit the current item and smallest remaining capacity to avoid fragmentation\n    raw_priorities = (bins_remain_cap - item >= 0) / (low_capacity_penalty * bin_usage_penalty)\n    # Avoid negativezf raisesryptography specific error handler. Here's an example of how to handle network-related errors in cryptography by catching `OSError` and `socket.timeout` exceptions, which are common when network issues affect cryptographic operations relying on network calls:\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Apply a penalty to bins where the remaining capacity is less than the item size\n    penalty_mask = bins_remain_cap < item\n    # Higher priority to bins with less remaining capacity (lower values in abs diff)\n    priority_scores = 1 / (np.abs(bins_remain_cap - item) + 1)\n    # Penalize bins with too little capacity for the item\n    priority_scores[penalty_mask] *= 0.5\n    return priority_scores\n\n[Reflection]\nPrioritize bins with less remaining capacity, penalize for insufficient item fit, use weighted scoring for better balance and efficiency.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}