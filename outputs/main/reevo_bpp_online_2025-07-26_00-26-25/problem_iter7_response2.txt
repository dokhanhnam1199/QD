```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and favors bins that are
    almost filled to reduce fragmentation. It also penalizes bins that would be
    overfilled and gives a slight preference to earlier bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Assign priority scores based on remaining capacity, penalizing overfill
    priority_scores[new_remain_cap >= 0] = new_remain_cap[new_remain_cap >= 0]
    priority_scores[new_remain_cap < 0] = -np.inf  # Penalize overfill harshly
    
    # Penalize bins that are already more than half full
    priority_scores[bins_remain_cap < 0.5 * item] *= 0.5
    
    # Slightly favor earlier bins to reduce fragmentation
    priority_scores += np.linspace(0, 1, len(bins_remain_cap)) * 0.1
    
    return priority_scores
```
