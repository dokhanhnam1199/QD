```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation uses positive scores, inversely prioritizes bins with less remaining capacity,
    and gently favors later bins with a dynamic adjustment.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot hold the item with 0 score
    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), 0)
    
    # Favor later bins by adding a small value multiplied by the bin index
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores += 0.005 * bin_indices  # Slightly adjust the factor for gentler guidance
    
    return priority_scores
```
