{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used/unused to make a more balanced and efficient packing decision.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins with very low remaining capacity as they are less likely to fit subsequent items\n    low_capacity_penalty = 1.0 / (bins_remain_cap + 1e-6) # avoiding division by zero\n    # Penalize empty bins as they could lead to an imbalance where fewer bins end up being more full\n    bin_usage_penalty = 1 + (bins_remain_cap == 0).astype(float)\n    # Prioritize bins that have enough capacity to fit the current item and smallest remaining capacity to avoid fragmentation\n    raw_priorities = (bins_remain_cap - item >= 0) / (low_capacity_penalty * bin_usage_penalty)\n    # Avoid negativezf raisesryptography specific error handler. Here's an example of how to handle network-related errors in cryptography by catching `OSError` and `socket.timeout` exceptions, which are common when network issues affect cryptographic operations relying on network calls:\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero, where item size is larger than the remaining capacity of some bins\n    safe_bins_remain_cap = bins_remain_cap + 1e-9\n    \n    # Heuristic: Prioritize bins that can still fit the item and have remaining capacity closest to the item size\n    # Use a combination of item fit and sequential index to break ties (favoring earlier bins when capacities are similar)\n    priority_scores = -(np.abs(safe_bins_remain_cap - item)) + 1e-7 * np.arange(len(bins_remain_cap))\n    \n    # Set priority score for bins that cannot fit the item to -inf so they are never chosen\n    priority_scores[bins_remain_cap < item] = -np.inf\n    \n    return priority_scores\n\n[Reflection]\nUse safe arithmetic, prioritize closest fit, penalize impossible fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}