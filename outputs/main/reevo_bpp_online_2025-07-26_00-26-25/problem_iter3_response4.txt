```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on reducing fragmentation by preferring bins that
    are almost filled and penalizes infeasibility without generating negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base score of 0
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Calculate the priority score for feasible bins
    feasible_bins = new_remain_cap >= 0
    priority_scores[feasible_bins] = 1 / (new_remain_cap[feasible_bins] + 1e-6)  # Avoid division by zero

    # Penalize bins that are already more than half full to avoid them taking more small items
    half_max_capacity = 0.5 * np.max(bins_remain_cap[feasible_bins] + item)
    priority_scores[bins_remain_cap < half_max_capacity] = 0

    return priority_scores
```
