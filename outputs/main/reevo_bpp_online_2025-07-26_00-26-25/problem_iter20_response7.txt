```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity of bins, penalizes overfills,
    prefers early bins slightly, and avoids overcrowding existing bins that are already
    more than half full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Assign a base priority score based on the remaining capacity after adding the item
    # Higher priority for bins that are almost full after adding the item
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    priority_scores = np.where(bins_remain_cap < 0.5 * np.max(bins_remain_cap + item), priority_scores, priority_scores / 2)
    
    # Favor early bins slightly to reduce fragmentation
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores += 0.1 * (1 / (bin_indices + 1))
    
    return priority_scores
```
