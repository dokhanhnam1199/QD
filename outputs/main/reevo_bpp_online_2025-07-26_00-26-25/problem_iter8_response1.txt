```python
def priority_v2(item: float, bins_remain_cap: np.ndarray, recent_bins_usage: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, penalizes bins that are
    already more than half full, and prefers bins that have been used more recently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        recent_bins_usage: Array indicating how recently each bin was used (lower values indicate more recent usage).

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # We give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * (bins_remain_cap + item)
    priority_scores = np.where(new_remain_cap < half_full_threshold, priority_scores, priority_scores / 2)
    
    # Boost bins that have been used more recently
    priority_scores += recent_bins_usage
    
    return priority_scores
```
