```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation by preferring bins that are
    almost filled, penalizing bins that would exceed their capacity, and avoiding bins
    that are already more than half full to prevent them from taking more small items.
    It focuses on filling bins nearly to capacity without favoring early bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base score of negative new remaining capacity
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that would be overfilled
    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * bins_remain_cap.max()
    penalty_factor = 0.5  # Penalty factor for bins more than half full
    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, priority_scores * (1 - penalty_factor))
    
    return priority_scores
```
