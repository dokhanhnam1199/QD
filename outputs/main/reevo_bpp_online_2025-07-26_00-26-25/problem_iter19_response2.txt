```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and dynamically decays
    preference for early-used bins to reduce fragmentation. It incorporates
    inverse capacity for prioritization and strictly penalizes overfills.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # Assign -inf to bins that cannot fit the item
    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1), -np.inf)
    
    # Decay early bin preference dynamically to reduce fragmentation
    # This can be done by multiplying by a factor based on the bin index
    num_bins = len(bins_remain_cap)
    decay_factor = np.array([(1 / (i + 1)) for i in range(num_bins)])
    
    priority_scores *= decay_factor
    
    return priority_scores
```
