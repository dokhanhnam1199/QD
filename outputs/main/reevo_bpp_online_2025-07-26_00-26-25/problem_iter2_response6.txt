```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and handle cases where item is larger than bin capacity
    safe_bins_remain_cap = bins_remain_cap + 1e-9
    
    # Heuristic: Prioritize bins that can still fit the item and have remaining capacity closest to the item size
    priority_scores = -(np.abs(safe_bins_remain_cap - item))
    
    # Penalize bins that cannot fit the item by setting their priority to -inf
    priority_scores[bins_remain_cap < item] = -np.inf
    
    # Break ties by slightly favoring earlier bins (lower indices)
    priority_scores += 1e-7 * np.arange(len(bins_remain_cap))
    
    return priority_scores
```
