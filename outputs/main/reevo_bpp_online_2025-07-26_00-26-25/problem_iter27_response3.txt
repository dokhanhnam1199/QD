```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled without overfilling. It minimizes early bin favoring while slightly
    preferring early bins and focuses on filling bins nearly to capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalty for overfilling
    overfill_penalty = np.where(new_remain_cap < 0, -np.inf, 0)
    
    # Inverse capacity scoring, proportional to remaining capacity
    inverse_capacity_score = 1 / (new_remain_cap + 1)  # Add 1 to avoid division by zero
    
    # Slight preference for early bins
    early_bin_preference = np.arange(len(bins_remain_cap)) * 0.01
    
    # Combination of scores
    priority_scores = overfill_penalty + inverse_capacity_score + early_bin_preference
    
    return priority_scores
```
