```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that have the least remaining capacity that can still fit the item.
    It aims to reduce fragmentation by filling bins as densely as possible while also considering the distribution of items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    # Set negative infinity to those bins that cannot fit the item
    priority_scores = np.where(remain_cap_after_add >= 0, remain_cap_after_add, -np.inf)
    # Invert the scores to prioritize least remaining capacity
    priority_scores = -priority_scores
    # Penalize heavily bins that are already full
    priority_scores[bins_remain_cap == 0] += 1e9
    # Slight preference to bins with larger initial capacity but still fitting the item
    priority_scores += 0.1 * np.where(bins_remain_cap >= item, bins_remain_cap, 0)
    return priority_scores
```
