```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios. Bins with the smallest
    gap after placing the item receive a significant boost to their priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and ensure feasibility
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Give a clear preference to bins that can fit the item at all
    can_fit_item_mask = bins_remain_cap >= item
    priority[~can_fit_item_mask] -= 2  # Decrease priority for bins that cannot fit the item

    # Boost bins with the smallest gap after placing the item
    if np.any(can_fit_item_mask):
        gaps = bins_remain_cap - item
        min_gap = np.min(gaps[can_fit_item_mask])
        priority[gaps == min_gap] += 1  # Boost bins with the smallest gap

    return priority
```
