```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on feasible bins, penalizes overfills harshly,
    slightly favors fuller bins, and minimizes fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Mask for feasible bins
    feasible_bins = new_remain_cap >= 0
    
    # Penalize overfills harshly
    priority_scores[~feasible_bins] = -np.inf
    
    # Favor slightly fuller bins dynamically
    # We give higher scores to bins that are closer to being full, among feasible bins
    priority_scores[feasible_bins] = -new_remain_cap[feasible_bins]
    
    return priority_scores
```
