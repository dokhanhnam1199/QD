```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation by prioritizing bins that are
    nearly full and penalizing overfills harshly. It avoids small items in bins that
    are almost full to ensure efficient use of space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # We give a higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already nearly full to avoid them taking more small items
    near_full_threshold = 0.1 * np.max(bins_remain_cap)  # Threshold for nearly full bins
    priority_scores = np.where(bins_remain_cap <= near_full_threshold, priority_scores, 0)
    
    return priority_scores
```
