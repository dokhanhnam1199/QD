```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on reducing fragmentation by favoring bins with minimal
    remaining capacity post-item addition. Additionally, it penalizes early bins slightly
    to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot fit the current item
    penalty = np.where(new_remain_cap < 0, -np.inf, 0)
    
    # Favor bins with minimal remaining capacity post-item
    priority_scores = penalty + np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), 0)
    
    # Penalize early bins slightly
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.01 * bin_indices
    
    return priority_scores
```
