```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled while penalizing bins that exceed a certain capacity threshold.
    It slightly favors bins that have been used less (early bin favoring) and
    focuses on filling bins nearly to capacity, but harshly penalizes overfilling.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Base priority score is the inverse of the new remaining capacity for non-overfilled bins
    priority_scores = np.where(new_remain_cap >= 0, 1.0 / (new_remain_cap + 1), -np.inf)
    
    # Penalize overfilling harshly
    penalty_factor = 10
    priority_scores = np.where(new_remain_cap < 0, new_remain_cap * penalty_factor, priority_scores)
    
    # Favor early bins slightly by adding a small bonus
    early_bin_bonus = 1 / (np.arange(len(bins_remain_cap)) + 1)
    priority_scores += early_bin_bonus
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * np.max(bins_remain_cap)
    priority_scores = np.where(bins_remain_cap <= half_full_threshold, priority_scores, priority_scores * 0.9)
    
    return priority_scores
```
