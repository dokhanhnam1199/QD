```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled without overfilling. It applies an inverse capacity scoring,
    harsh overfill penalties, and a slight preference for earlier bins to balance
    the filling process.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score with inverse capacity scoring
    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1), -np.inf)
    
    # Penalize overfilling severely by setting score to -inf
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Slight preference for earlier bins to balance the process
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= bin_indices * 0.01
    
    return priority_scores
```
