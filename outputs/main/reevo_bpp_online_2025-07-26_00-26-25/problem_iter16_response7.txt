```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and avoid overfills by
    prioritizing bins that are nearly full without being overfilled. It also penalizes
    bins that are overly empty to encourage better space utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_initial_cap = np.max(bins_remain_cap + item)
    priority_scores[bins_remain_cap < 0.5 * max_initial_cap] *= 0.5
    
    # Penalize bins that are overly empty to encourage better space utilization
    priority_scores[bins_remain_cap > 0.8 * max_initial_cap] *= 0.5
    
    return priority_scores
```
