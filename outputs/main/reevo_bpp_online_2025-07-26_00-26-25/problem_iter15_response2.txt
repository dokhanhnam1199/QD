```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins by inverse remaining capacity, penalizes overfills heavily, 
    favors early bins slightly, and focuses on simplifying scoring.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Start with a base priority score inversely proportional to remaining capacity
    # Smaller remaining capacity gets higher priority
    priority_scores = 1 / (new_remain_cap + 1e-9)  # Avoid division by zero with a small epsilon
    
    # Penalize overfills heavily
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Favor early bins slightly by adding a small bonus for earlier bins
    priority_scores += (1 - np.arange(len(bins_remain_cap)) / len(bins_remain_cap)) / 10
    
    return priority_scores
```
