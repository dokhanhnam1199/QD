```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation simplifies the logic to prioritize bins that are closer to being full
    while penalizing those that cannot fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that cannot fit the item by setting their priority to -1
    penalty_mask = bins_remain_cap < item
    priority_scores = -np.ones_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins with more remaining capacity above item size
    feasible_capacities = bins_remain_cap[~penalty_mask]
    if feasible_capacities.size > 0:
        # Calculate priority based on remaining capacity
        priority_scores[~penalty_mask] = 1 / (feasible_capacities + 1e-6)  # Adding small epsilon to avoid division by zero
    
    return priority_scores
```
