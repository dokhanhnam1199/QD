```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity and dynamically decays
    preference for early bins to reduce fragmentation. It inversely prioritizes
    bins based on their remaining capacity and penalizes overfills strictly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score (higher score for bins with less remaining capacity)
    priority_scores = 1 / (new_remain_cap + 1)  # Add 1 to avoid division by zero

    # Penalize overfills by setting their score to a very low value
    priority_scores = np.where(new_remain_cap >= 0, priority_scores, -np.inf)

    # Decay early bin preference by multiplying by an inverse index decay factor
    n_bins = len(bins_remain_cap)
    priority_scores *= 1 / (np.arange(1, n_bins + 1) ** 0.5)  # Decay factor

    return priority_scores
```
