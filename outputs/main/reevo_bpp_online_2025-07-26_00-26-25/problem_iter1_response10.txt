```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that are already fairly full
    fullness_penalty = 1 - (bins_remain_cap / bins_remain_cap.max())

    # Penalize bins that are above a certain threshold to distribute load
    max_bins = 10  # Assume this is a reasonable limit for number of bins to start distributing the load
    load_penalty = (np.sum(bins_remain_cap < bins_remain_cap.max() * 0.1) >= max_bins)

    # Calculate a priority score: want to balance so that load is distributed but bins are maximally utilized
    priority_scores = (bins_remain_cap - item - fullness_penalty * item) * (1 - load_penalty)

    return priority_scores
```
