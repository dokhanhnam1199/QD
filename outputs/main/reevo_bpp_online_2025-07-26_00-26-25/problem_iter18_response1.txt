```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full, harshly penalizes bins that cannot hold the item,
    and slightly favors earlier bins to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot hold the item with -inf
    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), -np.inf)
    
    # Favor earlier bins by adding a slight bonus for earlier bins
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.01 * bin_indices
    
    return priority_scores
```
