```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on harshly penalizing overfills, slightly penalizing bins that are more than 60% full,
    and favors earlier bins to minimize fragmentation and improve efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Harshly penalize overfills
    overfill_penalty = np.where(new_remain_cap < 0, -np.inf, 0)
    
    # Calculate the priority score: higher score if the remaining capacity is small (i.e., almost full)
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, 0) + overfill_penalty
    
    # Slightly penalize bins that are already more than 60% full
    half_full_threshold = 0.6 * (np.max(bins_remain_cap) + item)
    priority_scores[new_remain_cap < half_full_threshold] -= 1
    
    # Favor earlier bins with a linear bias
    num_bins = len(bins_remain_cap)
    bin_index_bonus = np.linspace(1, 0, num_bins) * 0.1  # Bonus decreases with bin index
    priority_scores += bin_index_bonus
    
    return priority_scores
```
