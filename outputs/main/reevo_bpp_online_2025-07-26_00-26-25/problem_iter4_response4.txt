```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that cannot fit the item by setting their priority to -inf
    priority_scores = -np.inf * np.ones_like(bins_remain_cap)
    
    # Consider bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    priority_scores[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)
    
    # Break ties by slightly favoring earlier bins (lower indices)
    priority_scores += 1e-7 * np.arange(len(bins_remain_cap))
    
    return priority_scores
```
