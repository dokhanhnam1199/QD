```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that can fit the item, penalizes bins with
    small gaps that would leave significant unused capacity, and avoids considering
    usage frequency directly but encourages filling bins that are closer to being full
    to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority = np.zeros_like(bins_remain_cap)
    
    # Mask for bins that can fit the item
    can_fit_item_mask = bins_remain_cap >= item
    
    # Penalize bins that cannot fit the item significantly
    priority[~can_fit_item_mask] = -2
    
    # Calculate remaining capacity for feasible bins
    remaining_capacity = bins_remain_cap[can_fit_item_mask] - item
    
    # Assign higher priority to bins that can fit the item, preferring those with less remaining capacity
    priority[can_fit_item_mask] = item / (item + remaining_capacity)
    
    # Penalize very small gaps more heavily to reduce fragmentation
    small_gap_threshold = item * 0.1  # Define a threshold for very small gaps (e.g., 10% of item size)
    small_gap_mask = (remaining_capacity < small_gap_threshold) & (remaining_capacity > 0)
    priority[can_fit_item_mask][small_gap_mask] -= 0.5
    
    # Boost the priority of bins that have the second smallest gaps to encourage filling larger spaces
    if np.any(can_fit_item_mask):
        sorted_remaining_capacity = np.sort(remaining_capacity)
        if len(sorted_remaining_capacity) > 1:
            second_smallest_gap = sorted_remaining_capacity[1]
            second_smallest_gap_indices = np.where(np.isclose(remaining_capacity, second_smallest_gap))[0]
            priority[can_fit_item_mask[second_smallest_gap_indices]] += 0.1
    
    return priority
```
