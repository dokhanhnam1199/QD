```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins that are nearly full,
    penalizing bins that cannot hold the item or are too large, and avoids
    rigidly rewarding early bin placement.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Penalize bins that cannot hold the item with -inf
    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Prioritize bins with less remaining capacity after adding the item
    # (i.e., nearly full bins get higher scores)
    priority_scores = -priority_scores
    
    # Penalize bins that are more than half full to avoid them taking more small items
    # Calculate maximum possible capacity from initial bins to determine the threshold
    max_possible_cap = np.max(bins_remain_cap + item)
    threshold = 0.5 * max_possible_cap
    
    # Set priority scores to 0 for bins with remaining capacity after adding the item less than the threshold
    priority_scores = np.where(new_remain_cap < threshold, priority_scores, 0)
    
    return priority_scores
```
