```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on minimizing gaps in bins and avoiding overfill.
    It uses positive incentives for bins with minimal gaps and harsh penalties for bins that would be overfilled.
    It also slightly favors earlier bins to avoid creating gaps at the beginning.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Apply a positive incentive for bins with minimal remaining capacity after adding the item
    priority_scores = np.where(new_remain_cap >= 0, 1 / (1 + new_remain_cap), -np.inf)
    
    # Penalize bins that would be overfilled
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Slightly favor earlier bins by adding a small positive bonus
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores -= 0.001 * bin_indices
    
    return priority_scores
```
