```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and aims to reduce
    fragmentation by preferring bins that are almost full, while heavily penalizing
    overfills. It also slightly favors earlier bins to maintain a balanced usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Calculate the priority score
    # Higher score for bins that are almost full
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    max_bin_cap = np.max(bins_remain_cap + item)
    priority_scores = np.where(bins_remain_cap < 0.5 * max_bin_cap, priority_scores, 0)
    
    # Favor early bins slightly to reduce fragmentation
    bin_indices = np.arange(len(bins_remain_cap))
    priority_scores += 0.05 * (1 / (bin_indices + 1))
    
    return priority_scores
```
