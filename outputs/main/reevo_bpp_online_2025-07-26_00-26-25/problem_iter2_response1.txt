```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Apply a penalty to bins where the remaining capacity is less than the item size
    penalty_mask = bins_remain_cap < item
    # Higher priority to bins with less remaining capacity (lower values in abs diff)
    priority_scores = 1 / (np.abs(bins_remain_cap - item) + 1e-6)  # Adding small epsilon to avoid division by zero
    # Penalize bins with too little capacity for the item
    priority_scores[penalty_mask] *= 0.5
    return priority_scores
```
