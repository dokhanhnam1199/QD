{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used logic to make a decision, emphasizing partially filled bins to avoid\n    potential small fragmentations.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that cannot fit the item with a very low score\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Prioritize bins with less remaining capacity (first-fit decreasing approach)\n    capacity_weight = (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)\n    \n    # Decrement priority for each bin that already has items by count of filled bins\n    filled_bins_discount = np.where(bins_remain_cap != np.ones_like(bins_remain_cap), 0.1, 0.0)\n    \n    # Give preference to bins that have smaller unused space after placing the item to reduce fragmentation\n    subsequent_fragmentation = (bins_remain_cap - item) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)\n    \n    priority_scores = can_fit * (capacity_weight * 0.5 - filled_bins_discount + subsequent_fragmentation * 0.5)\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Find the maximum remaining capacity available in any of the bins\n    max_cap = np.max(bins_remain_cap)\n    \n    # Calculate how full each bin is\n    fullness = 1 - (bins_remain_cap / max_cap)\n    \n    # Penalize bins that cannot fit the current item\n    penalty = np.where(bins_remain_cap < item, -1, 0)\n    \n    # Combine fullness and penalization for priority score\n    priority = fullness + penalty\n    \n    return priority\n\n[Reflection]\nSimplify calculations, focus on fullness, penalize infeasibility, and reduce parameters for cleaner, effective heuristics.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}