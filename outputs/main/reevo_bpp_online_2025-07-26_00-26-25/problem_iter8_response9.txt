```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation penalizes bins that are nearly full to minimize fragmentation,
    favors earlier bins to reduce fragmentation across bins, and penalizes overfills.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores with a base score that decreases with remaining capacity
    priority_scores = -np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)
    
    # Penalize bins that are nearly full (less than 10% remaining capacity)
    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)
    priority_scores = np.where(new_remain_cap <= nearly_full_threshold, priority_scores * 0.01, priority_scores)
    
    # Break ties by slightly favoring earlier bins (lower indices)
    priority_scores += 1e-6 * np.arange(len(bins_remain_cap))
    
    return priority_scores
```
