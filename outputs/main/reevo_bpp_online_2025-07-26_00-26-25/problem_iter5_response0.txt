```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation by preferring bins that
    are almost filled without going over the capacity. It harshly penalizes
    bins that would be overfilled and favors bins that have been used earlier.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Give a higher score to bins that would still have remaining capacity after adding the item
    priority_scores[new_remain_cap >= 0] = new_remain_cap[new_remain_cap >= 0]
    
    # Penalize heavily any bins that would be overfilled
    priority_scores[new_remain_cap < 0] = -np.inf
    
    # Penalize bins that are already more than half full to avoid them taking more small items
    half_full_threshold = 0.5 * np.max(bins_remain_cap + item)
    priority_scores[bins_remain_cap < half_full_threshold] *= 0.8
    
    # Favor earlier bins slightly to minimize gaps
    priority_scores *= (1 - np.arange(len(bins_remain_cap)) / (2 * len(bins_remain_cap)))
    
    return priority_scores
```
