```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that are nearly full and penalizes bins
    that cannot fit the current item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate how full each bin is
    max_cap = np.max(bins_remain_cap, initial=1)
    fullness = 1 - (bins_remain_cap / max_cap)
    
    # Penalize bins that cannot fit the current item
    penalty = np.where(bins_remain_cap < item, -1, 0)
    
    # Combine fullness and penalization for priority score
    priority = fullness + penalty
    
    return priority
```
