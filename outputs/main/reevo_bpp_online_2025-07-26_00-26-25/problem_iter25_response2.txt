```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims to reduce fragmentation and prefers bins that are
    almost filled while penalizing bins that exceed a certain capacity threshold.
    It slightly favors bins that have been used less (early bin favoring) and
    focuses on filling bins nearly to capacity with small item distribution.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    new_remain_cap = bins_remain_cap - item
    
    # Base priority score for bins that can fit the item
    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1e-9), -np.inf)
    
    # Penalize overfilled bins heavily
    priority_scores = np.where(new_remain_cap < 0, priority_scores - 100, priority_scores)
    
    # Minor favoring of early-used bins to distribute small items
    num_bins = len(bins_remain_cap)
    bin_indices = np.arange(num_bins)
    priority_scores += (num_bins - bin_indices) * 0.01
    
    return priority_scores
```
