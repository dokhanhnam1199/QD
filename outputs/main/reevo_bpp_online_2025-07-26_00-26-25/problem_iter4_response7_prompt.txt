{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It prioritizes bins that are closer to being full\n    while avoiding negative priorities and penalizing bins that cannot fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacity after placing the item\n    remaining_capacity_after_item = bins_remain_cap - item\n    \n    # Priority score is remaining capacity after item divided by item size, avoiding negative scores\n    priority = np.maximum(0, remaining_capacity_after_item) / item\n    \n    # Penalize bins that cannot fit the item\n    can_fit_item_mask = bins_remain_cap >= item\n    priority[~can_fit_item_mask] -= 2  # Large penalty for infeasible bins\n    \n    # Encourage second-largest gaps to reduce fragmentation\n    if np.any(can_fit_item_mask):\n        # Find the lowest and second lowest remaining capacities that can fit the item\n        remaining_capacities = remaining_capacity_after_item[can_fit_item_mask]\n        unique_capacities = np.unique(remaining_capacities)\n        \n        if len(unique_capacities) > 1:\n            second_lowest_capacity = unique_capacities[1]\n            # Identify bins with the second lowest remaining capacity\n            second_lowest_indices = np.where(np.isclose(remaining_capacity_after_item, second_lowest_capacity))[0]\n            priority[second_lowest_indices] += 1  # Boost these bins\n            \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios. Bins with the smallest\n    gap after placing the item receive a significant boost to their priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    # Use a max function to avoid negative priorities and ensure feasibility\n    priority = np.maximum(0, bins_remain_cap - item) / item\n    \n    # Give a clear preference to bins that can fit the item at all\n    can_fit_item_mask = bins_remain_cap >= item\n    priority[~can_fit_item_mask] -= 2  # Decrease priority for bins that cannot fit the item\n\n    # Boost bins with the smallest gap after placing the item\n    if np.any(can_fit_item_mask):\n        gaps = bins_remain_cap - item\n        min_gap = np.min(gaps[can_fit_item_mask])\n        priority[gaps == min_gap] += 1  # Boost bins with the smallest gap\n\n    return priority\n\n[Reflection]\nPrioritize bins with smallest gaps, penalize infeasible bins, and avoid negative scores for unused bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}