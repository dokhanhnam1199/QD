{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation inversely prioritizes bins with low remaining capacity,\n    penalizes overfills harshly, and slightly favors early bins for balanced packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Priority score inversely proportional to remaining capacity\n    priority_scores = np.where(new_remain_cap >= 0, 1 / (new_remain_cap + 1), -np.inf)\n    \n    # Penalize overfills harshly\n    priority_scores = np.where(new_remain_cap < 0, -np.inf, priority_scores)\n    \n    # Slightly favor early bins by adding a small bonus\n    bin_indices = np.arange(len(bins_remain_cap))\n    priority_scores += bin_indices * 0.01  # Adjust coefficient as needed\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing bins that are nearly full,\n    penalizing bins that cannot hold the item or are too large, and avoids\n    rigidly rewarding early bin placement.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    new_remain_cap = bins_remain_cap - item\n    \n    # Penalize bins that cannot hold the item with -inf\n    priority_scores = np.where(new_remain_cap >= 0, new_remain_cap, -np.inf)\n    \n    # Prioritize bins with less remaining capacity after adding the item\n    # (i.e., nearly full bins get higher scores)\n    priority_scores = -priority_scores\n    \n    # Penalize bins that are more than half full to avoid them taking more small items\n    max_possible_cap = np.max(bins_remain_cap + item)\n    priority_scores = np.where(bins_remain_cap - item < 0.5 * max_possible_cap, priority_scores, 0)\n    \n    return priority_scores\n\n[Reflection]\nFocus on nearly full bins, penalize overfills strictly, balance small item distribution.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}