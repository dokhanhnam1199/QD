```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that have the least remaining capacity that can still fit the item.
    It penalizes bins that won't fit the item and avoids negative priority scores for feasible options.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    # Set negative infinity to those bins that cannot fit the item
    priority_scores = np.where(remain_cap_after_add >= 0, remain_cap_after_add, -np.inf)
    # We want to maximize the filled space, thus we invert the remaining capacity
    priority_scores = -priority_scores
    # Avoid negative priority scores for feasible options by adding a constant offset
    min_priority = np.min(priority_scores)
    priority_scores = priority_scores - min_priority if min_priority < 0 else priority_scores
    # Add a slight penalty to bins that already have zero capacity left (i.e., are full)
    priority_scores[bins_remain_cap == 0] += 1e6
    return priority_scores
```
