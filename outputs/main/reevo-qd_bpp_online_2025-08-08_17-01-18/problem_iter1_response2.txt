```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    In the Worst Fit strategy for the online Bin Packing Problem, we aim to place
    the current item into the bin that has the most remaining capacity, but only
    if the item fits. The goal is to leave smaller capacities in other bins for
    potentially smaller items that might come later. This strategy aims to
    balance the remaining capacities across bins as much as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin. Bins that cannot fit the
        item receive a score of 0.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # For each bin, if the item fits, its priority is its remaining capacity.
    # This ensures that bins with the most space are prioritized.
    # If the item does not fit, the priority remains 0.
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]
    return priorities
```
