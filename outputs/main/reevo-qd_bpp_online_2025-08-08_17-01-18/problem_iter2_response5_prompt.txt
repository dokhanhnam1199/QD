{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using an epsilon-greedy strategy.\n\n    The strategy favors bins that are a \"good fit\" for the item (i.e., leaving\n    a small remaining capacity), but with a probability epsilon, it explores\n    other bins randomly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.2  # Probability of exploring\n\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n\n    # Calculate a \"goodness of fit\" score for each bin\n    # A smaller remaining capacity after fitting the item is considered better.\n    # We use 1 / (remaining_capacity - item + 1e-9) to ensure division by zero is avoided\n    # and to give higher scores to bins with less remaining capacity.\n    # Only consider bins that can actually fit the item.\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities[suitable_bins_mask] = 1.0 / (bins_remain_cap[suitable_bins_mask] - item + 1e-9)\n\n    # Epsilon-greedy part: with probability epsilon, choose a random suitable bin\n    if np.random.rand() < epsilon:\n        # Get indices of suitable bins\n        suitable_indices = np.where(suitable_bins_mask)[0]\n        if len(suitable_indices) > 0:\n            # Randomly pick one suitable bin\n            chosen_index = np.random.choice(suitable_indices)\n            # Assign a very high priority to the randomly chosen bin\n            priorities[chosen_index] = np.max(priorities) + 1.0 # Give it a slightly higher priority than the best greedy choice\n    else:\n        # Otherwise, follow the greedy approach (already calculated in `priorities`)\n        pass # priorities are already set to the greedy scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n\n    This heuristic prioritizes bins that can fit the item and are \"nearly full\"\n    (i.e., have little remaining capacity after fitting the item), as this\n    encourages tighter packing. A small random exploration component is added\n    to avoid getting stuck in local optima.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.1  # Probability of random exploration\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate scores for bins that can fit the item\n    # We want to prioritize bins that leave little remaining capacity\n    # \"nearly full\" bins are good candidates.\n    # The score is the inverse of the remaining capacity after fitting the item.\n    # A smaller remaining capacity results in a higher score.\n    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item\n    \n    # Avoid division by zero or very small numbers which can lead to very large priorities.\n    # A small epsilon is added to the denominator.\n    # Alternatively, we could cap the priorities or use a different scoring mechanism.\n    scores = 1.0 / (remaining_capacity_after_fit + 1e-9) \n    \n    # Normalize scores to be between 0 and 1 for better epsilon-greedy application\n    if scores.size > 0:\n        min_score = np.min(scores)\n        max_score = np.max(scores)\n        if max_score > min_score:\n            priorities[can_fit_mask] = (scores - min_score) / (max_score - min_score)\n        else:\n            # If all scores are the same, assign a neutral priority\n            priorities[can_fit_mask] = 0.5\n    \n    # Epsilon-Greedy exploration: with probability epsilon, choose a random bin that fits\n    if np.random.rand() < epsilon:\n        possible_bins = np.where(can_fit_mask)[0]\n        if possible_bins.size > 0:\n            random_bin_index = np.random.choice(possible_bins)\n            priorities = np.zeros_like(bins_remain_cap, dtype=float)\n            priorities[random_bin_index] = 1.0 # Assign highest priority to the randomly chosen bin\n    \n    return priorities\n\n[Reflection]\nNormalize scores for better epsilon-greedy. Explore less often with better scoring.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}