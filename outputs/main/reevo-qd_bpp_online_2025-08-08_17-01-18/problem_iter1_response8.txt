```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an epsilon-greedy strategy.

    The strategy favors bins that are a "good fit" for the item (i.e., leaving
    a small remaining capacity), but with a probability epsilon, it explores
    other bins randomly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.2  # Probability of exploring

    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)

    # Calculate a "goodness of fit" score for each bin
    # A smaller remaining capacity after fitting the item is considered better.
    # We use 1 / (remaining_capacity - item + 1e-9) to ensure division by zero is avoided
    # and to give higher scores to bins with less remaining capacity.
    # Only consider bins that can actually fit the item.
    suitable_bins_mask = bins_remain_cap >= item
    priorities[suitable_bins_mask] = 1.0 / (bins_remain_cap[suitable_bins_mask] - item + 1e-9)

    # Epsilon-greedy part: with probability epsilon, choose a random suitable bin
    if np.random.rand() < epsilon:
        # Get indices of suitable bins
        suitable_indices = np.where(suitable_bins_mask)[0]
        if len(suitable_indices) > 0:
            # Randomly pick one suitable bin
            chosen_index = np.random.choice(suitable_indices)
            # Assign a very high priority to the randomly chosen bin
            priorities[chosen_index] = np.max(priorities) + 1.0 # Give it a slightly higher priority than the best greedy choice
    else:
        # Otherwise, follow the greedy approach (already calculated in `priorities`)
        pass # priorities are already set to the greedy scores

    return priorities
```
