```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit Decreasing logic.

    This heuristic prioritizes bins that can accommodate the item and are "tight fits"
    to minimize wasted space. Bins that are too small for the item receive a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate priority as the inverse of the remaining capacity
    # A smaller remaining capacity means a tighter fit, hence higher priority.
    # We add a small epsilon to avoid division by zero if a bin has exactly the item's size.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9)

    return priorities
```
