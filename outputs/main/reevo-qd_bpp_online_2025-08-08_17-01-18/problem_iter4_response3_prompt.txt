{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n\n    The strategy favors bins that are a \"good fit\" for the item (i.e., leaving\n    a small remaining capacity), but with a probability epsilon, it assigns a\n    consistent exploration score to encourage trying less optimal bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.2  # Probability of exploration\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros(num_bins)\n\n    # Identify bins that can accommodate the item\n    suitable_bins_mask = bins_remain_cap >= item\n    suitable_bins_indices = np.where(suitable_bins_mask)[0]\n\n    if len(suitable_bins_indices) == 0:\n        return priorities  # No bin can fit the item\n\n    # --- Exploitation Component (Good Fit) ---\n    # Calculate a score based on how well the item fits.\n    # We want to prioritize bins that leave minimal remaining capacity.\n    # Score = 1 / (remaining_capacity - item + epsilon)\n    # A smaller difference means a higher score.\n    fit_scores = 1.0 / (bins_remain_cap[suitable_bins_indices] - item + 1e-6)\n\n    # Normalize fit_scores to a 0-1 range to represent the \"exploitation\" priority.\n    # Higher score means better fit.\n    if fit_scores.max() > fit_scores.min():\n        exploitation_priorities = (fit_scores - fit_scores.min()) / (fit_scores.max() - fit_scores.min())\n    else:\n        exploitation_priorities = np.ones(len(suitable_bins_indices)) # All fits are equally good\n\n    # Assign the exploitation priorities to the suitable bins\n    priorities[suitable_bins_indices] = exploitation_priorities\n\n    # --- Exploration Component ---\n    # With probability epsilon, overwrite the exploitation priority with a\n    # consistent, lower exploration score for a random subset of suitable bins.\n    # This encourages exploration of bins that might not be the immediate best fit.\n    exploration_score = 0.1 # A fixed low score for exploration\n\n    # Determine which suitable bins will be subject to exploration\n    num_suitable = len(suitable_bins_indices)\n    explore_indices_in_suitable = np.random.choice(\n        num_suitable,\n        size=int(np.ceil(epsilon * num_suitable)),\n        replace=False\n    )\n    \n    # Get the actual indices in the original bins_remain_cap array\n    bins_to_explore_indices = suitable_bins_indices[explore_indices_in_suitable]\n\n    # Assign the exploration score to these bins\n    priorities[bins_to_explore_indices] = exploration_score\n\n    # Ensure that bins that cannot fit the item have zero priority\n    priorities[~suitable_bins_mask] = 0\n\n    # Optional: Normalize final priorities if a specific range is required by downstream logic.\n    # For now, we return the scores as calculated, where higher means more preferred.\n    # A simple max-min normalization can be applied if needed:\n    # if priorities.max() > priorities.min():\n    #     final_priorities = (priorities - priorities.min()) / (priorities.max() - priorities.min())\n    # else:\n    #     final_priorities = np.ones(num_bins) * 0.5\n    # return final_priorities\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a Softmax-Based Best Fit strategy.\n\n    This strategy prioritizes bins that have a remaining capacity closest to the item size,\n    encouraging tighter packing. It uses a softmax function to convert the \"closeness\"\n    score into a probability-like priority, controlled by a temperature parameter.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros(num_bins)\n\n    # Identify bins that can accommodate the item\n    suitable_bins_mask = bins_remain_cap >= item\n    suitable_bins_indices = np.where(suitable_bins_mask)[0]\n\n    if len(suitable_bins_indices) == 0:\n        # If no bin can fit the item, return all zeros\n        return priorities\n\n    # Calculate the \"closeness\" to a perfect fit.\n    # We want to minimize the remaining capacity after placing the item.\n    # A smaller difference (bins_remain_cap - item) is a better fit.\n    # To use softmax effectively, we convert this to a score where higher is better.\n    # We can use the negative of the difference, or a transformation that maps\n    # smaller differences to larger positive scores.\n    # A simple approach is to consider the inverse of the remaining capacity after fit.\n    # To prioritize tighter fits, we want bins where (bins_remain_cap - item) is small.\n    # Let's calculate the slack: slack = bins_remain_cap[suitable_bins_indices] - item\n    # We want to give higher priority to smaller slacks.\n    slack_values = bins_remain_cap[suitable_bins_indices] - item\n\n    # Transform slack values into scores where smaller slack means higher score.\n    # We can use 1 / (slack + epsilon) or exp(-slack / temperature) etc.\n    # Using exp(-slack / temperature) directly relates to Softmax and is more robust.\n    # A lower temperature will favor bins with very little slack more strongly.\n    temperature = 0.2  # Hyperparameter: controls the \"sharpness\" of the preference for tight fits\n    epsilon = 1e-9     # Small value to avoid division by zero or log(0) if using other transformations\n\n    # Calculate scores for softmax. Higher scores for tighter fits.\n    # Using exp(-slack / temperature) makes smaller slack values result in larger scores.\n    # We add epsilon to slack_values before division to prevent potential issues if slack is exactly 0.\n    # Alternatively, directly use exp(-slack / temperature).\n    # Let's use exp(-slack / temperature) for a more direct softmax interpretation.\n    try:\n        softmax_input_scores = -slack_values / temperature\n        exp_scores = np.exp(softmax_input_scores)\n        # Normalize scores to get probabilities (priorities)\n        probabilities = exp_scores / np.sum(exp_scores)\n    except OverflowError:\n        # If scores are too large, it means some bins are extremely good fits.\n        # In such cases, a simpler approach might be to give a high score to the best fit(s).\n        # For now, we can distribute probabilities more evenly if overflow occurs,\n        # or assign a very high probability to the bin with minimum slack.\n        min_slack_idx = np.argmin(slack_values)\n        probabilities = np.zeros_like(slack_values)\n        probabilities[min_slack_idx] = 1.0\n\n    # Assign these calculated priorities back to the original bins\n    priorities[suitable_bins_indices] = probabilities\n\n    return priorities\n\n[Reflection]\nBetter heuristics often use:\n- Probabilistic exploration (like Softmax)\n- Metrics reflecting \"good fits\" or minimizing waste\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}