```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Fit Decreasing" like strategy for the
    priority function within an online First Fit context. For each item, it
    prioritizes bins that can accommodate the item, and among those, it
    prefers bins that will have the least remaining capacity after the item
    is placed. This aims to "tightly pack" bins, potentially leaving larger
    spaces in other bins for future larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate remaining capacity after placing the item
    potential_remaining_cap = bins_remain_cap - item
    
    # Bins that can accommodate the item have a non-negative remaining capacity
    can_accommodate = potential_remaining_cap >= 0
    
    # Assign a priority:
    # For bins that can accommodate the item, the priority is the inverse of
    # the remaining capacity after placement. Smaller remaining capacity gets higher priority.
    # We use a large number (e.g., 1e6) for bins that cannot accommodate the item
    # to ensure they have a much lower priority.
    
    # To make smaller remaining capacities have higher priority, we can use negative.
    # The more negative, the better.
    priorities[can_accommodate] = -potential_remaining_cap[can_accommodate]
    
    # Bins that cannot accommodate the item get a very low priority (a large positive number)
    # We can also set it to 0 if we want to strictly exclude them if a better option exists.
    # However, a very low negative number makes more sense for sorting if we want to be
    # sure they are not picked. For First Fit, it's about *which* bin to try first.
    # A common way to handle "cannot accommodate" in priority systems is to give them a
    # very low score. If we want to avoid them entirely, we can assign a score that will
    # never be chosen if any other valid option exists. Let's use a value that is
    # significantly less desirable than any valid remaining capacity.
    # Since remaining capacities are non-negative, negative values are good.
    # We can use a large negative number for those that cannot fit.
    priorities[~can_accommodate] = -1e9 # A very low priority
    
    return priorities
```
