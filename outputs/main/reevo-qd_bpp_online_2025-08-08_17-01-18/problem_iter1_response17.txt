```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    In Random Fit, we assign an equal probability of selecting any bin that can
    accommodate the item. This implementation approximates that by giving a
    positive score to all valid bins and a zero score to invalid bins, then
    applying a small random perturbation. The selection mechanism (not part of
    this function) would then pick the highest score, which effectively
    introduces randomness among valid bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a base priority to bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = 1.0

    # Add a small random perturbation to break ties and introduce randomness
    # The range [-0.1, 0.1] is arbitrary but small enough not to change the
    # fundamental decision of whether a bin can fit the item.
    random_perturbation = np.random.uniform(-0.05, 0.05, size=bins_remain_cap.shape)
    priorities += random_perturbation

    # Ensure that bins that cannot fit the item still have a zero priority
    priorities[~can_fit_mask] = 0.0

    return priorities
```
