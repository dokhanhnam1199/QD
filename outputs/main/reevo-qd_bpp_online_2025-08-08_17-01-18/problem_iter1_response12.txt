```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    In Worst Fit, we select the bin that has the most remaining capacity.
    This strategy aims to leave larger remaining capacities in bins,
    hoping to accommodate larger items later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # In Worst Fit, we want to prioritize bins with the most remaining capacity.
    # Therefore, we can directly use the remaining capacity as the priority score.
    # Bins that can fit the item will have a positive remaining capacity after insertion.
    # Bins that cannot fit the item should have a very low or zero priority.

    # Initialize priorities to zero
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, the priority is their remaining capacity.
    # The higher the remaining capacity, the higher the priority (Worst Fit).
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
