```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    This heuristic prioritizes bins that are a "close fit" for the item.
    A smaller remaining capacity that can still accommodate the item results
    in a higher priority. This is achieved by using the inverse of the
    difference between remaining capacity and item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Calculate the difference between remaining capacity and item size for bins that can fit the item
    diff = bins_remain_cap - item
    # Where the item can fit (diff >= 0), calculate the inverse of the difference.
    # Add a small epsilon to the denominator to avoid division by zero if diff is exactly 0.
    # A smaller difference (closer fit) leads to a larger inverse value (higher priority).
    # Bins that cannot fit the item will have a priority of 0.
    priorities[diff >= 0] = 1.0 / (diff[diff >= 0] + 1e-9)
    return priorities
```
