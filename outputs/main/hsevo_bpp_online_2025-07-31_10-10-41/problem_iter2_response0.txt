```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority, favoring tightest fits (Best Fit) with a normalized scale.

    This heuristic prioritizes bins that minimize wasted space, assigning higher scores
    to tighter linear fits (0 to 1, with 1 being a perfect fit). Bins incapable
    of holding the item receive the lowest possible priority, ensuring robustness.
    """
    # Robustness check from v1: Non-positive items are typically not valid in BPP.
    if item <= 0:
        return np.full_like(bins_remain_cap, -np.inf)

    # Calculate potential remaining space (wasted space) if the item were placed.
    # This is the core "Best Fit" principle, shared conceptually by v0 and v1.
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priorities to a very low value, ensuring non-fitting bins are never chosen.
    # This element is common to both v0 and v1.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can actually fit.
    fitting_bins_mask = potential_remaining_space >= 0

    # Extract the 'wasted space' for only the bins where the item fits.
    wasted_space_for_fits = potential_remaining_space[fitting_bins_mask]

    # Dynamically normalize priorities within the range of fitting bins.
    # This combines the 'quantifying desirability' aspect of v1 with v0's linearity.
    # We find the maximum 'wasted space' among currently viable bins to scale priorities.
    if wasted_space_for_fits.size > 0:
        max_wasted_space_among_fits = np.max(wasted_space_for_fits)
        
        # If all fitting bins are perfect fits (max_wasted_space is 0), assign max priority.
        if max_wasted_space_among_fits == 0:
            priorities[fitting_bins_mask] = 1.0
        else:
            # Linearly scale the priority: smallest wasted space (0) gets 1.0,
            # largest wasted space gets 0.0. This is a linear transformation
            # of v0's priority, ensuring a positive, normalized scale.
            priorities[fitting_bins_mask] = 1.0 - (wasted_space_for_fits / max_wasted_space_among_fits)
    
    return priorities
```
