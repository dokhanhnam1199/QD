```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for adding an item to each bin using a robust Best Fit strategy.

    Prioritizes bins minimizing leftover space after placement, maximizing bin fullness.
    Handles non-positive items gracefully, combining proven linear best fit with input robustness.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Incorporate robustness: non-positive items cannot be packed, assign lowest priority.
    # This element is adapted from the "worse" heuristic for improved input handling.
    if item <= 0:
        return priorities

    # Apply the empirically superior Best Fit logic: linear negative relationship to remaining space.
    # This maximizes the priority for bins that leave the least amount of space.
    valid_bins_mask = bins_remain_cap >= item
    leftover_space_if_placed = bins_remain_cap[valid_bins_mask] - item
    priorities[valid_bins_mask] = -leftover_space_if_placed

    return priorities
```
