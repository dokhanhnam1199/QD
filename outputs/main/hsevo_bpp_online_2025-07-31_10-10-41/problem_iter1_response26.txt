```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    Inspired by the 'Event Horizon Proximity Principle'. We aim to place
    the incoming 'quantum of mass' (item) into the 'gravitational well' (bin)
    that brings its remaining capacity closest to its 'event horizon' (full capacity),
    without exceeding it. This strategy maximizes the 'density' within each bin,
    thereby minimizing the overall 'curvature of spacetime' (the total number of bins).

    A bin that results in a smaller remaining capacity after packing is considered
    a more attractive 'gravitational singularity', indicating higher efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    # This represents the 'distance' from the bin's event horizon after interaction.
    hypothetical_remain_cap = bins_remain_cap - item

    # Initialize all priorities to a state of effective 'negative infinity'.
    # Bins that cannot accommodate the item are effectively 'beyond their event horizon'
    # and are not viable candidates.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify the 'observable universe' of bins where the item can actually fit.
    # These are bins where hypothetical_remain_cap is non-negative.
    can_fit_mask = hypothetical_remain_cap >= 0

    # For viable bins, the priority is higher when the remaining capacity
    # is smaller. A smaller remaining capacity signifies closer proximity
    # to the 'event horizon' (optimal utilization).
    # We achieve this by negating the remaining capacity: a smaller positive value
    # becomes a larger (less negative) priority score. A perfect fit (0 remaining)
    # yields the highest score (0).
    priorities[can_fit_mask] = -hypothetical_remain_cap[can_fit_mask]

    return priorities
```
