```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for adding an item to each bin using a Proportional Best Fit strategy.

    Maximizes the item's proportion of a bin's remaining capacity, prioritizing bins where the item
    fits most 'tightly' relative to the bin's current size. Includes robust input handling.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Incorporate robustness: non-positive items cannot be packed, assign lowest priority.
    # This element is directly adopted from the 'priority_v0' heuristic for safety.
    if item <= 0:
        return priorities

    # Identify bins where the item can fit. This clear masking approach is similar to 'priority_v0'.
    valid_bins_mask = bins_remain_cap >= item

    # Apply a "Proportional Best Fit" strategy, which the analysis indicated as highly effective
    # (similar to "Heuristic 1st"). This aims to maximize the ratio of the item's size to the
    # bin's remaining capacity, leading to efficient space utilization.
    # bins_remain_cap[valid_bins_mask] will always be > 0 because item > 0 and fits.
    priorities[valid_bins_mask] = item / bins_remain_cap[valid_bins_mask]

    return priorities
```
