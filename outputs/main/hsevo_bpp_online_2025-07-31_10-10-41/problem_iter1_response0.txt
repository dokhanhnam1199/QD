```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit (BF) strategy.

    Bins where the item fits perfectly get the highest priority. Among bins where the item fits,
    those leaving less remaining capacity are preferred. Bins where the item does not fit
    are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores
    # We use -np.inf for bins where the item cannot fit, ensuring they are never chosen.
    # For bins where it fits, we prioritize by minimizing the remaining space.
    # A smaller remaining_after_placement value means a better fit (closer to zero).
    # To maximize this as a priority score, we take the negative of remaining_after_placement.
    # So, a perfect fit (remaining_after_placement = 0) gets a priority of 0,
    # a near-perfect fit (e.g., remaining_after_placement = 0.1) gets -0.1,
    # and a loose fit (e.g., remaining_after_placement = 10) gets -10.
    # The higher the value (closer to 0 for negatives, or 0 itself), the better.
    priorities = -remaining_after_placement

    # Set priority to negative infinity for bins where the item does not fit
    # (i.e., remaining_after_placement is negative)
    priorities[remaining_after_placement < 0] = -np.inf

    return priorities
```
