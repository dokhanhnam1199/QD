```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Worst Fit (WF) strategy.

    Worst Fit aims to keep bins as "open" as possible by placing the item into the bin that will
    have the most remaining capacity. This strategy can be beneficial for keeping large contiguous
    spaces available for future, potentially larger, items. Bins where the item does not fit
    are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores.
    # For Worst Fit, we want to maximize the remaining_after_placement.
    # A larger positive value means more space left, which is preferred.
    priorities = remaining_after_placement

    # Set priority to negative infinity for bins where the item does not fit.
    # This ensures these bins are never selected.
    priorities[remaining_after_placement < 0] = -np.inf

    return priorities
```
