```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for online Bin Packing, combining Best Fit's efficiency with robustness.

    This heuristic prioritizes bins that offer the 'snuggest' fit, minimizing
    wasted space, consistent with the Best Fit strategy. A perfect fit yields
    the highest priority. This ensures optimal utilization and compact packing.
    Invalid item sizes are handled robustly.
    """

    # Robustness check: If the item size is non-positive, it's considered invalid for packing.
    # No bin should ever be chosen for such an item. This prevents erroneous behavior
    # for items that technically 'fit everywhere' but represent no actual packing.
    if item <= 0:
        return np.full_like(bins_remain_cap, -np.inf)

    # Calculate the hypothetical remaining space if the item were placed in each bin.
    # This 'potential remainder' is crucial for determining the 'snugness' of the fit.
    potential_remainders = bins_remain_cap - item

    # Initialize all priorities to negative infinity. This ensures that bins where
    # the item cannot fit, or which are otherwise undesirable, are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify all bins capable of containing the incoming item. Only these bins
    # are relevant for further priority calculation.
    can_fit_mask = potential_remainders >= 0

    # For those bins where the item fits, assign a priority based on the Best Fit principle.
    # The priority is derived from the negative of the remaining space. This means:
    # - A remainder of 0 (a perfect fit) yields the highest priority (0).
    # - A larger positive remainder (more wasted space) yields a lower (more negative) priority.
    # When selecting the maximum priority, this naturally selects the smallest non-negative remainder,
    # optimizing for the tightest possible fit and efficient space utilization.
    priorities[can_fit_mask] = -potential_remainders[can_fit_mask]

    return priorities
```
