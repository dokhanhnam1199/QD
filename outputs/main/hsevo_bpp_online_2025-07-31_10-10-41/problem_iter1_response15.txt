```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the pursuit of the most harmonious fit, seeking to leave
    the least void within a celestial sphere, I decree that the optimal
    placement is that which most snugly embraces the item, thus minimizing
    the remaining, unproductive space. A perfect fit earns the highest acclaim.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the space that would remain in each bin if the item were placed there.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priorities to zero. Bins where the item does not fit will inherently
    # retain this zero priority.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Define a small epsilon to prevent division by zero and to differentiate
    # between varying small positive remaining spaces. This acts as a 'fineness' of measurement.
    epsilon = 1e-9 

    # Identify the bins where the item can physically fit (remaining space is non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Apply the priority logic only to bins where the item can fit.
    
    # Case 1: The item fits perfectly (remaining space is exactly zero).
    # This is the most desired outcome, akin to a perfectly elliptical orbit.
    # Assign a distinctly very high priority to ensure it is always chosen over a non-perfect fit.
    perfect_fit_mask = (potential_remaining_space == 0) & can_fit_mask
    if np.any(perfect_fit_mask):
        priorities[perfect_fit_mask] = 1.0 / epsilon # A very large number

    # Case 2: The item fits, but some space remains (remaining space is positive).
    # Following the principle of 'Best Fit', we aim to minimize this leftover void.
    # A smaller positive remaining space signifies a better, more harmonious fit,
    # and thus should receive a higher priority. We achieve this with an inverse relationship.
    non_perfect_fit_mask = (potential_remaining_space > 0) & can_fit_mask
    if np.any(non_perfect_fit_mask):
        priorities[non_perfect_fit_mask] = 1.0 / (potential_remaining_space[non_perfect_fit_mask] + epsilon)

    return priorities
```
