{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines Best Fit (proportional utilization) with Smallest Fit (current bin capacity).\n    Prioritizes bins yielding a high fill ratio while also preferring bins with smaller current remaining capacities to close them faster.\n    \"\"\"\n    # Initialize priority scores to negative infinity for non-fitting or invalid cases.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Handle invalid item size: If item is non-positive, it cannot be packed.\n    if item <= 0:\n        return priorities\n\n    # Identify bins where the item can fit.\n    fitting_bins_mask = bins_remain_cap >= item\n\n    # Calculate priorities for fitting bins by combining two effective strategies:\n    # 1. Proportional Best Fit: `item / bins_remain_cap` (maximizes relative fill).\n    # 2. Smallest Fit: `-bins_remain_cap` (prioritizes bins with less remaining space to close them).\n    # The sum balances maximizing the item's proportional use of space with minimizing the bin's overall remaining space.\n    priorities[fitting_bins_mask] = \\\n        (item / bins_remain_cap[fitting_bins_mask]) + \\\n        (-bins_remain_cap[fitting_bins_mask])\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}