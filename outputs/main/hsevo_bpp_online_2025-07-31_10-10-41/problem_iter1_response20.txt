```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This version implements a 'Best Fit' heuristic with a slight modification
    to handle perfect fits robustly. It prioritizes bins that will have the
    smallest remaining capacity after the item is placed, thus aiming to
    leave as little 'waste' as possible in the selected bin. Perfect fits
    (where item exactly fills the bin) receive the highest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score indicates higher priority for selecting the bin.
    """
    # Calculate the remaining capacity of each bin if the current item were placed into it.
    post_placement_remain_cap = bins_remain_cap - item

    # Initialize priorities for all bins.
    # Bins where the item does not fit must have a very low priority (e.g., -infinity)
    # so they are never chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # A small positive constant (epsilon) is added to the denominator to:
    # 1. Prevent division by zero if an item perfectly fills a bin (post_placement_remain_cap is 0).
    # 2. Ensure that perfect fits result in the highest possible finite priority score,
    #    as 1/epsilon will be a very large number.
    epsilon = 1e-9 

    # Identify which bins can accommodate the current item.
    # These are bins where the remaining capacity after placing the item is non-negative.
    fit_mask = post_placement_remain_cap >= 0

    # For the bins where the item fits, calculate their priority.
    # The 'Best Fit' strategy seeks to minimize the remaining capacity after placement.
    # Therefore, the priority is inversely proportional to this remaining capacity.
    # A smaller remaining capacity (closer to a perfect fit) leads to a higher priority score.
    priorities[fit_mask] = 1.0 / (post_placement_remain_cap[fit_mask] + epsilon)

    return priorities
```
