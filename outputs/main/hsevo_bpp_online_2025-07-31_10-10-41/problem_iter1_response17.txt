```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Feynman's Quantum Bin Packing Principle:
    # An item, like a quantum particle, seeks the "lowest energy state" in a bin,
    # minimizing the "residual vacuum" after its placement.

    # Calculate the 'potential energy' or 'gap' that would be left in each bin after placement.
    # This 'gap' is the 'excitation energy' we want to minimize.
    # A negative gap means the bin cannot accommodate the item; it's an 'infinite potential wall'.
    delta = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit the item get zero priority.
    # This ensures they are not chosen.
    scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify valid bins (where the item can actually fit, i.e., delta >= 0).
    can_fit_mask = (delta >= 0)

    # For these valid bins, calculate the score.
    # The 'attraction' or 'priority' to a bin is inversely proportional to the 'gap' left.
    # A smaller gap means a higher priority, as it leads to a more 'compact' or 'filled' bin state.
    # We add a tiny epsilon (1e-9) to the denominator. This serves a dual purpose:
    # 1. Prevents division by zero if delta is exactly 0 (a perfect fit).
    # 2. Gives perfect fits an extremely high, finite score (1 / 1e-9 = 1 Billion).
    # This naturally makes perfect fits the highest priority, then near-perfect, and so on,
    # embodying the principle of minimizing 'wasted' space.
    scores[can_fit_mask] = 1.0 / (delta[can_fit_mask] + 1e-9)

    # Bins where `delta < 0` (cannot fit) retain their `0.0` score from initialization,
    # ensuring they are implicitly deprioritized.

    return scores
```
