```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin, incorporating Best Fit,
    a strong bonus for perfect fits, and an additive incentive for near-completion.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_after_placement = bins_remain_cap - item

    # Initialize priority scores based on Best Fit (BF) strategy:
    # Prefer bins leaving less remaining capacity. A smaller positive
    # remaining_after_placement means a better fit. We take the negative
    # to convert this into a maximization problem for priority scores.
    # Example: 0.1 remaining -> -0.1 priority; 10 remaining -> -10 priority.
    priorities = -remaining_after_placement

    # Set priority to negative infinity for bins where the item does not fit.
    # This ensures they are never chosen unless no other option exists (implying a new bin).
    priorities[remaining_after_placement < 0] = -np.inf

    # --- Additive Incentives ---

    # Determine a robust magnitude for bonus values based on the scale of bin capacities.
    # This helps in tuning parameters like thresholds and bonus magnitudes so they
    # are relevant regardless of the actual numerical scale of bin sizes.
    positive_caps = bins_remain_cap[bins_remain_cap > 0]
    # Use the maximum remaining capacity as a reference scale. If no positive capacities
    # exist (e.g., all bins are full or array is empty), default to 1.0 to prevent errors
    # and provide a baseline for bonus calculation.
    max_relevant_capacity = np.max(positive_caps) if positive_caps.size > 0 else 1.0

    # 1. Strong Bonus for Perfect Fits:
    # This bonus ensures that a perfect fit (remaining capacity becomes 0)
    # gets a score strictly higher than any non-perfect fit.
    # We use a small epsilon for floating-point comparisons to define "perfect fit".
    EPSILON_PERFECT_FIT = 1e-9
    is_perfect_fit = np.isclose(remaining_after_placement, 0.0, atol=EPSILON_PERFECT_FIT)

    # The bonus magnitude must be large enough to make a perfect fit dominate.
    # A safe approach is to set it higher than the maximum possible negative priority
    # a non-perfect fit could receive (which is roughly -max_relevant_capacity).
    # Setting it to `2 * max_relevant_capacity + 1.0` ensures this dominance.
    PERFECT_FIT_BONUS_MAGNITUDE = max_relevant_capacity * 2 + 1.0
    priorities[is_perfect_fit] += PERFECT_FIT_BONUS_MAGNITUDE

    # 2. Additive Incentive for "Near Completion" / "Tight Fits":
    # This bonus encourages placing items into bins that are almost full after placement,
    # but not perfectly full. This promotes "closing" bins efficiently.
    # It applies only if the item fits and it's not a perfect fit.
    
    # Define "near completion" as leaving a remaining capacity below a certain threshold.
    # This threshold is set as a fraction (e.g., 10%) of the `max_relevant_capacity`.
    # This makes the threshold adaptive to the scale of bin sizes.
    NEAR_COMPLETION_THRESHOLD = max_relevant_capacity * 0.1

    # Identify bins that are "near completion" after the item is placed.
    # They must have positive remaining capacity (not perfect fit) and be below the threshold.
    is_near_completion = (remaining_after_placement > EPSILON_PERFECT_FIT) & \
                         (remaining_after_placement <= NEAR_COMPLETION_THRESHOLD)

    # The bonus magnitude for near completion should be significant but less than
    # the perfect fit bonus, ensuring the hierarchy (Perfect > Near > Normal).
    # Setting it to `max_relevant_capacity` places these fits above any normal fit
    # (which are at most 0 and typically negative), but below perfect fits.
    NEAR_COMPLETION_BONUS_MAGNITUDE = max_relevant_capacity * 1.0
    priorities[is_near_completion] += NEAR_COMPLETION_BONUS_MAGNITUDE

    return priorities
```
