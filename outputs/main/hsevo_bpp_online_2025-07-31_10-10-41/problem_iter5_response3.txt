```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive Best Fit (ABF) with remnant preference. Prioritizes perfect fits, then standard
    best fit, while penalizing very small non-zero remnants to encourage more usable leftover space.
    """
    if item <= 0:
        return -np.inf * np.ones_like(bins_remain_cap)

    remaining_after_placement = bins_remain_cap - item
    priorities = -np.inf * np.ones_like(bins_remain_cap)

    # Core Best Fit: Prioritize bins by minimizing remaining space
    fits_mask = remaining_after_placement >= 0
    priorities[fits_mask] = -remaining_after_placement[fits_mask]

    # Adaptive Component: Penalize very small, non-zero remnants
    # This constant (e.g., 5% of a typical bin capacity) needs tuning based on problem scale.
    SMALL_REMNANT_THRESHOLD = 0.05 
    # Penalty value to make small remnants less attractive than better fits.
    PENALTY_VALUE = 0.1 

    small_remnant_mask = (remaining_after_placement > 0) & \
                         (remaining_after_placement < SMALL_REMNANT_THRESHOLD) & \
                         fits_mask
    priorities[small_remnant_mask] -= PENALTY_VALUE

    # Absolute Highest Priority: Ensure perfect fits are always chosen first
    perfect_fit_mask = (remaining_after_placement == 0)
    priorities[perfect_fit_mask] = np.inf

    return priorities
```
