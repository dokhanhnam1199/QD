```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority, prioritizing bins that, after accommodating the item,
    minimize 'wasted' space. This linear Best Fit strategy combines clarity
    with proven efficiency for online bin packing.
    """
    # Initialize all priorities to a very low value for non-viable bins.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins that can physically accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the 'wasted space' (remaining capacity - item size).
    # This explicit intermediate variable enhances clarity, similar to v1's approach.
    wasted_space = bins_remain_cap[can_fit_mask] - item

    # Assign priority by maximizing the negative of the wasted space.
    # This maintains the core linear relationship of Best Fit (as in v0),
    # where a perfect fit (wasted_space = 0) yields the highest score (0).
    priorities[can_fit_mask] = -wasted_space

    return priorities
```
