```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Proportional Best Fit, with a strong bonus for perfect item-bin fits.

    Promotes efficient space utilization and fast bin closure.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle non-positive items: they cannot be packed, assign lowest priority.
    if item <= 0:
        return priorities

    # Identify bins where the item can fit.
    valid_bins_mask = bins_remain_cap >= item

    # Apply Proportional Best Fit for valid bins: maximize `item / current_bin_capacity`.
    # This naturally favors smaller valid remaining capacities (Best Fit) and higher utilization.
    priorities[valid_bins_mask] = item / bins_remain_cap[valid_bins_mask]

    # Aggressively prioritize perfect fits with an infinite score to ensure immediate closure.
    perfect_fit_mask = bins_remain_cap == item
    priorities[perfect_fit_mask] = np.inf

    return priorities
```
