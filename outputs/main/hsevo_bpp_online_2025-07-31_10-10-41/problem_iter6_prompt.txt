{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit (BF) strategy.\n\n    Bins where the item fits perfectly get the highest priority. Among bins where the item fits,\n    those leaving less remaining capacity are preferred. Bins where the item does not fit\n    are assigned the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_after_placement = bins_remain_cap - item\n\n    # Initialize priority scores\n    # We use -np.inf for bins where the item cannot fit, ensuring they are never chosen.\n    # For bins where it fits, we prioritize by minimizing the remaining space.\n    # A smaller remaining_after_placement value means a better fit (closer to zero).\n    # To maximize this as a priority score, we take the negative of remaining_after_placement.\n    # So, a perfect fit (remaining_after_placement = 0) gets a priority of 0,\n    # a near-perfect fit (e.g., remaining_after_placement = 0.1) gets -0.1,\n    # and a loose fit (e.g., remaining_after_placement = 10) gets -10.\n    # The higher the value (closer to 0 for negatives, or 0 itself), the better.\n    priorities = -remaining_after_placement\n\n    # Set priority to negative infinity for bins where the item does not fit\n    # (i.e., remaining_after_placement is negative)\n    priorities[remaining_after_placement < 0] = -np.inf\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's the redefined 'Current self-reflection' for designing better bin packing heuristics:\n\n*   **Keywords:** Adaptive Strategies, Global State Inference, Feature Engineering, Multi-criteria Optimization.\n*   **Advice:** Focus on heuristics that dynamically adapt their logic based on current problem characteristics. Explore synergistic combinations of diverse packing rules. Prioritize leveraging comprehensive information about the system's global state and future implications, not just immediate fits.\n*   **Avoid:** Relying on fixed, static rules (e.g., Best Fit). Preconceived notions about the superiority of simple linear or non-linear functions for priority. Making performance claims based on limited empirical observations or specific algorithm names.\n*   **Explanation:** This approach encourages exploring a broader design space, developing more robust and intelligent heuristics by considering the evolving problem context and integrating richer information, leading to genuinely novel solutions.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}