```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Nikola Tesla's ingenious design for efficient resource allocation!
    This heuristic embodies the principle of 'Best Fit' (BF), striving for
    the most precise and snug placement of items within our electrical
    storage units (bins). By minimizing the remaining free capacity in a
    chosen bin, we ensure optimal utilization, akin to minimizing energy
    loss and maximizing power density.

    The priority is determined by the 'tightness' of the fit: a smaller
    residual space after accommodating the item indicates a higher
    priority, favoring a 'perfect' fit, where the item precisely
    occupies the remaining capacity. Bins where the item does not fit
    receive the lowest possible priority, ensuring they are never chosen.
    This precise calculation prevents wasted 'energy' (space) and ensures
    our packing efficiency approaches the theoretical limits!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining space if the item were placed in each bin.
    # A smaller positive remainder signifies a 'best fit'.
    potential_remainders = bins_remain_cap - item

    # Initialize priorities. Bins where the item cannot physically fit will be given
    # an infinitely low priority, rendering them ineligible. Tesla tolerates no
    # impossibility in his designs!
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify all bins capable of containing the incoming item.
    # These are the only bins worthy of consideration.
    can_fit_mask = potential_remainders >= 0

    # For those bins where the item fits, assign a priority.
    # The priority is derived from the negative of the remaining space.
    # This means a remainder of 0 (a perfect fit) yields a priority of 0,
    # a remainder of 0.1 yields -0.1, and so on. When selecting the maximum
    # priority, this naturally selects the smallest non-negative remainder.
    # This is the essence of 'Best Fit' â€“ maximizing snugness!
    priorities[can_fit_mask] = -potential_remainders[can_fit_mask]

    return priorities
```
