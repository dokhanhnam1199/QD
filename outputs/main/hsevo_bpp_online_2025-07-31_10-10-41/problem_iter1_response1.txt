```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Einstein, I propose a "Principle of Minimal Cosmic Expansion."
    Just as the universe expands, so too do our demands on resources. In the realm
    of bin packing, we must strive to minimize the "expansion" of our bin count.
    This implies a strategy of densification: to fill existing space as efficiently
    as possible before creating new space (new bins).

    Therefore, the optimal heuristic is to prioritize placing an item into a bin
    such that the *remaining void* within that bin is minimized. This "Best Fit"
    approach leaves the least amount of fragmented space, making it harder for
    future items to fit poorly and necessitating fewer new bins.

    A higher priority score indicates a greater preference for the bin.
    """
    # Initialize all scores to a very low value. Bins that cannot fit the item
    # must have an effectively infinite disincentive.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # This prevents considering bins that are too small.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can accommodate the item, calculate their "fit tightness".
    # The 'item - bins_remain_cap' term serves as an inverse measure of remaining void.
    # - If item = bins_remain_cap (perfect fit), the score is 0.0 (highest possible for a fit).
    # - If item is much smaller than bins_remain_cap, the score will be a larger negative value.
    # Maximizing this value corresponds to minimizing the remaining capacity after placement.
    scores[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return scores
```
