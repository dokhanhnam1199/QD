{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes Best Fit, strongly favoring bins that achieve perfect item-bin fits.\"\"\"\n\n    # Calculate the remaining capacity after placing the item in each bin.\n    # A smaller positive value indicates a better fit (less wasted space).\n    remaining_after_placement = bins_remain_cap - item\n\n    # Initialize priority scores. Best Fit strategy aims to minimize remaining capacity,\n    # so we negate it to transform into a maximization problem (higher score = better).\n    priorities = -remaining_after_placement\n\n    # For bins where the item does not fit (remaining_after_placement would be negative),\n    # assign the lowest possible priority (-infinity) to ensure they are never chosen.\n    priorities[remaining_after_placement < 0] = -np.inf\n\n    # Apply a strong bonus for perfect fits: if an item perfectly fills a bin (remaining capacity is zero\n    # or very close to zero due to floating-point precision), give it the absolute highest priority.\n    # This aligns with the strategy of completing bins whenever possible.\n    epsilon = 1e-9  # Tolerance for floating-point comparison\n    perfect_fit_mask = np.abs(remaining_after_placement) < epsilon\n    priorities[perfect_fit_mask] = np.inf\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}