```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a linear Best Fit strategy: highest priority for the 'snug' fit, minimizing wasted space.
    This simple, direct, and proportional approach has proven robust and effective compared to non-linear alternatives.
    Bins unable to fit the item receive the lowest priority.
    """
    # Initialize priorities. Bins that cannot fit the item are given an infinitely low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can physically fit. This is a direct and robust check.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the 'residual capacity' or 'wasted space' that would remain
    # in each fitting bin after the item is placed. Our objective is to minimize this waste.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priority as the negative of the remaining space. This linear transformation
    # converts the goal of 'minimizing waste' into 'maximizing priority'. A smaller
    # positive residual capacity results in a priority score closer to zero (less negative),
    # thus becoming a higher priority choice. This direct and proportional relationship
    # has consistently shown superior performance and interpretability.
    priorities[can_fit_mask] = -remaining_after_fit

    return priorities
```
