```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """A linear Best Fit heuristic. Prioritizes bins by minimizing remaining space.
    Snug fits receive higher scores (closer to zero); non-fitting bins get lowest priority.
    """
    
    # Initialize priorities. Bins that cannot fit the item are assigned negative infinity,
    # ensuring they are never chosen as valid candidates.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the 'wasted space' (remaining capacity after item placement) for each bin.
    wasted_space = bins_remain_cap - item

    # Create a mask for bins where the item can actually fit (wasted_space >= 0).
    can_fit_mask = (wasted_space >= 0)

    # For bins where the item fits, assign a priority as the negative of the wasted space.
    # This linear transformation means:
    # - A perfect fit (wasted_space = 0) gets the highest score (0).
    # - Smaller positive wasted space yields higher (less negative) scores.
    # - Larger positive wasted space yields lower (more negative) scores.
    # This directly implements the "Best Fit" strategy, which was identified as superior.
    priorities[can_fit_mask] = -wasted_space[can_fit_mask]

    return priorities
```
