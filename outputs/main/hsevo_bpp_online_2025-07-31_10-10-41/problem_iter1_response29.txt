```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This function implements a "Best Fit" heuristic for the online bin packing problem.
    It prioritizes bins that, upon receiving the item, would leave the smallest
    amount of remaining capacity (i.e., achieving the "snuggest" fit).
    Bins where the item cannot fit are assigned an extremely low priority.

    The logic is as follows:
    1. For each bin, determine if the item can fit within its remaining capacity.
    2. If the item fits, calculate the remaining capacity after placing the item
       (current_bin_capacity - item_size).
    3. The priority score for a fitting bin is the negative of this remaining capacity.
       This ensures that a smaller positive remaining capacity (a snugger fit, or
       even a perfect fit resulting in 0 remaining capacity) yields a higher
       (less negative or zero) priority score.
    4. If the item does not fit, the bin receives a priority of negative infinity,
       ensuring it is never chosen.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low value (negative infinity).
    # This ensures that bins where the item does not fit are never selected,
    # as their priority will be lower than any valid fitting bin.
    priorities = -np.ones_like(bins_remain_cap, dtype=float) * np.inf

    # Find the indices of all bins where the current item can physically fit.
    fitting_bin_indices = np.where(item <= bins_remain_cap)[0]

    if fitting_bin_indices.size > 0:
        # Calculate the remaining capacity in these fitting bins if the item were placed.
        remaining_after_fit = bins_remain_cap[fitting_bin_indices] - item

        # Assign priority scores to the fitting bins.
        # By taking the negative of the remaining capacity, a smaller positive
        # remaining capacity (closer to a perfect fit) results in a larger
        # (less negative, or zero for a perfect fit) priority score.
        priorities[fitting_bin_indices] = -remaining_after_fit

    return priorities
```
