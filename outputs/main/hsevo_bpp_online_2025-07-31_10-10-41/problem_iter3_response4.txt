```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Smallest Fit (SF) strategy.

    Bins with the smallest current remaining capacity (among those where the item fits) get the highest priority.
    This aims to "fill up" bins that are already partially used, prioritizing them over larger, emptier bins,
    while still ensuring the item fits. Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores with negative infinity for bins where the item cannot fit
    # and a temporary value for bins where it can fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item fits
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits, assign a priority based on their *current* remaining capacity.
    # We want to prioritize bins with smaller remaining capacity (i.e., those that are more full).
    # To do this, we take the negative of the bins_remain_cap.
    # A smaller bins_remain_cap (e.g., 20) results in a larger (less negative) priority score (-20)
    # compared to a larger bins_remain_cap (e.g., 100) which results in a smaller (more negative) score (-100).
    priorities[fits_mask] = -bins_remain_cap[fits_mask]

    return priorities
```
