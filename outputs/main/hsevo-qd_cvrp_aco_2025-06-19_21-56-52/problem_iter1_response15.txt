```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic for CVRP based on distance, demand, and angular proximity.

    Args:
        distance_matrix: Distance between each pair of nodes.
        coordinates: Coordinates of each node.
        demands: Demand of each node.
        capacity: Vehicle capacity.

    Returns:
        Heuristic matrix indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angle from depot to each customer
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Disallow self-loops
            else:
                # Distance component: Shorter distances are preferred
                distance_component = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

                # Demand component: Account for capacity constraints. Prefer visiting smaller demands first,
                # or only visit if i and j are either depot or node can be accomodated in existing capacity
                demand_component = 1 / (demands[j] + 1e-6) if i == 0 or j == 0 else 1

                # Angle component: Prioritize nodes that are angularly close, especially if the starting node is depot.
                angle_diff = np.abs(angles[i] - angles[j])
                angle_component = 1 / (np.sin(angle_diff / 2) + 1e-6) if i == 0 else 1 # Avoid division by zero. Depot looks for angular closest nodes.


                heuristic_matrix[i, j] = distance_component * demand_component * angle_component
                if distance_matrix[i, j] > np.mean(distance_matrix) * 3: # penalize extremely long distances
                    heuristic_matrix[i, j] /= 5
    return heuristic_matrix
```
