```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP based on distance, demand, and depot proximity.

    This heuristic aims to provide a more informed prior for edge selection
    in a CVRP solver, considering not just distance but also demand and
    proximity to the depot. Edges connecting high-demand nodes or nodes
    far from the depot are penalized.

    Args:
        distance_matrix (np.ndarray): Distance between nodes (n x n).
        coordinates (np.ndarray): Node coordinates (n x 2).
        demands (np.ndarray): Node demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior matrix (n x n). Higher values indicate
                   more promising edges.
    """
    n = distance_matrix.shape[0]
    prior = np.zeros_like(distance_matrix)

    # Normalize demands to be between 0 and 1
    normalized_demands = demands / np.max(demands)

    # Distance from depot
    depot_distances = distance_matrix[0, :]
    normalized_depot_distances = depot_distances / np.max(depot_distances)


    for i in range(n):
        for j in range(n):
            if i == j:
                prior[i, j] = 0  # No self-loops
            else:
                # Base score: inverse of distance
                score = 1 / distance_matrix[i, j]

                # Penalize edges connected to high demand nodes
                score *= (1 - 0.5*normalized_demands[i]) * (1 - 0.5*normalized_demands[j])

                #Penalize nodes far from depot. This favors routes closer to the depot.
                score *= (1 - 0.3*normalized_depot_distances[i]) * (1 - 0.3*normalized_depot_distances[j])
                prior[i, j] = score

    return prior
```
