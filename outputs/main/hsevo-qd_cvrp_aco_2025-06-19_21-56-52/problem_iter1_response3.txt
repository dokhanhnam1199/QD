```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    based on distance, demand, and angular proximity to the depot.

    Args:
        distance_matrix: A numpy array representing the distance matrix (n x n).
        coordinates: A numpy array representing the (x, y) coordinates of each node (n x 2).
        demands: A numpy array representing the demand of each node (n).
        capacity: The capacity of each vehicle.

    Returns:
        A numpy array of the same shape as the distance_matrix,
        representing the prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate angles relative to the depot (node 0)
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    # Define weights for distance, demand, and angle.  These weights are "tunable parameters" of the heuristic.
    distance_weight = 1.0
    demand_weight = 0.5
    angle_weight = 0.2

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics_matrix[i, j] = 0  # No self-loops
                continue

            # Heuristic component based on distance: Shorter distances are preferred.
            distance_heuristic = distance_weight / (distance_matrix[i, j] + 1e-6) # avoid divide by zero. Add a small number

            # Heuristic component based on demand: Prefer edges that lead to nodes with lower demand, up to capacity.
            demand_heuristic = demand_weight / (demands[j] + 1e-6)

            # Heuristic component based on angle:  Prefer nodes with similar angles to the depot
            angle_diff = np.abs(angles[i] - angles[j])
            angle_heuristic = angle_weight / (angle_diff + 1e-6)
            # Combine heuristics, consider vehicle capacity. We assume that demand from depot = 0.
            if demands[i] + demands[j] > capacity and (i!=0 and j!=0):
              heuristics_matrix[i, j] = 0 # Do not consider this connection.

            else:
              heuristics_matrix[i, j] = distance_heuristic + demand_heuristic + angle_heuristic

    return heuristics_matrix
```
