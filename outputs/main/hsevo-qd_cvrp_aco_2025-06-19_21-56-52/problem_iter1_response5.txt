```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for CVRP via stochastic solution sampling, taking into account
    distance, demand, and capacity constraints to generate prior indicators for edge inclusion.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators for edge inclusion (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Initialize with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Adjust based on demand and capacity.  Avoid edges that clearly violate capacity early.
    # Penalize edges connecting to nodes with high demand if other options exist.
    demand_penalty = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_penalty[i,j] = (demands[i] + demands[j]) / (2 * capacity)
            else:
                demand_penalty[i,j] = 1.0 #impossible edges
    heuristic_matrix = heuristic_matrix / (1 + demand_penalty) # Penalizes edges that connect to heavy demand nodes

    # Encourage edges connected to the depot (node 0)
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.2  # Slightly boost edges from the depot.
        heuristic_matrix[i, 0] *= 1.2

    # Penalize very long edges, especially if they involve high-demand nodes.  Consider it unlikely such edges are efficient
    max_distance = np.max(distance_matrix)
    distance_penalty = distance_matrix / max_distance
    heuristic_matrix = heuristic_matrix / (1 + distance_penalty)

    # Small adjustment: Prefer edges to closer nodes based on Euclidean distance (more accurate than distance matrix sometimes).
    euclidean_distances = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            euclidean_distances[i,j] = np.linalg.norm(coordinates[i] - coordinates[j])
    euclidean_distances = euclidean_distances / np.max(euclidean_distances)

    heuristic_matrix = heuristic_matrix / (1 + 0.1 * euclidean_distances) #small influence

    # Ensure the diagonal is 0. These connections don't make sense.
    for i in range(n):
        heuristic_matrix[i, i] = 0.0

    return heuristic_matrix
```
