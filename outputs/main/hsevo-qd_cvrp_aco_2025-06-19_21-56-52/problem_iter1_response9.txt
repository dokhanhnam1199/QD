```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP).

    This version incorporates a combination of distance, demand, and angle
    information to guide the search. It penalizes long distances, prioritizes
    nodes with smaller demand, and factors in angular proximity to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators (n x n) of edge desirability.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angles from each node to the depot (node 0)
    angles = np.zeros(n)
    for i in range(1, n):  # Exclude depot itself
        dx = coordinates[i, 0] - coordinates[0, 0]
        dy = coordinates[i, 1] - coordinates[0, 1]
        angles[i] = np.arctan2(dy, dx)

    # Heuristic Calculation
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Inverse Distance: Shorter distances are preferred
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6) # Avoid division by zero

                # Demand Factor: Prioritize smaller demands, especially for i != 0
                if i == 0:
                  demand_factor = 1  # Don't penalize edges from depot
                else:
                    demand_factor = 1 / (demands[j] + 1)

                # Angle Factor: Prefer nodes closer to the depot's angle. This prevents vehicles from zig-zagging.
                angle_diff = abs(angles[i] - angles[j])
                angle_factor = np.exp(-angle_diff**2 / (2 * (np.pi/4)**2)) # Gaussian falloff around 0

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor


    return heuristic_matrix
```
