```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP based on distance, demand, and node proximity.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate a demand-weighted distance.  Larger demands further increase effective distance.
    demand_factor = np.outer(demands, demands) # all pairs demand product.

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse of distance
                heuristic = 1 / distance_matrix[i, j]

                # Penalize paths between nodes with large combined demand.
                heuristic /= (demand_factor[i, j] / (capacity**2) + 1) #Normalize to avoid blowing up values

                # Reward paths that keep the vehicle closer to capacity
                avg_demand = np.mean(demands[1:])
                heuristic *= np.exp(-abs(demands[i] + demands[j] - 2 * avg_demand) / capacity)
                

                #Adjust for depot proximity. encourages trips to start and end well.
                if i == 0 or j == 0:
                   heuristic *= 2 # Make depot trips more likely
                

                heuristic_matrix[i, j] = heuristic

    return heuristic_matrix
```
