```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A more sophisticated heuristics function for CVRP using a combination of distance,
    demand, and savings calculations to prioritize edges.

    Args:
        distance_matrix: n x n distance matrix.
        coordinates: n x 2 coordinates of nodes.
        demands: n customer demands.
        capacity: vehicle capacity.

    Returns:
        n x n matrix of heuristic values for each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Savings heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Demand-based weighting
    demand_weights = np.outer(demands, demands)
    demand_weights = 1 / (demand_weights + 1e-6)  # Avoid division by zero

    # Distance-based weighting
    distance_weights = 1 / (distance_matrix + 1e-6)

    # Combined heuristic: prioritize short distances, large savings, and low combined demand
    heuristic_matrix = 0.5 * savings_matrix * distance_weights * demand_weights

    # Penalize edges that would violate capacity constraints
    for i in range(1, n):
        for j in range(1,n):
            if i != j and (demands[i] + demands[j] > capacity):
                heuristic_matrix[i, j] = heuristic_matrix[i,j] * 0.1

    # Ensure depot connections are relatively prioritized
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.2  # Boost depot connections slightly
        heuristic_matrix[i, 0] *= 1.2

    # Set diagonal to zero to prevent self-loops.  Also avoid assigning values to distances from nodes to themselves.
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
