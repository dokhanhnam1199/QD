```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    that considers distance, demand, and angular proximity to the depot.

    Args:
        distance_matrix: A numpy array representing the distance between nodes.
        coordinates: A numpy array representing the coordinates of the nodes.
        demands: A numpy array representing the demands of each node.
        capacity: The capacity of each vehicle.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angular proximity to depot
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance_factor = 1 / distance_matrix[i, j]

            # Demand factor: penalize edges that lead to high demand early
            demand_penalty = (demands[i] + demands[j]) / (2 * capacity) #Linear penalty if demand is too high

            # Angular proximity: reward edges that keep us roughly orbiting depot. Avoid jumps on the diameter of the depot.
            angle_diff = np.abs(angles[i] - angles[j])
            angle_factor = 1 - np.min([angle_diff, 2 * np.pi - angle_diff]) / np.pi

            heuristic_matrix[i, j] = distance_factor * (1 - demand_penalty) * angle_factor #combine the factors

    return heuristic_matrix
```
