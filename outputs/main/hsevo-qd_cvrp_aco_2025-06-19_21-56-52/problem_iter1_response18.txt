```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for CVRP that combines distance, demand, and spatial clustering.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate a combination of distance, demand, and spatial affinity
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0
                continue

            # Distance component (inverse proportional)
            distance_component = 1 / distance_matrix[i, j]

            # Demand component: Prefer edges connecting nodes with demands that don't immediately exceed capacity
            # Adjusted to consider depot.  Nodes far from depot are slightly penalized (if high demand)
            demand_penalty = 1.0
            if i != 0 and j!=0: #Penalize connections far from depot if demand is high
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity/3:
                    demand_penalty = 0.5
            elif i!= 0:
                if demands[i]>capacity/2:
                    demand_penalty = 0.7
            elif j!= 0:
                if demands[j]>capacity/2:
                    demand_penalty = 0.7

            # Spatial clustering component: Encourage connections between spatially close nodes
            # Penalize if traveling far leads to revisiting the depot due to demand issue

            spatial_affinity = np.exp(-np.linalg.norm(coordinates[i] - coordinates[j]) / np.mean(distance_matrix))

            heuristics[i, j] = distance_component * demand_penalty * spatial_affinity

    return heuristics
```
