```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_after_addition < 0, -np.inf, 
                          # For bins that can accommodate the item, 
                          # higher remaining capacity gets lower priority
                          -remaining_after_addition / bins_remain_cap)
    
    # Normalize the priorities to ensure they are within a comparable range
    priorities = priorities - np.max(priorities)
    
    # Apply a softmax-like function to make the priorities more distinguishable
    exp_priorities = np.exp(priorities)
    return exp_priorities / np.sum(exp_priorities)
```
