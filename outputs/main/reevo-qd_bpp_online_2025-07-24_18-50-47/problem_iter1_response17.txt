```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item get a positive score, others get a very low score
    priorities = np.where(remaining_after_addition >= 0, -remaining_after_addition, -1e6)
    
    # To avoid choosing bins that are too full, we add a term that prefers bins with more remaining capacity
    priorities += np.log(bins_remain_cap + 1e-6)
    
    # Normalize the priorities to ensure they are on the same scale
    priorities = priorities - np.max(priorities)
    
    return priorities
```
