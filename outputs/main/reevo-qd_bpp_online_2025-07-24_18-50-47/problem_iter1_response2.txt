```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    feasible_bins = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item (First-Fit Decreasing inspiration)
    priorities = np.where(feasible_bins, -remaining_after_addition, -np.inf)
    
    # To avoid division by zero and to stabilize the computation, add a small epsilon
    epsilon = 1e-6
    
    # Further differentiate among feasible bins by considering their relative fill level
    relative_fill_level = (bins_remain_cap + epsilon) / (bins_remain_cap.max() + epsilon)
    priorities = np.where(feasible_bins, priorities + relative_fill_level, priorities)
    
    return priorities
```
