```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that have enough capacity for the item
    valid_bins = bins_remain_cap >= item
    
    # Calculate the priority for valid bins based on the remaining capacity after adding the item
    priorities_valid = bins_remain_cap[valid_bins] - item
    
    # Assign a very low priority to bins that cannot hold the item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[valid_bins] = priorities_valid
    
    # To avoid selecting a bin that has just enough capacity for the item (which might lead to fragmentation),
    # we add a small penalty based on the ratio of item size to the bin's remaining capacity
    ratios = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] -= 0.1 * ratios
    
    return priorities
```
