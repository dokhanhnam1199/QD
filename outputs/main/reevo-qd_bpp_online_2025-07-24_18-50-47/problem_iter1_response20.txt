```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins_mask = remaining_after_addition >= 0
    
    # For bins with enough capacity, priority is inversely proportional to the remaining capacity after addition
    # For bins without enough capacity, priority is negatively large (effectively zero probability of being chosen)
    priorities = np.where(valid_bins_mask, 1 / (remaining_after_addition + 1e-6), -1e6)
    
    # Normalize priorities for valid bins to ensure they are on the same scale
    priorities_valid = priorities[valid_bins_mask]
    if len(priorities_valid) > 0:
        priorities_valid = (priorities_valid - np.min(priorities_valid)) / (np.max(priorities_valid) - np.min(priorities_valid) + 1e-6)
        priorities[valid_bins_mask] = priorities_valid
    
    return priorities
```
