```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # For bins with enough capacity, the priority is the remaining capacity after addition
    # For bins without enough capacity, the priority is a very low value (to avoid selecting them)
    priorities = np.where(valid_bins_mask, remaining_cap_after_addition, -1e6)
    
    # Normalize the priorities for valid bins to be between 0 and 1
    min_remaining_cap = np.min(remaining_cap_after_addition[valid_bins_mask]) if np.any(valid_bins_mask) else 0
    max_remaining_cap = np.max(remaining_cap_after_addition[valid_bins_mask]) if np.any(valid_bins_mask) else 1
    priorities[valid_bins_mask] = (remaining_cap_after_addition[valid_bins_mask] - min_remaining_cap) / (max_remaining_cap - min_remaining_cap + 1e-9)
    
    return priorities
```
