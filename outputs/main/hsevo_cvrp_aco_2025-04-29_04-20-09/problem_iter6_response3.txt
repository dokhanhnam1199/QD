```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhances CVRP heuristic by combining normalized distance, capacity, angle, centrality, depot attraction, and sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate center and characteristic distance
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Normalization factors to ensure features are on comparable scales.
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands)
    max_coord = np.max(np.abs(coordinates))  # use max absolute value for centering calculation


    # Define weights for each component.  Tunable parameters!
    weight_distance = 0.4
    weight_demand = 0.2
    weight_angle = 0.1
    weight_centrality = 0.15
    weight_depot = 0.15


    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # 1. Distance Component (Normalized)
            distance = distance_matrix[i, j]
            distance_component = 1 - (distance / max_distance)  # Higher is better


            # 2. Demand Component (Considers combined demand relative to capacity)
            demand_component = 1.0  # default
            if i != 0 and j != 0:
                 combined_demand = demands[i] + demands[j]
                 demand_component = max(0.1, 1 - (combined_demand / capacity))  # Scale linearly. Never go to 0
            # if demands[i] + demands[j] > capacity: # replaced by above
            #     demand_component = 0.1


            # 3. Angle Component (Smaller angle = higher priority). More robust.
            angle_component = 0.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)

                if len(angles) > 0:
                     angle_component = min(np.degrees(angles) / 180.0) # Normalize between 0 and 1
            angle_component = 1 - angle_component # Invert, smaller angle better.

            # 4. Centrality Component (Nodes closer to center are more attractive)
            center_distance_i = np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2)
            center_distance_j = np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)
            avg_center_distance = (center_distance_i + center_distance_j) / 2
            centrality_component = np.exp(-avg_center_distance / (demand_weighted_dist_to_depot + 1e-6))


            # 5. Depot Attraction (Attract nodes back to depot based on load)
            depot_component = 1.0
            if i != 0:  # Only penalize non-depot nodes.
                load_before_depot = demands[i]  # Demand of node 'i'
                depot_component = (1 + np.exp(-load_before_depot / (capacity + 1e-6))) / 2  # Inverted, higher is better to return
                # depot_component = (1 + np.tanh(-load_before_depot / capacity)) / 2 # alternative


            # Combine the components using weighted sum.  Crucial step.
            heuristic_matrix[i, j] = (
                weight_distance * distance_component +
                weight_demand * demand_component +
                weight_angle * angle_component +
                weight_centrality * centrality_component +
                weight_depot * depot_component
            )


    # Sparsify the matrix.  Zero out very low values, reducing the search space.
    threshold = np.mean(heuristic_matrix) * 0.1  # Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0


    return heuristic_matrix
```
