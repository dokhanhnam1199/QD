```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines distance, demand, savings, depot proximity, and sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Distance component
    distance_component = 1 / (distance_matrix + 1e-6)

    # Demand component
    demand_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_matrix[i, j] = demands[i] + demands[j]
    demand_component = np.clip(1 - (demand_matrix / capacity), 0, 1)

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    savings_matrix = savings_matrix / (np.max(savings_matrix + 1e-9))

    # Depot proximity heuristic
    depot_distances = distance_matrix[0, :]
    depot_proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)

    max_val = np.max(depot_proximity_matrix)
    if max_val > 0:
        depot_proximity_matrix = depot_proximity_matrix / max_val

    heuristic_matrix = (distance_component**1.2 + demand_component**1.1 + savings_matrix**0.8 + depot_proximity_matrix**0.9)

    # Sparsification
    threshold = 0.2 * np.mean(heuristic_matrix) #Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
