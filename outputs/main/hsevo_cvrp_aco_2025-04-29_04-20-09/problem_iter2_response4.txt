```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic: Combines distance, savings, demand, and angle."""

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    # Prioritize edges connecting to the depot less in general
    #heuristics_matrix[0, :] = heuristics_matrix[0, :] * 0.5

    # Demand consideration
    demand_penalty = np.zeros((n,n))
    for i in range(n):
      for j in range(n):
        demand_penalty[i,j] = (demands[i] + demands[j])
    demand_penalty = 1/(demand_penalty+1e-6)
    # Angle heuristic
    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]
    angles = np.zeros(n)
    for i in range(n):
        if i != 0:
            dx = coordinates[i, 0] - depot_x
            dy = coordinates[i, 1] - depot_y
            angles[i] = np.arctan2(dy, dx)

    angle_diff_matrix = np.zeros((n,n))
    for i in range(n):
      for j in range(n):
          angle_diff_matrix[i,j] = abs(angles[i]-angles[j])

    angle_diff_penalty = 1/(angle_diff_matrix+1e-6)

    # Combine heuristics
    heuristic_matrix = (0.4 * distance_heuristic + 0.3 * (savings_matrix / np.max(savings_matrix + 1e-6)) + 0.15 * demand_penalty + 0.15 * angle_diff_penalty)

    # Ensure depot connections are preferred
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.1
        heuristic_matrix[i, 0] *= 1.1

    # Ensure no self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
