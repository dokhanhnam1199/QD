```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic: Combines distance, savings, demand, and centrality."""

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    savings_matrix = savings_matrix / np.max(savings_matrix + 1e-6)

    # Demand consideration
    demand_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_penalty[i, j] = (demands[i] + demands[j])
    demand_penalty = 1 / (demand_penalty + 1e-6)

    # Centrality component
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0
    centrality_component = np.zeros((n,n))
    for i in range(n):
      for j in range(n):
        center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                           np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
        centrality_component[i,j] = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)


    # Combine heuristics
    heuristic_matrix = (0.4 * distance_heuristic + 0.3 * savings_matrix + 0.15 * demand_penalty + 0.15 * centrality_component)

    # Ensure depot connections are preferred
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.1
        heuristic_matrix[i, 0] *= 1.1

    # Ensure no self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
