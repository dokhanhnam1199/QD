```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, savings, angle, depot proximity."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Distance component
    distance_component = 1 / (distance_matrix + 1e-9)

    # Demand component
    demand_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_matrix[i, j] = demands[i] + demands[j]
    demand_component = np.clip(1 - (demand_matrix / capacity), 0, 1)

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    savings_matrix = savings_matrix / (np.max(savings_matrix + 1e-9))

    # Depot proximity component
    depot_distances = distance_matrix[0, :]
    depot_proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)
    max_val = np.max(depot_proximity_matrix)
    if max_val > 0:
        depot_proximity_matrix = depot_proximity_matrix / max_val

    # Angle component
    angle_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                angles = []
                for k in range(1, n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_matrix[i, j] = np.mean(np.degrees(angles) / 180.0)
                else:
                    angle_matrix[i, j] = 0.5  # Default if no other nodes
    angle_component = 1 - angle_matrix # Smaller angle better

    # Combined heuristic
    heuristic_matrix = (
        0.4 * distance_component +
        0.2 * demand_component +
        0.1 * savings_matrix +
        0.1 * depot_proximity_matrix +
        0.2 * angle_component
    )

    # Sparsification
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure no self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
