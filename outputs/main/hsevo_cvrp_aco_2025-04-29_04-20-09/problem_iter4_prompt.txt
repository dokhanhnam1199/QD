{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines centrality, capacity, angle, depot attraction, and demand correlation for CVRP.\n    Sparsifies the matrix by setting unpromising elements to zero.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    # Calculate the average distance from each node to all other nodes\n    avg_distances = np.mean(distance_matrix, axis=1)\n\n    # Calculate the demand correlation between nodes\n    demand_correlation_matrix = np.corrcoef(demands.reshape(1, -1))\n    demand_correlation_matrix = np.nan_to_num(demand_correlation_matrix) # Handle potential NaN values\n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            demand_component = 1.0\n            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:\n                demand_component = 0.1\n\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)\n\n\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)\n\n            depot_component = 1.0\n            if i!=0:\n                load_before_depot = demands[i]\n                depot_component = (1 + np.exp(load_before_depot/capacity)) / 2\n\n            # Demand correlation component: Favor connecting nodes with similar demand\n            demand_correlation = demand_correlation_matrix[i, j]\n\n            # Average distance component: Penalize edges connecting nodes far from the average\n            avg_distance_component = np.exp(- (avg_distances[i] + avg_distances[j]) / (2 * demand_weighted_dist_to_depot) if demand_weighted_dist_to_depot > 0 else 1)\n\n\n            heuristic_matrix[i, j] = (distance_component * demand_component * (1 - angle_component) *\n                                      centrality_component * depot_component * (0.5 + 0.5 * demand_correlation) * avg_distance_component)\n\n\n    # Sparsify the matrix: Set unpromising elements to zero\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Keep top 80% of edges\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}