{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines centrality, capacity, angle, and depot attraction for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            demand_component = 1.0\n            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:\n                demand_component = 0.1\n\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)\n\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)\n\n            depot_component = 1.0\n            if i!=0:\n                load_before_depot = demands[i]\n                depot_component = (1 + np.exp(load_before_depot/capacity)) / 2\n\n            heuristic_matrix[i, j] = (distance_component * demand_component * (1 - angle_component) * centrality_component * depot_component)\n\n    return heuristic_matrix\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines centrality, capacity, angle, depot attraction, and demand balance for CVRP, with sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    # Calculate average demand\n    avg_demand = np.mean(demands[1:])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            # Capacity component - penalize edges that would overload the vehicle significantly\n            demand_component = 1.0\n            if i != 0 and j != 0:\n                if demands[i] + demands[j] > capacity:\n                    demand_component = 0.01  # Heavily penalize\n                elif demands[i] + demands[j] > 0.8 * capacity:\n                    demand_component = 0.5  # Moderately penalize\n\n            # Angle component - prefer edges that don't cause sharp turns\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)  # Normalize to [0, 1]\n\n            # Centrality component - attract towards the center of gravity\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))\n\n            # Depot attraction component - nodes with high demand should be closer to the depot\n            depot_component = 1.0\n            if i!=0 and j!=0:\n                depot_dist_i = distance_matrix[0, i]\n                depot_dist_j = distance_matrix[0, j]\n                depot_component = np.exp(-(depot_dist_i + depot_dist_j) / (2 * demand_weighted_dist_to_depot + 1e-6))\n\n            # Demand Balance Component - Try to balance the load on the routes\n            demand_balance_component = 1.0\n            if i != 0 and j != 0:\n                demand_diff = abs(demands[i] - demands[j])\n                demand_balance_component = np.exp(-demand_diff / (avg_demand + 1e-6))\n\n            heuristic_matrix[i, j] = (distance_component**1.5 * demand_component * (1 - angle_component)**0.5 *\n                                      centrality_component**0.8 * depot_component**0.7 * demand_balance_component**0.6)\n\n            # Sparsification - Remove edges that are unlikely to be in the optimal solution\n            if heuristic_matrix[i, j] < 0.1 * np.mean(heuristic_matrix): #Dynamic threshold.\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines centrality, capacity, angle, depot attraction, and demand balance for CVRP, with sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    # Calculate average demand\n    avg_demand = np.mean(demands[1:])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            # Capacity component - penalize edges that would overload the vehicle significantly\n            demand_component = 1.0\n            if i != 0 and j != 0:\n                if demands[i] + demands[j] > capacity:\n                    demand_component = 0.01  # Heavily penalize\n                elif demands[i] + demands[j] > 0.8 * capacity:\n                    demand_component = 0.5  # Moderately penalize\n\n            # Angle component - prefer edges that don't cause sharp turns\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)  # Normalize to [0, 1]\n\n            # Centrality component - attract towards the center of gravity\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))\n\n            # Depot attraction component - nodes with high demand should be closer to the depot\n            depot_component = 1.0\n            if i!=0 and j!=0:\n                depot_dist_i = distance_matrix[0, i]\n                depot_dist_j = distance_matrix[0, j]\n                depot_component = np.exp(-(depot_dist_i + depot_dist_j) / (2 * demand_weighted_dist_to_depot + 1e-6))\n\n            # Demand Balance Component - Try to balance the load on the routes\n            demand_balance_component = 1.0\n            if i != 0 and j != 0:\n                demand_diff = abs(demands[i] - demands[j])\n                demand_balance_component = np.exp(-demand_diff / (avg_demand + 1e-6))\n\n            heuristic_matrix[i, j] = (distance_component**1.5 * demand_component * (1 - angle_component)**0.5 *\n                                      centrality_component**0.8 * depot_component**0.7 * demand_balance_component**0.6)\n\n            # Sparsification - Remove edges that are unlikely to be in the optimal solution\n            if heuristic_matrix[i, j] < 0.1 * np.mean(heuristic_matrix): #Dynamic threshold.\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix\n\n[Heuristics 4th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines centrality, capacity, angle, depot attraction, and demand considerations for CVRP with sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e-6  # Avoid division by zero\n\n    # Calculate demand density around each node\n    demand_density = np.zeros(n)\n    for i in range(1, n):  # Skip depot\n        nearby_demand = 0\n        for j in range(1, n):\n            if i != j and distance_matrix[i, j] < demand_weighted_dist_to_depot:  # Check reasonable distance\n                nearby_demand += demands[j]\n        demand_density[i] = nearby_demand\n\n    max_demand_density = np.max(demand_density) if np.max(demand_density) > 0 else 1 # Avoid division by zero\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            demand_component = 1.0\n            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:\n                demand_component = 0.05 #Reduce if exceeding capacity constraint. Previously 0.1\n\n            #Sparsify based on capacity\n            if i!=0 and j!=0 and demands[i] + demands[j] > 1.5 * capacity:\n                continue # Do not calculate heuristic, it will remain 0.\n            if i!=0 and j!=0 and (demands[i] > capacity or demands[j] > capacity) :\n                continue # Do not calculate heuristic, it will remain 0.\n\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)\n\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)\n\n            depot_attraction = 1.0\n            if i == 0:\n                depot_attraction = np.exp(-distance / demand_weighted_dist_to_depot)\n            if j == 0:\n                 depot_attraction = np.exp(-distance / demand_weighted_dist_to_depot)\n\n            # Demand density component\n            density_component = 1.0\n            if i != 0 and j != 0:\n                 density_component = np.sqrt((demand_density[i] / max_demand_density) * (demand_density[j] / max_demand_density))\n\n            heuristic_matrix[i, j] = (distance_component * demand_component * (1 - angle_component) * centrality_component * depot_attraction * density_component)\n\n    return heuristic_matrix\n\n[Heuristics 5th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines centrality, capacity, angle, depot attraction, and demand considerations for CVRP with sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e-6  # Avoid division by zero\n\n    # Calculate demand density around each node\n    demand_density = np.zeros(n)\n    for i in range(1, n):  # Skip depot\n        nearby_demand = 0\n        for j in range(1, n):\n            if i != j and distance_matrix[i, j] < demand_weighted_dist_to_depot:  # Check reasonable distance\n                nearby_demand += demands[j]\n        demand_density[i] = nearby_demand\n\n    max_demand_density = np.max(demand_density) if np.max(demand_density) > 0 else 1 # Avoid division by zero\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            demand_component = 1.0\n            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:\n                demand_component = 0.05 #Reduce if exceeding capacity constraint. Previously 0.1\n\n            #Sparsify based on capacity\n            if i!=0 and j!=0 and demands[i] + demands[j] > 1.5 * capacity:\n                continue # Do not calculate heuristic, it will remain 0.\n            if i!=0 and j!=0 and (demands[i] > capacity or demands[j] > capacity) :\n                continue # Do not calculate heuristic, it will remain 0.\n\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)\n\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)\n\n            depot_attraction = 1.0\n            if i == 0:\n                depot_attraction = np.exp(-distance / demand_weighted_dist_to_depot)\n            if j == 0:\n                 depot_attraction = np.exp(-distance / demand_weighted_dist_to_depot)\n\n            # Demand density component\n            density_component = 1.0\n            if i != 0 and j != 0:\n                 density_component = np.sqrt((demand_density[i] / max_demand_density) * (demand_density[j] / max_demand_density))\n\n            heuristic_matrix[i, j] = (distance_component * demand_component * (1 - angle_component) * centrality_component * depot_attraction * density_component)\n\n    return heuristic_matrix\n\n[Heuristics 6th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines distance, demand, depot proximity, and angle for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Normalize distance\n    max_distance = np.max(distance_matrix[distance_matrix != np.inf])\n    normalized_distance = distance_matrix / max_distance\n    normalized_distance = np.where(normalized_distance == 0, 1e-6, normalized_distance)\n\n    # Calculate angles\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_value = 1 / normalized_distance[i, j]\n\n                # Demand penalty\n                if demands[i] + demands[j] > capacity and i != 0 and j != 0:\n                    heuristic_value *= 0.1\n                elif (demands[i] > capacity or demands[j] > capacity) and i != 0 and j!=0:\n                    heuristic_value *= 0.01\n                # Depot proximity penalty (if both nodes are close)\n                depot_distance_i = distance_matrix[0, i] / max_distance\n                depot_distance_j = distance_matrix[0, j] / max_distance\n                if i != 0 and j != 0:\n                    if depot_distance_i < 0.2 and depot_distance_j < 0.2:\n                        heuristic_value *= 0.5\n\n                # Angle difference penalty\n                angle_diff = abs(angles[i] - angles[j])\n                heuristic_value *= np.exp(-2 * angle_diff)\n\n                heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 7th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines distance, demand, depot proximity, and angle for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Normalize distance\n    max_distance = np.max(distance_matrix[distance_matrix != np.inf])\n    normalized_distance = distance_matrix / max_distance\n    normalized_distance = np.where(normalized_distance == 0, 1e-6, normalized_distance)\n\n    # Calculate angles\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_value = 1 / normalized_distance[i, j]\n\n                # Demand penalty\n                if demands[i] + demands[j] > capacity and i != 0 and j != 0:\n                    heuristic_value *= 0.1\n                elif (demands[i] > capacity or demands[j] > capacity) and i != 0 and j!=0:\n                    heuristic_value *= 0.01\n                # Depot proximity penalty (if both nodes are close)\n                depot_distance_i = distance_matrix[0, i] / max_distance\n                depot_distance_j = distance_matrix[0, j] / max_distance\n                if i != 0 and j != 0:\n                    if depot_distance_i < 0.2 and depot_distance_j < 0.2:\n                        heuristic_value *= 0.5\n\n                # Angle difference penalty\n                angle_diff = abs(angles[i] - angles[j])\n                heuristic_value *= np.exp(-2 * angle_diff)\n\n                heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 8th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines distance, demand, depot proximity, and angle for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Normalize distance\n    max_distance = np.max(distance_matrix[distance_matrix != np.inf])\n    normalized_distance = distance_matrix / max_distance\n    normalized_distance = np.where(normalized_distance == 0, 1e-6, normalized_distance)\n\n    # Calculate angles\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_value = 1 / normalized_distance[i, j]\n\n                # Demand penalty\n                if demands[i] + demands[j] > capacity and i != 0 and j != 0:\n                    heuristic_value *= 0.1\n                elif (demands[i] > capacity or demands[j] > capacity) and i != 0 and j!=0:\n                    heuristic_value *= 0.01\n                # Depot proximity penalty (if both nodes are close)\n                depot_distance_i = distance_matrix[0, i] / max_distance\n                depot_distance_j = distance_matrix[0, j] / max_distance\n                if i != 0 and j != 0:\n                    if depot_distance_i < 0.2 and depot_distance_j < 0.2:\n                        heuristic_value *= 0.5\n\n                # Angle difference penalty\n                angle_diff = abs(angles[i] - angles[j])\n                heuristic_value *= np.exp(-2 * angle_diff)\n\n                heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\n[Heuristics 9th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Improved heuristics combining centrality, capacity, angle, depot attraction, and sparsification for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    # Calculate average distance to depot for normalization\n    avg_dist_to_depot = np.mean(distance_matrix[0, 1:])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = np.exp(-distance / avg_dist_to_depot) if avg_dist_to_depot > 0 else 1.0\n\n            demand_component = 1.0\n            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:\n                demand_component = 0.01  # More severe penalty\n\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = np.mean(np.degrees(angles) / 180.0) #Average angle\n\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot) if demand_weighted_dist_to_depot > 0 else 1.0\n\n            depot_component = 1.0\n            if i!=0 and j!=0:\n                depot_attraction_i = np.exp(-distance_matrix[i, 0] / avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n                depot_attraction_j = np.exp(-distance_matrix[j, 0] / avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n                depot_component = (depot_attraction_i + depot_attraction_j) / 2 # Average depot attraction\n\n            elif i==0:\n                depot_component = np.exp(-distance_matrix[j,0]/ avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n            elif j==0:\n                 depot_component = np.exp(-distance_matrix[i,0]/ avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n\n            heuristic_value = (distance_component * demand_component * (1 - angle_component) * centrality_component * depot_component)\n            heuristic_matrix[i, j] = heuristic_value\n\n    # Sparsification: Remove edges with low heuristic values\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 #Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Heuristics 10th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Improved heuristics combining centrality, capacity, angle, depot attraction, and sparsification for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    # Calculate average distance to depot for normalization\n    avg_dist_to_depot = np.mean(distance_matrix[0, 1:])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = np.exp(-distance / avg_dist_to_depot) if avg_dist_to_depot > 0 else 1.0\n\n            demand_component = 1.0\n            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:\n                demand_component = 0.01  # More severe penalty\n\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = np.mean(np.degrees(angles) / 180.0) #Average angle\n\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot) if demand_weighted_dist_to_depot > 0 else 1.0\n\n            depot_component = 1.0\n            if i!=0 and j!=0:\n                depot_attraction_i = np.exp(-distance_matrix[i, 0] / avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n                depot_attraction_j = np.exp(-distance_matrix[j, 0] / avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n                depot_component = (depot_attraction_i + depot_attraction_j) / 2 # Average depot attraction\n\n            elif i==0:\n                depot_component = np.exp(-distance_matrix[j,0]/ avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n            elif j==0:\n                 depot_component = np.exp(-distance_matrix[i,0]/ avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0\n\n            heuristic_value = (distance_component * demand_component * (1 - angle_component) * centrality_component * depot_component)\n            heuristic_matrix[i, j] = heuristic_value\n\n    # Sparsification: Remove edges with low heuristic values\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 #Dynamic threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Heuristics 11th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Combines distance, demand, depot proximity, and angular considerations.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n\n    # Depot proximity\n    depot_distances = distance_matrix[0, :]\n    depot_proximity_i = np.tile(depot_distances, (n, 1))\n    depot_proximity_j = np.tile(depot_distances, (n, 1)).T\n    depot_proximity_factor = 1 / (depot_proximity_i + depot_proximity_j + 1e-9)\n\n    # Demand consideration\n    demand_i = np.tile(demands, (n, 1))\n    demand_j = np.tile(demands, (n, 1)).T\n    demand_factor = 1 / (demand_i + demand_j + 1e-9)\n\n    # Angular proximity to depot\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n    angle_diffs = np.abs(angles[:, None] - angles[None, :])\n    angle_factor = 1 / (np.minimum(angle_diffs, 2 * np.pi - angle_diffs) + 1e-9)\n\n    heuristic_matrix = inverse_distance * depot_proximity_factor * demand_factor * angle_factor\n\n    np.fill_diagonal(heuristic_matrix, 0)\n    return heuristic_matrix\n\n[Heuristics 12th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Combines distance, demand, depot proximity, and angular considerations.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n\n    # Depot proximity\n    depot_distances = distance_matrix[0, :]\n    depot_proximity_i = np.tile(depot_distances, (n, 1))\n    depot_proximity_j = np.tile(depot_distances, (n, 1)).T\n    depot_proximity_factor = 1 / (depot_proximity_i + depot_proximity_j + 1e-9)\n\n    # Demand consideration\n    demand_i = np.tile(demands, (n, 1))\n    demand_j = np.tile(demands, (n, 1)).T\n    demand_factor = 1 / (demand_i + demand_j + 1e-9)\n\n    # Angular proximity to depot\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n    angle_diffs = np.abs(angles[:, None] - angles[None, :])\n    angle_factor = 1 / (np.minimum(angle_diffs, 2 * np.pi - angle_diffs) + 1e-9)\n\n    heuristic_matrix = inverse_distance * depot_proximity_factor * demand_factor * angle_factor\n\n    np.fill_diagonal(heuristic_matrix, 0)\n    return heuristic_matrix\n\n[Heuristics 13th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Combines distance, demand, angle, and depot proximity for CVRP heuristics.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    depot_coords = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            dist_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0\n            demand_penalty = 1.0\n            if demands[i] > capacity / 4 or demands[j] > capacity / 4:\n                demand_penalty = 0.7\n            if (demands[i] + demands[j]) > capacity / 2:\n                demand_penalty = 0.5\n\n            angle_diff = abs(angles[i] - angles[j])\n            angular_factor = 1 / (angle_diff + 0.1)\n\n            if i == 0 or j == 0:\n                depot_proximity = 1.5\n            else:\n                depot_proximity = 1.0\n\n            heuristic_matrix[i, j] = dist_factor * demand_penalty * angular_factor * depot_proximity\n            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 1e6)\n\n    return heuristic_matrix\n\n[Heuristics 14th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Enhanced heuristic: Combines distance, savings, demand, and angle.\"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic\n    distance_heuristic = 1 / (distance_matrix + 1e-6)\n\n    # Savings Heuristic (Clarke-Wright)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n    # Prioritize edges connecting to the depot less in general\n    #heuristics_matrix[0, :] = heuristics_matrix[0, :] * 0.5\n\n    # Demand consideration\n    demand_penalty = np.zeros((n,n))\n    for i in range(n):\n      for j in range(n):\n        demand_penalty[i,j] = (demands[i] + demands[j])\n    demand_penalty = 1/(demand_penalty+1e-6)\n    # Angle heuristic\n    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]\n    angles = np.zeros(n)\n    for i in range(n):\n        if i != 0:\n            dx = coordinates[i, 0] - depot_x\n            dy = coordinates[i, 1] - depot_y\n            angles[i] = np.arctan2(dy, dx)\n\n    angle_diff_matrix = np.zeros((n,n))\n    for i in range(n):\n      for j in range(n):\n          angle_diff_matrix[i,j] = abs(angles[i]-angles[j])\n\n    angle_diff_penalty = 1/(angle_diff_matrix+1e-6)\n\n    # Combine heuristics\n    heuristic_matrix = (0.4 * distance_heuristic + 0.3 * (savings_matrix / np.max(savings_matrix + 1e-6)) + 0.15 * demand_penalty + 0.15 * angle_diff_penalty)\n\n    # Ensure depot connections are preferred\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.1\n        heuristic_matrix[i, 0] *= 1.1\n\n    # Ensure no self-loops\n    for i in range(n):\n        heuristic_matrix[i, i] = 0\n\n    return heuristic_matrix\n\n[Heuristics 15th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Hybrid heuristic combining distance, demand, depot affinity and angle\n    for CVRP. Balances exploration and exploitation.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic\n    distance_heuristic = 1 / (distance_matrix + 1e-6)\n\n    # Demand penalty\n    demand_normalized = demands / np.max(demands)\n    demand_penalty = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            demand_penalty[i, j] = demand_normalized[i] + demand_normalized[j]\n    demand_penalty = np.clip(demand_penalty, 0.0, 1.0)\n\n    # Depot affinity\n    depot_affinity = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                depot_affinity[i, j] = 1.0\n            else:\n                depot_affinity[i, j] = 0.0\n\n    # Angle from depot\n    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]\n    angles = np.zeros(n)\n    for i in range(n):\n        if i != 0:\n            dx = coordinates[i, 0] - depot_x\n            dy = coordinates[i, 1] - depot_y\n            angles[i] = np.arctan2(dy, dx)\n\n    angle_diff_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            angle_diff_matrix[i, j] = abs(angles[i] - angles[j])\n    angle_diff_penalty = 1 / (angle_diff_matrix + 1e-6)\n\n    # Combine heuristics\n    heuristic_matrix = (0.5 * distance_heuristic +\n                       0.15 * (1 - demand_penalty) +\n                       0.15 * depot_affinity +\n                       0.2 * angle_diff_penalty)\n\n    # Depot connections\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.1\n        heuristic_matrix[i, 0] *= 1.1\n\n    return heuristic_matrix\n\n[Heuristics 16th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Hybrid heuristic combining distance, demand, depot affinity and angle\n    for CVRP. Balances exploration and exploitation.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic\n    distance_heuristic = 1 / (distance_matrix + 1e-6)\n\n    # Demand penalty\n    demand_normalized = demands / np.max(demands)\n    demand_penalty = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            demand_penalty[i, j] = demand_normalized[i] + demand_normalized[j]\n    demand_penalty = np.clip(demand_penalty, 0.0, 1.0)\n\n    # Depot affinity\n    depot_affinity = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                depot_affinity[i, j] = 1.0\n            else:\n                depot_affinity[i, j] = 0.0\n\n    # Angle from depot\n    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]\n    angles = np.zeros(n)\n    for i in range(n):\n        if i != 0:\n            dx = coordinates[i, 0] - depot_x\n            dy = coordinates[i, 1] - depot_y\n            angles[i] = np.arctan2(dy, dx)\n\n    angle_diff_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            angle_diff_matrix[i, j] = abs(angles[i] - angles[j])\n    angle_diff_penalty = 1 / (angle_diff_matrix + 1e-6)\n\n    # Combine heuristics\n    heuristic_matrix = (0.5 * distance_heuristic +\n                       0.15 * (1 - demand_penalty) +\n                       0.15 * depot_affinity +\n                       0.2 * angle_diff_penalty)\n\n    # Depot connections\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.1\n        heuristic_matrix[i, 0] *= 1.1\n\n    return heuristic_matrix\n\n[Heuristics 17th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Improved heuristics for CVRP combining distance, demand, savings, and depot proximity.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n\n    # Inverse distance\n    distance_heuristic = 1 / (distance_matrix + 1e-9)\n    heuristics += distance_heuristic * 1.0\n\n    # Demand-based heuristic\n    demand_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            demand_matrix[i, j] = demands[i] + demands[j]\n    demand_heuristic = np.clip(1 - (demand_matrix / capacity), 0, 1)\n    heuristics += demand_heuristic * 1.0\n\n    # Savings Heuristic (Clarke-Wright)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n    savings_matrix = savings_matrix / (np.max(savings_matrix + 1e-9))\n    heuristics += savings_matrix * 0.5\n\n    # Depot proximity heuristic\n    depot_distances = distance_matrix[0, :]\n    depot_proximity_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)\n\n    max_val = np.max(depot_proximity_matrix)\n    if max_val > 0:\n        depot_proximity_matrix = depot_proximity_matrix / max_val\n    heuristics += depot_proximity_matrix * 0.5\n\n    # Ensure no self-loops\n    for i in range(n):\n        heuristics[i, i] = 0\n\n    return heuristics\n\n[Heuristics 18th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Improved heuristics for CVRP combining distance, demand, savings, and depot proximity.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n\n    # Inverse distance\n    distance_heuristic = 1 / (distance_matrix + 1e-9)\n    heuristics += distance_heuristic * 1.0\n\n    # Demand-based heuristic\n    demand_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            demand_matrix[i, j] = demands[i] + demands[j]\n    demand_heuristic = np.clip(1 - (demand_matrix / capacity), 0, 1)\n    heuristics += demand_heuristic * 1.0\n\n    # Savings Heuristic (Clarke-Wright)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n    savings_matrix = savings_matrix / (np.max(savings_matrix + 1e-9))\n    heuristics += savings_matrix * 0.5\n\n    # Depot proximity heuristic\n    depot_distances = distance_matrix[0, :]\n    depot_proximity_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)\n\n    max_val = np.max(depot_proximity_matrix)\n    if max_val > 0:\n        depot_proximity_matrix = depot_proximity_matrix / max_val\n    heuristics += depot_proximity_matrix * 0.5\n\n    # Ensure no self-loops\n    for i in range(n):\n        heuristics[i, i] = 0\n\n    return heuristics\n\n[Heuristics 19th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Combines distance, demand, angle, and depot proximity for CVRP.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n    depot_distances = distance_matrix[0, :]\n    normalized_demands = demands / np.max(demands) if np.max(demands) > 0 else demands # Prevent divide by zero\n    normalized_depot_distances = depot_distances / np.max(depot_distances)\n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n                continue\n            if distance_matrix[i, j] == 0:\n                heuristic_matrix[i, j] = 0\n                continue\n\n            # Distance component (shorter distance is better)\n            distance_heuristic = 1 / (distance_matrix[i, j] + 1e-9)\n\n            # Demand component (lower demand is generally better)\n            demand_heuristic = 1 - (normalized_demands[i] + normalized_demands[j]) / 2\n            demand_heuristic = max(demand_heuristic, 0.01)\n\n            # Angle component (smaller angles are better)\n            if i != 0:\n                vector_depot = coordinates[0] - coordinates[i]\n                vector_j = coordinates[j] - coordinates[i]\n\n                norm_depot = np.linalg.norm(vector_depot)\n                norm_j = np.linalg.norm(vector_j)\n                if norm_depot == 0 or norm_j == 0:\n                    angle = 0\n                else:\n                    vector_depot = vector_depot / norm_depot\n                    vector_j = vector_j / norm_j\n\n                    dot_product = np.dot(vector_depot, vector_j)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n\n                angle_heuristic = 1.0 -  angle / np.pi\n                angle_heuristic = max(angle_heuristic, 0.01)\n            else:\n                angle_heuristic = 1.0\n\n            # Depot proximity component\n            depot_proximity_heuristic = 1 - (normalized_depot_distances[i] + normalized_depot_distances[j]) / 2\n            depot_proximity_heuristic = max(depot_proximity_heuristic,0.01)\n\n            heuristic_matrix[i, j] = (\n                distance_heuristic * demand_heuristic * angle_heuristic * depot_proximity_heuristic\n            )\n\n    return heuristic_matrix\n\n[Heuristics 20th]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Combines distance, demand, depot proximity, and capacity awareness.\n    Penalizes high-demand connections and favors depot returns.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    normalized_demands = demands / np.max(demands) if np.max(demands) > 0 else demands\n    depot_distances = distance_matrix[0, :]\n    normalized_depot_distances = depot_distances / np.max(depot_distances)\n\n    gravity_constant = 1.0\n    capacity_penalty = 2.0\n    depot_attraction = 1.5\n    nearby_penalty = 0.8\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0\n            else:\n                heuristic = gravity_constant / (distance_matrix[i, j] + 1e-9)\n\n                if i == 0 or j == 0:\n                    heuristic *= depot_attraction\n\n                estimated_load = demands[j]\n                if estimated_load > capacity:\n                    heuristic = 0\n                else:\n                    remaining_capacity_ratio = (capacity - estimated_load) / capacity\n                    heuristic *= (1 + capacity_penalty * remaining_capacity_ratio)\n                    heuristic *= (1 - (normalized_demands[i] + normalized_demands[j]) / 2)\n                    heuristic += 0.1 * (1 - (normalized_depot_distances[i] + normalized_depot_distances[j]) / 2)\n\n                if distance_matrix[i, j] < np.mean(distance_matrix):\n                    heuristic *= nearby_penalty\n\n                heuristic_matrix[i, j] = heuristic\n\n    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)\n    return heuristic_matrix\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}