import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int,
                  sparsification_factor: float = 2.8756171141731377,
                  demand_penalty: float = 0.008177668410187675,
                  demand_bonus: float = 1.1641946428251095,
                  angle_smoothing: float = 0.10210345260096675,
                  depot_factor: float = 1.2754263994006725,
                  epsilon: float = 5.618764940412472e-06) -> np.ndarray:
    """Adaptive heuristic combining distance, demand, angle, and depot proximity with dynamic sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    # Adaptive sparsification threshold
    avg_distance = np.mean(distance_matrix)
    sparsification_threshold = sparsification_factor * avg_distance  # Adjust factor as needed

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]

            # Sparsification
            if distance > sparsification_threshold:
                continue

            distance_component = 1 / (distance + epsilon)

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = demand_penalty  # High penalty for exceeding capacity
                else:
                    demand_component = demand_bonus

            angle_diff = abs(angles[i] - angles[j])
            angular_factor = 1 / (angle_diff + angle_smoothing)

            depot_proximity = 1.0
            if i == 0 or j == 0:
                depot_proximity = depot_factor

            # Combination with multiplicative and additive factors
            heuristic_value = distance_component * demand_component * angular_factor * depot_proximity
            heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
