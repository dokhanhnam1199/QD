```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Hybrid heuristic combining distance, demand, depot affinity and angle
    for CVRP. Balances exploration and exploitation.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # Demand penalty
    demand_normalized = demands / np.max(demands)
    demand_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_penalty[i, j] = demand_normalized[i] + demand_normalized[j]
    demand_penalty = np.clip(demand_penalty, 0.0, 1.0)

    # Depot affinity
    depot_affinity = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i == 0 or j == 0:
                depot_affinity[i, j] = 1.0
            else:
                depot_affinity[i, j] = 0.0

    # Angle from depot
    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]
    angles = np.zeros(n)
    for i in range(n):
        if i != 0:
            dx = coordinates[i, 0] - depot_x
            dy = coordinates[i, 1] - depot_y
            angles[i] = np.arctan2(dy, dx)

    angle_diff_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            angle_diff_matrix[i, j] = abs(angles[i] - angles[j])
    angle_diff_penalty = 1 / (angle_diff_matrix + 1e-6)

    # Combine heuristics
    heuristic_matrix = (0.5 * distance_heuristic +
                       0.15 * (1 - demand_penalty) +
                       0.15 * depot_affinity +
                       0.2 * angle_diff_penalty)

    # Depot connections
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.1
        heuristic_matrix[i, 0] *= 1.1

    return heuristic_matrix
```
