```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improves upon simple distance-based heuristics for CVRP.  Considers:
    1.  Distance between nodes.
    2.  Angle between nodes relative to the depot (favors routes radiating outwards).
    3.  Demand of the nodes (discourages links between high-demand nodes except near depot).
    4.  Encourages returning to the depot when capacity is almost full.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # Disallow self-loops
                continue

            distance = distance_matrix[i, j]

            # Distance component (inverse relationship)
            distance_component = 1 / (distance + 1e-6) #Adding small constant to prevent division by zero

            # Angle component (favor routes radiating outwards from the depot).
            # Penalize connections that create routes that sharply turn back towards the depot prematurely.
            angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)
            angle_diff = np.abs(angle_i - angle_j)
            angle_component = np.exp(-angle_diff) # Smaller angle diff is more favorable

            # Demand component (Discourage directly connecting high demand nodes except around the depot).
            demand_i = demands[i]
            demand_j = demands[j]
            demand_component = np.exp(-0.1 * (demand_i + demand_j)) # Penalize connecting high demand customers. Reduced the factor to avoid strong bias

            #Depot bias: Bias towards edges connecting customers to the depot
            depot_bias_i = np.exp(-0.5 * distance_matrix[i,0]) #Prefer connecting nearby customers to the depot.
            depot_bias_j = np.exp(-0.5 * distance_matrix[j,0])

            # Combine components
            heuristics[i, j] = (0.6 * distance_component + 0.2 * angle_component + 0.1 * demand_component + 0.05 * depot_bias_i + 0.05* depot_bias_j)


    return heuristics
```
