```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines centrality, capacity, angle, depot attraction, and demand correlation with adaptive sparsification for CVRP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Adaptive Sparsification Threshold (initialized)
    sparsification_threshold = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.01  # Heavily penalize exceeding capacity

            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))

            depot_component = 1.0
            if i != 0 and j==0: # Attract to the depot
                depot_component = 2

            if j != 0 and i==0: # Attract from the depot
                depot_component = 2

            # Demand Correlation - Prioritize pairing nodes with similar demands
            demand_similarity = 1.0 - abs(demands[i] - demands[j]) / (capacity + 1e-6)
            demand_similarity = np.clip(demand_similarity, 0.1, 1.0) # Avoid zero values

            # Combine components multiplicatively
            heuristic_value = (distance_component * demand_component * (1 - angle_component) *
                             centrality_component * depot_component * demand_similarity)

            heuristic_matrix[i, j] = heuristic_value

    # Adaptive Sparsification: Zero out elements below the threshold
    max_heuristic_value = np.max(heuristic_matrix)
    if max_heuristic_value > 0:
        threshold = sparsification_threshold * max_heuristic_value
        heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
