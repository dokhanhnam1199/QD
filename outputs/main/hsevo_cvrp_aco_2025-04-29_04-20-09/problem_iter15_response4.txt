```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristics combining distance, demand, angle, centrality,
    and depot attraction with dynamic parameter adjustment and sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Adaptive parameters (initialized)
    alpha = 1.0  # Distance importance
    beta = 1.0   # Demand importance
    gamma = 1.0  # Angle importance
    delta = 1.0  # Centrality importance
    epsilon = 1.0 # Depot attraction importance
    rho = 0.1     # Sparsity threshold

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.1 # Penalty if combined demand is too high
                else:
                    demand_component = np.exp(-abs(demands[i] + demands[j] - capacity/2)/(capacity/2))  # Bonus for demand close to half capacity

            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)  # Smaller angle is better

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6)) # Closer to center is better

            depot_component = 1.0
            if i!=0 and j==0:
                load_before_depot = demands[i]
                depot_component = (1 + np.exp(load_before_depot/capacity)) / 2
            elif j!=0 and i==0:
                 load_before_depot = demands[j]
                 depot_component = (1 + np.exp(load_before_depot/capacity)) / 2
            else:
                depot_component = 0.5 # slight penalty if not connected to depot

            # Weighted combination of components
            heuristic_value = (
                (distance_component ** alpha) *
                (demand_component ** beta) *
                ((1 - angle_component) ** gamma) *  # Penalize large angles
                (centrality_component ** delta) *
                (depot_component ** epsilon)
            )
            heuristic_matrix[i, j] = heuristic_value

    #Sparsification (remove less promising edges)

    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * rho
    heuristic_matrix[heuristic_matrix < threshold] = 0.0


    return heuristic_matrix
```
