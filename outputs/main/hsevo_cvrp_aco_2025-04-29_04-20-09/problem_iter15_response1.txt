```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines centrality, capacity, angle, depot attraction, and demand-distance for CVRP with sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1 #avoid zero division

    # Normalize distances for better comparison
    max_distance = np.max(distance_matrix)
    normalized_distance_matrix = distance_matrix / max_distance if max_distance > 0 else distance_matrix #avoid zero division

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = normalized_distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)  # Inverted for attractiveness

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.1  # Penalize exceeding capacity
                else:
                    demand_distance = distance * (demands[i] + demands[j]) # demand and distance combination
                    demand_component = np.exp(-demand_distance / capacity) #normalized score

            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)
                angle_component = 1 - angle_component #reverse

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot > 0 else 1)

            depot_attraction = 0.0
            if i != 0:
                depot_attraction += np.exp(-distance_matrix[0, i] / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot > 0 else 1)
            if j != 0:
                depot_attraction += np.exp(-distance_matrix[0, j] / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot > 0 else 1)
            depot_component = depot_attraction/2 # Average depot attraction

            heuristic_matrix[i, j] = (distance_component**1.2 * demand_component**0.8 * (angle_component)**1.1 * centrality_component**0.9 * depot_component**1.0)

    # Sparsify the matrix (remove unpromising edges)
    threshold = np.mean(heuristic_matrix) * 0.2 # Dynamic threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
