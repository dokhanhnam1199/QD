```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) using a combination of distance,
    demand, and savings-based prioritization.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n). depot has demand 0
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior indicators (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Initialize with inverse distance (like v1)
    heuristics_matrix = 1 / (distance_matrix + 1e-6) # add small number to avoid division by zero

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):  # Exclude depot (node 0)
        for j in range(i + 1, n): # Iterate upper triangle only to avoid duplicates. Exclude depot (node 0).
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Make symmetric
    # Prioritize edges connecting to the depot less in general
    heuristics_matrix[0, :] = heuristics_matrix[0, :] * 0.5 # lower the chances to go from depot node

    # Combine distance and savings
    heuristics_matrix = 0.7 * heuristics_matrix + 0.3 * (savings_matrix / np.max(savings_matrix + 1e-6))  # Normalize savings
    # Demand consideration: Scale edges according to total demand they enable
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = heuristics_matrix[i, j] / (demands[i] + demands[j] + 1e-6)


    # Bias towards connections from nodes with high degree
    degree_centrality = np.sum(heuristics_matrix, axis=1)
    for i in range(n):
        for j in range(n):
           heuristics_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j] + 1e-6)**0.5


    # Ensure no self-loops
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
```
