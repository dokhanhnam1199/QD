```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristics for CVRP based on distance, demand, and angular considerations.

    This version considers:
    1. Inverse distance: Shorter distances are preferred.
    2. Demand factor: Edges connecting to nodes with higher demand are penalized
       if including them might lead to capacity violations on the current route.
    3. Angular proximity: Nodes closer in angle from the depot are preferred,
       encouraging more compact routes.
    4. Depot proximity: Edges closer to depot are preferred.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate angles from depot
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0  # Avoid division by zero
            demand_factor = 1.0

            # Prioritize edges from the depot (node 0)
            if i == 0 or j == 0:
                depot_proximity = 1.5 # Give depot edges a boost. Experiment.
            else:
                depot_proximity = 1.0

            # Penalize edges if demand is high (especially for neighbors of nodes with already large demand)
            # The idea is to encourage smaller routes near the depot and prevent overstuffing of vehicles too early.
            demand_penalty = 1.0
            if demands[i] > capacity / 4 or demands[j] > capacity / 4:  #Tune the factor.
                demand_penalty = 0.7  # Slightly reduce probability of high-demand edge.
            if (demands[i] + demands[j]) > capacity / 2: # Further penalty if together high.
                demand_penalty = 0.5


            # Angular proximity (favor nodes closer in angle relative to depot).
            angle_diff = abs(angles[i] - angles[j])
            angular_factor = 1 / (angle_diff + 0.1) #Add a small constanst to avoid divergence,

            heuristic_matrix[i, j] = distance_factor * demand_factor * angular_factor * depot_proximity
            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 1e6) # Clip large values.

    return heuristic_matrix
```
