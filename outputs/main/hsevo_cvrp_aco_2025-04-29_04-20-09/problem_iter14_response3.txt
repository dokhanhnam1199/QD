```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines centrality, capacity awareness, and adaptive edge selection for CVRP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Adaptive parameters
    distance_power = 1.0
    centrality_power = 1.0
    capacity_penalty = 10.0
    sparsification_threshold = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = (1 / (distance + 1e-6)) ** distance_power

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 1 / capacity_penalty

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot+1e-6))** centrality_power

            heuristic_matrix[i, j] = distance_component * demand_component * centrality_component

    # Sparsification: adaptive based on mean heuristic value.
    mean_heuristic_value = np.mean(heuristic_matrix)
    threshold = sparsification_threshold * mean_heuristic_value
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
