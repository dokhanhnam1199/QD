```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines centrality, capacity, angle, depot attraction, and demand considerations for CVRP with sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e6  # Avoid division by zero

    # Normalizing distances to [0, 1]
    max_distance = np.max(distance_matrix)
    normalized_distance_matrix = distance_matrix / max_distance if max_distance > 0 else np.zeros_like(distance_matrix)

    # Parameters (tunable)
    alpha = 0.5  # Distance weight
    beta = 0.3   # Centrality weight
    gamma = 0.2  # Demand weight
    theta = 0.4 # Angle Weight

    centrality_scale = 10
    demand_threshold_factor = 0.8 #Threshold for demand component
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            if i == 0 or j == 0: # prioritize edges connecting to the depot.
                depot_attraction = 1.5
            else:
                depot_attraction = 1.0

            # Distance component
            distance_component = 1 - normalized_distance_matrix[i, j]

            # Centrality Component
            center_distance_i = np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2)
            center_distance_j = np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)
            avg_center_distance = (center_distance_i + center_distance_j) / 2
            centrality_component = np.exp(-avg_center_distance / demand_weighted_dist_to_depot) * centrality_scale

            #Demand component
            demand_component = 1.0
            if demands[i] + demands[j] > capacity * demand_threshold_factor:
                demand_component = 0.2  # Reduce attractiveness if combined demand is too high

            # Angle Component
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)


            # Combined heuristic value
            heuristic_value = (alpha * distance_component +
                               beta * centrality_component +
                               gamma * demand_component +
                               theta * (1-angle_component)) * depot_attraction
            heuristic_matrix[i, j] = heuristic_value


    # Sparsification
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40) # Keep top 60%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
