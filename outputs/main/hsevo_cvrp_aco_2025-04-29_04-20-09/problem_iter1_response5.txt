```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic for CVRP based on distance, demand, and depot proximity.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Normalize demands for better scaling
    normalized_demands = demands / np.max(demands)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse of distance
                heuristic = 1 / distance_matrix[i, j]

                # Penalty for high demand nodes, especially far from depot
                depot_distance_penalty = (distance_matrix[0, i] + distance_matrix[0, j]) / (2*np.max(distance_matrix))

                heuristic *= np.exp(-5 * normalized_demands[i] * depot_distance_penalty)
                heuristic *= np.exp(-5 * normalized_demands[j] * depot_distance_penalty)

                # Additional depot bias: favor edges connected to the depot
                if i == 0 or j == 0:
                  heuristic *= 1.5 # Increase bias for connections to the depot

                heuristic_matrix[i, j] = heuristic
    return heuristic_matrix
```
