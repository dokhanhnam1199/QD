```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristics for CVRP, combining distance, demand, angle, centrality,
    and depot attraction, with adaptive parameter tuning and sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate centroid of non-depot customers
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    
    # Total demand and weighted distance to depot
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Adaptive parameters (initialized, can be dynamically updated during search)
    alpha = 1.0  # Distance weight
    beta = 1.0   # Demand weight
    gamma = 1.0  # Angle weight
    delta = 1.0  # Centrality weight
    epsilon = 1.0 # Depot attraction weight
    rho = 0.1 # Sparsification threshold

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            demand_component = 1.0
            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:
                demand_component = 0.1  # Penalize exceeding capacity

            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)

            # Centrality component (distance to centroid)
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))

            # Depot attraction component
            depot_component = 1.0
            if i == 0:
                depot_component = 2.0  # Encourage edges from depot
            elif j == 0:
                depot_component = 2.0 # Encourage edges to depot
            else:
                #Bias towards shorter trips
                depot_component = 1 + np.exp(-(distance_matrix[0, i] + distance_matrix[0, j]) / (2 * demand_weighted_dist_to_depot + 1e-6))

            # Combine components with weights
            heuristic_value = (alpha * distance_component *
                               beta * demand_component *
                               gamma * (1 - angle_component) *
                               delta * centrality_component *
                               epsilon * depot_component)

            # Sparsification: set unpromising edges to zero
            if heuristic_value < rho:
                heuristic_matrix[i, j] = 0.0
            else:
                heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
```
