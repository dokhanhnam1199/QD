import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int,
                  demand_penalty_clip: float = 0.08118141211097818,
                  angular_factor_denominator_offset: float = 0.4358334851496281,
                  depot_proximity_multiplier: float = 1.2832295618342746,
                  demand_capacity_threshold: float = 1.0992506051956397,
                  heuristic_clip_max: float = 2912092.655406864,
                  distance_offset: float = 8.929086017115108e-06) -> np.ndarray:
    """Combines distance, demand, angle, depot proximity, and demand density."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    # Demand density calculation (similar to v0)
    demand_density = np.zeros(n)
    mean_distance = np.mean(distance_matrix)
    for i in range(1, n):
        nearby_demand = 0
        for j in range(1, n):
            if i != j and distance_matrix[i, j] < mean_distance:
                nearby_demand += demands[j]
        demand_density[i] = nearby_demand
    max_demand_density = np.max(demand_density) if np.max(demand_density) > 0 else 1

    #Center calculation
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e-6  # Avoid division by zero

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            dist_factor = 1 / (distance + distance_offset)

            # Demand penalty (similar to v1, but smoother)
            demand_penalty = 1.0 - np.clip((demands[i] + demands[j]) / (2 * capacity), 0, demand_penalty_clip) #Smoother and combined

            # Angular factor (v1)
            angle_diff = abs(angles[i] - angles[j])
            angular_factor = 1 / (angle_diff + angular_factor_denominator_offset)

            # Depot proximity (v1, but modified)
            depot_proximity = 1.0
            if i == 0 or j == 0:
                depot_proximity = depot_proximity_multiplier  #Slightly less aggressive

            #Demand Density Component (v0)
            density_component = 1.0
            if i != 0 and j != 0:
                density_component = np.sqrt((demand_density[i] / max_demand_density) * (demand_density[j] / max_demand_density))

            #Center Component(v0)
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)

            # Combined heuristic
            heuristic_matrix[i, j] = (dist_factor * demand_penalty * angular_factor * depot_proximity * density_component * centrality_component)

            #Sparsification
            if i!=0 and j!=0 and (demands[i] + demands[j]) > demand_capacity_threshold * capacity:
                heuristic_matrix[i, j] = 0
            if i!=0 and j!=0 and (demands[i] > capacity or demands[j] > capacity) :
                heuristic_matrix[i, j] = 0

            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, heuristic_clip_max)

    return heuristic_matrix
