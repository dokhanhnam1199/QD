```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic combining distance, demand, angle, depot attraction,
    and route balance with adaptive weighting and sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # --- Global context ---
    total_demand = np.sum(demands[1:])
    avg_demand = total_demand / (n - 1) if n > 1 else 0
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    max_distance = np.max(distance_matrix)  # For normalization

    # --- Adaptive weighting (initialized) ---
    weight_distance = 0.4
    weight_demand = 0.3
    weight_angle = 0.15
    weight_centrality = 0.1
    weight_depot = 0.05

    # --- Heuristic computation ---
    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # --- Distance component (normalized) ---
            distance = distance_matrix[i, j]
            distance_component = 1 - (distance / max_distance) if max_distance > 0 else 1

            # --- Demand component ---
            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.0  # Cannot be in the same route
                else:
                    demand_ratio = (demands[i] + demands[j]) / capacity
                    demand_component = np.exp(-2 * (demand_ratio - 0.5)**2)  # Prefer routes near half capacity. The exponent ensures a sharp drop off outside this region.

            # --- Angle component (avoid sharp turns) ---
            angle_component = 0.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)

                if len(angles) > 0:
                    min_angle = np.min(angles)
                    angle_component = min_angle / np.pi # normalize to range 0-1

            # --- Centrality component (attract towards the center) ---
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (np.sqrt((center_x**2 + center_y**2)) + 1e-6)) #normalized distance to center

            # --- Depot attraction (penalize long detours from depot) ---
            depot_component = 1.0
            if i != 0:
                depot_distance_ratio = distance_matrix[0,i] / max_distance if max_distance > 0 else 0
                depot_component = np.exp(-5 * depot_distance_ratio)  # Exponential decay penalizing long detours

            # --- Combined heuristic value ---
            heuristic_matrix[i, j] = (weight_distance * distance_component +
                                      weight_demand * demand_component +
                                      weight_angle * (1 - angle_component) +  # smaller angle = better
                                      weight_centrality * centrality_component +
                                      weight_depot * depot_component)

    # --- Sparsification: remove less promising edges ---
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.25 #Adaptive threshold for sparsification
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
