```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, angle, and depot proximity with smooth weighting."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Normalize distance
    max_distance = np.max(distance_matrix[distance_matrix != np.inf])
    normalized_distance = distance_matrix / max_distance if max_distance > 0 else np.ones_like(distance_matrix) # Avoid division by zero
    normalized_distance = np.where(normalized_distance == 0, 1e-6, normalized_distance)

    # Calculate angles relative to depot
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    # Demand density component
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else np.mean(distance_matrix[0,1:])  # Avoid division by zero

    demand_density = np.zeros(n)
    for i in range(1, n):  # Skip depot
        nearby_demand = 0
        for j in range(1, n):
            if i != j and distance_matrix[i, j] < demand_weighted_dist_to_depot:  # Check reasonable distance
                nearby_demand += demands[j]
        demand_density[i] = nearby_demand

    max_demand_density = np.max(demand_density) if np.max(demand_density) > 0 else 1 # Avoid division by zero


    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_value = 1 / normalized_distance[i, j]

                # Demand penalty with smooth weighting
                demand_penalty = 1.0
                if i != 0 and j != 0:
                    excess_demand = max(0, demands[i] + demands[j] - capacity)
                    demand_penalty = np.exp(-excess_demand / capacity) #Smooth penalty

                heuristic_value *= demand_penalty

                # Depot proximity with smooth weighting
                depot_distance_i = distance_matrix[0, i] / max_distance
                depot_distance_j = distance_matrix[0, j] / max_distance
                depot_proximity = np.exp(-5 * (depot_distance_i + depot_distance_j)) #Smooth

                if i != 0 and j != 0:
                    heuristic_value *= depot_proximity

                # Angle difference penalty
                angle_diff = abs(angles[i] - angles[j])
                heuristic_value *= np.exp(-2 * angle_diff)

                # Demand density component

                density_component = 1.0
                if i != 0 and j != 0:
                    density_component = np.sqrt((demand_density[i] / max_demand_density) * (demand_density[j] / max_demand_density))

                heuristic_value*= density_component
                heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
```
