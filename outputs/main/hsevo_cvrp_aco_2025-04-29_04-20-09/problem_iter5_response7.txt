```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, depot proximity, and angle."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Normalize distance
    max_distance = np.max(distance_matrix[distance_matrix != np.inf])
    normalized_distance = distance_matrix / max_distance
    normalized_distance = np.where(normalized_distance == 0, 1e-6, normalized_distance)

    # Calculate angles
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    # Depot proximity
    depot_distances = distance_matrix[0, :]
    depot_proximity_i = np.tile(depot_distances, (n, 1))
    depot_proximity_j = np.tile(depot_distances, (n, 1)).T
    depot_proximity_factor = 1 / (depot_proximity_i + depot_proximity_j + 1e-9)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_value = 1 / normalized_distance[i, j]

                # Demand penalty with continuous scaling
                demand_ratio = (demands[i] + demands[j]) / capacity
                demand_penalty = np.clip(demand_ratio, 0.1, 1.0)
                if i != 0 and j != 0:
                      heuristic_value /= demand_penalty

                # Depot proximity weighting
                depot_distance_i = distance_matrix[0, i] / max_distance
                depot_distance_j = distance_matrix[0, j] / max_distance
                proximity_weight = 1 - np.clip(depot_distance_i + depot_distance_j, 0, 0.9)  # Scale between 0.1 and 1.0
                if i != 0 and j != 0:
                    heuristic_value *= proximity_weight

                # Angle difference penalty
                angle_diff = abs(angles[i] - angles[j])
                heuristic_value *= np.exp(-2 * angle_diff)

                heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
```
