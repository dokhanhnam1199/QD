```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines distance, demand, angle, and capacity proximity for CVRP.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    distance_weight = 1.0
    demand_weight = 0.5
    angle_weight = 0.3
    capacity_proximity_weight = 0.2

    for i in range(n):
        for j in range(n):
            if i == j or distance_matrix[i, j] == 0:
                continue

            distance_heuristic = distance_weight / distance_matrix[i, j]

            demand_heuristic = 1.0 / (1.0 + np.exp(demand_weight * (demands[i] + demands[j] - capacity/2.0)))

            if i != 0:
                vector_depot = coordinates[0] - coordinates[i]
                vector_j = coordinates[j] - coordinates[i]
                norm_depot = np.linalg.norm(vector_depot)
                norm_j = np.linalg.norm(vector_j)

                if norm_depot == 0 or norm_j == 0:
                    angle = 0
                else:
                    vector_depot = vector_depot / norm_depot
                    vector_j = vector_j / norm_j
                    dot_product = np.dot(vector_depot, vector_j)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))

                angle_heuristic = 1.0 - angle_weight * angle / np.pi
            else:
                angle_heuristic = 1.0

            capacity_proximity_heuristic = 1.0- np.abs(capacity-demands[i])/(capacity+1e-9)
            capacity_proximity_heuristic = max(capacity_proximity_heuristic,0.01)

            heuristic_matrix[i, j] = (
                distance_heuristic * demand_heuristic * angle_heuristic * capacity_proximity_heuristic
            )

    return heuristic_matrix
```
