```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic combining distance, demand, angle, centrality, and depot attraction with adaptive weights and sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate center and total demand for centrality calculations
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e6  # prevent zero division

    # Adaptive weights (can be tuned based on problem instances)
    distance_weight = 0.4
    demand_weight = 0.3
    angle_weight = 0.15
    centrality_weight = 0.1
    depot_weight = 0.05

    # Sparsification threshold (can be tuned)
    sparsification_threshold = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # Distance component
            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            # Demand component
            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.05  # heavily penalize exceeding capacity
                else:
                     demand_component = 1 - (demands[i] + demands[j]) / (2 * capacity)


            # Angle component (calculate angle to other nodes)
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = np.pi/2 #Set angle to right angle for robustness
                        else:
                            angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0)) #clip for numerical stability
                        angles.append(angle)

                if len(angles) > 0:
                    angle_component = np.min(np.degrees(angles)) / 180.0
                else:
                    angle_component = 0.5  #reasonable default value when the node has no other neighbors to calculate the angle with.
            else:
                angle_component = 0.5

            # Centrality component (distance from center of gravity)
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))

            # Depot component (attraction to the depot, especially for nodes with high demand)
            depot_component = 1.0
            if i != 0:
                depot_distance_i = distance_matrix[i, 0]
                depot_component_i = np.exp(-depot_distance_i / (demand_weighted_dist_to_depot + 1e-6)) * (1 + demands[i]/capacity)

            else:
                depot_component_i = 1.0

            if j!= 0:

                depot_distance_j = distance_matrix[j, 0]
                depot_component_j = np.exp(-depot_distance_j / (demand_weighted_dist_to_depot+ 1e-6)) * (1 + demands[j]/capacity)
            else:
                depot_component_j = 1.0
            depot_component = (depot_component_i + depot_component_j)/2


            # Combine components with adaptive weights
            heuristic_value = (distance_weight * distance_component +
                               demand_weight * demand_component +
                               angle_weight * (1 - angle_component) +  # minimize angle
                               centrality_weight * centrality_component +
                               depot_weight * depot_component)

            heuristic_matrix[i, j] = heuristic_value

    #Sparsify the matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix[heuristic_matrix < sparsification_threshold * max_heuristic] = 0

    return heuristic_matrix
```
