```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines distance, demand, depot proximity, and centrality, with sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Normalize distances
    max_distance = np.max(distance_matrix)
    normalized_distances = distance_matrix / (max_distance + 1e-6)

    # Demand component: discourage edges exceeding capacity
    demand_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_matrix[i, j] = demands[i] + demands[j]
    demand_component = np.clip(1 - (demand_matrix / capacity), 0, 1)

    # Depot proximity
    depot_distances = distance_matrix[0, :]
    depot_proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)
    max_val = np.max(depot_proximity_matrix)
    if max_val > 0:
        depot_proximity_matrix = depot_proximity_matrix / max_val

    # Centrality component
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])

    centrality_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_matrix[i, j] = np.exp(-center_distance)

    max_centrality = np.max(centrality_matrix)
    if max_centrality > 0:
        centrality_matrix = centrality_matrix / max_centrality

    # Combine components with powers
    distance_power = 1.0
    demand_power = 1.0
    depot_power = 1.0
    centrality_power = 1.0

    heuristic_matrix = (
        (1 / (normalized_distances + 1e-6))**distance_power *
        demand_component**demand_power *
        depot_proximity_matrix**depot_power *
        centrality_matrix**centrality_power
    )

    # Adaptive sparsification
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.5
    heuristic_matrix[heuristic_matrix < threshold] = 0
    heuristic_matrix[distance_matrix == 0] = 0 # remove self-loops

    return heuristic_matrix
```
