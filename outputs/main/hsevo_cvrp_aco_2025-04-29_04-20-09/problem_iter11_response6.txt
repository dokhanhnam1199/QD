```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristics for CVRP combining adaptive distance, demand."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Adaptive weight initialization
    weight_distance = 0.7
    weight_demand = 0.3

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.01  # Penalize exceeding capacity
                else:
                    demand_component = 1 - (demands[i] + demands[j]) / (2*capacity) # reward smaller demand

            heuristic_matrix[i, j] = (weight_distance * distance_component + weight_demand * demand_component)

    # Sparsify the matrix (adaptive threshold)
    threshold = np.mean(heuristic_matrix) * 0.3
    heuristic_matrix[heuristic_matrix < threshold] = 0
    return heuristic_matrix
```
