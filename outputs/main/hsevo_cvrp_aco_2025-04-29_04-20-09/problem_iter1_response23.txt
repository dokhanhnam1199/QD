```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This heuristic combines distance, demand, and node proximity to the depot to guide the search.
    It prioritizes shorter distances, penalizes edges connecting high-demand nodes,
    and favors edges closer to the depot (node 0) when a vehicle is likely to be near capacity.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n) between nodes.
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators (n x n) of edge promisingness.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Normalize demands for better scaling
    normalized_demands = demands / np.max(demands) if np.max(demands) > 0 else demands # Prevent divide by zero
    
    #distance from depot
    depot_distances = distance_matrix[0, :]  # Distances from depot to all nodes
    normalized_depot_distances = depot_distances / np.max(depot_distances)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Avoid self-loops
            else:
                # Base: Inverse distance
                heuristic = 1 / (distance_matrix[i, j] + 1e-9)  # Add a small constant to avoid division by zero

                # Penalize high-demand connections
                heuristic *= (1 - (normalized_demands[i] + normalized_demands[j]) / 2)
                
                #Bonus for edges closer to depot. Encourages returning to depot when near capacity.
                heuristic += 0.1*(1- (normalized_depot_distances[i] + normalized_depot_distances[j])/2)
                
                heuristic_matrix[i, j] = heuristic

    return heuristic_matrix
```
