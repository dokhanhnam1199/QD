```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Combines distance, demand, angle, and depot proximity with adaptive scaling."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    # Calculate the center of gravity of the customer locations
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    
    # Adaptive parameters
    alpha = 1.0   # Distance importance
    beta = 1.5    # Demand importance
    gamma = 0.5   # Angle importance
    delta = 1.2   # Centrality importance
    epsilon = 0.8 # Depot attraction importance

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            # Demand feasibility component
            demand_component = 1.0
            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:
                demand_component = 0.01  # Strong penalty

            # Angle penalty: Encourages less sharp turns
            angle_diff = abs(angles[i] - angles[j])
            angular_factor = 1 / (angle_diff + 0.1)

            # Centrality bonus: Favors edges closer to the center
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance) # No demand weighted average distance

            # Depot attraction
            depot_proximity = 1.0
            if i == 0 or j == 0:
                depot_proximity = 1.2

            # Combination with multiplicative and additive factors
            heuristic_value = (distance_component**alpha *
                               demand_component**beta *
                               angular_factor**gamma *
                               centrality_component**delta *
                               depot_proximity**epsilon)
            heuristic_matrix[i, j] = heuristic_value

    # Sparsification
    avg_heuristic = np.mean(heuristic_matrix)
    heuristic_matrix[heuristic_matrix < 0.1 * avg_heuristic] = 0  # Adaptive threshold

    return heuristic_matrix
```
