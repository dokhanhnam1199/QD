```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines distance, demand, angle, and depot proximity for CVRP heuristics.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            dist_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0
            demand_penalty = 1.0
            if demands[i] > capacity / 4 or demands[j] > capacity / 4:
                demand_penalty = 0.7
            if (demands[i] + demands[j]) > capacity / 2:
                demand_penalty = 0.5

            angle_diff = abs(angles[i] - angles[j])
            angular_factor = 1 / (angle_diff + 0.1)

            if i == 0 or j == 0:
                depot_proximity = 1.5
            else:
                depot_proximity = 1.0

            heuristic_matrix[i, j] = dist_factor * demand_penalty * angular_factor * depot_proximity
            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 1e6)

    return heuristic_matrix
```
