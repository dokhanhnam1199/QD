```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines distance, demand, depot proximity, and angular considerations.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Depot proximity
    depot_distances = distance_matrix[0, :]
    depot_proximity_i = np.tile(depot_distances, (n, 1))
    depot_proximity_j = np.tile(depot_distances, (n, 1)).T
    depot_proximity_factor = 1 / (depot_proximity_i + depot_proximity_j + 1e-9)

    # Demand consideration
    demand_i = np.tile(demands, (n, 1))
    demand_j = np.tile(demands, (n, 1)).T
    demand_factor = 1 / (demand_i + demand_j + 1e-9)

    # Angular proximity to depot
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)
    angle_diffs = np.abs(angles[:, None] - angles[None, :])
    angle_factor = 1 / (np.minimum(angle_diffs, 2 * np.pi - angle_diffs) + 1e-9)

    heuristic_matrix = inverse_distance * depot_proximity_factor * demand_factor * angle_factor

    np.fill_diagonal(heuristic_matrix, 0)
    return heuristic_matrix
```
