```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to provide more informative edge priors:
    - Inverse distance: Shorter distances are preferred.
    - Demand consideration: Penalizes edges connecting nodes whose combined demand is close to or exceeds the vehicle capacity.
    - Closeness to depot: Prioritizes edges connecting customers to the depot, especially for customers with large demands.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators for each edge (shape: n by n).
    """
    n = distance_matrix.shape[0]
    prior = np.zeros_like(distance_matrix)

    # Inverse distance
    prior = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Demand consideration
    for i in range(n):
        for j in range(n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    prior[i, j] *= 0.1  # Heavily penalize exceeding capacity
                elif combined_demand > 0.8 * capacity:
                    prior[i, j] *= 0.5  # Moderate penalty for approaching capacity

    # Closeness to depot
    depot_index = 0
    for i in range(1, n): #exclude depot
        if demands[i] > 0.5 * capacity:
            prior[depot_index, i] *= 2 #if the customer demands a lot, prioritizes serving him from the depot
            prior[i, depot_index] *= 2
        dist_to_depot = distance_matrix[i, depot_index]
        prior[i, depot_index] = prior[i, depot_index] * (1/(dist_to_depot + 1e-9))
        prior[depot_index, i] = prior[depot_index, i] * (1/(dist_to_depot+ 1e-9))



    return prior
```
