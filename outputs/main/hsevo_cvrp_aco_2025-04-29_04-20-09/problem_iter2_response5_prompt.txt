{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for CVRP based on distance, demand, and node proximity to depot.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators for each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Heuristic based on distance (shorter distances are preferred)\n    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero\n\n    # Heuristic based on demand and distance to depot: penalize edges connecting\n    # a node with high demand far from the depot to another node.\n    depot_distances = distance_matrix[0, :]\n    demand_penalty = np.zeros((n,n))\n    for i in range(n):\n      for j in range(n):\n        demand_penalty[i,j] = (demands[i] * depot_distances[i] + demands[j] * depot_distances[j])\n    demand_penalty = 1/(demand_penalty+1e-6)\n\n    # Heuristic based on angle from depot. Nodes further away angularly from the depot\n    #  should be connected later if possible to increase density around the depot\n    # which helps later on.\n    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]\n    angles = np.zeros(n)\n    for i in range(n):\n        if i != 0:\n            dx = coordinates[i, 0] - depot_x\n            dy = coordinates[i, 1] - depot_y\n            angles[i] = np.arctan2(dy, dx)\n\n    angle_diff_matrix = np.zeros((n,n))\n    for i in range(n):\n      for j in range(n):\n          angle_diff_matrix[i,j] = abs(angles[i]-angles[j])\n\n    angle_diff_penalty = 1/(angle_diff_matrix+1e-6)\n\n\n    heuristic_matrix = (0.6 * distance_heuristic + 0.2 * demand_penalty + 0.2 * angle_diff_penalty)\n\n    # Ensure depot connections are always relatively preferred, crucial for feasibility.\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.2 # Encourage returning to depot, or expanding from it.\n        heuristic_matrix[i, 0] *= 1.2\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP)\n    via stochastic solution sampling.  This version incorporates more factors\n    than the trivial version.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators for edges (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n\n    # Calculate a capacity penalty. Nodes with higher demand should be visited earlier\n    # or connected to the depot, as the available vehicle space becomes limited.\n    demand_normalized = demands / np.max(demands) #demand between 0 and 1\n    demand_penalty = np.zeros((n, n))\n    for i in range(n):\n      for j in range(n):\n        demand_penalty[i,j] = demand_normalized[i] + demand_normalized[j]\n    demand_penalty = np.clip(demand_penalty,0.0,1.0)\n    \n\n    # Distance heuristic: Shorter distances are generally preferred\n    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Adding a small value to prevent division by zero\n\n\n    # Depot affinity heuristic: Encourage connections to the depot,\n    # particularly for nodes with high demand.\n    depot_affinity = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0: #either i or j is the depot\n                depot_affinity[i, j] = 1.0 # high priority if going from/to depot\n            else:\n                 depot_affinity[i,j] = 0.0\n\n    # Coordinates based routing: closer coordinate pairs are considered first.\n\n    coordinate_distance = np.zeros((n,n))\n\n    for i in range(n):\n      for j in range(n):\n        coordinate_distance[i,j] = np.linalg.norm(coordinates[i,:] - coordinates[j,:])\n    coordinate_heuristic = 1 / (coordinate_distance+1e-6)\n\n    # Combine the heuristics (weighted sum)\n\n    heuristics = (0.6 * distance_heuristic\n                  + 0.15 * depot_affinity\n                  + 0.15 * coordinate_heuristic\n                  + 0.1 * (1-demand_penalty) )\n\n    # Set diagonal elements to zero to avoid self-loops\n    for i in range(n):\n        heuristics[i, i] = 0\n\n    return heuristics\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see the first heuristic incorporates a centrality component, favoring edges near the center of gravity of customer locations, and a depot attraction component which incentivizes returning to the depot based on remaining capacity. The second heuristic, in contrast, uses normalized distance and penalizes nodes far from the depot, encouraging more connections around the depot. The angle calculation differs; the first finds the sharpest possible turn, while the second calculates the angle relative to the depot.\n\nComparing (2nd best) vs (2nd worst), the second-best considers closeness to the depot and applies an angle difference penalty, while the second-worst prioritizes edges connecting to nodes closer to the depot and factors in demand, penalizing edges connecting nodes with high combined demand.\n\nComparing (1st) vs (3rd), the first heuristic calculates centrality using demand-weighted distance to the depot, while the third primarily focuses on angular proximity from the depot. The first also explicitly penalizes edges that could cause immediate capacity violations, whereas the third prioritizes edges from the depot.\n\nComparing (3rd) vs (4th), the third heuristic incorporates a depot proximity factor, boosting edges connected to the depot, and penalizes high-demand edges. The fourth focuses on penalizing edges connecting high-demand nodes to each other, using a simpler angle factor.\n\nComparing (second worst) vs (worst), the second-worst considers depot proximity and demand through precomputed depot distances, whereas the worst only focuses on distance to the depot and combines this directly with angle differences, placing less emphasis on demand or capacity.\n\nOverall: The better heuristics tend to incorporate more nuanced considerations, such as centrality, capacity proximity, and angle calculations based on potential routes rather than just angles relative to the depot. They often include normalizing factors and penalties to prevent extreme values from dominating the heuristic matrix. Poorer heuristics are often simpler, relying heavily on inverse distance and basic demand considerations, with less emphasis on the overall route structure and capacity management. The weighting and combination of different heuristic components are also crucial, and the top-ranked heuristics use carefully chosen weights and mathematical operations to balance the influence of each factor.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's refine \"Current self-reflection\" to design better heuristics, avoiding pitfalls and focusing on actionable insights.\n\n*   **Keywords:** Adaptive, Evaluation, Iterative, Validation.\n*   **Advice:** Design an iterative heuristic development process with explicit steps for evaluating performance on diverse problem instances and adapting parameters/strategies based on the results.\n*   **Avoid:** Premature optimization based on limited data or intuition; focus on data-driven refinement.\n*   **Explanation:** A rigorous cycle of building, testing, and refining heuristics, informed by quantitative performance analysis, will lead to more robust and effective solutions.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}