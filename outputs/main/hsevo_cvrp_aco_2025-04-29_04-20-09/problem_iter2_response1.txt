```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Improved heuristics for CVRP combining distance, demand, savings, and depot proximity.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Inverse distance
    distance_heuristic = 1 / (distance_matrix + 1e-9)
    heuristics += distance_heuristic * 1.0

    # Demand-based heuristic
    demand_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_matrix[i, j] = demands[i] + demands[j]
    demand_heuristic = np.clip(1 - (demand_matrix / capacity), 0, 1)
    heuristics += demand_heuristic * 1.0

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    savings_matrix = savings_matrix / (np.max(savings_matrix + 1e-9))
    heuristics += savings_matrix * 0.5

    # Depot proximity heuristic
    depot_distances = distance_matrix[0, :]
    depot_proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)

    max_val = np.max(depot_proximity_matrix)
    if max_val > 0:
        depot_proximity_matrix = depot_proximity_matrix / max_val
    heuristics += depot_proximity_matrix * 0.5

    # Ensure no self-loops
    for i in range(n):
        heuristics[i, i] = 0

    return heuristics
```
