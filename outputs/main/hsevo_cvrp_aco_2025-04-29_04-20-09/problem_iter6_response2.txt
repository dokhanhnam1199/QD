```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristics for CVRP combining distance, demand, angle, centrality, and depot attraction with normalization and weighting."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate center of mass and demand-weighted distance to depot
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else np.mean(distance_matrix[0,1:])

    # Normalizing constants.  Avoid division by zero
    max_distance = np.max(distance_matrix) if np.max(distance_matrix) > 0 else 1
    max_demand = np.max(demands) if np.max(demands) > 0 else 1
    max_coord = np.max(np.abs(coordinates)) if np.max(np.abs(coordinates)) > 0 else 1

    # Heuristic weights (tunable parameters)
    distance_weight = 0.4
    demand_weight = 0.3
    angle_weight = 0.1
    centrality_weight = 0.1
    depot_attraction_weight = 0.1
    capacity_penalty_weight = 0.2  #New penalty for violating capacity

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # Normalized distance component
            distance = distance_matrix[i, j]
            normalized_distance = distance / max_distance
            distance_component = 1 / (normalized_distance + 0.01)  # Avoid division by zero

            # Normalized demand component
            demand_i = demands[i] / max_demand
            demand_j = demands[j] / max_demand
            demand_component = np.exp(-2 * (demand_i + demand_j))  # Prefer smaller demands

            # Angle component (avoid sharp turns)
            angle_component = 0.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = np.min(np.degrees(angles)) / 180.0
                angle_component = np.clip(angle_component, 0.0, 1.0) # Ensure within [0, 1]
            angle_component = 1 - angle_component # Smaller angle is better

            # Centrality component (nodes closer to center are less preferred)
            center_distance_i = np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) / max_coord
            center_distance_j = np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2) / max_coord
            avg_center_distance = (center_distance_i + center_distance_j) / 2
            centrality_component = np.exp(-avg_center_distance / (demand_weighted_dist_to_depot/max_distance) if demand_weighted_dist_to_depot>0 else 1)

            # Depot attraction component (encourage returning to depot)
            depot_attraction_i = np.exp(-distance_matrix[i, 0] / max_distance)
            depot_attraction_j = np.exp(-distance_matrix[j, 0] / max_distance)
            depot_component = (depot_attraction_i + depot_attraction_j) / 2

            # Capacity penalty (discourage exceeding capacity) - Soft constraint
            capacity_penalty = 0.0
            if i != 0 and j != 0:
               capacity_penalty = np.exp(max(0, (demands[i] + demands[j] - capacity) / capacity))

            # Weighted sum of components
            heuristic_matrix[i, j] = (
                distance_weight * distance_component +
                demand_weight * demand_component +
                angle_weight * angle_component +
                centrality_weight * centrality_component +
                depot_attraction_weight * depot_component -
                capacity_penalty_weight * capacity_penalty
            )

    # Sparsify the matrix (optional - can improve performance)
    threshold = np.mean(heuristic_matrix) * 0.1  # Adjust threshold as needed
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
