```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, angle, depot proximity, and demand density
    using weighted average and sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    # Demand density calculation
    demand_density = np.zeros(n)
    for i in range(1, n):
        nearby_demand = 0
        for j in range(1, n):
            if i != j and distance_matrix[i, j] < np.mean(distance_matrix):
                nearby_demand += demands[j]
        demand_density[i] = nearby_demand
    max_demand_density = np.max(demand_density) if np.max(demand_density) > 0 else 1

    #Center calculation
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e-6

    # Normalizing factor for distance
    max_distance = np.max(distance_matrix)
    if max_distance == 0:
        max_distance = 1

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            normalized_distance = distance / max_distance
            distance_component = 1 / (normalized_distance + 1e-6)

            demand_penalty = 1.0 - np.clip((demands[i] + demands[j]) / (2 * capacity), 0, 0.7)

            angle_diff = abs(angles[i] - angles[j])
            angular_factor = 1 / (angle_diff + 0.1)

            depot_proximity = 1.0
            if i == 0 or j == 0:
                depot_proximity = 1.2

            density_component = 1.0
            if i != 0 and j != 0:
                density_component = np.sqrt((demand_density[i] / max_demand_density) * (demand_density[j] / max_demand_density))

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)

            # Weighted heuristic combining components.
            alpha, beta, gamma, delta, epsilon = 0.4, 0.2, 0.15, 0.15, 0.1 #Adjustable weights
            heuristic_matrix[i, j] = (alpha * distance_component +
                                       beta * demand_penalty +
                                       gamma * angular_factor +
                                       delta * depot_proximity +
                                       epsilon * density_component +
                                       (1-alpha-beta-gamma-delta-epsilon) * centrality_component)

            # Sparsification
            if i!=0 and j!=0 and (demands[i] + demands[j]) > 1.5 * capacity:
                heuristic_matrix[i, j] = 0
            if i!=0 and j!=0 and (demands[i] > capacity or demands[j] > capacity) :
                heuristic_matrix[i, j] = 0

            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 1e6)

    return heuristic_matrix
```
