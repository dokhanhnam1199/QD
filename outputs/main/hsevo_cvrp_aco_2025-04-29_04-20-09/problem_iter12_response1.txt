```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A refined heuristic for CVRP considering distance, demand, angle, centrality, and depot proximity.
    Includes adaptive sparsification based on initial solution quality.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the center of gravity of the customer locations
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])

    # Calculate the average distance from customers to the depot, weighted by demand.
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1

    # Adaptive parameters (to be tuned)
    alpha = 1.0   # Distance importance
    beta = 1.5    # Demand importance (increased)
    gamma = 0.5   # Angle importance
    delta = 1.2   # Centrality importance
    epsilon = 0.8 # Depot attraction importance

    # Sparsification threshold (initially high, can be adjusted adaptively)
    sparsification_threshold = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            # Demand feasibility component - severely penalize exceeding capacity
            demand_component = 1.0
            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:
                demand_component = 0.01  # Strong penalty

            # Angle penalty: Encourages less sharp turns
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)

            # Centrality bonus: Favors edges closer to the center
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot)

            # Depot attraction
            depot_component = 1.0
            if i!=0:
                load_before_depot = demands[i]
                depot_component = (1 + np.exp(load_before_depot/capacity)) / 2

            # Combined heuristic value
            heuristic_value = (distance_component**alpha *
                               demand_component**beta *
                               (1 - angle_component)**gamma *
                               centrality_component**delta *
                               depot_component**epsilon)

            heuristic_matrix[i, j] = heuristic_value

    # Sparsification: Remove edges with low heuristic values
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix[heuristic_matrix < sparsification_threshold * max_heuristic] = 0

    return heuristic_matrix
```
