```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP using a combination of distance, demand, and savings.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Euclidean coordinates of nodes.
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, demand, and savings to create the heuristic matrix
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Encourage shorter distances, higher savings, and penalize high demand
                distance_term = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
                savings_term = savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6) if np.max(savings_matrix) > 0 else 0
                demand_penalty = (demands[i] + demands[j]) / (2 * capacity) # penalty proportional to demand exceeding capacity
                
                heuristic_matrix[i, j] = distance_term + 0.5 * savings_term - 0.3 * demand_penalty # Weighted combination

                if demands[i] > capacity or demands[j] > capacity:
                  heuristic_matrix[i, j] = -1 #cannot include those nodes.

                if i == 0 or j == 0:
                  heuristic_matrix[i,j] = heuristic_matrix[i,j] * 0.8 #Slight penalty to going to depot right away
                

    return heuristic_matrix
```
