```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristics for CVRP combining distance, demand, angle, centrality,
    depot attraction, and route feasibility with adaptive weighting."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1e-6  #Avoid division by zero

    # Adaptive weight initialization (can be tuned further)
    weight_distance = 0.4
    weight_demand = 0.2
    weight_angle = 0.1
    weight_centrality = 0.2
    weight_depot = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)  # Avoid division by zero

            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.05  # Heavily penalize exceeding capacity
                else:
                    demand_component = 1 - (demands[i] + demands[j]) / (2*capacity) # reward smaller demand.

            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = np.mean(np.degrees(angles)) / 180.0  # Average angle
                else:
                    angle_component = 0.5 # default

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6)) #Avoid division by zero

            depot_component = 1.0
            if i != 0 and j != 0: # Apply to customer-customer edges, helps prioritize starting/ending routes near the depot
                depot_attraction_i = np.exp(-distance_matrix[i, 0] / demand_weighted_dist_to_depot)
                depot_attraction_j = np.exp(-distance_matrix[j, 0] / demand_weighted_dist_to_depot)
                depot_component = (depot_attraction_i + depot_attraction_j) / 2
            elif i == 0:
                depot_component = np.exp(-distance_matrix[j, 0] / demand_weighted_dist_to_depot)
            elif j == 0:
                depot_component = np.exp(-distance_matrix[i, 0] / demand_weighted_dist_to_depot)


            heuristic_matrix[i, j] = (weight_distance * distance_component +
                                     weight_demand * demand_component +
                                     weight_angle * (1 - angle_component) + # Smaller angles are better.
                                     weight_centrality * centrality_component +
                                     weight_depot * depot_component)

    # Sparsify the matrix (optional, but often beneficial)
    threshold = np.mean(heuristic_matrix) * 0.2  # Dynamic threshold, prune low promising edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
