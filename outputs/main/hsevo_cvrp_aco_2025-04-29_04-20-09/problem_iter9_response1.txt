```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Improved heuristics combining distance, demand, angle, centrality, and depot proximity with adaptive weights."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate overall center and depot-related metrics
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1

    # Adaptive weights (can be tuned based on performance)
    distance_weight = 0.4
    demand_weight = 0.3
    angle_weight = 0.15
    centrality_weight = 0.1
    depot_weight = 0.05

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # Distance component
            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            # Demand component
            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.1  # Penalize edges that likely violate capacity
                else:
                    demand_component = np.exp(-(demands[i] + demands[j]) / capacity) # Prefer edges with low cummulative demands

            # Angle component
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)
                angle_component = 1 - angle_component # reverse the angle component. small angle is better

            # Centrality component
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))

            # Depot component (prioritize connection to depot if load is high)
            depot_component = 1.0
            if i!=0 and j==0:
                load_before_depot = demands[i]
                depot_component = np.exp(load_before_depot / (capacity + 1e-6))
            elif j!=0 and i==0:
                load_before_depot = demands[j]
                depot_component = np.exp(load_before_depot / (capacity + 1e-6))
            else:
                depot_component = 0.5 * (np.exp(-distance_matrix[0, i] / (demand_weighted_dist_to_depot + 1e-6)) + np.exp(-distance_matrix[0, j] / (demand_weighted_dist_to_depot+1e-6))) # make nodes close to depot more attractive.

            # Combine components with adaptive weights
            heuristic_matrix[i, j] = (distance_weight * distance_component +
                                     demand_weight * demand_component +
                                     angle_weight * angle_component +
                                     centrality_weight * centrality_component +
                                     depot_weight * depot_component)

    # Sparsify the matrix: remove edges with very low heuristic values
    threshold = np.mean(heuristic_matrix) * 0.1
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
