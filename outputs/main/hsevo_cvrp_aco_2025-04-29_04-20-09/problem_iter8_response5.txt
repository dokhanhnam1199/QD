```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines normalized distance, demand density, and depot proximity."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Normalize distance matrix
    max_distance = np.max(distance_matrix)
    normalized_distances = distance_matrix / (max_distance + 1e-6)

    # Calculate demand density
    demand_density = np.zeros(n)
    for i in range(1, n):
        nearby_demand = 0
        for j in range(1, n):
            if i != j and distance_matrix[i, j] < np.mean(distance_matrix):
                nearby_demand += demands[j]
        demand_density[i] = nearby_demand
    max_demand_density = np.max(demand_density) if np.max(demand_density) > 0 else 1

    # Depot proximity
    depot_distances = distance_matrix[0, :]
    max_depot_distance = np.max(depot_distances)
    normalized_depot_distances = depot_distances / (max_depot_distance + 1e-6)

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # Distance component
            distance_component = 1 / (normalized_distances[i, j] + 1e-6)

            # Demand density component
            density_component = 1.0
            if i != 0 and j != 0:
                density_component = np.sqrt((demand_density[i] / max_demand_density) * (demand_density[j] / max_demand_density))

            # Depot proximity component
            depot_proximity_i = 1 / (normalized_depot_distances[i] + 0.1) if i != 0 else 1.0
            depot_proximity_j = 1 / (normalized_depot_distances[j] + 0.1) if j != 0 else 1.0
            depot_component = (depot_proximity_i + depot_proximity_j) / 2.0

            # Demand penalty
            demand_penalty = 1.0 - np.clip((demands[i] + demands[j]) / (2 * capacity), 0, 0.7)

            # Combined heuristic
            heuristic_matrix[i, j] = distance_component * density_component * depot_component * demand_penalty

            # Sparsification
            if i != 0 and j != 0 and (demands[i] + demands[j]) > 1.5 * capacity:
                heuristic_matrix[i, j] = 0
            if i!=0 and j!=0 and (demands[i] > capacity or demands[j] > capacity) :
                heuristic_matrix[i, j] = 0

            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 1e6)

    return heuristic_matrix
```
