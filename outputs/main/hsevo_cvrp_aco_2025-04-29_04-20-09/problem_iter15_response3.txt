```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristics for CVRP considering distance, demand, angle, centrality, depot attraction, and sparsity."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Sparsity threshold (adjust based on problem scale)
    sparsity_threshold = np.mean(distance_matrix) * 3  # Adaptive sparsity

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]

            # Sparsity check: prune long edges early
            if distance > sparsity_threshold:
                continue  # Skip calculation for this edge

            distance_component = 1 / (distance + 1e-6)

            # Demand component: penalize edges exceeding capacity
            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.1 # Strong penalty

            # Angle component: penalize sharp turns (more robust)
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = np.mean(np.degrees(angles) / 180.0) # Averaging angles

            # Centrality component: attract to the center (normalized)
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6) if demand_weighted_dist_to_depot>0 else 1) # Add small value to avoid divide by zero

            # Depot component: encourage return to depot (exponential decay)
            depot_component = 1.0
            if i!=0:
                load_before_depot = demands[i]
                depot_component = np.exp(-load_before_depot / (capacity + 1e-6)) # Exponential decay

            # Adaptive weighting (adjust based on performance)
            alpha = 0.4  # Weight for distance
            beta = 0.2   # Weight for demand
            gamma = 0.1 # Weight for angle
            delta = 0.2 # Weight for centrality
            epsilon = 0.1 # Weight for depot

            heuristic_matrix[i, j] = (alpha * distance_component +
                                       beta * demand_component +
                                       gamma * (1 - angle_component) +
                                       delta * centrality_component +
                                       epsilon * depot_component)

    return heuristic_matrix
```
