{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Enhanced heuristics for CVRP based on distance, demand, and angular considerations.\n\n    This version considers:\n    1. Inverse distance: Shorter distances are preferred.\n    2. Demand factor: Edges connecting to nodes with higher demand are penalized\n       if including them might lead to capacity violations on the current route.\n    3. Angular proximity: Nodes closer in angle from the depot are preferred,\n       encouraging more compact routes.\n    4. Depot proximity: Edges closer to depot are preferred.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate angles from depot\n    depot_coords = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0  # Avoid division by zero\n            demand_factor = 1.0\n\n            # Prioritize edges from the depot (node 0)\n            if i == 0 or j == 0:\n                depot_proximity = 1.5 # Give depot edges a boost. Experiment.\n            else:\n                depot_proximity = 1.0\n\n            # Penalize edges if demand is high (especially for neighbors of nodes with already large demand)\n            # The idea is to encourage smaller routes near the depot and prevent overstuffing of vehicles too early.\n            demand_penalty = 1.0\n            if demands[i] > capacity / 4 or demands[j] > capacity / 4:  #Tune the factor.\n                demand_penalty = 0.7  # Slightly reduce probability of high-demand edge.\n            if (demands[i] + demands[j]) > capacity / 2: # Further penalty if together high.\n                demand_penalty = 0.5\n\n\n            # Angular proximity (favor nodes closer in angle relative to depot).\n            angle_diff = abs(angles[i] - angles[j])\n            angular_factor = 1 / (angle_diff + 0.1) #Add a small constanst to avoid divergence,\n\n            heuristic_matrix[i, j] = distance_factor * demand_factor * angular_factor * depot_proximity\n            heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 1e6) # Clip large values.\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Newtonian Heuristics for Capacitated Vehicle Routing Problem (CVRP).\n\n    This function combines several heuristics to estimate the desirability of including each edge\n    in the final solution.  It considers distance, demand, angle (to encourage route progression),\n    and a depot attraction factor to promote returning to the depot when necessary.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: A matrix of heuristics values (n x n), indicating the desirability of each edge.\n                     Higher values suggest a more promising edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Parameters (carefully chosen and tuned)\n    distance_weight = 1.0     # Controls the importance of distance\n    demand_weight = 0.5       # Controls the importance of demand compatibility\n    angle_weight = 0.2        # Controls the importance of angle (route direction)\n    depot_attraction = 2.0    # Controls the attractiveness of returning to the depot\n    visibility_exponent = 2.0 # Scales the inverse of the distance\n    demand_scaling = capacity / np.mean(demands[1:]) # Normalizes the effect of capacity\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0  # No self-loops\n                continue\n\n            # Distance component: Inverse distance, raised to a power\n            distance_heuristic = 1 / (distance_matrix[i, j] ** visibility_exponent) if distance_matrix[i, j] > 0 else 0\n\n            # Demand component: Compatibility of demands\n            demand_heuristic = 1.0 / (demands[j] / demand_scaling + 1e-6) # avoid division by zero, scale by average demand and capacity\n            # Angle component: Encourages smoother routes.  Angle between (i->j) and (j->depot).\n            # Consider the vector from j to depot (0), and i to j. Smaller angles better.\n            if i != 0 and j != 0:\n                v1 = coordinates[0] - coordinates[j]  # Vector from j to depot\n                v2 = coordinates[i] - coordinates[j]  # Vector from j to i\n                norm_v1 = np.linalg.norm(v1)\n                norm_v2 = np.linalg.norm(v2)\n                if norm_v1 > 0 and norm_v2 > 0:\n                  angle = np.arccos(np.dot(v1, v2) / (norm_v1 * norm_v2))\n                  angle_heuristic = 1.0 / (angle + 1e-6) # Penalize sharp turns\n                else:\n                  angle_heuristic = 0.0\n            else:\n                angle_heuristic = 0.0\n\n            # Depot Attraction Component: Encourage return to depot.\n            if i != 0 and j == 0:  # Going back to depot\n                depot_heuristic = depot_attraction\n            else:\n                depot_heuristic = 1.0\n\n\n            # Combine the heuristics (weighted sum)\n            heuristics[i, j] = (\n                distance_weight * distance_heuristic +\n                demand_weight * demand_heuristic +\n                angle_weight * angle_heuristic\n            ) * depot_heuristic  # Multiplying the depot_heuristic allows it to outweigh others when necessary\n\n\n    return heuristics\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see the first heuristic incorporates a centrality component, favoring edges near the center of gravity of customer locations, and a depot attraction component which incentivizes returning to the depot based on remaining capacity. The second heuristic, in contrast, uses normalized distance and penalizes nodes far from the depot, encouraging more connections around the depot. The angle calculation differs; the first finds the sharpest possible turn, while the second calculates the angle relative to the depot.\n\nComparing (2nd best) vs (2nd worst), the second-best considers closeness to the depot and applies an angle difference penalty, while the second-worst prioritizes edges connecting to nodes closer to the depot and factors in demand, penalizing edges connecting nodes with high combined demand.\n\nComparing (1st) vs (3rd), the first heuristic calculates centrality using demand-weighted distance to the depot, while the third primarily focuses on angular proximity from the depot. The first also explicitly penalizes edges that could cause immediate capacity violations, whereas the third prioritizes edges from the depot.\n\nComparing (3rd) vs (4th), the third heuristic incorporates a depot proximity factor, boosting edges connected to the depot, and penalizes high-demand edges. The fourth focuses on penalizing edges connecting high-demand nodes to each other, using a simpler angle factor.\n\nComparing (second worst) vs (worst), the second-worst considers depot proximity and demand through precomputed depot distances, whereas the worst only focuses on distance to the depot and combines this directly with angle differences, placing less emphasis on demand or capacity.\n\nOverall: The better heuristics tend to incorporate more nuanced considerations, such as centrality, capacity proximity, and angle calculations based on potential routes rather than just angles relative to the depot. They often include normalizing factors and penalties to prevent extreme values from dominating the heuristic matrix. Poorer heuristics are often simpler, relying heavily on inverse distance and basic demand considerations, with less emphasis on the overall route structure and capacity management. The weighting and combination of different heuristic components are also crucial, and the top-ranked heuristics use carefully chosen weights and mathematical operations to balance the influence of each factor.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's refine \"Current self-reflection\" to design better heuristics, avoiding pitfalls and focusing on actionable insights.\n\n*   **Keywords:** Adaptive, Evaluation, Iterative, Validation.\n*   **Advice:** Design an iterative heuristic development process with explicit steps for evaluating performance on diverse problem instances and adapting parameters/strategies based on the results.\n*   **Avoid:** Premature optimization based on limited data or intuition; focus on data-driven refinement.\n*   **Explanation:** A rigorous cycle of building, testing, and refining heuristics, informed by quantitative performance analysis, will lead to more robust and effective solutions.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}