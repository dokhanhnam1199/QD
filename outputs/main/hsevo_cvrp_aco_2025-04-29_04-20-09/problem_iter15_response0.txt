```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines centrality, capacity, angle, depot attraction, and demand correlation with sparsification for CVRP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0


    # Calculate distance to depot for each node
    dist_to_depot = distance_matrix[0, :]

    # Normalize distances and demands
    normalized_distances = distance_matrix / np.max(distance_matrix) if np.max(distance_matrix) > 0 else distance_matrix
    normalized_demands = demands / capacity

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            normalized_distance = normalized_distances[i, j]

            # Distance component (attraction based on proximity)
            distance_component = 1 / (distance + 1e-6)

            # Capacity component (discourages edges exceeding capacity)
            demand_component = 1.0
            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:
                demand_component = 0.1
            elif i != 0 and j != 0 and demands[i] + demands[j] > 0.75 * capacity:
                demand_component = 0.5 #soft capacity constraint

            # Angle component (discourages sharp turns)
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)


            # Centrality component (attraction to the center of gravity)
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))

            # Depot attraction component (nodes closer to the depot are more attractive)
            depot_attraction_i = np.exp(-dist_to_depot[i] / (demand_weighted_dist_to_depot + 1e-6)) if i!=0 else 1.0
            depot_attraction_j = np.exp(-dist_to_depot[j] / (demand_weighted_dist_to_depot + 1e-6)) if j!=0 else 1.0
            depot_component = (depot_attraction_i + depot_attraction_j) / 2

            # Demand correlation component (prioritize connecting nodes with similar demand)
            demand_correlation = 1 - abs(normalized_demands[i] - normalized_demands[j])

            # Combining all components
            heuristic_value = (distance_component**0.8 *
                               demand_component**1.2 *
                               (1 - angle_component)**0.9 *
                               centrality_component**0.7 *
                               depot_component**1.1 *
                               demand_correlation**0.6)


            heuristic_matrix[i, j] = heuristic_value

    # Sparsification: zero out less promising edges.  Adaptive threshold based on the mean
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 # Only consider the positive values.

    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
