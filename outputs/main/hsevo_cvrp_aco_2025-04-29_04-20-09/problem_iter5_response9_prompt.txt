{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"Combines centrality, capacity, angle, depot attraction, and demand balance for CVRP, with sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    total_demand = np.sum(demands[1:])\n    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0\n\n    # Calculate average demand\n    avg_demand = np.mean(demands[1:])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n            distance_component = 1 / (distance + 1e-6)\n\n            # Capacity component - penalize edges that would overload the vehicle significantly\n            demand_component = 1.0\n            if i != 0 and j != 0:\n                if demands[i] + demands[j] > capacity:\n                    demand_component = 0.01  # Heavily penalize\n                elif demands[i] + demands[j] > 0.8 * capacity:\n                    demand_component = 0.5  # Moderately penalize\n\n            # Angle component - prefer edges that don't cause sharp turns\n            angle_component = 1.0\n            if i != 0 and j != 0:\n                angles = []\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[i] - coordinates[j]\n                        v2 = coordinates[k] - coordinates[i]\n                        dot_product = np.dot(v1, v2)\n                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                        if magnitudes == 0:\n                            angle = 0\n                        else:\n                            angle = np.arccos(dot_product / magnitudes)\n                        angles.append(angle)\n                if len(angles) > 0:\n                    angle_component = min(np.degrees(angles) / 180.0)  # Normalize to [0, 1]\n\n            # Centrality component - attract towards the center of gravity\n            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +\n                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2\n            centrality_component = np.exp(-center_distance / (demand_weighted_dist_to_depot + 1e-6))\n\n            # Depot attraction component - nodes with high demand should be closer to the depot\n            depot_component = 1.0\n            if i!=0 and j!=0:\n                depot_dist_i = distance_matrix[0, i]\n                depot_dist_j = distance_matrix[0, j]\n                depot_component = np.exp(-(depot_dist_i + depot_dist_j) / (2 * demand_weighted_dist_to_depot + 1e-6))\n\n            # Demand Balance Component - Try to balance the load on the routes\n            demand_balance_component = 1.0\n            if i != 0 and j != 0:\n                demand_diff = abs(demands[i] - demands[j])\n                demand_balance_component = np.exp(-demand_diff / (avg_demand + 1e-6))\n\n            heuristic_matrix[i, j] = (distance_component**1.5 * demand_component * (1 - angle_component)**0.5 *\n                                      centrality_component**0.8 * depot_component**0.7 * demand_balance_component**0.6)\n\n            # Sparsification - Remove edges that are unlikely to be in the optimal solution\n            if heuristic_matrix[i, j] < 0.1 * np.mean(heuristic_matrix): #Dynamic threshold.\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Hybrid heuristic combining distance, demand, depot affinity and angle\n    for CVRP. Balances exploration and exploitation.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance heuristic\n    distance_heuristic = 1 / (distance_matrix + 1e-6)\n\n    # Demand penalty\n    demand_normalized = demands / np.max(demands)\n    demand_penalty = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            demand_penalty[i, j] = demand_normalized[i] + demand_normalized[j]\n    demand_penalty = np.clip(demand_penalty, 0.0, 1.0)\n\n    # Depot affinity\n    depot_affinity = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                depot_affinity[i, j] = 1.0\n            else:\n                depot_affinity[i, j] = 0.0\n\n    # Angle from depot\n    depot_x, depot_y = coordinates[0, 0], coordinates[0, 1]\n    angles = np.zeros(n)\n    for i in range(n):\n        if i != 0:\n            dx = coordinates[i, 0] - depot_x\n            dy = coordinates[i, 1] - depot_y\n            angles[i] = np.arctan2(dy, dx)\n\n    angle_diff_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            angle_diff_matrix[i, j] = abs(angles[i] - angles[j])\n    angle_diff_penalty = 1 / (angle_diff_matrix + 1e-6)\n\n    # Combine heuristics\n    heuristic_matrix = (0.5 * distance_heuristic +\n                       0.15 * (1 - demand_penalty) +\n                       0.15 * depot_affinity +\n                       0.2 * angle_diff_penalty)\n\n    # Depot connections\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.1\n        heuristic_matrix[i, 0] *= 1.1\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a weighted average of several components (distance, demand, angle, centrality, depot attraction), whereas the worst focuses on a more basic combination and a separate load estimation.\n(2nd best) vs (second worst): the 2nd favors components (distance, demand, angle, centrality, depot attraction, demand balance for CVRP, with sparsification) while the second worst penalizes connections high demand\nComparing (1st) vs (2nd), we see that the best heuristic uses simpler component calculations (e.g., a direct inverse for distance), while the second best incorporates more sophisticated weighting and sparsification.\n(3rd) vs (4th): These two are very similar, only the fourth incorporates a demand density component, and has a more aggressive sparsification strategy.\nComparing (second worst) vs (worst), we see that the second worst tries to normalize values. The worst heuristic doesn't have any normalization.\nOverall: The better heuristics combine multiple factors, including distance, demand, angle, centrality, and depot attraction. They also use normalization and sparsification techniques to improve performance. Simpler heuristics tend to perform worse. The weighting of different components also appears to be crucial. More advanced heuristics also incorporate demand density and balance considerations.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a redefined \"Current Self-Reflection\" for designing better heuristics, focusing on actionable advice derived from best practices and aiming for efficient implementation:\n\n*   **Keywords:** Multifactorial, Normalization, Sparsification, Weighting, Context-Awareness, Parameterization, Continuous Functions.\n\n*   **Advice:** Integrate diverse, normalized features into a single, flexible equation using weighted sums and parameter adjustments to handle varying conditions smoothly.\n\n*   **Avoid:** Binary if/else logic that can be replaced with smooth parameter variations within a single equation.\n\n*   **Explanation:** Aim for continuous, adaptable heuristics by parameterizing equations and using feature weighting instead of discrete switching to improve robustness and tunability.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}