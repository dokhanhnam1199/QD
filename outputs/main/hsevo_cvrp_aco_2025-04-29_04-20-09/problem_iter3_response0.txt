```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines centrality, capacity, angle, depot attraction, and demand correlation for CVRP with sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    # Demand Correlation Matrix (similarity between demands)
    demand_correlation_matrix = np.corrcoef(np.tile(demands, (n, 1)), rowvar=False)[:n, :n]

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            distance_component = 1 / (distance + 1e-6)

            # Capacity component: Penalize edges that would likely overload a vehicle
            demand_component = 1.0
            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                    demand_component = 0.1
                elif demands[i] + demands[j] > 0.75 * capacity: #Soft constraint
                    demand_component = 0.5
                else:
                    demand_component = 1.0

            # Angle component: Favor edges that don't create sharp turns. Avoid computing angles if i or j is depot.
            angle_component = 1.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = min(np.degrees(angles) / 180.0)  # Normalize angles

            # Centrality component: Favor edges near the center of all customers
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)

            # Depot component: Favor edges connected to the depot, especially for high-demand nodes
            depot_component = 1.0
            if i == 0:
                depot_component = 1 + np.tanh(demands[j] / capacity)  #tanh squashes between 0 and 2
            elif j == 0:
                 depot_component = 1 + np.tanh(demands[i] / capacity)

            # Demand Correlation component: Favor nodes with similar demand to be close
            demand_correlation = demand_correlation_matrix[i, j]

            # Combined heuristic value
            heuristic_value = (distance_component * demand_component * (1 - angle_component) *
                               centrality_component * depot_component * (0.5 + 0.5*demand_correlation))  # Scale correlation
            heuristic_matrix[i, j] = heuristic_value

    # Sparsification: Zero out less promising edges to reduce search space
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30)  # Keep top 70%
    heuristic_matrix[heuristic_matrix < threshold] = 0
    return heuristic_matrix
```
