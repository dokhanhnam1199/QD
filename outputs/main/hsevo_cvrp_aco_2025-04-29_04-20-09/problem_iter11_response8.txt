```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines normalized distance, demand, and depot proximity with adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Normalize distances
    max_distance = np.max(distance_matrix)
    normalized_distances = distance_matrix / (max_distance + 1e-6)

    # Demand component: discourage edges exceeding capacity
    demand_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_matrix[i, j] = demands[i] + demands[j]
    demand_component = np.clip(1 - (demand_matrix / capacity), 0, 1)

    # Depot proximity
    depot_distances = distance_matrix[0, :]
    depot_proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity_matrix[i, j] = 1 / (depot_distances[i] + depot_distances[j] + 1e-9)
    max_val = np.max(depot_proximity_matrix)
    if max_val > 0:
        depot_proximity_matrix = depot_proximity_matrix / max_val

    # Combine components
    heuristic_matrix = (
        (1 / (normalized_distances + 1e-6)) *
        demand_component *
        depot_proximity_matrix
    )

    # Adaptive sparsification
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.5
    heuristic_matrix[heuristic_matrix < threshold] = 0
    heuristic_matrix[distance_matrix == 0] = 0


    return heuristic_matrix
```
