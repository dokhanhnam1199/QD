```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, savings, demand, centrality, and depot attraction with adaptive weighting."""

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    distance_heuristic = distance_heuristic / np.max(distance_heuristic)

    # Savings Heuristic (Clarke-Wright)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    savings_matrix = savings_matrix / np.max(savings_matrix + 1e-6)

    # Demand consideration
    demand_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_penalty[i, j] = (demands[i] + demands[j])
    demand_penalty = 1 / (demand_penalty + 1e-6)
    demand_penalty = demand_penalty / np.max(demand_penalty)

    # Centrality component
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0
    centrality_component = np.zeros((n,n))
    for i in range(n):
      for j in range(n):
        center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                           np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
        centrality_component[i,j] = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1)
    centrality_component = centrality_component / np.max(centrality_component + 1e-6)

    # Depot attraction component from v1
    avg_dist_to_depot = np.mean(distance_matrix[0, 1:])
    depot_component = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i!=0 and j!=0:
                depot_attraction_i = np.exp(-distance_matrix[i, 0] / avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0
                depot_attraction_j = np.exp(-distance_matrix[j, 0] / avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0
                depot_component[i,j] = (depot_attraction_i + depot_attraction_j) / 2

            elif i==0:
                depot_component[i,j] = np.exp(-distance_matrix[j,0]/ avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0
            elif j==0:
                 depot_component[i,j] = np.exp(-distance_matrix[i,0]/ avg_dist_to_depot) if avg_dist_to_depot>0 else 1.0

    depot_component = depot_component / np.max(depot_component + 1e-6)

    # Adaptive Weighting (example - can be further refined based on initial solution quality)
    w_distance = 0.3
    w_savings = 0.25
    w_demand = 0.15
    w_centrality = 0.15
    w_depot = 0.15


    # Combine heuristics
    heuristic_matrix = (w_distance * distance_heuristic +
                        w_savings * savings_matrix +
                        w_demand * demand_penalty +
                        w_centrality * centrality_component +
                        w_depot * depot_component)

    # Ensure depot connections are preferred
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.1
        heuristic_matrix[i, 0] *= 1.1

    # Ensure no self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
