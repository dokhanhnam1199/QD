```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Improved heuristics for CVRP, combining distance, demand, angle, centrality, and depot attraction, with sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate centrality components
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    total_demand = np.sum(demands[1:])
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 1

    # Normalizing factor for distance
    max_distance = np.max(distance_matrix)
    if max_distance == 0:
        max_distance = 1

    # Heuristic parameters (tunable)
    alpha = 1.0  # Distance importance
    beta = 1.5  # Demand importance
    gamma = 0.7  # Angle importance
    delta = 0.8  # Centrality importance
    epsilon = 1.2 # Depot attraction importance
    zeta = 0.5 #sparsification
    eta = 0.9 # load

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance = distance_matrix[i, j]
            normalized_distance = distance / max_distance
            distance_component = 1 / (normalized_distance + 1e-6)

            demand_component = np.exp(-beta * max(0, (demands[i] + demands[j] - capacity) / capacity))

            angle_component = 0.0
            if i != 0 and j != 0:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                if len(angles) > 0:
                    angle_component = np.mean(np.degrees(angles) / 180.0)  # Using mean angle

            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2
            centrality_component = np.exp(-delta * center_distance / demand_weighted_dist_to_depot)

            depot_component = 1.0
            if i != 0:
                load_before_depot = demands[i]
                depot_component = np.tanh(epsilon * load_before_depot / capacity) #tanh for smoother transitions

            heuristic_value = (alpha * distance_component *
                               demand_component *
                               (1 - gamma * angle_component) *
                               centrality_component *
                               depot_component)

            #Sparsification
            if heuristic_value < zeta * np.mean(distance_matrix) / (distance+1e-9):
                heuristic_matrix[i, j] = 0
            else:
                heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
```
