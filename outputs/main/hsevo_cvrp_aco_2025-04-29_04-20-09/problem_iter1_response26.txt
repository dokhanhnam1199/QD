```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to estimate the desirability of including each edge in a solution:
        - Distance: Shorter distances are preferred.
        - Demand Compatibility: Edges connecting nodes with demands that can be feasibly combined within vehicle capacity
                                  are favored. Avoid edges which may immediately cause capacity constraint violations
        - Angle: Edges creating sharp turns are penalized (to encourage smoother routes). Depot visits are incentivized if capacity isn't sufficient.
        - Centrality: Favor edges near the 'center' of gravity of all customer locations
        - Depot Attraction: A higher probability of going to the depot, especially when near vehicle capacity.

    Args:
        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes (n x n).
        coordinates (np.ndarray): A matrix of node coordinates (n x 2).
        demands (np.ndarray): A vector of customer demands (n).  depot demand assumed to be 0
        capacity (int): The vehicle capacity.

    Returns:
        np.ndarray: A matrix of heuristic values indicating the desirability of including each edge (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the center of gravity of customer locations (excluding the depot).
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])

    # Demand-weighted average distance to depot. If high, routes are more decentralized.
    total_demand = np.sum(demands[1:])  # Total demand of all customers
    demand_weighted_dist_to_depot = np.sum(demands[1:] * distance_matrix[0, 1:]) / total_demand if total_demand > 0 else 0

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance = distance_matrix[i, j]

            # Distance component: inversely proportional to distance
            distance_component = 1 / (distance + 1e-6)  # avoid divide by zero

            # Demand compatibility component: Penalize edges which could cause immediate capacity violation
            demand_component = 1.0
            if i != 0 and j != 0 and demands[i] + demands[j] > capacity:
                demand_component = 0.1  # Severely penalize potentially invalid route segments


            # Angle component: Penalize sharp turns by looking at nearby nodes.
            angle_component = 1.0
            if i != 0 and j != 0:  # Only consider angles for customer-customer edges. Don't penalize edges *to* depot.

                # Find k, such that the nodes j, i and k form an angle
                angles = []

                for k in range(n): # considers all neighbours of i
                    if (k!=i and k!=j):
                        v1 = coordinates[i]-coordinates[j]
                        v2 = coordinates[k]-coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes == 0:
                            angle = 0 #Avoid NaN for superimposed coords
                        else:
                            angle = np.arccos(dot_product / magnitudes)
                        angles.append(angle)
                #We penalize sharpest turn possible. Penalties can accumulate
                if len(angles)>0:
                    angle_component = min(np.degrees(angles) / 180.0)

            # Centrality component: Favor edges closer to the center of customer locations.
            center_distance = (np.sqrt((coordinates[i, 0] - center_x)**2 + (coordinates[i, 1] - center_y)**2) +
                               np.sqrt((coordinates[j, 0] - center_x)**2 + (coordinates[j, 1] - center_y)**2)) / 2

            centrality_component = np.exp(-center_distance / demand_weighted_dist_to_depot if demand_weighted_dist_to_depot>0 else 1) #Scale the centrality measure

            #Depot attraction Component: Incentivise returning to the depot, higher chance if close to capacity
            depot_component = 1.0
            if i!=0: #Going from customer i to Depot
                load_before_depot = demands[i] #assuming last delivery before depot has roughly this load
                depot_component = (1 + np.exp(load_before_depot/capacity)) / 2

            heuristic_matrix[i, j] = (distance_component * demand_component * (1 - angle_component) * centrality_component * depot_component)

    return heuristic_matrix
```
