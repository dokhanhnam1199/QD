{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"Adaptive heuristic combining distance, demand, angle, and depot proximity with dynamic sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    depot_coords = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])\n\n    # Adaptive sparsification threshold\n    avg_distance = np.mean(distance_matrix)\n    sparsification_threshold = 2.0 * avg_distance  # Adjust factor as needed\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            distance = distance_matrix[i, j]\n\n            # Sparsification\n            if distance > sparsification_threshold:\n                continue\n\n            distance_component = 1 / (distance + 1e-6)\n\n            demand_component = 1.0\n            if i != 0 and j != 0:\n                if demands[i] + demands[j] > capacity:\n                    demand_component = 0.01  # High penalty for exceeding capacity\n                else:\n                    demand_component = 1.1\n\n            angle_diff = abs(angles[i] - angles[j])\n            angular_factor = 1 / (angle_diff + 0.1)\n\n            depot_proximity = 1.0\n            if i == 0 or j == 0:\n                depot_proximity = 1.2\n\n            # Combination with multiplicative and additive factors\n            heuristic_value = distance_component * demand_component * angular_factor * depot_proximity\n            heuristic_matrix[i, j] = heuristic_value\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}