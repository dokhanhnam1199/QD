```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP).
    It prioritizes edges based on distance, demand, and angular proximity to the depot.

    Args:
        distance_matrix: A numpy array of shape (n, n) representing the distance between each pair of nodes.
        coordinates: A numpy array of shape (n, 2) representing the Euclidean coordinates of each node.
        demands: A numpy array of shape (n,) representing the demand of each node.
        capacity: An integer representing the capacity of each vehicle.

    Returns:
        A numpy array of shape (n, n) representing the prior indicators of how promising
        it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Depot coordinates
    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance_factor = 1 / distance_matrix[i, j]  # Shorter distances are better

            # Demand factor: Penalize edges connecting high-demand nodes to each other
            demand_factor = 1 / (demands[i] + demands[j] + 1e-6) # Add a small constant to avoid division by zero.

            # Angular proximity to depot: Prioritize edges that contribute to routes returning to depot.
            # Calculate angles between nodes and depot
            angle_i = np.arctan2(coordinates[i][1] - depot_y, coordinates[i][0] - depot_x)
            angle_j = np.arctan2(coordinates[j][1] - depot_y, coordinates[j][0] - depot_x)
            angle_diff = np.abs(angle_i - angle_j)
            angle_factor = 1 / (np.minimum(angle_diff, 2 * np.pi - angle_diff) + 1e-6) # Small angle diff is favored

            heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor

    return heuristic_matrix
```
