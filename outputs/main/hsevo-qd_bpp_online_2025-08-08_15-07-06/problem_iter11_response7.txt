```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines tightest fit with a graded penalty for excess space using exponential decay.

    Prioritizes bins that minimize remaining space after packing.
    Excess space is penalized using an exponential decay function,
    allowing for a more nuanced trade-off than simple inverse or linear penalties.
    """
    
    fit_mask = bins_remain_cap >= item
    
    
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    
    fitting_bins_remain_cap = bins_remain_cap[fit_mask]
    
    
    excess_space = fitting_bins_remain_cap - item
    
    
    # Use exponential decay for excess space to create graded penalties.
    # Smaller excess space leads to higher scores.
    # A temperature parameter can control the steepness of the decay.
    # We use a small positive value for the base score to differentiate fitting bins.
    temperature = 0.1  # Controls how quickly the penalty increases with excess space
    
    
    scores = 0.1 * np.exp(-excess_space / temperature)  # Base score + graded penalty
    
    
    priorities[fit_mask] = scores
    
    
    return priorities
```
