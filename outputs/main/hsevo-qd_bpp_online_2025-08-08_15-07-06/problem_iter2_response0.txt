```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and inverse proximity for Bin Packing priority.
    Prioritizes bins that are closer fits, with a strong preference for the absolute best fit.
    """
    eligible_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins_mask):
        eligible_capacities = bins_remain_cap[eligible_bins_mask]
        differences = eligible_capacities - item

        # Strategy 1: Inverse proximity (favoring smaller remaining capacities)
        # Add epsilon for numerical stability and to avoid division by zero.
        inverse_proximity_scores = 1.0 / (differences + 1e-9)

        # Strategy 2: Identify the absolute best fit(s)
        min_diff = np.min(differences)
        best_fit_mask_local = (differences == min_diff)

        # Combine strategies: Give a significantly higher priority to the absolute best fit(s)
        # and use inverse proximity for others.
        # We scale the best fit scores to be clearly dominant.
        combined_scores = np.zeros_like(eligible_capacities)
        combined_scores[best_fit_mask_local] = 100.0  # High priority for best fit
        combined_scores[~best_fit_mask_local] = inverse_proximity_scores[~best_fit_mask_local]

        # Normalize scores to be in a reasonable range, though not strictly probabilities here.
        # Using Softmax-like scaling for non-best-fit items to maintain relative preference.
        non_best_fit_scores = inverse_proximity_scores[~best_fit_mask_local]
        if non_best_fit_scores.size > 0:
            exp_scores = np.exp(non_best_fit_scores - np.max(non_best_fit_scores))
            normalized_non_best_fit = exp_scores / np.sum(exp_scores)
            combined_scores[~best_fit_mask_local] = normalized_non_best_fit

        # Assign combined scores back to the original array structure
        priorities[eligible_bins_mask] = combined_scores

    return priorities
```
