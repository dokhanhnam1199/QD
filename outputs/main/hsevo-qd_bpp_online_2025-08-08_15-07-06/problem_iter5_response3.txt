```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse proximity with a sigmoid for smooth preference, favoring tight fits
    and ensuring a neutral score for equally good fits.
    """
    eligible_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins_mask):
        eligible_capacities = bins_remain_cap[eligible_bins_mask]
        
        # Calculate inverse proximity for eligible bins, favoring smaller gaps
        inverse_proximity = 1.0 / (eligible_capacities - item + 1e-9)

        # Normalize scores to map them to a range where sigmoid is effective (around 0.5)
        min_prox = np.min(inverse_proximity)
        max_prox = np.max(inverse_proximity)
        
        if max_prox > min_prox:
            normalized_scores = (inverse_proximity - min_prox) / (max_prox - min_prox)
        else: # All eligible bins have the same inverse proximity (same gap)
            normalized_scores = np.ones_like(inverse_proximity) * 0.5

        # Apply sigmoid to create smooth, graded priorities.
        # Scores closer to 1 (tighter fits) get higher priorities.
        # We invert normalized_scores for the sigmoid input to favor higher inverse_proximity.
        sigmoid_priorities = 1 / (1 + np.exp(-10 * (normalized_scores - 0.5)))

        priorities[eligible_bins_mask] = sigmoid_priorities
        
        # If all eligible bins are equally good fits (sigmoid output is 0.5),
        # assign a neutral priority of 0.5 to maintain fairness.
        if np.all(sigmoid_priorities == 0.5) and len(sigmoid_priorities) > 0:
            priorities[eligible_bins_mask] = 0.5

    return priorities
```
