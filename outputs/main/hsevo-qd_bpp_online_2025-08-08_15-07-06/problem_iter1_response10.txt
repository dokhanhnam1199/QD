```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit Decreasing-like heuristic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Prioritize bins that can fit the item and have a small remaining capacity after fitting
    # This is inspired by First Fit Decreasing by trying to leave larger spaces for future larger items
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            # Assign a higher priority to bins with less remaining capacity after fitting the item.
            # This encourages using bins that will be "filled up" more, leading to fewer open bins.
            # We invert the remaining capacity so smaller remaining capacity gets a higher score.
            # Adding 1 to avoid division by zero if capacity becomes zero.
            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1)
    return priorities
```
