```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Epsilon-Greedy strategy for Online Bin Packing Problem.

    Prioritizes bins that can fit the item and have the least remaining capacity
    to minimize wasted space. With a small probability (epsilon), it chooses a
    random bin to explore less optimal but potentially better future placements.
    """
    epsilon = 0.1  # Probability of choosing a random bin
    
    possible_bins = bins_remain_cap >= item
    
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)
        
    priorities = np.zeros_like(bins_remain_cap)
    
    if np.random.rand() < epsilon:
        # Explore: choose a random bin that can fit the item
        candidate_indices = np.where(possible_bins)[0]
        chosen_index = np.random.choice(candidate_indices)
        priorities[chosen_index] = 1.0
    else:
        # Exploit: choose the bin with the least remaining capacity that fits the item
        bins_to_consider = bins_remain_cap[possible_bins]
        remaining_capacity_for_valid_bins = bins_to_consider - item
        
        best_bin_relative_index = np.argmin(remaining_capacity_for_valid_bins)
        
        valid_bin_indices = np.where(possible_bins)[0]
        best_bin_absolute_index = valid_bin_indices[best_bin_relative_index]
        
        priorities[best_bin_absolute_index] = 1.0
        
    return priorities
```
