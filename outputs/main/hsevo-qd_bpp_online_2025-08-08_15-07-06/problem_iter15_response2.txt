```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    fit_mask = bins_remain_cap >= item
    
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    fitting_bins_remain_cap = bins_remain_cap[fit_mask]
    
    
    gap = fitting_bins_remain_cap - item
    
    
    alpha = 0.5 # Weight for tightness (smaller gap is better)
    beta = 0.5  # Weight for overall bin fullness (larger remaining capacity is better)
    
    
    tightness_score = -gap # Maximize this: minimize the gap
    fullness_score = fitting_bins_remain_cap # Maximize this: prefer fuller bins
    
    
    scores = alpha * tightness_score + beta * fullness_score
    
    
    priorities[fit_mask] = scores
    
    
    return priorities
```
