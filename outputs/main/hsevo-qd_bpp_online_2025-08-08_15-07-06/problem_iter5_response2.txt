```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'Best Fit' (tightest fit) with 'First Fit Decreasing' intuition
    by prioritizing bins with minimal remaining capacity that can still fit the item,
    and using inverse remaining capacity as a tie-breaker for bins with the same minimal difference.
    """
    
    can_fit_mask = bins_remain_cap >= item
    
    
    priorities = np.zeros_like(bins_remain_cap)
    
    
    eligible_capacities = bins_remain_cap[can_fit_mask]
    
    
    if not eligible_capacities.size:
        return priorities
    
    
    differences = eligible_capacities - item
    
    
    min_difference = np.min(differences)
    
    
    tightest_fit_mask = differences == min_difference
    
    
    tightest_fit_capacities = eligible_capacities[tightest_fit_mask]
    
    
    if tightest_fit_capacities.size > 0:
        
        inverse_capacity_scores = 1.0 / (tightest_fit_capacities + 1e-9)
        
        
        max_inverse_capacity = np.max(inverse_capacity_scores)
        
        
        normalized_scores = inverse_capacity_scores / max_inverse_capacity
        
        
        priorities[can_fit_mask][tightest_fit_mask] = normalized_scores
        
    
    return priorities
```
