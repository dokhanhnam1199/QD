```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse proximity with a slight bias towards tighter fits,
    prioritizing bins that leave minimal remaining capacity.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Filter bins that can accommodate the item
    fitting_bins_mask = bins_remain_cap >= item
    
    # Calculate the remaining capacity for fitting bins
    remaining_capacities = bins_remain_cap[fitting_bins_mask]
    
    # Calculate the 'gap' after placing the item. Smaller gap is better.
    # Add a small epsilon to avoid division by zero if a perfect fit exists.
    gaps = remaining_capacities - item
    
    # Assign higher priority to bins with smaller gaps (tighter fits).
    # Use inverse of (gap + 1) to ensure larger values for smaller gaps.
    # Adding 1 to the gap before inversion prevents division by zero and 
    # gives a finite, high priority to perfect fits.
    priorities[fitting_bins_mask] = 1.0 / (gaps + 1.0)
    
    # Optional: Add a small perturbation to break ties randomly if desired,
    # but for determinism, we keep it as is.
    
    return priorities
```
