```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tightest fit with a penalty for excessive remaining capacity,
    using a smooth exponential weighting for graded priorities.
    """
    fit_mask = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    if np.any(fit_mask):
        eligible_capacities = bins_remain_cap[fit_mask]
        gaps = eligible_capacities - item
        
        # Use exponential of negative gap for tightest fit priority.
        # A temperature parameter controls the steepness of the priority drop-off.
        # Lower temperature means stronger preference for the tightest fit.
        temperature = 0.3  # Adjusted for potentially finer granularity
        
        # The score is primarily based on how tight the fit is (smaller gap -> higher score).
        # This aligns with minimizing the number of bins.
        priorities[fit_mask] = np.exp(-gaps / temperature)
        
    return priorities
```
