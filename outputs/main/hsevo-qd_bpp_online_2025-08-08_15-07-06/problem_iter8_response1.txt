```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's inverse proximity with a scaled representation of bin fullness,
    giving a strong preference to bins that are both a good fit and have less remaining capacity.
    """
    eligible_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins_mask):
        eligible_capacities = bins_remain_cap[eligible_bins_mask]
        differences = eligible_capacities - item

        # Strategy 1: Inverse proximity (favoring smaller remaining capacities)
        inverse_proximity_scores = 1.0 / (differences + 1e-9)

        # Strategy 2: Bin fullness (favoring bins with less *total* remaining capacity)
        # We use the inverse of the eligible capacities to represent fullness
        # A smaller eligible_capacity means the bin is "fuller" relative to its potential remaining space
        fullness_scores = 1.0 / (eligible_capacities + 1e-9)

        # Combine strategies: Weighted sum of inverse proximity and scaled fullness
        # We scale fullness scores to be comparable to inverse proximity scores.
        # A simple approach is to normalize them or use a factor.
        # Here, we'll use a direct weighted sum, with weights that can be tuned.
        # Let's prioritize inverse proximity slightly more.
        weight_proximity = 0.6
        weight_fullness = 0.4

        # Simple combination: weighted sum.
        # More sophisticated combination could involve sorting or non-linear interactions.
        combined_scores = (weight_proximity * inverse_proximity_scores +
                           weight_fullness * fullness_scores)

        # Normalize scores to prevent extreme values and maintain some distribution
        if np.max(combined_scores) > 0:
            normalized_scores = combined_scores / np.max(combined_scores)
        else:
            normalized_scores = combined_scores # all zeros

        priorities[eligible_bins_mask] = normalized_scores

    return priorities
```
