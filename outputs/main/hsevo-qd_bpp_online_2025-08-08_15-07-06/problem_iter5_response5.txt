```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a penalty for excessive remaining capacity using sigmoid.

    Prioritizes bins with minimal remaining capacity (tightest fit) and applies
    a sigmoid to moderate the preference for very large residual capacities.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    if np.any(suitable_bins_mask):
        suitable_bins_caps = bins_remain_cap[suitable_bins_mask]
        
        # Calculate the "gap" or remaining capacity after fitting the item.
        # Smaller gaps are better (tighter fit).
        gaps = suitable_bins_caps - item
        
        # Use inverse of gap for priority: higher score for smaller gaps.
        # Add epsilon to avoid division by zero for perfect fits.
        inverse_gap_scores = 1.0 / (gaps + 1e-9)
        
        # Normalize inverse gap scores to be in a [0, 1] range for consistent sigmoid input.
        # Scaling by the maximum ensures the tightest fit gets the highest base score.
        if np.max(inverse_gap_scores) > 0:
            normalized_inverse_gap = inverse_gap_scores / np.max(inverse_gap_scores)
        else:
            normalized_inverse_gap = np.zeros_like(inverse_gap_scores)

        # Apply a sigmoid function to create a smoother, graded preference.
        # Alpha controls the steepness: higher alpha means stronger preference for tight fits.
        # We center the sigmoid around 0.5 (corresponding to normalized_inverse_gap = 0.5)
        # to provide a balanced preference curve.
        alpha = 15.0 
        sigmoid_scores = 1 / (1 + np.exp(-alpha * (normalized_inverse_gap - 0.5)))
        
        # Ensure perfect fits (gap = 0) get the maximum possible priority (1.0).
        perfect_fit_mask = (gaps == 0)
        if np.any(perfect_fit_mask):
            sigmoid_scores[perfect_fit_mask] = 1.0

        priorities[suitable_bins_mask] = sigmoid_scores
        
    return priorities
```
