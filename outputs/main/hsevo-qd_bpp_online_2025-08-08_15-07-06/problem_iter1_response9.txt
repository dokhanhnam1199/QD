```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_capacities = bins_remain_cap[valid_bins_mask]

    if not valid_bins_capacities.size:
        return np.zeros_like(bins_remain_cap)

    # The "fit" is determined by how much capacity remains after placing the item.
    # We want bins that are "almost full" to be prioritized, meaning smaller remaining capacity.
    # Adding a small epsilon to avoid division by zero if remaining capacity is 0.
    remaining_capacities_after_fit = valid_bins_capacities - item + 1e-9

    # We use the negative of the remaining capacity as the score for softmax.
    # This makes bins with smaller remaining capacity (i.e., better fit) have higher scores.
    scores = -remaining_capacities_after_fit

    # Apply softmax to convert scores into probabilities (priorities)
    exp_scores = np.exp(scores)
    probabilities = exp_scores / np.sum(exp_scores)

    # Create the final priority array, placing probabilities in their original positions
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins_mask] = probabilities

    return priorities
```
