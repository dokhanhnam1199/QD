```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a combination of Best Fit and a sigmoid-like scaling.
    Favors bins that offer the tightest fit while providing a graded preference.
    """
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins_mask = bins_remain_cap >= item
    suitable_bins_caps = bins_remain_cap[suitable_bins_mask]
    
    if suitable_bins_caps.size == 0:
        return priorities
    
    # Calculate the "gap" or remaining space after fitting the item
    gaps = suitable_bins_caps - item
    
    # Heuristic: Prioritize bins with smaller gaps (tighter fits).
    # To create a priority score where higher is better, we can use inverse gap.
    # Using 1/(gap + epsilon) is a good base.
    # We also want to avoid extremely large values if gaps are very small,
    # and ensure a smooth distribution of priorities for cases with multiple good fits.
    # A scaled inverse gap or a transformed gap can achieve this.
    
    # Let's use a score that is higher for smaller gaps.
    # A simple inverse gap: 1.0 / (gaps + 1e-9)
    # To make it more "graded" and potentially useable with softmax-like selection later,
    # we can apply a transformation that maps smaller gaps to higher values more effectively.
    # Using a scaled inverse gap or a related function that is monotonically decreasing with gap.
    
    # Option: Use exp(-gap) which naturally gives higher values for smaller gaps.
    # We can scale the gap to control the steepness of the priority drop-off.
    # Let's use a temperature parameter similar to Softmax.
    temperature = 1.0  # Controls the sharpness of the priority distribution
    
    # Calculate scores: higher score for smaller gap (tighter fit)
    # `np.exp(-gaps / temperature)` will give higher scores for smaller gaps.
    scores = np.exp(-gaps / temperature)
    
    # Assign these calculated scores to the priority array for the suitable bins
    suitable_indices = np.where(suitable_bins_mask)[0]
    priorities[suitable_indices] = scores
    
    return priorities
```
