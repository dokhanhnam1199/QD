```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse proximity for tight fits with a sigmoid for smooth preference.
    Favors bins with minimal remaining capacity after packing, scaled smoothly.
    """
    eligible_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins_mask):
        eligible_capacities = bins_remain_cap[eligible_bins_mask]
        
        # Inverse proximity: smaller gap is better (higher score)
        # Adding a small epsilon to avoid division by zero
        inverse_proximity = 1.0 / (eligible_capacities - item + 1e-9)

        # Normalize inverse proximity to a range where sigmoid is effective
        # Aims to map smaller gaps (higher inverse_proximity) to values around 0.5
        # and larger gaps to values further from 0.5.
        # This normalization is heuristic and can be tuned.
        if np.max(inverse_proximity) > np.min(inverse_proximity):
            normalized_scores = (inverse_proximity - np.min(inverse_proximity)) / (np.max(inverse_proximity) - np.min(inverse_proximity))
        else: # All eligible bins have the same inverse proximity
            normalized_scores = np.ones_like(inverse_proximity) * 0.5

        # Sigmoid function to create a smooth priority distribution
        # The steepness parameter (e.g., 10) can be tuned.
        # We want bins with smaller gaps (higher normalized_scores) to have higher sigmoid outputs.
        # So, we invert the normalized_scores for the sigmoid input to favor smaller gaps.
        sigmoid_priorities = 1 / (1 + np.exp(-10 * (normalized_scores - 0.5)))

        priorities[eligible_bins_mask] = sigmoid_priorities
        
        # Ensure that if all eligible bins are identical in terms of fit, they get a neutral priority
        if np.all(priorities[eligible_bins_mask] == 0.5) and len(eligible_bins_mask) > 0:
            priorities[eligible_bins_mask] = 0.5


    return priorities
```
