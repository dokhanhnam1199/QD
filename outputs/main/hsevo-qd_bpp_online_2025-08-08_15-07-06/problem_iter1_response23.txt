```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between remaining capacity and item size
    # Bins that can fit the item will have a positive difference
    # Bins that cannot fit will have a negative difference (effectively 0 priority for fitting)
    can_fit = bins_remain_cap >= item
    diff = np.where(can_fit, bins_remain_cap - item, -np.inf)

    # Prioritize bins with the smallest remaining capacity after adding the item
    # This is the "Almost Full Fit" strategy
    # Add a small penalty to bins that would be exactly full to prefer those with a tiny bit of space left
    # unless it's the only option.
    # The penalty is set to a small epsilon (1e-9) to slightly favor non-exact fits if possible.
    epsilon = 1e-9
    priorities = np.where(can_fit, diff - epsilon * (diff == 0), -np.inf)

    # Ensure that bins that cannot fit have a priority of -infinity so they are never chosen
    priorities = np.where(can_fit, priorities, -np.inf)

    return priorities
```
