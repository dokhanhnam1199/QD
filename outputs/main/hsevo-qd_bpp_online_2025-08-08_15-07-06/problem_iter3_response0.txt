```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    This heuristic prioritizes bins that can fit the item and have the smallest remaining capacity.
    This is a variation of the "Best Fit" strategy for the online bin packing problem.
    The goal is to minimize wasted space by selecting the bin that will have the least
    remaining capacity *after* the item is placed, provided it can fit the item.

    The priority is calculated as follows:
    1. For bins that can fit the item (bins_remain_cap >= item):
       - Calculate the remaining capacity after placing the item: `bins_remain_cap - item`.
       - To prioritize bins with the *smallest* remaining capacity (i.e., the "best fit"),
         we want to maximize the negative of this difference: `item - bins_remain_cap`.
         This effectively means we want to minimize `bins_remain_cap - item`.
         So, a higher value of `item - bins_remain_cap` indicates a better fit.
         For example, if item=0.5:
         - bin with rem_cap=1.0 -> priority = 0.5 - 1.0 = -0.5
         - bin with rem_cap=0.5 -> priority = 0.5 - 0.5 = 0.0 (highest priority)

    2. For bins that cannot fit the item (bins_remain_cap < item):
       - Assign a very low priority (negative infinity) to ensure these bins are never chosen.

    This version is an explicit implementation of the Best Fit strategy's core idea
    in terms of priority scoring, making it clearer than a potentially abstract
    or less direct calculation. It directly targets the bin that will be closest to full.
    """
    
    fit_mask = bins_remain_cap >= item
    
    
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    
    priorities[fit_mask] = item - bins_remain_cap[fit_mask]
    
    
    return priorities
```
