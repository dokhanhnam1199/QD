```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines tightest fit with a penalty for excess capacity.

    This heuristic prioritizes bins that offer a tight fit for the item,
    while also slightly penalizing bins with significantly more remaining
    capacity to encourage fuller bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap >= item:
            gap = remaining_cap - item
            
            if gap == 0:
                priorities[i] = float('inf') 
            else:
                
                proximity_score = 1.0 / gap
                
                
                capacity_penalty = - (gap**2) / 1000.0 
                
                priorities[i] = proximity_score + capacity_penalty
                
    return priorities
```
