import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0008086705136684025, temperature: float = 0.6915505043955479) -> np.ndarray:
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    valid_capacities = bins_remain_cap[valid_bins]
    
    diffs = valid_capacities - item
    
    # Scale diffs to be more in line with Softmax inputs (e.g., range -inf to +inf for exp)
    # A common pattern is to use `exp(value)` where larger `value` is better.
    # We want to maximize `-(diffs)`. So `exp(-diffs)`? No, we want to maximize score for smaller diffs.
    # Let's use `exp(-diffs)` with `temperature`.
    
    scaled_diffs = -diffs / temperature
    
    # Apply Softmax concept: exp(score) / sum(exp(scores))
    # We can simply return exp(scaled_diffs) as the priority, which is proportional to softmax output.
    
    priorities = np.exp(scaled_diffs)
    
    final_priorities = np.zeros_like(bins_remain_cap)
    final_priorities[valid_bins] = priorities
    
    return final_priorities
