```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Inverse Proximity with a small constant for robustness and explicit zeroing of invalid bins.

    This heuristic prioritizes bins that leave the least remaining capacity after packing,
    while ensuring a small positive value for all valid bins to avoid zero priorities.
    Invalid bins (not enough capacity) are given a zero priority.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    valid_bins_mask = bins_remain_cap >= item
    
    if np.any(valid_bins_mask):
        remaining_caps_valid = bins_remain_cap[valid_bins_mask]
        
        # Calculate proximity for valid bins
        proximity = remaining_caps_valid - item
        
        # Use inverse proximity, adding a small epsilon to avoid division by zero
        # and ensure even perfect fits get a high, but not infinite, priority.
        # This combines the spirit of 'priority_v0' (proximity focus)
        # and 'priority_v1' (robust inverse calculation).
        priorities[valid_bins_mask] = 1.0 / (proximity + 1e-9)
                
    return priorities
```
