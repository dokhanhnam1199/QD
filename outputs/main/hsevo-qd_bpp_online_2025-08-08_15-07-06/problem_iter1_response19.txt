```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A Softmax-based priority function for the online Bin Packing Problem.

    This function calculates the priority of placing an item into each available bin.
    It considers the remaining capacity of each bin relative to the item size.
    Bins that can accommodate the item without exceeding their capacity are favored.
    Among the bins that can accommodate the item, those with less remaining capacity
    (i.e., tighter fits) are given a higher priority, encouraging fuller bins first.
    The Softmax function is used to convert these relative preferences into a
    probability distribution, ensuring that higher priority bins have a greater chance
    of being selected.

    Args:
        item: The size of the item to be packed.
        bins_remain_cap: A numpy array where each element represents the remaining
                         capacity of a bin.

    Returns:
        A numpy array of the same shape as bins_remain_cap, where each element
        is the priority score for placing the item into the corresponding bin.
    """
    eligible_bins_mask = bins_remain_cap >= item
    eligible_capacities = bins_remain_cap[eligible_bins_mask]

    if eligible_capacities.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Calculate the "fit" score for eligible bins. A smaller remaining capacity
    # (tighter fit) results in a higher score. We use the negative difference
    # to make larger remaining capacities (less good fits) have smaller scores.
    fit_scores = -(eligible_capacities - item)

    # Apply Softmax to get probabilities (priorities).
    # Adding a small epsilon to avoid log(0) issues if fit_scores can be zero.
    epsilon = 1e-9
    exp_scores = np.exp(fit_scores - np.max(fit_scores)) # Stability trick for softmax
    priorities = exp_scores / np.sum(exp_scores)

    # Map priorities back to the original bin structure
    full_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    full_priorities[eligible_bins_mask] = priorities

    return full_priorities
```
