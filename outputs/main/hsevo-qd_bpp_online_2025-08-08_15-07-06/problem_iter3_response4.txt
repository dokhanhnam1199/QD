```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    This heuristic aims to improve upon v1 by considering the "waste" introduced
    by placing an item into a bin. While v1 prioritizes bins that have the
    smallest remaining capacity after placing the item (i.e., minimizing `bin_remain_cap - item`),
    v2 also considers the proportion of the bin that would be occupied.

    The priority is calculated as follows:
    1. For bins that can fit the item (`bins_remain_cap >= item`):
       - Calculate the remaining capacity after placing the item: `remaining_after = bins_remain_cap - item`.
       - Calculate the "waste" as the proportion of the bin that will be empty: `waste_proportion = remaining_after / bins_remain_cap`.
       - We want to *minimize* this waste proportion. A bin that is almost full and fits the item well
         will have a low `remaining_after` and thus a low `waste_proportion`.
       - To turn this into a priority (higher is better), we can use `-(waste_proportion)` or `1 - waste_proportion`.
         Let's use `1 - waste_proportion` which gives a score between 0 and 1 for fitting bins.
         A perfect fit (item == bin_remain_cap) results in a score of 1.
         A bin with just enough space (e.g., bin_remain_cap = 1.0, item = 0.9) gives `remaining_after = 0.1`, `waste_proportion = 0.1`, score = 0.9.
         A bin with much more space (e.g., bin_remain_cap = 1.0, item = 0.1) gives `remaining_after = 0.9`, `waste_proportion = 0.9`, score = 0.1.
         This seems to prioritize tighter fits.

    2. For bins that cannot fit the item (`bins_remain_cap < item`):
       - Assign a very low priority (0). This ensures that only bins that can fit the item are considered.
    """
    
    fit_mask = bins_remain_cap >= item
    
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    
    fitting_bins_remain_cap = bins_remain_cap[fit_mask]
    
    
    remaining_after_fit = fitting_bins_remain_cap - item
    
    
    waste_proportion = remaining_after_fit / fitting_bins_remain_cap
    
    
    priorities[fit_mask] = 1.0 - waste_proportion
    
    
    return priorities
```
