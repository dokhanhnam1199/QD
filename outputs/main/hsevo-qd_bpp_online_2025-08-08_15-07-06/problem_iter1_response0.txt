```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit strategy variant.

    The priority is higher for bins that can accommodate the item and have a remaining
    capacity closer to the item's size. This encourages tighter packing.
    Bins that cannot accommodate the item are given a priority of -1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size > 0:
        differences = fitting_bins_remain_cap - item
        # Higher priority for smaller differences (tighter fit)
        # We use -differences to make smaller differences result in higher scores.
        # Adding a small constant to avoid zero priorities for perfect fits
        # and to ensure valid bins have a positive priority.
        priorities[can_fit_mask] = -differences + 1.0

    return priorities
```
