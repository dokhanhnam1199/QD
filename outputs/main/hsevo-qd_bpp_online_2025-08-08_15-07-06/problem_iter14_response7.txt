```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tightest fit with a smoothed penalty for larger gaps using an exponential decay,
    favoring bins that minimize waste with graded priorities.
    """
    
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    
    fit_mask = bins_remain_cap >= item
    
    
    if np.any(fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[fit_mask]
        
        
        differences = fitting_bins_remain_cap - item
        
        
        # Score based on inverse proximity (tightest fit) with exponential decay
        # This provides a graded priority, giving higher scores to tighter fits
        # and penalizing larger gaps less abruptly than a simple inverse.
        temperature = 0.1  # Controls the steepness of the decay; smaller temp = steeper
        scores = np.exp(-differences / temperature)
        
        priorities[fit_mask] = scores

    return priorities
```
