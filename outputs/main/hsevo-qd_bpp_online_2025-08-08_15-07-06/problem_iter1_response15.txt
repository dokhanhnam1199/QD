```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the bin's remaining capacity and the item's size.
    # A smaller difference means the item fits "better" or closer to the bin's capacity.
    # We add a small epsilon to avoid division by zero if a bin is perfectly full or the item size is 0.
    diffs = bins_remain_cap - item
    priorities = 1.0 / (np.abs(diffs) + 1e-9)

    # We want to prioritize bins that can actually fit the item.
    # If an item cannot fit, its priority should be very low.
    # We can achieve this by multiplying the inverse difference by a mask
    # that is 1 for bins that can fit the item and 0 otherwise.
    can_fit_mask = (bins_remain_cap >= item).astype(float)
    priorities *= can_fit_mask

    return priorities
```
