```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give these bins a base priority

    # Further prioritize bins with the least remaining capacity after placing item
    remaining_after_fit = bins_remain_cap[can_fit] - item
    if len(remaining_after_fit) > 0:  # Check if any bins can fit the item before proceeding
        priorities[can_fit] += np.max(remaining_after_fit) - remaining_after_fit  # Smaller remainder has higher priority
    else:
        #If no bin can fit the item, assign a low priority to bins which have the highest remaining cap.
        priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.01 # Small Value to make it the smallest among others that can fit

    # Penalize bins that cannot fit the item (make them lower priority, close to 0 or negative)
    priorities[~can_fit] -= 0.0001*(item-bins_remain_cap[~can_fit])   #Very small penalize

    return priorities
```
