```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_bin_cap = np.max(bins_remain_cap)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Tight Fit: Prioritize bins where the item fits snugly, minimizing remaining capacity.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely

    priorities = -remaining_after_fit  # Smaller remaining capacity = higher priority

    # 3. Adjust priority based on bin utilization *after* insertion.  Encourage filling bins.
    utilization_after_fit = (max_bin_cap - remaining_after_fit) / max_bin_cap
    priorities[feasible_bins] += 0.2 * utilization_after_fit[feasible_bins]  # Weight utilization higher

    # 4. Bonus for bins that become full (or nearly full) after insertion.
    almost_full = (remaining_after_fit >= 0) & (remaining_after_fit <= 0.1 * max_bin_cap)
    priorities[almost_full] += 1.0

    # 5. Add a penalty for bins that are already very full. This encourages using emptier bins first.
    very_full = bins_remain_cap <= 0.2 * max_bin_cap
    priorities[very_full] -= 0.5  #tuneable parameter here 0.5

    # 6. If multiple bins are feasible, slightly prefer the one with the most remaining capacity if the item fits very well
    item_ratio = item / max_bin_cap
    if item_ratio < 0.3: #tuneable parameter here 0.3, if item is smaller than 30% of capacity, then consider this.
        priorities[feasible_bins] += 0.1 * bins_remain_cap[feasible_bins] / max_bin_cap #tunable parameter here 0.1

    return priorities
```
