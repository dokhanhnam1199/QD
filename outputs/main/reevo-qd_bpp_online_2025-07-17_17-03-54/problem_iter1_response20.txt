```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after placing the item
    remaining_after_placement = bins_remain_cap - item

    # Give a high priority to bins that can accommodate the item
    can_accommodate = remaining_after_placement >= 0
    priorities[can_accommodate] = 1

    # For bins that can accommodate, prioritize those with less remaining space.
    # Aim to fill bins as much as possible. This promotes bin utilization.
    priorities[can_accommodate] += 1 / (1 + remaining_after_placement[can_accommodate])

    # Slightly penalize bins that would be nearly full (but not perfectly)
    nearly_full = (remaining_after_placement > 0) & (remaining_after_placement < 0.1) #threshold can be tuned.
    priorities[nearly_full] -= 0.05 #Penalty can be tuned

    #For bins that CANNOT accommodate, assign a very low (negative) priority so that they are not chosen, but still have their relative priorities calculated
    cannot_accommodate = remaining_after_placement < 0
    priorities[cannot_accommodate] = -100 #Arbitrary negative value can be tuned, or set equal to a constant * the worst allowable bin packing score in your particular setup to normalize results

    return priorities
```
