```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing logic inspired: Prioritize bins that can fit the item snugly
            priority = 1 / (cap - item + 1e-9)  # Avoid division by zero
            # Slightly filled bins get higher priority than emptier ones, but only if item fits.
            priority += (1 - (cap / np.max(bins_remain_cap))) * 0.5
            priorities[i] = priority
        else:
            # Item does not fit. Penalize heavily.
            priorities[i] = -1e9  # Very low priority

    return priorities
```
