```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility: Bin must be able to fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Disqualify infeasible bins

    # Encourage filling bins:
    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = 1 - fill_ratio[feasible_bins] # Higher priority for smaller waste (larger fill ratio)

    # Bonus for bins that are already somewhat full. This helps complete bins
    # Avoid dividing by zero, add small epsilon.
    epsilon = 1e-9
    utilization_ratio = (1 - bins_remain_cap / (1 + epsilon))
    priorities[feasible_bins] += 0.5 * utilization_ratio[feasible_bins] #Added 0.5 factor as heuristic

    # Larger bins have slight advantage in case of ties
    priorities[feasible_bins] += 0.01 * bins_remain_cap[feasible_bins]  #added 0.01 factor as heuristic
    return priorities
```
