```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Best-Fit: Prefer bins with the least remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely

    priorities = -remaining_after_fit  # Smaller remaining capacity => higher priority

    # 3. Fragmentation Penalty: Penalize bins that become close to full after placement, but not yet full
    #    Use a quadratic penalty to strongly discourage leaving small gaps. Only consider feasible bins.

    nearly_full_threshold = 0.1  # Adjust this threshold as needed
    nearly_full = (remaining_after_fit > 0) & (remaining_after_fit <= nearly_full_threshold) & feasible_bins

    priorities[nearly_full] -= 100 * (nearly_full_threshold - remaining_after_fit[nearly_full])**2 # increase magnitude of penalty term

    return priorities
```
