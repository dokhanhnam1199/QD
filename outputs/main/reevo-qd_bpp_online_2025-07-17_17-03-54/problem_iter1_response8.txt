```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired heuristic: Prefer bins that can fit the item well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller difference = better fit
    priorities[~fit_mask] = -1e9  # Very low priority for bins that can't fit the item

    # Add a small bias to favor bins with more remaining capacity to avoid fragmentation if similar good fits are available
    priorities += bins_remain_cap * 0.001

    return priorities
```
