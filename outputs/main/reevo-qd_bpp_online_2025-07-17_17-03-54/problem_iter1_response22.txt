```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Encourage filling bins that are close to being full after adding the item
            remaining_after_add = cap - item
            if remaining_after_add == 0:
                priorities[i] = 100  # High priority for perfect fit
            else:
                priorities[i] = 1 / (remaining_after_add + 0.00001)  # Smaller remaining cap gets higher priority
        else:
            priorities[i] = -1000  # Very low priority if item doesn't fit
    return priorities
```
