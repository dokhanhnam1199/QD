{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Assign very low priority if the item doesn't fit.\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    \n    # 2. Maximize remaining capacity after packing (minimize waste). Prefer bins that will have more space left.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    \n    # Give priority to bins with more remaining capacity. Add small constant to avoid zero division.\n    priorities[feasible_mask] = remaining_space / (bins_remain_cap[feasible_mask] + 1e-6) \n    \n    # 3. Prioritize bins with closer capacity to item size\n    # Prioritize bins that fit the item snugly, reducing fragmentation.\n    snugness = bins_remain_cap[feasible_mask] - item\n    snugness_priority = np.exp(-np.abs(snugness) / (item + 1e-6)) # Gaussian-like, peaks when snugness is small. Adding a small constant for numerical stability\n    priorities[feasible_mask] += snugness_priority\n    \n    # Add a bonus to bins that are nearly full. Helps avoid a lot of nearly empty bins at the end.\n    nearly_full_bonus = (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap + 1e-6))**2\n    priorities[feasible_mask] += nearly_full_bonus\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # First-Fit Decreasing-inspired heuristic\n            # Prioritize bins with smaller remaining capacity that can still fit the item\n            priorities[i] = (cap - item) / cap # Remaining waste percentage\n            priorities[i] = 1 - priorities[i] # Prefer less waste\n            # Prefer bins that will have lower remaining capacities after packing.\n            # Adding a small constant to avoid division by zero issues.\n            # Normalize: Higher = better\n        else:\n            # Very low priority for bins that cannot fit the item.\n            priorities[i] = -1e9\n    return priorities\n\n[Reflection]\nThe better code favors bins with less waste *after* packing, directly optimizing bin utilization with a simpler approach.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}