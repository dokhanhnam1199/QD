```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Tight Fit: Prioritize bins where the item fits snugly, minimizing remaining capacity.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely

    priorities = -remaining_after_fit  # Smaller remaining capacity = higher priority

    # 3. Adjust priority based on bin utilization *after* insertion. Encourage filling bins.
    utilization_after_fit = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap)
    priorities[feasible_bins] += 0.2 * utilization_after_fit[feasible_bins]  # Weight utilization higher

    # 4. Give a slight bonus to bins that are already relatively full
    initial_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    priorities[feasible_bins] += 0.1 * initial_utilization[feasible_bins]

    # 5. Penalize bins that would become nearly full after insertion (risk of fragmentation)
    nearly_full_threshold = 0.95  # Define "nearly full" threshold
    future_utilization = utilization_after_fit
    nearly_full_bins = (future_utilization > nearly_full_threshold) & feasible_bins
    priorities[nearly_full_bins] -= 0.3  # Moderate penalty for nearly full bins

    return priorities
```
