```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Best Fit: Prioritize bins with the least remaining capacity *after* insertion.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely

    priorities = -remaining_after_fit

    # 3. Penalize Near-Full Bins (Non-linearly): Apply a penalty to bins that become nearly full after insertion.
    near_full_threshold = 0.1  # Define "near full" as having <= 10% capacity remaining
    near_full_penalty = np.where((remaining_after_fit > 0) & (remaining_after_fit <= near_full_threshold * np.max(bins_remain_cap)), -10 * (near_full_threshold * np.max(bins_remain_cap) - remaining_after_fit), 0)  # Apply penalty

    priorities += near_full_penalty

    # 4. Randomness for Tie-breaking: Add a small amount of random noise to break ties.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.001

    return priorities
```
