{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize tight fits and feasibility. Minimize waste *after* packing, not just before. Use remaining capacity effectively, but avoid overly complex, conflicting heuristics. Focus on simplicity and direct optimization of bin utilization.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        # If no bin can fit the item, assign minimal priority to all bins\n        return priorities - np.inf\n    \n    # 2. Remaining Capacity: Prefer bins with less remaining capacity *after* placing the item.  This encourages filling bins.\n\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf # penalize infeasible bins severely\n\n    priorities = -remaining_after_fit\n\n    # 3. Avoidance of fragmentation: prioritize bins whose utilization after insertion is high, but doesn't result in too much waste\n    utilization = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap) #Utilization of bin\n    fragmentation_penalty = np.abs(remaining_after_fit - item) #Smaller remainder, bigger penalty\n\n    priorities[feasible_bins] += 0.1 * utilization[feasible_bins] - 0.05 * fragmentation_penalty[feasible_bins] # Adjust scaling factor based on experiments\n\n    \n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}