```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, filter out bins that cannot fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can fit the item, return low priority for all (effectively opening a new bin).
        return priorities

    # Calculate the waste if the item is placed in each valid bin
    waste = bins_remain_cap[valid_bins] - item

    # Assign higher priority to bins with less waste, but give some additional
    # boost to almost-full bins.
    priorities[valid_bins] = (1 / (waste + 0.00001)) + (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))

    # Optional: Add a small random component to break ties
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.0001

    return priorities
```
