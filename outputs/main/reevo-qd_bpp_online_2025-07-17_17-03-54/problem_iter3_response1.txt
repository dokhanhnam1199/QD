```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Remaining Capacity:  Prioritize bins with minimal remaining capacity AFTER placing the item
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # penalize infeasible bins severely

    priorities = -remaining_after_fit

    # 3. Tight Fit Bonus:  Heavily reward bins where the item fits very snugly.  This encourages filling up bins completely.
    tight_fit_threshold = 0.1  # Define "tight fit" as remaining capacity <= 10% of bin size
    tight_fit_bonus = 1.0 # Bonus to add

    is_tight_fit = (remaining_after_fit >= 0) & (remaining_after_fit <= tight_fit_threshold * np.max(bins_remain_cap))

    priorities[is_tight_fit] += tight_fit_bonus

    return priorities
```
