```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities remain zero

    # Priority 1: Bins that fit the item best (smallest waste)
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Mark infeasible bins with infinite waste

    min_waste = np.min(waste)
    best_fit_bins = (waste == min_waste) & feasible_bins
    priorities[best_fit_bins] += 1.0

    # Priority 2: Penalize bins that are becoming too full (non-linear penalty)
    # Adjust the penalty based on remaining capacity
    relative_rem_cap = bins_remain_cap / np.max(bins_remain_cap)
    penalty = (1 - relative_rem_cap) ** 3  # Cubic penalty, stronger as bins get fuller
    priorities[feasible_bins] -= penalty[feasible_bins] * 0.2

    #Priority 3: slight incentive for bins with larger remaining capacity
    priorities[feasible_bins] += relative_rem_cap[feasible_bins] * 0.05


    return priorities
```
