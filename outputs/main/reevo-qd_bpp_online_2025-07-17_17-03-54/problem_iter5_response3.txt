```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf
    
    # 2. Best Fit: Prioritize bins with the least remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Mark infeasible bins with infinite remaining capacity.
    
    priorities = -remaining_after_fit # Invert so that smaller remainders have higher priority
    
    # 3. Fragmentation Penalty: Penalize bins that are becoming nearly full after placing the item.
    #   - Quadratic penalty on small remaining capacities. This discourages filling bins to near-full capacity, promoting better balance.
    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)  # Define "nearly full" as 10% of max capacity.  Adjust as needed.

    fragmentation_penalty = np.where(
        (remaining_after_fit > 0) & (remaining_after_fit <= nearly_full_threshold),
        -(nearly_full_threshold - remaining_after_fit)**2 ,
        0
    )
    
    priorities += fragmentation_penalty
    
    return priorities
```
