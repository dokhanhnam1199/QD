[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response1.txt_stdout.txt",
    "code_path": "problem_iter1_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        # If no bin can fit the item, assign minimal priority to all bins\n        return priorities - np.inf\n    \n    # 2. Remaining Capacity: Prefer bins with less remaining capacity *after* placing the item.  This encourages filling bins.\n\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf # penalize infeasible bins severely\n\n    priorities = -remaining_after_fit\n\n    # 3. Avoidance of fragmentation: prioritize bins whose utilization after insertion is high, but doesn't result in too much waste\n    utilization = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap) #Utilization of bin\n    fragmentation_penalty = np.abs(remaining_after_fit - item) #Smaller remainder, bigger penalty\n\n    priorities[feasible_bins] += 0.1 * utilization[feasible_bins] - 0.05 * fragmentation_penalty[feasible_bins] # Adjust scaling factor based on experiments\n\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 50.18947501009619,
    "mi": 83.59973324786895,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No bin can fit, all priorities remain zero\n\n    # Priority 1: Bins that fit the item best (smallest remaining capacity after placing the item).\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf # Mark infeasible bins with infinite remaining capacity to not influence the argmin\n\n    best_fit_bins = (remaining_after_fit == np.min(remaining_after_fit)) & feasible_bins\n    priorities[best_fit_bins] += 1 # Give a high score to the best fit bin\n\n\n    # Priority 2: Slightly penalize bins that are becoming very full\n    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)\n    priorities[feasible_bins] -= (fullness[feasible_bins]**2) * 0.1  # Quadratic penalty for bins that are getting close to full\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 286.51993510959227,
    "mi": 79.4871625303653,
    "token_count": 185.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, assign minimal priority to all bins\n        return priorities - np.inf\n\n    # 2. Tight Fit: Prioritize bins where the item fits snugly, minimizing remaining capacity.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely\n\n    priorities = -remaining_after_fit  # Smaller remaining capacity = higher priority\n\n    # 3. Adjust priority based on bin utilization *after* insertion.  Encourage filling bins.\n\n    utilization_after_fit = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap)\n    priorities[feasible_bins] += 0.2 * utilization_after_fit[feasible_bins]  # Weight utilization higher\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 135.7068586817104,
    "mi": 78.77938049739883,
    "token_count": 138.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No bin can fit, all priorities remain zero\n\n    # Priority 1: Bins that fit the item best (smallest remaining capacity after placing the item).\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf # Mark infeasible bins with infinite remaining capacity to not influence the argmin\n\n    best_fit_bins = (remaining_after_fit == np.min(remaining_after_fit)) & feasible_bins\n    priorities[best_fit_bins] += 1 # Give a high score to the best fit bin\n\n    # Priority 2: Slightly penalize bins that are becoming very full, but also prioritize bins that are almost empty (to consolidate).\n    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap) #max capacity can change during runtime\n    priorities[feasible_bins] -= (fullness[feasible_bins]**2) * 0.1  # Quadratic penalty for bins that are getting close to full\n\n    # Bonus for bins that are almost empty\n    empty_bonus = (bins_remain_cap / np.max(bins_remain_cap))**3 * 0.05\n    priorities[feasible_bins] += empty_bonus[feasible_bins]\n\n    # Priority 3: Add a small random component to break ties and encourage exploration\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.01\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 17.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 328.9313627895044,
    "mi": 74.2540500892383,
    "token_count": 221.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, assign minimal priority to all bins\n        return priorities - np.inf\n\n    # 2. Best-Fit: Prioritize bins with the smallest remaining capacity *after* placing the item.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely\n\n    priorities = -remaining_after_fit\n\n    # 3. Fragmentation Penalty: Penalize bins that become near-full after placing the item.\n    # Quadratic penalty to strongly discourage near-full bins.\n\n    near_full_threshold = 0.1  # Define \"near-full\" as within 10% of capacity\n    near_full = (remaining_after_fit > 0) & (remaining_after_fit / np.max(bins_remain_cap) < near_full_threshold)  #Ensure positivity of the remainder and ensure normalization.\n    priorities[near_full] -= 10 * (near_full_threshold - remaining_after_fit[near_full]/np.max(bins_remain_cap))**2  # Quadratic penalty; adjust the scaling factor (10) as needed\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 118.59257041502654,
    "mi": 80.98975365120319,
    "token_count": 125.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, assign minimal priority to all bins\n        return priorities - np.inf\n\n    # 2. Tight Fit: Prioritize bins where the item fits snugly, minimizing remaining capacity.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely\n\n    priorities = -remaining_after_fit  # Smaller remaining capacity = higher priority\n\n    # 3. Adjust priority based on bin utilization *after* insertion.  Encourage filling bins.\n    utilization_after_fit = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap)  #Corrected bug here to ensure that the max bin capacity is the denominator.\n    priorities[feasible_bins] += 0.2 * utilization_after_fit[feasible_bins]  # Weight utilization higher\n\n    # 4. Bonus for bins that become full (or nearly full) after insertion.\n    almost_full = (remaining_after_fit >= 0) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap)) #tuneable parameter here 0.1\n    priorities[almost_full] += 1.0 #tuneable parameter here 1.0\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 225.0,
    "mi": 79.37600291203123,
    "token_count": 169.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response3.txt_stdout.txt",
    "code_path": "problem_iter7_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, assign minimal priority to all bins\n        return priorities - np.inf\n\n    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* placing the item.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely\n\n    priorities = -remaining_after_fit\n\n    # 3. Utilization: Reward higher utilization. Avoid near-full bins with a non-linear penalty.\n    utilization = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap)\n    near_full_penalty = np.exp(10 * (utilization - 0.9))  # Exponential penalty for bins over 90% full. Adjust '10' and '0.9' as needed.\n\n    priorities[feasible_bins] -= 0.05 * near_full_penalty[feasible_bins]  # Scale the penalty\n\n    # 4. Randomness: Introduce a small amount of randomness to break ties.\n    priorities[feasible_bins] += 0.001 * np.random.rand(np.sum(feasible_bins))\n\n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 162.53496664211536,
    "mi": 79.85914178130794,
    "token_count": 158.0,
    "exec_success": true
  }
]