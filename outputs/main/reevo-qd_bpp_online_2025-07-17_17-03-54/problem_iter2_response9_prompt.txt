{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bin can fit the item, return low priority for all (effectively opening a new bin).\n        return priorities\n\n    # Calculate the waste if the item is placed in each valid bin\n    waste = bins_remain_cap[valid_bins] - item\n\n    # Assign higher priority to bins with less waste, but give some additional\n    # boost to almost-full bins.\n    priorities[valid_bins] = (1 / (waste + 0.00001)) + (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))\n\n    # Optional: Add a small random component to break ties\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.0001\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits\n    fit_mask = waste >= 0\n    priorities[fit_mask] = 1\n\n    # Prioritize bins with less waste\n    priorities[fit_mask] += 1 / (waste[fit_mask] + 0.0001)  # Avoid division by zero\n\n    # Penalize bins where the item doesn't fit (make them less desirable)\n    no_fit_mask = ~fit_mask\n    priorities[no_fit_mask] = - (item - bins_remain_cap[no_fit_mask])  # penalize by amount of overflow\n\n    # Slightly prioritize bins that are closer to half full.  This aims to prevent\n    # bins from being either completely full or almost empty and promotes balanced loading.\n    half_full_distance = np.abs(bins_remain_cap - np.mean(bins_remain_cap))\n    priorities -= half_full_distance / (np.max(bins_remain_cap) + 0.0001)  # Normalize the distance\n\n    return priorities\n\n[Reflection]\nPrioritize fitting, minimize waste, penalize overflow, and balance bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}