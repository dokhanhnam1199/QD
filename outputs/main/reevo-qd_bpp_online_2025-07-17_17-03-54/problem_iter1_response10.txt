```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get higher priority
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Rule 2: Give higher priority to bins with remaining capacity close to item size
    # (First Fit Decreasing principle). Avoid very small remaining capacity
    remaining_space = bins_remain_cap - item
    close_fit = can_fit & (remaining_space <= np.mean(bins_remain_cap)) # Adjust threshold (np.mean(bins_remain_cap))
    priorities[close_fit] += 2

    # Rule 3: Penalize bins that will become almost full, but only if the item fits.
    almost_full = can_fit & (remaining_space / bins_remain_cap < 0.1) # Adjust threshold (0.1)
    priorities[almost_full] -= 0.5

    # Rule 4: If the item doesn't fit any bin, prioritize bins with larger remaining capacity
    if not np.any(can_fit):
        priorities = bins_remain_cap / np.sum(bins_remain_cap)

    return priorities
```
