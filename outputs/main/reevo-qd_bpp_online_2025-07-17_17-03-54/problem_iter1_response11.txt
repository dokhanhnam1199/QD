```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item fits.
    fits = bins_remain_cap >= item
    priorities[fits] += 1.0

    # Heuristic 2: Smaller remaining capacity after placing the item results in a higher score (First-Fit Decreasing variant). Avoid large fragmentation.
    remaining_after_placement = bins_remain_cap - item
    valid_placements = remaining_after_placement >= 0
    priorities[valid_placements] += 1.0 / (remaining_after_placement[valid_placements] + 1e-9)  # Avoid division by zero and prefer small remaining space

    # Heuristic 3: Give slight bonus for almost full bins.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 2 * item)
    priorities[almost_full] += 0.5

    # Heuristic 4: Penalize bins if the item will overfill the bin.
    overfill = bins_remain_cap < item
    priorities[overfill] -= 0.0

    return priorities
```
