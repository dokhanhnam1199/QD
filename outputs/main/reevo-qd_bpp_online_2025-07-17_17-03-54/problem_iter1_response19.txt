```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities remain zero

    # Priority 1: Bins that fit the item best (smallest remaining capacity after placing the item).
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf # Mark infeasible bins with infinite remaining. Important when all bins are already in use

    # Assign high priority to bins with the *smallest positive* remaining capacity
    priorities[feasible_bins] = 1 / (remaining_after_fit[feasible_bins] + 1e-9) # Adding a small constant to avoid division by zero and to act as a tie-breaker.

    #Priority 2: Avoid bins that are getting too full if they fit well.

    return priorities
```
