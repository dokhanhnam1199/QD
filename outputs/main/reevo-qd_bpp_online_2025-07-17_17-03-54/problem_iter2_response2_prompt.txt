{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n\n    # Give high priority to bins that can fit the item\n    fit_mask = remaining_capacities >= 0\n    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Favor bins with tighter fit.\n\n    # Give negative priority to bins that cannot fit the item, with a larger magnitude\n    # if the item would exceed the capacity significantly\n    no_fit_mask = remaining_capacities < 0\n    priorities[no_fit_mask] = remaining_capacities[no_fit_mask] * 2  # Heavily penalize bins that can't fit.\n\n    # Boost bins that are nearly full but can still fit the item (encourages finishing bins).  Avoid divide by zero.\n    nearly_full_mask = (bins_remain_cap > 0) & fit_mask\n    priorities[nearly_full_mask] += 0.1*(1 - remaining_capacities[nearly_full_mask]/bins_remain_cap[nearly_full_mask])\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if item <= cap:\n            # Encourage filling bins that are close to being full after adding the item\n            remaining_after_add = cap - item\n            if remaining_after_add == 0:\n                priorities[i] = 100  # High priority for perfect fit\n            else:\n                priorities[i] = 1 / (remaining_after_add + 0.00001)  # Smaller remaining cap gets higher priority\n        else:\n            priorities[i] = -1000  # Very low priority if item doesn't fit\n    return priorities\n\n[Reflection]\nPrioritize perfect fits. Infeasible assignments should have significantly low priority. Exploit remaining capacity information.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}