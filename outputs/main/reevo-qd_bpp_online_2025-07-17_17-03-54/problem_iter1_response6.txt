```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing Inspired: Favor bins that can fit the item with minimal waste.
    # Avoid bins that are too small (negative residual)
    residual_space = bins_remain_cap - item
    
    # Bins that can accommodate the item get a base priority based on how full they become after placement.
    # Fuller bins (smaller waste) get higher priority. Using a non-linear function (e.g., square) to amplify this.
    valid_bins = residual_space >= 0
    if np.any(valid_bins):
      priorities[valid_bins] = (item / bins_remain_cap[valid_bins])**2 # Fullness of bin if the item is added.
    
    #Add a bonus to almost full bin: The bins with remaining capacity between item and item + a tolerance
    almost_full_tolerance = 0.1
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= item + almost_full_tolerance)
    priorities[almost_full] += 1.0 #Adding a significant bonus
    
    # Give a large penalty if placing would cause an exceedance of bin capacity
    priorities[residual_space < 0] = -1e9 

    return priorities
```
