```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely

    priorities = -remaining_after_fit  # Smaller remaining capacity = higher priority

    # 3. Utilization: Incentivize filling bins, but penalize bins getting too full.
    # Non-linear penalty for near-full bins (e.g., remaining capacity < item size).
    near_full_penalty = np.where(remaining_after_fit > 0, np.exp(-remaining_after_fit / item), 0)
    priorities -= 0.2 * near_full_penalty # Adjust scaling factor based on experiments.
    
    #4. Add small randomization to break ties
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.01

    return priorities
```
