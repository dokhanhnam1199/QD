```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check and initialization
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Assign very low priority to infeasible bins
    
    # Calculate remaining capacity after placing the item
    remaining_capacity = bins_remain_cap[feasible_bins] - item
    
    # Prioritize bins with smaller remaining capacity (First-Fit Decreasing inspired)
    # Invert the remaining capacity to prioritize smaller values (higher priority for less waste)
    priorities[feasible_bins] = 1 / (remaining_capacity + 1e-9) # Adding a tiny constant for stability
    
    # Normalize the priorities to be between 0 and 1 (optional but can be helpful)
    max_priority = np.max(priorities[feasible_bins]) if np.any(feasible_bins) else 1.0
    if max_priority > 0:
        priorities[feasible_bins] /= max_priority
    
    return priorities
```
