```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic
    # Give high priority to bins where the item fits, and the remaining space after placing
    # the item is minimized (close to zero, but positive).

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_space = cap - item
            #Prioritize bins with least remaining space, but prevent overflow.
            #Prioritize using an exponential function, small difference in space is preferred
            priorities[i] = np.exp(-remaining_space)
        else:
            priorities[i] = -1  # negative priority to indicate invalid bins

    return priorities
```
