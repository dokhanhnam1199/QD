```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority to bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0

    # Adjust priority based on how well the item fits.
    # Higher priority for bins where the remaining space after
    # packing the item is minimized (First-Fit Decreasing principle).
    remaining_space = bins_remain_cap - item
    remaining_space[~fit_mask] = np.inf  # Assign infinite remaining space to bins that don't fit

    # Normalize the remaining space to have higher priority for smaller remaining space
    priorities[fit_mask] += 1.0 / (1.0 + remaining_space[fit_mask])

    # Add a tie-breaking factor to prefer bins with more free space overall if there's still a tie after considering above criteria.
    # Add to avoid ties and to potentially promote packing smaller items into emptier bins (reduces fragmentation).
    priorities += bins_remain_cap / np.sum(bins_remain_cap) * 0.1  # small additive bonus

    return priorities
```
