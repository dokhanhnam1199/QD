```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] = 10  # subatantially higher base priority

    # Prioritize bins with less waste (higher score if waste is small)
    priorities[fit_mask] += 1 / (waste[fit_mask] + 0.0001)

    # Penalize bins where the item doesn't fit (make them less desirable)
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -10 * (item - bins_remain_cap[no_fit_mask]) # substantially higher negative priority

    # Slightly prioritize bins that are closer to half full, relative to item size.
    # Encourages a better distribution of items across bins
    half_item_distance = np.abs(bins_remain_cap - item/2)
    priorities -= half_item_distance / (np.max(bins_remain_cap) + 0.0001)

    # Further adjustment: moderate penalty for bins with very large remaining capacity
    large_capacity_mask = bins_remain_cap > (np.max(bins_remain_cap) / 2)
    priorities[large_capacity_mask] -= bins_remain_cap[large_capacity_mask] / (np.max(bins_remain_cap) + 0.0001)

    return priorities
```
