```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1:  Favor bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Heuristic 2:  Prioritize bins with smallest remaining capacity after adding the item (First-Fit Decreasing variation)
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~can_fit] = np.inf  # Penalize bins that can't fit
    priorities -= remaining_after_fit / np.max(bins_remain_cap) # Normalizing.

    # Heuristic 3: Add a small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
