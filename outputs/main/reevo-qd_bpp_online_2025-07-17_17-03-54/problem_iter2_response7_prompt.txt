{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired heuristic: Prefer bins that can fit the item well\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller difference = better fit\n    priorities[~fit_mask] = -1e9  # Very low priority for bins that can't fit the item\n\n    # Add a small bias to favor bins with more remaining capacity to avoid fragmentation if similar good fits are available\n    priorities += bins_remain_cap * 0.001\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Prefer bins where the item fits.\n    fits = bins_remain_cap >= item\n    priorities[fits] += 1.0\n\n    # Heuristic 2: Smaller remaining capacity after placing the item results in a higher score (First-Fit Decreasing variant). Avoid large fragmentation.\n    remaining_after_placement = bins_remain_cap - item\n    valid_placements = remaining_after_placement >= 0\n    priorities[valid_placements] += 1.0 / (remaining_after_placement[valid_placements] + 1e-9)  # Avoid division by zero and prefer small remaining space\n\n    # Heuristic 3: Give slight bonus for almost full bins.\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 2 * item)\n    priorities[almost_full] += 0.5\n\n    # Heuristic 4: Penalize bins if the item will overfill the bin.\n    overfill = bins_remain_cap < item\n    priorities[overfill] -= 0.0\n\n    return priorities\n\n[Reflection]\nThe better code uses multiple explicit, interpretable heuristics focusing on fit and fragmentation avoidance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}