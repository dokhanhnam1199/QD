```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities remain zero

    # Priority 1: Bins that fit the item best (smallest remaining capacity after placing the item).
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf # Mark infeasible bins with infinite remaining. Important when all bins are already in use

    # Assign high priority to bins with the *smallest positive* remaining capacity
    priorities[feasible_bins] = 1 / (remaining_after_fit[feasible_bins] + 1e-9) # Adding a small constant to avoid division by zero and to act as a tie-breaker.

    # Priority 2: Add a bonus for bins that are relatively empty to encourage using them early.
    # This helps prevent having many almost-empty bins at the end.
    empty_bin_bonus = (bins_remain_cap / np.max(bins_remain_cap))**2
    priorities[feasible_bins] += empty_bin_bonus[feasible_bins]

    # Priority 3: Slightly penalize bins that are close to full to avoid overfilling them.
    nearly_full_penalty = np.where(bins_remain_cap < 2 * item, (1 - bins_remain_cap / (2 * item)) , 0) # Apply penalty only when bin is nearly full
    priorities[feasible_bins] -= nearly_full_penalty[feasible_bins]
    
    return priorities
```
