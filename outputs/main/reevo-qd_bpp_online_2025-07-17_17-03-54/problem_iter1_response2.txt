```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility check: Assign very low priority if item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Significantly penalize infeasible bins

    # Encourage filling bins more completely
    fill_ratios = item / bins_remain_cap
    fill_score = np.where(~infeasible_mask, np.clip(fill_ratios, 0, 1), 0) # Avoid modifying the already assigned -inf

    # Bonus for bins that are already relatively full, avoiding fragmentation
    occupation_ratios = (1 - bins_remain_cap / np.max(bins_remain_cap))
    occupation_bonus = np.where(~infeasible_mask, occupation_ratios * fill_score, 0)

    # Prioritize bins where the item represents a significant proportion of remaining space, and account for occupation.
    priorities = np.where(~infeasible_mask, fill_score + occupation_bonus, priorities)

    # Small random component to break ties and explore slightly
    priorities += np.random.rand(len(bins_remain_cap)) * 0.0001
    
    return priorities
```
