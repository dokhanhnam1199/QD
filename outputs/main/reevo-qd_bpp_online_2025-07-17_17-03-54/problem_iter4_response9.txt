```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities remain zero

    # Priority 1: Best Fit - Bins that fit the item best (smallest remaining capacity after placing the item).
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Mark infeasible bins with infinite remaining capacity

    best_fit_bins = (remaining_after_fit == np.min(remaining_after_fit)) & feasible_bins
    priorities[best_fit_bins] += 1.0  # Give a high score to the best fit bin

    # Priority 2: Fill-level balancing - slightly penalize almost full bins.
    # But also reward bins that are already somewhat full (but can still fit the item)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same initial capacity
    fill_level = (bin_capacity - bins_remain_cap) / bin_capacity  # Fill level of each bin

    # Penalize bins close to full, but only if they can fit the item.
    almost_full = (bins_remain_cap < 1.1 * item) & feasible_bins #Consider bins slightly larger than item as well, to avoid oscillations.
    priorities[almost_full] -= (fill_level[almost_full]**2) * 0.2  # Quadratic penalty for almost full bins.

    # Reward bins that are already somewhat full
    somewhat_full = (fill_level > 0.2) & feasible_bins #Bins that are at least 20% full
    priorities[somewhat_full] += fill_level[somewhat_full] * 0.1 #Linear reward for already somewhat full bins

    # Priority 3: Add a small random component to break ties deterministically.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.01

    return priorities
```
