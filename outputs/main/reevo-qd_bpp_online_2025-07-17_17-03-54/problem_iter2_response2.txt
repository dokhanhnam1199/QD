```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_capacities = bins_remain_cap - item

    # Perfect fit gets the highest priority
    perfect_fit_mask = np.isclose(remaining_capacities, 0) & (bins_remain_cap >= item)
    priorities[perfect_fit_mask] = 1000

    # Bins that can fit, prioritize those with smaller remaining capacity after adding the item
    fit_mask = remaining_capacities > 0
    priorities[fit_mask] = 1.0 / (remaining_capacities[fit_mask] + 0.00001)

    # Infeasible bins get very low priority
    no_fit_mask = remaining_capacities < 0
    priorities[no_fit_mask] = -1000

    return priorities
```
