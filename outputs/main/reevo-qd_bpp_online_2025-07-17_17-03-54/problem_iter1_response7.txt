```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Calculate remaining capacity after placing the item (for feasible bins)
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[~feasible_bins] = -1  # Mark infeasible bins
    
    # 3. Prioritize bins with smaller remaining capacity (First-Fit Decreasing style)
    # But only if they're feasible
    priorities[feasible_bins] = bins_remain_cap[feasible_bins] - item
    
    # 4. Give a boost to almost full bins to avoid fragmentation. A bin is considered almost full if remaining capacity is less than a threshold (e.g., 10% of bin size). In cases we do not know the original size we will consider that this is a value between 0 and item
    almost_full_threshold = min(item * 0.1, 0.1) #Threshold is 10% of item size, but cannot be bigger than 0.1
    almost_full = (remaining_capacities > 0) & (remaining_capacities <= almost_full_threshold)
    priorities[almost_full] += 1  # Boost for almost full bins
    
    # 5. Infeasible bins get the lowest priority (or 0, they don't matter anyway)
    priorities[~feasible_bins] = -1e9 #Large negative number

    return priorities
```
