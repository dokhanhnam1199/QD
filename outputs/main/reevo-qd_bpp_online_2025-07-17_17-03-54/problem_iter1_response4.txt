```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign very low priority if the item doesn't fit.
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # 2. Maximize remaining capacity after packing (minimize waste). Prefer bins that will have more space left.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # Give priority to bins with more remaining capacity. Add small constant to avoid zero division.
    priorities[feasible_mask] = remaining_space / (bins_remain_cap[feasible_mask] + 1e-6) 
    
    # 3. Prioritize bins with closer capacity to item size
    # Prioritize bins that fit the item snugly, reducing fragmentation.
    snugness = bins_remain_cap[feasible_mask] - item
    snugness_priority = np.exp(-np.abs(snugness) / (item + 1e-6)) # Gaussian-like, peaks when snugness is small. Adding a small constant for numerical stability
    priorities[feasible_mask] += snugness_priority
    
    # Add a bonus to bins that are nearly full. Helps avoid a lot of nearly empty bins at the end.
    nearly_full_bonus = (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap + 1e-6))**2
    priorities[feasible_mask] += nearly_full_bonus

    return priorities
```
