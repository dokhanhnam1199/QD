```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Best-Fit: Maximize filled space in the bin
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins heavily

    priorities = -remaining_after_fit  # Lower remaining capacity = higher priority

    # 3. Fragmentation Penalty: Penalize bins that become nearly full
    nearly_full = (remaining_after_fit > 0) & (remaining_after_fit < 0.1)  # Define "nearly full"
    priorities[nearly_full] -= 0.5  # Strong penalty for nearly full bins

    return priorities
```
