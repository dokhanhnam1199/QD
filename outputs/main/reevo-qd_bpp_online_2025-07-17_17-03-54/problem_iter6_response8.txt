```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, all priorities remain zero

    # Priority 1: Bins that fit the item best (smallest remaining capacity after placing the item).
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf # Mark infeasible bins with infinite remaining capacity to not influence the argmin

    best_fit_bins = (remaining_after_fit == np.min(remaining_after_fit)) & feasible_bins
    priorities[best_fit_bins] += 1 # Give a high score to the best fit bin

    # Priority 2: Slightly penalize bins that are becoming very full, but only consider feasible bins
    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)
    priorities[feasible_bins] -= (fullness[feasible_bins]**2) * 0.1  # Quadratic penalty for bins that are getting close to full


    # Priority 3: Reward bins that are relatively empty (to avoid fragmentation)
    emptiness = bins_remain_cap / np.max(bins_remain_cap)
    priorities[feasible_bins] += emptiness[feasible_bins] * 0.05

    return priorities
```
