```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] = 1

    # Prioritize bins with less waste
    priorities[fit_mask] += 1 / (waste[fit_mask] + 0.0001)  # Avoid division by zero

    # Penalize bins where the item doesn't fit (make them less desirable)
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = - (item - bins_remain_cap[no_fit_mask])  # penalize by amount of overflow

    # Slightly prioritize bins that are closer to half full.  This aims to prevent
    # bins from being either completely full or almost empty and promotes balanced loading.
    half_full_distance = np.abs(bins_remain_cap - np.mean(bins_remain_cap))
    priorities -= half_full_distance / (np.max(bins_remain_cap) + 0.0001)  # Normalize the distance

    return priorities
```
