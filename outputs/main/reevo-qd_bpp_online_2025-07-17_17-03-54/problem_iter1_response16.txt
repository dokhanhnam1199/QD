```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for bins where the item fits almost perfectly
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1)  # Tolerate 10% overfill
    priorities[almost_full] += 100

    # High priority for bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += (bins_remain_cap[can_accommodate] - item) / np.max(bins_remain_cap) # Smaller waste = high priority

    # Slightly penalize bins with very high remaining capacity. Encourage filling up the bins.
    large_capacity = bins_remain_cap > item * 2 # Twice item size
    priorities[large_capacity] -= bins_remain_cap[large_capacity] / np.max(bins_remain_cap) * 0.1 # Slightly reduce priority of large capacity bins

    # Assign very low priority to bins where the item cannot fit
    cannot_accommodate = bins_remain_cap < item
    priorities[cannot_accommodate] = -1000  # Or a very low negative value
    
    # Add small random noise to break ties (optional, but can help with exploration)
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    
    return priorities
```
