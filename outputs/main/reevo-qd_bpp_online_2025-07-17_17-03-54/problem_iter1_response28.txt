```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    # If no bin can fit the item, return an array of -inf (effectively reject all)
    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins based on remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[~feasible_bins] = -np.inf  # Disqualify infeasible bins

    # Score is higher when remaining_capacities is close to 0, 
    # but also penalize bins that are filled too much (avoid creating very full bins immediately).
    # Here is the formula used:
    # -abs(remaining_capacities) + K*(bins_remain_cap)
    # Note: K can be any values (such as 0 or 0.5 etc.).
    # If K is smaller, the main importance is to choose a near-full bin.
    # Otherwise, bins are less filled at start, which might be good at later iteration
    K = 0.5
    priorities[feasible_bins] = -np.abs(remaining_capacities[feasible_bins]) + K*bins_remain_cap[feasible_bins]


    #Add a small random component to break ties and explore different options
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.001

    return priorities
```
