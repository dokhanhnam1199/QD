```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item
            remaining_after_fit = cap - item
            
            #First-Fit Decreasing-esque : Try to fill each bin optimally.
            #Prioritize almost full bin. But penalize very tight fill to allow flexibility
            if remaining_after_fit > 0:
                priorities[i] = (item / cap) - 0.05*(remaining_after_fit/cap)
            else: #Exactly full
                priorities[i] = 1 #Very high priority to indicate a full bin

            #Additional heuristic to promote more balanced loading between bins
            #and reduce fragmentation: Use sqrt to emphasize closer fills rather than faraway ones
            priorities[i] = np.sqrt(priorities[i])

        else:
            # Set priority to a very low value (or negative) for bins that can't fit
            priorities[i] = -1e9 

    return priorities
```
