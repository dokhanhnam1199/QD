```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item perfectly or almost perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Very high priority for perfect fit

    # Give high priority to bins that have enough space, but not too much.
    # Prefer bins that have space for the item + a small buffer (e.g., 10% of the item size)
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1)
    priorities[almost_fit] = 500

    # Otherwise, prioritize bins with smaller remaining capacity but still enough for the item
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        priorities[valid_bins] = 1.0 / bins_remain_cap[valid_bins]

    # If no bin can fit the item, assign a small negative priority.  This effectively
    # means such a bin will only be chosen if we're forced to (e.g., a new bin needs to be started).
    priorities[bins_remain_cap < item] = -1

    return priorities
```
