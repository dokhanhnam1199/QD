```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspired
    # Prioritize bins where the item fits. If it doesn't fit give the bin a very low score

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            #Prioritize bins with smaller remaining capacity but enough for the item to fit.
            priorities[i] = (cap - item) # try to use close to full bins first (smallest diff)
            priorities[i] = 1 / (priorities[i] + 0.00001) # if exactly full use bin with cap==item first.
            
        else:
            priorities[i] = -1000 # very low score

    return priorities
```
