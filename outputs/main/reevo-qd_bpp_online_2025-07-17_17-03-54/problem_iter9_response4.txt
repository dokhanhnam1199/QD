```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf
    
    # 2. Remaining Capacity: Prefer bins with less remaining capacity *after* placing the item.  This encourages filling bins.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf # penalize infeasible bins severely
    
    priorities = -remaining_after_fit

    # 3. Utilization bonus, scaled and shifted to be small
    utilization = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap)
    priorities[feasible_bins] += 0.2 * utilization[feasible_bins]  # Encourage higher utilization
    
    # 4. Fragmentation penalty (try to avoid small remainders)
    fragmentation_penalty = np.abs(remaining_after_fit) #Penalize small remainder
    priorities[feasible_bins] -= 0.1 * fragmentation_penalty[feasible_bins] #Penalty scaling
    
    # 5. Introduce some randomness to avoid getting stuck
    priorities[feasible_bins] += 0.01 * np.random.rand(np.sum(feasible_bins))

    return priorities
```
