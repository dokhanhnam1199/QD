```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit?
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, assign minimal priority to all bins
        return priorities - np.inf

    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins severely

    priorities = -remaining_after_fit

    # 3. Utilization: Reward higher utilization. Avoid near-full bins with a non-linear penalty.
    utilization = (bins_remain_cap - remaining_after_fit) / np.max(bins_remain_cap)
    near_full_penalty = np.exp(10 * (utilization - 0.9))  # Exponential penalty for bins over 90% full. Adjust '10' and '0.9' as needed.

    priorities[feasible_bins] -= 0.05 * near_full_penalty[feasible_bins]  # Scale the penalty

    # 4. Introduce a bonus for bins that are relatively empty, encouraging their use before new bins
    empty_bin_bonus = np.exp(-bins_remain_cap / np.max(bins_remain_cap))
    priorities[feasible_bins] += 0.01 * empty_bin_bonus[feasible_bins]


    # 5. Randomness: Introduce a small amount of randomness to break ties.
    priorities[feasible_bins] += 0.001 * np.random.rand(np.sum(feasible_bins))

    return priorities
```
