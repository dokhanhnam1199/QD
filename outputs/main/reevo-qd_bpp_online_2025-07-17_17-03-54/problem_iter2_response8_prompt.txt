{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority for bins where the item fits almost perfectly\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1)  # Tolerate 10% overfill\n    priorities[almost_full] += 100\n\n    # High priority for bins that can accommodate the item\n    can_accommodate = bins_remain_cap >= item\n    priorities[can_accommodate] += (bins_remain_cap[can_accommodate] - item) / np.max(bins_remain_cap) # Smaller waste = high priority\n\n    # Slightly penalize bins with very high remaining capacity. Encourage filling up the bins.\n    large_capacity = bins_remain_cap > item * 2 # Twice item size\n    priorities[large_capacity] -= bins_remain_cap[large_capacity] / np.max(bins_remain_cap) * 0.1 # Slightly reduce priority of large capacity bins\n\n    # Assign very low priority to bins where the item cannot fit\n    cannot_accommodate = bins_remain_cap < item\n    priorities[cannot_accommodate] = -1000  # Or a very low negative value\n    \n    # Add small random noise to break ties (optional, but can help with exploration)\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n    \n    # Assign high priority if item fits and low otherwise\n    fits = waste >= 0\n    priorities[fits] = 1.0\n    \n    # Among bins where the item fits, prioritize bins with least waste\n    priorities[fits] = 1.0 / (waste[fits] + 1e-6) # adding small number to prevent division by zero\n    \n    #For bins that don't fit the item: zero or very negative values. This discourages from placing to those bins, although impossible\n    priorities[~fits] = -1000\n    \n    return priorities\n\n[Reflection]\nPrioritize least waste after fitting. Avoid complex, conflicting heuristics and favor simplicity and directness.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}