```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic-inspired priority: prioritize bins that can fit the item well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller waste is better

    # Prioritize bins with close to exact fit
    exact_fit_threshold = 0.05  # Define a threshold for "close to exact fit"
    close_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= exact_fit_threshold)
    priorities[close_fit_mask] += 10  # Boost priority for bins with almost exact fit

    # Penalize bins that would be filled over a certain threshold even after packing the item
    overfill_threshold = 0.95  # Define a threshold for the bin filling level
    filled_level = (bins_remain_cap - item)  # Remaining capacity after packing

    very_small_remaining = filled_level <=0
    priorities[very_small_remaining] = -np.inf # Do not want to pack there
    
    return priorities
```
