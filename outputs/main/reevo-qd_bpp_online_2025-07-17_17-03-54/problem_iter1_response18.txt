```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin.
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits and wasted space is minimized.
    for i in range(len(bins_remain_cap)):
        if wasted_space[i] >= 0:
            #Prioritize smaller waste, prefer bins where item fits tightly
            priorities[i] = 1.0 / (wasted_space[i] + 0.0001) # Adding a small value to avoid division by zero.

            #Consider item size relative to remaining capacity. Filling the bin near capacity is good
            priorities[i] += 1 / (1+abs(bins_remain_cap[i]-item)) #Prioritise small difference in value

        else:
            # Give very low priority to bins where the item doesn't fit.
            priorities[i] = -1000.0  # or some other very negative value

    return priorities
```
