```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using a combination of best fit and bin utilization.
    
    Prioritizes bins that (1) have the smallest remaining space after placement 
    and (2) are already more filled. This combines classic Best Fit with an 
    additional incentive to consolidate items into existing bins.
    """
    mask = bins_remain_cap >= item
    remaining_after = bins_remain_cap - item
    
    # Best Fit component: minimize remaining space after placement
    best_fit_score = -remaining_after  
    
    # Bin utilization component: prefer bins that were already more filled
    utilization = 1.0 - bins_remain_cap  
    utilization_score = utilization
    
    # Combine both components with equal weight
    priority = np.where(mask, best_fit_score + utilization_score, -np.inf)
    return priority
```
