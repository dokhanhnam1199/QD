```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using Best Fit strategy with negative remaining capacity heuristic.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    remaining_after = bins_remain_cap - item
    valid_mask = remaining_after >= 0
    # Use negative remaining after placement as priority (smaller remaining = higher priority)
    # Invalid bins get -inf to ensure they are not selected
    priority = np.where(valid_mask, -remaining_after, -np.inf)
    return priority
```
