```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a combination of 
    item utilization ratio and inverse leftover space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-8  # To prevent division by zero
    can_fit = bins_remain_cap >= item
    
    # Ratio of item size to bin's remaining capacity (higher = better fit)
    utilization_ratio = item / (bins_remain_cap + epsilon)
    
    # Inverse of leftover space after placement (higher = smaller leftover)
    leftover = bins_remain_cap - item
    inv_leftover = 1.0 / (leftover + 1.0)
    
    # Combine metrics and mask invalid bins
    priority = np.where(can_fit, utilization_ratio + inv_leftover, -np.inf)
    return priority
```
