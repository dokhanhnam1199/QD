```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function based on Best Fit heuristic with tie-breaking for online BPP.
    
    Assigns higher priority to bins that can fit the item with the smallest remaining capacity
    after placement, while incorporating a small penalty term to break ties in favor of bins
    with higher current utilization (lower remaining capacity).
    
    Args:
        item: Size of the item to pack.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    # Slack-based priority with tie-breaking: -(remaining_cap - item) + 1e-6 * (1 / (bins_remain_cap + 1e-6))
    slack = bins_remain_cap - item
    priority = np.where(can_fit, -slack + 1e-6 * (1 / (bins_remain_cap + 1e-6)), -np.inf)
    return priority
```
