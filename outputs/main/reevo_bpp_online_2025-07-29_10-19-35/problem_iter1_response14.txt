```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function based on a combination of best-fit and bin utilization improvement."""
    # Mask bins that can fit the item
    mask = bins_remain_cap >= item
    # Initialize priorities to -infinity for invalid bins
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    # Calculate remaining capacity after placing the item
    remaining_after = bins_remain_cap[mask] - item
    # Best Fit component: prioritize bins with least remaining after placement
    best_fit = -remaining_after
    # Utilization improvement: prioritize bins where item fills a higher ratio of their remaining space
    utilization_ratio = item / (bins_remain_cap[mask] + 1e-9)  # Avoid division by zero
    # Combine components with weights
    priority[mask] = 0.7 * best_fit + 0.3 * utilization_ratio
    return priority
```
