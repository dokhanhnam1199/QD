```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores based on minimizing remaining space after placement and tiebreaker for more filled bins.
    
    Combines best fit heuristic with a small penalty for bins that are less filled to improve tiebreaking.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    valid = bins_remain_cap >= item
    if np.any(valid):
        remaining_after = bins_remain_cap[valid] - item
        # Main term: -(remaining space after placement), Tiebreaker: -0.01 * current remaining capacity
        scores[valid] = -(remaining_after) - 0.01 * bins_remain_cap[valid]
    return scores
```
