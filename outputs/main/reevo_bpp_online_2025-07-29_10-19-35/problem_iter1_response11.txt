```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using a combination of tight-fit bonus and negative leftover."""
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        leftover = bins_remain_cap[can_fit] - item
        tight_bonus = 1000.0  # Large bonus to prioritize bins leaving tight space
        tight_mask = leftover < item
        # Base priority: negative leftover (smaller leftover is better)
        base_prio = -leftover
        # Add bonus for tight leftover
        base_prio += np.where(tight_mask, tight_bonus, 0)
        priorities[can_fit] = base_prio
    return priorities
```
