def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity and the item size, favoring bins that can accommodate the item with minimal wasted space, but also penalizing bins that are too close to full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      # Favor bins with minimal waste, but penalize near-full bins
      priority_score = 1 / (waste + 0.1) + (1 / (cap+0.01) if cap < (item * 1.5) else 0) # small offset for division by zero
    else:
      priority_score = -1000  # Very low priority if the item doesn't fit
    priority.append(priority_score)
  return priority
