def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the gap after placing the item, favoring bins with smaller gaps and sufficient capacity.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            gap = cap - item
            priority = 1 / (gap + 1)  # Smaller gap gets higher priority
            priorities.append(priority)
        else:
            priorities.append(0)  # Bin is not feasible
    return priority
