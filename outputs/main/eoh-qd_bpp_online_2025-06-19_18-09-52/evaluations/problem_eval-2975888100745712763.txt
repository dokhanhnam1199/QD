def priority_v2(item, bins_remain_cap):
    """{Assign a priority to each bin based on how closely the item size matches the bin's remaining capacity, favoring bins with remaining capacity slightly larger than the item size, while also penalizing bins that are too empty or too full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap < item:
            priority.append(-1)  # Item doesn't fit
        else:
            # Higher priority for bins slightly larger than the item
            diff = cap - item
            if diff == 0:
                priority.append(100) # perfect fit
            else:
                priority.append(100 / (diff + 1) - (cap * 0.1)) # prioritize nearly full but penalize very empty or very full
    return priority
