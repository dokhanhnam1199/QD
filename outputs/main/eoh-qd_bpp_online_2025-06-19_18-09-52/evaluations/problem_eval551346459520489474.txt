def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and wasted space, favoring bins that can accommodate the item with minimal wasted space and are relatively full.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Combine remaining capacity and wasted space into a priority score.
            # Prioritize bins with less wasted space and higher utilization.
            # Adding a small constant to the denominator to avoid division by zero.
            priority = (cap / (wasted_space + 0.001))
            priorities.append(priority)
        else:
            priorities.append(-1)  # Assign a low priority if the item doesn't fit
    return priority
