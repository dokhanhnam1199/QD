def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and item size, favoring bins that can accommodate the item with minimal wasted space and penalizing bins that are too full or too empty.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      priorities.append(1 / (cap - item + 0.0001))  # Favor smaller waste
    else:
      priorities.append(-1000 * (item-cap)) # Penalize insufficient capacity heavily
  return priority
