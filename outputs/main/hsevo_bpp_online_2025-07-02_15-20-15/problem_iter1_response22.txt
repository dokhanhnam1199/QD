```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item. If a bin cannot fit, the priority is zero
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1.0

    # Adjust priorities based on how well the item fits. Use a ratio of remaining capacity after fitting.
    remaining_capacity = bins_remain_cap[fit_indices] - item
    capacity_ratios = remaining_capacity / bins_remain_cap[fit_indices]

    # A smaller remaining capacity should give a higher priority. The most full-like bin is thus prioritized
    priorities[fit_indices] += (1.0 - capacity_ratios)**2  # Adding to the already existing '1'

    #Bonus for almost full bin. If the bin can take the new item almost perfectly without leaving any considerable space, prioritize it
    almost_full_indices = np.where((bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1*bins_remain_cap ))[0]
    priorities[almost_full_indices]+=1.0 #Bonus Score

    return priorities
```
