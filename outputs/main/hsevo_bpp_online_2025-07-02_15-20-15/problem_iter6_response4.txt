```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasibility check: essential, non-negotiable
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    # Feasible bins: prioritize based on fill ratio, with exponential decay penalty for remaining capacity
    feasible = item <= bins_remain_cap
    remaining_capacity_after_placement = bins_remain_cap[feasible] - item
    
    # Fill ratio: the closer to full, the higher the ratio, the better
    fill_ratio = item / (bins_remain_cap[feasible] + 1e-9)  # Avoid division by zero
    
    # Exponential decay penalty: large remaining capacity is heavily penalized
    capacity_penalty = np.exp(-5 * remaining_capacity_after_placement / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 1
    
    priorities[feasible] = fill_ratio * capacity_penalty
        
    # If no feasible bins are available, penalize lower indices to encourage using new bins.
    if not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap))
        
    return priorities
```
