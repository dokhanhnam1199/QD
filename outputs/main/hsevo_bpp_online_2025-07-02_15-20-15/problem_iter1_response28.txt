```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Avoid fragmentation by prioritizing bins that can fit the item snugly.
    # Heuristic 2: Use a combination of remaining capacity and item size to calculate score.
    # Heuristic 3: Prefer bins that are relatively full to avoid leaving too much empty space
    # after placing the current item.

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: Higher remaining capacity implies potentially better fit (less waste).
            priorities[i] = cap

            # Adjust for 'snugness': Smaller remaining space *after* packing increases the score
            remaining_after_pack = cap - item
            priorities[i] += 1.0 / (remaining_after_pack + 0.0001)  # Avoid division by zero

            # Scale the score by how full the bin currently is.
            current_fullness = 1.0 - (cap / (cap + item)) # Approximation
            priorities[i] += current_fullness
        else:
            priorities[i] = -np.inf  # Item doesn't fit: Lowest priority

    return priorities
```
