```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a -inf priority.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Feasible bins get a priority based on remaining capacity, exponentially decayed.
    feasible = item <= bins_remain_cap
    remaining_capacity = bins_remain_cap[feasible]
    
    # Exponential decay focuses on tighter fits.  Scale the remaining capacity.
    scale = np.max(bins_remain_cap)
    if scale > 0:
        priorities[feasible] = np.exp(-5 * remaining_capacity / scale)
    else:
        priorities[feasible] = 1.0  # All bins are empty, treat equally.

    # If no bin is feasible, penalize earlier bins slightly, encouraging use of new bins later in the list.
    if not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap) # normalized penalty

    return priorities
```
