```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fill ratio and remaining capacity, favoring nearly-full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        fill_ratio = item / bins_remain_cap[feasible]
        max_cap = np.max(bins_remain_cap)
        normalized_remaining_capacity = bins_remain_cap[feasible] / max_cap if max_cap > 0 else 0
        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)
        waste = bins_remain_cap[feasible] - item
        near_full = (waste > 0) & (waste < 0.1 * max_cap)
        priorities[feasible][near_full] += 0.2
    return priorities
```
