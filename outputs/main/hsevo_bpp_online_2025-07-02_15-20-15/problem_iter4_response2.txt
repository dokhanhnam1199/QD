import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fill_ratio_weight: float = 7.382532894501612, nearly_full_threshold: float = 0.16784443972793073, nearly_full_penalty: float = 10.390232186742661, same_size_reward: float = 22.996885136160213, capacity_reward_factor: float = 0.009834922808730537) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, and penalizes nearly full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap - item
    priorities[valid_bins] = -waste[valid_bins]
    fill_ratios = item / bins_remain_cap
    priorities[valid_bins] += fill_ratio_weight * fill_ratios[valid_bins]
    nearly_full = (waste > 0) & (waste < nearly_full_threshold * bins_remain_cap)
    priorities[nearly_full] -= nearly_full_penalty
    same_size = np.isclose(bins_remain_cap, item)
    priorities[same_size] += same_size_reward
    priorities[valid_bins] += capacity_reward_factor * bins_remain_cap[valid_bins]

    return priorities
