```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bin handling:  Eliminate these immediately.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    feasible = item <= bins_remain_cap
    
    if np.any(feasible):
        # Normalize remaining capacity by bin size.  This lets us compare across potentially varying bin sizes.
        remaining_capacity = bins_remain_cap[feasible]
        normalized_remaining = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 # prevent divide by zero

        # Prioritize bins with a fill ratio closest to 1 after adding the item.
        fill_ratio_after = (bins_remain_cap[feasible] - item) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        
        # Prioritize bins based on tightness of fit. exp gives non-linear scaling
        priorities[feasible] = np.exp(-5 * np.abs(fill_ratio_after))

    else:
        # No feasible bins:  Prioritize adding to bins with the smallest remaining capacity.

        priorities = -bins_remain_cap  # Prefer bins that were nearly full already

    return priorities
```
