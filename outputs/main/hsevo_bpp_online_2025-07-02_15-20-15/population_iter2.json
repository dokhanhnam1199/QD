[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio after placing item, \n    bonus for partially filled bins, and remaining capacity tie-breaker.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Remaining capacities after placing item (inf for infeasible bins)\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[infeasible_bins] = np.inf\n\n    # Fill ratios after placing item\n    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))\n    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]\n\n    # Bonus for partially filled bins\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled & ~infeasible_bins] += 0.1\n\n    # Tie-breaker: prioritize smaller remaining capacity\n    priorities[~infeasible_bins] -= 0.0001 * remaining_capacities[~infeasible_bins]\n    \n    #Add small penalty for bins almost full after placement, encourage other bins.\n    almost_full = remaining_capacities < 0.1\n    priorities[almost_full & ~infeasible_bins] -= 0.2\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.956122856003196,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio after placing the item and bonuses.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[infeasible_bins] = np.inf\n\n    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))\n    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]\n\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled & ~infeasible_bins] += 0.1\n\n    near_full_mask = (remaining_capacities > 0) & (remaining_capacities < 0.1* np.max(bins_remain_cap))\n    priorities[near_full_mask] -= 0.2\n\n    substantial_remain_mask = (remaining_capacities >= 0.3* np.max(bins_remain_cap))\n    priorities[substantial_remain_mask] += 0.1\n    \n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.646988432389324,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates priority scores for bins based on remaining capacity and fill ratio.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        remaining_capacities = bins_remain_cap[feasible_bins] - item\n        fill_ratio = (bins_remain_cap[feasible_bins] - remaining_capacities) / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratio / (remaining_capacities + 1e-9) #Balance filling and min waste\n        almost_full_threshold = 0.1\n        almost_full = remaining_capacities / bins_remain_cap[feasible_bins] < almost_full_threshold\n        priorities[feasible_bins][almost_full] *= 1.5 #Boost almost full\n    else:\n        priorities = -1 / (bins_remain_cap + 1e-9)  # Penalize infeasible bins\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 15, in priority_v2\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)\nnumpy._core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'multiply' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n"
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins, favoring tighter fits and filling existing bins. Combines aspects of v0 and v1.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_indices = np.where(bins_remain_cap >= item)[0]\n\n    if len(fit_indices) > 0:\n        wasted_space = bins_remain_cap[fit_indices] - item\n        fill_ratio_if_added = (bins_remain_cap[fit_indices] - wasted_space) / bins_remain_cap[fit_indices]\n        priorities[fit_indices] = (1 / (wasted_space + 1e-9)) + fill_ratio_if_added\n\n        # Encourage filling existing bins (v1-inspired)\n        normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)\n        priorities[fit_indices] += 0.1 * normalized_capacity[fit_indices] # Add capacity to the correct indices.\n\n    else:\n        priorities = -np.inf * np.ones_like(bins_remain_cap, dtype=float)\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill ratio, and avoids nearly full bins.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap - item\n    priorities[valid_bins] = -waste[valid_bins]\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] += 5 * fill_ratios[valid_bins]\n\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] -= 10\n\n    same_size = np.isclose(bins_remain_cap, item)\n    priorities[same_size] += 20\n    \n    priorities[valid_bins] += 0.01 * bins_remain_cap[valid_bins]\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.417630634224167,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Calculate remaining capacity if item is added\n    remaining_after_add = bins_remain_cap - item\n\n    # Fill ratio for feasible bins\n    feasible_mask = bins_remain_cap >= item\n    fill_ratios = item / bins_remain_cap[feasible_mask]\n    priorities[feasible_mask] = fill_ratios\n\n    # Boost bins with substantial remaining capacity, but not too much\n    substantial_remain_mask = (remaining_after_add >= 0.2) & (bins_remain_cap >= item)\n    priorities[substantial_remain_mask] += 0.1\n\n    # Moderate penalty for nearly full bins\n    near_full_mask = (remaining_after_add > 0) & (remaining_after_add < 0.1) & (bins_remain_cap >= item)\n    priorities[near_full_mask] -= 0.2\n\n    # Add a small random number to break ties\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.457518946948548,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill ratio, and penalizes nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap - item\n    priorities[valid_bins] = -waste[valid_bins]\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] += 5 * fill_ratios[valid_bins]\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] -= 10\n    same_size = np.isclose(bins_remain_cap, item)\n    priorities[same_size] += 20\n    priorities[valid_bins] += 0.01 * bins_remain_cap[valid_bins]\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.417630634224167,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and almost-full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        remaining_capacities = bins_remain_cap[feasible_bins] - item\n        capacity_ratios = remaining_capacities / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = (1.0 - capacity_ratios)**2 #Prioritize full bins\n        almost_full_indices = np.where(remaining_capacities / bins_remain_cap[feasible_bins] <= 0.1)[0]\n        priorities[feasible_bins][almost_full_indices]+=1.0 #Bonus\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill ratio and remaining capacity for priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities - np.inf\n\n    waste = bins_remain_cap - item\n    priorities[valid_bins] = -waste[valid_bins]\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] += 5 * fill_ratios[valid_bins]\n\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] -= 10\n\n    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)\n    priorities += 0.1*normalized_capacity\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.387714399680894,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio after placement and partially-filled bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate remaining capacity after placing the item.\n    remaining_capacity = bins_remain_cap - item\n    \n    # Calculate fill ratio, prioritizing smaller remaining capacity\n    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap\n    fill_ratio[bins_remain_cap < item] = -np.inf\n    priorities += fill_ratio #Scale this effect down.\n    \n    #Bonus to bins that are not empty already:\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled] += 0.1 #Scale this effect down.\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]