[
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: tight fit, fill ratio, infeasibility handling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits and fill ratio with exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.01 # add small noise\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 79.59712804148386,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit and normalized capacity for online bin packing.\n    Prioritizes tighter fits in bins with smaller remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Normalize remaining capacity to [0, 1]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        # Tight-fit component.  Higher is better\n        fit_score = 1.0 / (remaining_capacity - item + 0.001)\n\n        # Combine components, emphasizing tight fit.\n        priorities[feasible] = fit_score + 0.5 * normalized_capacity + np.random.rand(np.sum(feasible)) * 0.01\n    else:\n        # Prioritize bins with more capacity if no feasible bin.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 81.5117670522537,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001) #avoid zero division.\n        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio + np.random.rand(np.sum(feasible)) * 0.001\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines tight fit, fill ratio, and normalized capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        priorities[feasible] = (0.4 * fit_priority +\n                                 0.4 * fill_ratio +\n                                 0.2 * normalized_capacity +\n                                 np.random.rand(np.sum(feasible)) * 0.01)\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 84.97207818109295,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response5.txt_stdout.txt",
    "code_path": "problem_iter23_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits using normalized remain capacity & fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit = remaining_capacity - item\n        normalized_fit = 1.0 / (fit / np.max(bins_remain_cap) + 0.001)\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        priorities[feasible] = normalized_fit * 0.7 + fill_ratio * 0.3\n        priorities[feasible] += np.random.rand(len(remaining_capacity)) * 0.01\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response6.txt_stdout.txt",
    "code_path": "problem_iter23_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using tight-fit, fill ratio, and random noise.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        tight_fit_weight = 0.7\n        fill_ratio_weight = 0.3\n        small_number = 0.0001\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n    else:\n        random_priority_scale = 0.0001\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response7.txt_stdout.txt",
    "code_path": "problem_iter23_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio = np.clip(fill_ratio, 0, 1)\n        priorities[feasible] = normalized_capacity + fill_ratio * 0.5 + np.random.rand(np.sum(feasible)) * 0.01\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 149.30195452732352,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response8.txt_stdout.txt",
    "code_path": "problem_iter23_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit, fill ratio, and normalized capacity with exploration.\n    Prioritizes tighter fits, higher fill ratios, and larger bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)\n\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        capacity_weight = 0.2\n        fit_weight = 0.6\n        fill_weight = 0.2\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 82.87794176306345,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response9.txt_stdout.txt",
    "code_path": "problem_iter23_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio, with tuned weights.\"\"\"\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 0.1\n    small_number = 0.001\n    random_priority_scale = 0.0001\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response0.txt_stdout.txt",
    "code_path": "problem_iter24_code0.py",
    "code": "import numpy as np\n\nsmall_number = 1e-6\ntight_fit_weight = 1.0\nfill_ratio_weight = 1.0\nrandom_priority_scale = 0.01\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on a combination of factors, including remaining capacity,\n    fill ratio, and a bin utilization target. Also adds a small penalty for bins that are very empty.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Tight-fit prioritization\n        tight_fit_score = tight_fit_weight / (np.abs(remaining_capacity - item) + small_number)\n\n        # Fill ratio prioritization, with emphasis on better utilization\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio_score = fill_ratio_weight * (1 - fill_ratio) # Prefer higher fill ratios\n        \n        # Introduce bin utilization target.  Let's say we want bins to be around 75% full on average.\n        target_utilization = 0.75\n        bin_size = 1.0  # Assuming bins have size 1\n        target_remaining = bin_size * (1 - target_utilization)\n        utilization_score = -np.abs(remaining_capacity - target_remaining)\n\n        # Small penalty for almost empty bins. This encourages using already partially filled bins.\n        empty_bin_penalty = -np.exp(-remaining_capacity * 10) # Exponential penalty\n\n        priorities[feasible] = tight_fit_score + fill_ratio_score + utilization_score + empty_bin_penalty\n\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response1.txt_stdout.txt",
    "code_path": "problem_iter24_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6  # To avoid division by zero\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 1.0\n    capacity_penalty_weight = 0.5\n    random_priority_scale = 0.01\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        # Prioritize bins that result in higher fill ratios\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.\n        wasted_capacity = remaining_capacity - item\n        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize\n        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 1.5057838053450363,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on a combination of factors, including:\n    - Remaining capacity (to avoid fragmentation)\n    - Fill ratio (to pack efficiently)\n    - A \"best fit\" score to encourage tight packing\n    - Randomization for exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 1.0\n    capacity_weight = 1.0\n    random_priority_scale = 0.01\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        \n        # Fill ratio: how full the bin will be *after* packing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Tight-fit score: penalizes bins with much larger capacity than the item\n        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number)) # Gaussian-like score\n\n        # Capacity score: Prefer bins with smaller remaining capacity (avoid fragmentation)\n        capacity_score = 1.0 / (remaining_capacity + small_number)\n        \n        priorities[feasible] = (\n            tight_fit_weight * tight_fit_score +\n            fill_ratio_weight * fill_ratio +\n            capacity_weight * capacity_score\n        )\n    else:\n        # If no feasible bins, add a small random value to allow a \"fresh start\"\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on a combination of factors, with added exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component (minimize wasted space)\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)  # Exponential decay for tight fit\n\n        # Fill-ratio component (maximize bin utilization)\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2 # Use square to strongly prefer higher fill ratios.\n\n        # Balance remaining capacity (avoid bins becoming too small)\n        capacity_balance = remaining_capacity / np.max(bins_remain_cap)\n        capacity_balance_priority = capacity_balance  # Linear balance\n\n        # Combine the priorities\n        priorities[feasible] = (\n            10 * tight_fit_priority + # Increased importance of tight fit\n            fill_ratio_priority +\n            0.5 * capacity_balance_priority # Moderate importance of capacity balance\n        )\n    else:\n        # If no feasible bin, add some randomness for exploration to avoid getting stuck\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.1 # Reduced randomness scale\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 3.948942959712818,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response4.txt_stdout.txt",
    "code_path": "problem_iter24_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering multiple factors: tight-fit, fill ratio, and bin utilization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6  # Avoid division by zero and stabilize calculations\n    tight_fit_weight = 10.0\n    fill_ratio_weight = 5.0\n    utilization_weight = 2.0\n    random_priority_scale = 0.1\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        space_waste = remaining_capacity - item\n        \n        # Tight-fit component: prioritize bins where the item fits snugly\n        tight_fit_priority = tight_fit_weight / (space_waste + small_number)\n        \n        # Fill ratio component: prioritize bins that will be filled well\n        fill_ratio = (item) / (bins_remain_cap[feasible] + small_number)\n        fill_ratio_priority = fill_ratio * fill_ratio_weight\n\n        # Bin utilization component: Prioritize bins that are already relatively full\n        bin_utilization = (1 - remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0 # Scale between 0 and 1\n        bin_utilization_priority = bin_utilization * utilization_weight\n\n        priorities[feasible] = tight_fit_priority + fill_ratio_priority + bin_utilization_priority\n\n    else:\n        # If no feasible bin is found, add some noise to the priorities to encourage exploration.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]