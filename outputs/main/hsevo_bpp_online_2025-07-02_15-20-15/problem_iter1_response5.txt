```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item with minimal wasted space,
    but also introduces a small preference for using already partially filled bins
    to consolidate items and reduce the overall number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins where the item fits without excessive wasted space.
    # We'll use a capped inverse of the wasted space.  Bins that cannot fit the item receive a priority of -np.inf
    wasted_space = bins_remain_cap - item
    priorities = np.where(wasted_space >= 0, np.clip(1.0 / (1e-6 + wasted_space), 0, 100), -np.inf) #Small number avoids divide by 0. clip avoids extreme scores
    
    # Add a small bonus for bins that are already partially filled. This encourages filling bins that have been used before.
    # The more filled a bin is, the slightly higher the bonus it gets. We are scaling remaining capacity now
    partially_filled_bonus = (1 - (bins_remain_cap / bins_remain_cap.max())) * 0.1 #Avoids filling very full bins when it isn't a very good fit.
    priorities = priorities + partially_filled_bonus
    return priorities
```
