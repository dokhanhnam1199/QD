```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic: Combines normalized remaining capacity, fill ratio,
    and a controlled exploration factor. Addresses edge cases explicitly.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins with a very low priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate priorities for feasible bins
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Normalize remaining capacity to [0, 1]
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)
        
        # Fill ratio calculation
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        fill_ratio = np.clip(fill_ratio, 0, 1)  # Ensure fill_ratio is within [0, 1]

        # Core priority calculation: Normalized capacity + Fill Ratio + Exploration
        priorities[feasible] = normalized_capacity + fill_ratio * 0.5 + np.random.rand(np.sum(feasible)) * 0.01
    else:
        # If no feasible bin, explore with a small random value
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001
    

    return priorities
```
