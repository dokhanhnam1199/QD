{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_number: float = 1.922498994168634e-06, tight_fit_weight: float = 0.45835312430624553,\n                fill_ratio_weight: float = 0.7271042568122124, capacity_penalty_weight: float = 0.38963480299290126, random_priority_scale: float = 0.014671592009535394) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        # Prioritize bins that result in higher fill ratios\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.\n        wasted_capacity = remaining_capacity - item\n        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize\n        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_number: float = 1.922498994168634e-06, tight_fit_weight: float = 0.45835312430624553,\n                fill_ratio_weight: float = 0.7271042568122124, capacity_penalty_weight: float = 0.38963480299290126, random_priority_scale: float = 0.014671592009535394) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        # Prioritize bins that result in higher fill ratios\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.\n        wasted_capacity = remaining_capacity - item\n        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize\n        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_number: float = 1.922498994168634e-06, tight_fit_weight: float = 0.45835312430624553,\n                fill_ratio_weight: float = 0.7271042568122124, capacity_penalty_weight: float = 0.38963480299290126, random_priority_scale: float = 0.014671592009535394) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        # Prioritize bins that result in higher fill ratios\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.\n        wasted_capacity = remaining_capacity - item\n        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize\n        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on a combination of factors, with added exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component (minimize wasted space)\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)  # Exponential decay for tight fit\n\n        # Fill-ratio component (maximize bin utilization)\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2 # Use square to strongly prefer higher fill ratios.\n\n        # Balance remaining capacity (avoid bins becoming too small)\n        capacity_balance = remaining_capacity / np.max(bins_remain_cap)\n        capacity_balance_priority = capacity_balance  # Linear balance\n\n        # Combine the priorities\n        priorities[feasible] = (\n            10 * tight_fit_priority + # Increased importance of tight fit\n            fill_ratio_priority +\n            0.5 * capacity_balance_priority # Moderate importance of capacity balance\n        )\n    else:\n        # If no feasible bin, add some randomness for exploration to avoid getting stuck\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.1 # Reduced randomness scale\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on a combination of factors, with added exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component (minimize wasted space)\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)  # Exponential decay for tight fit\n\n        # Fill-ratio component (maximize bin utilization)\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2 # Use square to strongly prefer higher fill ratios.\n\n        # Balance remaining capacity (avoid bins becoming too small)\n        capacity_balance = remaining_capacity / np.max(bins_remain_cap)\n        capacity_balance_priority = capacity_balance  # Linear balance\n\n        # Combine the priorities\n        priorities[feasible] = (\n            10 * tight_fit_priority + # Increased importance of tight fit\n            fill_ratio_priority +\n            0.5 * capacity_balance_priority # Moderate importance of capacity balance\n        )\n    else:\n        # If no feasible bin, add some randomness for exploration to avoid getting stuck\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.1 # Reduced randomness scale\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on a combination of factors, with added exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component (minimize wasted space)\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)  # Exponential decay for tight fit\n\n        # Fill-ratio component (maximize bin utilization)\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2 # Use square to strongly prefer higher fill ratios.\n\n        # Balance remaining capacity (avoid bins becoming too small)\n        capacity_balance = remaining_capacity / np.max(bins_remain_cap)\n        capacity_balance_priority = capacity_balance  # Linear balance\n\n        # Combine the priorities\n        priorities[feasible] = (\n            10 * tight_fit_priority + # Increased importance of tight fit\n            fill_ratio_priority +\n            0.5 * capacity_balance_priority # Moderate importance of capacity balance\n        )\n    else:\n        # If no feasible bin, add some randomness for exploration to avoid getting stuck\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.1 # Reduced randomness scale\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on a combination of factors, including:\n    - Remaining capacity (to avoid fragmentation)\n    - Fill ratio (to pack efficiently)\n    - A \"best fit\" score to encourage tight packing\n    - Randomization for exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 1.0\n    capacity_weight = 1.0\n    random_priority_scale = 0.01\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        \n        # Fill ratio: how full the bin will be *after* packing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Tight-fit score: penalizes bins with much larger capacity than the item\n        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number)) # Gaussian-like score\n\n        # Capacity score: Prefer bins with smaller remaining capacity (avoid fragmentation)\n        capacity_score = 1.0 / (remaining_capacity + small_number)\n        \n        priorities[feasible] = (\n            tight_fit_weight * tight_fit_score +\n            fill_ratio_weight * fill_ratio +\n            capacity_weight * capacity_score\n        )\n    else:\n        # If no feasible bins, add a small random value to allow a \"fresh start\"\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on a combination of factors, including:\n    - Remaining capacity (to avoid fragmentation)\n    - Fill ratio (to pack efficiently)\n    - A \"best fit\" score to encourage tight packing\n    - Randomization for exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 1.0\n    capacity_weight = 1.0\n    random_priority_scale = 0.01\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        \n        # Fill ratio: how full the bin will be *after* packing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Tight-fit score: penalizes bins with much larger capacity than the item\n        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number)) # Gaussian-like score\n\n        # Capacity score: Prefer bins with smaller remaining capacity (avoid fragmentation)\n        capacity_score = 1.0 / (remaining_capacity + small_number)\n        \n        priorities[feasible] = (\n            tight_fit_weight * tight_fit_score +\n            fill_ratio_weight * fill_ratio +\n            capacity_weight * capacity_score\n        )\n    else:\n        # If no feasible bins, add a small random value to allow a \"fresh start\"\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on a combination of factors, including:\n    - Remaining capacity (to avoid fragmentation)\n    - Fill ratio (to pack efficiently)\n    - A \"best fit\" score to encourage tight packing\n    - Randomization for exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 1.0\n    capacity_weight = 1.0\n    random_priority_scale = 0.01\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        \n        # Fill ratio: how full the bin will be *after* packing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Tight-fit score: penalizes bins with much larger capacity than the item\n        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number)) # Gaussian-like score\n\n        # Capacity score: Prefer bins with smaller remaining capacity (avoid fragmentation)\n        capacity_score = 1.0 / (remaining_capacity + small_number)\n        \n        priorities[feasible] = (\n            tight_fit_weight * tight_fit_score +\n            fill_ratio_weight * fill_ratio +\n            capacity_weight * capacity_score\n        )\n    else:\n        # If no feasible bins, add a small random value to allow a \"fresh start\"\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits using normalized remain capacity & fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit = remaining_capacity - item\n        normalized_fit = 1.0 / (fit / np.max(bins_remain_cap) + 0.001)\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        priorities[feasible] = normalized_fit * 0.7 + fill_ratio * 0.3\n        priorities[feasible] += np.random.rand(len(remaining_capacity)) * 0.01\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: tight fit, fill ratio, infeasibility handling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001) #avoid zero division.\n        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio + np.random.rand(np.sum(feasible)) * 0.001\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001) #avoid zero division.\n        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio + np.random.rand(np.sum(feasible)) * 0.001\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001) #avoid zero division.\n        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio + np.random.rand(np.sum(feasible)) * 0.001\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit, fill ratio, and normalized capacity with exploration.\n    Prioritizes tighter fits, higher fill ratios, and larger bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)\n\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        capacity_weight = 0.2\n        fit_weight = 0.6\n        fill_weight = 0.2\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit, fill ratio, and normalized capacity with exploration.\n    Prioritizes tighter fits, higher fill ratios, and larger bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)\n\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        capacity_weight = 0.2\n        fit_weight = 0.6\n        fill_weight = 0.2\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit, fill ratio, and normalized capacity with exploration.\n    Prioritizes tighter fits, higher fill ratios, and larger bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)\n\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        capacity_weight = 0.2\n        fit_weight = 0.6\n        fill_weight = 0.2\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines tight fit, fill ratio, and normalized capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        priorities[feasible] = (0.4 * fit_priority +\n                                 0.4 * fill_ratio +\n                                 0.2 * normalized_capacity +\n                                 np.random.rand(np.sum(feasible)) * 0.01)\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines tight fit, fill ratio, and normalized capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        priorities[feasible] = (0.4 * fit_priority +\n                                 0.4 * fill_ratio +\n                                 0.2 * normalized_capacity +\n                                 np.random.rand(np.sum(feasible)) * 0.01)\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio = np.clip(fill_ratio, 0, 1)\n        priorities[feasible] = normalized_capacity + fill_ratio * 0.5 + np.random.rand(np.sum(feasible)) * 0.01\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}