```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Only consider bins that can actually hold the item.
    valid_bins = bins_remain_cap >= item

    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        # 1. Fill as much as possible
        fill_ratios = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] = fill_ratios

        # 2. Avoid fragmentation, prioritize bins that fill nearly completely.
        # Use a Gaussian-like kernel centered around perfect fit.
        ideal_fill_ratio = 1.0  # perfect fit
        std_dev = 0.1  # adjust for sensitivity

        fit_gaussian = np.exp(-((fill_ratios - ideal_fill_ratio) ** 2) / (2 * std_dev**2))
        priorities[valid_bins] += 2.0 * fit_gaussian  # Add more weights for near perfect fits
        
        # 3. Try to maximize the remaining space to leave space for next big item.
        remaining_space = bins_remain_cap[valid_bins] - item
        # if there is at least one feasible bins
        priorities[valid_bins] += 0.5 * (remaining_space / np.max(bins_remain_cap))


    # Penalize bins that are not valid.  This helps prevent overflow / errors
    priorities[~valid_bins] = -np.inf

    return priorities
```
