```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: feasibility, fill ratio, exponential decay, nearly full bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        max_capacity = np.max(bins_remain_cap)
        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0
        priorities[feasible] = (item / bins_remain_cap[feasible]) * np.exp(-5 * normalized_remaining_capacity)

        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)
        priorities[feasible][near_full_mask] += 0.1 #small bonus
    else:
        priorities = -np.arange(len(bins_remain_cap))

    return priorities
```
