```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tight fits with fill ratio and controlled randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    feasible = ~infeasible

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1

        # Boost partially full bins with small noise
        waste = bins_remain_cap[feasible] - item
        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible])
        if np.any(partially_full):
            priorities[feasible][partially_full] += np.random.normal(0, 0.01, size=np.sum(partially_full))
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
