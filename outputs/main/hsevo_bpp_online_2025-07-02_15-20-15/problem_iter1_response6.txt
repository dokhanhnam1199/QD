```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, consider bins where the item fits.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    
    if len(fit_indices) > 0:
        # Try to minimize wasted space, while favoring fuller bins.
        # Calculate wasted space for each bin where the item fits.
        wasted_space = bins_remain_cap[fit_indices] - item
        
        #Prioritize bins based on: 1/wasted_space + fill ratio if item is added
        fill_ratio_if_added = (bins_remain_cap[fit_indices] - wasted_space) / (bins_remain_cap[fit_indices] + item - wasted_space)
        priorities[fit_indices] = (1 / (wasted_space + 1e-9)) + fill_ratio_if_added #add small number to avoid division by 0

    # For bins where the item doesn't fit, assign a very low priority.
    else:
      priorities = -np.inf * np.ones_like(bins_remain_cap, dtype=float)


    return priorities
```
