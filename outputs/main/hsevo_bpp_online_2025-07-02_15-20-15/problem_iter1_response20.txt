```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Disqualify bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # 2. Remaining capacity after placing the item
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[infeasible_bins] = np.inf  # Avoid errors from infeasible bins.

    # 3. Prioritize bins based on fill ratio *after* placing the item. Higher fill ratio is better, but avoid overfilling
    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]
    
    # 4. Add a small bonus for bins that were already partially filled, so we dont start new bins unnecessarily
    already_filled = bins_remain_cap < np.max(bins_remain_cap)
    priorities[already_filled & ~infeasible_bins] += 0.1

    #5. If two bins are equal in fill ratio after the addition of an item prioritize the one with smallest remaining capacity
    priorities[~infeasible_bins] -= 0.0001 * remaining_capacities[~infeasible_bins]

    return priorities
```
