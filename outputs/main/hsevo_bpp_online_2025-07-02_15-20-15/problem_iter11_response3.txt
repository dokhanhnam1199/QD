```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and remaining capacity,
    with bonus for nearly full bins and fallback strategy.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratios = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        scale = np.max(bins_remain_cap)
        
        if scale > 0:
            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)
        else:
            priorities[feasible] = fill_ratios

        waste = bins_remain_cap - item
        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)
        priorities[nearly_full] += 0.5
    else:
        priorities = -bins_remain_cap

    return priorities
```
