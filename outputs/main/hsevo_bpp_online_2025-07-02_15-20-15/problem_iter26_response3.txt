```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tight-fit and fill ratio, with exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tight-fit component (minimize wasted space)
        tight_fit = remaining_capacity - item
        tight_fit_priority = np.exp(-tight_fit)

        # Fill-ratio component (maximize bin utilization)
        fill_ratio = item / remaining_capacity
        fill_ratio_priority = fill_ratio**2

        # Combine priorities with weights
        priorities[feasible] = (
            10 * tight_fit_priority +
            fill_ratio_priority
        )
    else:
        # Exploration when no feasible bin is found
        priorities = np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
