```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.  Inspired by energy minimization and probabilities.

    This version attempts to mimic a simulated annealing or quantum annealing process, where better fits are
    preferred with higher probability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Bins that cannot accommodate the item get a very low priority
    wasted_space[wasted_space < 0] = np.inf  #effectively exclude these

    # Scale the wasted space to a reasonable range. Adding a small value to avoid zero division
    scaled_wasted_space = wasted_space / (np.max(bins_remain_cap) + 1e-9)  #normalized

    #Convert 'energy' to 'probability'-like measure, and normalize:
    priorities = np.exp(-scaled_wasted_space)

    # Normalize priorities to ensure sum is 1 (optional, but can be helpful)
    priorities = priorities / np.sum(priorities)  #or just normalize to [0,1] by dividing by max(priorities)

    # Small constant to prefer bins with some remaining capacity (exploration):
    priorities += 1e-6 * bins_remain_cap/np.max(bins_remain_cap)
    return priorities
```
