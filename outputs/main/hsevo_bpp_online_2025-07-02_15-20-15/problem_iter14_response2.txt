```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on feasibility, fill ratio, and encourages new bins if needed."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        priorities[feasible] = item / bins_remain_cap[feasible] # reciprocal of remain_cap

        remaining_capacity = bins_remain_cap[feasible] - item
        max_capacity = np.max(bins_remain_cap)
        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)
        priorities[feasible][near_full_mask] += 0.1
    else:
        priorities = np.random.rand(len(bins_remain_cap)) / 1000 - bins_remain_cap/ np.max(bins_remain_cap)
    return priorities
```
