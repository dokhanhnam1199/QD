{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio after placement and partially-filled bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate remaining capacity after placing the item.\n    remaining_capacity = bins_remain_cap - item\n    \n    # Calculate fill ratio, prioritizing smaller remaining capacity\n    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap\n    fill_ratio[bins_remain_cap < item] = -np.inf\n    priorities += fill_ratio #Scale this effect down.\n    \n    #Bonus to bins that are not empty already:\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled] += 0.1 #Scale this effect down.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio after placing item, \n    bonus for partially filled bins, and remaining capacity tie-breaker.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Remaining capacities after placing item (inf for infeasible bins)\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[infeasible_bins] = np.inf\n\n    # Fill ratios after placing item\n    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))\n    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]\n\n    # Bonus for partially filled bins\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled & ~infeasible_bins] += 0.1\n\n    # Tie-breaker: prioritize smaller remaining capacity\n    priorities[~infeasible_bins] -= 0.0001 * remaining_capacities[~infeasible_bins]\n    \n    #Add small penalty for bins almost full after placement, encourage other bins.\n    almost_full = remaining_capacities < 0.1\n    priorities[almost_full & ~infeasible_bins] -= 0.2\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses only exponential decay on remaining capacity while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space. The best gives -inf priority to infeasible bins while the worst gives -np.arange(len(bins_remain_cap)).\nComparing (2nd) vs (19th), the second-best heuristic combines fill ratio with exponential decay and adds a bonus for bins close to full, while the second worst prioritizes utilization scores and fit scores, penalizing bins with too much remaining capacity.\nComparing (1st) vs (2nd), we see that the best uses exponential decay while the second best uses `fill_ratio * np.exp()`. Also, the second best introduces small bonus for bins that are close to full after placement.\nComparing (3rd) vs (4th), we see these two are the same.\nComparing (second worst) vs (worst), we see the second worst uses same logic with the best while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space.\n\nOverall:\nThe better heuristics prioritize a tighter fit, often using exponential decay on the remaining capacity, and handle infeasible bins by assigning a very low priority (-np.inf). They tend to avoid complex combinations of factors. Simplicity in the combination of factors seems to be favored.\n- \nOkay, let's refine the concept of \"Current Self-Reflection\" for designing better heuristics, specifically avoiding the pitfalls of \"Ineffective Self-Reflection\". We aim for concise, impactful insights.\n\nHere's a refined definition:\n\n*   **Keywords:** Parsimony, core factors, feasibility, decay.\n*   **Advice:** Focus on fundamental drivers (e.g., fill ratio with exponential capacity decay penalty). Prioritize feasibility; immediately invalidate infeasible moves.\n*   **Avoid:** Over-engineered scoring functions, gratuitous bonuses/penalties.\n*   **Explanation:** Emphasize simple, interpretable combinations of *essential* factors. Use exponential decay of remaining capacity. Explicitly model feasibility constraints, and handle them strictly.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}