```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly,
    but also considers the absolute remaining capacity to avoid
    filling bins too early with small items if larger items are expected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Calculate the wasted space if the item is placed in each valid bin
        wasted_space = bins_remain_cap[valid_bins] - item

        # Calculate a "snugness" score - lower wasted space is better
        snugness = np.exp(-wasted_space)

        #Give larger bins (more total capacity) a slightly better shot at fitting the items if there's space.
        capacity_boost = bins_remain_cap[valid_bins]/np.max(bins_remain_cap) #boost score based on how full/empty bin is. Higher is more space remaining (better)

        # Combine snugness and remaining capacity boost to make up priority
        priorities[valid_bins] = snugness * capacity_boost

    return priorities
```
