```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Strongly penalize infeasible bins
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Handle feasible bins
    feasible = ~infeasible  # More efficient than item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        # Prioritize bins that minimize wasted space (smaller remaining capacity)
        # and maximize fill ratio. This combines two desirable properties.
        # Using a weighted combination of normalized metrics

        normalized_remaining_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 #avoid division by zero and normalizing when all bins are empty.
        priorities[feasible] =  (1 - normalized_remaining_capacity) + fill_ratio  # Combine normalized metrics


    # Handle the case where no bins are feasible
    else:
        # Distribute evenly to new bins at the end
        priorities = -np.arange(len(bins_remain_cap))

    return priorities
```
