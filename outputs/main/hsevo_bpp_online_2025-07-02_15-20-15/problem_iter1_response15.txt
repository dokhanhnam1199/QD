```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item closely,
    avoiding excessive waste but also encouraging reuse of partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No bin can fit the item

    # Reward bins with smallest remaining capacity AFTER fitting the item (minimize waste)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = -remaining_after_fit

    # Also add a bonus for bins that are already somewhat full (encourage reuse)
    priorities[valid_bins] += (1 - bins_remain_cap[valid_bins])


    # Exponentiate the priorities to exaggerate the differences
    priorities[valid_bins] = np.exp(priorities[valid_bins])
    return priorities
```
