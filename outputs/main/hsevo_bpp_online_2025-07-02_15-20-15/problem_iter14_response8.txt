```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: reciprocal remaining capacity, partially full bonus, noise for infeasible."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    
    if np.any(infeasible):
        priorities[infeasible] = np.random.normal(0, 0.001, size=np.sum(infeasible)) # Small noise for infeasible bins
        priorities[infeasible] -= np.arange(np.sum(infeasible))
    
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        priorities[feasible] = 1 / remaining_capacity #reciprocal of remaining capacity

        partially_full = (remaining_capacity - item) > 0
        partially_full_nearly_full = partially_full & ((remaining_capacity - item) < 0.1 * np.max(bins_remain_cap))
        
        if np.any(partially_full_nearly_full):
            priorities[feasible][partially_full_nearly_full] += 1  # boost partially full
    
    return priorities
```
