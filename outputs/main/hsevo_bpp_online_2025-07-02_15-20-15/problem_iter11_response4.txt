```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by fill ratio and remaining capacity, rewarding fuller bins. Handles infeasible scenarios."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap

    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / bins_remain_cap[feasible]

        normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity_after_placement)
        normalized_fill_ratio = fill_ratio

        priorities[feasible] = 0.7 * normalized_fill_ratio + 0.3 * np.exp(-5 * normalized_remaining_capacity)


    else:
        priorities = -bins_remain_cap

    return priorities
```
