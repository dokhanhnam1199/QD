```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using tight-fit, fill ratio, and random noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity
        tight_fit_weight = 0.7
        fill_ratio_weight = 0.3
        small_number = 0.0001
        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight

    else:
        random_priority_scale = 0.0001
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
