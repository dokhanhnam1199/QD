```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Refined heuristic: Normalized tighter fit with fill ratio and a small exploration factor."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fit = remaining_capacity - item
        # Normalize fit: smaller is better, but avoid division by zero
        normalized_fit = 1.0 / (fit / np.max(bins_remain_cap) + 0.001)

        # Fill ratio: how full the bin will be
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        # Combine normalized fit and fill ratio with weights
        priorities[feasible] = normalized_fit * 0.7 + fill_ratio * 0.3

        # Add a small exploration factor (to potentially find better solutions later)
        priorities[feasible] += np.random.rand(len(remaining_capacity)) * 0.01
    else:
        # If no feasible bins, add a small random priority to all infeasible bins
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
