```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tight_fit_weight: float = 0.7,
                fill_ratio_weight: float = 0.3, random_priority_scale: float = 0.001) -> np.ndarray:
    """Prioritizes bins based on tight-fit, fill ratio, and controlled exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        #Prioritize bins based on tight-fit and fill ratio
        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)
        fill_ratio = (remaining_capacity - item) / (np.max(bins_remain_cap) + 0.0001)  # Normalize
        priorities[feasible] = tight_fit * tight_fit_weight + fill_ratio * fill_ratio_weight
    else:
        #add small random number to feasible bins or all the bins to explore if no feasible bins available.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
