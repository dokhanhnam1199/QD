```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tighter fits while ensuring feasibility."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        priorities[feasible] = 1.0 / (remaining_capacity + 0.001)
        priorities[feasible] += (bins_remain_cap[feasible].max() - bins_remain_cap[feasible]) * 0.1

    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001
    return priorities
```
