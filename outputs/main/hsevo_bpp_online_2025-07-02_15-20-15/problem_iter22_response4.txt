import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tight_fit_weight: float = 0.7000586839931937, fill_ratio_weight: float = 0.09512959840556448, small_number: float = 0.0008998961049407044, random_priority_scale: float = 0.0001299067688845752) -> np.ndarray:
    """Prioritizes bins based on tight-fit and fill ratio."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity
        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale
    return priorities
