```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and remaining capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate remaining capacity if item is added
    remaining_after_add = bins_remain_cap - item

    # Fill ratio for feasible bins
    feasible_mask = bins_remain_cap >= item
    fill_ratios = item / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = fill_ratios

    # Boost bins with substantial remaining capacity, but not too much
    substantial_remain_mask = (remaining_after_add >= 0.2) & (bins_remain_cap >= item)
    priorities[substantial_remain_mask] += 0.1

    # Moderate penalty for nearly full bins
    near_full_mask = (remaining_after_add > 0) & (remaining_after_add < 0.1) & (bins_remain_cap >= item)
    priorities[near_full_mask] -= 0.2

    # Add a small random number to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
