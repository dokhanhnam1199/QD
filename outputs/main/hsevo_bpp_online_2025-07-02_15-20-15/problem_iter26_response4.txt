```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using tight-fit, fill-ratio, capacity balance and controlled exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tight-fit: Exponential decay for tight fit
        tight_fit = remaining_capacity - item
        tight_fit_priority = np.exp(-tight_fit)

        # Fill-ratio: Prefer higher fill ratios
        fill_ratio = item / remaining_capacity
        fill_ratio_priority = fill_ratio**2

        # Capacity balance: Linear balance
        capacity_balance = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity)
        capacity_balance_priority = capacity_balance

        # Combine, weighting tight-fit highest.
        priorities[feasible] = (
            10 * tight_fit_priority +
            fill_ratio_priority +
            0.5 * capacity_balance_priority
        )
    else:
        # Reduced randomness when no feasible bin.
        priorities = np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
