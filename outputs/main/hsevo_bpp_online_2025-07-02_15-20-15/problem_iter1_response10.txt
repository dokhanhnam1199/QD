```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Encourage filling bins as much as possible
            fill_ratio = item / cap
            
            # Penalize leaving too much space, prefer bins closer to item size
            waste_penalty = np.abs(cap - item) #Linear penalty
            #waste_penalty = (cap - item)**2 #Quadratic penalty, stronger discouragement for leaving waste
            # Scale the penalty to have a meaningful impact on the priority
            waste_penalty_scaled = waste_penalty / np.max(bins_remain_cap + 1e-9)

            # A small bonus for bins that are almost full
            almost_full_bonus = 0.0
            if cap > 0 and item > 0.0:
                if item / cap > 0.9:
                    almost_full_bonus = 0.1
            

            priorities[i] = fill_ratio + almost_full_bonus - waste_penalty_scaled #Original, seems stable
        else:
            priorities[i] = -np.inf  # Impossible to add, lowest priority
    return priorities
```
