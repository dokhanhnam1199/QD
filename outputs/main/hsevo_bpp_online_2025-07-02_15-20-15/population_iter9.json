[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and normalized remaining capacity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate priorities for feasible bins\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_cap = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_cap if max_cap > 0 else 0\n\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n    else:\n        # If no feasible bins, assign negative priorities based on bin index\n        priorities = -np.arange(len(bins_remain_cap))\n        \n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins with fill ratio and exponential decay on normalized remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        normalized_remaining = remaining_capacity / max_cap if max_cap > 0 else remaining_capacity # Avoid division by zero\n\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining)\n\n        # Bonus for bins close to full\n        nearly_full = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_cap)\n        priorities[feasible][nearly_full] += 0.1\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on normalized fill ratio and remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get negative infinity priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate fill ratio and normalized remaining capacity for feasible bins\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 # Avoid division by zero\n        normalized_remaining = remaining_capacity / max_cap\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining)\n\n        # Bonus for nearly full bins\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.2 # Reduced bonus\n\n    # Handle the edge case where no bin is feasible.\n    elif not np.any(feasible):\n         priorities = -np.arange(len(bins_remain_cap)) # use bin index\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and normalized remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a -inf priority.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Feasible bins get a priority based on fill ratio and remaining capacity, exponentially decayed.\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratios = item / bins_remain_cap[feasible]\n        scale = np.max(bins_remain_cap)\n        if scale > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)\n        else:\n            priorities[feasible] = fill_ratios  # Treat all bins equally\n\n        # Bonus for nearly full bins\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.5\n\n\n    # If no bin is feasible, penalize earlier bins, encouraging new bins.\n    if not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio and normalized remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = item / bins_remain_cap[feasible]\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and normalized remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf  # Mark infeasible bins\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        priorities[feasible] = fill_ratio * np.exp(-remaining_capacity_after_placement / (max_cap if max_cap > 0 else 1))\n\n        # Bonus for nearly full bins\n        nearly_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= 0.1 * max_cap if max_cap > 0 else 1)\n        priorities[feasible][nearly_full] += 0.5\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering feasibility, fill ratio, and remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Invalidate infeasible bins\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Prioritize feasible bins\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        \n        # Exponential decay based on normalized remaining capacity and fill ratio\n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:\n            fill_ratios = item / bins_remain_cap[feasible]\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity_after_placement / max_cap)\n        else:\n            priorities[feasible] = 1.0\n            \n        #Bonus for nearly full bins\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.25\n\n    else:\n        # All bins are infeasible\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndecay_rate = 1.0  # Can be tuned\n\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay. Combines best features.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf  # Set infeasible bins to lowest priority\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        priorities[feasible] = fill_ratio * np.exp(-decay_rate * remaining_capacity / max_cap) if max_cap > 0 else fill_ratio\n\n        # Bonus for nearly full bins, normalizing against original remaining capacity.\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.5\n    elif not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap))  # Prioritize based on index if all infeasible\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio, exp decay of remain cap, and normalization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate fill ratios and scaled remaining capacity for feasible bins.\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratios = item / bins_remain_cap[feasible]\n        scale = np.max(bins_remain_cap)\n        \n        if scale > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)\n        else:\n            priorities[feasible] = fill_ratios # if all bins empty, prioritize based on fill ratio\n        # Bonus for nearly full bins\n        waste = bins_remain_cap - item\n        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)\n        priorities[nearly_full] += 0.5\n\n    # Penalize earlier bins if no feasible bins\n    if not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.487435181491823,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & exponential decay of normalized remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        \n        # Exponential decay based on normalized remaining capacity\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = (item / bins_remain_cap[feasible]) * np.exp(-5 * normalized_remaining_capacity) #Fill ratio * exponential decay\n\n        # Small bonus for almost full bins\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1\n    \n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response0.txt_stdout.txt",
    "code_path": "problem_iter9_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get zero priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        # Calculate fill ratio after placing the item (normalized)\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        #Prioritize bins with higher fill ratio.  Add a small amount to break ties.\n        priorities[feasible] = fill_ratio + 1e-6 * np.arange(np.sum(feasible))\n\n    else:\n        # If no feasible bins, add to the end of the current list of bins (create a new one)\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.487435181491823,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response1.txt_stdout.txt",
    "code_path": "problem_iter9_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Strongly penalize infeasible bins\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Handle feasible bins\n    feasible = ~infeasible  # More efficient than item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Prioritize bins that minimize wasted space (smaller remaining capacity)\n        # and maximize fill ratio. This combines two desirable properties.\n        # Using a weighted combination of normalized metrics\n\n        normalized_remaining_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 #avoid division by zero and normalizing when all bins are empty.\n        priorities[feasible] =  (1 - normalized_remaining_capacity) + fill_ratio  # Combine normalized metrics\n\n\n    # Handle the case where no bins are feasible\n    else:\n        # Distribute evenly to new bins at the end\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 13.232947746310336,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response2.txt_stdout.txt",
    "code_path": "problem_iter9_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bin handling:  Eliminate these immediately.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):\n        # Normalize remaining capacity by bin size.  This lets us compare across potentially varying bin sizes.\n        remaining_capacity = bins_remain_cap[feasible]\n        normalized_remaining = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 # prevent divide by zero\n\n        # Prioritize bins with a fill ratio closest to 1 after adding the item.\n        fill_ratio_after = (bins_remain_cap[feasible] - item) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        \n        # Prioritize bins based on tightness of fit. exp gives non-linear scaling\n        priorities[feasible] = np.exp(-5 * np.abs(fill_ratio_after))\n\n    else:\n        # No feasible bins:  Prioritize adding to bins with the smallest remaining capacity.\n\n        priorities = -bins_remain_cap  # Prefer bins that were nearly full already\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response3.txt_stdout.txt",
    "code_path": "problem_iter9_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get a zero priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    # Calculate fill ratio for feasible bins\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        \n        # Prioritize bins based on fill ratio.\n        priorities[feasible] = 1 - fill_ratio  # Higher fill ratio (less space left) gets higher priority\n\n        # Add a small bonus to bins that are close to full after adding item,\n        # but not too close (avoid tiny slivers). Experiment with the threshold.\n\n        near_full_threshold = 0.1  # Adjust this value based on experiments\n        near_full = (remaining_capacity - item) <= near_full_threshold * np.max(bins_remain_cap)\n        priorities[feasible][near_full & (priorities[feasible] > -np.inf)] += 0.2  # small bonus\n\n    # Handle the case where no bin is feasible\n    else:\n        priorities = -np.arange(len(bins_remain_cap)) # Prefer bins earlier in the list if nothing fits\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response4.txt_stdout.txt",
    "code_path": "problem_iter9_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        # Calculate the fill ratio if the item were placed in the bin.\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / bins_remain_cap[feasible]\n\n        # Normalize the remaining capacity and fill ratio.\n        normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity_after_placement)\n        normalized_fill_ratio = fill_ratio\n\n        # Combine normalized fill ratio and remaining capacity to create the priority.\n        # Experiment with the weights to fine-tune the performance.\n        priorities[feasible] = 0.7 * normalized_fill_ratio + 0.3 * np.exp(-5 * normalized_remaining_capacity)\n\n    else:\n        # If no feasible bins, prioritize based on bins with smallest remaining cap\n        # Encourages creation of new bins only when necessary\n        priorities = -bins_remain_cap\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]