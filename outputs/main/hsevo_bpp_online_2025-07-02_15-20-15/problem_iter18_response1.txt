```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Improved heuristic: Combines tight-fit, fill ratio, and controlled randomness with a more robust infeasibility handling.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility Handling: Explicitly penalize infeasible bins heavily.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  #Or -1e9

    # Feasible Bins: Calculate priorities based on tight-fit and fill ratio.
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        
        # Tight-fit component: Reciprocal of the remaining capacity AFTER placing the item.
        fit_ratio = (remaining_capacity - item + 0.001) 
        tight_fit = 1.0 / fit_ratio
        
        # Fill ratio component: Encourages bins that will be well-filled.
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        
        # Combine components:  Adjust weights as needed.
        priorities[feasible] = tight_fit + 0.2 * fill_ratio # Increased fill ratio weight
        
    else:
        # If no feasible bins, prioritize bins with more capacity + tiny random noise to break ties.
       priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001  # Keep random exploration for new bins

    return priorities
```
