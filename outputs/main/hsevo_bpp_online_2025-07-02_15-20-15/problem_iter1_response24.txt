```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers both the remaining capacity and how well
    the item fills the bin. It favors bins that can accommodate the item
    without excessive waste, while also penalizing near-full bins that
    would become almost completely filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Define parameters to fine-tune the heuristic
    capacity_threshold = 0.1  # Avoid bins with capacity below this ratio
    fill_threshold = 0.9       # Reward bins that fill up to this ratio after adding the item
    overfill_penalty = -1000   # Huge penalty for bins that can't hold item

    for i, cap in enumerate(bins_remain_cap):
        if item > cap:
            priorities[i] = overfill_penalty  # Penalize bins that are too small
        else:
            fill_ratio = (item + cap) / (1 + cap) #approximating bin size = 1 to normalize

            # Prefer bins that are well-filled without becoming excessively full
            if cap > 0:
                # prioritize near best fit but penalize near empty bins.
                waste = cap - item
                priority_add = -waste # linear penalty for wasted space.
                fill_bonus = 0
                if cap > 0 and item/cap > 0.8 and item/cap < 1.0:
                   fill_bonus = 10

                priorities[i] = priority_add + fill_bonus
            else:
                priorities[i] = -100

    return priorities
```
