```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on normalized fill ratio and remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get negative infinity priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate fill ratio and normalized remaining capacity for feasible bins
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        fill_ratio = item / bins_remain_cap[feasible]
        remaining_capacity = bins_remain_cap[feasible] - item
        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 # Avoid division by zero
        normalized_remaining = remaining_capacity / max_cap
        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining)

        # Bonus for nearly full bins
        waste = bins_remain_cap[feasible] - item
        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])
        priorities[feasible][nearly_full] += 0.2 # Reduced bonus

    # Handle the edge case where no bin is feasible.
    elif not np.any(feasible):
         priorities = -np.arange(len(bins_remain_cap)) # use bin index

    return priorities
```
