{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio after placement and partially-filled bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Calculate remaining capacity after placing the item.\n    remaining_capacity = bins_remain_cap - item\n    \n    # Calculate fill ratio, prioritizing smaller remaining capacity\n    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap\n    fill_ratio[bins_remain_cap < item] = -np.inf\n    priorities += fill_ratio #Scale this effect down.\n    \n    #Bonus to bins that are not empty already:\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled] += 0.1 #Scale this effect down.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version introduces several improvements over v1:\n    1.  Capacity threshold: Bins with remaining capacity significantly larger than the item size are penalized.\n    2.  Bin Utilization: Encourages packing into bins that, after the item is added, have a utilization rate close to a target utilization (e.g., 70-80%).\n    3.  Handling Empty Bins: Provides a more controlled approach for selecting new empty bins.\n    4.  Prioritizes the best fit but also takes into account bin utilization to improve overall packing density.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins are strictly penalized\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if not np.any(feasible):\n        # if no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.\n        priorities = -np.arange(len(bins_remain_cap))\n        return priorities\n\n    remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n    initial_capacity = bins_remain_cap[feasible] + remaining_capacity_after_placement  # Infer initial bin capacity\n\n    # Calculate bin utilization after placing the item\n    bin_utilization = (initial_capacity - remaining_capacity_after_placement) / initial_capacity\n\n    # Target utilization (e.g., 75%)\n    target_utilization = 0.75\n\n    # Utilization score: Higher score for bins closer to target utilization.  Gaussian-like function.\n    utilization_score = np.exp(-((bin_utilization - target_utilization) ** 2) / (2 * 0.1 ** 2))  # Adjust std dev (0.1) to control score spread.\n\n    # Fit score: Prioritize bins that fit the item well (smaller remaining space)\n    fit_score = np.exp(-5 * remaining_capacity_after_placement / np.max(initial_capacity)) if np.max(initial_capacity) > 0 else 1 #Prevent division by zero.\n\n    # Combine utilization and fit scores. Adjust weights as needed.\n    priorities[feasible] = 0.7 * fit_score + 0.3 * utilization_score\n\n    # Penalize bins with too much remaining capacity (relative to item size).  This encourages filling partially filled bins.\n    too_much_space = remaining_capacity_after_placement > 2 * item\n    priorities[feasible][too_much_space] *= 0.5  # Reduce priority if too much space is left.\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses only exponential decay on remaining capacity while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space. The best gives -inf priority to infeasible bins while the worst gives -np.arange(len(bins_remain_cap)).\nComparing (2nd) vs (19th), the second-best heuristic combines fill ratio with exponential decay and adds a bonus for bins close to full, while the second worst prioritizes utilization scores and fit scores, penalizing bins with too much remaining capacity.\nComparing (1st) vs (2nd), we see that the best uses exponential decay while the second best uses `fill_ratio * np.exp()`. Also, the second best introduces small bonus for bins that are close to full after placement.\nComparing (3rd) vs (4th), we see these two are the same.\nComparing (second worst) vs (worst), we see the second worst uses same logic with the best while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space.\n\nOverall:\nThe better heuristics prioritize a tighter fit, often using exponential decay on the remaining capacity, and handle infeasible bins by assigning a very low priority (-np.inf). They tend to avoid complex combinations of factors. Simplicity in the combination of factors seems to be favored.\n- \nOkay, let's refine the concept of \"Current Self-Reflection\" for designing better heuristics, specifically avoiding the pitfalls of \"Ineffective Self-Reflection\". We aim for concise, impactful insights.\n\nHere's a refined definition:\n\n*   **Keywords:** Parsimony, core factors, feasibility, decay.\n*   **Advice:** Focus on fundamental drivers (e.g., fill ratio with exponential capacity decay penalty). Prioritize feasibility; immediately invalidate infeasible moves.\n*   **Avoid:** Over-engineered scoring functions, gratuitous bonuses/penalties.\n*   **Explanation:** Emphasize simple, interpretable combinations of *essential* factors. Use exponential decay of remaining capacity. Explicitly model feasibility constraints, and handle them strictly.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}