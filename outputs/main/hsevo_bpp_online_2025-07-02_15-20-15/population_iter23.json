[
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: tight fit, fill ratio, infeasibility handling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits and fill ratio with exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.01 # add small noise\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 79.59712804148386,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit and normalized capacity for online bin packing.\n    Prioritizes tighter fits in bins with smaller remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Normalize remaining capacity to [0, 1]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        # Tight-fit component.  Higher is better\n        fit_score = 1.0 / (remaining_capacity - item + 0.001)\n\n        # Combine components, emphasizing tight fit.\n        priorities[feasible] = fit_score + 0.5 * normalized_capacity + np.random.rand(np.sum(feasible)) * 0.01\n    else:\n        # Prioritize bins with more capacity if no feasible bin.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 81.5117670522537,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001) #avoid zero division.\n        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio + np.random.rand(np.sum(feasible)) * 0.001\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines tight fit, fill ratio, and normalized capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        priorities[feasible] = (0.4 * fit_priority +\n                                 0.4 * fill_ratio +\n                                 0.2 * normalized_capacity +\n                                 np.random.rand(np.sum(feasible)) * 0.01)\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 84.97207818109295,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response5.txt_stdout.txt",
    "code_path": "problem_iter23_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits using normalized remain capacity & fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit = remaining_capacity - item\n        normalized_fit = 1.0 / (fit / np.max(bins_remain_cap) + 0.001)\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        priorities[feasible] = normalized_fit * 0.7 + fill_ratio * 0.3\n        priorities[feasible] += np.random.rand(len(remaining_capacity)) * 0.01\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response6.txt_stdout.txt",
    "code_path": "problem_iter23_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using tight-fit, fill ratio, and random noise.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        tight_fit_weight = 0.7\n        fill_ratio_weight = 0.3\n        small_number = 0.0001\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n    else:\n        random_priority_scale = 0.0001\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response7.txt_stdout.txt",
    "code_path": "problem_iter23_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio = np.clip(fill_ratio, 0, 1)\n        priorities[feasible] = normalized_capacity + fill_ratio * 0.5 + np.random.rand(np.sum(feasible)) * 0.01\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 149.30195452732352,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response8.txt_stdout.txt",
    "code_path": "problem_iter23_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit, fill ratio, and normalized capacity with exploration.\n    Prioritizes tighter fits, higher fill ratios, and larger bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)\n\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        capacity_weight = 0.2\n        fit_weight = 0.6\n        fill_weight = 0.2\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 82.87794176306345,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response9.txt_stdout.txt",
    "code_path": "problem_iter23_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio, with tuned weights.\"\"\"\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 0.1\n    small_number = 0.001\n    random_priority_scale = 0.0001\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  }
]