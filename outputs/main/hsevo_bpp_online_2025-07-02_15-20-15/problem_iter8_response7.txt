```python
import numpy as np

decay_rate = 1.0  # Can be tuned


def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and exponential decay. Combines best features."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  # Set infeasible bins to lowest priority

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        fill_ratio = item / bins_remain_cap[feasible]
        max_cap = np.max(bins_remain_cap)
        priorities[feasible] = fill_ratio * np.exp(-decay_rate * remaining_capacity / max_cap) if max_cap > 0 else fill_ratio

        # Bonus for nearly full bins, normalizing against original remaining capacity.
        waste = bins_remain_cap[feasible] - item
        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])
        priorities[feasible][nearly_full] += 0.5
    elif not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap))  # Prioritize based on index if all infeasible
    return priorities
```
