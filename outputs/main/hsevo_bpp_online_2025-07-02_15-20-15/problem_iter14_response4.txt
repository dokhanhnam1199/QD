```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tightness of fit and bin initialization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        # Use reciprocal of remaining capacity for tight fit
        priorities[feasible] = 1 / (remaining_capacity_after_placement + 1e-9) #Small epsilon to avoid div by zero
        
        #Boost bins already somewhat full
        max_cap = np.max(bins_remain_cap)
        current_fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / (max_cap if max_cap > 0 else 1)

        priorities[feasible] += 0.3 * current_fill_ratio  # Scale down the impact to avoid dominating fit_ratio

    else:
        #Prioritize emptiest bins, with slight random noise for exploration.
        priorities = np.random.rand(len(bins_remain_cap)) * 0.001 - bins_remain_cap #Noise and prioritze smaller rem cap
    return priorities
```
