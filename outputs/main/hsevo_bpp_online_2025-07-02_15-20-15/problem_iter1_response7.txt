```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Give bins with sufficient capacity a base priority
    sufficient_capacity = bins_remain_cap >= item
    priorities[sufficient_capacity] += 1.0

    # Prioritize bins with tighter fits (but still sufficient capacity). This aims to minimize wasted space.
    # Using exponential to emphasize tighter fits. Scale with the item size to allow different sized items
    # to find appropriate spots
    fit_difference = bins_remain_cap[sufficient_capacity] - item
    priorities[sufficient_capacity] += np.exp(-fit_difference / item)

    # Introduce a stochastic element - this is like a 'quantum fluctuation'
    # to explore other possibilities. Helps avoid getting stuck in local minima.
    # Scale randomness with the number of bins
    num_bins = len(bins_remain_cap)
    priorities += 0.01 * np.random.rand(num_bins) / num_bins  # Scaled for stability


    # Slightly favor bins that are less full. This encourages using more bins in initial phases.
    # Prevents quickly filling a few bins up, leaving other bins largely empty
    priorities += (1 - bins_remain_cap / np.max(bins_remain_cap)) * 0.05 #Scaled for effect
    return priorities
```
