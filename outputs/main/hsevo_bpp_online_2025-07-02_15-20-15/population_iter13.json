[
  {
    "stdout_filepath": "problem_iter11_response0.txt_stdout.txt",
    "code_path": "problem_iter11_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio, remaining capacity, and nearly full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n        normalized_remaining = remaining_capacity / max_cap\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining)\n\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.2 \n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response1.txt_stdout.txt",
    "code_path": "problem_iter11_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by feasibility, fill ratio, and exponential decay of remaining capacity. Adds bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mark infeasible bins\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Prioritize feasible bins\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n\n        # Calculate fill ratio and exponential decay\n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:\n            fill_ratios = item / bins_remain_cap[feasible]\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity_after_placement / max_cap)\n        else:\n            priorities[feasible] = 1.0  # If all bins are empty, prioritize based on fill ratio\n        \n        # Bonus for nearly full bins\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.5\n\n    else:\n        # If no feasible bins, penalize earlier bins to encourage opening new bins\n        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response2.txt_stdout.txt",
    "code_path": "problem_iter11_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using fill ratio, exponential decay, and handles infeasibility.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        \n        # Fill ratio multiplied by exponential decay\n        priorities[feasible] = (item / bins_remain_cap[feasible]) * np.exp(-5 * normalized_remaining_capacity)\n\n        # Small bonus for almost full bins.\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1 #Reward nearly full\n    else:\n        priorities = -np.arange(len(bins_remain_cap))  # try empty bins\n        \n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response3.txt_stdout.txt",
    "code_path": "problem_iter11_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity,\n    with bonus for nearly full bins and fallback strategy.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratios = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        scale = np.max(bins_remain_cap)\n        \n        if scale > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)\n        else:\n            priorities[feasible] = fill_ratios\n\n        waste = bins_remain_cap - item\n        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)\n        priorities[nearly_full] += 0.5\n    else:\n        priorities = -bins_remain_cap\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 6.063023534104503,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response4.txt_stdout.txt",
    "code_path": "problem_iter11_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio and remaining capacity, rewarding fuller bins. Handles infeasible scenarios.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / bins_remain_cap[feasible]\n\n        normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity_after_placement)\n        normalized_fill_ratio = fill_ratio\n\n        priorities[feasible] = 0.7 * normalized_fill_ratio + 0.3 * np.exp(-5 * normalized_remaining_capacity)\n\n\n    else:\n        priorities = -bins_remain_cap\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response5.txt_stdout.txt",
    "code_path": "problem_iter11_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering feasibility, fill ratio, and remaining capacity, with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratios = item / bins_remain_cap[feasible] if np.any(bins_remain_cap[feasible] > 0) else np.zeros_like(bins_remain_cap[feasible])\n        \n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity_after_placement / max_cap)\n        else:\n            priorities[feasible] = 1.0\n\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.25\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response6.txt_stdout.txt",
    "code_path": "problem_iter11_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: feasibility, fill ratio, and near-full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        priorities[feasible] = fill_ratio * np.exp(-remaining_capacity_after_placement / (max_cap if max_cap > 0 else 1))\n\n        nearly_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= 0.1 * max_cap if max_cap > 0 else 1)\n        priorities[feasible][nearly_full] += 0.5\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response7.txt_stdout.txt",
    "code_path": "problem_iter11_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio and remaining capacity, favoring nearly-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        normalized_remaining_capacity = bins_remain_cap[feasible] / max_cap if max_cap > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n        waste = bins_remain_cap[feasible] - item\n        near_full = (waste > 0) & (waste < 0.1 * max_cap)\n        priorities[feasible][near_full] += 0.2\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response8.txt_stdout.txt",
    "code_path": "problem_iter11_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: feasibility, fill ratio, exponential decay, nearly full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = (item / bins_remain_cap[feasible]) * np.exp(-5 * normalized_remaining_capacity)\n\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1 #small bonus\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response9.txt_stdout.txt",
    "code_path": "problem_iter11_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & normalized remaining capacity with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Fill ratio after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible] if np.all(bins_remain_cap[feasible] > 0) else 0 # Avoid division by zero\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.2 # Slightly larger bonus\n\n    else:\n      # If no feasible bins, prioritize bins with the largest remaining capacity\n      priorities = bins_remain_cap\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 11.856800957319514,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response0.txt_stdout.txt",
    "code_path": "problem_iter12_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get absolute minimum priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    # Prioritize feasible bins based on a combination of factors:\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n\n        # 1. Fit Ratio: Prioritize bins where the item fills a large portion\n        #    of the remaining capacity.\n        fit_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] += fit_ratio\n\n        # 2. Avoid small remainders (fragmentation): Mild penalty for leaving very small gaps\n        small_remainder_penalty = np.where(remaining_capacity < 0.1 * np.max(bins_remain_cap), -0.1, 0) #Penalize if remain capacity is less than 10% of max capacity\n\n        priorities[feasible] += small_remainder_penalty\n        \n\n        # 3. Favor bins that are already somewhat full (but not too full, avoiding near misses)\n        #    This encourages using partially filled bins before opening new ones.\n        current_fill_ratio = (bins_remain_cap[feasible] + item - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += 0.5 * current_fill_ratio  # Scale down the impact to avoid dominating fit_ratio\n\n    else:\n         # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.13841244515357,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response1.txt_stdout.txt",
    "code_path": "problem_iter12_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasibility check - critical to avoid placing items into bins that are too small.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):  # At least one feasible bin\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        \n        # Prioritize tighter fits.  The reciprocal provides a strong preference for bins\n        # that are close to being full *after* the item is placed.  Adding a small constant\n        # avoids division by zero if an item perfectly fills a bin.\n        priorities[feasible] = 1.0 / (remaining_capacity_after_placement + 0.001)\n        \n        # Slightly boost priority for bins that are already relatively full.\n        # This encourages filling existing bins before opening new ones.\n        # The base is chosen to give meaningful differences in priority.\n        \n        priorities[feasible] += (bins_remain_cap[feasible].max() - bins_remain_cap[feasible]) * 0.1\n    else:\n        # All bins are infeasible.  Prioritize the emptiest bin, breaking ties by index\n        # This ensures we open a new bin when necessary.\n        # Give negative priority based on remaining capacity so bins with larger\n        # capacity are prioritized *less* negatively.  Add small noise to break ties by index\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001 # Use random number to avoid infinite loop when bins are all the same\n        \n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response2.txt_stdout.txt",
    "code_path": "problem_iter12_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Infeasibility check: Hard constraint.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # 2. Feasible bins: Prioritize based on a combination of factors.\n    feasible = item <= bins_remain_cap\n    feasible_bins_remain_cap = bins_remain_cap[feasible]\n\n    if np.any(feasible):\n        # A. Remaining capacity after placement (tighter fit is better).\n        remaining_capacity = feasible_bins_remain_cap - item\n        \n        # B. Normalize remaining capacity to [0, 1] range.  This helps with scaling.\n        max_cap = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_cap if max_cap > 0 else np.zeros_like(remaining_capacity)  # Prevent zero division\n\n        # C. Prioritize bins with tighter fits exponentially. The smaller the remaining capacity, the higher the priority.\n        priority_fit = np.exp(-5 * normalized_remaining_capacity)\n    \n        # D. Combine priority factors. Consider different weighting strategies (e.g., geometric mean, weighted sum)\n        priorities[feasible] = priority_fit\n\n    # 3. Handle the case where no bin is feasible: Open a new bin.\n    if not np.any(feasible):\n        # Penalize existing bins slightly less if they are almost full.\n        # This encourages filling partially filled bins before opening completely new ones.\n        priorities = -np.arange(len(bins_remain_cap)) # Give different priorities to each bin\n        \n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response3.txt_stdout.txt",
    "code_path": "problem_iter12_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasibility check: Absolutely crucial to set these to -inf *first*.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # If no feasible bins, prioritize adding to a new bin.\n    if np.all(infeasible):\n        priorities = -np.arange(len(bins_remain_cap))  # Prioritize lower-indexed empty bins\n\n        return priorities\n\n    # Feasible bins: Prioritize based on fill ratio *after* placement.\n    feasible = item <= bins_remain_cap\n    remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n    \n    # Calculate fill ratio: Higher is better.  Add a small constant to avoid division by zero,\n    # but keep it *small* so it doesn't swamp the signal.  Also, scale to 0..1 range\n    fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / (bins_remain_cap[feasible] + 1e-9)\n    priorities[feasible] = fill_ratio\n    \n    # Add a tie-breaker to ensure deterministic behavior for bins with the same fill ratio\n    # This prioritizes bins with lower index, adding items to bins \"from the left\" in the array.\n    priorities[feasible] += -np.arange(np.sum(feasible)) * 1e-6 \n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response4.txt_stdout.txt",
    "code_path": "problem_iter12_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility is paramount.  Infeasible bins get MIN priority.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # 2. Among feasible bins, prioritize bins where the item fits best\n    #    without creating excessive wasted space.  This encourages efficient packing.\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n\n        # A. Normalize remaining capacity to bin size.\n        normalized_remaining_capacity = remaining_capacity_after_placement / bins_remain_cap[feasible]\n        \n        # B. Use inverse relationship that is less sensistive to extreme values.\n        # Avoid division by zero with a small epsilon.\n        priorities[feasible] = 1.0 / (normalized_remaining_capacity + 0.01)\n            \n        # C. Slightly favor bins that are already somewhat full (reduce fragmentation).\n        # This is a secondary optimization; the primary goal is still fitting well.\n        fullness = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += 0.1 * fullness\n    else:\n        # 3. If no bin is feasible, spread items to new bins. Avoid filling the bins in order of indexes.\n        priorities = np.random.rand(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter13_response0.txt_stdout.txt",
    "code_path": "problem_iter13_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                  exponent_factor: float = 7.680950338860305, \n                  nearly_full_threshold: float = 0.0864257844914425, \n                  nearly_full_bonus: float = 0.38195499308734604) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio, remaining capacity, and nearly full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n        normalized_remaining = remaining_capacity / max_cap\n        priorities[feasible] = fill_ratio * np.exp(-exponent_factor * normalized_remaining)\n\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < nearly_full_threshold * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += nearly_full_bonus\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]