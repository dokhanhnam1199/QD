```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Improved heuristic: Combines tight-fit with fill ratio, controlled randomness for exploration,
    and emphasizes a balance between bin utilization and avoiding excessive fragmentation.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle infeasible bins
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate priorities for feasible bins
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tight-fit component: Reciprocal of remaining capacity after packing
        tight_fit = 1.0 / (remaining_capacity - item + 0.001)

        # Fill ratio component: Encourages better bin utilization
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        # Combine tight-fit and fill ratio.  Adjust weights as needed.
        priorities[feasible] = tight_fit * 0.7 + fill_ratio * 0.3

        # Controlled randomness for exploration:  Preferentially explore empty/near-empty bins.
        # Only apply to feasible bins and with low probability
        if np.random.rand() < 0.01: #Exploration probability, adjustable.
            empty_bin_bonus = (bins_remain_cap[feasible] == bins_remain_cap[feasible].max()) * 0.1 # Prefer largest bin if one exits

            priorities[feasible] += empty_bin_bonus

    else:
        # If no feasible bins, prioritize bins with highest capacity (for creating new bins)
        # Add a small amount of randomness to break ties.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
