```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tight fits, uses reciprocal remaining capacity,
    and adds exploration with controlled randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        priorities[feasible] = 1 / (remaining_capacity + 1e-9)

        # Boost partially full bins
        current_fill_ratio = (bins_remain_cap[feasible] - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        priorities[feasible] += current_fill_ratio * 0.1

    else:
        # Prioritize emptiest bin with noise if no feasible bins
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
