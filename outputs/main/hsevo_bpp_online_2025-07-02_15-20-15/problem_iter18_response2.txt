```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic for online bin packing: Combines tight-fit, fill ratio,
    and controlled randomness for better bin utilization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins with a very low priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tight-fit component: Reciprocal of wasted space, but avoid division by zero.
        wasted_space = remaining_capacity - item
        tight_fit_priority = 1.0 / (wasted_space + 0.001)

        # Fill-ratio component: Encourages filling bins without overpacking.
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        fill_ratio_priority = fill_ratio * 0.1

        # Combine components:  Adjust weights as needed.
        priorities[feasible] = tight_fit_priority + fill_ratio_priority

        #Controlled randomness: Explore new bins with small probability
        rand_indices = np.random.choice(np.where(feasible)[0], size=min(1,np.sum(feasible)), replace=False)
        priorities[rand_indices] += np.random.rand(len(rand_indices)) * 0.01


    else:
        # If no feasible bin, add small random priority to potentially open a new bin.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
