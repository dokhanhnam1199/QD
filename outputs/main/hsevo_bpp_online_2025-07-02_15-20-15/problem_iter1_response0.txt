```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Find bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # Calculate remaining capacity after placing item in feasible bins
        remaining_capacities = bins_remain_cap[feasible_bins] - item

        # Prioritize bins with smallest remaining capacity after placement (first-fit decreasing)
        priorities[feasible_bins] = 1 / (remaining_capacities + 1e-9) # add a small constant to avoid division by zero

        # Optionally, add a bonus for bins that are almost full
        almost_full_threshold = 0.1  # e.g., bin is at least 90% full after placement
        almost_full = remaining_capacities / bins_remain_cap[feasible_bins] < almost_full_threshold
        priorities[feasible_bins][almost_full] *= 2  # Double the priority for almost full bins

    else:
        # If no feasible bins, penalize bins with low capacity
        priorities = -1 / (bins_remain_cap + 1e-9) # Penalize the bins. Add small constant to avoid div by 0

    return priorities
```
