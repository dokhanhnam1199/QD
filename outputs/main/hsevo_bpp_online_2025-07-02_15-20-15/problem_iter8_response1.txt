```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins with fill ratio and exponential decay on normalized remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        fill_ratio = item / bins_remain_cap[feasible]
        max_cap = np.max(bins_remain_cap)
        normalized_remaining = remaining_capacity / max_cap if max_cap > 0 else remaining_capacity # Avoid division by zero

        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining)

        # Bonus for bins close to full
        nearly_full = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_cap)
        priorities[feasible][nearly_full] += 0.1

    return priorities
```
