{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First, penalize bins that are too small.  We strongly discourage putting items\n    # in bins where they will cause an overflow.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf  # Never pick if infeasible\n    \n    # For feasible bins, let's prioritize based on remaining capacity after placement.\n    # Bins closer to full are slightly favored.\n\n    feasible = item <= bins_remain_cap\n    remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n    \n    # Prioritize bins with tighter fits using a non-linear function to avoid very small remaining space.\n    # The tighter the fit, the higher the priority.\n    # The specific formula (e.g., exp, inverse) can be experimented with to fine-tune behavior.\n    \n    priorities[feasible] = np.exp(-5 * remaining_capacity_after_placement / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 1  # use exp to emphasize small diff and prevent divide by zero\n\n    # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.\n    if not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap))\n        \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I understand the task. Let's refine \"Current self-reflection\" to be more effective in designing heuristics, based on avoiding the pitfalls of \"Ineffective self-reflection.\"\n\nHere's a revised approach:\n\n*   **Keywords:** Feasibility, Exploration, Normalization, Simplicity, Edge Cases.\n*   **Advice:** Prioritize exploring *feasible* solutions. Focus on normalizing key factors (e.g., fill ratio, remaining capacity) before combining them. Explicitly design for edge cases (no feasible bins).\n*   **Avoid:** Overly complex formulas, adding bonuses/penalties without strong justification.\n*   **Explanation:** Heuristics should focus on creating *feasible* assignments. Simpler, normalized factor combinations help maintain control and avoid unintended consequences. Edge case handling ensures robustness.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}