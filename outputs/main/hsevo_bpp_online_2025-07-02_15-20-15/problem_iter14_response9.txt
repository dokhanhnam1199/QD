```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid approach prioritizing tight fits and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = item / remaining_capacity
        max_cap = np.max(bins_remain_cap)
        normalized_remaining_capacity = remaining_capacity / max_cap if max_cap > 0 else 0
        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)
        waste = remaining_capacity - item
        near_full = (waste > 0) & (waste < 0.1 * max_cap)
        priorities[feasible][near_full] += 0.2
    else:
        #Prioritize emptiest bin
        priorities = bins_remain_cap
    return priorities
```
