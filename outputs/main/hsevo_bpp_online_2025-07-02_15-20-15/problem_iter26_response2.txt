```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: tight fit, fill ratio, capacity; balances exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)
        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)
        
        # Adaptive exploration based on feasibility
        exploration = np.random.rand(np.sum(feasible)) * 0.01

        priorities[feasible] = (0.4 * fit_priority +
                                 0.4 * fill_ratio +
                                 0.2 * normalized_capacity +
                                 exploration)
    else:
        # Only explore when all bins are infeasible
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
