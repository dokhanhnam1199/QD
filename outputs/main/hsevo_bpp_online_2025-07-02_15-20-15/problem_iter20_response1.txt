```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tight fit and fill ratio.
    Penalizes infeasible bins. Adds small noise when no bin fits.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)
        fill_ratio = item / bins_remain_cap[feasible]
        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
