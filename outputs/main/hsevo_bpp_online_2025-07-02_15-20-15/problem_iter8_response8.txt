```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, exp decay of remain cap, and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate fill ratios and scaled remaining capacity for feasible bins.
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratios = item / bins_remain_cap[feasible]
        scale = np.max(bins_remain_cap)
        
        if scale > 0:
            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)
        else:
            priorities[feasible] = fill_ratios # if all bins empty, prioritize based on fill ratio
        # Bonus for nearly full bins
        waste = bins_remain_cap - item
        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)
        priorities[nearly_full] += 0.5

    # Penalize earlier bins if no feasible bins
    if not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)

    return priorities
```
