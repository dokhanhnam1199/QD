```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio after placing item, 
    bonus for partially filled bins, and remaining capacity tie-breaker."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Remaining capacities after placing item (inf for infeasible bins)
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[infeasible_bins] = np.inf

    # Fill ratios after placing item
    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]

    # Bonus for partially filled bins
    already_filled = bins_remain_cap < np.max(bins_remain_cap)
    priorities[already_filled & ~infeasible_bins] += 0.1

    # Tie-breaker: prioritize smaller remaining capacity
    priorities[~infeasible_bins] -= 0.0001 * remaining_capacities[~infeasible_bins]
    
    #Add small penalty for bins almost full after placement, encourage other bins.
    almost_full = remaining_capacities < 0.1
    priorities[almost_full & ~infeasible_bins] -= 0.2

    return priorities
```
