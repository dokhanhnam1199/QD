```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic for online bin packing. Prioritizes tighter fits with a controlled fill ratio,
    and incorporates a small amount of randomness for exploration when no suitable bin is found.

    This version aims to improve upon priority_v1 by:
    1.  Using reciprocal remaining capacity for a sharper preference for tight fits.
    2.  Employing a fill ratio that encourages efficient bin utilization.
    3.  Adding a small exploration factor when no bin can accommodate the item to avoid getting trapped.
    4.  Explicitly handling infeasible bins by assigning negative infinity priority.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins with negative infinity priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate priorities for feasible bins
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (remaining_capacity - item) / remaining_capacity  # Calculate fill ratio
        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.0001)) + fill_ratio * 0.2  # Combine tightness and fill ratio
    else:
        # If no feasible bin, introduce a small amount of randomness for exploration
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
