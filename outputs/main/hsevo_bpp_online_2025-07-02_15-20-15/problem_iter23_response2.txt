```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tight-fit and normalized capacity for online bin packing.
    Prioritizes tighter fits in bins with smaller remaining capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Normalize remaining capacity to [0, 1]
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)

        # Tight-fit component.  Higher is better
        fit_score = 1.0 / (remaining_capacity - item + 0.001)

        # Combine components, emphasizing tight fit.
        priorities[feasible] = fit_score + 0.5 * normalized_capacity + np.random.rand(np.sum(feasible)) * 0.01
    else:
        # Prioritize bins with more capacity if no feasible bin.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
