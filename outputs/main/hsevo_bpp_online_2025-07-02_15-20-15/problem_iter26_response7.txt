```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tight-fit, fill ratio, & normalized capacity.
    Uses controlled exploration with adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        max_capacity = np.max(bins_remain_cap)
        normalized_capacity = remaining_capacity / max_capacity

        fit_difference = remaining_capacity - item
        tight_fit = 1.0 / (fit_difference + 0.001)

        fill_ratio = (remaining_capacity - item) / remaining_capacity

        # Adaptive weights based on remaining capacity
        capacity_weight = 0.1 + 0.1 * normalized_capacity # Favor bins with larger capacity
        fit_weight = 0.5 - 0.2 * normalized_capacity # Prioritize tighter fits
        fill_weight = 0.4 - 0.1 * normalized_capacity # Prioritize fill ratio

        priorities[feasible] = (
            capacity_weight * normalized_capacity
            + fit_weight * tight_fit
            + fill_weight * fill_ratio
        )

        exploration_factor = 0.01 * normalized_capacity #Reduce exploration on almost full bins
        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
