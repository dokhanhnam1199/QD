```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tight-fit and fill ratio with controlled exploration and infeasibility handling.
    Prioritizes tighter fits and higher fill ratios, and explores new bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle infeasible bins.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tight-fit component: Reciprocal of remaining capacity
        fit_ratio = (remaining_capacity - item + 0.001)
        tight_fit = 1.0 / fit_ratio

        # Fill ratio component: How full the bin would be
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        # Combine components.
        priorities[feasible] = tight_fit + 0.2 * fill_ratio

        #Exploration: Add noise with small probability
        exploration_prob = 0.001
        if np.random.rand() < exploration_prob:
            priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.001
    else:
        # Prioritize bins with more capacity if no feasible bin.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
