{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio after placing the item and bonuses.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[infeasible_bins] = np.inf\n\n    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))\n    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]\n\n    already_filled = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[already_filled & ~infeasible_bins] += 0.1\n\n    near_full_mask = (remaining_capacities > 0) & (remaining_capacities < 0.1* np.max(bins_remain_cap))\n    priorities[near_full_mask] -= 0.2\n\n    substantial_remain_mask = (remaining_capacities >= 0.3* np.max(bins_remain_cap))\n    priorities[substantial_remain_mask] += 0.1\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First, penalize bins that are too small.  We strongly discourage putting items\n    # in bins where they will cause an overflow.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf  # Never pick if infeasible\n    \n    # For feasible bins, let's prioritize based on remaining capacity after placement.\n    # Bins closer to full are slightly favored, but with a modification:\n    # 1. Introduce a \"waste threshold\".  If the remaining capacity after placement is\n    #    less than this threshold, strongly prefer the bin.\n    # 2. Otherwise, prioritize based on a combination of fullness and absolute remaining capacity.\n    \n    feasible = item <= bins_remain_cap\n    remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n    \n    # Define a waste threshold (e.g., 10% of max capacity).  This is a hyperparameter to tune.\n    waste_threshold = 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1\n\n    # Identify bins with remaining capacity below the waste threshold.\n    very_tight_fit = remaining_capacity_after_placement <= waste_threshold\n    \n    # Prioritize bins with very tight fits very highly.\n    priorities[feasible][very_tight_fit] = 10  # Large value to strongly prefer these bins\n\n    # For other feasible bins, combine fullness and absolute remaining capacity.\n    other_feasible = feasible & ~very_tight_fit\n    remaining_capacity_after_placement_others = bins_remain_cap[other_feasible] - item\n    \n    # Use a score combining remaining space and fullness.  Experiment with coefficients.\n\n    priorities[other_feasible] = (np.exp(-2 * remaining_capacity_after_placement_others / np.max(bins_remain_cap)) + # Fullness (exponential decay)\n                                    0.5 * (1 - remaining_capacity_after_placement_others / np.max(bins_remain_cap))) if np.max(bins_remain_cap) > 0 else 0.5 # Remaining space (linear)\n\n\n    # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.\n    if not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap))\n        \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses only exponential decay on remaining capacity while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space. The best gives -inf priority to infeasible bins while the worst gives -np.arange(len(bins_remain_cap)).\nComparing (2nd) vs (19th), the second-best heuristic combines fill ratio with exponential decay and adds a bonus for bins close to full, while the second worst prioritizes utilization scores and fit scores, penalizing bins with too much remaining capacity.\nComparing (1st) vs (2nd), we see that the best uses exponential decay while the second best uses `fill_ratio * np.exp()`. Also, the second best introduces small bonus for bins that are close to full after placement.\nComparing (3rd) vs (4th), we see these two are the same.\nComparing (second worst) vs (worst), we see the second worst uses same logic with the best while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space.\n\nOverall:\nThe better heuristics prioritize a tighter fit, often using exponential decay on the remaining capacity, and handle infeasible bins by assigning a very low priority (-np.inf). They tend to avoid complex combinations of factors. Simplicity in the combination of factors seems to be favored.\n- \nOkay, let's refine the concept of \"Current Self-Reflection\" for designing better heuristics, specifically avoiding the pitfalls of \"Ineffective Self-Reflection\". We aim for concise, impactful insights.\n\nHere's a refined definition:\n\n*   **Keywords:** Parsimony, core factors, feasibility, decay.\n*   **Advice:** Focus on fundamental drivers (e.g., fill ratio with exponential capacity decay penalty). Prioritize feasibility; immediately invalidate infeasible moves.\n*   **Avoid:** Over-engineered scoring functions, gratuitous bonuses/penalties.\n*   **Explanation:** Emphasize simple, interpretable combinations of *essential* factors. Use exponential decay of remaining capacity. Explicitly model feasibility constraints, and handle them strictly.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}