```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced hybrid heuristic for online bin packing, incorporating capacity utilization and controlled exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins with a very low priority.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Handle feasible bins:
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # 1. Capacity Utilization Score: Favor bins with higher utilization after placing the item.
        utilization_score = (item / bins_remain_cap[feasible])

        # 2. Remaining Capacity Score: Reciprocal of remaining capacity after placing the item. Avoid near-zero division.
        remaining_capacity_after_item = remaining_capacity - item
        remaining_capacity_score = 1.0 / (remaining_capacity_after_item + 0.0001)

        # 3. Balance remaining capacities across bins: penalize using bins with high capacities if others exist
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap[feasible])
        capacity_balance_score = 1 - normalized_capacity # small remaining capacities get higher scores

        # Combine scores with weights:
        alpha = 0.6  # Weight for utilization
        beta = 0.3 # Weight for remaining capacity
        gamma = 0.1 # Weight for balancing

        priorities[feasible] = alpha * utilization_score + beta * remaining_capacity_score + gamma * capacity_balance_score

    else:
        # If no feasible bins, add tiny noise to remaining capacities to avoid getting stuck.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
