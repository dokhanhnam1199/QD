```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        
        # Prioritize bins with tighter fits using exponential decay.  Scale remaining capacity.
        max_cap = np.max(bins_remain_cap)
        scaled_remaining = remaining_capacity / max_cap if max_cap > 0 else remaining_capacity # prevent division by zero when all bins are empty
        priorities[feasible] = np.exp(-10 * scaled_remaining)  # Exponential decay
    else:
        # If no feasible bins, prioritize bins with lower indices to start filling from the beginning
        priorities = -np.arange(len(bins_remain_cap))

    return priorities
```
