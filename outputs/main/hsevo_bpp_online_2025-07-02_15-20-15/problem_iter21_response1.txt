```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic: Combines normalized remaining capacity, fill ratio,
    and a small exploration factor for robustness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle infeasible bins: large negative priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate priorities for feasible bins
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Normalized remaining capacity (crucial for bins with very different sizes)
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap) # type: ignore

        # Fill ratio:  (remaining - item) / remaining; scaled and biased
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        fill_ratio = np.clip(fill_ratio, 0, 1)  # Ensure fill_ratio is within [0, 1]

        # Combine normalized capacity, fill ratio, and add exploration
        priorities[feasible] = (
            0.6 * normalized_capacity +  # Emphasize capacity
            0.4 * fill_ratio +   # Consider fill efficiency
            np.random.rand(np.sum(feasible)) * 0.001  # Small exploration
        )
    else:
        # If no feasible bin, apply a minimal random priority to break ties.
        priorities = np.random.rand(len(bins_remain_cap)) * 0.0001  #Pure Exploration

    return priorities
```
