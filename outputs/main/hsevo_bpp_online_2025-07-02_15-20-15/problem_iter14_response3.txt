```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on reciprocal remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    feasible = ~infeasible

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        priorities[feasible] = 1.0 / remaining_capacity  # Reciprocal of remaining capacity

        # Boost partially full bins with noise (exploration)
        waste = bins_remain_cap[feasible] - item
        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible]) # adjust constant 0.2
        if np.any(partially_full):
          priorities[feasible][partially_full] += np.random.normal(0, 0.1, size=np.sum(partially_full))

    else:
        # Prioritize emptiest bins with random noise (encourage new bin usage)
        # avoid -np.inf
        priorities = np.random.rand(len(bins_remain_cap)) #random exploration if all bins are infeasible

    return priorities
```
