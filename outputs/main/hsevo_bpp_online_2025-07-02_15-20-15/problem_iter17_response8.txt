```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins based on tightness of fit and fill ratio,
    with controlled randomness for exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap

    if np.any(~infeasible):
        feasible = ~infeasible
        remaining_capacity = bins_remain_cap[feasible]

        # Tightness of fit
        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)

        # Fill ratio
        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)

        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio

        # Boost partially full bins
        waste = bins_remain_cap[feasible] - item
        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible])
        priorities[feasible][partially_full] += 0.5
    else:
        # Exploration when no feasible bin exists
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
