import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, decay_rate: float = 9.157147615074676) -> np.ndarray:
    """Prioritizes bins based on fill ratio with exponential decay and handles infeasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        fill_ratio = item / bins_remain_cap[feasible]
        priorities[feasible] = fill_ratio * np.exp(-decay_rate * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else fill_ratio
    elif not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap))
    return priorities
