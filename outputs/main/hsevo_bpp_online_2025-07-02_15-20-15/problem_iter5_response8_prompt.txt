{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get a very low priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        \n        # Prioritize tighter fits using a combination of exponential and inverse functions.\n        # This provides a balance between favoring near-full bins and avoiding extremely small gaps.\n        \n        # Exponential term: rewards bins that are close to full\n        exp_term = np.exp(-4 * remaining_capacity_after_placement / np.max(bins_remain_cap[feasible])) if np.max(bins_remain_cap[feasible]) > 0 else 1\n        \n        # Inverse term: strongly penalizes small gaps\n        inverse_term = 1 / (remaining_capacity_after_placement + 0.01)  # Add a small constant to avoid division by zero\n        \n        # Combine the two terms to balance tightness and avoid tiny gaps.\n        priorities[feasible] = exp_term * inverse_term\n\n        # Add a slight bonus for bins that are more than half-full after placement\n        half_full_threshold = np.max(bins_remain_cap) / 2\n        more_than_half_full = bins_remain_cap[feasible] - item > half_full_threshold\n        priorities[feasible][more_than_half_full] *= 1.1  # Give a 10% bonus\n        \n    else:\n        # If no feasible bins, prioritize based on how much the item *exceeds* the bin capacity.\n        # This is a heuristic to try to get the item into a bin that's \"close\" to fitting.\n        # We invert the amount of overflow so that smaller overflows get higher priority (less negative).\n        overflow = item - bins_remain_cap\n        priorities = -overflow\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Calculate remaining capacity if item is added\n    remaining_after_add = bins_remain_cap - item\n\n    # Fill ratio for feasible bins\n    feasible_mask = bins_remain_cap >= item\n    fill_ratios = item / bins_remain_cap[feasible_mask]\n    priorities[feasible_mask] = fill_ratios\n\n    # Boost bins with substantial remaining capacity, but not too much\n    substantial_remain_mask = (remaining_after_add >= 0.2) & (bins_remain_cap >= item)\n    priorities[substantial_remain_mask] += 0.1\n\n    # Moderate penalty for nearly full bins\n    near_full_mask = (remaining_after_add > 0) & (remaining_after_add < 0.1) & (bins_remain_cap >= item)\n    priorities[near_full_mask] -= 0.2\n\n    # Add a small random number to break ties\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses only exponential decay on remaining capacity while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space. The best gives -inf priority to infeasible bins while the worst gives -np.arange(len(bins_remain_cap)).\nComparing (2nd) vs (19th), the second-best heuristic combines fill ratio with exponential decay and adds a bonus for bins close to full, while the second worst prioritizes utilization scores and fit scores, penalizing bins with too much remaining capacity.\nComparing (1st) vs (2nd), we see that the best uses exponential decay while the second best uses `fill_ratio * np.exp()`. Also, the second best introduces small bonus for bins that are close to full after placement.\nComparing (3rd) vs (4th), we see these two are the same.\nComparing (second worst) vs (worst), we see the second worst uses same logic with the best while the worst introduces a waste threshold and combines exponential decay with a linear term for remaining space.\n\nOverall:\nThe better heuristics prioritize a tighter fit, often using exponential decay on the remaining capacity, and handle infeasible bins by assigning a very low priority (-np.inf). They tend to avoid complex combinations of factors. Simplicity in the combination of factors seems to be favored.\n- \nOkay, let's refine the concept of \"Current Self-Reflection\" for designing better heuristics, specifically avoiding the pitfalls of \"Ineffective Self-Reflection\". We aim for concise, impactful insights.\n\nHere's a refined definition:\n\n*   **Keywords:** Parsimony, core factors, feasibility, decay.\n*   **Advice:** Focus on fundamental drivers (e.g., fill ratio with exponential capacity decay penalty). Prioritize feasibility; immediately invalidate infeasible moves.\n*   **Avoid:** Over-engineered scoring functions, gratuitous bonuses/penalties.\n*   **Explanation:** Emphasize simple, interpretable combinations of *essential* factors. Use exponential decay of remaining capacity. Explicitly model feasibility constraints, and handle them strictly.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}