import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_number: float = 4.940886772195638e-06, tight_fit_weight: float = 1.3566148830477522,
                fill_ratio_weight: float = 1.461099424564258, capacity_penalty_weight: float = 0.683346616868425, random_priority_scale: float = 0.005710583353325229) -> np.ndarray:
    """Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        # Prioritize bins that result in higher fill ratios
        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight

        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.
        wasted_capacity = remaining_capacity - item
        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize
        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random

    return priorities
