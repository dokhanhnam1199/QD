```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tight-fit, fill ratio, and capacity awareness with exploration.
    Prioritizes tighter fits, higher fill ratios, and smaller remaining capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        small_number = 1e-6

        # Tight-fit score: Gaussian-like score
        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number))

        # Fill ratio: how full the bin will be *after* packing the item
        fill_ratio = (remaining_capacity - item) / (remaining_capacity + small_number)

        # Capacity score: Prefer bins with smaller remaining capacity
        capacity_score = 1.0 / (remaining_capacity + small_number)

        # Adaptive weights (example: adjust based on item size)
        if item > 0.5:  # If item is large, prioritize tight fit
            tight_fit_weight = 0.6
            fill_ratio_weight = 0.2
            capacity_weight = 0.2
        else:  # Otherwise balance factors more evenly
            tight_fit_weight = 0.4
            fill_ratio_weight = 0.4
            capacity_weight = 0.2

        priorities[feasible] = (
            tight_fit_weight * tight_fit_score +
            fill_ratio_weight * fill_ratio +
            capacity_weight * capacity_score
        )

        # Controlled exploration
        exploration_factor = 0.01
        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor
    else:
        # Less aggressive exploration when no feasible bin exists
        exploration_factor = 0.0001
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * exploration_factor

    return priorities
```
