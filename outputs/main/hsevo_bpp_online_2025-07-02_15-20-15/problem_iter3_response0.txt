```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin handling: assign a very low priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap

    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item

        # Prioritize bins based on a combination of fill ratio and absolute remaining capacity
        fill_ratio = item / bins_remain_cap[feasible]
        priorities[feasible] = fill_ratio * np.exp(-2 * remaining_capacity_after_placement / np.max(bins_remain_cap[feasible])) if np.max(bins_remain_cap[feasible]) > 0 else fill_ratio

        # Add a small bonus for bins that are close to full after placement, but not too close
        close_to_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= 0.1 * np.max(bins_remain_cap))
        priorities[feasible][close_to_full] += 0.5 # give it small bonus
    else:
         # Prioritize bins that were previously non-empty by penalizing empty bins
        empty_bins = bins_remain_cap == np.max(bins_remain_cap)
        if np.any(~empty_bins):
            priorities[empty_bins] = -1 # if no available capacity, penalize empty bins
        # Add new bins at the end to minimize fragmentation if no viable option exists
        priorities = -np.arange(len(bins_remain_cap)) # if all infeasible, add at the end

    return priorities
```
