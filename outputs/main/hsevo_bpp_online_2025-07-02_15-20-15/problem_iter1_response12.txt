```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item

    # Initialize priorities to a low value (e.g., -np.inf)
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Identify bins that can accommodate the item (waste >= 0)
    valid_bins_indices = waste >= 0

    # Calculate a priority score for valid bins. This score encourages
    # filling bins as much as possible without creating excessive waste.
    # Prioritize bins with smaller waste (tighter fit) using a function
    # inversely proportional to the waste. Adding a small constant (1e-6)
    # avoids division by zero. We use an exponential decay to promote
    # better fit.
    if np.any(valid_bins_indices):
        priorities[valid_bins_indices] = np.exp(-waste[valid_bins_indices] / item)


    #Optionally, add another component to the priority that helps
    #balance the bins by penalizing bins with very high fill levels
    #or bins that are nearly full. This helps to avoid cases where a few bins
    #are completely full and other bins are almost empty

    #If all bins are larger than the item size assign default priorities of 1.0
    if not np.any(valid_bins_indices):
      priorities = np.ones(bins_remain_cap.shape)

    return priorities
```
