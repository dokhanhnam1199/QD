```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on reciprocal remaining capacity and noise for infeasible bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.random.rand(np.sum(infeasible)) # Noise for infeasible

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        priorities[feasible] = 1 / remaining_capacity  # Reciprocal of remaining capacity

        # Boost partially full bins.
        waste = bins_remain_cap[feasible] - item
        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible])
        priorities[feasible][partially_full] += 0.5  # Larger boost for partially full.
    else:
        priorities = -np.arange(len(bins_remain_cap)) # Prioritize emptiest if no feasible

    return priorities
```
