```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give a higher priority to bins that can fit the item.
            # Prioritize bins that leave less space after packing (First Fit Decreasing heuristic idea).
            remaining_space = cap - item
            # Give bonus to bins where the remaining space is small, but penalize too small space
            if remaining_space > 0.0:
              priorities[i] = (item / cap) + (1.0 / (remaining_space + 0.00001))  # avoid division by zero and encourage fitting well. The original item / cap prefers full bins regardless of fit, but 1/(remaining_space + small number) encourages snug fits instead.
            else:
                priorities[i] = -np.inf  # make this invalid; shouldn't happen, but just in case!
        else:
            # Very low priority to bins that cannot fit the item.
            priorities[i] = -np.inf  # Ensure these bins are never considered unless all bins are too small.

    # If no bin can fit the item, then equally penalize all bins
    if np.all(priorities == -np.inf):
        priorities = np.ones_like(bins_remain_cap) * -10
    return priorities
```
