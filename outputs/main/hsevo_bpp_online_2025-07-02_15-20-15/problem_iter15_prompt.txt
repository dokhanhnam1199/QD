{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Hybrid heuristic: Tighter fit (reciprocal) with fill ratio consideration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I'll help you redefine \"Current self-reflection\" to design better bin-packing heuristics, avoiding the pitfalls of \"Ineffective self-reflection.\" Here's a revised approach:\n\n*   **Keywords:** Feasibility, Bin Initialization, Remaining Capacity, Priority Function, Edge Cases, Normalization, Exploration.\n\n*   **Advice:** Rigorously test priority functions on varied datasets. Emphasize graceful infeasibility handling to encourage exploration, and efficient bin initialization strategies.\n\n*   **Avoid:** Unjustified complexity in priority calculations. Premature scaling without experimentation. Over-reliance on bonuses without clear understanding of their impact. Blindly normalizing without empirical justification.\n\n*   **Explanation:** Focus on designing priority functions based on sound mathematical principles and extensive experimentation. Understand the interplay between feasibility constraints, exploration mechanisms, and the overall heuristic's performance.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}