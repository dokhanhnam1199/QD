```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: First-Fit Decreasing adapted for priorities.  Prioritize bins where the item fits, with preference for bins where the remaining capacity is closer to the item size, but not too close (avoiding very small leftovers).

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate "closeness" to item size, normalized by bin capacity.
            closeness = 1 - abs(cap - item) / cap
            # Penalize bins where the remaining space is too small (small leftover after packing).
            leftover = cap - item
            if leftover < 0.1:  # Adjust 0.1 based on problem scale
                priorities[i] = -1  # Very low priority. Could also set to -np.inf
            else:
                priorities[i] = closeness
        else:
            priorities[i] = -np.inf  # Item doesn't fit; impossible assignment

    # Heuristic 2: Add a small random component to break ties and explore the solution space.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
