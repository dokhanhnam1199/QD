```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates priority scores for bins based on remaining capacity and fill ratio."""

    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        remaining_capacities = bins_remain_cap[feasible_bins] - item
        fill_ratio = (bins_remain_cap[feasible_bins] - remaining_capacities) / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] = fill_ratio / (remaining_capacities + 1e-9) #Balance filling and min waste
        almost_full_threshold = 0.1
        almost_full = remaining_capacities / bins_remain_cap[feasible_bins] < almost_full_threshold
        priorities[feasible_bins][almost_full] *= 1.5 #Boost almost full
    else:
        priorities = -1 / (bins_remain_cap + 1e-9)  # Penalize infeasible bins
    return priorities
```
