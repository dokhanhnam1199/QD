```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic: Combines tight-fit reciprocal with fill ratio and controlled exploration.
    Prioritizes tighter fits and higher fill ratios, with a small chance to explore new bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle infeasible bins (item larger than remaining capacity)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tight-fit component: Reciprocal of remaining capacity after placing the item
        tight_fit = 1.0 / (remaining_capacity - item + 0.001)

        # Fill ratio component: How full the bin would be after placing the item
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        # Combine components: Weighted sum of tight-fit and fill ratio
        priorities[feasible] = tight_fit * 0.7 + fill_ratio * 0.3

        # Exploration component: Small probability to choose a less-filled bin
        exploration_prob = 0.01  # Probability of exploring a less filled bin
        if np.random.rand() < exploration_prob:
            priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.01  # Add small random value
    else:
          # If no feasible bin, prioritize bins with more capacity (or small random if all are effectively equal).
          priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
