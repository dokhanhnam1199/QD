```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasibility check - critical to avoid placing items into bins that are too small.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    
    if np.any(feasible):  # At least one feasible bin
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        
        # Prioritize tighter fits.  The reciprocal provides a strong preference for bins
        # that are close to being full *after* the item is placed.  Adding a small constant
        # avoids division by zero if an item perfectly fills a bin.
        priorities[feasible] = 1.0 / (remaining_capacity_after_placement + 0.001)
        
        # Slightly boost priority for bins that are already relatively full.
        # This encourages filling existing bins before opening new ones.
        # The base is chosen to give meaningful differences in priority.
        
        priorities[feasible] += (bins_remain_cap[feasible].max() - bins_remain_cap[feasible]) * 0.1
    else:
        # All bins are infeasible.  Prioritize the emptiest bin, breaking ties by index
        # This ensures we open a new bin when necessary.
        # Give negative priority based on remaining capacity so bins with larger
        # capacity are prioritized *less* negatively.  Add small noise to break ties by index
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001 # Use random number to avoid infinite loop when bins are all the same
        
    return priorities
```
