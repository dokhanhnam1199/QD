```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasibility check: Hard constraint.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # 2. Feasible bins: Prioritize based on a combination of factors.
    feasible = item <= bins_remain_cap
    feasible_bins_remain_cap = bins_remain_cap[feasible]

    if np.any(feasible):
        # A. Remaining capacity after placement (tighter fit is better).
        remaining_capacity = feasible_bins_remain_cap - item
        
        # B. Normalize remaining capacity to [0, 1] range.  This helps with scaling.
        max_cap = np.max(bins_remain_cap)
        normalized_remaining_capacity = remaining_capacity / max_cap if max_cap > 0 else np.zeros_like(remaining_capacity)  # Prevent zero division

        # C. Prioritize bins with tighter fits exponentially. The smaller the remaining capacity, the higher the priority.
        priority_fit = np.exp(-5 * normalized_remaining_capacity)
    
        # D. Combine priority factors. Consider different weighting strategies (e.g., geometric mean, weighted sum)
        priorities[feasible] = priority_fit

    # 3. Handle the case where no bin is feasible: Open a new bin.
    if not np.any(feasible):
        # Penalize existing bins slightly less if they are almost full.
        # This encourages filling partially filled bins before opening completely new ones.
        priorities = -np.arange(len(bins_remain_cap)) # Give different priorities to each bin
        
    return priorities
```
