[
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response1.txt_stdout.txt",
    "code_path": "problem_iter20_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fit and fill ratio.\n    Penalizes infeasible bins. Adds small noise when no bin fits.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response2.txt_stdout.txt",
    "code_path": "problem_iter20_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits and fill ratio with controlled exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n        exploration_prob = 0.001 #Lower exploration\n        if np.random.rand() < exploration_prob:\n            priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.001\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response3.txt_stdout.txt",
    "code_path": "problem_iter20_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit and fill ratio with controlled exploration and infeasibility handling.\n    Prioritizes tighter fits and higher fill ratios, and explores new bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Handle infeasible bins.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component: Reciprocal of remaining capacity\n        fit_ratio = (remaining_capacity - item + 0.001)\n        tight_fit = 1.0 / fit_ratio\n\n        # Fill ratio component: How full the bin would be\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Combine components.\n        priorities[feasible] = tight_fit + 0.2 * fill_ratio\n\n        #Exploration: Add noise with small probability\n        exploration_prob = 0.001\n        if np.random.rand() < exploration_prob:\n            priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.001\n    else:\n        # Prioritize bins with more capacity if no feasible bin.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 60.75987235739928,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response4.txt_stdout.txt",
    "code_path": "problem_iter20_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 4,
    "tryHS": true,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response5.txt_stdout.txt",
    "code_path": "problem_iter20_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits and fill ratio, penalizes infeasible bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        fit_priority = 1.0 / (bins_remain_cap[feasible] - item + 0.0001)\n        fill_ratio = (item) / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap]) * 0.0001\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 9, in <module>\n    from gpt import priority_v2 as priority\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 15\n    priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap]) * 0.0001\n                                                                     ^\nSyntaxError: closing parenthesis ']' does not match opening parenthesis '('\n"
  },
  {
    "stdout_filepath": "problem_iter20_response6.txt_stdout.txt",
    "code_path": "problem_iter20_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits and fill ratio for online bin packing.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (item) / (bins_remain_cap[feasible] + 0.0001)\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response7.txt_stdout.txt",
    "code_path": "problem_iter20_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: tight fit, fill ratio. Infeasible bins get -inf.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response8.txt_stdout.txt",
    "code_path": "problem_iter20_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits, fill ratio, with controlled exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response9.txt_stdout.txt",
    "code_path": "problem_iter20_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits using reciprocal remain capacity,\n    fill ratio, and handles infeasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response0.txt_stdout.txt",
    "code_path": "problem_iter21_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic: Combines normalized remaining capacity, a tighter-fit reciprocal,\n    and fill-ratio consideration with exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mark infeasible bins with negative infinity\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # 1. Normalized Remaining Capacity: Prioritize bins with more space generally\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        # 2. Tighter-Fit Reciprocal: Favors bins where the item fits snugly (but not too tightly)\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)  # Prevent division by zero\n\n        # 3. Fill Ratio: Encourages efficient use of bin space\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # 4. Weighted Combination: Combine the factors\n        capacity_weight = 0.2\n        fit_weight = 0.6\n        fill_weight = 0.2\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        # 5. Controlled Exploration: Add a small amount of noise to break ties\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n\n    else:\n        # All bins are infeasible. Add some random noise to decide which one opens new bin\n         priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 82.96769046669327,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response1.txt_stdout.txt",
    "code_path": "problem_iter21_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic: Combines normalized remaining capacity, fill ratio,\n    and a small exploration factor for robustness.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Handle infeasible bins: large negative priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate priorities for feasible bins\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Normalized remaining capacity (crucial for bins with very different sizes)\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap) # type: ignore\n\n        # Fill ratio:  (remaining - item) / remaining; scaled and biased\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio = np.clip(fill_ratio, 0, 1)  # Ensure fill_ratio is within [0, 1]\n\n        # Combine normalized capacity, fill ratio, and add exploration\n        priorities[feasible] = (\n            0.6 * normalized_capacity +  # Emphasize capacity\n            0.4 * fill_ratio +   # Consider fill efficiency\n            np.random.rand(np.sum(feasible)) * 0.001  # Small exploration\n        )\n    else:\n        # If no feasible bin, apply a minimal random priority to break ties.\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.0001  #Pure Exploration\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response2.txt_stdout.txt",
    "code_path": "problem_iter21_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced hybrid heuristic for online bin packing, incorporating capacity utilization and controlled exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mark infeasible bins with a very low priority.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Handle feasible bins:\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # 1. Capacity Utilization Score: Favor bins with higher utilization after placing the item.\n        utilization_score = (item / bins_remain_cap[feasible])\n\n        # 2. Remaining Capacity Score: Reciprocal of remaining capacity after placing the item. Avoid near-zero division.\n        remaining_capacity_after_item = remaining_capacity - item\n        remaining_capacity_score = 1.0 / (remaining_capacity_after_item + 0.0001)\n\n        # 3. Balance remaining capacities across bins: penalize using bins with high capacities if others exist\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap[feasible])\n        capacity_balance_score = 1 - normalized_capacity # small remaining capacities get higher scores\n\n        # Combine scores with weights:\n        alpha = 0.6  # Weight for utilization\n        beta = 0.3 # Weight for remaining capacity\n        gamma = 0.1 # Weight for balancing\n\n        priorities[feasible] = alpha * utilization_score + beta * remaining_capacity_score + gamma * capacity_balance_score\n\n    else:\n        # If no feasible bins, add tiny noise to remaining capacities to avoid getting stuck.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response3.txt_stdout.txt",
    "code_path": "problem_iter21_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic: Combines normalized remaining capacity, fill ratio,\n    and a controlled exploration factor. Addresses edge cases explicitly.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mark infeasible bins with a very low priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate priorities for feasible bins\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Normalize remaining capacity to [0, 1]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n        \n        # Fill ratio calculation\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio = np.clip(fill_ratio, 0, 1)  # Ensure fill_ratio is within [0, 1]\n\n        # Core priority calculation: Normalized capacity + Fill Ratio + Exploration\n        priorities[feasible] = normalized_capacity + fill_ratio * 0.5 + np.random.rand(np.sum(feasible)) * 0.01\n    else:\n        # If no feasible bin, explore with a small random value\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    \n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response4.txt_stdout.txt",
    "code_path": "problem_iter21_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Refined heuristic: Normalized tighter fit with fill ratio and a small exploration factor.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit = remaining_capacity - item\n        # Normalize fit: smaller is better, but avoid division by zero\n        normalized_fit = 1.0 / (fit / np.max(bins_remain_cap) + 0.001)\n\n        # Fill ratio: how full the bin will be\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Combine normalized fit and fill ratio with weights\n        priorities[feasible] = normalized_fit * 0.7 + fill_ratio * 0.3\n\n        # Add a small exploration factor (to potentially find better solutions later)\n        priorities[feasible] += np.random.rand(len(remaining_capacity)) * 0.01\n    else:\n        # If no feasible bins, add a small random priority to all infeasible bins\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response2.txt_stdout.txt",
    "code_path": "problem_iter22_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tight_fit_weight: float = 1.2365786483982943, fill_ratio_weight: float = 0.10565709595754275, small_number: float = 0.0011336374255713267, random_priority_scale: float = 1.9364104631291854e-05) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n    return priorities",
    "response_id": 2,
    "tryHS": true,
    "obj": 3.9788591942560925,
    "exec_success": true
  }
]