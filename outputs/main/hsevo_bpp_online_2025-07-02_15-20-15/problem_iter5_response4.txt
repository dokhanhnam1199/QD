```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins with tighter fit using exponential decay on remaining capacity.
    Infeasible bins are strictly avoided. Bins close to full get small bonus.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        
        # Exponential decay based on remaining capacity
        priorities[feasible] = np.exp(-5 * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.exp(-5 * remaining_capacity)

        # Bonus for bins close to full (optional, but often helpful)
        nearly_full = (remaining_capacity > 0) & (remaining_capacity < 0.1 * np.max(bins_remain_cap))
        priorities[feasible][nearly_full] += 0.1
    
    return priorities
```
