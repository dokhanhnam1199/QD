```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic: Considers tightness of fit, fill ratio, and bin utilization with a balanced approach.

    This heuristic prioritizes bins based on a combination of factors:
    1. Tightness of fit: Favors bins where the item fits snugly (small remaining capacity).
    2. Fill ratio: Encourages filling bins reasonably well without overfilling.
    3. Bin utilization: Gives a slight preference to bins that are already partially filled,
       promoting better overall bin usage.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  # Mark infeasible bins with negative infinity

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]

        # Tightness of fit: Reciprocal of remaining capacity after placing the item
        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)

        # Fill ratio: How well the item fills the bin
        fill_ratio = (item) / (bins_remain_cap[feasible] + 0.0001)  # fill ratio with respect to the current bin cap

        # Bin utilization: Encourages filling partially filled bins
        utilization_priority = (bins_remain_cap[feasible] - item) / np.max(bins_remain_cap)
        # Combine the priorities with carefully chosen weights
        priorities[feasible] = 0.6 * fit_priority + 0.3 * fill_ratio + 0.1 * utilization_priority

    else:
        # If no bin can fit the item, create a new bin if applicable/possible,
        # or select a bin randomly with a small priority to avoid infinite loops or unhandled exceptions
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001
    return priorities
```
