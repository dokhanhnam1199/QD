```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tight-fit, fill ratio, and normalized capacity with exploration.
    Prioritizes tighter fits, higher fill ratios, and larger bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        max_capacity = np.max(bins_remain_cap)
        normalized_capacity = remaining_capacity / max_capacity

        fit_difference = remaining_capacity - item
        tight_fit = 1.0 / (fit_difference + 0.001)

        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        capacity_weight = 0.2
        fit_weight = 0.6
        fill_weight = 0.2

        priorities[feasible] = (
            capacity_weight * normalized_capacity
            + fit_weight * tight_fit
            + fill_weight * fill_ratio
        )

        exploration_factor = 0.01
        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
