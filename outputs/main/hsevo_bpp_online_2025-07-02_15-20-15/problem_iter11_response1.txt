```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by feasibility, fill ratio, and exponential decay of remaining capacity. Adds bonus for nearly full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Prioritize feasible bins
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item

        # Calculate fill ratio and exponential decay
        max_cap = np.max(bins_remain_cap)
        if max_cap > 0:
            fill_ratios = item / bins_remain_cap[feasible]
            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity_after_placement / max_cap)
        else:
            priorities[feasible] = 1.0  # If all bins are empty, prioritize based on fill ratio
        
        # Bonus for nearly full bins
        waste = bins_remain_cap[feasible] - item
        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])
        priorities[feasible][nearly_full] += 0.5

    else:
        # If no feasible bins, penalize earlier bins to encourage opening new bins
        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)

    return priorities
```
