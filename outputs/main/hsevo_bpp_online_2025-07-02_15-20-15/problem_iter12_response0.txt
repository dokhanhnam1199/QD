```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get absolute minimum priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    # Prioritize feasible bins based on a combination of factors:
    feasible = item <= bins_remain_cap
    
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item

        # 1. Fit Ratio: Prioritize bins where the item fills a large portion
        #    of the remaining capacity.
        fit_ratio = item / bins_remain_cap[feasible]
        priorities[feasible] += fit_ratio

        # 2. Avoid small remainders (fragmentation): Mild penalty for leaving very small gaps
        small_remainder_penalty = np.where(remaining_capacity < 0.1 * np.max(bins_remain_cap), -0.1, 0) #Penalize if remain capacity is less than 10% of max capacity

        priorities[feasible] += small_remainder_penalty
        

        # 3. Favor bins that are already somewhat full (but not too full, avoiding near misses)
        #    This encourages using partially filled bins before opening new ones.
        current_fill_ratio = (bins_remain_cap[feasible] + item - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        priorities[feasible] += 0.5 * current_fill_ratio  # Scale down the impact to avoid dominating fit_ratio

    else:
         # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.
        priorities = -np.arange(len(bins_remain_cap))

    return priorities
```
