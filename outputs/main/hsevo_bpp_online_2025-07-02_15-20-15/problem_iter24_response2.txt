```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins based on a combination of factors, including:
    - Remaining capacity (to avoid fragmentation)
    - Fill ratio (to pack efficiently)
    - A "best fit" score to encourage tight packing
    - Randomization for exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible
    small_number = 1e-6
    tight_fit_weight = 1.0
    fill_ratio_weight = 1.0
    capacity_weight = 1.0
    random_priority_scale = 0.01

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        
        # Fill ratio: how full the bin will be *after* packing the item
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]

        # Tight-fit score: penalizes bins with much larger capacity than the item
        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number)) # Gaussian-like score

        # Capacity score: Prefer bins with smaller remaining capacity (avoid fragmentation)
        capacity_score = 1.0 / (remaining_capacity + small_number)
        
        priorities[feasible] = (
            tight_fit_weight * tight_fit_score +
            fill_ratio_weight * fill_ratio +
            capacity_weight * capacity_score
        )
    else:
        # If no feasible bins, add a small random value to allow a "fresh start"
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
