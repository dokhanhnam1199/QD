{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins: tight fit, fill ratio, infeasibility handling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines tight fit, fill ratio, and normalized capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        priorities[feasible] = (0.4 * fit_priority +\n                                 0.4 * fill_ratio +\n                                 0.2 * normalized_capacity +\n                                 np.random.rand(np.sum(feasible)) * 0.01)\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st heuristic uses more sophisticated tight-fit and capacity penalty calculations, along with tuned weights, whereas the 20th focuses on a simpler normalized capacity and fill ratio. (2nd) vs (19th) are almost identical with small number. Comparing (1st) vs (2nd), we see that they are identical. (3rd) vs (4th) the 3rd function is same as the first and second, the 4th function use exponential decay for tight fit and square for higher fill ratios. Comparing (second worst) vs (worst), we see heuristic 11th has better values 0.7 and 0.3 for fit_priority and fill_ratio than the last one (normalized_capacity + fill_ratio * 0.5). Overall: The better heuristics include a combination of tight fit, fill ratio, and capacity awareness, often with tuned weights or normalization. They also incorporate exploration, but less aggressively when no feasible bin exists. They avoid overly simplistic calculations and seem to benefit from fine-tuning of weight parameters.\n- \nOkay, let's redefine self-reflection for better heuristic design, focusing on avoiding pitfalls and emphasizing effective strategies.\n\n*   **Keywords:** Multi-criteria, normalization, infeasibility handling, controlled exploration, adaptive weighting.\n*   **Advice:** Design heuristics considering *multiple* normalized factors like fit, fill, and capacity. Implement controlled, *adaptive* exploration strategies instead of static randomness.\n*   **Avoid:** Overly complex logic *without justification*. Fixating on post-placement metrics, and numerous static bonuses/penalties.\n*   **Explanation:** Effective heuristics balance diverse factors with adaptable weights. Normalization prevents domination. Graceful infeasibility handling and controlled exploration enhances robustness. Avoid over-engineering without clear benefits.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}