```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering multiple factors: tight-fit, fill ratio, and bin utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible
    small_number = 1e-6  # Avoid division by zero and stabilize calculations
    tight_fit_weight = 10.0
    fill_ratio_weight = 5.0
    utilization_weight = 2.0
    random_priority_scale = 0.1

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        space_waste = remaining_capacity - item
        
        # Tight-fit component: prioritize bins where the item fits snugly
        tight_fit_priority = tight_fit_weight / (space_waste + small_number)
        
        # Fill ratio component: prioritize bins that will be filled well
        fill_ratio = (item) / (bins_remain_cap[feasible] + small_number)
        fill_ratio_priority = fill_ratio * fill_ratio_weight

        # Bin utilization component: Prioritize bins that are already relatively full
        bin_utilization = (1 - remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0 # Scale between 0 and 1
        bin_utilization_priority = bin_utilization * utilization_weight

        priorities[feasible] = tight_fit_priority + fill_ratio_priority + bin_utilization_priority

    else:
        # If no feasible bin is found, add some noise to the priorities to encourage exploration.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
