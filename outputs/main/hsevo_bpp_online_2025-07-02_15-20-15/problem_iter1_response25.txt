```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Aimed at reducing bin fragmentation and overall bin count.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. High priority for bins that can fit the item closely
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]  # Remaining capacity ratio - Smaller is better, so invert

    priorities[fit_mask] = 1 - priorities[fit_mask] #higher number, higher priority

    # 2. Very low priority for bins that can't fit (to discourage large item being crammed in tight spaces later.)
    priorities[bins_remain_cap < item] = -1.0

    # 3. Favor bins that are relatively empty (encourage use of partially filled bins before starting new ones).
    # This term is weaker than the fit closeness to allow bins close in capacity to be filled faster.
    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities += 0.1*normalized_capacity #add remaining capacity priority
    return priorities
```
