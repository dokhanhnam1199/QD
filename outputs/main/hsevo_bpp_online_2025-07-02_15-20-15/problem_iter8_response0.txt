```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and normalized remaining capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate priorities for feasible bins
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        fill_ratio = item / bins_remain_cap[feasible]
        remaining_capacity = bins_remain_cap[feasible] - item
        max_cap = np.max(bins_remain_cap)
        normalized_remaining_capacity = remaining_capacity / max_cap if max_cap > 0 else 0

        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)
    else:
        # If no feasible bins, assign negative priorities based on bin index
        priorities = -np.arange(len(bins_remain_cap))
        
    return priorities
```
