```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: First-Fit Decreasing (FFD) inspired. Prioritize bins that can accommodate the item with minimal wasted space, but also
    # encourage filling up bins rather than leaving many partially filled.

    # Only consider bins that can actually fit the item
    valid_bins = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float) - np.inf # Initial priority of -inf

    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        # Scale remaining space by item size. Helps prioritize based on relative waste.
        scaled_waste = remaining_space / item

        # Heuristic: smaller waste is generally better (first fit), but incentivize near-full bins.
        priority[valid_bins] = -scaled_waste + (bins_remain_cap[valid_bins] / np.sum(bins_remain_cap))

        #Boost priority of the fullest bins
        priority[bins_remain_cap == np.max(bins_remain_cap)] += 0.000001

    return priority
```
