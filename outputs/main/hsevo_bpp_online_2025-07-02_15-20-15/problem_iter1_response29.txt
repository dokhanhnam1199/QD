```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item closely,
    but also adds a small bonus for bins that are emptier, to
    encourage filling up partially empty bins. It also heavily penalizes bins that cannot fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that cannot fit the item *very* strongly.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # For bins that can fit the item, calculate a priority based on:
    # 1. How closely the item fits (remaining capacity after adding)
    # 2. A small bonus for the remaining capacity *before* adding the item.

    feasible = bins_remain_cap >= item
    remaining_after = bins_remain_cap[feasible] - item
    
    # The smaller remaining_after, the better.  Using reciprocal.
    fit_priority = 1.0 / (remaining_after + 0.0001)  # add small constant to avoid division by zero if remaining_after is near zero

    # Bonus for emptier bins. Using a logarithmic scale so as not to overpower the fit_priority.
    empty_bonus = np.log(bins_remain_cap[feasible] + 1)

    priorities[feasible] = fit_priority + 0.1 * empty_bonus  # weighted combination of fit priority and empty bonus

    return priorities
```
