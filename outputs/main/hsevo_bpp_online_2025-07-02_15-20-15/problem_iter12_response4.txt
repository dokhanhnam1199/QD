```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility is paramount.  Infeasible bins get MIN priority.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # 2. Among feasible bins, prioritize bins where the item fits best
    #    without creating excessive wasted space.  This encourages efficient packing.
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item

        # A. Normalize remaining capacity to bin size.
        normalized_remaining_capacity = remaining_capacity_after_placement / bins_remain_cap[feasible]
        
        # B. Use inverse relationship that is less sensistive to extreme values.
        # Avoid division by zero with a small epsilon.
        priorities[feasible] = 1.0 / (normalized_remaining_capacity + 0.01)
            
        # C. Slightly favor bins that are already somewhat full (reduce fragmentation).
        # This is a secondary optimization; the primary goal is still fitting well.
        fullness = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        priorities[feasible] += 0.1 * fullness
    else:
        # 3. If no bin is feasible, spread items to new bins. Avoid filling the bins in order of indexes.
        priorities = np.random.rand(len(bins_remain_cap))

    return priorities
```
