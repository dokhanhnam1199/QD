```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines tight fit, fill ratio, and capacity with adaptive exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        # Gaussian-like tight fit score
        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + 1e-6))
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        # Normalized capacity
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)

        # Adaptive exploration: Less when feasible, more when near full bins
        exploration_scale = 0.01 * (1 - np.mean(fill_ratio))

        priorities[feasible] = (
            0.4 * tight_fit_score +
            0.4 * fill_ratio +
            0.2 * normalized_capacity +
            np.random.rand(np.sum(feasible)) * exploration_scale
        )
    else:
        # More exploration if no feasible bins
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.1

    return priorities
```
