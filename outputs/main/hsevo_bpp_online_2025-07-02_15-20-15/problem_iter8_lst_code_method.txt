{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio with exponential decay and handles infeasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = fill_ratio * np.exp(-5 * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else fill_ratio\n    elif not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap))\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins with tighter fit using exponential decay on remaining capacity.\n    Infeasible bins are strictly avoided. Bins close to full get small bonus.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        \n        # Exponential decay based on remaining capacity\n        priorities[feasible] = np.exp(-5 * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.exp(-5 * remaining_capacity)\n\n        # Bonus for bins close to full (optional, but often helpful)\n        nearly_full = (remaining_capacity > 0) & (remaining_capacity < 0.1 * np.max(bins_remain_cap))\n        priorities[feasible][nearly_full] += 0.1\n    \n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio with exponential decay and handles infeasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = fill_ratio * np.exp(-5 * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else fill_ratio\n    elif not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap))\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a -inf priority.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Feasible bins get a priority based on remaining capacity, exponentially decayed.\n    feasible = item <= bins_remain_cap\n    remaining_capacity = bins_remain_cap[feasible]\n    \n    # Exponential decay focuses on tighter fits.  Scale the remaining capacity.\n    scale = np.max(bins_remain_cap)\n    if scale > 0:\n        priorities[feasible] = np.exp(-5 * remaining_capacity / scale)\n    else:\n        priorities[feasible] = 1.0  # All bins are empty, treat equally.\n\n    # If no bin is feasible, penalize earlier bins slightly, encouraging use of new bins later in the list.\n    if not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap) # normalized penalty\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        \n        # Exponential decay based on remaining capacity\n        normalized_remaining_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] = np.exp(-5 * normalized_remaining_capacity)\n\n        # Small bonus for almost full bins\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * np.max(bins_remain_cap))\n        priorities[feasible][near_full_mask] += 0.1  # adding bonus to feasible array\n        \n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity (exponential decay).\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = fill_ratio * np.exp(-remaining_capacity_after_placement / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else fill_ratio\n\n        close_to_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= 0.1 * np.max(bins_remain_cap))\n        priorities[feasible][close_to_full] += 0.5\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Invalidate infeasible bins immediately\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Prioritize feasible bins\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        \n        # Exponential decay based on remaining capacity.  Smaller remaining space = higher priority.\n        # Normalized by max capacity to make the exponent scale-invariant.\n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:\n            priorities[feasible] = np.exp(-10 * remaining_capacity_after_placement / max_cap)\n        else:\n            priorities[feasible] = 1.0 # handle the edge case where max_cap is zero\n    else:\n        # All bins are infeasible. Distribute to minimize the bin index to start new bins from start.\n        priorities = -np.arange(len(bins_remain_cap))\n        \n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, decay_rate: float = 1.5977881213203788) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio with exponential decay and handles infeasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = fill_ratio * np.exp(-decay_rate * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else fill_ratio\n    elif not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap))\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a -inf priority.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Feasible bins get a priority based on remaining capacity, exponentially decayed.\n    feasible = item <= bins_remain_cap\n    remaining_capacity = bins_remain_cap[feasible]\n    \n    # Exponential decay focuses on tighter fits.  Scale the remaining capacity.\n    scale = np.max(bins_remain_cap)\n    if scale > 0:\n        priorities[feasible] = np.exp(-5 * remaining_capacity / scale)\n    else:\n        priorities[feasible] = 1.0  # All bins are empty, treat equally.\n\n    # If no bin is feasible, penalize earlier bins slightly, encouraging use of new bins later in the list.\n    if not np.any(feasible):\n        priorities = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap) # normalized penalty\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        \n        # Exponential decay based on remaining capacity\n        normalized_remaining_capacity = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] = np.exp(-5 * normalized_remaining_capacity)\n\n        # Small bonus for almost full bins\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * np.max(bins_remain_cap))\n        priorities[feasible][near_full_mask] += 0.1  # adding bonus to feasible array\n        \n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and exponential decay of remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fill_ratios = item / bins_remain_cap\n    priorities[valid_bins] = fill_ratios[valid_bins] * np.exp(-bins_remain_cap[valid_bins])\n    # Bonus for bins that are nearly full\n    waste = bins_remain_cap - item\n    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap)\n    priorities[nearly_full] += 0.5\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}