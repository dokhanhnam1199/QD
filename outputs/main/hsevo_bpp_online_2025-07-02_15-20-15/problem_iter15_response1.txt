```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic: Combines tight fit, fill ratio, and bin utilization with exploration.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  # Mark infeasible bins

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        # Primary priority: Tight fit (reciprocal of wasted space)
        tight_fit_priority = 1.0 / (remaining_capacity - item + 0.0001)

        # Secondary priority: Fill ratio (encourages full bins)
        fill_ratio_priority = fill_ratio * 0.2  # Adjusted weight

        # Tertiary priority: Bin utilization (prioritizes bins that are already somewhat full)
        bin_utilization_priority = (1 - remaining_capacity / np.max(bins_remain_cap)) * 0.1

        priorities[feasible] = tight_fit_priority + fill_ratio_priority + bin_utilization_priority
    else:
        # Exploration: Give a small chance to open a new bin (if all are full or near full).
        # The lower the remaining capacity across all bins, the higher chance of new bin.
        # This adds diversity and helps escape local optima, preventing premature bin exhaustion.
        exploration_factor = np.mean(bins_remain_cap) / np.max(bins_remain_cap) # scaled by overall bin capacity
        priorities = exploration_factor + np.random.rand(len(bins_remain_cap)) * 0.0001  # Add a small random factor

    return priorities
```
