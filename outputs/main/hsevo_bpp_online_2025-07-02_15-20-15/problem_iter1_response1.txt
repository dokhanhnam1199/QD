```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more nuanced approach considering both space utilization and avoidance of fragmentation.
    Prioritizes bins that have enough space but not excessively so, aiming for efficient packing.
    Also incorporates a slight preference for bins that are already somewhat full, to encourage consolidation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Calculate the fill ratio if the item were added
            new_fill_ratio = (1 - (remaining_capacity - item))

            # A factor based on how well the item fits, aiming for relatively full bins
            fit_score = np.exp(-((remaining_capacity - item) / item)**2) # Gaussian centered at 0 (perfect fit)

            # Slight bonus for bins that already have some content (avoiding excessive fragmentation)
            existing_fill_penalty = 0.0
            if remaining_capacity < 1.0: #if the bin is not empty
                existing_fill_penalty = (1 - remaining_capacity) * 0.5

            # Combine the factors to create the priority
            priorities[i] = fit_score + existing_fill_penalty # removed new_fill_ratio as its almost always one.
    return priorities
```
