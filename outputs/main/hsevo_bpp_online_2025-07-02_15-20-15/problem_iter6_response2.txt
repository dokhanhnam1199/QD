```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, penalize bins that are too small.  We strongly discourage putting items
    # in bins where they will cause an overflow.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  # Never pick if infeasible
    
    # For feasible bins, let's prioritize based on remaining capacity after placement.
    feasible = item <= bins_remain_cap
    remaining_capacity_after_placement = bins_remain_cap[feasible] - item
    
    # Prioritize bins with tighter fits using a non-linear function to avoid very small remaining space.
    # The tighter the fit, the higher the priority.
    # The specific formula (e.g., exp, inverse) can be experimented with to fine-tune behavior.
    
    # Improved priority calculation with exponential decay and a minimum capacity threshold.
    max_cap = np.max(bins_remain_cap)
    if max_cap > 0:
        priorities[feasible] = np.exp(-5 * remaining_capacity_after_placement / max_cap) 
    else:
        priorities[feasible] = 1 # all bins are empty, so priority is uniform
    
    # Add a small bonus for bins that are more full to begin with to encourage filling them up.
    priorities[feasible] += 0.1 * (1 - bins_remain_cap[feasible] / max_cap) if max_cap > 0 else 0

    # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.
    if not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap))
        
    return priorities
```
