[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines tight fit, fill ratio, and capacity with adaptive exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Gaussian-like tight fit score\n        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + 1e-6))\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        # Normalized capacity\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n\n        # Adaptive exploration: Less when feasible, more when near full bins\n        exploration_scale = 0.01 * (1 - np.mean(fill_ratio))\n\n        priorities[feasible] = (\n            0.4 * tight_fit_score +\n            0.4 * fill_ratio +\n            0.2 * normalized_capacity +\n            np.random.rand(np.sum(feasible)) * exploration_scale\n        )\n    else:\n        # More exploration if no feasible bins\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.1\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.27203829278022,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight-fit, fill ratio, and capacity awareness with exploration.\n    Prioritizes tighter fits, higher fill ratios, and smaller remaining capacity.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        small_number = 1e-6\n\n        # Tight-fit score: Gaussian-like score\n        tight_fit_score = np.exp(-np.abs(remaining_capacity - item) / (item + small_number))\n\n        # Fill ratio: how full the bin will be *after* packing the item\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + small_number)\n\n        # Capacity score: Prefer bins with smaller remaining capacity\n        capacity_score = 1.0 / (remaining_capacity + small_number)\n\n        # Adaptive weights (example: adjust based on item size)\n        if item > 0.5:  # If item is large, prioritize tight fit\n            tight_fit_weight = 0.6\n            fill_ratio_weight = 0.2\n            capacity_weight = 0.2\n        else:  # Otherwise balance factors more evenly\n            tight_fit_weight = 0.4\n            fill_ratio_weight = 0.4\n            capacity_weight = 0.2\n\n        priorities[feasible] = (\n            tight_fit_weight * tight_fit_score +\n            fill_ratio_weight * fill_ratio +\n            capacity_weight * capacity_score\n        )\n\n        # Controlled exploration\n        exploration_factor = 0.01\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        # Less aggressive exploration when no feasible bin exists\n        exploration_factor = 0.0001\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * exploration_factor\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.068607897885915,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: tight fit, fill ratio, capacity; balances exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (bins_remain_cap[feasible] - item) / (bins_remain_cap[feasible] + 0.0001)\n        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)\n        \n        # Adaptive exploration based on feasibility\n        exploration = np.random.rand(np.sum(feasible)) * 0.01\n\n        priorities[feasible] = (0.4 * fit_priority +\n                                 0.4 * fill_ratio +\n                                 0.2 * normalized_capacity +\n                                 exploration)\n    else:\n        # Only explore when all bins are infeasible\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 84.98205025927405,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio, with exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component (minimize wasted space)\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)\n\n        # Fill-ratio component (maximize bin utilization)\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2\n\n        # Combine priorities with weights\n        priorities[feasible] = (\n            10 * tight_fit_priority +\n            fill_ratio_priority\n        )\n    else:\n        # Exploration when no feasible bin is found\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using tight-fit, fill-ratio, capacity balance and controlled exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit: Exponential decay for tight fit\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)\n\n        # Fill-ratio: Prefer higher fill ratios\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2\n\n        # Capacity balance: Linear balance\n        capacity_balance = remaining_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity)\n        capacity_balance_priority = capacity_balance\n\n        # Combine, weighting tight-fit highest.\n        priorities[feasible] = (\n            10 * tight_fit_priority +\n            fill_ratio_priority +\n            0.5 * capacity_balance_priority\n        )\n    else:\n        # Reduced randomness when no feasible bin.\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 3.948942959712818,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tight_fit_weight: float = 0.7,\n                fill_ratio_weight: float = 0.3, random_priority_scale: float = 0.001) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit and fill ratio, with exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001)\n        priorities[feasible] = tight_fit_weight * tight_fit + fill_ratio_weight * fill_ratio + np.random.rand(np.sum(feasible)) * random_priority_scale\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tight_fit_weight: float = 0.7,\n                fill_ratio_weight: float = 0.3, random_priority_scale: float = 0.001) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and controlled exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        #Prioritize bins based on tight-fit and fill ratio\n        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (remaining_capacity - item) / (np.max(bins_remain_cap) + 0.0001)  # Normalize\n        priorities[feasible] = tight_fit * tight_fit_weight + fill_ratio * fill_ratio_weight\n    else:\n        #add small random number to feasible bins or all the bins to explore if no feasible bins available.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 80.15556441962505,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight-fit, fill ratio, & normalized capacity.\n    Uses controlled exploration with adaptive weights.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + 0.001)\n\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n\n        # Adaptive weights based on remaining capacity\n        capacity_weight = 0.1 + 0.1 * normalized_capacity # Favor bins with larger capacity\n        fit_weight = 0.5 - 0.2 * normalized_capacity # Prioritize tighter fits\n        fill_weight = 0.4 - 0.1 * normalized_capacity # Prioritize fill ratio\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + fit_weight * tight_fit\n            + fill_weight * fill_ratio\n        )\n\n        exploration_factor = 0.01 * normalized_capacity #Reduce exploration on almost full bins\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 84.98205025927405,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering tight-fit, fill-ratio, and capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component (minimize wasted space)\n        tight_fit = remaining_capacity - item\n        tight_fit_priority = np.exp(-tight_fit)\n\n        # Fill-ratio component (maximize bin utilization)\n        fill_ratio = item / remaining_capacity\n        fill_ratio_priority = fill_ratio**2\n\n        # Capacity balance (avoid small bins)\n        capacity_balance = remaining_capacity / np.max(bins_remain_cap)\n        capacity_balance_priority = capacity_balance\n\n        priorities[feasible] = (\n            10 * tight_fit_priority +\n            fill_ratio_priority +\n            0.5 * capacity_balance_priority\n        )\n    else:\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 3.948942959712818,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tight_fit_weight: float = 0.6,\n                fill_ratio_weight: float = 0.3, capacity_weight: float = 0.1,\n                exploration_factor: float = 0.01, small_number: float = 1e-6) -> np.ndarray:\n    \"\"\"Combines tight-fit, fill ratio, and capacity with controlled exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        max_capacity = np.max(bins_remain_cap)\n        normalized_capacity = remaining_capacity / max_capacity\n\n        fit_difference = remaining_capacity - item\n        tight_fit = 1.0 / (fit_difference + small_number)\n\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n\n        priorities[feasible] = (\n            capacity_weight * normalized_capacity\n            + tight_fit_weight * tight_fit\n            + fill_ratio_weight * fill_ratio\n        )\n\n        priorities[feasible] += np.random.rand(np.sum(feasible)) * exploration_factor\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 82.60869565217392,
    "exec_success": true
  }
]