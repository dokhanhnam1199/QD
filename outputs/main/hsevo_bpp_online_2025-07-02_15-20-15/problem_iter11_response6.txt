```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: feasibility, fill ratio, and near-full bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        fill_ratio = item / bins_remain_cap[feasible]
        max_cap = np.max(bins_remain_cap)
        priorities[feasible] = fill_ratio * np.exp(-remaining_capacity_after_placement / (max_cap if max_cap > 0 else 1))

        nearly_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= 0.1 * max_cap if max_cap > 0 else 1)
        priorities[feasible][nearly_full] += 0.5
    else:
        priorities = -np.arange(len(bins_remain_cap))
    return priorities
```
