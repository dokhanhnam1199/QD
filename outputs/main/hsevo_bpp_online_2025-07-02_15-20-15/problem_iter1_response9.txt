```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a default low value
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities # No bin can fit the item, return lowest possible priorities.

    # Calculate waste if item is placed in the bin
    waste = bins_remain_cap - item

    # Prioritize bins based on different strategies:
    # 1. Minimize waste (First-Fit Decreasing variant): Favor bins with less remaining space after placement
    priorities[valid_bins] = -waste[valid_bins]  # Smaller waste = higher priority

    # 2. Avoid fragmentation (Encourage filling bins as much as possible):
    fill_ratios = item / bins_remain_cap
    priorities[valid_bins] += 5 * fill_ratios[valid_bins] # Reward higher fill ratios

    # 3. Avoid bins that are ALMOST full after adding the item (Leave enough room for future smaller items):
    nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap) # Bins with waste less than 10% of bin capacity
    priorities[nearly_full] -= 10  # Penalize nearly full bins

    # 4. Boost bins with nearly the same size remaining capacity as the item
    same_size = np.isclose(bins_remain_cap, item)
    priorities[same_size] += 20

    # 5. Consider the amount of remaining capacity as a tie-breaker
    priorities[valid_bins] += 0.01 * bins_remain_cap[valid_bins]  # Higher remaining capacity, slightly higher priority (as a tie-breaker)

    return priorities
```
