```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Invalidate infeasible bins immediately
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Prioritize feasible bins
    feasible = item <= bins_remain_cap
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        
        # Exponential decay based on remaining capacity.  Smaller remaining space = higher priority.
        # Normalized by max capacity to make the exponent scale-invariant.
        max_cap = np.max(bins_remain_cap)
        if max_cap > 0:
            priorities[feasible] = np.exp(-10 * remaining_capacity_after_placement / max_cap)
        else:
            priorities[feasible] = 1.0 # handle the edge case where max_cap is zero
    else:
        # All bins are infeasible. Distribute to minimize the bin index to start new bins from start.
        priorities = -np.arange(len(bins_remain_cap))
        
    return priorities
```
