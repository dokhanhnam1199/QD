```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get a zero priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    # Calculate fill ratio for feasible bins
    feasible = item <= bins_remain_cap
    
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        
        # Prioritize bins based on fill ratio.
        priorities[feasible] = 1 - fill_ratio  # Higher fill ratio (less space left) gets higher priority

        # Add a small bonus to bins that are close to full after adding item,
        # but not too close (avoid tiny slivers). Experiment with the threshold.

        near_full_threshold = 0.1  # Adjust this value based on experiments
        near_full = (remaining_capacity - item) <= near_full_threshold * np.max(bins_remain_cap)
        priorities[feasible][near_full & (priorities[feasible] > -np.inf)] += 0.2  # small bonus

    # Handle the case where no bin is feasible
    else:
        priorities = -np.arange(len(bins_remain_cap)) # Prefer bins earlier in the list if nothing fits

    return priorities
```
