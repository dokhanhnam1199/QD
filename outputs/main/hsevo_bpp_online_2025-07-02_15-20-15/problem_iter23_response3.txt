```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tight-fit, fill ratio, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        tight_fit = 1.0 / (remaining_capacity - item + 0.0001)
        fill_ratio = (remaining_capacity - item) / (remaining_capacity + 0.0001) #avoid zero division.
        priorities[feasible] = 0.7 * tight_fit + 0.3 * fill_ratio + np.random.rand(np.sum(feasible)) * 0.001

    return priorities
```
