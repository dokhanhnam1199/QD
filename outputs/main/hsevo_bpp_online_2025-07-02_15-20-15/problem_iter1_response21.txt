```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a more nuanced approach, considering both the fit and the fullness
    of the bin. We prioritize bins that can accommodate the item reasonably well
    without leaving excessive unused space.  We add a bit of randomness to avoid
    getting stuck in local minima, mimicking the inherent uncertainty of the
    universe. Inspired by space-time distortion, where the item 'bends' the
    bin capacity landscape.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Fit Score: Prioritize better fits, not just any fit
            fit_score = np.exp(-((cap - item) / item)**2) # Gaussian-like preference for closer fits

            # Fullness Score: Discourage excessive remaining space after packing
            fullness_score = np.tanh(item / cap) # Reward bins nearing completion

            # Space-Time Distortion - slightly modify the space to introduce variation
            distortion = np.random.normal(0, 0.01) # add some randomness

            priorities[i] = fit_score + fullness_score + distortion
        else:
            priorities[i] = -np.inf  # Cannot fit, extremely low priority

    return priorities
```
