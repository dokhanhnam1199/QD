{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                fill_ratio_weight: float = 0.7271042568122124, capacity_penalty_weight: float = 0.38963480299290126, random_priority_scale: float = 0.014671592009535394) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        # Prioritize bins that result in higher fill ratios\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.\n        wasted_capacity = remaining_capacity - item\n        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize\n        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine self-reflection for better heuristic design, focusing on avoiding pitfalls and emphasizing effective strategies.\n\n*   **Keywords:** Multi-criteria, normalization, infeasibility handling, controlled exploration, adaptive weighting.\n*   **Advice:** Design heuristics considering *multiple* normalized factors like fit, fill, and capacity. Implement controlled, *adaptive* exploration strategies instead of static randomness.\n*   **Avoid:** Overly complex logic *without justification*. Fixating on post-placement metrics, and numerous static bonuses/penalties.\n*   **Explanation:** Effective heuristics balance diverse factors with adaptable weights. Normalization prevents domination. Graceful infeasibility handling and controlled exploration enhances robustness. Avoid over-engineering without clear benefits.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}