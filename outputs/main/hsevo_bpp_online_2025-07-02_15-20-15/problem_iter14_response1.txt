```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tight fit and remaining capacity.
    Handles infeasible bins and encourages exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap

    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible] - item
        priorities[feasible] = (1 / remaining_capacity) if np.all(remaining_capacity != 0) else 0

        # Boost partially full bins
        current_fill_ratio = (bins_remain_cap[feasible] - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        priorities[feasible] += 0.2 * current_fill_ratio  # Reduced boost

    else:
        # Prioritize emptiest bin with noise if no feasible bins
        priorities = np.random.rand(len(bins_remain_cap)) * 0.001 - bins_remain_cap

    return priorities
```
