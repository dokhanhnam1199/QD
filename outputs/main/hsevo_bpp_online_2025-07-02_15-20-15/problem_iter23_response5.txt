```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tight fits using normalized remain capacity & fill ratio."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        fit = remaining_capacity - item
        normalized_fit = 1.0 / (fit / np.max(bins_remain_cap) + 0.001)
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        priorities[feasible] = normalized_fit * 0.7 + fill_ratio * 0.3
        priorities[feasible] += np.random.rand(len(remaining_capacity)) * 0.01
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
