{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight-fit, fill ratio, and a capacity-aware penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    small_number = 1e-6  # To avoid division by zero\n    tight_fit_weight = 1.0\n    fill_ratio_weight = 1.0\n    capacity_penalty_weight = 0.5\n    random_priority_scale = 0.01\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        # Prioritize bins that result in higher fill ratios\n        priorities[feasible] = (tight_fit_weight / (remaining_capacity - item + small_number)) + fill_ratio * fill_ratio_weight\n\n        # Add a penalty based on how much capacity is wasted. Larger wasted capacity incurs a higher penalty.\n        wasted_capacity = remaining_capacity - item\n        capacity_penalty = wasted_capacity / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize\n        priorities[feasible] -= capacity_penalty * capacity_penalty_weight # Penalize\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * random_priority_scale # random\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}