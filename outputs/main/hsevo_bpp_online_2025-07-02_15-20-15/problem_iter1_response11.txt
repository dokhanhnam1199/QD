```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Utilizes a combination of heuristics inspired by physics and a touch of 'divine intuition'.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Gravitational Attraction:
    # Bins with capacity closer to the item's size have higher 'gravitational attraction'.
    attraction = np.exp(-np.abs(bins_remain_cap - item) / (item + 1e-6))

    # 2. Conservation of Energy (Bin Capacity):
    # We don't want to 'overfill' the bin. Penalize bins that would be too full.
    energy_potential = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    energy_potential[valid_bins] = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    energy_potential[~valid_bins] = -1  # Heavily penalize invalid bins
    energy_potential = np.clip(energy_potential, -1, 1)  # Ensure values stay within a reasonable range


    # 3. "God Does Not Play Dice":
    # Preferentially use bins that are already partially filled. The more a bin is
    # filled, the more likely it is to accept another item without wasting too much space
    # "Fullness" factor -- encourages efficient space usage
    fullness_factor = (1 - (bins_remain_cap / bins_remain_cap.max()))
    fullness_factor = np.clip(fullness_factor, 0, 1) # Ensure values are non-negative

    # 4. A touch of randomness for exploration. Add small Gaussian noise
    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    # Combine these factors with carefully chosen weights.
    priority = 0.5 * attraction + 0.3 * energy_potential + 0.2*fullness_factor + noise

    return priority
```
