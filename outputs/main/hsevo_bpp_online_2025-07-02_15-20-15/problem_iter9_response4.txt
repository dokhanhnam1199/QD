```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap

    if np.any(feasible):
        # Calculate the fill ratio if the item were placed in the bin.
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / bins_remain_cap[feasible]

        # Normalize the remaining capacity and fill ratio.
        normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity_after_placement)
        normalized_fill_ratio = fill_ratio

        # Combine normalized fill ratio and remaining capacity to create the priority.
        # Experiment with the weights to fine-tune the performance.
        priorities[feasible] = 0.7 * normalized_fill_ratio + 0.3 * np.exp(-5 * normalized_remaining_capacity)

    else:
        # If no feasible bins, prioritize based on bins with smallest remaining cap
        # Encourages creation of new bins only when necessary
        priorities = -bins_remain_cap

    return priorities
```
