```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        normalized_capacity = remaining_capacity / np.max(bins_remain_cap)
        fill_ratio = (remaining_capacity - item) / remaining_capacity
        fill_ratio = np.clip(fill_ratio, 0, 1)
        priorities[feasible] = normalized_capacity + fill_ratio * 0.5 + np.random.rand(np.sum(feasible)) * 0.01
    else:
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001
    return priorities
```
