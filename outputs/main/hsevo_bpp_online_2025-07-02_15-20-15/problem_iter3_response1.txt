```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, penalize bins that are too small.  We strongly discourage putting items
    # in bins where they will cause an overflow.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  # Never pick if infeasible
    
    # For feasible bins, let's prioritize based on remaining capacity after placement.
    feasible = item <= bins_remain_cap
    
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        
        # Prioritize based on a combination of factors:
        # 1. Remaining capacity: Smaller remaining capacity is better (tighter fit).
        # 2. Bin fullness: Bins that are already somewhat full are preferred.

        # Normalize remaining capacity to a 0-1 range.
        normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity_after_placement)
        
        # Normalize current bin fullness (1 - remaining capacity / max capacity).
        normalized_bin_fullness = 1 - bins_remain_cap[feasible] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap[feasible])
        
        # Combine the two factors to calculate priority. Experiment with weights.
        priority_values = 0.7 * np.exp(-5 * normalized_remaining_capacity) + 0.3 * normalized_bin_fullness
        
        priorities[feasible] = priority_values

    # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.
    if not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap))
        
    return priorities
```
