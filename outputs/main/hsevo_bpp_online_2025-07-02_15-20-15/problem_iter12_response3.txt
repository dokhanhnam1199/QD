```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility check: Absolutely crucial to set these to -inf *first*.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # If no feasible bins, prioritize adding to a new bin.
    if np.all(infeasible):
        priorities = -np.arange(len(bins_remain_cap))  # Prioritize lower-indexed empty bins

        return priorities

    # Feasible bins: Prioritize based on fill ratio *after* placement.
    feasible = item <= bins_remain_cap
    remaining_capacity_after_placement = bins_remain_cap[feasible] - item
    
    # Calculate fill ratio: Higher is better.  Add a small constant to avoid division by zero,
    # but keep it *small* so it doesn't swamp the signal.  Also, scale to 0..1 range
    fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / (bins_remain_cap[feasible] + 1e-9)
    priorities[feasible] = fill_ratio
    
    # Add a tie-breaker to ensure deterministic behavior for bins with the same fill ratio
    # This prioritizes bins with lower index, adding items to bins "from the left" in the array.
    priorities[feasible] += -np.arange(np.sum(feasible)) * 1e-6 

    return priorities
```
