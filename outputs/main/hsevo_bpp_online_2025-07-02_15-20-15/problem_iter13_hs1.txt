import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                  exponent_factor: float = 8.24682799392918, 
                  nearly_full_threshold: float = 0.18273329463742993, 
                  nearly_full_bonus: float = 0.49129374620929134) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining capacity, and nearly full bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = item <= bins_remain_cap

    if np.any(feasible):
        fill_ratio = item / bins_remain_cap[feasible]
        remaining_capacity = bins_remain_cap[feasible] - item
        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1
        normalized_remaining = remaining_capacity / max_cap
        priorities[feasible] = fill_ratio * np.exp(-exponent_factor * normalized_remaining)

        waste = bins_remain_cap[feasible] - item
        nearly_full = (waste > 0) & (waste < nearly_full_threshold * bins_remain_cap[feasible])
        priorities[feasible][nearly_full] += nearly_full_bonus
    else:
        priorities = -np.arange(len(bins_remain_cap))

    return priorities
