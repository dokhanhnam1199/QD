{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Hybrid heuristic: Tighter fit (reciprocal) with fill ratio consideration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" into something more actionable for designing better bin packing heuristics, while avoiding the pitfalls of \"Ineffective Self-Reflection.\" We'll focus on clarity, concrete suggestions, and avoiding complexity without justification.\n\nHere's a redefined \"Current Self-Reflection\":\n\n*   **Keywords:** Tight-fit, controlled randomness, normalization, infeasibility handling, reciprocal capacity, balanced factors, exploration\n\n*   **Advice:** Start with a small, well-defined set of priority factors (e.g., tightness of fit, fill ratio) and *systematically* introduce complexity if needed. Experiment with reciprocal remaining capacity instead of exponential decay. Use controlled randomness (e.g., epsilon-greedy) to explore new bin openings.\n\n*   **Avoid:** Overly complex combinations of factors without a clear, testable hypothesis. Relying solely on bonuses/penalties without a solid baseline heuristic. Prematurely normalizing all priority scores, especially without understanding individual factor distributions.\n\n*   **Explanation:** The goal is to create interpretable heuristics. Track the impact of each added factor. Focus on a reciprocal remaining capacity to emphasize tight fits while avoiding the potential for exponential decay to overly prioritize certain bins. Handle infeasibility explicitly and with minimal impact on other parts of heuristic.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}