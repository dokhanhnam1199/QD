```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates a "near miss" bonus and a penalty for bins that are too small.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalty for bins that cannot contain the item
    priorities[bins_remain_cap < item] = -np.inf  # Or a very large negative number

    # Calculate "near miss" bonus - bins only slightly larger than the item get high priority
    near_miss_threshold = item * 1.2 #tuneable, percentage above item size to be "near miss"
    near_miss_bonus = np.exp(-np.abs(bins_remain_cap - item) / (item*0.1))  # Gaussian-like bonus near item size.  0.1 is tunable.
    near_miss_bonus[bins_remain_cap < item] = 0 # Avoid triggering near-miss for impossible fits
    priorities += near_miss_bonus

    # Fill rate priority- favors filling almost empty bins somewhat.
    fill_rate_priority = (bins_remain_cap - item)/bins_remain_cap
    fill_rate_priority[bins_remain_cap < item] = -np.inf
    priorities += fill_rate_priority # Consider scaling if one influence is too strong

    #Remaining capacity priority (modified first-fit)
    priorities += bins_remain_cap / np.sum(bins_remain_cap)

    return priorities
```
