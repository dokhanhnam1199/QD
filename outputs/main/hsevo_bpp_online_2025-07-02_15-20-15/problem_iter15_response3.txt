```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic for online bin packing, combining remaining capacity,
    fill ratio, and a touch of exploration to improve bin utilization.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.

    Returns:
        np.ndarray: An array of priority scores for each bin.  Higher score = higher priority.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mark infeasible bins with a very low priority. Adding a tiny random number
    # ensures we still explore new bins if all bins are initially infeasible.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf + np.random.rand(np.sum(infeasible)) * 0.00001

    # Calculate priorities for feasible bins. The goal is to find a bin that
    # can accommodate the item without wasting too much space.
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        space_waste = remaining_capacity - item  # positive, smaller is better

        # A small constant is added to prevent division by zero or extreme values
        # when bins are almost full or exactly full.
        epsilon = 0.001

        # Fill ratio aims to pack bins tightly.
        fill_ratio = item / remaining_capacity # closer to 1 is better

        # Combine the space waste and fill ratio to create a balanced priority.
        # Reciprocal of space waste favors bins with smaller waste.
        # Fill ratio encourages efficient packing.
        priorities[feasible] = (1.0 / (space_waste + epsilon)) + fill_ratio * 0.5

        # Normalize priorities to prevent domination by one factor
        max_priority = np.max(priorities[feasible])
        min_priority = np.min(priorities[feasible])
        if max_priority - min_priority > 0:
            priorities[feasible] = (priorities[feasible] - min_priority) / (max_priority - min_priority)

        # Add a small random component to encourage exploration.
        priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.01

    # If no bin is feasible, initialize new bins implicitly by giving all existing bins a small random priority.
    # This helps exploration when all bins are near full.
    else:
        priorities = np.random.rand(len(bins_remain_cap)) * 0.0001


    return priorities
```
