```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get a very low priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    feasible = item <= bins_remain_cap
    
    if np.any(feasible):
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        
        # Prioritize tighter fits using a combination of exponential and inverse functions.
        # This provides a balance between favoring near-full bins and avoiding extremely small gaps.
        
        # Exponential term: rewards bins that are close to full
        exp_term = np.exp(-4 * remaining_capacity_after_placement / np.max(bins_remain_cap[feasible])) if np.max(bins_remain_cap[feasible]) > 0 else 1
        
        # Inverse term: strongly penalizes small gaps
        inverse_term = 1 / (remaining_capacity_after_placement + 0.01)  # Add a small constant to avoid division by zero
        
        # Combine the two terms to balance tightness and avoid tiny gaps.
        priorities[feasible] = exp_term * inverse_term

        # Add a slight bonus for bins that are more than half-full after placement
        half_full_threshold = np.max(bins_remain_cap) / 2
        more_than_half_full = bins_remain_cap[feasible] - item > half_full_threshold
        priorities[feasible][more_than_half_full] *= 1.1  # Give a 10% bonus
        
    else:
        # If no feasible bins, prioritize based on how much the item *exceeds* the bin capacity.
        # This is a heuristic to try to get the item into a bin that's "close" to fitting.
        # We invert the amount of overflow so that smaller overflows get higher priority (less negative).
        overflow = item - bins_remain_cap
        priorities = -overflow
    
    return priorities
```
