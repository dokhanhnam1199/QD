```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is eligible only if it can contain the item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities # No bin can fit the item. All bins have zero priority.

    # 1. First-Fit Decreasing Heuristic inspired - Consider remaining capacity
    remaining_capacity_priority = bins_remain_cap - item # positive only if eligible

    #Prioritize bins with smallest waste possible, but only when they can contain the item
    remaining_capacity_priority[~eligible_bins] = -np.inf #make sure only consider possible candidates

    priorities = remaining_capacity_priority


    # 2. Try to avoid bins that are almost full if other bins are more empty.
    # If the item fills the bin nearly entirely, that might be less efficient later.

    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap < 1.1*item) #tune parameters to your distribution, avoid bins just a bit larger than item
    priorities[nearly_full] -= 0.1 #mild penalization. Adjust as needed.


    # 3. If the item is really big, prioritize almost-full bins to not waste space. This handles large items separately. If the item is a relatively small fraction of bin size (e.g. <10% of bin capacity), then it makes sense to prefer more available capacity to allow for later large items that may come up, but we don't penalize "filling up" a bin as heavily. if item > 0.7, change strategy.
    if item > 0.7 :
        priorities = bins_remain_cap - item  # Focus on smallest waste for LARGE item
        priorities[~eligible_bins] = -np.inf
        priorities +=0.1 #slight boost


    # 4. Prioritize bins according to how well the item "fits". This is good for general item sizes.
    #    Want items where item/rem_cap is close to 1, but we already approximated that at step 1.

    return priorities
```
