```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio & exponential decay of remaining capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate remaining capacity if item is added
    remaining_after_add = bins_remain_cap - item

    # Fill ratio for feasible bins
    feasible_mask = bins_remain_cap >= item
    fill_ratios = item / bins_remain_cap[feasible_mask]
    
    # Exponential decay based on remaining capacity
    exp_decay = np.exp(-4 * remaining_after_add[feasible_mask] / np.max(bins_remain_cap)) if np.any(feasible_mask) and np.max(bins_remain_cap) > 0 else 1
    priorities[feasible_mask] = fill_ratios * exp_decay


    return priorities
```
