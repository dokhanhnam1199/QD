```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Idea:
    # 1. Heavily penalize bins that cannot fit the item.
    # 2. Prioritize bins where the item fills a significant portion of the bin
    #    but avoid bins that will become too full (small remaining space).
    # 3. Add a small random component to break ties and encourage exploration.

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Prioritize bins that can fit the item. Higher the percentage of item/bin size better it is
    feasible_mask = bins_remain_cap >= item
    fill_ratios = item / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = fill_ratios # Favor bins that item fills well

    # Moderate penalty for bins becoming near-full after adding the item
    near_full_mask = (remaining_after_add > 0) & (remaining_after_add < 0.1) #remaining capacity less than 10%
    priorities[near_full_mask] -= 0.2

    # Slight boost for bins that will still have substantial remaining capacity. This is crucial.
    substantial_remain_mask = (remaining_after_add >= 0.3)
    priorities[substantial_remain_mask] += 0.1

    # Add a small random number to break ties and explore
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
