[
  {
    "stdout_filepath": "problem_iter17_response0.txt_stdout.txt",
    "code_path": "problem_iter17_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits, fill ratio, and exploration.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = (item) / (bins_remain_cap[feasible] + 0.0001)\n\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response1.txt_stdout.txt",
    "code_path": "problem_iter17_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits, fill ratio, and exploration with noise.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response2.txt_stdout.txt",
    "code_path": "problem_iter17_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits, fill ratio, and controlled randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response3.txt_stdout.txt",
    "code_path": "problem_iter17_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid heuristic: tight-fit (reciprocal), fill ratio, exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / remaining_capacity\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response4.txt_stdout.txt",
    "code_path": "problem_iter17_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: tight fit, fill ratio, controlled randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response5.txt_stdout.txt",
    "code_path": "problem_iter17_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid heuristic: Tight fit, fill ratio, and controlled exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -1e-6 + np.random.rand(np.sum(infeasible)) * 0.0001\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fit_priority = 1.0 / (remaining_capacity - item + 0.001)\n        fill_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response6.txt_stdout.txt",
    "code_path": "problem_iter17_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits, uses reciprocal remaining capacity,\n    and adds exploration with controlled randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        priorities[feasible] = 1 / (remaining_capacity + 1e-9)\n\n        # Boost partially full bins\n        current_fill_ratio = (bins_remain_cap[feasible] - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += current_fill_ratio * 0.1\n\n    else:\n        # Prioritize emptiest bin with noise if no feasible bins\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response7.txt_stdout.txt",
    "code_path": "problem_iter17_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits, fill ratio, and adds controlled noise.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        priorities[feasible] = 1 / (remaining_capacity + 1e-9)\n\n        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += fill_ratio * 0.1\n\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response8.txt_stdout.txt",
    "code_path": "problem_iter17_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on tightness of fit and fill ratio,\n    with controlled randomness for exploration.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n\n    if np.any(~infeasible):\n        feasible = ~infeasible\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tightness of fit\n        fit_priority = 1.0 / (remaining_capacity - item + 0.0001)\n\n        # Fill ratio\n        fill_ratio = item / (bins_remain_cap[feasible] + 0.0001)\n\n        priorities[feasible] = 0.7 * fit_priority + 0.3 * fill_ratio\n\n        # Boost partially full bins\n        waste = bins_remain_cap[feasible] - item\n        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible])\n        priorities[feasible][partially_full] += 0.5\n    else:\n        # Exploration when no feasible bin exists\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response9.txt_stdout.txt",
    "code_path": "problem_iter17_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tight fits with fill ratio and controlled randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n\n        # Boost partially full bins with small noise\n        waste = bins_remain_cap[feasible] - item\n        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible])\n        if np.any(partially_full):\n            priorities[feasible][partially_full] += np.random.normal(0, 0.01, size=np.sum(partially_full))\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response0.txt_stdout.txt",
    "code_path": "problem_iter18_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic for online bin packing. Prioritizes tighter fits with a controlled fill ratio,\n    and incorporates a small amount of randomness for exploration when no suitable bin is found.\n\n    This version aims to improve upon priority_v1 by:\n    1.  Using reciprocal remaining capacity for a sharper preference for tight fits.\n    2.  Employing a fill ratio that encourages efficient bin utilization.\n    3.  Adding a small exploration factor when no bin can accommodate the item to avoid getting trapped.\n    4.  Explicitly handling infeasible bins by assigning negative infinity priority.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mark infeasible bins with negative infinity priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate priorities for feasible bins\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (remaining_capacity - item) / remaining_capacity  # Calculate fill ratio\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.0001)) + fill_ratio * 0.2  # Combine tightness and fill ratio\n    else:\n        # If no feasible bin, introduce a small amount of randomness for exploration\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 60.75987235739928,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response1.txt_stdout.txt",
    "code_path": "problem_iter18_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Improved heuristic: Combines tight-fit, fill ratio, and controlled randomness with a more robust infeasibility handling.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasibility Handling: Explicitly penalize infeasible bins heavily.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf  #Or -1e9\n\n    # Feasible Bins: Calculate priorities based on tight-fit and fill ratio.\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        \n        # Tight-fit component: Reciprocal of the remaining capacity AFTER placing the item.\n        fit_ratio = (remaining_capacity - item + 0.001) \n        tight_fit = 1.0 / fit_ratio\n        \n        # Fill ratio component: Encourages bins that will be well-filled.\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        \n        # Combine components:  Adjust weights as needed.\n        priorities[feasible] = tight_fit + 0.2 * fill_ratio # Increased fill ratio weight\n        \n    else:\n        # If no feasible bins, prioritize bins with more capacity + tiny random noise to break ties.\n       priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001  # Keep random exploration for new bins\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 60.75987235739928,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response2.txt_stdout.txt",
    "code_path": "problem_iter18_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic for online bin packing: Combines tight-fit, fill ratio,\n    and controlled randomness for better bin utilization.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mark infeasible bins with a very low priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component: Reciprocal of wasted space, but avoid division by zero.\n        wasted_space = remaining_capacity - item\n        tight_fit_priority = 1.0 / (wasted_space + 0.001)\n\n        # Fill-ratio component: Encourages filling bins without overpacking.\n        fill_ratio = (remaining_capacity - item) / remaining_capacity\n        fill_ratio_priority = fill_ratio * 0.1\n\n        # Combine components:  Adjust weights as needed.\n        priorities[feasible] = tight_fit_priority + fill_ratio_priority\n\n        #Controlled randomness: Explore new bins with small probability\n        rand_indices = np.random.choice(np.where(feasible)[0], size=min(1,np.sum(feasible)), replace=False)\n        priorities[rand_indices] += np.random.rand(len(rand_indices)) * 0.01\n\n\n    else:\n        # If no feasible bin, add small random priority to potentially open a new bin.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 8.366573593936986,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response3.txt_stdout.txt",
    "code_path": "problem_iter18_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Improved heuristic: Combines tight-fit with fill ratio, controlled randomness for exploration,\n    and emphasizes a balance between bin utilization and avoiding excessive fragmentation.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Handle infeasible bins\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Calculate priorities for feasible bins\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component: Reciprocal of remaining capacity after packing\n        tight_fit = 1.0 / (remaining_capacity - item + 0.001)\n\n        # Fill ratio component: Encourages better bin utilization\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Combine tight-fit and fill ratio.  Adjust weights as needed.\n        priorities[feasible] = tight_fit * 0.7 + fill_ratio * 0.3\n\n        # Controlled randomness for exploration:  Preferentially explore empty/near-empty bins.\n        # Only apply to feasible bins and with low probability\n        if np.random.rand() < 0.01: #Exploration probability, adjustable.\n            empty_bin_bonus = (bins_remain_cap[feasible] == bins_remain_cap[feasible].max()) * 0.1 # Prefer largest bin if one exits\n\n            priorities[feasible] += empty_bin_bonus\n\n    else:\n        # If no feasible bins, prioritize bins with highest capacity (for creating new bins)\n        # Add a small amount of randomness to break ties.\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 79.2481053051456,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response4.txt_stdout.txt",
    "code_path": "problem_iter18_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristic: Combines tight-fit reciprocal with fill ratio and controlled exploration.\n    Prioritizes tighter fits and higher fill ratios, with a small chance to explore new bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Handle infeasible bins (item larger than remaining capacity)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n\n        # Tight-fit component: Reciprocal of remaining capacity after placing the item\n        tight_fit = 1.0 / (remaining_capacity - item + 0.001)\n\n        # Fill ratio component: How full the bin would be after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n\n        # Combine components: Weighted sum of tight-fit and fill ratio\n        priorities[feasible] = tight_fit * 0.7 + fill_ratio * 0.3\n\n        # Exploration component: Small probability to choose a less-filled bin\n        exploration_prob = 0.01  # Probability of exploring a less filled bin\n        if np.random.rand() < exploration_prob:\n            priorities[feasible] += np.random.rand(np.sum(feasible)) * 0.01  # Add small random value\n    else:\n          # If no feasible bin, prioritize bins with more capacity (or small random if all are effectively equal).\n          priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 79.18827283605904,
    "exec_success": true
  }
]