[
  {
    "stdout_filepath": "problem_iter14_response0.txt_stdout.txt",
    "code_path": "problem_iter14_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid heuristic: Tighter fit (reciprocal) with fill ratio consideration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        priorities[feasible] = (1.0 / (remaining_capacity - item + 0.001)) + fill_ratio * 0.1\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response1.txt_stdout.txt",
    "code_path": "problem_iter14_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tight fit and remaining capacity.\n    Handles infeasible bins and encourages exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        priorities[feasible] = (1 / remaining_capacity) if np.all(remaining_capacity != 0) else 0\n\n        # Boost partially full bins\n        current_fill_ratio = (bins_remain_cap[feasible] - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += 0.2 * current_fill_ratio  # Reduced boost\n\n    else:\n        # Prioritize emptiest bin with noise if no feasible bins\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.001 - bins_remain_cap\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.357798165137619,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response2.txt_stdout.txt",
    "code_path": "problem_iter14_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on feasibility, fill ratio, and encourages new bins if needed.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        priorities[feasible] = item / bins_remain_cap[feasible] # reciprocal of remain_cap\n\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_capacity = np.max(bins_remain_cap)\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1\n    else:\n        priorities = np.random.rand(len(bins_remain_cap)) / 1000 - bins_remain_cap/ np.max(bins_remain_cap)\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response3.txt_stdout.txt",
    "code_path": "problem_iter14_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on reciprocal remaining capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    feasible = ~infeasible\n\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        priorities[feasible] = 1.0 / remaining_capacity  # Reciprocal of remaining capacity\n\n        # Boost partially full bins with noise (exploration)\n        waste = bins_remain_cap[feasible] - item\n        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible]) # adjust constant 0.2\n        if np.any(partially_full):\n          priorities[feasible][partially_full] += np.random.normal(0, 0.1, size=np.sum(partially_full))\n\n    else:\n        # Prioritize emptiest bins with random noise (encourage new bin usage)\n        # avoid -np.inf\n        priorities = np.random.rand(len(bins_remain_cap)) #random exploration if all bins are infeasible\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response4.txt_stdout.txt",
    "code_path": "problem_iter14_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness of fit and bin initialization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        # Use reciprocal of remaining capacity for tight fit\n        priorities[feasible] = 1 / (remaining_capacity_after_placement + 1e-9) #Small epsilon to avoid div by zero\n        \n        #Boost bins already somewhat full\n        max_cap = np.max(bins_remain_cap)\n        current_fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / (max_cap if max_cap > 0 else 1)\n\n        priorities[feasible] += 0.3 * current_fill_ratio  # Scale down the impact to avoid dominating fit_ratio\n\n    else:\n        #Prioritize emptiest bins, with slight random noise for exploration.\n        priorities = np.random.rand(len(bins_remain_cap)) * 0.001 - bins_remain_cap #Noise and prioritze smaller rem cap\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response5.txt_stdout.txt",
    "code_path": "problem_iter14_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize tight fits, penalize infeasibility, and add tie-breaker.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    if np.all(infeasible):\n        priorities = -np.arange(len(bins_remain_cap))\n        return priorities\n\n    feasible = item <= bins_remain_cap\n    remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n    \n    priorities[feasible] = 1 / (remaining_capacity_after_placement + 1e-9)\n    \n    priorities[feasible] += -np.arange(np.sum(feasible)) * 1e-6\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response6.txt_stdout.txt",
    "code_path": "problem_iter14_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes tighter fits while ensuring feasibility.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        priorities[feasible] = 1.0 / (remaining_capacity + 0.001)\n        priorities[feasible] += (bins_remain_cap[feasible].max() - bins_remain_cap[feasible]) * 0.1\n\n    else:\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response7.txt_stdout.txt",
    "code_path": "problem_iter14_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on reciprocal remaining capacity and noise for infeasible bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.random.rand(np.sum(infeasible)) # Noise for infeasible\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        priorities[feasible] = 1 / remaining_capacity  # Reciprocal of remaining capacity\n\n        # Boost partially full bins.\n        waste = bins_remain_cap[feasible] - item\n        partially_full = (waste > 0) & (waste < 0.2 * bins_remain_cap[feasible])\n        priorities[feasible][partially_full] += 0.5  # Larger boost for partially full.\n    else:\n        priorities = -np.arange(len(bins_remain_cap)) # Prioritize emptiest if no feasible\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response8.txt_stdout.txt",
    "code_path": "problem_iter14_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: reciprocal remaining capacity, partially full bonus, noise for infeasible.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    \n    if np.any(infeasible):\n        priorities[infeasible] = np.random.normal(0, 0.001, size=np.sum(infeasible)) # Small noise for infeasible bins\n        priorities[infeasible] -= np.arange(np.sum(infeasible))\n    \n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        priorities[feasible] = 1 / remaining_capacity #reciprocal of remaining capacity\n\n        partially_full = (remaining_capacity - item) > 0\n        partially_full_nearly_full = partially_full & ((remaining_capacity - item) < 0.1 * np.max(bins_remain_cap))\n        \n        if np.any(partially_full_nearly_full):\n            priorities[feasible][partially_full_nearly_full] += 1  # boost partially full\n    \n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response9.txt_stdout.txt",
    "code_path": "problem_iter14_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid approach prioritizing tight fits and exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratio = item / remaining_capacity\n        max_cap = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_cap if max_cap > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n        waste = remaining_capacity - item\n        near_full = (waste > 0) & (waste < 0.1 * max_cap)\n        priorities[feasible][near_full] += 0.2\n    else:\n        #Prioritize emptiest bin\n        priorities = bins_remain_cap\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]