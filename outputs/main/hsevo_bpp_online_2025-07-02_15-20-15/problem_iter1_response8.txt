```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item without excessive waste,
    but also avoids filling bins too early. It uses a combination of remaining capacity,
    item size, and a waste factor to generate the priority. Bins that can't fit the item
    receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give very low priority to bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Calculate waste for bins that can fit.
    feasible_bins = ~infeasible_bins
    waste = bins_remain_cap[feasible_bins] - item

    # Calculate a priority based on a combination of factors:
    # - Inverse of waste: Less waste is better (higher priority).
    #   We add a small constant to waste to avoid division by zero.
    # - Remaining capacity: We want to use bins, but not fill them completely.

    priorities[feasible_bins] = (1.0 / (waste + 0.01)) + (bins_remain_cap[feasible_bins] / np.sum(bins_remain_cap))
    # Normalize the priorities to be between 0 and 1, making interpretation easier.
    # This scaling helps to prevent large priority values dominating the decision-making.
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)  # add small value to avoid ZeroDivisionError

    return priorities
```
