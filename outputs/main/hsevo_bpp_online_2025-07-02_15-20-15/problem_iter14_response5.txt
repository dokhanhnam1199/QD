```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize tight fits, penalize infeasibility, and add tie-breaker."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    if np.all(infeasible):
        priorities = -np.arange(len(bins_remain_cap))
        return priorities

    feasible = item <= bins_remain_cap
    remaining_capacity_after_placement = bins_remain_cap[feasible] - item
    
    priorities[feasible] = 1 / (remaining_capacity_after_placement + 1e-9)
    
    priorities[feasible] += -np.arange(np.sum(feasible)) * 1e-6

    return priorities
```
