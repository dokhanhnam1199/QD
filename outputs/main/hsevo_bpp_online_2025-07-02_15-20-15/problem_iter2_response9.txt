```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio after placement and partially-filled bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining capacity after placing the item.
    remaining_capacity = bins_remain_cap - item
    
    # Calculate fill ratio, prioritizing smaller remaining capacity
    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap
    fill_ratio[bins_remain_cap < item] = -np.inf
    priorities += fill_ratio #Scale this effect down.
    
    #Bonus to bins that are not empty already:
    already_filled = bins_remain_cap < np.max(bins_remain_cap)
    priorities[already_filled] += 0.1 #Scale this effect down.

    return priorities
```
