```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, penalize bins that are too small.  We strongly discourage putting items
    # in bins where they will cause an overflow.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf  # Never pick if infeasible
    
    # For feasible bins, let's prioritize based on remaining capacity after placement.
    # Bins closer to full are slightly favored, but with a modification:
    # 1. Introduce a "waste threshold".  If the remaining capacity after placement is
    #    less than this threshold, strongly prefer the bin.
    # 2. Otherwise, prioritize based on a combination of fullness and absolute remaining capacity.
    
    feasible = item <= bins_remain_cap
    remaining_capacity_after_placement = bins_remain_cap[feasible] - item
    
    # Define a waste threshold (e.g., 10% of max capacity).  This is a hyperparameter to tune.
    waste_threshold = 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1

    # Identify bins with remaining capacity below the waste threshold.
    very_tight_fit = remaining_capacity_after_placement <= waste_threshold
    
    # Prioritize bins with very tight fits very highly.
    priorities[feasible][very_tight_fit] = 10  # Large value to strongly prefer these bins

    # For other feasible bins, combine fullness and absolute remaining capacity.
    other_feasible = feasible & ~very_tight_fit
    remaining_capacity_after_placement_others = bins_remain_cap[other_feasible] - item
    
    # Use a score combining remaining space and fullness.  Experiment with coefficients.

    priorities[other_feasible] = (np.exp(-2 * remaining_capacity_after_placement_others / np.max(bins_remain_cap)) + # Fullness (exponential decay)
                                    0.5 * (1 - remaining_capacity_after_placement_others / np.max(bins_remain_cap))) if np.max(bins_remain_cap) > 0 else 0.5 # Remaining space (linear)


    # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.
    if not np.any(feasible):
        priorities = -np.arange(len(bins_remain_cap))
        
    return priorities
```
