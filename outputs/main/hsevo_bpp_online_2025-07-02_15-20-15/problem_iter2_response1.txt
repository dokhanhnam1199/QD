```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio after placing the item and bonuses."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[infeasible_bins] = np.inf

    fill_ratios = 1 - (remaining_capacities / np.max(bins_remain_cap))
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]

    already_filled = bins_remain_cap < np.max(bins_remain_cap)
    priorities[already_filled & ~infeasible_bins] += 0.1

    near_full_mask = (remaining_capacities > 0) & (remaining_capacities < 0.1* np.max(bins_remain_cap))
    priorities[near_full_mask] -= 0.2

    substantial_remain_mask = (remaining_capacities >= 0.3* np.max(bins_remain_cap))
    priorities[substantial_remain_mask] += 0.1
    
    return priorities
```
