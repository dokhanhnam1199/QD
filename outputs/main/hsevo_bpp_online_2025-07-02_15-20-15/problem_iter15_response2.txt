```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function for online bin packing.

    This version prioritizes bins based on a combination of factors:
    1. Feasibility: Ensures the item fits in the bin.
    2. Remaining Capacity: Favors bins with tighter fits to reduce fragmentation.
    3. Fill Ratio: Encourages bins that are already relatively full.
    4. Bin Utilization: Balances packing into existing bins vs. opening new ones (exploration).

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.

    Returns:
        np.ndarray: An array of priority scores for each bin. Higher scores indicate higher priority.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Calculate priorities for feasible bins
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity = bins_remain_cap[feasible]
        capacity_after_packing = remaining_capacity - item

        # Tighter fit (reciprocal of remaining capacity after packing)
        fit_priority = 1.0 / (capacity_after_packing + 0.0001)  # Avoid division by zero

        # Fill ratio (how full the bin will be after packing)
        fill_ratio = (bins_remain_cap[feasible] - capacity_after_packing) / bins_remain_cap[feasible]

        # Combine fit and fill ratio
        priorities[feasible] = fit_priority + fill_ratio * 0.2  # Adjusted fill ratio weight

        # Encourage utilizing bins that are already somewhat full (exploration/exploitation balance)
        #Give higher priority to bins with remaining capacity in certain range.
        is_medium_full = (bins_remain_cap[feasible] > item) & (bins_remain_cap[feasible] <= 0.75)

        priorities[feasible][is_medium_full] += 0.1  # Bonus for bins that are already somewhat full
    else:
        # If no feasible bins, prioritize bins based on remaining capacity
        # to open a new bin intelligently (rather than randomly).
        # This attempts to minimize wasted space when forced to open a new bin.
        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001


    return priorities
```
