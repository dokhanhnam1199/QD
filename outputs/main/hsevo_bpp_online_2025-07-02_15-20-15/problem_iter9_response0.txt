```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get zero priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    feasible = item <= bins_remain_cap

    if np.any(feasible):
        # Calculate fill ratio after placing the item (normalized)
        remaining_capacity_after_placement = bins_remain_cap[feasible] - item
        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        #Prioritize bins with higher fill ratio.  Add a small amount to break ties.
        priorities[feasible] = fill_ratio + 1e-6 * np.arange(np.sum(feasible))

    else:
        # If no feasible bins, add to the end of the current list of bins (create a new one)
        priorities = -np.arange(len(bins_remain_cap))

    return priorities
```
