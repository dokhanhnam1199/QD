```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version prioritizes bins that can fit the item snugly
       while also discouraging near-full bins to avoid fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a negative infinite score to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate the waste if the item is placed in each feasible bin.
    waste = bins_remain_cap - item
    feasible_mask = ~infeasible_mask #redundant for clarity

    # Prioritize bins that result in smaller waste (snug fit).  Also, avoid bins that are almost full after adding item.
    priorities[feasible_mask] = np.exp(-10 * waste[feasible_mask] / bins_remain_cap.max()) - (item/bins_remain_cap[feasible_mask])  # Snug fit exponential with small negative item/cap term

    # Add a bonus for bins with moderate remaining capacity to promote balanced utilization
    moderate_cap_mask = (bins_remain_cap > item) & (bins_remain_cap < bins_remain_cap.max() / 2 + item)
    priorities[moderate_cap_mask] += 0.5

    # Small bonus for bins with enough space left in them
    large_cap_mask = bins_remain_cap > (2*item)
    priorities[large_cap_mask] += 0.1

    return priorities
```
