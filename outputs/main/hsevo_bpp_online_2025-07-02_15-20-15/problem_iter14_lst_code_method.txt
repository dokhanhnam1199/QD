{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasibility check - critical to avoid placing items into bins that are too small.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):  # At least one feasible bin\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        \n        # Prioritize tighter fits.  The reciprocal provides a strong preference for bins\n        # that are close to being full *after* the item is placed.  Adding a small constant\n        # avoids division by zero if an item perfectly fills a bin.\n        priorities[feasible] = 1.0 / (remaining_capacity_after_placement + 0.001)\n        \n        # Slightly boost priority for bins that are already relatively full.\n        # This encourages filling existing bins before opening new ones.\n        # The base is chosen to give meaningful differences in priority.\n        \n        priorities[feasible] += (bins_remain_cap[feasible].max() - bins_remain_cap[feasible]) * 0.1\n    else:\n        # All bins are infeasible.  Prioritize the emptiest bin, breaking ties by index\n        # This ensures we open a new bin when necessary.\n        # Give negative priority based on remaining capacity so bins with larger\n        # capacity are prioritized *less* negatively.  Add small noise to break ties by index\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001 # Use random number to avoid infinite loop when bins are all the same\n        \n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio and remaining capacity, rewarding fuller bins. Handles infeasible scenarios.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / bins_remain_cap[feasible]\n\n        normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity_after_placement)\n        normalized_fill_ratio = fill_ratio\n\n        priorities[feasible] = 0.7 * normalized_fill_ratio + 0.3 * np.exp(-5 * normalized_remaining_capacity)\n\n\n    else:\n        priorities = -bins_remain_cap\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: feasibility, fill ratio, exponential decay, nearly full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = (item / bins_remain_cap[feasible]) * np.exp(-5 * normalized_remaining_capacity)\n\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1 #small bonus\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                  exponent_factor: float = 7.680950338860305, \n                  nearly_full_threshold: float = 0.0864257844914425, \n                  nearly_full_bonus: float = 0.38195499308734604) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio, remaining capacity, and nearly full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n        normalized_remaining = remaining_capacity / max_cap\n        priorities[feasible] = fill_ratio * np.exp(-exponent_factor * normalized_remaining)\n\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < nearly_full_threshold * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += nearly_full_bonus\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: feasibility, fill ratio, and near-full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        priorities[feasible] = fill_ratio * np.exp(-remaining_capacity_after_placement / (max_cap if max_cap > 0 else 1))\n\n        nearly_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= 0.1 * max_cap if max_cap > 0 else 1)\n        priorities[feasible][nearly_full] += 0.5\n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasibility check: Absolutely crucial to set these to -inf *first*.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # If no feasible bins, prioritize adding to a new bin.\n    if np.all(infeasible):\n        priorities = -np.arange(len(bins_remain_cap))  # Prioritize lower-indexed empty bins\n\n        return priorities\n\n    # Feasible bins: Prioritize based on fill ratio *after* placement.\n    feasible = item <= bins_remain_cap\n    remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n    \n    # Calculate fill ratio: Higher is better.  Add a small constant to avoid division by zero,\n    # but keep it *small* so it doesn't swamp the signal.  Also, scale to 0..1 range\n    fill_ratio = (bins_remain_cap[feasible] - remaining_capacity_after_placement) / (bins_remain_cap[feasible] + 1e-9)\n    priorities[feasible] = fill_ratio\n    \n    # Add a tie-breaker to ensure deterministic behavior for bins with the same fill ratio\n    # This prioritizes bins with lower index, adding items to bins \"from the left\" in the array.\n    priorities[feasible] += -np.arange(np.sum(feasible)) * 1e-6 \n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasibility check - critical to avoid placing items into bins that are too small.\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):  # At least one feasible bin\n        remaining_capacity_after_placement = bins_remain_cap[feasible] - item\n        \n        # Prioritize tighter fits.  The reciprocal provides a strong preference for bins\n        # that are close to being full *after* the item is placed.  Adding a small constant\n        # avoids division by zero if an item perfectly fills a bin.\n        priorities[feasible] = 1.0 / (remaining_capacity_after_placement + 0.001)\n        \n        # Slightly boost priority for bins that are already relatively full.\n        # This encourages filling existing bins before opening new ones.\n        # The base is chosen to give meaningful differences in priority.\n        \n        priorities[feasible] += (bins_remain_cap[feasible].max() - bins_remain_cap[feasible]) * 0.1\n    else:\n        # All bins are infeasible.  Prioritize the emptiest bin, breaking ties by index\n        # This ensures we open a new bin when necessary.\n        # Give negative priority based on remaining capacity so bins with larger\n        # capacity are prioritized *less* negatively.  Add small noise to break ties by index\n        priorities = bins_remain_cap + np.random.rand(len(bins_remain_cap)) * 0.0001 # Use random number to avoid infinite loop when bins are all the same\n        \n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio, remaining capacity, and nearly full bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = item <= bins_remain_cap\n\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1\n        normalized_remaining = remaining_capacity / max_cap\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining)\n\n        waste = bins_remain_cap[feasible] - item\n        nearly_full = (waste > 0) & (waste < 0.1 * bins_remain_cap[feasible])\n        priorities[feasible][nearly_full] += 0.2 \n    else:\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using fill ratio, exponential decay, and handles infeasibility.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        \n        # Fill ratio multiplied by exponential decay\n        priorities[feasible] = (item / bins_remain_cap[feasible]) * np.exp(-5 * normalized_remaining_capacity)\n\n        # Small bonus for almost full bins.\n        near_full_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.1 #Reward nearly full\n    else:\n        priorities = -np.arange(len(bins_remain_cap))  # try empty bins\n        \n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio and remaining capacity, favoring nearly-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        fill_ratio = item / bins_remain_cap[feasible]\n        max_cap = np.max(bins_remain_cap)\n        normalized_remaining_capacity = bins_remain_cap[feasible] / max_cap if max_cap > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n        waste = bins_remain_cap[feasible] - item\n        near_full = (waste > 0) & (waste < 0.1 * max_cap)\n        priorities[feasible][near_full] += 0.2\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get absolute minimum priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    # Prioritize feasible bins based on a combination of factors:\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n\n        # 1. Fit Ratio: Prioritize bins where the item fills a large portion\n        #    of the remaining capacity.\n        fit_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] += fit_ratio\n\n        # 2. Avoid small remainders (fragmentation): Mild penalty for leaving very small gaps\n        small_remainder_penalty = np.where(remaining_capacity < 0.1 * np.max(bins_remain_cap), -0.1, 0) #Penalize if remain capacity is less than 10% of max capacity\n\n        priorities[feasible] += small_remainder_penalty\n        \n\n        # 3. Favor bins that are already somewhat full (but not too full, avoiding near misses)\n        #    This encourages using partially filled bins before opening new ones.\n        current_fill_ratio = (bins_remain_cap[feasible] + item - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += 0.5 * current_fill_ratio  # Scale down the impact to avoid dominating fit_ratio\n\n    else:\n         # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get absolute minimum priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    \n    # Prioritize feasible bins based on a combination of factors:\n    feasible = item <= bins_remain_cap\n    \n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible] - item\n\n        # 1. Fit Ratio: Prioritize bins where the item fills a large portion\n        #    of the remaining capacity.\n        fit_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] += fit_ratio\n\n        # 2. Avoid small remainders (fragmentation): Mild penalty for leaving very small gaps\n        small_remainder_penalty = np.where(remaining_capacity < 0.1 * np.max(bins_remain_cap), -0.1, 0) #Penalize if remain capacity is less than 10% of max capacity\n\n        priorities[feasible] += small_remainder_penalty\n        \n\n        # 3. Favor bins that are already somewhat full (but not too full, avoiding near misses)\n        #    This encourages using partially filled bins before opening new ones.\n        current_fill_ratio = (bins_remain_cap[feasible] + item - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible] += 0.5 * current_fill_ratio  # Scale down the impact to avoid dominating fit_ratio\n\n    else:\n         # If no bins are available, slightly penalize lower indexes to add to the end of list of empty bins.\n        priorities = -np.arange(len(bins_remain_cap))\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity,\n    with bonus for nearly full bins and fallback strategy.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratios = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        scale = np.max(bins_remain_cap)\n        \n        if scale > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)\n        else:\n            priorities[feasible] = fill_ratios\n\n        waste = bins_remain_cap - item\n        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)\n        priorities[nearly_full] += 0.5\n    else:\n        priorities = -bins_remain_cap\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity,\n    with bonus for nearly full bins and fallback strategy.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratios = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        scale = np.max(bins_remain_cap)\n        \n        if scale > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)\n        else:\n            priorities[feasible] = fill_ratios\n\n        waste = bins_remain_cap - item\n        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)\n        priorities[nearly_full] += 0.5\n    else:\n        priorities = -bins_remain_cap\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio and remaining capacity,\n    with bonus for nearly full bins and fallback strategy.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = item <= bins_remain_cap\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        fill_ratios = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]\n        scale = np.max(bins_remain_cap)\n        \n        if scale > 0:\n            priorities[feasible] = fill_ratios * np.exp(-5 * remaining_capacity / scale)\n        else:\n            priorities[feasible] = fill_ratios\n\n        waste = bins_remain_cap - item\n        nearly_full = feasible & (waste > 0) & (waste < 0.1 * bins_remain_cap)\n        priorities[nearly_full] += 0.5\n    else:\n        priorities = -bins_remain_cap\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & normalized remaining capacity with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Fill ratio after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible] if np.all(bins_remain_cap[feasible] > 0) else 0 # Avoid division by zero\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.2 # Slightly larger bonus\n\n    else:\n      # If no feasible bins, prioritize bins with the largest remaining capacity\n      priorities = bins_remain_cap\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & normalized remaining capacity with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Fill ratio after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible] if np.all(bins_remain_cap[feasible] > 0) else 0 # Avoid division by zero\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.2 # Slightly larger bonus\n\n    else:\n      # If no feasible bins, prioritize bins with the largest remaining capacity\n      priorities = bins_remain_cap\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & normalized remaining capacity with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Fill ratio after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible] if np.all(bins_remain_cap[feasible] > 0) else 0 # Avoid division by zero\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.2 # Slightly larger bonus\n\n    else:\n      # If no feasible bins, prioritize bins with the largest remaining capacity\n      priorities = bins_remain_cap\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & normalized remaining capacity with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Fill ratio after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible] if np.all(bins_remain_cap[feasible] > 0) else 0 # Avoid division by zero\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.2 # Slightly larger bonus\n\n    else:\n      # If no feasible bins, prioritize bins with the largest remaining capacity\n      priorities = bins_remain_cap\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by fill ratio & normalized remaining capacity with a bonus for nearly full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    feasible = ~infeasible\n    if np.any(feasible):\n        remaining_capacity = bins_remain_cap[feasible]\n        # Fill ratio after placing the item\n        fill_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible] if np.all(bins_remain_cap[feasible] > 0) else 0 # Avoid division by zero\n\n        # Exponential decay based on normalized remaining capacity.\n        max_capacity = np.max(bins_remain_cap)\n        normalized_remaining_capacity = remaining_capacity / max_capacity if max_capacity > 0 else 0\n        priorities[feasible] = fill_ratio * np.exp(-5 * normalized_remaining_capacity)\n\n        # Bonus for nearly full bins.\n        waste = bins_remain_cap[feasible] - item\n        near_full_mask = (waste > 0) & (waste < 0.1 * max_capacity)\n        priorities[feasible][near_full_mask] += 0.2 # Slightly larger bonus\n\n    else:\n      # If no feasible bins, prioritize bins with the largest remaining capacity\n      priorities = bins_remain_cap\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}