```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins, favoring tighter fits and filling existing bins. Combines aspects of v0 and v1."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_indices = np.where(bins_remain_cap >= item)[0]

    if len(fit_indices) > 0:
        wasted_space = bins_remain_cap[fit_indices] - item
        fill_ratio_if_added = (bins_remain_cap[fit_indices] - wasted_space) / bins_remain_cap[fit_indices]
        priorities[fit_indices] = (1 / (wasted_space + 1e-9)) + fill_ratio_if_added

        # Encourage filling existing bins (v1-inspired)
        normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        priorities[fit_indices] += 0.1 * normalized_capacity[fit_indices] # Add capacity to the correct indices.

    else:
        priorities = -np.inf * np.ones_like(bins_remain_cap, dtype=float)

    return priorities
```
