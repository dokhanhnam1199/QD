```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, adaptive penalty, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    valid_bins = np.where(can_fit)[0]
    bin_capacity = np.max(bins_remain_cap)

    # Waste Minimization
    waste = bins_remain_cap[can_fit] - item
    priorities[can_fit] = 1.0 / (1e-6 + waste)

    # Adaptive Near-Full Penalty
    near_full_threshold = 0.1 * bin_capacity
    is_near_full = bins_remain_cap[can_fit] < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.8 * (item / bin_capacity), 0.0)
    priorities[valid_bins] += near_full_penalty

    # Small item bonus
    small_item_threshold = 0.2 * bin_capacity
    if item < small_item_threshold:
      almost_full_threshold = 0.1 * bin_capacity
      almost_full_valid_bins = bins_remain_cap[can_fit] < almost_full_threshold + item
      almost_full_indices = np.where(can_fit)[0][almost_full_valid_bins]
      priorities[almost_full_indices] += 0.2

    # Adaptive Weighting and Randomness (dependent on item size and remaining capacity)
    item_size_factor = item / bin_capacity
    randomness_scale = 0.01 * (1 - item_size_factor) * (bins_remain_cap[can_fit] / bin_capacity)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))
    priorities[can_fit] += randomness
    return priorities
```
