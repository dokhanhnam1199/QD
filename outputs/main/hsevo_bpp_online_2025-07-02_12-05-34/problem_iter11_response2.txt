```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, near-full penalty, and adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target fill level
    target_fill_level = 0.75 * bins_remain_cap.max()
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))

    # Near-full penalty
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_penalty = np.where(remaining_after < near_full_threshold, -1.0 * (item / bins_remain_cap.max()), 0.0)

    # Adaptive Weighting
    item_size_ratio = item / bins_remain_cap.max()
    tightness_weight = 0.5 - 0.2 * item_size_ratio
    fill_weight = 0.2 + 0.2 * item_size_ratio
    near_full_weight = 0.2 + 0.1 * item_size_ratio

    tightness_weight = np.clip(tightness_weight, 0.1, 0.5)
    fill_weight = np.clip(fill_weight, 0.1, 0.4)
    near_full_weight = np.clip(near_full_weight, 0.1, 0.3)

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty)

    return priorities
```
