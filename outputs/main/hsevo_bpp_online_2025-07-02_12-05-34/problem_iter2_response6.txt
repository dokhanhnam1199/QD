```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and remaining capacity, with randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    fit_score = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)

    # Add a bit of randomness to avoid local optima
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1

    # Boost priority based on remaining capacity relative to average.
    avg_capacity = np.mean(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap[valid_bins] - avg_capacity)
    priorities[valid_bins] += 1.0 / (capacity_diff + 0.0001)

    return priorities
```
