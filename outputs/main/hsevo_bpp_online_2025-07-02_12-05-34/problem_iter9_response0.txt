```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating adaptive weighting,
    edge case handling, and stochastic elements.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, 0.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste minimization with adaptive weighting based on item size
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)
    tightness_weight = 0.5 if item > bins_remain_cap.max() * 0.5 else 0.3  # Smaller items, less emphasis on tightness

    # Target fill level with dynamic target
    target_fill_level = 0.75 * bins_remain_cap.max()
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))
    fill_weight = 0.3

    # Near-full penalty adjusted
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0) #Increased penalty
    near_full_weight = 0.2

    # Large item penalty: discourage placing large items into almost empty bins.
    large_item_threshold = bins_remain_cap.max() * 0.6
    if item > large_item_threshold:
        almost_empty_threshold = bins_remain_cap.max() * 0.9
        large_item_penalty = np.where(bins_remain_cap[can_fit] > almost_empty_threshold, -0.3, 0.0)
    else:
        large_item_penalty = 0.0

    large_item_weight = 0.1

    # Introduce stochasticity: slight random perturbation
    randomness = np.random.normal(0, 0.05, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               large_item_weight * large_item_penalty +
                               randomness)

    return priorities
```
