```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item almost perfectly.
    # This encourages filling bins as much as possible.

    fit_within_capacity = bins_remain_cap >= item
    if np.any(fit_within_capacity):
        # Calculate wasted space for bins that can fit. We want to MINIMIZE the waste
        wasted_space = bins_remain_cap[fit_within_capacity] - item
        #The least wasted space means higher priority
        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space) #Add a small number to avoid division by zero.
    
        #Heuristic for preventing too many almost full bins. Penalize almost full
        #but still valid bins less if there are not too many
        almost_full_mask = (wasted_space > 0) & (wasted_space < 0.1)
        
        if(np.sum(almost_full_mask)>0):
            num_available = np.sum(fit_within_capacity)

            priorities[fit_within_capacity] *= (1 + 0.1 * (num_available - np.sum(almost_full_mask))/num_available)

    #Heuristic: If no bin can fit the item, put the item into the largest possible bin. This may create a new bin eventually but prevents creating numerous partially empty bins.
    else:
        priorities = bins_remain_cap/item #Assigns high priority to largest remaining capacities

    return priorities
```
