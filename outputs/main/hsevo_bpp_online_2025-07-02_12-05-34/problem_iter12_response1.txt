```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic combining waste minimization, target fill, adaptive weighting,
    edge case handling, stochasticity, bin diversity, and learning from past decisions.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()

    # Waste Minimization (Efficiency)
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level (Balance)
    target_fill_level = 0.8 * bin_capacity  # Slightly higher target
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.15))  # Sharper peak at target

    # Near-Full Penalty (Resource Optimization)
    near_full_threshold = 0.15 * bin_capacity  # Adjusted threshold
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.8, 0.0)  # Stronger penalty

    # Small Item Bonus (Fragmentation Reduction)
    small_item_threshold = bin_capacity * 0.25  # Adjusted threshold
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.12  # Adjusted threshold
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0

    # Large Item Penalty (Strategic Placement)
    large_item_threshold = bin_capacity * 0.75  # Adjusted threshold
    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.15 * bin_capacity), -0.7, 0.0)  # Stronger penalty
    else:
        small_space_penalty = 0.0

    # Bin Diversity Encouragement
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    bin_diversity_bonus = np.zeros_like(bins_remain_cap[can_fit], dtype=float)
    for i, bin_index in enumerate(valid_bins):
        # Encourage bins with utilization close to the average
        bin_diversity_bonus[i] = np.exp(-np.abs(bin_utilization[bin_index] - np.mean(bin_utilization)) / 0.2)

    # Adaptive Weighting (Dynamic Adjustment)
    item_size_factor = item / bin_capacity  # Normalize item size
    tightness_weight = 0.35 * (1 - item_size_factor)  # Smaller items, prioritize tightness
    fill_weight = 0.35 * (1 + item_size_factor)  # Larger items, prioritize target fill
    near_full_weight = 0.15
    small_item_weight = 0.075
    large_item_weight = 0.075
    diversity_weight = 0.05  # Introduce weight for bin diversity

    # Stochasticity (Exploration)
    randomness = np.random.normal(0, 0.0075, len(valid_bins))  # Reduced randomness

    # Combination of Factors
    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               diversity_weight * bin_diversity_bonus +
                               randomness)

    return priorities
```
