```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Combines tightness, target fill, and adaptive item-based bonuses."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        priorities[:] = np.random.rand(len(priorities)) * 0.0001 # Add some randomness to deal with no-fit situation
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Tightness score
    tightness = 1 / (remaining_after + 0.0001)

    # Target fill score
    target_fill_level = 0.75 * bins_remain_cap.max()
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill_level)
    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))

    # Adaptive weights based on item size
    if item < bins_remain_cap.max() * 0.1:
        tightness_weight = 0.3
        fill_weight = 0.4
        small_item_bonus_weight = 0.3
        # Apply small item bonus when the item is quite small
        almost_full_threshold = bins_remain_cap.max() * 0.1
        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold)

    elif item > bins_remain_cap.max() * 0.5:
        tightness_weight = 0.6
        fill_weight = 0.3
        small_item_bonus_weight = 0.1
        almost_full_bonus = 0 # No bonus
    else:
        tightness_weight = 0.4
        fill_weight = 0.4
        small_item_bonus_weight = 0.2
        almost_full_bonus = 0 # No bonus

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               small_item_bonus_weight * almost_full_bonus)

    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1 # Add small randomness
    return priorities
```
