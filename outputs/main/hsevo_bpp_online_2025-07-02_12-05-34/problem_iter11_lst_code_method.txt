{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines waste minimization, target fill, adaptive weighting,\n    edge case handling, and stochasticity for improved bin packing.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, -1.0) # Significantly penalize no-fit situation\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n    bin_capacity = bins_remain_cap.max()\n\n    # Waste Minimization (Tightness)\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)  # Avoid division by zero\n\n    # Target Fill Level (Adaptive based on item size)\n    target_fill_level = 0.75 * bin_capacity\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))\n\n    # Near-Full Penalty (Adjusted threshold)\n    near_full_threshold = 0.1 * bin_capacity\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0)\n\n    # Small Item Bonus (Adaptive bonus)\n    small_item_threshold = bin_capacity * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bin_capacity * 0.1\n        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))\n    else:\n        almost_full_bonus = 0\n\n    # Large Item Penalty - discourage placing large items in bins with little space\n    large_item_threshold = bin_capacity * 0.8\n    if item > large_item_threshold:\n        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.1 * bin_capacity), -0.6, 0.0)\n    else:\n        small_space_penalty = 0.0\n\n    # Adaptive Weighting (Dynamically adjust based on item size and bin states)\n    item_size_factor = item / bin_capacity  # Normalize item size\n    tightness_weight = 0.4 #* (1 - item_size_factor) # Smaller items, prioritize tightness\n    fill_weight = 0.3 #* (1 + item_size_factor)   # Larger items, prioritize target fill\n    near_full_weight = 0.2\n    small_item_weight = 0.1\n    large_item_weight = 0.1\n\n    # Stochasticity (Add slight randomness to break ties)\n    randomness = np.random.normal(0, 0.01, len(valid_bins))\n\n    # Combine scores with weights\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus +\n                               large_item_weight * small_space_penalty +\n                               randomness)\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines waste minimization, target fill, adaptive weighting,\n    edge case handling, and stochasticity for improved bin packing.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, -1.0) # Significantly penalize no-fit situation\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n    bin_capacity = bins_remain_cap.max()\n\n    # Waste Minimization (Tightness)\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)  # Avoid division by zero\n\n    # Target Fill Level (Adaptive based on item size)\n    target_fill_level = 0.75 * bin_capacity\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))\n\n    # Near-Full Penalty (Adjusted threshold)\n    near_full_threshold = 0.1 * bin_capacity\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0)\n\n    # Small Item Bonus (Adaptive bonus)\n    small_item_threshold = bin_capacity * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bin_capacity * 0.1\n        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))\n    else:\n        almost_full_bonus = 0\n\n    # Large Item Penalty - discourage placing large items in bins with little space\n    large_item_threshold = bin_capacity * 0.8\n    if item > large_item_threshold:\n        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.1 * bin_capacity), -0.6, 0.0)\n    else:\n        small_space_penalty = 0.0\n\n    # Adaptive Weighting (Dynamically adjust based on item size and bin states)\n    item_size_factor = item / bin_capacity  # Normalize item size\n    tightness_weight = 0.4 #* (1 - item_size_factor) # Smaller items, prioritize tightness\n    fill_weight = 0.3 #* (1 + item_size_factor)   # Larger items, prioritize target fill\n    near_full_weight = 0.2\n    small_item_weight = 0.1\n    large_item_weight = 0.1\n\n    # Stochasticity (Add slight randomness to break ties)\n    randomness = np.random.normal(0, 0.01, len(valid_bins))\n\n    # Combine scores with weights\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus +\n                               large_item_weight * small_space_penalty +\n                               randomness)\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, 0.0)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2)) # Gaussian-like score\n\n    # Near-full penalty\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)\n\n    # Small item bonus\n    small_item_threshold = bins_remain_cap.max() * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bins_remain_cap.max() * 0.1\n        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold)\n    else:\n        almost_full_bonus = 0\n\n    # Combine scores with weights\n    tightness_weight = 0.4\n    fill_weight = 0.3\n    near_full_weight = 0.2\n    small_item_weight = 0.1\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus)\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, 0.0)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2)) # Gaussian-like score\n\n    # Near-full penalty\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)\n\n    # Small item bonus\n    small_item_threshold = bins_remain_cap.max() * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bins_remain_cap.max() * 0.1\n        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold)\n    else:\n        almost_full_bonus = 0\n\n    # Combine scores with weights\n    tightness_weight = 0.4\n    fill_weight = 0.3\n    near_full_weight = 0.2\n    small_item_weight = 0.1\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus)\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty,\n    with adaptive weighting and improved edge case handling.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, -1.0)  # Strongly penalize if no fit\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))  # Gaussian-like score\n\n    # Near-full penalty: Increased penalty, especially for large items\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -1.0 * (item / bins_remain_cap.max()), 0.0)  # Penalty scaled by item size\n\n    # Small item bonus: Encourage filling almost full bins, but only if it doesn't create tiny waste\n    small_item_threshold = bins_remain_cap.max() * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bins_remain_cap.max() * 0.1\n        really_small_waste_threshold = bins_remain_cap.max() * 0.01\n        almost_full_bonus = np.where((bins_remain_cap[can_fit] > item) & (remaining_after > really_small_waste_threshold),\n                                      np.exp(-remaining_after / almost_full_threshold),\n                                      0.0)\n    else:\n        almost_full_bonus = 0\n\n    # Adaptive Weighting: Adjust weights based on item size\n    item_size_ratio = item / bins_remain_cap.max()\n    tightness_weight = 0.5 - 0.2 * item_size_ratio  # Larger items, less tightness emphasis\n    fill_weight = 0.2 + 0.2 * item_size_ratio  # Larger items, more fill emphasis\n    near_full_weight = 0.2 + 0.1 * item_size_ratio # larger item, more near full penality\n    small_item_weight = 0.1 - 0.1 * item_size_ratio  # Smaller items, more small item bonus\n\n    # Ensure weights are within reasonable bounds\n    tightness_weight = np.clip(tightness_weight, 0.1, 0.5)\n    fill_weight = np.clip(fill_weight, 0.1, 0.4)\n    near_full_weight = np.clip(near_full_weight, 0.1, 0.3)\n    small_item_weight = np.clip(small_item_weight, 0.0, 0.2)\n\n    # Prioritize empty bins if the item is large enough\n    large_item_threshold = 0.6 * bins_remain_cap.max()\n    if item > large_item_threshold:\n        empty_bin_indices = np.where(bins_remain_cap == bins_remain_cap.max())[0]\n        empty_bin_indices_can_fit = np.intersect1d(empty_bin_indices, valid_bins)  # empty bin and can fit.\n        if len(empty_bin_indices_can_fit) >0:\n            priorities[empty_bin_indices_can_fit] += 0.5 # give empty bin extra score\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus)\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, near-full penalty,\n    item-size aware target and bin diversity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, 0.0)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Item-size aware target fill level\n    max_bin_cap = bins_remain_cap.max()\n    item_ratio = item / max_bin_cap\n    target_fill_level = (0.6 + 0.3 * item_ratio) * max_bin_cap # Adjust target fill based on item size\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (max_bin_cap * 0.2)) # Gaussian-like score\n\n    # Near-full penalty, adjusted for item size\n    near_full_threshold = (0.05 + 0.05 * item_ratio) * max_bin_cap\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0)\n\n    # Small item bonus, now less aggressive\n    small_item_threshold = max_bin_cap * 0.15\n    if item < small_item_threshold:\n        almost_full_threshold = max_bin_cap * 0.07\n        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold) * 0.7\n    else:\n        almost_full_bonus = 0\n\n    # Bin Diversity Bonus (Encourage using bins with different fill levels)\n    bin_diversity_bonus = np.zeros_like(bins_remain_cap[can_fit], dtype=float)\n    if len(bins_remain_cap) > 1:\n        fill_levels = bins_remain_cap[can_fit]\n        fill_level_std = np.std(bins_remain_cap) # diversity metric\n        bin_diversity_bonus = fill_level_std * 0.1\n\n\n    # Adaptive weights based on remaining capacities\n    total_capacity = np.sum(bins_remain_cap)\n    tightness_weight = 0.3 + 0.1 * (total_capacity / (len(bins_remain_cap) * max_bin_cap))\n    fill_weight = 0.35 -  0.1 * (total_capacity / (len(bins_remain_cap) * max_bin_cap))\n    near_full_weight = 0.2\n    small_item_weight = 0.15\n\n    # Combine scores with adaptive weights\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus +\n                               bin_diversity_bonus)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, target fill, waste minimization, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)\n\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, target fill, waste minimization, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)\n\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, target fill, waste minimization, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)\n\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill level, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste\n\n        # Target fill level\n        target_capacity = 0.75 * bins_remain_cap.max()\n        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n        # Near-full penalty\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n\n        # Randomness\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01\n\n        # Fill percentage bonus\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill level, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste\n\n        # Target fill level\n        target_capacity = 0.75 * bins_remain_cap.max()\n        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n        # Near-full penalty\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n\n        # Randomness\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01\n\n        # Fill percentage bonus\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit, target fill, waste minimization, & randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (remaining_space + 0.0001)\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)\n\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    #nearly full penality\n    nearly_full_threshold = bins_remain_cap.max() * 0.1\n    nearly_full = bins_remain_cap[valid_bins] < nearly_full_threshold\n    combined_score[nearly_full] *= 0.6\n\n    priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness, target fill, and waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Tightness score\n    tightness = 1 / (remaining_after + 0.0001)\n\n    # Target fill level score\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[can_fit] - target_fill)\n    fill_level_score = 1 / (fill_level_diff + 0.0001)\n\n    # Waste minimization score\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_after > waste_threshold, 0.1, 1.0)\n\n    # Adaptive weighting based on the number of valid bins\n    num_valid = np.sum(can_fit)\n    if num_valid > 5:\n        tightness_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        tightness_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_level_score +\n                               waste_weight * waste_score)\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization, target fill and nearly full bin penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_within_capacity = bins_remain_cap >= item\n    nearly_full_threshold = 0.1\n    nearly_full_penalty = 0.5\n\n    if np.any(fit_within_capacity):\n        # Wasted space minimization (primary objective)\n        wasted_space = bins_remain_cap[fit_within_capacity] - item\n        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)\n\n        # Target fill ratio (secondary objective)\n        fill_ratios = item / bins_remain_cap[fit_within_capacity]\n        target_fill = 0.8\n        fill_ratio_priority = -np.abs(fill_ratios - target_fill)\n        priorities[fit_within_capacity] += fill_ratio_priority * 0.1\n\n        # Penalize nearly full bins to avoid creating tiny fragments\n        nearly_full = bins_remain_cap < nearly_full_threshold * np.max(bins_remain_cap)\n        priorities[nearly_full] *= (1 - nearly_full_penalty)\n\n        # Add a bit of randomness to escape local optima\n        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01\n        priorities[fit_within_capacity] += randomness\n    else:\n        priorities = -np.inf * np.ones_like(priorities)\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill level, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste\n\n        # Target fill level\n        target_capacity = 0.75 * bins_remain_cap.max()\n        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n        # Near-full penalty\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n\n        # Randomness\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01\n\n        # Fill percentage bonus\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage\n\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness, target fill, and waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Tightness score\n    tightness = 1 / (remaining_after + 0.0001)\n\n    # Target fill level score\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[can_fit] - target_fill)\n    fill_level_score = 1 / (fill_level_diff + 0.0001)\n\n    # Waste minimization score\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_after > waste_threshold, 0.1, 1.0)\n\n    # Adaptive weighting based on the number of valid bins\n    num_valid = np.sum(can_fit)\n    if num_valid > 5:\n        tightness_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        tightness_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_level_score +\n                               waste_weight * waste_score)\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization, target fill and nearly full bin penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_within_capacity = bins_remain_cap >= item\n    nearly_full_threshold = 0.1\n    nearly_full_penalty = 0.5\n\n    if np.any(fit_within_capacity):\n        # Wasted space minimization (primary objective)\n        wasted_space = bins_remain_cap[fit_within_capacity] - item\n        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)\n\n        # Target fill ratio (secondary objective)\n        fill_ratios = item / bins_remain_cap[fit_within_capacity]\n        target_fill = 0.8\n        fill_ratio_priority = -np.abs(fill_ratios - target_fill)\n        priorities[fit_within_capacity] += fill_ratio_priority * 0.1\n\n        # Penalize nearly full bins to avoid creating tiny fragments\n        nearly_full = bins_remain_cap < nearly_full_threshold * np.max(bins_remain_cap)\n        priorities[nearly_full] *= (1 - nearly_full_penalty)\n\n        # Add a bit of randomness to escape local optima\n        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01\n        priorities[fit_within_capacity] += randomness\n    else:\n        priorities = -np.inf * np.ones_like(priorities)\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering waste, target fill, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    # Waste minimization score\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    # Target fill level\n    target_fill = 0.75 * bins_remain_cap.max()\n    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (fill_diff + 0.0001)\n    \n    # Near-full penalty\n    nearly_full_threshold = 0.075 * bins_remain_cap.max()\n    nearly_full = fit_score < nearly_full_threshold\n    priorities[valid_bins][nearly_full] *= 0.6\n\n    # Randomness for exploration\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.04\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering waste, target fill, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    # Waste minimization score\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    # Target fill level\n    target_fill = 0.75 * bins_remain_cap.max()\n    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (fill_diff + 0.0001)\n    \n    # Near-full penalty\n    nearly_full_threshold = 0.075 * bins_remain_cap.max()\n    nearly_full = fit_score < nearly_full_threshold\n    priorities[valid_bins][nearly_full] *= 0.6\n\n    # Randomness for exploration\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.04\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                tightness_weight_small_item: float = 0.9682226519965254,\n                tightness_weight_large_item: float = 0.8981181009329857,\n                target_fill_level_ratio: float = 0.37029588512101663,\n                fill_score_sensitivity: float = 0.10769300959980083,\n                fill_weight: float = 0.044526362882942316,\n                near_full_threshold_ratio: float = 0.056727158064249376,\n                near_full_penalty: float = -0.43903797696259605,\n                near_full_weight: float = 0.46155562547775864,\n                large_item_threshold_ratio: float = 0.5106340607900381,\n                almost_empty_threshold_ratio: float = 0.9617568173367381,\n                large_item_penalty: float = -0.05028162045165774,\n                large_item_weight: float = 0.8884059248723071,\n                randomness_scale: float = 0.020848673040825785) -> np.ndarray:\n    \"\"\"\n    A refined priority function for online bin packing, incorporating adaptive weighting,\n    edge case handling, and stochastic elements.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, 0.0)\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}