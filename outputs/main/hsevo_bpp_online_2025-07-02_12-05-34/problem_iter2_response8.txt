```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and current fill level, with small penalty for near-full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    tightness = 1 / (remaining_after + 0.0001)
    fullness = 1 - (bins_remain_cap[can_fit] / bins_remain_cap.max())
    near_full_penalty = np.where(remaining_after < (0.1 * bins_remain_cap.max()), -0.2, 0.0)  # Penalty if bin nearly full

    priorities[valid_bins] = (0.6 * tightness) + (0.3 * fullness) + near_full_penalty
    return priorities
```
