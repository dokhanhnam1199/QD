```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic with dynamic weighting, decaying randomness, and bin/item characteristics."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization with exponential scaling
    waste = remaining_after
    tightness = np.exp(-waste / (bin_capacity * 0.1))

    # Target Fill Level with adaptive target
    current_avg_fill = np.mean((bin_capacity - bins_remain_cap) / bin_capacity)
    target_fill_level = 0.75 * bin_capacity  # Base target
    target_fill_level += 0.1 * bin_capacity * (current_avg_fill - 0.5)  # Adjust based on average fill
    target_fill_level = np.clip(target_fill_level, 0.5 * bin_capacity, 0.9 * bin_capacity) # Keep target within bounds

    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Dynamic Near-Full Management with Item-Size aware penalty
    near_full_threshold = 0.12 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.8 * (item / bin_capacity) * (1 - bins_utilization), 0.0)

    # Smaller Item Bonus adjusted by remaining capacity
    small_item_threshold = bin_capacity * 0.25
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.1
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001)) * (1 - (remaining_after/bin_capacity)) # Scale bonus by remaining capacity
    else:
        almost_full_bonus = 0.0

    # Larger Item Penalty adjusted by bin utilization
    large_item_threshold = bin_capacity * 0.75
    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.1 * bin_capacity), -0.7 * (item / bin_capacity) * (1 + bins_utilization), 0.0)
    else:
        small_space_penalty = 0.0

    # Adaptive Weighting: item size & bin utilization
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    tightness_weight = 0.35 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.35 * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = 0.15
    small_item_weight = 0.075
    large_item_weight = 0.075

    # Decaying Stochasticity
    decay_rate = 0.995  # Adjust decay rate as needed
    randomness_scale = 0.015 * (1 + item_size_factor) * (1 - utilization_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))
    randomness *= (decay_rate ** len(bins_remain_cap)) # Reduce randomness over time or number of items

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               randomness)

    return priorities
```
