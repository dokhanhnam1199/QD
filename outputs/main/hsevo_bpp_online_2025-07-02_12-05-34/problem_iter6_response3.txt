```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, iteration: int = 0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        iteration: The current iteration number (can be used for adaptive strategies).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # Calculate remaining space after placing the item
    fit_score = bins_remain_cap[valid_bins] - item

    # Prioritize bins based on multiple factors with adaptive weights

    # 1. Minimize Wasted Space (Best Fit)
    waste_priority = 1.0 / (fit_score + 0.0001)

    # 2. Fill Level Target (Try to keep bins around a certain fill level)
    target_fill_level = bins_remain_cap.max() * 0.75  # Aim for 75% full
    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill_level)
    fill_level_priority = 1.0 / (fill_level_diff + 0.0001)

    # 3. Avoid near-empty bins (encourage consolidation)
    near_empty_threshold = bins_remain_cap.max() * 0.1
    near_empty_bonus = (bins_remain_cap[valid_bins] > near_empty_threshold).astype(float) * 0.5 # give 0.5 bonus if not near empty

    # Adaptive Weighting (adjust based on iteration - example)
    waste_weight = 0.6 # Base waste weight.
    fill_weight = 0.3
    empty_weight = 0.1

    # Apply weights and combine priorities
    priorities[valid_bins] = (waste_weight * waste_priority +
                                fill_weight * fill_level_priority +
                                empty_weight * near_empty_bonus)
    
    # Add some randomization to avoid local optima (simulated annealing inspired)
    temperature = max(0.01, 1.0 - (iteration / 1000.0))  # Decay temperature over iterations
    priorities[valid_bins] += np.random.normal(0, temperature, size=np.sum(valid_bins))

    return priorities
```
