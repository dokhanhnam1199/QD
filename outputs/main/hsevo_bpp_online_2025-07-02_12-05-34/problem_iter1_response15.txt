```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A novel heuristic inspired by the celestial dance! We consider both how well the item "fits"
    into a bin (like a planet finding its orbit) AND a tendency to fill bins, thus reducing waste
    (akin to consolidating heavenly matter).  We want bins where the item fits reasonably well,
    but also bins that aren't *already* almost full.  A near-empty bin is given a low priority unless
    the item almost perfectly fits it.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # The item *can* fit. This is good, let's consider.

            # "Fit" score:  Smaller remaining space after insertion is *better*,
            # but give HUGE penalty if item is more than 90% the size of bin,
            # so we don't force bins to be packed tight with possibly bad fit.

            remaining_space = cap - item
            if item > 0.9 * cap:  #Prevent from filling up to 90%
                fit_score = -1e9
            elif remaining_space == 0: #The best fit possible
                fit_score = 1e9
            else:
                fit_score = 1.0 / (remaining_space + 0.0001) #avoid division by 0

            # "Fill" score: Bins that are already pretty full are slightly penalized, to encourage
            # more completely filled bins rather than lots of almost-empty bins. This only
            # works if it is more efficient to group larger items.
            fill_score = cap #Larger cap gives more score.

            priorities[i] = fit_score + fill_score
        else:
            # The item *cannot* fit.  Priority is zero or negative infinity!
            priorities[i] = -np.inf
    return priorities
```
