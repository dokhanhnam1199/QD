```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have enough space for the item
    but also penalizes bins that would have too much space remaining
    after the item is added (to avoid excessive fragmentation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_space = cap - item
            # Reward bins that can fit the item
            priorities[i] += 1.0

            # Penalize bins that would leave too much space unused (fragmentation)
            # The amount of penalty depends on how much space is left, relative to the item size
            # We use a sigmoid function to create a smooth penalty that saturates.
            penalty = 1 / (1 + np.exp(-5 * (remaining_space / item - 0.5))) # Sigmoid scaled to item size
            priorities[i] -= penalty

            # Prioritize bins where the remaining space is closest to zero.
            priorities[i] += np.exp(-10 * remaining_space / np.max(bins_remain_cap))
        else:
            # Very negative priority if the item doesn't fit
            priorities[i] = -1e9
    return priorities
```
