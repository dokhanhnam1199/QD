```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, randomness, and near-full penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -np.inf)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    
    # Waste minimization: Prioritize tighter fits
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target fill level (e.g., 75%): Reward bins closer to target
    target_fill_level = 0.75 * bins_remain_cap.max()
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = 1 / (fill_diff + 0.0001)

    # Near-full penalty
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)  # Stronger penalty

    # Randomness to escape local optima
    randomness = np.random.rand(len(valid_bins)) * 0.05

    # Combine scores with weights
    priorities[valid_bins] = (0.5 * tightness) + (0.3 * fill_score) + near_full_penalty + randomness
    return priorities
```
