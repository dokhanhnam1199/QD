```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio target, remaining capacity, and penalizes tight fits."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity < item:
            priorities[i] = -np.inf
        else:
            fill_ratio = item / capacity
            priority_fill_ratio = -abs(fill_ratio - 0.8)  # Target fill around 0.8
            remaining_capacity = capacity - item
            priority_remaining_capacity = (1-remaining_capacity/capacity)
            if capacity <= 1.1*item:
                priority_close_capacity = -10
            else:
                priority_close_capacity = 0
            priorities[i] = priority_fill_ratio + priority_remaining_capacity + priority_close_capacity
    return priorities
```
