```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Encourages filling bins as much as possible (minimize wasted space)
    but penalizes bins that are too full after placing item. Also give preference
    to bins which can accommodate the item to minimize fragmentation

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Preference to bins that can fit the item
            fill_ratio = item / capacity

            # Encourage bins to be filled completely but not overfilled
            priority = (1 - np.abs(fill_ratio - 0.8)) #0.8 selected by experimentation to see performance

            #Add scaling for remaining capacity, to prefer filling bins
            remaining_capacity = capacity - item
            priority = priority + (1-remaining_capacity/capacity) #Higher priority for less remaining
            priorities[i] = priority

        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority

    return priorities
```
