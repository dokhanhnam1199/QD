```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced heuristic with refined adaptive weights, dynamic strategies, and controlled randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # 1. Waste Minimization (Tightness) - Enhanced
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)  # Avoid division by zero

    # 2. Target Fill Level - Adaptive Target
    # Target adjusts based on average remaining capacity and item size
    avg_remaining = np.mean(bins_remain_cap[can_fit])
    target_fill_level = min(0.9 * bin_capacity, avg_remaining + 0.1*bin_capacity) # Target near avg remaining, up to 90% full
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.25))  # Adjusted scaling

    # 3. Dynamic Near-Full Management - Aggressive
    near_full_threshold = 0.10 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item / bin_capacity), 0.0) # Increased penalty

    # 4. Item Size Bonuses/Penalties - Context Aware
    small_item_threshold = bin_capacity * 0.2
    large_item_threshold = bin_capacity * 0.8

    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.08
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0.0

    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.05 * bin_capacity), -0.8 * (item / bin_capacity), 0.0) # Stricter penalty
    else:
        small_space_penalty = 0.0

    # 5. Bin Diversity Encouragement
    # Penalize bins that are very similar in remaining capacity to promote diversity
    capacity_std = np.std(bins_remain_cap[can_fit])
    diversity_bonus = np.exp(-capacity_std / bin_capacity) # High std -> High bonus.

    # 6. Adaptive Weighting Scheme - More Dynamic
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)
    remaining_capacity_factor = avg_remaining / bin_capacity

    # Weights now react to item size, utilization and average remaning capacity
    tightness_weight = 0.3 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.3 * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = 0.2 * (1 - remaining_capacity_factor) # Less remaining capacity -> More importance on near full
    small_item_weight = 0.1 * (1 + item_size_factor) # Smaller items -> more importance
    large_item_weight = 0.1 * (1 - item_size_factor) # Larger items -> less importance

    # 7. Controlled Stochasticity - Adaptive Scale
    # Randomness scales with item size, utilization, and bin fill level
    randomness_scale = 0.02 * (1 + item_size_factor) * (1 - utilization_factor) * (1 - remaining_capacity_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    # 8. Combine Priorities
    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               0.05 * diversity_bonus +
                               randomness)

    return priorities
```
