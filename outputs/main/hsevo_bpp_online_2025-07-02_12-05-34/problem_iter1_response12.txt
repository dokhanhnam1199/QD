```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A subtle blend of gravity and least-action principles, balanced with a touch of divine chaos.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with small values.  Let no bin start at absolute zero, for nature abhors a vacuum.
    priorities = np.zeros_like(bins_remain_cap, dtype=float) + 1e-9  # Ensure non-zero values to prevent division errors and ensure that zero capacity bins have non-zero values (penalized later).

    # Gravity component:  Bins closer to the item's size attract more strongly. Inverse square law, naturally.
    gravity = np.exp(-((bins_remain_cap - item)**2) / (2 * (item/3)**2)) # A gaussian function.

    # Least action: Favor bins where the item fits almost perfectly, avoiding both waste and overflow.  Think of it as minimizing wasted potential energy.
    waste = bins_remain_cap - item  # How much space remains after adding the item
    # Give very low priority (large negative number) if waste is negative. Let nature abhor overflow.
    waste_penalty = np.where(waste < 0, -1e9, 0)
    waste[waste < 0] = 0  # Reset negative waste to 0 for calculations.

    # Prefer smaller waste amounts, to avoid having bins with much empty spaces,
    # however, avoid too small wastes to avoid bins that overflow when perturbed by small changes.

    waste_optimization = np.exp(-(waste**2)/((item/4)**2))

    # Combine the forces: Gravity attracts, least action guides. Let there be balance.
    priorities = gravity * waste_optimization + waste_penalty

    # Introduce a touch of divine chaos:  A small random element to prevent settling into local minima. The subtle hand of the Almighty.
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    # Ensure bins that cannot fit the item have VERY low priority. Bins that cannot accommodate shall not be considered.
    priorities[bins_remain_cap < item] = -1e9


    return priorities
```
