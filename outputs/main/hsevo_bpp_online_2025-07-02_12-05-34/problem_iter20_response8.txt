```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive weighting, waste minimization, and targeted fill."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    max_bin_cap = bins_remain_cap.max()
    bins_utilization = (max_bin_cap - bins_remain_cap[can_fit]) / max_bin_cap

    # Waste minimization
    waste = remaining_after
    tightness = 1.0 / (1e-6 + waste)
    item_size_factor = item / max_bin_cap
    utilization_factor = np.mean(bins_utilization)
    tightness_weight = 0.4 * (1 - item_size_factor) * (1 + utilization_factor)


    # Target fill level
    target_fill = 0.75 * max_bin_cap
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_priority = np.exp(-fill_diff / max_bin_cap)
    fill_weight = 0.3 * (1 + item_size_factor) * (1 - utilization_factor)

    # Near-full penalty
    nearly_full_threshold = 0.1 * max_bin_cap
    near_full_penalty = np.where(remaining_after < nearly_full_threshold, -0.5, 0.0)
    penalty_weight = 0.2

    # Item size consideration (adaptive randomness)
    randomness_scale = 0.01 * (1 - item_size_weight)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))
    random_weight = 0.1

    priorities[valid_bins] = (tightness_weight * tightness +
                              fill_weight * fill_priority +
                              penalty_weight * near_full_penalty +
                              random_weight * randomness)

    return priorities
```
