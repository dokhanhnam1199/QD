```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, near-full penalty, and adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        priorities[:] = np.random.rand(len(priorities)) * 0.0001
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Tightness score
    tightness = 1 / (remaining_after + 0.0001)

    # Target fill level score
    target_fill = bins_remain_cap.max() * 0.75
    fill_level_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_level_score = np.exp(-fill_level_diff / (bins_remain_cap.max() * 0.2))

    # Near-full penalty
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)

    # Adaptive weighting
    num_valid = np.sum(can_fit)
    if num_valid > 5:
        tightness_weight = 0.5
        fill_weight = 0.3
        near_full_weight = 0.2
    else:
        tightness_weight = 0.4
        fill_weight = 0.4
        near_full_weight = 0.2

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_level_score +
                               near_full_weight * near_full_penalty)
    return priorities
```
